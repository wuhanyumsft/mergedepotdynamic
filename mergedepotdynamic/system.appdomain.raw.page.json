{"content":"    \r\n    <h1 id=\"System_AppDomain\">\r\n      <span class=\"lang-csharp\">AppDomain</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an application domain, which is an isolated environment where applications execute. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System._AppDomain))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class AppDomain : MarshalByRefObject, _AppDomain, System.Security.IEvidenceFactory</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">System.MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AppDomain</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Application domains, which are represented by AppDomain objects, help provide isolation, unloading, and security boundaries for executing managed code.  </p>\n<ul>\n<li><p>Use application domains to isolate tasks that might bring down a process. If the state of the AppDomain that&#39;s executing a task becomes unstable, the AppDomain can be unloaded without affecting the process. This is important when a process must run for long periods without restarting. You can also use application domains to isolate tasks that should not share data.  </p>\n</li>\n<li><p>If an assembly is loaded into the default application domain, it cannot be unloaded from memory while the process is running. However, if you open a second application domain to load and execute the assembly, the assembly is unloaded when that application domain is unloaded. Use this technique to minimize the working set of long-running processes that occasionally use large DLLs.  </p>\n<p>Multiple application domains can run in a single process; however, there is not a one-to-one correlation between application domains and threads. Several threads can belong to a single application domain, and while a given thread is not confined to a single application domain, at any given time, a thread executes in a single application domain.  </p>\n<p>Application domains are created using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateDomain_\" data-linktype=\"relative-path\">CreateDomain</a> method. AppDomain instances are used to load and execute assemblies (<a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>). When an AppDomain is no longer in use, it can be unloaded.  </p>\n<p>The AppDomain class implements a set of events that enable applications to respond when an assembly is loaded, when an application domain will be unloaded, or when an unhandled exception is thrown.  </p>\n<p>For more information on using application domains, see <a href=\"../Topic/Application%20Domains.md\" data-linktype=\"relative-path\">Application Domains</a>.  </p>\n<p>This class implements the <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, <a class=\"xref\" href=\"system._appdomain\" data-linktype=\"relative-path\">_AppDomain</a>, and <a class=\"xref\" href=\"system.security.ievidencefactory\" data-linktype=\"relative-path\">IEvidenceFactory</a> interfaces.  </p>\n<p>You should never create a remotable wrapper for an AppDomain object. Doing so could publish a remote reference to that AppDomain, exposing methods such as <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> to remote access and effectively destroying code access security for that AppDomain. Malicious clients connecting to the remoted AppDomain could obtain access to any resource the AppDomain itself has access to. Do not create remotable wrappers for any type that extends <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> and that implements methods that could be used by malicious clients to bypass the security system.  </p>\n</li>\n</ul>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The default value for the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DisallowCodeDownload_\" data-linktype=\"relative-path\">DisallowCodeDownload</a> property is <code>false</code>. This setting is unsafe for services. To prevent services from downloading partially trusted code, set this property to <code>true</code>.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ActivationContext\" data-linktype=\"self-bookmark\">ActivationContext</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the activation context for the current application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ApplicationIdentity\" data-linktype=\"self-bookmark\">ApplicationIdentity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the identity of the application in the application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ApplicationTrust\" data-linktype=\"self-bookmark\">ApplicationTrust</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets information describing permissions granted to an application and whether the application has a trust level that allows it to run.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_BaseDirectory\" data-linktype=\"self-bookmark\">BaseDirectory</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the base directory that the assembly resolver uses to probe for assemblies.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CurrentDomain\" data-linktype=\"self-bookmark\">CurrentDomain</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current application domain for the current <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DomainManager\" data-linktype=\"self-bookmark\">DomainManager</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the domain manager that was provided by the host when the application domain was initialized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DynamicDirectory\" data-linktype=\"self-bookmark\">DynamicDirectory</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the directory that the assembly resolver uses to probe for dynamically created assemblies.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_Evidence\" data-linktype=\"self-bookmark\">Evidence</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> associated with this application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_FriendlyName\" data-linktype=\"self-bookmark\">FriendlyName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the friendly name of this application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_Id\" data-linktype=\"self-bookmark\">Id</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an integer that uniquely identifies the application domain within the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_IsFullyTrusted\" data-linktype=\"self-bookmark\">IsFullyTrusted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether assemblies that are loaded into the current application domain execute with full trust.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_IsHomogenous\" data-linktype=\"self-bookmark\">IsHomogenous</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current application domain has a set of permissions that is granted to all assemblies that are loaded into the application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_MonitoringIsEnabled\" data-linktype=\"self-bookmark\">MonitoringIsEnabled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether CPU and memory monitoring of application domains is enabled for the current process. Once monitoring is enabled for a process, it cannot be disabled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_MonitoringSurvivedMemorySize\" data-linktype=\"self-bookmark\">MonitoringSurvivedMemorySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of bytes that survived the last collection and that are known to be referenced by the current application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_MonitoringSurvivedProcessMemorySize\" data-linktype=\"self-bookmark\">MonitoringSurvivedProcessMemorySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the total bytes that survived from the last collection for all application domains in the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_MonitoringTotalAllocatedMemorySize\" data-linktype=\"self-bookmark\">MonitoringTotalAllocatedMemorySize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the total size, in bytes, of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_MonitoringTotalProcessorTime\" data-linktype=\"self-bookmark\">MonitoringTotalProcessorTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the total processor time that has been used by all threads while executing in the current application domain, since the process started.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_PermissionSet\" data-linktype=\"self-bookmark\">PermissionSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the permission set of a sandboxed application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_RelativeSearchPath\" data-linktype=\"self-bookmark\">RelativeSearchPath</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the path under the base directory where the assembly resolver should probe for private assemblies.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_SetupInformation\" data-linktype=\"self-bookmark\">SetupInformation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the application domain configuration information for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ShadowCopyFiles\" data-linktype=\"self-bookmark\">ShadowCopyFiles</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an indication whether the application domain is configured to shadow copy files.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_AppendPrivatePath_System_String_\" data-linktype=\"self-bookmark\">AppendPrivatePath(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the specified directory name to the private path list.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ApplyPolicy_System_String_\" data-linktype=\"self-bookmark\">ApplyPolicy(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the assembly display name after policy has been applied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ClearPrivatePath\" data-linktype=\"self-bookmark\">ClearPrivatePath()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the path that specifies the location of private assemblies to the empty string (&quot;&quot;).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ClearShadowCopyPath\" data-linktype=\"self-bookmark\">ClearShadowCopyPath()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the list of directories containing shadow copied assemblies to the empty string (&quot;&quot;).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateComInstanceFrom_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateComInstanceFrom(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of a specified COM type. Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateComInstanceFrom_System_String_System_String_System_Byte___System_Configuration_Assemblies_AssemblyHashAlgorithm_\" data-linktype=\"self-bookmark\">CreateComInstanceFrom(String,String,Byte[],AssemblyHashAlgorithm)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of a specified COM type. Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateDomain_System_String_\" data-linktype=\"self-bookmark\">CreateDomain(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new application domain with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateDomain_System_String_System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">CreateDomain(String,Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new application domain with the given name using the supplied evidence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateDomain_System_String_System_Security_Policy_Evidence_System_AppDomainSetup_\" data-linktype=\"self-bookmark\">CreateDomain(String,Evidence,AppDomainSetup)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new application domain using the specified name, evidence, and application domain setup information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateDomain_System_String_System_Security_Policy_Evidence_System_AppDomainSetup_System_Security_PermissionSet_System_Security_Policy_StrongName___\" data-linktype=\"self-bookmark\">CreateDomain(String,Evidence,AppDomainSetup,PermissionSet,StrongName[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new application domain using the specified name, evidence, application domain setup information, default permission set, and array of fully trusted assemblies.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateDomain_System_String_System_Security_Policy_Evidence_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">CreateDomain(String,Evidence,String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateDomain_System_String_System_Security_Policy_Evidence_System_String_System_String_System_Boolean_System_AppDomainInitializer_System_String___\" data-linktype=\"self-bookmark\">CreateDomain(String,Evidence,String,String,Boolean,AppDomainInitializer,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain. Specifies a callback method that is invoked when the application domain is initialized, and an array of string arguments to pass the callback method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstance_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateInstance(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstance_System_String_System_String_System_Object___\" data-linktype=\"self-bookmark\">CreateInstance(String,String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly. A parameter specifies an array of activation attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstance_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___\" data-linktype=\"self-bookmark\">CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly. Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, and optional activation attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstance_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly. Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization to create the type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstanceAndUnwrap_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateInstanceAndUnwrap(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type. Parameters specify the assembly where the type is defined, and the name of the type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstanceAndUnwrap_System_String_System_String_System_Object___\" data-linktype=\"self-bookmark\">CreateInstanceAndUnwrap(String,String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type. Parameters specify the assembly where the type is defined, the name of the type, and an array of activation attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstanceAndUnwrap_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___\" data-linktype=\"self-bookmark\">CreateInstanceAndUnwrap(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstanceAndUnwrap_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">CreateInstanceAndUnwrap(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type. Parameters specify the name of the type, and how it is found and created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstanceFrom_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateInstanceFrom(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstanceFrom_System_String_System_String_System_Object___\" data-linktype=\"self-bookmark\">CreateInstanceFrom(String,String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstanceFrom_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___\" data-linktype=\"self-bookmark\">CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstanceFrom_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstanceFromAndUnwrap_System_String_System_String_\" data-linktype=\"self-bookmark\">CreateInstanceFromAndUnwrap(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstanceFromAndUnwrap_System_String_System_String_System_Object___\" data-linktype=\"self-bookmark\">CreateInstanceFromAndUnwrap(String,String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstanceFromAndUnwrap_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___\" data-linktype=\"self-bookmark\">CreateInstanceFromAndUnwrap(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly file, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_CreateInstanceFromAndUnwrap_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">CreateInstanceFromAndUnwrap(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly with the specified name and access mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,IEnumerable&lt;CustomAttributeBuilder&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly with the specified name, access mode, and custom attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly using the specified name, access mode, and evidence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly using the specified name, access mode, and storage directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__System_Security_SecurityContextSource_\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,IEnumerable&lt;CustomAttributeBuilder&gt;,SecurityContextSource)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly with the specified name, access mode, and custom attributes, and using the specified source for its security context.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly using the specified name, access mode, storage directory, and evidence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,PermissionSet,PermissionSet,PermissionSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly using the specified name, access mode, and permission requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Boolean_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Boolean,IEnumerable&lt;CustomAttributeBuilder&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly using the specified name, access mode, storage directory, and synchronization option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Security_Policy_Evidence_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,Evidence,PermissionSet,PermissionSet,PermissionSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly using the specified name, access mode, evidence, and permission requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,PermissionSet,PermissionSet,PermissionSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly using the specified name, access mode, storage directory, and permission requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_Policy_Evidence_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Evidence,PermissionSet,PermissionSet,PermissionSet)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, and permission requests.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_Policy_Evidence_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_System_Boolean_\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Evidence,PermissionSet,PermissionSet,PermissionSet,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, permission requests, and synchronization option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_Policy_Evidence_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_System_Boolean_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\" data-linktype=\"self-bookmark\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Evidence,PermissionSet,PermissionSet,PermissionSet,Boolean,IEnumerable&lt;CustomAttributeBuilder&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines a dynamic assembly with the specified name, access mode, storage directory, evidence, permission requests, synchronization option, and custom attributes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DoCallBack_System_CrossAppDomainDelegate_\" data-linktype=\"self-bookmark\">DoCallBack(CrossAppDomainDelegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the code in another application domain that is identified by the specified delegate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ExecuteAssembly_System_String_\" data-linktype=\"self-bookmark\">ExecuteAssembly(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the assembly contained in the specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ExecuteAssembly_System_String_System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">ExecuteAssembly(String,Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the assembly contained in the specified file, using the specified evidence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ExecuteAssembly_System_String_System_String___\" data-linktype=\"self-bookmark\">ExecuteAssembly(String,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the assembly contained in the specified file, using the specified arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ExecuteAssembly_System_String_System_Security_Policy_Evidence_System_String___\" data-linktype=\"self-bookmark\">ExecuteAssembly(String,Evidence,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the assembly contained in the specified file, using the specified evidence and arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ExecuteAssembly_System_String_System_String___System_Byte___System_Configuration_Assemblies_AssemblyHashAlgorithm_\" data-linktype=\"self-bookmark\">ExecuteAssembly(String,String[],Byte[],AssemblyHashAlgorithm)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the assembly contained in the specified file, using the specified arguments, hash value, and hash algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ExecuteAssembly_System_String_System_Security_Policy_Evidence_System_String___System_Byte___System_Configuration_Assemblies_AssemblyHashAlgorithm_\" data-linktype=\"self-bookmark\">ExecuteAssembly(String,Evidence,String[],Byte[],AssemblyHashAlgorithm)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the assembly contained in the specified file, using the specified evidence, arguments, hash value, and hash algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ExecuteAssemblyByName_System_String_\" data-linktype=\"self-bookmark\">ExecuteAssemblyByName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes an assembly given its display name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ExecuteAssemblyByName_System_Reflection_AssemblyName_System_String___\" data-linktype=\"self-bookmark\">ExecuteAssemblyByName(AssemblyName,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the assembly given an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>, using the specified arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ExecuteAssemblyByName_System_String_System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">ExecuteAssemblyByName(String,Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes an assembly given its display name, using the specified evidence.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ExecuteAssemblyByName_System_String_System_String___\" data-linktype=\"self-bookmark\">ExecuteAssemblyByName(String,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the assembly given its display name, using the specified arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ExecuteAssemblyByName_System_Reflection_AssemblyName_System_Security_Policy_Evidence_System_String___\" data-linktype=\"self-bookmark\">ExecuteAssemblyByName(AssemblyName,Evidence,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the assembly given an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>, using the specified evidence and arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ExecuteAssemblyByName_System_String_System_Security_Policy_Evidence_System_String___\" data-linktype=\"self-bookmark\">ExecuteAssemblyByName(String,Evidence,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Executes the assembly given its display name, using the specified evidence and arguments.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_GetAssemblies\" data-linktype=\"self-bookmark\">GetAssemblies()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the assemblies that have been loaded into the execution context of this application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_GetCurrentThreadId\" data-linktype=\"self-bookmark\">GetCurrentThreadId()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current thread identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_GetData_System_String_\" data-linktype=\"self-bookmark\">GetData(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value stored in the current application domain for the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_GetType\" data-linktype=\"self-bookmark\">GetType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_InitializeLifetimeService\" data-linktype=\"self-bookmark\">InitializeLifetimeService()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gives the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> an infinite lifetime by preventing a lease from being created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_IsCompatibilitySwitchSet_System_String_\" data-linktype=\"self-bookmark\">IsCompatibilitySwitchSet(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a nullable Boolean value that indicates whether any compatibility switches are set, and if so, whether the specified compatibility switch is set.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_IsDefaultAppDomain\" data-linktype=\"self-bookmark\">IsDefaultAppDomain()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether the application domain is the default application domain for the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_IsFinalizingForUnload\" data-linktype=\"self-bookmark\">IsFinalizingForUnload()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether this application domain is unloading, and the objects it contains are being finalized by the common language runtime.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_Load_System_Byte___\" data-linktype=\"self-bookmark\">Load(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> with a common object file format (COFF) based image containing an emitted <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"self-bookmark\">Load(AssemblyName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> given its <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_Load_System_String_\" data-linktype=\"self-bookmark\">Load(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> given its display name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_Load_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">Load(Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> with a common object file format (COFF) based image containing an emitted <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>. The raw bytes representing the symbols for the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> are also loaded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_Load_System_Reflection_AssemblyName_System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">Load(AssemblyName,Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> given its <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_Load_System_String_System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">Load(String,Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> given its display name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_Load_System_Byte___System_Byte___System_Security_Policy_Evidence_\" data-linktype=\"self-bookmark\">Load(Byte[],Byte[],Evidence)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> with a common object file format (COFF) based image containing an emitted <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>. The raw bytes representing the symbols for the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> are also loaded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ReflectionOnlyGetAssemblies\" data-linktype=\"self-bookmark\">ReflectionOnlyGetAssemblies()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the assemblies that have been loaded into the reflection-only context of the application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_SetAppDomainPolicy_System_Security_Policy_PolicyLevel_\" data-linktype=\"self-bookmark\">SetAppDomainPolicy(PolicyLevel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Establishes the security policy level for this application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_SetCachePath_System_String_\" data-linktype=\"self-bookmark\">SetCachePath(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Establishes the specified directory path as the location where assemblies are shadow copied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_SetData_System_String_System_Object_\" data-linktype=\"self-bookmark\">SetData(String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Assigns the specified value to the specified application domain property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_SetData_System_String_System_Object_System_Security_IPermission_\" data-linktype=\"self-bookmark\">SetData(String,Object,IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Assigns the specified value to the specified application domain property, with a specified permission to demand of the caller when the property is retrieved.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_SetDynamicBase_System_String_\" data-linktype=\"self-bookmark\">SetDynamicBase(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Establishes the specified directory path as the base directory for subdirectories where dynamically generated files are stored and accessed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_SetPrincipalPolicy_System_Security_Principal_PrincipalPolicy_\" data-linktype=\"self-bookmark\">SetPrincipalPolicy(PrincipalPolicy)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies how principal and identity objects should be attached to a thread if the thread attempts to bind to a principal while executing in this application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_SetShadowCopyFiles\" data-linktype=\"self-bookmark\">SetShadowCopyFiles()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Turns on shadow copying.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_SetShadowCopyPath_System_String_\" data-linktype=\"self-bookmark\">SetShadowCopyPath(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Establishes the specified directory path as the location of assemblies to be shadow copied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_SetThreadPrincipal_System_Security_Principal_IPrincipal_\" data-linktype=\"self-bookmark\">SetThreadPrincipal(IPrincipal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the default principal object to be attached to threads if they attempt to bind to a principal while executing in this application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Obtains a string representation that includes the friendly name of the application domain and any context policies.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_Unload_System_AppDomain_\" data-linktype=\"self-bookmark\">Unload(AppDomain)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Unloads the specified application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_AssemblyLoad\" data-linktype=\"self-bookmark\">AssemblyLoad</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an assembly is loaded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_AssemblyResolve\" data-linktype=\"self-bookmark\">AssemblyResolve</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the resolution of an assembly fails.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_DomainUnload\" data-linktype=\"self-bookmark\">DomainUnload</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> is about to be unloaded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_FirstChanceException\" data-linktype=\"self-bookmark\">FirstChanceException</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an exception is thrown in managed code, before the runtime searches the call stack for an exception handler in the application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ProcessExit\" data-linktype=\"self-bookmark\">ProcessExit</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the default application domain&#39;s parent process exits.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ReflectionOnlyAssemblyResolve\" data-linktype=\"self-bookmark\">ReflectionOnlyAssemblyResolve</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the resolution of an assembly fails in the reflection-only context.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_ResourceResolve\" data-linktype=\"self-bookmark\">ResourceResolve</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the resolution of a resource fails because the resource is not a valid linked or embedded resource in the assembly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_TypeResolve\" data-linktype=\"self-bookmark\">TypeResolve</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the resolution of a type fails.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_UnhandledException\" data-linktype=\"self-bookmark\">UnhandledException</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when an exception is not caught.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_System__AppDomain_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_AppDomain.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_System__AppDomain_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_AppDomain.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_System__AppDomain_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_AppDomain.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomain_System__AppDomain_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_AppDomain.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ActivationContext\">\r\n    \r\n            <a id=\"System_AppDomain_ActivationContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ActivationContext</div>        \r\n          </div>\r\n    \r\n            <p>Gets the activation context for the current application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ActivationContext ActivationContext { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.activationcontext\" data-linktype=\"relative-path\">ActivationContext</a></div>\r\n                  </div>\r\n                  <p>An object that represents the activation context for the current application domain, or <code>null</code> if the domain has no activation context.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ApplicationIdentity\">\r\n    \r\n            <a id=\"System_AppDomain_ApplicationIdentity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplicationIdentity</div>        \r\n          </div>\r\n    \r\n            <p>Gets the identity of the application in the application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ApplicationIdentity ApplicationIdentity { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.applicationidentity\" data-linktype=\"relative-path\">ApplicationIdentity</a></div>\r\n                  </div>\r\n                  <p>An object that identifies the application in the application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ApplicationTrust\">\r\n    \r\n            <a id=\"System_AppDomain_ApplicationTrust_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplicationTrust</div>        \r\n          </div>\r\n    \r\n            <p>Gets information describing permissions granted to an application and whether the application has a trust level that allows it to run.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Policy.ApplicationTrust ApplicationTrust { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.applicationtrust\" data-linktype=\"relative-path\">ApplicationTrust</a></div>\r\n                  </div>\r\n                  <p>An object that encapsulates permission and trust information for the application in the application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_BaseDirectory\">\r\n    \r\n            <a id=\"System_AppDomain_BaseDirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseDirectory</div>        \r\n          </div>\r\n    \r\n            <p>Gets the base directory that the assembly resolver uses to probe for assemblies.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string BaseDirectory { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The base directory that the assembly resolver uses to probe for assemblies.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property corresponds to the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a> property. It can also be retrieved using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_GetData_\" data-linktype=\"relative-path\">GetData</a> method with the string &quot;APPBASE&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new application domain, specifying a base directory to use when searching for assemblies to load into the domain. The example then uses the BaseDirectory property to obtain the base directory path, for display to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"ADSetup#1\">using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Security.Policy;  \n\nclass ADSetup\n{\n    public static void Main()\n    {\n        // Create application domain setup information\n        var domaininfo = new AppDomainSetup();\n        domaininfo.ConfigurationFile = System.Environment.CurrentDirectory + \n                                       Path.DirectorySeparatorChar +\n                                       &quot;ADSetup.exe.config&quot;;\n        domaininfo.ApplicationBase = System.Environment.CurrentDirectory;\n\n        //Create evidence for the new appdomain from evidence of the current application domain\n        Evidence adEvidence = AppDomain.CurrentDomain.Evidence;\n\n        // Create appdomain\n        AppDomain domain = AppDomain.CreateDomain(&quot;Domain2&quot;, adEvidence, domaininfo);\n\n        // Display application domain information.\n        Console.WriteLine(&quot;Host domain: &quot; + AppDomain.CurrentDomain.FriendlyName);\n        Console.WriteLine(&quot;Child domain: &quot; + domain.FriendlyName);\n        Console.WriteLine();\n        Console.WriteLine(&quot;Configuration file: &quot; + domain.SetupInformation.ConfigurationFile);\n        Console.WriteLine(&quot;Application Base Directory: &quot; + domain.BaseDirectory);\n\n        AppDomain.Unload(domain);\n    }\n}\n// The example displays output like the following:\n//    Host domain: adsetup.exe\n//    Child domain: Domain2\n//    \n//    Configuration file: C:&nbsp;&nbsp;&nbsp;&nbsp;est\\ADSetup.exe.config\n//    Application Base Directory: C:&nbsp;&nbsp;&nbsp;&nbsp;est\n</code></pre><pre><code class=\"lang-cpp\" name=\"ADSetup#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Reflection;\nusing namespace System::Security::Policy;    // For Evidence object.\n\nint main()\n{\n   \n   // Create application domain setup information\n   AppDomainSetup^ domaininfo = gcnew AppDomainSetup;\n   domaininfo-&gt;ConfigurationFile = String::Format(&quot;{0}{1}ADSetup.exe.config&quot;, \n                                                  Environment::CurrentDirectory,\n                                                  Path::DirectorySeparatorChar);\n   domaininfo-&gt;ApplicationBase = String::Format(&quot;{0}&quot;, System::Environment::CurrentDirectory);\n   \n   //Create evidence for the new appdomain from evidence of the current application domain\n   Evidence^ adevidence = AppDomain::CurrentDomain-&gt;Evidence;\n   \n   // Create appdomain\n   AppDomain^ domain = AppDomain::CreateDomain(&quot;Domain2&quot;, adevidence, domaininfo);\n   \n   // Display application domain information\n   Console::WriteLine(&quot;Host domain: {0}&quot;, AppDomain::CurrentDomain-&gt;FriendlyName);\n   Console::WriteLine(&quot;Child domain: {0}&quot;, domain-&gt;FriendlyName);\n   Console::WriteLine();\n   Console::WriteLine(&quot;Configuration file: {0}&quot;, domain-&gt;SetupInformation-&gt;ConfigurationFile);\n   Console::WriteLine( &quot;Application Base Directory: {0}&quot;, domain-&gt;BaseDirectory);\n   \n   AppDomain::Unload(domain);\n}\n// The example displays output like the following:\n//    Host domain: adsetup.exe\n//    Child domain: Domain2\n//    \n//    Configuration file: C:&nbsp;&nbsp;&nbsp;&nbsp;est\\ADSetup.exe.config\n//    Application Base Directory: C:&nbsp;&nbsp;&nbsp;&nbsp;est\n</code></pre><pre><code class=\"lang-vb\" name=\"ADSetup#1\">Imports System\nImports System.IO\nImports System.Reflection\nImports System.Security.Policy   &#39; For evidence object.\n\nModule Example\n   Public Sub Main()\n      &#39; Create the application domain setup information.\n      Dim domaininfo As New AppDomainSetup()\n      domaininfo.ConfigurationFile = Environment.CurrentDirectory + \n                                    Path.DirectorySeparatorChar + \n                                     &quot;ADSetup.exe.config&quot;\n      domaininfo.ApplicationBase = Environment.CurrentDirectory\n      \n      &#39;Create evidence for the new appdomain from evidence of the current application domain.\n      Dim adEvidence As Evidence = AppDomain.CurrentDomain.Evidence\n      \n      &#39; Create appdomain.\n      Dim domain As AppDomain = AppDomain.CreateDomain(&quot;Domain2&quot;, adevidence, domaininfo)\n      \n      &#39; Display the application domain information.\n      Console.WriteLine((&quot;Host domain: &quot; + AppDomain.CurrentDomain.FriendlyName))\n      Console.WriteLine((&quot;Child domain: &quot; + domain.FriendlyName))\n      Console.WriteLine()\n      Console.WriteLine((&quot;Configuration file: &quot; + domain.SetupInformation.ConfigurationFile))\n      Console.WriteLine((&quot;Application Base Directory: &quot; + domain.BaseDirectory))\n     \n      AppDomain.Unload(domain)\n   End Sub \nEnd Module \n&#39; The example displays output like the following:\n&#39;    Host domain: adsetup.exe\n&#39;    Child domain: Domain2\n&#39;    \n&#39;    Configuration file: C:&nbsp;&nbsp;&nbsp;&nbsp;est\\ADSetup.exe.config\n&#39;    Application Base Directory: C:&nbsp;&nbsp;&nbsp;&nbsp;est\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CurrentDomain\">\r\n    \r\n            <a id=\"System_AppDomain_CurrentDomain_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentDomain</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current application domain for the current <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static AppDomain CurrentDomain { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a></div>\r\n                  </div>\r\n                  <p>The current application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new application domain. The CurrentDomain property is used to obtain an <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> object that represents the current application domain. The <a class=\"xref\" href=\"system.appdomain#System_AppDomain_FriendlyName_\" data-linktype=\"relative-path\">FriendlyName</a> property provides the name of the current application domain, which is then displayed at the command line.  </p>\n<pre><code class=\"lang-vb\" name=\"ADApplicationBase#1\">Class ADSetupInformation\n\n    Shared Sub Main()\n\n        Dim root As AppDomain = AppDomain.CurrentDomain\n\n        Dim setup As New AppDomainSetup()\n        setup.ApplicationBase = _\n            root.SetupInformation.ApplicationBase &amp; &quot;MyAppSubfolder\\&quot;\n\n        Dim domain As AppDomain = AppDomain.CreateDomain(&quot;MyDomain&quot;, Nothing, setup)\n\n        Console.WriteLine(&quot;Application base of {0}:&quot; &amp; vbCrLf &amp; vbTab &amp; &quot;{1}&quot;, _\n            root.FriendlyName, root.SetupInformation.ApplicationBase)\n        Console.WriteLine(&quot;Application base of {0}:&quot; &amp; vbCrLf &amp; vbTab &amp; &quot;{1}&quot;, _\n            domain.FriendlyName, domain.SetupInformation.ApplicationBase)\n\n        AppDomain.Unload(domain)\n    End Sub\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Application base of MyApp.exe:\n&#39;        C:\\Program Files\\MyApp\\\n&#39;Application base of MyDomain:\n&#39;        C:\\Program Files\\MyApp\\MyAppSubfolder\\\n</code></pre><pre><code class=\"lang-cpp\" name=\"ADApplicationBase#1\">using namespace System;\n\nint main()\n{\n    AppDomain^ root = AppDomain::CurrentDomain;\n\n    AppDomainSetup^ setup = gcnew AppDomainSetup();\n    setup-&gt;ApplicationBase = \n        root-&gt;SetupInformation-&gt;ApplicationBase + &quot;MyAppSubfolder\\\\&quot;;\n\n    AppDomain^ domain = AppDomain::CreateDomain(&quot;MyDomain&quot;, nullptr, setup);\n\n    Console::WriteLine(&quot;Application base of {0}:\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n        root-&gt;FriendlyName, root-&gt;SetupInformation-&gt;ApplicationBase);\n    Console::WriteLine(&quot;Application base of {0}:\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n        domain-&gt;FriendlyName, domain-&gt;SetupInformation-&gt;ApplicationBase);\n\n    AppDomain::Unload(domain);\n}\n\n/* This example produces output similar to the following:\n\nApplication base of MyApp.exe:\n        C:\\Program Files\\MyApp\\\nApplication base of MyDomain:\n        C:\\Program Files\\MyApp\\MyAppSubfolder\\\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ADApplicationBase#1\">using System;\n\nclass ADSetupInformation\n{\n    static void Main()\n    {\n        AppDomain root = AppDomain.CurrentDomain;\n\n        AppDomainSetup setup = new AppDomainSetup();\n        setup.ApplicationBase = \n            root.SetupInformation.ApplicationBase + @&quot;MyAppSubfolder\\&quot;;\n\n        AppDomain domain = AppDomain.CreateDomain(&quot;MyDomain&quot;, null, setup);\n\n        Console.WriteLine(&quot;Application base of {0}:\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n            root.FriendlyName, root.SetupInformation.ApplicationBase);\n        Console.WriteLine(&quot;Application base of {0}:\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n            domain.FriendlyName, domain.SetupInformation.ApplicationBase);\n\n        AppDomain.Unload(domain);\n    }\n}\n\n/* This example produces output similar to the following:\n\nApplication base of MyApp.exe:\n        C:\\Program Files\\MyApp\\\nApplication base of MyDomain:\n        C:\\Program Files\\MyApp\\MyAppSubfolder\\\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DomainManager\">\r\n    \r\n            <a id=\"System_AppDomain_DomainManager_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DomainManager</div>        \r\n          </div>\r\n    \r\n            <p>Gets the domain manager that was provided by the host when the application domain was initialized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AppDomainManager DomainManager { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainmanager\" data-linktype=\"relative-path\">AppDomainManager</a></div>\r\n                  </div>\r\n                  <p>An object that represents the domain manager provided by the host when the application domain was initialized, or <code>null</code> if no domain manager was provided.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An unmanaged host of the common language runtime (CLR) can provide a domain manager. The domain manager can participate in initializing the new application domain and supply other managers, such as a <a class=\"xref\" href=\"system.security.hostsecuritymanager\" data-linktype=\"relative-path\">HostSecurityManager</a>, that participate in the operations of the application domain.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DynamicDirectory\">\r\n    \r\n            <a id=\"System_AppDomain_DynamicDirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicDirectory</div>        \r\n          </div>\r\n    \r\n            <p>Gets the directory that the assembly resolver uses to probe for dynamically created assemblies.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string DynamicDirectory { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The directory that the assembly resolver uses to probe for dynamically created assemblies.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To set the dynamic directory, assign a base directory path to the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DynamicBase_\" data-linktype=\"relative-path\">DynamicBase</a> property of the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object that will be used to create the new application domain. The base directory path you assign to the property is modified by the addition of a subdirectory whose simple name is the hash code of the string you assign to the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> property, so the format of the base directory is <em>original path</em>\\<em>hash code</em>. The dynamic directory is a subdirectory of this base directory. Its simple name is the value of the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> property, so its format is <em>original path</em>\\<em>hash code</em>\\<em>application name</em>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an application domain with a directory for dynamic assemblies, emits a dynamic assembly and stores it in the dynamic directory, and then loads the assembly into the new application domain and uses it.  </p>\n<p> The example creates an <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object and sets its <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> property to &quot;Example&quot; and its <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DynamicBase_\" data-linktype=\"relative-path\">DynamicBase</a> property to &quot;C:\\DynamicAssemblyDir&quot;. The example then displays the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DynamicBase_\" data-linktype=\"relative-path\">DynamicBase</a> property, to show that the hash code of the application name has been appended as a subdirectory of the path that was originally assigned.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The base directory in this example is intended to be outside the probing path for the example application. Be sure to compile the example in a different location. Delete the base directory and all its subdirectories each time you run the example.  </p>\n</div>\n<p> The example creates a new application domain, using the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object. The example uses the DynamicDirectory property to retrieve the name of the directory, so it can create the directory. (The example could just as easily create the directory beforehand by concatenating the original path, the hash code of the application name, and the application name.)  </p>\n<p> The example has a <code>GenerateDynamicAssembly</code> method that emits an assembly named <code>DynamicHelloWorld.dll</code> and stores it in the new application domain&#39;s dynamic directory. The dynamic assembly contains one type, <code>HelloWorld</code>, that has a static method (<code>Shared</code> method in Visual Basic) named <code>HelloFromAD</code>. Calling this method displays the name of the application domain.  </p>\n<p> The <code>Example</code> class derives from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, so the example can create an instance of the class in the new application domain and call its <code>Test</code> method. The <code>Test</code> method loads the dynamic assembly by its display name and calls the static <code>HelloFromAD</code> method.  </p>\n<p> You can show that the dynamic directory is searched after the normal probing paths by writing code for an assembly named <code>DynamicHelloWorld.dll</code> and compiling it in the same directory as this example. The assembly must have a class named <code>HelloWorld</code> with a static method named <code>HelloFromAD</code>. This method does not have to have the same functionality as the one in the example; it can simply display a string to the console. The assembly must also have an <a class=\"xref\" href=\"system.reflection.assemblyversionattribute\" data-linktype=\"relative-path\">AssemblyVersionAttribute</a> attribute that sets its version to 1.0.0.0. When you run the example, the assembly you compiled in the current directory is found before the dynamic directory is searched.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADDynamicBase#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\npublic ref class Example : MarshalByRefObject\n{\npublic:\n   void Test()\n   {\n      Assembly^ dynAssem = Assembly::Load(\n         &quot;DynamicHelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;);\n\n      Type^ myType = dynAssem-&gt;GetType(&quot;HelloWorld&quot;);\n      myType-&gt;InvokeMember(&quot;HelloFromAD&quot;, BindingFlags::Public | \n         BindingFlags::Static | BindingFlags::InvokeMethod, \n         Type::DefaultBinder, nullptr, nullptr);\n   }\n};\n\n\nstatic void GenerateDynamicAssembly(String^ location)\n{\n   // Define the dynamic assembly and the module. There is only one\n   // module in this assembly. Note that the call to DefineDynamicAssembly \n   // specifies the location where the assembly will be saved. The \n   // assembly version is 1.0.0.0.\n   //\n   AssemblyName^ asmName = gcnew AssemblyName(&quot;DynamicHelloWorld&quot;);\n   asmName-&gt;Version = gcnew Version(&quot;1.0.0.0&quot;);\n\n   AssemblyBuilder^ ab = \n      AppDomain::CurrentDomain-&gt;DefineDynamicAssembly( \n         asmName, AssemblyBuilderAccess::Save, location);\n\n   String^ moduleName = asmName-&gt;Name + &quot;.exe&quot;;\n   ModuleBuilder^ mb = ab-&gt;DefineDynamicModule(asmName-&gt;Name, moduleName);\n   \n   // Define the &quot;HelloWorld&quot; type, with one static method.\n   TypeBuilder^ tb = mb-&gt;DefineType(&quot;HelloWorld&quot;, TypeAttributes::Public);\n   MethodBuilder^ hello = tb-&gt;DefineMethod(&quot;HelloFromAD&quot;, \n      MethodAttributes::Public | MethodAttributes::Static, nullptr, nullptr);\n\n   // The method displays a message that contains the name of the application\n   // domain where the method is executed.\n   ILGenerator^ il = hello-&gt;GetILGenerator();\n   il-&gt;Emit(OpCodes::Ldstr, &quot;Hello from &#39;{0}&#39;!&quot;);\n   il-&gt;Emit(OpCodes::Call, AppDomain::typeid-&gt;GetProperty(&quot;CurrentDomain&quot;)-&gt;GetGetMethod());\n   il-&gt;Emit(OpCodes::Call, AppDomain::typeid-&gt;GetProperty(&quot;FriendlyName&quot;)-&gt;GetGetMethod());\n   il-&gt;Emit(OpCodes::Call, Console::typeid-&gt;GetMethod(&quot;WriteLine&quot;, \n                            gcnew array&lt;Type^&gt; { String::typeid, String::typeid }));\n   il-&gt;Emit(OpCodes::Ret);\n\n   // Complete the HelloWorld type and save the assembly. The assembly\n   // is placed in the location specified by DefineDynamicAssembly.\n   Type^ myType = tb-&gt;CreateType();\n   ab-&gt;Save(moduleName);\n};\n\nvoid main()\n{\n   // Prepare to create a new application domain.\n   AppDomainSetup^ setup = gcnew AppDomainSetup();\n\n   // Set the application name before setting the dynamic base.\n   setup-&gt;ApplicationName = &quot;Example&quot;;\n   \n   // Set the location of the base directory where assembly resolution \n   // probes for dynamic assemblies. Note that the hash code of the \n   // application name is concatenated to the base directory name you \n   // supply. \n   setup-&gt;DynamicBase = &quot;C:\\\\DynamicAssemblyDir&quot;;\n   Console::WriteLine(&quot;DynamicBase is set to &#39;{0}&#39;.&quot;, setup-&gt;DynamicBase);\n\n   AppDomain^ ad = AppDomain::CreateDomain(&quot;MyDomain&quot;, nullptr, setup);\n   \n   // The dynamic directory name is the dynamic base concatenated with\n   // the application name: &lt;DynamicBase&gt;\\&lt;hash code&gt;\\&lt;ApplicationName&gt;\n   String^ dynamicDir = ad-&gt;DynamicDirectory;\n   Console::WriteLine(&quot;Dynamic directory is &#39;{0}&#39;.&quot;, dynamicDir);\n\n   // The AssemblyBuilder won&#39;t create this directory automatically.\n   if (!System::IO::Directory::Exists(dynamicDir))\n   {\n      Console::WriteLine(&quot;Creating the dynamic directory.&quot;);\n      System::IO::Directory::CreateDirectory(dynamicDir);\n   }\n\n   // Generate a dynamic assembly and store it in the dynamic \n   // directory.\n   GenerateDynamicAssembly(dynamicDir);\n\n   // Create an instance of the Example class in the application domain,\n   // and call its Test method to load the dynamic assembly and use it.\n   Example^ ex = (Example^) ad-&gt;CreateInstanceAndUnwrap( \n         Example::typeid-&gt;Assembly-&gt;FullName, &quot;Example&quot;);\n   ex-&gt;Test();\n}\n\n/* This example produces output similar to the following:\n\nDynamicBase is set to &#39;C:\\DynamicAssemblyDir\\5e4a7545&#39;.\nDynamic directory is &#39;C:\\DynamicAssemblyDir\\5e4a7545\\Example&#39;.\nCreating the dynamic directory.\nHello from &#39;MyDomain&#39;!\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ADDynamicBase#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\npublic class Example : MarshalByRefObject\n{\n   static void Main()\n   {\n      // Prepare to create a new application domain.\n      AppDomainSetup setup = new AppDomainSetup();\n   \n      // Set the application name before setting the dynamic base.\n      setup.ApplicationName = &quot;Example&quot;;\n   \n      // Set the location of the base directory where assembly resolution \n      // probes for dynamic assemblies. Note that the hash code of the \n      // application name is concatenated to the base directory name you \n      // supply. \n      setup.DynamicBase = &quot;C:\\\\DynamicAssemblyDir&quot;;\n      Console.WriteLine(&quot;DynamicBase is set to &#39;{0}&#39;.&quot;, setup.DynamicBase);\n\n      AppDomain ad = AppDomain.CreateDomain(&quot;MyDomain&quot;, null, setup);\n   \n      // The dynamic directory name is the dynamic base concatenated with\n      // the application name: &lt;DynamicBase&gt;\\&lt;hash code&gt;\\&lt;ApplicationName&gt;\n      string dynamicDir = ad.DynamicDirectory;\n      Console.WriteLine(&quot;Dynamic directory is &#39;{0}&#39;.&quot;, dynamicDir);\n\n      // The AssemblyBuilder won&#39;t create this directory automatically.\n      if (!System.IO.Directory.Exists(dynamicDir))\n      {\n         Console.WriteLine(&quot;Creating the dynamic directory.&quot;);\n         System.IO.Directory.CreateDirectory(dynamicDir);\n      }\n\n      // Generate a dynamic assembly and store it in the dynamic \n      // directory.\n      GenerateDynamicAssembly(dynamicDir);\n\n      // Create an instance of the Example class in the application domain,\n      // and call its Test method to load the dynamic assembly and use it.\n      Example ex = (Example) ad.CreateInstanceAndUnwrap(\n         typeof(Example).Assembly.FullName, &quot;Example&quot;);\n      ex.Test();\n   }\n\n   public void Test()\n   {\n      Assembly dynAssem = Assembly.Load(\n         &quot;DynamicHelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;);\n\n      Type myType = dynAssem.GetType(&quot;HelloWorld&quot;);\n      myType.InvokeMember(&quot;HelloFromAD&quot;, BindingFlags.Public | \n         BindingFlags.Static | BindingFlags.InvokeMethod, \n         Type.DefaultBinder, null, null);\n   }\n\n\n   private static void GenerateDynamicAssembly(string location)\n   {\n      // Define the dynamic assembly and the module. There is only one\n      // module in this assembly. Note that the call to DefineDynamicAssembly \n      // specifies the location where the assembly will be saved. The \n      // assembly version is 1.0.0.0.\n      //\n      AssemblyName asmName = new AssemblyName(&quot;DynamicHelloWorld&quot;);\n      asmName.Version = new Version(&quot;1.0.0.0&quot;);\n\n      AssemblyBuilder ab = \n         AppDomain.CurrentDomain.DefineDynamicAssembly( \n            asmName, AssemblyBuilderAccess.Save, location);\n\n      String moduleName = asmName.Name + &quot;.exe&quot;;\n      ModuleBuilder mb = ab.DefineDynamicModule(asmName.Name, moduleName);\n      \n      // Define the &quot;HelloWorld&quot; type, with one static method.\n      TypeBuilder tb = mb.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public);\n      MethodBuilder hello = tb.DefineMethod(&quot;HelloFromAD&quot;, \n         MethodAttributes.Public | MethodAttributes.Static, null, null);\n\n      // The method displays a message that contains the name of the application\n      // domain where the method is executed.\n      ILGenerator il = hello.GetILGenerator();\n      il.Emit(OpCodes.Ldstr, &quot;Hello from &#39;{0}&#39;!&quot;);\n      il.Emit(OpCodes.Call, typeof(AppDomain).GetProperty(&quot;CurrentDomain&quot;).GetGetMethod());\n      il.Emit(OpCodes.Call, typeof(AppDomain).GetProperty(&quot;FriendlyName&quot;).GetGetMethod());\n      il.Emit(OpCodes.Call, typeof(Console).GetMethod(&quot;WriteLine&quot;, \n                             new Type[] { typeof(String), typeof(String) }));\n      il.Emit(OpCodes.Ret);\n\n      // Complete the HelloWorld type and save the assembly. The assembly\n      // is placed in the location specified by DefineDynamicAssembly.\n      Type myType = tb.CreateType();\n      ab.Save(moduleName);\n   }\n}\n\n/* This example produces output similar to the following:\n\nDynamicBase is set to &#39;C:\\DynamicAssemblyDir\\5e4a7545&#39;.\nDynamic directory is &#39;C:\\DynamicAssemblyDir\\5e4a7545\\Example&#39;.\nCreating the dynamic directory.\nHello from &#39;MyDomain&#39;!\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ADDynamicBase#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nPublic Class Example \n   Inherits MarshalByRefObject\n   \n   Shared Sub Main(args() As String)\n\n      &#39; Prepare to create a new application domain.\n      Dim setup As New AppDomainSetup()\n\n      &#39; Set the application name before setting the dynamic base.\n      setup.ApplicationName = &quot;Example&quot;\n      \n      &#39; Set the location of the base directory where assembly resolution \n      &#39; probes for dynamic assemblies. Note that the hash code of the \n      &#39; application name is concatenated to the base directory name you \n      &#39; supply. \n      setup.DynamicBase = &quot;C:\\DynamicAssemblyDir&quot;\n      Console.WriteLine(&quot;DynamicBase is set to &#39;{0}&#39;.&quot;, setup.DynamicBase)\n\n      Dim ad As AppDomain = AppDomain.CreateDomain(&quot;MyDomain&quot;, Nothing, setup)\n      \n      &#39; The dynamic directory name is the dynamic base concatenated with\n      &#39; the application name: &lt;DynamicBase&gt;\\&lt;hash code&gt;\\&lt;ApplicationName&gt;\n      Dim dynamicDir As String = ad.DynamicDirectory \n      Console.WriteLine(&quot;Dynamic directory is &#39;{0}&#39;.&quot;, dynamicDir)\n\n      &#39; The AssemblyBuilder won&#39;t create this directory automatically.\n      If Not System.IO.Directory.Exists(dynamicDir) Then \n         Console.WriteLine(&quot;Creating the dynamic directory.&quot;)\n         System.IO.Directory.CreateDirectory(dynamicDir)\n      End If\n\n      &#39; Generate a dynamic assembly and store it in the dynamic \n      &#39; directory.\n      GenerateDynamicAssembly(dynamicDir) \n\n      &#39; Create an instance of the Example class in the application domain,\n      &#39; and call its Test method to load the dynamic assembly and use it.  \n      Dim ex As Example = CType( _\n         ad.CreateInstanceAndUnwrap( _\n            GetType(Example).Assembly.FullName, &quot;Example&quot;), Example)\n      ex.Test()\n   End Sub\n\n   Public Sub Test() \n\n      Dim dynAssem As [Assembly] = Assembly.Load(\n         &quot;DynamicHelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;)\n\n      Dim myType As Type = dynAssem.GetType(&quot;HelloWorld&quot;)\n      myType.InvokeMember(&quot;HelloFromAD&quot;, BindingFlags.Public Or _\n         BindingFlags.Static Or BindingFlags.InvokeMethod, _\n         Type.DefaultBinder, Nothing, Nothing) &#39;New Object() {})\n   End Sub\n\n\n   Private Shared Sub GenerateDynamicAssembly(ByVal location As String)\n      \n      &#39; Define the dynamic assembly and the module. There is only one\n      &#39; module in this assembly. Note that the call to DefineDynamicAssembly \n      &#39; specifies the location where the assembly will be saved. The \n      &#39; assembly version is 1.0.0.0.\n      &#39;\n      Dim asmName As New AssemblyName(&quot;DynamicHelloWorld&quot;)\n      asmName.Version = New Version(&quot;1.0.0.0&quot;)\n\n      Dim ab As AssemblyBuilder = _\n         AppDomain.CurrentDomain.DefineDynamicAssembly( _\n            asmName, AssemblyBuilderAccess.Save, location)\n\n      Dim moduleName As String = asmName.Name &amp; &quot;.dll&quot;\n      Dim mb As ModuleBuilder = ab.DefineDynamicModule(asmName.Name, moduleName)\n      \n      &#39; Define the &quot;HelloWorld&quot; type, with one static method.\n      Dim tb As TypeBuilder = mb.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public)\n      Dim hello As MethodBuilder = tb.DefineMethod(&quot;HelloFromAD&quot;, _\n         MethodAttributes.Public Or MethodAttributes.Static, Nothing, Nothing)\n\n      &#39; The method displays a message that contains the name of the application\n      &#39; domain where the method is executed.\n      Dim il As ILGenerator = hello.GetILGenerator()\n      il.Emit(OpCodes.Ldstr, &quot;Hello from &#39;{0}&#39;!&quot;)\n      il.Emit(OpCodes.Call, GetType(AppDomain).GetProperty(&quot;CurrentDomain&quot;).GetGetMethod())\n      il.Emit(OpCodes.Call, GetType(AppDomain).GetProperty(&quot;FriendlyName&quot;).GetGetMethod())\n      il.Emit(OpCodes.Call, GetType(Console).GetMethod(&quot;WriteLine&quot;, _\n                             New Type() { GetType(String), GetType(String) }))\n      il.Emit(OpCodes.Ret)\n\n      &#39; Complete the HelloWorld type and save the assembly. The assembly\n      &#39; is placed in the location specified by DefineDynamicAssembly.\n      Dim myType As Type = tb.CreateType()\n      ab.Save(moduleName)\n   End Sub\nEnd Class \n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;DynamicBase is set to &#39;C:\\DynamicAssemblyDir\\5e4a7545&#39;.\n&#39;Dynamic directory is &#39;C:\\DynamicAssemblyDir\\5e4a7545\\Example&#39;.\n&#39;Creating the dynamic directory.\n&#39;Hello from &#39;MyDomain&#39;!\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_Evidence\">\r\n    \r\n            <a id=\"System_AppDomain_Evidence_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Evidence</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> associated with this application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Policy.Evidence Evidence { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </div>\r\n                  <p>The evidence associated with this application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_FriendlyName\">\r\n    \r\n            <a id=\"System_AppDomain_FriendlyName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FriendlyName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the friendly name of this application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string FriendlyName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The friendly name of this application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The friendly name of the default application domain is the file name of the process executable. For example, if the executable used to start the process is <code>&quot;c:\\MyAppDirectory\\MyAssembly.exe&quot;</code>, the friendly name of the default application domain is <code>&quot;MyAssembly.exe&quot;</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the FriendlyName property to get the friendly name of the current application domain. For the default application domain, the friendly name is the name of the application&#39;s executable file. The code example also displays additional information about the application domain.  </p>\n<pre><code class=\"lang-vb\" name=\"ADApplicationBase#1\">Class ADSetupInformation\n\n    Shared Sub Main()\n\n        Dim root As AppDomain = AppDomain.CurrentDomain\n\n        Dim setup As New AppDomainSetup()\n        setup.ApplicationBase = _\n            root.SetupInformation.ApplicationBase &amp; &quot;MyAppSubfolder\\&quot;\n\n        Dim domain As AppDomain = AppDomain.CreateDomain(&quot;MyDomain&quot;, Nothing, setup)\n\n        Console.WriteLine(&quot;Application base of {0}:&quot; &amp; vbCrLf &amp; vbTab &amp; &quot;{1}&quot;, _\n            root.FriendlyName, root.SetupInformation.ApplicationBase)\n        Console.WriteLine(&quot;Application base of {0}:&quot; &amp; vbCrLf &amp; vbTab &amp; &quot;{1}&quot;, _\n            domain.FriendlyName, domain.SetupInformation.ApplicationBase)\n\n        AppDomain.Unload(domain)\n    End Sub\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Application base of MyApp.exe:\n&#39;        C:\\Program Files\\MyApp\\\n&#39;Application base of MyDomain:\n&#39;        C:\\Program Files\\MyApp\\MyAppSubfolder\\\n</code></pre><pre><code class=\"lang-cpp\" name=\"ADApplicationBase#1\">using namespace System;\n\nint main()\n{\n    AppDomain^ root = AppDomain::CurrentDomain;\n\n    AppDomainSetup^ setup = gcnew AppDomainSetup();\n    setup-&gt;ApplicationBase = \n        root-&gt;SetupInformation-&gt;ApplicationBase + &quot;MyAppSubfolder\\\\&quot;;\n\n    AppDomain^ domain = AppDomain::CreateDomain(&quot;MyDomain&quot;, nullptr, setup);\n\n    Console::WriteLine(&quot;Application base of {0}:\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n        root-&gt;FriendlyName, root-&gt;SetupInformation-&gt;ApplicationBase);\n    Console::WriteLine(&quot;Application base of {0}:\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n        domain-&gt;FriendlyName, domain-&gt;SetupInformation-&gt;ApplicationBase);\n\n    AppDomain::Unload(domain);\n}\n\n/* This example produces output similar to the following:\n\nApplication base of MyApp.exe:\n        C:\\Program Files\\MyApp\\\nApplication base of MyDomain:\n        C:\\Program Files\\MyApp\\MyAppSubfolder\\\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ADApplicationBase#1\">using System;\n\nclass ADSetupInformation\n{\n    static void Main()\n    {\n        AppDomain root = AppDomain.CurrentDomain;\n\n        AppDomainSetup setup = new AppDomainSetup();\n        setup.ApplicationBase = \n            root.SetupInformation.ApplicationBase + @&quot;MyAppSubfolder\\&quot;;\n\n        AppDomain domain = AppDomain.CreateDomain(&quot;MyDomain&quot;, null, setup);\n\n        Console.WriteLine(&quot;Application base of {0}:\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n            root.FriendlyName, root.SetupInformation.ApplicationBase);\n        Console.WriteLine(&quot;Application base of {0}:\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n            domain.FriendlyName, domain.SetupInformation.ApplicationBase);\n\n        AppDomain.Unload(domain);\n    }\n}\n\n/* This example produces output similar to the following:\n\nApplication base of MyApp.exe:\n        C:\\Program Files\\MyApp\\\nApplication base of MyDomain:\n        C:\\Program Files\\MyApp\\MyAppSubfolder\\\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_Id\">\r\n    \r\n            <a id=\"System_AppDomain_Id_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Id</div>        \r\n          </div>\r\n    \r\n            <p>Gets an integer that uniquely identifies the application domain within the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Id { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that identifies the application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a second application domain and displays information about the default domain and the new domain.  </p>\n<pre><code class=\"lang-vb\" name=\"System.AppDomain.IsDefaultAppDomain#1\">Imports System\nImports System.Reflection\n\nPublic Class Example\n    \n    &#39; The following attribute indicates to the loader that assemblies \n    &#39; in the global assembly cache should be shared across multiple\n    &#39; application domains.\n    &lt;LoaderOptimizationAttribute(LoaderOptimization.MultiDomainHost)&gt; _\n    Public Shared Sub Main() \n        &#39; Show information for the default application domain.\n        ShowDomainInfo()\n        \n        &#39; Create a new application domain and display its information.\n        Dim newDomain As AppDomain = AppDomain.CreateDomain(&quot;MyMultiDomain&quot;)\n        newDomain.DoCallBack(AddressOf ShowDomainInfo)\n    \n    End Sub &#39;Main\n    \n    \n    &#39; This method has the same signature as the CrossAppDomainDelegate,\n    &#39; so that it can be executed easily in the new application domain.\n    &#39; \n    Public Shared Sub ShowDomainInfo() \n        Dim ad As AppDomain = AppDomain.CurrentDomain\n        Console.WriteLine()\n        Console.WriteLine(&quot;FriendlyName: {0}&quot;, ad.FriendlyName)\n        Console.WriteLine(&quot;Id: {0}&quot;, ad.Id)\n        Console.WriteLine(&quot;IsDefaultAppDomain: {0}&quot;, ad.IsDefaultAppDomain())\n    \n    End Sub \nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.AppDomain.IsDefaultAppDomain#1\">using namespace System;\nusing namespace System::Reflection;\n\n// This method has the same signature as the CrossAppDomainDelegate,\n// so that it can be executed easily in the new application domain.\n//\nstatic void ShowDomainInfo()\n{\n    AppDomain^ ad = AppDomain::CurrentDomain;\n    Console::WriteLine();\n    Console::WriteLine( L&quot;FriendlyName: {0}&quot;, ad-&gt;FriendlyName );\n    Console::WriteLine( L&quot;Id: {0}&quot;, ad-&gt;Id );\n    Console::WriteLine( L&quot;IsDefaultAppDomain: {0}&quot;, ad-&gt;IsDefaultAppDomain() );\n}\n\n// The following attribute indicates to the loader that assemblies\n// in the global assembly cache should be shared across multiple \n// application domains.\n//\n[LoaderOptimizationAttribute(LoaderOptimization::MultiDomainHost)]\nint main()\n{\n    // Show information for the default application domain.\n    ShowDomainInfo();\n\n    // Create a new application domain and display its information.\n    AppDomain^ newDomain = AppDomain::CreateDomain( L&quot;MyMultiDomain&quot; );\n    newDomain-&gt;DoCallBack( gcnew CrossAppDomainDelegate( ShowDomainInfo ) );\n\n    return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.AppDomain.IsDefaultAppDomain#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    // The following attribute indicates to the loader that assemblies\n    // in the global assembly cache should be shared across multiple \n    // application domains.\n    [LoaderOptimizationAttribute( LoaderOptimization.MultiDomainHost)]\n    public static void Main()\n    {\n        // Show information for the default application domain.\n        ShowDomainInfo();\n\n        // Create a new application domain and display its information.\n        AppDomain newDomain = AppDomain.CreateDomain(&quot;MyMultiDomain&quot;);\n        newDomain.DoCallBack(new CrossAppDomainDelegate(ShowDomainInfo));\n    }\n\n    // This method has the same signature as the CrossAppDomainDelegate,\n    // so that it can be executed easily in the new application domain.\n    // \n    public static void ShowDomainInfo()\n    {\n        AppDomain ad = AppDomain.CurrentDomain;\n        Console.WriteLine();\n        Console.WriteLine(&quot;FriendlyName: {0}&quot;, ad.FriendlyName);\n        Console.WriteLine(&quot;Id: {0}&quot;, ad.Id);\n        Console.WriteLine(&quot;IsDefaultAppDomain: {0}&quot;, ad.IsDefaultAppDomain());\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_IsFullyTrusted\">\r\n    \r\n            <a id=\"System_AppDomain_IsFullyTrusted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFullyTrusted</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether assemblies that are loaded into the current application domain execute with full trust.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFullyTrusted { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if assemblies that are loaded into the current application domain execute with full trust; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method always returns <code>true</code> for the default application domain of an application that runs on the desktop. It returns <code>false</code> for a sandboxed application domain that was created by using the [AppDomain.CreateDomain(String,â€‚Evidence,â€‚AppDomainSetup,â€‚PermissionSet,â€‚StrongName&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName&gt; method overload, unless the permissions that are granted to the application domain are equivalent to full trust.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the IsFullyTrusted property and the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_IsFullyTrusted_\" data-linktype=\"relative-path\">IsFullyTrusted</a> property with fully trusted and partially trusted application domains. The fully trusted application domain is the default application domain for the application. The partially trusted application domain is created by using the [AppDomain.CreateDomain(String,â€‚Evidence,â€‚AppDomainSetup,â€‚PermissionSet,â€‚StrongName&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName&gt; method overload.  </p>\n<p> The example uses a <code>Worker</code> class that derives from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, so it can be marshaled across application domain boundaries. The example creates a <code>Worker</code> object in the default application domain. It then calls the <code>TestIsFullyTrusted</code> method to display the property value for the application domain and for two assemblies that are loaded into the application domain: mscorlib, which is part of the .NET Framework, and the example assembly. The application domain is fully trusted, so both assemblies are fully trusted.  </p>\n<p> The example creates another <code>Worker</code> object in a sandboxed application domain and again calls the <code>TestIsFullyTrusted</code> method. Mscorlib is always trusted, even in a partially trusted application domain, but the example assembly is partially trusted.  </p>\n<pre><code class=\"lang-vb\" name=\"System.AppDomain.IsFullyTrusted#1\">Public Class Worker\n    Inherits MarshalByRefObject\n    \n    Shared Sub Main()\n \n        Dim w As New Worker()\n        w.TestIsFullyTrusted()\n        \n        Dim adSandbox As AppDomain = GetInternetSandbox()\n        w = CType(adSandbox.CreateInstanceAndUnwrap(\n                            GetType(Worker).Assembly.FullName, \n                            GetType(Worker).FullName), \n                  Worker)\n        w.TestIsFullyTrusted()\n    \n    End Sub \n    \n    Public Sub TestIsFullyTrusted() \n\n        Dim ad As AppDomain = AppDomain.CurrentDomain\n        Console.WriteLine(vbCrLf &amp; &quot;Application domain &#39;{0}&#39;: IsFullyTrusted = {1}&quot;, \n                          ad.FriendlyName, ad.IsFullyTrusted)\n        \n        Console.WriteLine(&quot;   IsFullyTrusted = {0} for the current assembly&quot;, \n                          GetType(Worker).Assembly.IsFullyTrusted)\n        \n        Console.WriteLine(&quot;   IsFullyTrusted = {0} for mscorlib&quot;, \n                          GetType(Integer).Assembly.IsFullyTrusted)\n    \n    End Sub \n    \n    &#39; ------------ Helper method ---------------------------------------\n    Shared Function GetInternetSandbox() As AppDomain \n\n        &#39; Create the permission set to grant to all assemblies.\n        Dim hostEvidence As New System.Security.Policy.Evidence()\n        hostEvidence.AddHostEvidence(\n                    New System.Security.Policy.Zone(System.Security.SecurityZone.Internet))\n        Dim pset As System.Security.PermissionSet = \n                           System.Security.SecurityManager.GetStandardSandbox(hostEvidence)\n        \n        &#39; Identify the folder to use for the sandbox.\n        Dim ads As New AppDomainSetup()\n        ads.ApplicationBase = System.IO.Directory.GetCurrentDirectory()\n        \n        &#39; Create the sandboxed application domain.\n        Return AppDomain.CreateDomain(&quot;Sandbox&quot;, hostEvidence, ads, pset, Nothing)\n    \n    End Function \nEnd Class \n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Application domain &#39;Example.exe&#39;: IsFullyTrusted = True\n&#39;   IsFullyTrusted = True for the current assembly\n&#39;   IsFullyTrusted = True for mscorlib\n&#39;\n&#39;Application domain &#39;Sandbox&#39;: IsFullyTrusted = False\n&#39;   IsFullyTrusted = False for the current assembly\n&#39;   IsFullyTrusted = True for mscorlib\n&#39; \n</code></pre><pre><code class=\"lang-cs\" name=\"System.AppDomain.IsFullyTrusted#1\">using System;\n \nnamespace SimpleSandboxing\n{\n    public class Worker : MarshalByRefObject\n    {\n        static void Main()\n        {\n            Worker w = new Worker();\n            w.TestIsFullyTrusted();\n\n            AppDomain adSandbox = GetInternetSandbox();\n            w = (Worker) adSandbox.CreateInstanceAndUnwrap(\n                               typeof(Worker).Assembly.FullName,\n                               typeof(Worker).FullName);\n            w.TestIsFullyTrusted();\n        }\n\n        public void TestIsFullyTrusted()\n        {\n            AppDomain ad = AppDomain.CurrentDomain;\n            Console.WriteLine(&quot;\\r<br>Application domain &#39;{0}&#39;: IsFullyTrusted = {1}&quot;,\n                                        ad.FriendlyName, ad.IsFullyTrusted);\n\n            Console.WriteLine(&quot;   IsFullyTrusted = {0} for the current assembly&quot;,\n                             typeof(Worker).Assembly.IsFullyTrusted);\n\n            Console.WriteLine(&quot;   IsFullyTrusted = {0} for mscorlib&quot;,\n                                        typeof(int).Assembly.IsFullyTrusted);\n        }\n\n        // ------------ Helper method ---------------------------------------\n        static AppDomain GetInternetSandbox()\n        {\n            // Create the permission set to grant to all assemblies.\n            System.Security.Policy.Evidence hostEvidence = new System.Security.Policy.Evidence();\n            hostEvidence.AddHostEvidence(new System.Security.Policy.Zone(\n                                                         System.Security.SecurityZone.Internet));\n            System.Security.PermissionSet pset = \n                                System.Security.SecurityManager.GetStandardSandbox(hostEvidence);\n\n            // Identify the folder to use for the sandbox.\n            AppDomainSetup ads = new AppDomainSetup();\n            ads.ApplicationBase = System.IO.Directory.GetCurrentDirectory();\n \n            // Create the sandboxed application domain.\n            return AppDomain.CreateDomain(&quot;Sandbox&quot;, hostEvidence, ads, pset, null); \n        }\n    }\n}\n\n/* This example produces output similar to the following:\n\nApplication domain &#39;Example.exe&#39;: IsFullyTrusted = True\n   IsFullyTrusted = True for the current assembly\n   IsFullyTrusted = True for mscorlib\n\nApplication domain &#39;Sandbox&#39;: IsFullyTrusted = False\n   IsFullyTrusted = False for the current assembly\n   IsFullyTrusted = True for mscorlib\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_IsHomogenous\">\r\n    \r\n            <a id=\"System_AppDomain_IsHomogenous_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsHomogenous</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current application domain has a set of permissions that is granted to all assemblies that are loaded into the application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsHomogenous { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current application domain has a homogenous set of permissions; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns <code>true</code> for sandboxed application domains that were created by using the [AppDomain.CreateDomain(String,â€‚Evidence,â€‚AppDomainSetup,â€‚PermissionSet,â€‚StrongName&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName&gt; method overload. Sandboxed application domains have a homogenous set of permissions; that is, the same set of permissions is granted to all partially trusted assemblies that are loaded into the application domain. A sandboxed application domain optionally has a list of strong-named assemblies that are exempt from this permission set, and instead run with full trust.  </p>\n<p> Fully trusted code can use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_PermissionSet_\" data-linktype=\"relative-path\">PermissionSet</a> property to determine the homogenous grant set of a sandboxed application domain.  </p>\n<p> This property also returns <code>true</code> for the default application domain of a desktop application, because that application domain grants full trust to all assemblies.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_MonitoringIsEnabled\">\r\n    \r\n            <a id=\"System_AppDomain_MonitoringIsEnabled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MonitoringIsEnabled</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether CPU and memory monitoring of application domains is enabled for the current process. Once monitoring is enabled for a process, it cannot be disabled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool MonitoringIsEnabled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if monitoring is enabled; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current process attempted to assign the value <code>false</code> to this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This <code>static</code> property (<code>Shared</code> property in Visual Basic) controls CPU and memory monitoring of all the application domains in the process.  </p>\n<p> If you attempt to set this property to <code>false</code>, a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> exception is thrown, even if the current value of the property is <code>false</code>.  </p>\n<p> Once monitoring is enabled, you can use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_MonitoringSurvivedMemorySize_\" data-linktype=\"relative-path\">MonitoringSurvivedMemorySize</a>, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_MonitoringSurvivedProcessMemorySize_\" data-linktype=\"relative-path\">MonitoringSurvivedProcessMemorySize</a>, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_MonitoringTotalAllocatedMemorySize_\" data-linktype=\"relative-path\">MonitoringTotalAllocatedMemorySize</a>, and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_MonitoringTotalProcessorTime_\" data-linktype=\"relative-path\">MonitoringTotalProcessorTime</a> instance properties to monitor CPU and memory use of individual application domains.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_MonitoringSurvivedMemorySize\">\r\n    \r\n            <a id=\"System_AppDomain_MonitoringSurvivedMemorySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MonitoringSurvivedMemorySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of bytes that survived the last collection and that are known to be referenced by the current application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long MonitoringSurvivedMemorySize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The number of surviving bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <code>static</code> (<code>Shared</code> in Visual Basic) <span class=\"xref\">stem.AppDomain.MonitoringIsEnabled*</span> property is set to <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The statistics are updated with each garbage collection. However, they are guaranteed to be accurate only after a full, blocking collection; that is, a collection that includes all generations and that stops the application while collection occurs. For example, the <a class=\"xref\" href=\"system.gc#System_GC_Collect\" data-linktype=\"relative-path\">System.GC.Collect()</a> method overload performs a full, blocking collection. (Concurrent collection occurs in the background and does not block the application.)</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_MonitoringSurvivedProcessMemorySize\">\r\n    \r\n            <a id=\"System_AppDomain_MonitoringSurvivedProcessMemorySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MonitoringSurvivedProcessMemorySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the total bytes that survived from the last collection for all application domains in the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long MonitoringSurvivedProcessMemorySize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The total number of surviving bytes for the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <code>static</code> (<code>Shared</code> in Visual Basic) <span class=\"xref\">stem.AppDomain.MonitoringIsEnabled*</span> property is set to <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After a full, blocking collection, this number represents the number of bytes currently held live on managed heaps. It should be close to the number reported by the <a class=\"xref\" href=\"system.gc#System_GC_GetTotalMemory_\" data-linktype=\"relative-path\">GetTotalMemory</a> method. After an ephemeral collection, this number represents the number of bytes currently held live in ephemeral generations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_MonitoringTotalAllocatedMemorySize\">\r\n    \r\n            <a id=\"System_AppDomain_MonitoringTotalAllocatedMemorySize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MonitoringTotalAllocatedMemorySize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the total size, in bytes, of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long MonitoringTotalAllocatedMemorySize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The total size of all memory allocations.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <code>static</code> (<code>Shared</code> in Visual Basic) <span class=\"xref\">stem.AppDomain.MonitoringIsEnabled*</span> property is set to <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_MonitoringTotalProcessorTime\">\r\n    \r\n            <a id=\"System_AppDomain_MonitoringTotalProcessorTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MonitoringTotalProcessorTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the total processor time that has been used by all threads while executing in the current application domain, since the process started.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan MonitoringTotalProcessorTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>Total processor time for the current application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <code>static</code> (<code>Shared</code> in Visual Basic) <span class=\"xref\">stem.AppDomain.MonitoringIsEnabled*</span> property is set to <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The total time that is reported for an application domain includes the time each thread in the process spent executing in that application domain.  </p>\n<p> A thread that calls into unmanaged code is still associated with an application domain, and the processor time spent executing the unmanaged code is reported for the application domain where the call was made.  </p>\n<p> When a thread is blocked or sleeping, it does not consume processor time.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_PermissionSet\">\r\n    \r\n            <a id=\"System_AppDomain_PermissionSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PermissionSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets the permission set of a sandboxed application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.PermissionSet PermissionSet { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </div>\r\n                  <p>The permission set of the sandboxed application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Sandboxed application domains that were created by using the [AppDomain.CreateDomain(String,â€‚Evidence,â€‚AppDomainSetup,â€‚PermissionSet,â€‚StrongName&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName&gt; method overload have a homogenous set of permissions; that is, the same set of permissions is granted to all partially trusted assemblies that are loaded into the application domain. A sandboxed application domain optionally has a list of strong-named assemblies that are exempt from this permission set, and instead run with full trust.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_RelativeSearchPath\">\r\n    \r\n            <a id=\"System_AppDomain_RelativeSearchPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RelativeSearchPath</div>        \r\n          </div>\r\n    \r\n            <p>Gets the path under the base directory where the assembly resolver should probe for private assemblies.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string RelativeSearchPath { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path under the base directory where the assembly resolver should probe for private assemblies.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Private assemblies are deployed in the same directory structure as the application. If the path specified by the RelativeSearchPath property is not under <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a>, it is ignored.  </p>\n<p> This property returns the value set using <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_SetupInformation\">\r\n    \r\n            <a id=\"System_AppDomain_SetupInformation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetupInformation</div>        \r\n          </div>\r\n    \r\n            <p>Gets the application domain configuration information for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AppDomainSetup SetupInformation { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a></div>\r\n                  </div>\r\n                  <p>The application domain initialization information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ShadowCopyFiles\">\r\n    \r\n            <a id=\"System_AppDomain_ShadowCopyFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShadowCopyFiles</div>        \r\n          </div>\r\n    \r\n            <p>Gets an indication whether the application domain is configured to shadow copy files.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ShadowCopyFiles { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the application domain is configured to shadow copy files; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information, see <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ShadowCopyFiles_\" data-linktype=\"relative-path\">ShadowCopyFiles</a> and <a href=\"../Topic/Shadow%20Copying%20Assemblies.md\" data-linktype=\"relative-path\">Shadow Copying Assemblies</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_AppendPrivatePath_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_AppendPrivatePath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendPrivatePath(String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the specified directory name to the private path list.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendPrivatePath (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the directory to be appended to the private path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The use of this property is not recommended, because it might change the probing path for assemblies after they have already been loaded. Use the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a> property instead.  </p>\n<p> The private path, or relative search path, is the path relative to the base directory where the assembly resolver probes for private assemblies.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ApplyPolicy_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_ApplyPolicy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplyPolicy(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the assembly display name after policy has been applied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ApplyPolicy (string assemblyName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The assembly display name, in the form provided by the <span class=\"xref\">stem.Reflection.Assembly.FullName*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing the assembly display name after policy has been applied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ApplyPolicy method takes an assembly display name and returns the post-policy display name. This is useful if you need to load an assembly using policy, because the reflection-only context does not apply policy.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ClearPrivatePath\">\r\n    \r\n            <a id=\"System_AppDomain_ClearPrivatePath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClearPrivatePath()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the path that specifies the location of private assemblies to the empty string (&quot;&quot;).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ClearPrivatePath ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The private path is a path relative to the base directory that the common language runtime searches to locate private assemblies.  </p>\n<p> For more information, see <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the ClearPrivatePath method to remove all entries from the list of private paths to search when assemblies are loaded.  </p>\n<p> This method is now obsolete, and should not be used for new development.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADClearPrivatePath#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Security::Policy;\n\n//for evidence Object\nint main()\n{\n   \n   //Create evidence for new appdomain.\n   Evidence^ adevidence = AppDomain::CurrentDomain-&gt;Evidence;\n   \n   //Create the new application domain.\n   AppDomain^ domain = AppDomain::CreateDomain( &quot;MyDomain&quot;, adevidence );\n   \n   //Display the current relative search path.\n   Console::WriteLine( &quot;Relative search path is: {0}&quot;, domain-&gt;RelativeSearchPath );\n   \n   //Append the relative path.\n   String^ Newpath = &quot;www.code.microsoft.com&quot;;\n   domain-&gt;AppendPrivatePath( Newpath );\n   \n   //Display the new relative search path.\n   Console::WriteLine( &quot;Relative search path is: {0}&quot;, domain-&gt;RelativeSearchPath );\n   \n   //Clear the private search path.\n   domain-&gt;ClearPrivatePath();\n   \n   //Display the new relative search path.\n   Console::WriteLine( &quot;Relative search path is now: {0}&quot;, domain-&gt;RelativeSearchPath );\n   AppDomain::Unload( domain );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"ADClearPrivatePath#1\">using System;\nusing System.Reflection;\nusing System.Security.Policy;  //for evidence object\n\nclass ADAppendPrivatePath\n{\n\tpublic static void Main()\n\t{\n\t\t//Create evidence for new appdomain.\n\t\tEvidence adevidence = AppDomain.CurrentDomain.Evidence;\n\n\t\t//Create the new application domain.\n\t\tAppDomain domain = AppDomain.CreateDomain(&quot;MyDomain&quot;, adevidence);\n\n\t\t//Display the current relative search path.\n\t\tConsole.WriteLine(&quot;Relative search path is: &quot; + domain.RelativeSearchPath);\n\n\t\t//Append the relative path.\n\t\tString Newpath = &quot;www.code.microsoft.com&quot;;\n\t\tdomain.AppendPrivatePath(Newpath);\n\n\t\t//Display the new relative search path.\n\t\tConsole.WriteLine(&quot;Relative search path is: &quot; + domain.RelativeSearchPath);\n\n\t\t//Clear the private search path.\n\t\tdomain.ClearPrivatePath();\n\n\t\t//Display the new relative search path.\n\t\tConsole.WriteLine(&quot;Relative search path is now: &quot; + domain.RelativeSearchPath);\n\n \n\t\tAppDomain.Unload(domain);\t\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ADClearPrivatePath#1\">Imports System\nImports System.Reflection\nImports System.Security.Policy &#39;for evidence object\n\nClass ADAppendPrivatePath\n   \n   Public Shared Sub Main()\n      &#39;Create evidence for new appdomain.\n      Dim adevidence As Evidence = AppDomain.CurrentDomain.Evidence\n      \n      &#39;Create the new application domain.\n      Dim domain As AppDomain = AppDomain.CreateDomain(&quot;MyDomain&quot;, adevidence)\n      \n      &#39;Display the current relative search path.\n      Console.WriteLine(&quot;Relative search path is: &quot; &amp; domain.RelativeSearchPath)\n      \n      &#39;Append the relative path.\n      Dim Newpath As [String] = &quot;www.code.microsoft.com&quot;\n      domain.AppendPrivatePath(Newpath)\n      \n      &#39;Display the new relative search path.\n      Console.WriteLine(&quot;Relative search path is: &quot; &amp; domain.RelativeSearchPath)\n      \n      &#39;Clear the private search path.\n      domain.ClearPrivatePath()\n      \n      &#39;Display the new relative search path.\n      Console.WriteLine(&quot;Relative search path is now: &quot; &amp; domain.RelativeSearchPath)\n      \n      \n      AppDomain.Unload(domain)\n   End Sub &#39;Main\nEnd Class &#39;ADAppendPrivatePath\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ClearShadowCopyPath\">\r\n    \r\n            <a id=\"System_AppDomain_ClearShadowCopyPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClearShadowCopyPath()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the list of directories containing shadow copied assemblies to the empty string (&quot;&quot;).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ClearShadowCopyPath ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The shadow copy path is a list of directories where shadow copied assemblies are stored.  </p>\n<p> For more information, see <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ShadowCopyDirectories_\" data-linktype=\"relative-path\">ShadowCopyDirectories</a>and <a href=\"../Topic/Shadow%20Copying%20Assemblies.md\" data-linktype=\"relative-path\">Shadow Copying Assemblies</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateComInstanceFrom_System_String_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateComInstanceFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateComInstanceFrom(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of a specified COM type. Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a file containing an assembly that defines the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the requested type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objecthandle\" data-linktype=\"relative-path\">ObjectHandle</a></div>\r\n                  </div>\r\n                  <p>An object that is a wrapper for the new instance specified by <code>typeName</code>. The return value needs to be unwrapped to access the real object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> or <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>The type cannot be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No public parameterless constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> is an abstract class.  </p>\n<p> -or-  </p>\n<p> This member was invoked with a late-binding mechanism.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>The COM object that is being referred to is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to create objects remotely without having to load the type locally.  </p>\n<p> The return value must to be unwrapped to access the real object.  </p>\n<p> A<a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" data-linktype=\"relative-path\">System.Runtime.InteropServices.ComVisibleAttribute</a> attribute with a value of <code>true</code> must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_CreateComInstanceFrom#1\">using System;\nusing System.Reflection;\nusing System.Runtime.InteropServices;\n\n[ComVisible(true)]\nclass MyComVisibleType {\n   public MyComVisibleType() {\n      Console.WriteLine(&quot;MyComVisibleType instantiated!&quot;);\n   }\n}\n\n[ComVisible(false)]\nclass MyComNonVisibleType {\n   public MyComNonVisibleType() {\n      Console.WriteLine(&quot;MyComNonVisibleType instantiated!&quot;);\n   }\n}\n\nclass Test {\n   public static void Main() {\n      CreateComInstance(&quot;MyComNonVisibleType&quot;);   // Fail!\n      CreateComInstance(&quot;MyComVisibleType&quot;);      // OK!\n   }\n   \n   static void CreateComInstance(string typeName) {\n      try {\n         AppDomain currentDomain = AppDomain.CurrentDomain;\n         string assemblyName = currentDomain.FriendlyName;\n         currentDomain.CreateComInstanceFrom(assemblyName, typeName);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_CreateComInstanceFrom#1\">Imports System\nImports System.Reflection\nImports System.Runtime.InteropServices\n\n&lt;ComVisible(True)&gt; _\nClass MyComVisibleType\n\n   Public Sub New()\n      Console.WriteLine(&quot;MyComVisibleType instantiated!&quot;)\n   End Sub &#39;New\n\nEnd Class &#39;MyComVisibleType\n\n&lt;ComVisible(False)&gt; _\nClass MyComNonVisibleType\n\n   Public Sub New()\n      Console.WriteLine(&quot;MyComNonVisibleType instantiated!&quot;)\n   End Sub &#39;New\n\nEnd Class &#39;MyComNonVisibleType\n\nModule Test\n\n   Sub Main()\n      CreateComInstance(&quot;MyComNonVisibleType&quot;)   &#39; Fail!\n      CreateComInstance(&quot;MyComVisibleType&quot;)      &#39; OK!\n   End Sub &#39;Main\n\n   Sub CreateComInstance(typeName As String)\n      Try\n         Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n         Dim assemblyName As String = currentDomain.FriendlyName\n         currentDomain.CreateComInstanceFrom(assemblyName, typeName)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;CreateComInstance\n\nEnd Module &#39;Test\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_CreateComInstanceFrom#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Runtime::InteropServices;\n\n[ComVisible(true)]\npublic ref class MyComVisibleType\n{\npublic:\n   MyComVisibleType()\n   {\n      Console::WriteLine( &quot;MyComVisibleType instantiated!&quot; );\n   }\n\n};\n\n\n[ComVisible(false)]\npublic ref class MyComNonVisibleType\n{\npublic:\n   MyComNonVisibleType()\n   {\n      Console::WriteLine( &quot;MyComNonVisibleType instantiated!&quot; );\n   }\n\n};\n\nvoid CreateComInstance( String^ typeName )\n{\n   try\n   {\n      AppDomain^ currentDomain = AppDomain::CurrentDomain;\n      String^ assemblyName = currentDomain-&gt;FriendlyName;\n      currentDomain-&gt;CreateComInstanceFrom( assemblyName, typeName );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nint main()\n{\n   CreateComInstance( &quot;MyComNonVisibleType&quot; ); // Fail!\n   CreateComInstance( &quot;MyComVisibleType&quot; ); // OK!\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateComInstanceFrom_System_String_System_String_System_Byte___System_Configuration_Assemblies_AssemblyHashAlgorithm_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateComInstanceFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateComInstanceFrom(String,String,Byte[],AssemblyHashAlgorithm)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of a specified COM type. Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyFile, string typeName, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a file containing an assembly that defines the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Represents the value of the computed hash code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.assemblies.assemblyhashalgorithm\" data-linktype=\"relative-path\">AssemblyHashAlgorithm</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Represents the hash algorithm used by the assembly manifest.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objecthandle\" data-linktype=\"relative-path\">ObjectHandle</a></div>\r\n                  </div>\r\n                  <p>An object that is a wrapper for the new instance specified by <code>typeName</code>. The return value needs to be unwrapped to access the real object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> or <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p>The type cannot be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No public parameterless constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> is an abstract class.  </p>\n<p> -or-  </p>\n<p> This member was invoked with a late-binding mechanism.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is the empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>The COM object that is being referred to is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to create objects remotely without having to load the type locally.  </p>\n<p> The return value must to be unwrapped to access the real object.  </p>\n<p> A <a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" data-linktype=\"relative-path\">System.Runtime.InteropServices.ComVisibleAttribute</a> attribute with a value of <code>true</code> must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateDomain_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateDomain_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDomain(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new application domain with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static AppDomain CreateDomain (string friendlyName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>friendlyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The friendly name of the domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a></div>\r\n                  </div>\r\n                  <p>The newly created application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>friendlyName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>friendlyName</code> parameter is intended to identify the domain in a manner that is meaningful to humans. This string should be suitable for display in user interfaces.  </p>\n<p> This method overload uses the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> information from the default application domain.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates, in general, how to create a domain using one of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateDomain_\" data-linktype=\"relative-path\">CreateDomain</a> overloads.  </p>\n<pre><code class=\"lang-vb\" name=\"AppDomain_Setup#1\">      &#39; Set up the AppDomainSetup\n      Dim setup As New AppDomainSetup()\n      setup.ApplicationBase = &quot;(some directory)&quot;\n      setup.ConfigurationFile = &quot;(some file)&quot;\n      \n      &#39; Set up the Evidence\n      Dim baseEvidence As Evidence = AppDomain.CurrentDomain.Evidence\n      Dim evidence As New Evidence(baseEvidence)\n      evidence.AddAssembly(&quot;(some assembly)&quot;)\n      evidence.AddHost(&quot;(some host)&quot;)\n      \n      &#39; Create the AppDomain\n      Dim newDomain As AppDomain = AppDomain.CreateDomain(&quot;newDomain&quot;, evidence, setup)\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_Setup#1\">      // Set up the AppDomainSetup\n      AppDomainSetup setup = new AppDomainSetup();\n      setup.ApplicationBase = &quot;(some directory)&quot;;\n      setup.ConfigurationFile = &quot;(some file)&quot;;\n\n      // Set up the Evidence\n      Evidence baseEvidence = AppDomain.CurrentDomain.Evidence;\n      Evidence evidence = new Evidence(baseEvidence);\n      evidence.AddAssembly(&quot;(some assembly)&quot;);\n      evidence.AddHost(&quot;(some host)&quot;);\n\n      // Create the AppDomain      \n      AppDomain newDomain = AppDomain.CreateDomain(&quot;newDomain&quot;, evidence, setup);\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_Setup#1\">   // Set up the AppDomainSetup\n   AppDomainSetup^ setup = gcnew AppDomainSetup;\n   setup-&gt;ApplicationBase = &quot;(some directory)&quot;;\n   setup-&gt;ConfigurationFile = &quot;(some file)&quot;;\n   \n   // Set up the Evidence\n   Evidence^ baseEvidence = AppDomain::CurrentDomain-&gt;Evidence;\n   Evidence^ evidence = gcnew Evidence( baseEvidence );\n   evidence-&gt;AddAssembly( &quot;(some assembly)&quot; );\n   evidence-&gt;AddHost( &quot;(some host)&quot; );\n   \n   // Create the AppDomain\n   AppDomain^ newDomain = AppDomain::CreateDomain( &quot;newDomain&quot;, evidence, setup );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateDomain_System_String_System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateDomain_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDomain(String,Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new application domain with the given name using the supplied evidence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>friendlyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see <span class=\"xref\">stem.AppDomain.FriendlyName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence that establishes the identity of the code that runs in the application domain. Pass <code>null</code> to use the evidence of the current application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a></div>\r\n                  </div>\r\n                  <p>The newly created application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>friendlyName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method overload uses the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> information from the default application domain.  </p>\n<p> If <code>securityInfo</code> is not supplied, the evidence from the current application domain is used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Do not use this method overload to create sandboxed application domains. Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the evidence that is supplied for <code>securityInfo</code> no longer affects the grant set of the application domain. Use the [CreateDomain(String,â€‚Evidence,â€‚AppDomainSetup,â€‚PermissionSet,â€‚StrongName&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29&gt; method overload to create sandboxed application domains.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates, in general, how to create a domain using one of the CreateDomain overloads.  </p>\n<pre><code class=\"lang-vb\" name=\"AppDomain_Setup#1\">      &#39; Set up the AppDomainSetup\n      Dim setup As New AppDomainSetup()\n      setup.ApplicationBase = &quot;(some directory)&quot;\n      setup.ConfigurationFile = &quot;(some file)&quot;\n      \n      &#39; Set up the Evidence\n      Dim baseEvidence As Evidence = AppDomain.CurrentDomain.Evidence\n      Dim evidence As New Evidence(baseEvidence)\n      evidence.AddAssembly(&quot;(some assembly)&quot;)\n      evidence.AddHost(&quot;(some host)&quot;)\n      \n      &#39; Create the AppDomain\n      Dim newDomain As AppDomain = AppDomain.CreateDomain(&quot;newDomain&quot;, evidence, setup)\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_Setup#1\">      // Set up the AppDomainSetup\n      AppDomainSetup setup = new AppDomainSetup();\n      setup.ApplicationBase = &quot;(some directory)&quot;;\n      setup.ConfigurationFile = &quot;(some file)&quot;;\n\n      // Set up the Evidence\n      Evidence baseEvidence = AppDomain.CurrentDomain.Evidence;\n      Evidence evidence = new Evidence(baseEvidence);\n      evidence.AddAssembly(&quot;(some assembly)&quot;);\n      evidence.AddHost(&quot;(some host)&quot;);\n\n      // Create the AppDomain      \n      AppDomain newDomain = AppDomain.CreateDomain(&quot;newDomain&quot;, evidence, setup);\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_Setup#1\">   // Set up the AppDomainSetup\n   AppDomainSetup^ setup = gcnew AppDomainSetup;\n   setup-&gt;ApplicationBase = &quot;(some directory)&quot;;\n   setup-&gt;ConfigurationFile = &quot;(some file)&quot;;\n   \n   // Set up the Evidence\n   Evidence^ baseEvidence = AppDomain::CurrentDomain-&gt;Evidence;\n   Evidence^ evidence = gcnew Evidence( baseEvidence );\n   evidence-&gt;AddAssembly( &quot;(some assembly)&quot; );\n   evidence-&gt;AddHost( &quot;(some host)&quot; );\n   \n   // Create the AppDomain\n   AppDomain^ newDomain = AppDomain::CreateDomain( &quot;newDomain&quot;, evidence, setup );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateDomain_System_String_System_Security_Policy_Evidence_System_AppDomainSetup_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateDomain_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDomain(String,Evidence,AppDomainSetup)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new application domain using the specified name, evidence, and application domain setup information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup info);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>friendlyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see <span class=\"xref\">stem.AppDomain.FriendlyName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence that establishes the identity of the code that runs in the application domain. Pass <code>null</code> to use the evidence of the current application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that contains application domain initialization information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a></div>\r\n                  </div>\r\n                  <p>The newly created application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>friendlyName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>info</code> is not supplied, this method overload uses the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> information from the default application domain.  </p>\n<p> If <code>securityInfo</code> is not supplied, the evidence from the current application domain is used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Do not use this method overload to create sandboxed application domains. Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the evidence that is supplied for <code>securityInfo</code> no longer affects the grant set of the application domain. Use the [CreateDomain(String,â€‚Evidence,â€‚AppDomainSetup,â€‚PermissionSet,â€‚StrongName&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29&gt; method overload to create sandboxed application domains.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates, in general, how to create a domain using one of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateDomain_\" data-linktype=\"relative-path\">CreateDomain</a> overloads.  </p>\n<pre><code class=\"lang-vb\" name=\"AppDomain_Setup#1\">      &#39; Set up the AppDomainSetup\n      Dim setup As New AppDomainSetup()\n      setup.ApplicationBase = &quot;(some directory)&quot;\n      setup.ConfigurationFile = &quot;(some file)&quot;\n      \n      &#39; Set up the Evidence\n      Dim baseEvidence As Evidence = AppDomain.CurrentDomain.Evidence\n      Dim evidence As New Evidence(baseEvidence)\n      evidence.AddAssembly(&quot;(some assembly)&quot;)\n      evidence.AddHost(&quot;(some host)&quot;)\n      \n      &#39; Create the AppDomain\n      Dim newDomain As AppDomain = AppDomain.CreateDomain(&quot;newDomain&quot;, evidence, setup)\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_Setup#1\">      // Set up the AppDomainSetup\n      AppDomainSetup setup = new AppDomainSetup();\n      setup.ApplicationBase = &quot;(some directory)&quot;;\n      setup.ConfigurationFile = &quot;(some file)&quot;;\n\n      // Set up the Evidence\n      Evidence baseEvidence = AppDomain.CurrentDomain.Evidence;\n      Evidence evidence = new Evidence(baseEvidence);\n      evidence.AddAssembly(&quot;(some assembly)&quot;);\n      evidence.AddHost(&quot;(some host)&quot;);\n\n      // Create the AppDomain      \n      AppDomain newDomain = AppDomain.CreateDomain(&quot;newDomain&quot;, evidence, setup);\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_Setup#1\">   // Set up the AppDomainSetup\n   AppDomainSetup^ setup = gcnew AppDomainSetup;\n   setup-&gt;ApplicationBase = &quot;(some directory)&quot;;\n   setup-&gt;ConfigurationFile = &quot;(some file)&quot;;\n   \n   // Set up the Evidence\n   Evidence^ baseEvidence = AppDomain::CurrentDomain-&gt;Evidence;\n   Evidence^ evidence = gcnew Evidence( baseEvidence );\n   evidence-&gt;AddAssembly( &quot;(some assembly)&quot; );\n   evidence-&gt;AddHost( &quot;(some host)&quot; );\n   \n   // Create the AppDomain\n   AppDomain^ newDomain = AppDomain::CreateDomain( &quot;newDomain&quot;, evidence, setup );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateDomain_System_String_System_Security_Policy_Evidence_System_AppDomainSetup_System_Security_PermissionSet_System_Security_Policy_StrongName___\">\r\n    \r\n            <a id=\"System_AppDomain_CreateDomain_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDomain(String,Evidence,AppDomainSetup,PermissionSet,StrongName[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new application domain using the specified name, evidence, application domain setup information, default permission set, and array of fully trusted assemblies.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup info, System.Security.PermissionSet grantSet, System.Security.Policy.StrongName[] fullTrustAssemblies);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>friendlyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see the description of <span class=\"xref\">stem.AppDomain.FriendlyName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence that establishes the identity of the code that runs in the application domain. Pass <code>null</code> to use the evidence of the current application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that contains application domain initialization information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>grantSet</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A default permission set that is granted to all assemblies loaded into the new application domain that do not have specific grants.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fullTrustAssemblies</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.strongname\" data-linktype=\"relative-path\">StrongName</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of strong names representing assemblies to be considered fully trusted in the new application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a></div>\r\n                  </div>\r\n                  <p>The newly created application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>friendlyName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The application domain is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.AppDomainSetup.ApplicationBase*</span> property is not set on the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object that is supplied for <code>info</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must set the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a> property of the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object that you supply for <code>info</code>. Otherwise, an exception is thrown.  </p>\n<p> If <code>securityInfo</code> is not supplied, the evidence from the current application domain is used.  </p>\n<p> The information provided for <code>grantSet</code> and <code>fullTrustAssemblies</code> is used to create an <a class=\"xref\" href=\"system.security.policy.applicationtrust\" data-linktype=\"relative-path\">ApplicationTrust</a> object for the new application domain.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateDomain_System_String_System_Security_Policy_Evidence_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateDomain_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDomain(String,Evidence,String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>friendlyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see <span class=\"xref\">stem.AppDomain.FriendlyName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence that establishes the identity of the code that runs in the application domain. Pass <code>null</code> to use the evidence of the current application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>appBasePath</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base directory that the assembly resolver uses to probe for assemblies. For more information, see <span class=\"xref\">stem.AppDomain.BaseDirectory*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>appRelativeSearchPath</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path relative to the base directory where the assembly resolver should probe for private assemblies. For more information, see <span class=\"xref\">stem.AppDomain.RelativeSearchPath*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>shadowCopyFiles</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>If <code>true</code>, a shadow copy of an assembly is loaded into this application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a></div>\r\n                  </div>\r\n                  <p>The newly created application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>friendlyName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>securityInfo</code> is not supplied, the evidence from the current application domain is used.  </p>\n<p> For more information about shadow copying, see <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ShadowCopyFiles_\" data-linktype=\"relative-path\">ShadowCopyFiles</a>and <a href=\"../Topic/Shadow%20Copying%20Assemblies.md\" data-linktype=\"relative-path\">Shadow Copying Assemblies</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Do not use this method overload to create sandboxed application domains. Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the evidence that is supplied for <code>securityInfo</code> no longer affects the grant set of the application domain. Use the [CreateDomain(String,â€‚Evidence,â€‚AppDomainSetup,â€‚PermissionSet,â€‚StrongName&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29&gt; method overload to create sandboxed application domains.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates, in general, how to create a domain using one of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateDomain_\" data-linktype=\"relative-path\">CreateDomain</a> overloads.  </p>\n<pre><code class=\"lang-vb\" name=\"AppDomain_Setup#1\">      &#39; Set up the AppDomainSetup\n      Dim setup As New AppDomainSetup()\n      setup.ApplicationBase = &quot;(some directory)&quot;\n      setup.ConfigurationFile = &quot;(some file)&quot;\n      \n      &#39; Set up the Evidence\n      Dim baseEvidence As Evidence = AppDomain.CurrentDomain.Evidence\n      Dim evidence As New Evidence(baseEvidence)\n      evidence.AddAssembly(&quot;(some assembly)&quot;)\n      evidence.AddHost(&quot;(some host)&quot;)\n      \n      &#39; Create the AppDomain\n      Dim newDomain As AppDomain = AppDomain.CreateDomain(&quot;newDomain&quot;, evidence, setup)\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_Setup#1\">      // Set up the AppDomainSetup\n      AppDomainSetup setup = new AppDomainSetup();\n      setup.ApplicationBase = &quot;(some directory)&quot;;\n      setup.ConfigurationFile = &quot;(some file)&quot;;\n\n      // Set up the Evidence\n      Evidence baseEvidence = AppDomain.CurrentDomain.Evidence;\n      Evidence evidence = new Evidence(baseEvidence);\n      evidence.AddAssembly(&quot;(some assembly)&quot;);\n      evidence.AddHost(&quot;(some host)&quot;);\n\n      // Create the AppDomain      \n      AppDomain newDomain = AppDomain.CreateDomain(&quot;newDomain&quot;, evidence, setup);\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_Setup#1\">   // Set up the AppDomainSetup\n   AppDomainSetup^ setup = gcnew AppDomainSetup;\n   setup-&gt;ApplicationBase = &quot;(some directory)&quot;;\n   setup-&gt;ConfigurationFile = &quot;(some file)&quot;;\n   \n   // Set up the Evidence\n   Evidence^ baseEvidence = AppDomain::CurrentDomain-&gt;Evidence;\n   Evidence^ evidence = gcnew Evidence( baseEvidence );\n   evidence-&gt;AddAssembly( &quot;(some assembly)&quot; );\n   evidence-&gt;AddHost( &quot;(some host)&quot; );\n   \n   // Create the AppDomain\n   AppDomain^ newDomain = AppDomain::CreateDomain( &quot;newDomain&quot;, evidence, setup );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateDomain_System_String_System_Security_Policy_Evidence_System_String_System_String_System_Boolean_System_AppDomainInitializer_System_String___\">\r\n    \r\n            <a id=\"System_AppDomain_CreateDomain_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDomain(String,Evidence,String,String,Boolean,AppDomainInitializer,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain. Specifies a callback method that is invoked when the application domain is initialized, and an array of string arguments to pass the callback method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, AppDomainInitializer adInit, string[] adInitArgs);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>friendlyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The friendly name of the domain. This friendly name can be displayed in user interfaces to identify the domain. For more information, see <span class=\"xref\">stem.AppDomain.FriendlyName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence that establishes the identity of the code that runs in the application domain. Pass <code>null</code> to use the evidence of the current application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>appBasePath</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The base directory that the assembly resolver uses to probe for assemblies. For more information, see <span class=\"xref\">stem.AppDomain.BaseDirectory*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>appRelativeSearchPath</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path relative to the base directory where the assembly resolver should probe for private assemblies. For more information, see <span class=\"xref\">stem.AppDomain.RelativeSearchPath*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>shadowCopyFiles</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to load a shadow copy of an assembly into the application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>adInit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomaininitializer\" data-linktype=\"relative-path\">AppDomainInitializer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.appdomaininitializer\" data-linktype=\"relative-path\">AppDomainInitializer</a> delegate that represents a callback method to invoke when the new <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> object is initialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>adInitArgs</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of string arguments to be passed to the callback represented by <code>adInit</code>, when the new <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> object is initialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a></div>\r\n                  </div>\r\n                  <p>The newly created application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>friendlyName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method represented by <code>adInit</code> is executed in the context of the newly created application domain.  </p>\n<p> If <code>securityInfo</code> is not supplied, the evidence from the current application domain is used.  </p>\n<p> For more information about shadow copying, see <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ShadowCopyFiles_\" data-linktype=\"relative-path\">ShadowCopyFiles</a>and <a href=\"../Topic/Shadow%20Copying%20Assemblies.md\" data-linktype=\"relative-path\">Shadow Copying Assemblies</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Do not use this method overload to create sandboxed application domains. Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the evidence that is supplied for <code>securityInfo</code> no longer affects the grant set of the application domain. Use the [CreateDomain(String,â€‚Evidence,â€‚AppDomainSetup,â€‚PermissionSet,â€‚StrongName&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29&gt; method overload to create sandboxed application domains.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstance_System_String_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objecthandle\" data-linktype=\"relative-path\">ObjectHandle</a></div>\r\n                  </div>\r\n                  <p>An object that is a wrapper for the new instance specified by <code>typeName</code>. The return value needs to be unwrapped to access the real object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> or <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching public constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typename</code> was not found in <code>assemblyName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>This instance is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method calls the default constructor for <code>typeName</code>.  </p>\n<p> See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for the format of <code>assemblyName</code>.  </p>\n<p> An attempt to call CreateInstance on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain. Since an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> is not <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, when this method attempts to return the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail. The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstance_System_String_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(String,String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly. A parameter specifies an array of activation attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, object[] activationAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object that specifies the URL that is required to activate a remote object.  </p>\n<p> This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objecthandle\" data-linktype=\"relative-path\">ObjectHandle</a></div>\r\n                  </div>\r\n                  <p>An object that is a wrapper for the new instance specified by <code>typeName</code>. The return value needs to be unwrapped to access the real object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> or <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching public constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typename</code> was not found in <code>assemblyName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>This instance is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method calls the default constructor for <code>typeName</code>.  </p>\n<p> See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for the format of <code>assemblyName</code>.  </p>\n<p> An attempt to call <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain. Since an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> is not <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, when this method attempts to return the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail. The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstance_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly. Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, and optional activation attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value specifying whether to perform a case-sensitive search or not.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects using reflection. If <code>binder</code> is null, the default binder is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <code>args</code> must be an empty array or null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for the current thread is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object that specifies the URL that is required to activate a remote object.  </p>\n<p> This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objecthandle\" data-linktype=\"relative-path\">ObjectHandle</a></div>\r\n                  </div>\r\n                  <p>An object that is a wrapper for the new instance specified by <code>typeName</code>. The return value needs to be unwrapped to access the real object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> or <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>assemblyName</code> was compiled with a later version of the common language runtime than the version that is currently loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typename</code> was not found in <code>assemblyName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>This instance is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for the format of <code>assemblyName</code>.  </p>\n<p> An attempt to call <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain. Since an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> is not <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, when this method attempts to return the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail. The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstance_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly. Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization to create the type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value specifying whether to perform a case-sensitive search or not.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects using reflection. If <code>binder</code> is null, the default binder is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <code>args</code> must be an empty array or null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for the current thread is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object that specifies the URL that is required to activate a remote object.  </p>\n<p> This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Information used to authorize creation of <code>typeName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objecthandle\" data-linktype=\"relative-path\">ObjectHandle</a></div>\r\n                  </div>\r\n                  <p>An object that is a wrapper for the new instance specified by <code>typeName</code>. The return value needs to be unwrapped to access the real object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> or <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.  </p>\n<p> -or-  </p>\n<p> <code>securityAttributes</code> is not <code>null</code>. When legacy CAS policy is not enabled, <code>securityAttributes</code> should be <code>null.</code></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typename</code> was not found in <code>assemblyName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>This instance is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for the format of <code>assemblyName</code>.  </p>\n<p> An attempt to call <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain. Since an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> is not <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, when this method attempts to return the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail. The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstanceAndUnwrap_System_String_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstanceAndUnwrap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceAndUnwrap(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type. Parameters specify the assembly where the type is defined, and the name of the type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object CreateInstanceAndUnwrap (string assemblyName, string typeName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the object specified by <code>typeName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> or <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching public constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typename</code> was not found in <code>assemblyName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a convenience method that combines <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> and <a class=\"xref\" href=\"system.runtime.remoting.objecthandle#System_Runtime_Remoting_ObjectHandle_Unwrap_\" data-linktype=\"relative-path\">Unwrap</a>. This method calls the default constructor for <code>typeName</code>.  </p>\n<p> See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for the format of <code>assemblyName</code>. See the <a class=\"xref\" href=\"system.type#System_Type_FullName_\" data-linktype=\"relative-path\">FullName</a> property for the format of <code>typeName</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you make an early-bound call to a method <code>M</code> of an object of type <code>T1</code> that was returned by CreateInstanceAndUnwrap, and that method makes an early-bound call to a method of an object of type <code>T2</code> in an assembly <code>C</code> other than the current assembly or the assembly containing <code>T1</code>, assembly <code>C</code> is loaded into the current application domain. This loading occurs even if the early-bound call to <code>T1.M()</code> was made in the body of a <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a>, or in other dynamically generated code. If the current domain is the default domain, assembly <code>C</code> cannot be unloaded until the process ends. If the current domain later attempts to load assembly <code>C</code>, the load might fail.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the simplest way to execute code in another application domain. The example defines a class named <code>Worker</code> that inherits from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>. The <code>Worker</code> class defines a method that displays the name of the application domain in which it is executing. The example creates instances of <code>Worker</code> in the default application domain and in a new application domain.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The assembly that contains <code>Worker</code> must be loaded into both application domains, but it can load other assemblies that exist only in the new application domain.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"CreateInstanceAndUnwrap2#1\">using namespace System;\nusing namespace System::Reflection;\n\npublic ref class Worker : MarshalByRefObject\n{\npublic:\n    void PrintDomain() \n    { \n        Console::WriteLine(&quot;Object is executing in AppDomain \\&quot;{0}\\&quot;&quot;,\n            AppDomain::CurrentDomain-&gt;FriendlyName); \n    }\n};\n \nvoid main()\n{\n    // Create an ordinary instance in the current AppDomain\n    Worker^ localWorker = gcnew Worker();\n    localWorker-&gt;PrintDomain();\n \n    // Create a new application domain, create an instance\n    // of Worker in the application domain, and execute code\n    // there.\n    AppDomain^ ad = AppDomain::CreateDomain(&quot;New domain&quot;);\n    Worker^ remoteWorker = (Worker^) ad-&gt;CreateInstanceAndUnwrap(\n        Worker::typeid-&gt;Assembly-&gt;FullName,\n        &quot;Worker&quot;);\n    remoteWorker-&gt;PrintDomain();\n}\n\n/* This code produces output similar to the following:\n\nObject is executing in AppDomain &quot;source.exe&quot;\nObject is executing in AppDomain &quot;New domain&quot;\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"CreateInstanceAndUnwrap2#1\">using System;\nusing System.Reflection;\n \npublic class Worker : MarshalByRefObject\n{\n    public void PrintDomain() \n    { \n        Console.WriteLine(&quot;Object is executing in AppDomain \\&quot;{0}\\&quot;&quot;,\n            AppDomain.CurrentDomain.FriendlyName); \n    }\n}\n \nclass Example\n{\n    public static void Main()\n    {\n        // Create an ordinary instance in the current AppDomain\n        Worker localWorker = new Worker();\n        localWorker.PrintDomain();\n \n        // Create a new application domain, create an instance\n        // of Worker in the application domain, and execute code\n        // there.\n        AppDomain ad = AppDomain.CreateDomain(&quot;New domain&quot;);\n        Worker remoteWorker = (Worker) ad.CreateInstanceAndUnwrap(\n            typeof(Worker).Assembly.FullName,\n            &quot;Worker&quot;);\n        remoteWorker.PrintDomain();\n    }\n}\n\n/* This code produces output similar to the following:\n\nObject is executing in AppDomain &quot;source.exe&quot;\nObject is executing in AppDomain &quot;New domain&quot;\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"CreateInstanceAndUnwrap2#1\">Imports System.Reflection\n\nPublic Class Worker\n    Inherits MarshalByRefObject\n    \n    Public Sub PrintDomain() \n        Console.WriteLine(&quot;Object is executing in AppDomain &quot;&quot;{0}&quot;&quot;&quot;, _\n            AppDomain.CurrentDomain.FriendlyName)\n    End Sub \nEnd Class \n\nClass Example\n    \n    Public Shared Sub Main() \n        &#39; Create an ordinary instance in the current AppDomain\n        Dim localWorker As New Worker()\n        localWorker.PrintDomain()\n        \n        &#39; Create a new application domain, create an instance\n        &#39; of Worker in the application domain, and execute code\n        &#39; there.\n        Dim ad As AppDomain = AppDomain.CreateDomain(&quot;New domain&quot;)\n        Dim remoteWorker As Worker = CType( _\n            ad.CreateInstanceAndUnwrap( _\n                GetType(Worker).Assembly.FullName, _\n                &quot;Worker&quot;), _\n            Worker)\n        remoteWorker.PrintDomain()\n    \n    End Sub \nEnd Class \n\n&#39; This code produces output similar to the following:\n&#39;\n&#39;Object is executing in AppDomain &quot;source.exe&quot;\n&#39;Object is executing in AppDomain &quot;New domain&quot;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstanceAndUnwrap_System_String_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstanceAndUnwrap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceAndUnwrap(String,String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type. Parameters specify the assembly where the type is defined, the name of the type, and an array of activation attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object CreateInstanceAndUnwrap (string assemblyName, string typeName, object[] activationAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object that specifies the URL that is required to activate a remote object.  </p>\n<p> This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the object specified by <code>typeName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> or <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching public constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typename</code> was not found in <code>assemblyName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a convenience method that combines <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> and <a class=\"xref\" href=\"system.runtime.remoting.objecthandle#System_Runtime_Remoting_ObjectHandle_Unwrap_\" data-linktype=\"relative-path\">Unwrap</a>. This method calls the default constructor for <code>typeName</code>.  </p>\n<p> See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for the format of <code>assemblyName</code>. See the <a class=\"xref\" href=\"system.type#System_Type_FullName_\" data-linktype=\"relative-path\">FullName</a> property for the format of <code>typeName</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you make an early-bound call to a method <code>M</code> of an object of type <code>T1</code> that was returned by <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a>, and that method makes an early-bound call to a method of an object of type <code>T2</code> in an assembly <code>C</code> other than the current assembly or the assembly containing <code>T1</code>, assembly <code>C</code> is loaded into the current application domain. This loading occurs even if the early-bound call to <code>T1.M()</code> was made in the body of a <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a>, or in other dynamically generated code. If the current domain is the default domain, assembly <code>C</code> cannot be unloaded until the process ends. If the current domain later attempts to load assembly <code>C</code>, the load might fail.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"ADDyno#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::Remoting;\n\nref class ADDyno\n{\npublic:\n   static Type^ CreateADynamicAssembly( interior_ptr&lt;AppDomain^&gt; myNewDomain, String^ executableNameNoExe )\n   {\n      String^ executableName = String::Concat( executableNameNoExe, &quot;.exe&quot; );\n      AssemblyName^ myAsmName = gcnew AssemblyName;\n      myAsmName-&gt;Name = executableNameNoExe;\n      myAsmName-&gt;CodeBase = Environment::CurrentDirectory;\n      AssemblyBuilder^ myAsmBuilder = ( *myNewDomain)-&gt;DefineDynamicAssembly( myAsmName, AssemblyBuilderAccess::RunAndSave );\n      Console::WriteLine( &quot;-- Dynamic Assembly instantiated.&quot; );\n      ModuleBuilder^ myModBuilder = myAsmBuilder-&gt;DefineDynamicModule( executableNameNoExe, executableName );\n      TypeBuilder^ myTypeBuilder = myModBuilder-&gt;DefineType( executableNameNoExe, TypeAttributes::Public, MarshalByRefObject::typeid );\n      array&lt;Type^&gt;^temp0 = nullptr;\n      MethodBuilder^ myFCMethod = myTypeBuilder-&gt;DefineMethod( &quot;CountLocalFiles&quot;, static_cast&lt;MethodAttributes&gt;(MethodAttributes::Public | MethodAttributes::Static), nullptr, temp0 );\n      MethodInfo^ currentDirGetMI = Environment::typeid-&gt;GetProperty( &quot;CurrentDirectory&quot; )-&gt;GetGetMethod();\n      array&lt;Type^&gt;^temp1 = {String::typeid};\n      MethodInfo^ writeLine0objMI = Console::typeid-&gt;GetMethod( &quot;WriteLine&quot;, temp1 );\n      array&lt;Type^&gt;^temp2 = {String::typeid,Object::typeid,Object::typeid};\n      MethodInfo^ writeLine2objMI = Console::typeid-&gt;GetMethod( &quot;WriteLine&quot;, temp2 );\n      array&lt;Type^&gt;^temp3 = {String::typeid};\n      MethodInfo^ getFilesMI = Directory::typeid-&gt;GetMethod( &quot;GetFiles&quot;, temp3 );\n      myFCMethod-&gt;InitLocals = true;\n      ILGenerator^ myFCIL = myFCMethod-&gt;GetILGenerator();\n      Console::WriteLine( &quot;-- Generating MSIL method body...&quot; );\n      LocalBuilder^ v0 = myFCIL-&gt;DeclareLocal( String::typeid );\n      LocalBuilder^ v1 = myFCIL-&gt;DeclareLocal( int::typeid );\n      LocalBuilder^ v2 = myFCIL-&gt;DeclareLocal( String::typeid );\n      LocalBuilder^ v3 = myFCIL-&gt;DeclareLocal( array&lt;String^&gt;::typeid );\n      Label evalForEachLabel = myFCIL-&gt;DefineLabel();\n      Label topOfForEachLabel = myFCIL-&gt;DefineLabel();\n\n      // Build the method body.\n      myFCIL-&gt;EmitCall( OpCodes::Call, currentDirGetMI, nullptr );\n      myFCIL-&gt;Emit( OpCodes::Stloc_S, v0 );\n      myFCIL-&gt;Emit( OpCodes::Ldc_I4_0 );\n      myFCIL-&gt;Emit( OpCodes::Stloc_S, v1 );\n      myFCIL-&gt;Emit( OpCodes::Ldstr, &quot;---&quot; );\n      myFCIL-&gt;EmitCall( OpCodes::Call, writeLine0objMI, nullptr );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v0 );\n      myFCIL-&gt;EmitCall( OpCodes::Call, getFilesMI, nullptr );\n      myFCIL-&gt;Emit( OpCodes::Stloc_S, v3 );\n      myFCIL-&gt;Emit( OpCodes::Br_S, evalForEachLabel );\n\n      // foreach loop starts here.\n      myFCIL-&gt;MarkLabel( topOfForEachLabel );\n\n      // Load array of strings and index, store value at index for output.\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v3 );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v1 );\n      myFCIL-&gt;Emit( OpCodes::Ldelem_Ref );\n      myFCIL-&gt;Emit( OpCodes::Stloc_S, v2 );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v2 );\n      myFCIL-&gt;EmitCall( OpCodes::Call, writeLine0objMI, nullptr );\n\n      // Increment counter by one.\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v1 );\n      myFCIL-&gt;Emit( OpCodes::Ldc_I4_1 );\n      myFCIL-&gt;Emit( OpCodes::Add );\n      myFCIL-&gt;Emit( OpCodes::Stloc_S, v1 );\n\n      // Determine if end of file list array has been reached.\n      myFCIL-&gt;MarkLabel( evalForEachLabel );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v1 );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v3 );\n      myFCIL-&gt;Emit( OpCodes::Ldlen );\n      myFCIL-&gt;Emit( OpCodes::Conv_I4 );\n      myFCIL-&gt;Emit( OpCodes::Blt_S, topOfForEachLabel );\n\n      //foreach loop end here.\n      myFCIL-&gt;Emit( OpCodes::Ldstr, &quot;---&quot; );\n      myFCIL-&gt;EmitCall( OpCodes::Call, writeLine0objMI, nullptr );\n      myFCIL-&gt;Emit( OpCodes::Ldstr, &quot;There are {0} files in {1}.&quot; );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v1 );\n      myFCIL-&gt;Emit( OpCodes::Box, int::typeid );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v0 );\n      myFCIL-&gt;EmitCall( OpCodes::Call, writeLine2objMI, nullptr );\n      myFCIL-&gt;Emit( OpCodes::Ret );\n      Type^ myType = myTypeBuilder-&gt;CreateType();\n      myAsmBuilder-&gt;SetEntryPoint( myFCMethod );\n      myAsmBuilder-&gt;Save( executableName );\n      Console::WriteLine( &quot;-- Method generated, type completed, and assembly saved to disk.&quot; );\n      return myType;\n   }\n};\n\nint main()\n{\n   String^ domainDir;\n   String^ executableName = nullptr;\n   Console::Write( &quot;Enter a name for the file counting assembly: &quot; );\n   String^ executableNameNoExe = Console::ReadLine();\n   executableName = String::Concat( executableNameNoExe, &quot;.exe&quot; );\n   Console::WriteLine( &quot;---&quot; );\n   domainDir = Environment::CurrentDirectory;\n   AppDomain^ curDomain = Thread::GetDomain();\n\n   // Create a new AppDomain, with the current directory as the base.\n   Console::WriteLine( &quot;Current Directory: {0}&quot;, Environment::CurrentDirectory );\n   AppDomainSetup^ mySetupInfo = gcnew AppDomainSetup;\n   mySetupInfo-&gt;ApplicationBase = domainDir;\n   mySetupInfo-&gt;ApplicationName = executableNameNoExe;\n   mySetupInfo-&gt;LoaderOptimization = LoaderOptimization::SingleDomain;\n   AppDomain^ myDomain = AppDomain::CreateDomain( executableNameNoExe, nullptr, mySetupInfo );\n   Console::WriteLine( &quot;Creating a new AppDomain &#39;{0}&#39;...&quot;, executableNameNoExe );\n   Console::WriteLine( &quot;-- Base Directory = &#39;{0}&#39;&quot;, myDomain-&gt;BaseDirectory );\n   Console::WriteLine( &quot;-- Shadow Copy? = &#39;{0}&#39;&quot;, myDomain-&gt;ShadowCopyFiles );\n   Console::WriteLine( &quot;---&quot; );\n   Type^ myFCType = ADDyno::CreateADynamicAssembly(  &amp;curDomain, executableNameNoExe );\n   Console::WriteLine( &quot;Loading &#39;{0}&#39; from &#39;{1}&#39;...&quot;, executableName, myDomain-&gt;BaseDirectory );\n   BindingFlags bFlags = static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::CreateInstance | BindingFlags::Instance);\n   Object^ myObjInstance = myDomain-&gt;CreateInstanceAndUnwrap( executableNameNoExe, executableNameNoExe, false, bFlags, nullptr, nullptr, nullptr, nullptr, nullptr );\n   Console::WriteLine( &quot;Executing method &#39;CountLocalFiles&#39; in {0}...&quot;, myObjInstance );\n   array&lt;Object^&gt;^temp4 = nullptr;\n   myFCType-&gt;InvokeMember( &quot;CountLocalFiles&quot;, BindingFlags::InvokeMethod, nullptr, myObjInstance, temp4 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"ADDyno#1\">\nusing System;\nusing System.IO;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Runtime.Remoting;\n\nclass ADDyno\n\n{\n\n   public static Type CreateADynamicAssembly(ref AppDomain myNewDomain,\n\t\t\t\t\t     string executableNameNoExe)\n   {\n\n\tstring executableName = executableNameNoExe + &quot;.exe&quot;;\n\n\tAssemblyName myAsmName = new AssemblyName();\n\tmyAsmName.Name = executableNameNoExe;\n\tmyAsmName.CodeBase = Environment.CurrentDirectory;\n\n\tAssemblyBuilder myAsmBuilder = myNewDomain.DefineDynamicAssembly(myAsmName,\n\t\t\t\t\t\tAssemblyBuilderAccess.RunAndSave);\n\tConsole.WriteLine(&quot;-- Dynamic Assembly instantiated.&quot;);\n\n\tModuleBuilder myModBuilder = myAsmBuilder.DefineDynamicModule(executableNameNoExe,\n\t\t\t\t\t\t\t\t      executableName);\n\n\tTypeBuilder myTypeBuilder = myModBuilder.DefineType(executableNameNoExe,\n\t\t\t\t\t\tTypeAttributes.Public,\n\t\t\t\t\t\ttypeof(MarshalByRefObject));\n\n\tMethodBuilder myFCMethod = myTypeBuilder.DefineMethod(&quot;CountLocalFiles&quot;,\n\t\t\t\t\t\tMethodAttributes.Public |\n\t\t\t\t\t\tMethodAttributes.Static,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tnew Type[] {  });\n\n\tMethodInfo currentDirGetMI = typeof(Environment).GetProperty(&quot;CurrentDirectory&quot;).GetGetMethod();\n\tMethodInfo writeLine0objMI = typeof(Console).GetMethod(&quot;WriteLine&quot;,\n\t\t\t\t     new Type[] { typeof(string) });\n\tMethodInfo writeLine2objMI = typeof(Console).GetMethod(&quot;WriteLine&quot;,\n\t\t\t\t     new Type[] { typeof(string), typeof(object), typeof(object) });\n\tMethodInfo getFilesMI = typeof(Directory).GetMethod(&quot;GetFiles&quot;, \n\t\t\t\tnew Type[] { typeof(string) });\n\n\tmyFCMethod.InitLocals = true;\n\n\tILGenerator myFCIL = myFCMethod.GetILGenerator();\n\n\tConsole.WriteLine(&quot;-- Generating MSIL method body...&quot;);\n\tLocalBuilder v0 = myFCIL.DeclareLocal(typeof(string));\n\tLocalBuilder v1 = myFCIL.DeclareLocal(typeof(int));\n\tLocalBuilder v2 = myFCIL.DeclareLocal(typeof(string));\n\tLocalBuilder v3 = myFCIL.DeclareLocal(typeof(string[]));\n\n\tLabel evalForEachLabel = myFCIL.DefineLabel();\n\tLabel topOfForEachLabel = myFCIL.DefineLabel();\n\n\t// Build the method body.\n\n\tmyFCIL.EmitCall(OpCodes.Call, currentDirGetMI, null);\n\tmyFCIL.Emit(OpCodes.Stloc_S, v0);\n\tmyFCIL.Emit(OpCodes.Ldc_I4_0);\n\tmyFCIL.Emit(OpCodes.Stloc_S, v1);\n\tmyFCIL.Emit(OpCodes.Ldstr, &quot;---&quot;);\n\tmyFCIL.EmitCall(OpCodes.Call, writeLine0objMI, null);\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v0);\n\tmyFCIL.EmitCall(OpCodes.Call, getFilesMI, null);\n\tmyFCIL.Emit(OpCodes.Stloc_S, v3);\n\n\tmyFCIL.Emit(OpCodes.Br_S, evalForEachLabel);\n\n\t// foreach loop starts here.\n\tmyFCIL.MarkLabel(topOfForEachLabel);\n\t\n        // Load array of strings and index, store value at index for output.\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v3);\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v1);\n\tmyFCIL.Emit(OpCodes.Ldelem_Ref);\n\tmyFCIL.Emit(OpCodes.Stloc_S, v2);\n\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v2);\n\tmyFCIL.EmitCall(OpCodes.Call, writeLine0objMI, null);\n\n\t// Increment counter by one.\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v1);\n\tmyFCIL.Emit(OpCodes.Ldc_I4_1);\n\tmyFCIL.Emit(OpCodes.Add);\n\tmyFCIL.Emit(OpCodes.Stloc_S, v1);\n\n\t// Determine if end of file list array has been reached.\n\tmyFCIL.MarkLabel(evalForEachLabel);\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v1);\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v3);\n\tmyFCIL.Emit(OpCodes.Ldlen);\n\tmyFCIL.Emit(OpCodes.Conv_I4);\n\tmyFCIL.Emit(OpCodes.Blt_S, topOfForEachLabel);\n\t//foreach loop end here.\n\n\tmyFCIL.Emit(OpCodes.Ldstr, &quot;---&quot;);\n\tmyFCIL.EmitCall(OpCodes.Call, writeLine0objMI, null);\n\tmyFCIL.Emit(OpCodes.Ldstr, &quot;There are {0} files in {1}.&quot;);\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v1);\n\tmyFCIL.Emit(OpCodes.Box, typeof(int));\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v0);\n\tmyFCIL.EmitCall(OpCodes.Call, writeLine2objMI, null);\n\n\tmyFCIL.Emit(OpCodes.Ret);\n\n\tType myType = myTypeBuilder.CreateType();\n\n\tmyAsmBuilder.SetEntryPoint(myFCMethod);\n\tmyAsmBuilder.Save(executableName);\t\t\n\tConsole.WriteLine(&quot;-- Method generated, type completed, and assembly saved to disk.&quot;); \n\n\treturn myType;\n\n   }\n\n   public static void Main() \n   {\n\n\tstring domainDir, executableName = null;\n\t\n\tConsole.Write(&quot;Enter a name for the file counting assembly: &quot;);\n\tstring executableNameNoExe = Console.ReadLine();\n\texecutableName = executableNameNoExe + &quot;.exe&quot;;\n\tConsole.WriteLine(&quot;---&quot;);\n\n\tdomainDir = Environment.CurrentDirectory;\n\n\tAppDomain curDomain = Thread.GetDomain();\t\n\n\n\t// Create a new AppDomain, with the current directory as the base.\n\n\tConsole.WriteLine(&quot;Current Directory: {0}&quot;, Environment.CurrentDirectory);\n\tAppDomainSetup mySetupInfo = new AppDomainSetup();\n\tmySetupInfo.ApplicationBase = domainDir;\n\tmySetupInfo.ApplicationName = executableNameNoExe;\n\tmySetupInfo.LoaderOptimization = LoaderOptimization.SingleDomain;\n\n\tAppDomain myDomain = AppDomain.CreateDomain(executableNameNoExe,\n\t\t\t\t\tnull, mySetupInfo);\n\n\tConsole.WriteLine(&quot;Creating a new AppDomain &#39;{0}&#39;...&quot;,\n\t\t\t\t\texecutableNameNoExe);\n\n\tConsole.WriteLine(&quot;-- Base Directory = &#39;{0}&#39;&quot;, myDomain.BaseDirectory); \n\tConsole.WriteLine(&quot;-- Shadow Copy? = &#39;{0}&#39;&quot;, myDomain.ShadowCopyFiles); \n\n\tConsole.WriteLine(&quot;---&quot;);\n\tType myFCType = CreateADynamicAssembly(ref curDomain, \n\t\t\t\t\t executableNameNoExe);\n\n\tConsole.WriteLine(&quot;Loading &#39;{0}&#39; from &#39;{1}&#39;...&quot;, executableName,\n\t\t\t  myDomain.BaseDirectory.ToString());\n\n\n\tBindingFlags bFlags = (BindingFlags.Public | BindingFlags.CreateInstance |\n\t\t\t       BindingFlags.Instance);\n\n\tObject myObjInstance = myDomain.CreateInstanceAndUnwrap(executableNameNoExe,\n\t\t\t\texecutableNameNoExe, false, bFlags, \n\t\t\t\tnull, null, null, null, null);\n\n\tConsole.WriteLine(&quot;Executing method &#39;CountLocalFiles&#39; in {0}...&quot;,\n\t\t\t   myObjInstance.ToString());\n\n\tmyFCType.InvokeMember(&quot;CountLocalFiles&quot;, BindingFlags.InvokeMethod, null,\n\t\t\t\tmyObjInstance, new object[] { });\n\t\t\t\n\t\t\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ADDyno#1\">Imports System\nImports System.IO\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Runtime.Remoting\n\n\n\nClass ADDyno\n   \n   \n   \n   Public Shared Function CreateADynamicAssembly(ByRef myNewDomain As AppDomain, executableNameNoExe As String) As Type\n      \n      Dim executableName As String = executableNameNoExe + &quot;.exe&quot;\n      \n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = executableNameNoExe\n      myAsmName.CodeBase = Environment.CurrentDirectory\n      \n      Dim myAsmBuilder As AssemblyBuilder = myNewDomain.DefineDynamicAssembly(myAsmName, AssemblyBuilderAccess.RunAndSave)\n      Console.WriteLine(&quot;-- Dynamic Assembly instantiated.&quot;)\n      \n      Dim myModBuilder As ModuleBuilder = myAsmBuilder.DefineDynamicModule(executableNameNoExe, executableName)\n      \n      Dim myTypeBuilder As TypeBuilder = myModBuilder.DefineType(executableNameNoExe, TypeAttributes.Public, GetType(MarshalByRefObject))\n      \n      Dim myFCMethod As MethodBuilder = myTypeBuilder.DefineMethod(&quot;CountLocalFiles&quot;, MethodAttributes.Public Or MethodAttributes.Static, Nothing, New Type() {})\n      \n      Dim currentDirGetMI As MethodInfo = GetType(Environment).GetProperty(&quot;CurrentDirectory&quot;).GetGetMethod()\n      Dim writeLine0objMI As MethodInfo = GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)})\n      Dim writeLine2objMI As MethodInfo = GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String), GetType(Object), GetType(Object)})\n      Dim getFilesMI As MethodInfo = GetType(Directory).GetMethod(&quot;GetFiles&quot;, New Type() {GetType(String)})\n      \n      myFCMethod.InitLocals = True\n      \n      Dim myFCIL As ILGenerator = myFCMethod.GetILGenerator()\n      \n      Console.WriteLine(&quot;-- Generating MSIL method body...&quot;)\n      Dim v0 As LocalBuilder = myFCIL.DeclareLocal(GetType(String))\n      Dim v1 As LocalBuilder = myFCIL.DeclareLocal(GetType(Integer))\n      Dim v2 As LocalBuilder = myFCIL.DeclareLocal(GetType(String))\n      Dim v3 As LocalBuilder = myFCIL.DeclareLocal(GetType(String()))\n      \n      Dim evalForEachLabel As Label = myFCIL.DefineLabel()\n      Dim topOfForEachLabel As Label = myFCIL.DefineLabel()\n      \n      &#39; Build the method body.\n      myFCIL.EmitCall(OpCodes.Call, currentDirGetMI, Nothing)\n      myFCIL.Emit(OpCodes.Stloc_S, v0)\n      myFCIL.Emit(OpCodes.Ldc_I4_0)\n      myFCIL.Emit(OpCodes.Stloc_S, v1)\n      myFCIL.Emit(OpCodes.Ldstr, &quot;---&quot;)\n      myFCIL.EmitCall(OpCodes.Call, writeLine0objMI, Nothing)\n      myFCIL.Emit(OpCodes.Ldloc_S, v0)\n      myFCIL.EmitCall(OpCodes.Call, getFilesMI, Nothing)\n      myFCIL.Emit(OpCodes.Stloc_S, v3)\n      \n      myFCIL.Emit(OpCodes.Br_S, evalForEachLabel)\n      \n      &#39; foreach loop starts here.\n      myFCIL.MarkLabel(topOfForEachLabel)\n      \n      &#39; Load array of strings and index, store value at index for output.\n      myFCIL.Emit(OpCodes.Ldloc_S, v3)\n      myFCIL.Emit(OpCodes.Ldloc_S, v1)\n      myFCIL.Emit(OpCodes.Ldelem_Ref)\n      myFCIL.Emit(OpCodes.Stloc_S, v2)\n      \n      myFCIL.Emit(OpCodes.Ldloc_S, v2)\n      myFCIL.EmitCall(OpCodes.Call, writeLine0objMI, Nothing)\n      \n      &#39; Increment counter by one.\n      myFCIL.Emit(OpCodes.Ldloc_S, v1)\n      myFCIL.Emit(OpCodes.Ldc_I4_1)\n      myFCIL.Emit(OpCodes.Add)\n      myFCIL.Emit(OpCodes.Stloc_S, v1)\n      \n      &#39; Determine if end of file list array has been reached.\n      myFCIL.MarkLabel(evalForEachLabel)\n      myFCIL.Emit(OpCodes.Ldloc_S, v1)\n      myFCIL.Emit(OpCodes.Ldloc_S, v3)\n      myFCIL.Emit(OpCodes.Ldlen)\n      myFCIL.Emit(OpCodes.Conv_I4)\n      myFCIL.Emit(OpCodes.Blt_S, topOfForEachLabel)\n      &#39;foreach loop end here.\n      myFCIL.Emit(OpCodes.Ldstr, &quot;---&quot;)\n      myFCIL.EmitCall(OpCodes.Call, writeLine0objMI, Nothing)\n      myFCIL.Emit(OpCodes.Ldstr, &quot;There are {0} files in {1}.&quot;)\n      myFCIL.Emit(OpCodes.Ldloc_S, v1)\n      myFCIL.Emit(OpCodes.Box, GetType(Integer))\n      myFCIL.Emit(OpCodes.Ldloc_S, v0)\n      myFCIL.EmitCall(OpCodes.Call, writeLine2objMI, Nothing)\n      \n      myFCIL.Emit(OpCodes.Ret)\n      \n      Dim myType As Type = myTypeBuilder.CreateType()\n      \n      myAsmBuilder.SetEntryPoint(myFCMethod)\n      myAsmBuilder.Save(executableName)\n      Console.WriteLine(&quot;-- Method generated, type completed, and assembly saved to disk.&quot;)\n      \n      Return myType\n   End Function &#39;CreateADynamicAssembly\n    \n   \n   Public Shared Sub Main()\n      \n      Dim executableName As String = Nothing\n      Dim domainDir As String\n      \n      Console.Write(&quot;Enter a name for the file counting assembly: &quot;)\n      Dim executableNameNoExe As String = Console.ReadLine()\n      executableName = executableNameNoExe + &quot;.exe&quot;\n      Console.WriteLine(&quot;---&quot;)\n      \n      domainDir = Environment.CurrentDirectory\n      \n      Dim curDomain As AppDomain = Thread.GetDomain()\n      \n      \n      &#39; Create a new AppDomain, with the current directory as the base.\n      Console.WriteLine(&quot;Current Directory: {0}&quot;, Environment.CurrentDirectory)\n      Dim mySetupInfo As New AppDomainSetup()\n      mySetupInfo.ApplicationBase = domainDir\n      mySetupInfo.ApplicationName = executableNameNoExe\n      mySetupInfo.LoaderOptimization = LoaderOptimization.SingleDomain\n      \n      Dim myDomain As AppDomain = AppDomain.CreateDomain(executableNameNoExe, Nothing, mySetupInfo)\n      \n      Console.WriteLine(&quot;Creating a new AppDomain &#39;{0}&#39;...&quot;, executableNameNoExe)\n      \n      Console.WriteLine(&quot;-- Base Directory = &#39;{0}&#39;&quot;, myDomain.BaseDirectory)\n      Console.WriteLine(&quot;-- Shadow Copy? = &#39;{0}&#39;&quot;, myDomain.ShadowCopyFiles)\n      \n      Console.WriteLine(&quot;---&quot;)\n      Dim myFCType As Type = CreateADynamicAssembly(curDomain, executableNameNoExe)\n      \n      Console.WriteLine(&quot;Loading &#39;{0}&#39; from &#39;{1}&#39;...&quot;, executableName, myDomain.BaseDirectory.ToString())\n      \n      \n      Dim bFlags As BindingFlags = BindingFlags.Public Or BindingFlags.CreateInstance Or BindingFlags.Instance\n      \n      Dim myObjInstance As [Object] = myDomain.CreateInstanceAndUnwrap(executableNameNoExe, executableNameNoExe, False, bFlags, Nothing, Nothing, Nothing, Nothing, Nothing)\n      \n      Console.WriteLine(&quot;Executing method &#39;CountLocalFiles&#39; in {0}...&quot;, myObjInstance.ToString())\n      \n      myFCType.InvokeMember(&quot;CountLocalFiles&quot;, BindingFlags.InvokeMethod, Nothing, myObjInstance, New Object() {})\n   End Sub &#39;Main\nEnd Class &#39;ADDyno \n\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstanceAndUnwrap_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstanceAndUnwrap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceAndUnwrap(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object CreateInstanceAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value specifying whether to perform a case-sensitive search or not.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects using reflection. If <code>binder</code> is null, the default binder is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <code>args</code> must be an empty array or null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A culture-specific object used to govern the coercion of types. If <code>culture</code> is <code>null</code>, the <code>CultureInfo</code> for the current thread is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object. that specifies the URL that is required to activate a remote object.  </p>\n<p> This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the object specified by <code>typeName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> or <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typename</code> was not found in <code>assemblyName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>assemblyName</code> was compiled with a later version of the common language runtime than the version that is currently loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a convenience method that combines <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> and <a class=\"xref\" href=\"system.runtime.remoting.objecthandle#System_Runtime_Remoting_ObjectHandle_Unwrap_\" data-linktype=\"relative-path\">Unwrap</a>.  </p>\n<p> See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for the format of <code>assemblyName</code>. See the <a class=\"xref\" href=\"system.type#System_Type_FullName_\" data-linktype=\"relative-path\">FullName</a> property for the format of <code>typeName</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you make an early-bound call to a method <code>M</code> of an object of type <code>T1</code> that was returned by <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a>, and that method makes an early-bound call to a method of an object of type <code>T2</code> in an assembly <code>C</code> other than the current assembly or the assembly containing <code>T1</code>, assembly <code>C</code> is loaded into the current application domain. This loading occurs even if the early-bound call to <code>T1.M()</code> was made in the body of a <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a>, or in other dynamically generated code. If the current domain is the default domain, assembly <code>C</code> cannot be unloaded until the process ends. If the current domain later attempts to load assembly <code>C</code>, the load might fail.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the use of the <code>ignoreCase</code> parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_CreateInstance_IgnoreCase#1\">using System;\nusing System.Reflection;\n\nclass Test {\n\n   static void Main() {\n      InstantiateINT32(false);     // Failed!\n      InstantiateINT32(true);      // OK!\n   }\n   \n   static void InstantiateINT32(bool ignoreCase) {\n      try {\n         AppDomain currentDomain = AppDomain.CurrentDomain;\n         object instance = currentDomain.CreateInstanceAndUnwrap(\n            &quot;mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;,\n            &quot;SYSTEM.INT32&quot;,\n            ignoreCase,\n            BindingFlags.Default,\n            null,\n            null,\n            null,\n            null,\n            null\n         );\n         Console.WriteLine(instance.GetType());\n      } catch (TypeLoadException e) {\n         Console.WriteLine(e.Message);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_CreateInstance_IgnoreCase#1\">using namespace System;\nusing namespace System::Reflection;\nstatic void InstantiateINT32( bool ignoreCase )\n{\n   try\n   {\n      AppDomain^ currentDomain = AppDomain::CurrentDomain;\n      Object^ instance = currentDomain-&gt;CreateInstanceAndUnwrap( \n         &quot;mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;, \n         &quot;SYSTEM.INT32&quot;, \n         ignoreCase, \n         BindingFlags::Default, \n         nullptr, \n         nullptr, \n         nullptr, \n         nullptr, \n         nullptr );\n      Console::WriteLine( instance-&gt;GetType() );\n   }\n   catch ( TypeLoadException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nint main()\n{\n   InstantiateINT32( false ); // Failed!\n   InstantiateINT32( true ); // OK!\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_CreateInstance_IgnoreCase#1\">Imports System\nImports System.Reflection\n\nModule Test\n\n   Sub Main()\n      InstantiateINT32(False)\t&#39; Failed!\n      InstantiateINT32(True)\t&#39; OK!\n   End Sub &#39;Main\n\n   Sub InstantiateINT32(ignoreCase As Boolean)\n      Try\n         Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n         Dim instance As Object = currentDomain.CreateInstanceAndUnwrap( _\n            &quot;mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;, _\n            &quot;SYSTEM.INT32&quot;, _\n            ignoreCase, _\n            BindingFlags.Default, _\n            Nothing, _\n            Nothing, _\n            Nothing, _\n            Nothing, _\n            Nothing  _\n         )\n         Console.WriteLine(instance.GetType())\n      Catch e As TypeLoadException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateINT32\n\nEnd Module &#39;Test\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstanceAndUnwrap_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstanceAndUnwrap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceAndUnwrap(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type. Parameters specify the name of the type, and how it is found and created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object CreateInstanceAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value specifying whether to perform a case-sensitive search or not.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects using reflection. If <code>binder</code> is null, the default binder is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <code>args</code> must be an empty array or null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A culture-specific object used to govern the coercion of types. If <code>culture</code> is <code>null</code>, the <code>CultureInfo</code> for the current thread is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object that specifies the URL that is required to activate a remote object.  </p>\n<p> This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Information used to authorize creation of <code>typeName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An instance of the object specified by <code>typeName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> or <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typename</code> was not found in <code>assemblyName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a convenience method that combines <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> and <a class=\"xref\" href=\"system.runtime.remoting.objecthandle#System_Runtime_Remoting_ObjectHandle_Unwrap_\" data-linktype=\"relative-path\">Unwrap</a>.  </p>\n<p> See <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> for the format of <code>assemblyName</code>. See the <a class=\"xref\" href=\"system.type#System_Type_FullName_\" data-linktype=\"relative-path\">FullName</a> property for the format of <code>typeName</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you make an early-bound call to a method <code>M</code> of an object of type <code>T1</code> that was returned by <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a>, and that method makes an early-bound call to a method of an object of type <code>T2</code> in an assembly <code>C</code> other than the current assembly or the assembly containing <code>T1</code>, assembly <code>C</code> is loaded into the current application domain. This loading occurs even if the early-bound call to <code>T1.M()</code> was made in the body of a <a class=\"xref\" href=\"system.reflection.emit.dynamicmethod\" data-linktype=\"relative-path\">DynamicMethod</a>, or in other dynamically generated code. If the current domain is the default domain, assembly <code>C</code> cannot be unloaded until the process ends. If the current domain later attempts to load assembly <code>C</code>, the load might fail.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the use of the <code>ignoreCase</code> parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_CreateInstance_IgnoreCase#1\">using System;\nusing System.Reflection;\n\nclass Test {\n\n   static void Main() {\n      InstantiateINT32(false);     // Failed!\n      InstantiateINT32(true);      // OK!\n   }\n   \n   static void InstantiateINT32(bool ignoreCase) {\n      try {\n         AppDomain currentDomain = AppDomain.CurrentDomain;\n         object instance = currentDomain.CreateInstanceAndUnwrap(\n            &quot;mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;,\n            &quot;SYSTEM.INT32&quot;,\n            ignoreCase,\n            BindingFlags.Default,\n            null,\n            null,\n            null,\n            null,\n            null\n         );\n         Console.WriteLine(instance.GetType());\n      } catch (TypeLoadException e) {\n         Console.WriteLine(e.Message);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_CreateInstance_IgnoreCase#1\">using namespace System;\nusing namespace System::Reflection;\nstatic void InstantiateINT32( bool ignoreCase )\n{\n   try\n   {\n      AppDomain^ currentDomain = AppDomain::CurrentDomain;\n      Object^ instance = currentDomain-&gt;CreateInstanceAndUnwrap( \n         &quot;mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;, \n         &quot;SYSTEM.INT32&quot;, \n         ignoreCase, \n         BindingFlags::Default, \n         nullptr, \n         nullptr, \n         nullptr, \n         nullptr, \n         nullptr );\n      Console::WriteLine( instance-&gt;GetType() );\n   }\n   catch ( TypeLoadException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nint main()\n{\n   InstantiateINT32( false ); // Failed!\n   InstantiateINT32( true ); // OK!\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_CreateInstance_IgnoreCase#1\">Imports System\nImports System.Reflection\n\nModule Test\n\n   Sub Main()\n      InstantiateINT32(False)\t&#39; Failed!\n      InstantiateINT32(True)\t&#39; OK!\n   End Sub &#39;Main\n\n   Sub InstantiateINT32(ignoreCase As Boolean)\n      Try\n         Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n         Dim instance As Object = currentDomain.CreateInstanceAndUnwrap( _\n            &quot;mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;, _\n            &quot;SYSTEM.INT32&quot;, _\n            ignoreCase, _\n            BindingFlags.Default, _\n            Nothing, _\n            Nothing, _\n            Nothing, _\n            Nothing, _\n            Nothing  _\n         )\n         Console.WriteLine(instance.GetType())\n      Catch e As TypeLoadException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateINT32\n\nEnd Module &#39;Test\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstanceFrom_System_String_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstanceFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceFrom(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name, including the path, of a file that contains an assembly that defines the requested type. The assembly is loaded using the <span class=\"xref\">stem.Reflection.Assembly.LoadFrom*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objecthandle\" data-linktype=\"relative-path\">ObjectHandle</a></div>\r\n                  </div>\r\n                  <p>An object that is a wrapper for the new instance, or <code>null</code> if <code>typeName</code> is not found. The return value needs to be unwrapped to access the real object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> was not found in <code>assemblyFile</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No parameterless public constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have sufficient permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>This instance is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default constructor for <code>typeName</code> is invoked.  </p>\n<p> For more information, see the <a class=\"xref\" href=\"system.activator#System_Activator_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> method.  </p>\n<p> When the CreateInstanceFrom method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain. However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain. For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound. When the assembly is loaded into the calling application domain, exceptions can occur.  </p>\n<ul>\n<li><p>If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a> can occur.  </p>\n</li>\n<li><p>If the calling application domain makes early-bound calls to the instance type, <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> can be thrown when an attempt is made to cast the instance.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the CreateInstanceFrom method overload to create an instance of an object in a target application domain and call its methods.  </p>\n<p> The example defines the <code>MarshallableExample</code> class, which can be marshaled across application domain boundaries. The example builds a path to the currently executing assembly, creates a target application domain, and uses the CreateInstanceFrom method overload to load the example assembly into the target application domain and create an instance of <code>MarshallableExample</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The path is absolute in this example, but a relative path would also work because the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method is used to load the assembly.  </p>\n</div>\n<p> After unwrapping the object handle, the example demonstrates three ways to use an object in a target application domain:  </p>\n<ul>\n<li><p>Invoking a method with late binding, using reflection. This requires type information, which causes the assembly to be loaded into the application domain of the caller. (In this example, it is already loaded.)  </p>\n</li>\n<li><p>Casting the object to an interface known to both the caller and the callee. If the interface is defined in the calling assembly or in a third assembly referenced by both the caller and the callee, the called assembly is not loaded into the application domain of the caller.  </p>\n</li>\n<li><p>Using the object directly when its type is known to the caller. The assembly must be loaded into the application domain of the caller.  </p>\n<p>Another way to avoid loading the called assembly into the application domain of the caller is for the caller to derive from the <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> class and to define a method that can be run in the target application domain. That method can use reflection to examine a target assembly, because the target assembly is already loaded into the target application domain. See the example for the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DynamicDirectory_\" data-linktype=\"relative-path\">DynamicDirectory</a> property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.AppDomain.CreateInstanceFrom_StringString#1\">using System;\n\npublic interface ITest\n{\n    void Test(string greeting);\n}\n\npublic class MarshallableExample : MarshalByRefObject, ITest\n{\n    static void Main()\n    {\n        // Construct a path to the current assembly.\n        string assemblyPath = Environment.CurrentDirectory + &quot;\\\\&quot; +\n            typeof(MarshallableExample).Assembly.GetName().Name + &quot;.exe&quot;;\n\n        AppDomain ad = AppDomain.CreateDomain(&quot;MyDomain&quot;);\n \n        System.Runtime.Remoting.ObjectHandle oh = \n            ad.CreateInstanceFrom(assemblyPath, &quot;MarshallableExample&quot;);\n\n        object obj = oh.Unwrap();\n\n\n        // Three ways to use the newly created object, depending on how\n        // much is known about the type: Late bound, early bound through \n        // a mutually known interface, or early binding of a known type.\n        //\n        obj.GetType().InvokeMember(&quot;Test&quot;, \n            System.Reflection.BindingFlags.InvokeMethod, \n            Type.DefaultBinder, obj, new object[] { &quot;Hello&quot; });\n\n        ITest it = (ITest) obj;\n        it.Test(&quot;Hi&quot;);\n\n        MarshallableExample ex = (MarshallableExample) obj;\n        ex.Test(&quot;Goodbye&quot;);\n    }\n\n    public void Test(string greeting)\n    {\n        Console.WriteLine(&quot;{0} from &#39;{1}&#39;!&quot;, greeting,\n            AppDomain.CurrentDomain.FriendlyName);\n    }\n}\n\n/* This example produces the following output:\n\nHello from &#39;MyDomain&#39;!\nHi from &#39;MyDomain&#39;!\nGoodbye from &#39;MyDomain&#39;!\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.AppDomain.CreateInstanceFrom_StringString#1\">using namespace System;\n\npublic interface class ITest\n{\n    void Test(String^ greeting);\n};\n\npublic ref class MarshallableExample : MarshalByRefObject, ITest\n{\npublic:\n    virtual void Test(String^ greeting)\n    {\n        Console::WriteLine(&quot;{0} from &#39;{1}&#39;!&quot;, greeting,\n            AppDomain::CurrentDomain-&gt;FriendlyName);\n    }\n};\n\nvoid main()\n{\n    // Construct a path to the current assembly.\n    String^ assemblyPath = Environment::CurrentDirectory + &quot;\\\\&quot; +\n        MarshallableExample::typeid-&gt;Assembly-&gt;GetName()-&gt;Name + &quot;.exe&quot;;\n\n    AppDomain^ ad = AppDomain::CreateDomain(&quot;MyDomain&quot;);\n \n    System::Runtime::Remoting::ObjectHandle^ oh = \n        ad-&gt;CreateInstanceFrom(assemblyPath, &quot;MarshallableExample&quot;);\n\n    Object^ obj = oh-&gt;Unwrap();\n\n\n    // Three ways to use the newly created object, depending on how\n    // much is known about the type: Late bound, early bound through \n    // a mutually known interface, or early binding of a known type.\n    //\n    obj-&gt;GetType()-&gt;InvokeMember(&quot;Test&quot;, \n        System::Reflection::BindingFlags::InvokeMethod, \n        Type::DefaultBinder, obj, gcnew array&lt;Object^&gt; { &quot;Hello&quot; });\n\n    ITest^ it = (ITest^) obj;\n    it-&gt;Test(&quot;Hi&quot;);\n\n    MarshallableExample^ ex = (MarshallableExample^) obj;\n    ex-&gt;Test(&quot;Goodbye&quot;);\n}\n\n/* This example produces the following output:\n\nHello from &#39;MyDomain&#39;!\nHi from &#39;MyDomain&#39;!\nGoodbye from &#39;MyDomain&#39;!\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.AppDomain.CreateInstanceFrom_StringString#1\">Imports System\n\nPublic Interface ITest\n\n    Sub Test(ByVal greeting As String)\nEnd Interface\n\nPublic Class MarshallableExample \n    Inherits MarshalByRefObject\n    Implements ITest\n\n    Shared Sub Main()\n    \n        &#39; Construct a path to the current assembly.\n        Dim assemblyPath As String = Environment.CurrentDirectory &amp; &quot;\\&quot; &amp;\n            GetType(MarshallableExample).Assembly.GetName().Name &amp; &quot;.exe&quot;\n\n        Dim ad As AppDomain = AppDomain.CreateDomain(&quot;MyDomain&quot;)\n \n        Dim oh As System.Runtime.Remoting.ObjectHandle = \n            ad.CreateInstanceFrom(assemblyPath, &quot;MarshallableExample&quot;)\n\n        Dim obj As Object = oh.Unwrap()\n\n\n        &#39; Three ways to use the newly created object, depending on how\n        &#39; much is known about the type: Late bound, early bound through \n        &#39; a mutually known interface, or early binding of a known type.\n        &#39;\n        obj.GetType().InvokeMember(&quot;Test&quot;, \n            System.Reflection.BindingFlags.InvokeMethod, \n            Type.DefaultBinder, obj, New Object() { &quot;Hello&quot; })\n\n        Dim it As ITest = CType(obj, ITest) \n        it.Test(&quot;Hi&quot;)\n\n        Dim ex As MarshallableExample = CType(obj, MarshallableExample) \n        ex.Test(&quot;Goodbye&quot;)\n    End Sub\n\n    Public Sub Test(ByVal greeting As String) Implements ITest.Test\n    \n        Console.WriteLine(&quot;{0} from &#39;{1}&#39;!&quot;, greeting,\n            AppDomain.CurrentDomain.FriendlyName)\n    End Sub\nEnd Class\n\n&#39; This example produces the following output:\n&#39;\n&#39;Hello from &#39;MyDomain&#39;!\n&#39;Hi from &#39;MyDomain&#39;!\n&#39;Goodbye from &#39;MyDomain&#39;!\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstanceFrom_System_String_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstanceFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceFrom(String,String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, object[] activationAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name, including the path, of a file that contains an assembly that defines the requested type. The assembly is loaded using the <span class=\"xref\">stem.Reflection.Assembly.LoadFrom*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object that specifies the URL that is required to activate a remote object.  </p>\n<p> This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objecthandle\" data-linktype=\"relative-path\">ObjectHandle</a></div>\r\n                  </div>\r\n                  <p>An object that is a wrapper for the new instance, or <code>null</code> if <code>typeName</code> is not found. The return value needs to be unwrapped to access the real object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> was not found in <code>assemblyFile</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have sufficient permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching public constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>This instance is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default constructor for <code>typeName</code> is invoked.  </p>\n<p> For more information about this method, see the <a class=\"xref\" href=\"system.activator#System_Activator_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> method.  </p>\n<p> When the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain. However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain. For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound. When the assembly is loaded into the calling application domain, exceptions can occur.  </p>\n<ul>\n<li><p>If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a> can occur.  </p>\n</li>\n<li><p>If the calling application domain makes early-bound calls to the instance type, <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> can be thrown when an attempt is made to cast the instance.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstanceFrom_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstanceFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name, including the path, of a file that contains an assembly that defines the requested type. The assembly is loaded using the <span class=\"xref\">stem.Reflection.Assembly.LoadFrom*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value specifying whether to perform a case-sensitive search or not.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects through reflection. If <code>binder</code> is null, the default binder is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <code>args</code> must be an empty array or null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for the current thread is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object that specifies the URL that is required to activate a remote object.  </p>\n<p> This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objecthandle\" data-linktype=\"relative-path\">ObjectHandle</a></div>\r\n                  </div>\r\n                  <p>An object that is a wrapper for the new instance, or <code>null</code> if <code>typeName</code> is not found. The return value needs to be unwrapped to access the real object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> was not found in <code>assemblyFile</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching public constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have sufficient permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>This instance is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information, see the <a class=\"xref\" href=\"system.activator#System_Activator_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> method.  </p>\n<p> When the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain. However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain. For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound. When the assembly is loaded into the calling application domain, exceptions can occur.  </p>\n<ul>\n<li><p>If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a> can occur.  </p>\n</li>\n<li><p>If the calling application domain makes early-bound calls to the instance type, <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> can be thrown when an attempt is made to cast the instance.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstanceFrom_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstanceFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name, including the path, of a file that contains an assembly that defines the requested type. The assembly is loaded using the <span class=\"xref\">stem.Reflection.Assembly.LoadFrom*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value specifying whether to perform a case-sensitive search or not.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects through reflection. If <code>binder</code> is null, the default binder is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <code>args</code> must be an empty array or null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for the current thread is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object that specifies the URL that is required to activate a remote object.  </p>\n<p> This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Information used to authorize creation of <code>typeName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objecthandle\" data-linktype=\"relative-path\">ObjectHandle</a></div>\r\n                  </div>\r\n                  <p>An object that is a wrapper for the new instance, or <code>null</code> if <code>typeName</code> is not found. The return value needs to be unwrapped to access the real object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.  </p>\n<p> -or-  </p>\n<p> <code>securityAttributes</code> is not <code>null</code>. When legacy CAS policy is not enabled, <code>securityAttributes</code> should be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> was not found in <code>assemblyFile</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching public constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have sufficient permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p>This instance is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about this method, see the <a class=\"xref\" href=\"system.activator#System_Activator_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> method.  </p>\n<p> When the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain. However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain. For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound. When the assembly is loaded into the calling application domain, exceptions can occur.  </p>\n<ul>\n<li><p>If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a> can occur.  </p>\n</li>\n<li><p>If the calling application domain makes early-bound calls to the instance type, <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> can be thrown when an attempt is made to cast the instance.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstanceFromAndUnwrap_System_String_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstanceFromAndUnwrap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceFromAndUnwrap(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name and path of the assembly that defines the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The requested object, or <code>null</code> if <code>typeName</code> is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> was not found in <code>assemblyName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No parameterless public constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have sufficient permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a convenience method that combines <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> and <a class=\"xref\" href=\"system.runtime.remoting.objecthandle#System_Runtime_Remoting_ObjectHandle_Unwrap_\" data-linktype=\"relative-path\">Unwrap</a>. This method calls the default constructor for <code>typeName</code>.  </p>\n<p> For more information, see the <a class=\"xref\" href=\"system.activator#System_Activator_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstanceFromAndUnwrap_System_String_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstanceFromAndUnwrap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceFromAndUnwrap(String,String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName, object[] activationAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name and path of the assembly that defines the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly (see the <span class=\"xref\">stem.Type.FullName*</span> property).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object that specifies the URL that is required to activate a remote object.  </p>\n<p> This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The requested object, or <code>null</code> if <code>typeName</code> is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> was not found in <code>assemblyName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No parameterless public constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have sufficient permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a convenience method that combines <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> and <a class=\"xref\" href=\"system.runtime.remoting.objecthandle#System_Runtime_Remoting_ObjectHandle_Unwrap_\" data-linktype=\"relative-path\">Unwrap</a>. This method calls the default constructor for <code>typeName</code>.  </p>\n<p> For more information about this method, see the <a class=\"xref\" href=\"system.activator#System_Activator_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstanceFromAndUnwrap_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstanceFromAndUnwrap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceFromAndUnwrap(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly file, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object CreateInstanceFromAndUnwrap (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name and path of the assembly that defines the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value specifying whether to perform a case-sensitive search or not.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects through reflection. If <code>binder</code> is null, the default binder is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <code>args</code> must be an empty array or null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for the current thread is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object that specifies the URL that is required to activate a remote object.  </p>\n<p> This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The requested object, or <code>null</code> if <code>typeName</code> is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> was not found in <code>assemblyName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching public constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have sufficient permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>assemblyName</code> was compiled with a later version of the common language runtime that the version that is currently loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a convenience method that combines <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> and <a class=\"xref\" href=\"system.runtime.remoting.objecthandle#System_Runtime_Remoting_ObjectHandle_Unwrap_\" data-linktype=\"relative-path\">Unwrap</a>.  </p>\n<p> For more information about this method, see the <a class=\"xref\" href=\"system.activator#System_Activator_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_CreateInstanceFromAndUnwrap_System_String_System_String_System_Boolean_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_System_Object___System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_AppDomain_CreateInstanceFromAndUnwrap_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstanceFromAndUnwrap(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the specified type defined in the specified assembly file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name and path of the assembly that defines the requested type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <span class=\"xref\">stem.Type.FullName*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreCase</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Boolean value specifying whether to perform a case-sensitive search or not.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bindingAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of zero or more bit flags that affect the search for the <code>typeName</code> constructor. If <code>bindingAttr</code> is zero, a case-sensitive search for public constructors is conducted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects through reflection. If <code>binder</code> is null, the default binder is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to pass to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to invoke. If the default constructor is preferred, <code>args</code> must be an empty array or null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Culture-specific information that governs the coercion of <code>args</code> to the formal types declared for the <code>typeName</code> constructor. If <code>culture</code> is <code>null</code>, the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> for the current thread is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of one or more attributes that can participate in activation. Typically, an array that contains a single <a class=\"xref\" href=\"system.runtime.remoting.activation.urlattribute\" data-linktype=\"relative-path\">UrlAttribute</a> object that specifies the URL that is required to activate a remote object.  </p>\n<p> This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Information used to authorize creation of <code>typeName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The requested object, or <code>null</code> if <code>typeName</code> is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>typeName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The caller cannot provide activation attributes for an object that does not inherit from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a></div>\r\n                  </div>\r\n                  <p><code>typeName</code> was not found in <code>assemblyName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>No matching public constructor was found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have sufficient permission to call this constructor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a convenience method that combines <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> and <a class=\"xref\" href=\"system.runtime.remoting.objecthandle#System_Runtime_Remoting_ObjectHandle_Unwrap_\" data-linktype=\"relative-path\">Unwrap</a>.  </p>\n<p> For more information about this method, see the <a class=\"xref\" href=\"system.activator#System_Activator_CreateInstanceFrom_\" data-linktype=\"relative-path\">CreateInstanceFrom</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly with the specified name and access mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access mode for the dynamic assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and access mode.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> begins with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method should only be used to define a dynamic assembly in the current application domain. For more information, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> in <code>refusedPermissions</code>. Including <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> in the <code>refusedPermissions</code> parameter ensures that the MSIL is verified. A limitation of this technique is that it also causes <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> to be thrown when used with code that demands full trust.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the DefineDynamicAssembly method and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_DefineDynamicAssembly#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n\n      InstantiateMyDynamicType(currentDomain);   // Failed!\n      \n      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);\n      \n      InstantiateMyDynamicType(currentDomain);   // OK!\n   }\n\n   static void InstantiateMyDynamicType(AppDomain domain) {\n      try {\n         // You must supply a valid fully qualified assembly name here. \n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }   \n\n   static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args) {\n      return DefineDynamicAssembly((AppDomain) sender);\n   }\n   \n   static Assembly DefineDynamicAssembly(AppDomain domain) {\n      // Build a dynamic assembly using Reflection Emit API.\n   \n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;;\n\n      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);\n      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;);\n      TypeBuilder typeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public);\n      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);\n      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;);\n      ilGenerator.Emit(OpCodes.Ret);\n\n      typeBuilder.CreateType();\n\n      return assemblyBuilder;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_DefineDynamicAssembly#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nref class Test\n{\npublic:\n   static void InstantiateMyDynamicType( AppDomain^ domain )\n   {\n      try\n      {\n         \n         // You must supply a valid fully qualified assembly name here.\n         domain-&gt;CreateInstance( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   static Assembly^ MyResolveEventHandler( Object^ sender, ResolveEventArgs^ args )\n   {\n      return DefineDynamicAssembly( dynamic_cast&lt;AppDomain^&gt;(sender) );\n   }\n\n   static Assembly^ DefineDynamicAssembly( AppDomain^ domain )\n   {\n      \n      // Build a dynamic assembly using Reflection Emit API.\n      AssemblyName^ assemblyName = gcnew AssemblyName;\n      assemblyName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n      AssemblyBuilder^ assemblyBuilder = domain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Run );\n      ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule( &quot;MyDynamicModule&quot; );\n      TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType( &quot;MyDynamicType&quot;, TypeAttributes::Public );\n      ConstructorBuilder^ constructorBuilder = typeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, nullptr );\n      ILGenerator^ ilGenerator = constructorBuilder-&gt;GetILGenerator();\n      ilGenerator-&gt;EmitWriteLine( &quot;MyDynamicType instantiated!&quot; );\n      ilGenerator-&gt;Emit( OpCodes::Ret );\n      typeBuilder-&gt;CreateType();\n      return assemblyBuilder;\n   }\n\n};\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   Test::InstantiateMyDynamicType( currentDomain ); // Failed!\n   currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler( Test::MyResolveEventHandler );\n   Test::InstantiateMyDynamicType( currentDomain ); // OK!\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_DefineDynamicAssembly#1\">\nImports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;Failed!\n      \n      AddHandler currentDomain.AssemblyResolve, AddressOf MyResolveEventHandler\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;OK!\n   End Sub &#39;Main\n   \n   Sub InstantiateMyDynamicType(domain As AppDomain)\n      Try\n         &#39; You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateMyDynamicType\n   \n   Function MyResolveEventHandler(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n      Return DefineDynamicAssembly(DirectCast(sender, AppDomain))\n   End Function &#39;MyResolveEventHandler\n   \n   Function DefineDynamicAssembly(domain As AppDomain) As System.Reflection.Assembly\n      &#39; Build a dynamic assembly using Reflection Emit API.\n\n      Dim assemblyName As New AssemblyName()\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim assemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run)\n      Dim moduleBuilder As ModuleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;)\n      Dim typeBuilder As TypeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public)\n      Dim constructorBuilder As ConstructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, Nothing)\n      Dim ilGenerator As ILGenerator = constructorBuilder.GetILGenerator()\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;)\n      ilGenerator.Emit(OpCodes.Ret)\n      \n      typeBuilder.CreateType()\n      \n      Return assemblyBuilder\n   End Function &#39;DefineDynamicAssembly\n\nEnd Module &#39;Test \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,IEnumerable&lt;CustomAttributeBuilder&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly with the specified name, access mode, and custom attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access mode for the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable list of attributes to be applied to the assembly, or <code>null</code> if there are no attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and features.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> starts with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created. For example, security attributes such as <a class=\"xref\" href=\"system.security.securitytransparentattribute\" data-linktype=\"relative-path\">SecurityTransparentAttribute</a> and <a class=\"xref\" href=\"system.security.securitycriticalattribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a> do not work correctly if they are added after a dynamic assembly has been created.  </p>\n<p> This method should be used only to define a dynamic assembly in the current application domain. For more information about this restriction, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.  </p>\n<p> This method overload is introduced in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE -->.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample shows how to create a dynamic assembly that has the <a class=\"xref\" href=\"system.security.securitytransparentattribute\" data-linktype=\"relative-path\">SecurityTransparentAttribute</a>. The attribute must be specified as an element of an array of <a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a> objects.  </p>\n<p> The first step in creating the <a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a> is to obtain a constructor for the attribute. The constructor has no parameters, so the <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_\" data-linktype=\"relative-path\">GetConstructor</a> method is called with an empty array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects to represent the types of the parameters. The second step is to pass the resulting <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object to the constructor for the <a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a> class, together with an empty array of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to represent the arguments.  </p>\n<p> The resulting <a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a> is then passed to the DefineDynamicAssembly method as the only element of an array.  </p>\n<p> The example code defines a module and a type in the new dynamic assembly, and then displays the assembly&#39;s attributes.  </p>\n<pre><code class=\"lang-cpp\" name=\"DefineDynamicAssemblyWithAttributes#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Security;\n\nvoid main()\n{\n    // Create a CustomAttributeBuilder for the assembly attribute. \n    // \n    // SecurityTransparentAttribute has a parameterless constructor, \n    // which is retrieved by passing an array of empty types for the\n    // constructor&#39;s parameter types. The CustomAttributeBuilder is \n    // then created by passing the ConstructorInfo and an empty array\n    // of objects to represent the parameters.\n    //\n    ConstructorInfo^ transparentCtor = \n        SecurityTransparentAttribute::typeid-&gt;GetConstructor(\n            Type::EmptyTypes);\n    CustomAttributeBuilder^ transparent = gcnew CustomAttributeBuilder(\n        transparentCtor,\n        gcnew array&lt;Object^&gt; {} );\n      \n    // Create a dynamic assembly using the attribute. The attribute is\n    // passed as an array with one element.\n    AssemblyName^ aName = gcnew AssemblyName(&quot;EmittedAssembly&quot;);\n    AssemblyBuilder^ ab = AppDomain::CurrentDomain-&gt;DefineDynamicAssembly( \n        aName, \n        AssemblyBuilderAccess::Run,\n        gcnew array&lt;CustomAttributeBuilder^&gt; { transparent } );\n\n    ModuleBuilder^ mb = ab-&gt;DefineDynamicModule( aName-&gt;Name );\n    TypeBuilder^ tb = mb-&gt;DefineType( \n        &quot;MyDynamicType&quot;, \n        TypeAttributes::Public );\n    tb-&gt;CreateType();\n\n    Console::WriteLine(&quot;{0}<br>Assembly attributes:&quot;, ab);\n    for each (Attribute^ attr in ab-&gt;GetCustomAttributes(true))\n    {\n        Console::WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, attr);\n    }\n};\n\n/* This code example produces the following output:\n\nEmittedAssembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\nAssembly attributes:\n        System.Security.SecurityTransparentAttribute\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"DefineDynamicAssemblyWithAttributes#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Security\n\nModule Example\n\n    Sub Main()\n    \n        &#39; Create a CustomAttributeBuilder for the assembly attribute. \n        &#39; \n        &#39; SecurityTransparentAttribute has a parameterless constructor, \n        &#39; which is retrieved by passing an array of empty types for the\n        &#39; constructor&#39;s parameter types. The CustomAttributeBuilder is \n        &#39; then created by passing the ConstructorInfo and an empty array\n        &#39; of objects to represent the parameters.\n        &#39;\n        Dim transparentCtor As ConstructorInfo = _\n            GetType(SecurityTransparentAttribute).GetConstructor( _\n                Type.EmptyTypes)\n        Dim transparent As New CustomAttributeBuilder( _\n            transparentCtor, _\n            New Object() {} )\n      \n        &#39; Create a dynamic assembly Imports the attribute. The attribute is\n        &#39; passed as an array with one element.\n        Dim aName As New AssemblyName(&quot;EmittedAssembly&quot;)\n        Dim ab As AssemblyBuilder = _\n            AppDomain.CurrentDomain.DefineDynamicAssembly( _\n                aName, _\n                AssemblyBuilderAccess.Run, _\n                New CustomAttributeBuilder() { transparent } )\n\n        Dim mb As ModuleBuilder = ab.DefineDynamicModule( aName.Name )\n        Dim tb As TypeBuilder = mb.DefineType( _\n            &quot;MyDynamicType&quot;, _\n            TypeAttributes.Public )\n        tb.CreateType()\n\n        Console.WriteLine(&quot;{0}&quot; &amp; vbLf &amp; &quot;Assembly attributes:&quot;, ab)\n        For Each attr As Attribute In ab.GetCustomAttributes(True)\n            Console.WriteLine(vbTab &amp; &quot;{0}&quot;, attr)\n        Next\n    End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;EmittedAssembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\n&#39;Assembly attributes:\n&#39;        System.Security.SecurityTransparentAttribute\n</code></pre><pre><code class=\"lang-cs\" name=\"DefineDynamicAssemblyWithAttributes#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Security;\n\nclass Example\n{\n    static void Main()\n    {\n        // Create a CustomAttributeBuilder for the assembly attribute. \n        // \n        // SecurityTransparentAttribute has a parameterless constructor, \n        // which is retrieved by passing an array of empty types for the\n        // constructor&#39;s parameter types. The CustomAttributeBuilder is \n        // then created by passing the ConstructorInfo and an empty array\n        // of objects to represent the parameters.\n        //\n        ConstructorInfo transparentCtor = \n            typeof(SecurityTransparentAttribute).GetConstructor(\n                Type.EmptyTypes);\n        CustomAttributeBuilder transparent = new CustomAttributeBuilder(\n            transparentCtor,\n            new Object[] {} );\n      \n        // Create a dynamic assembly using the attribute. The attribute is\n        // passed as an array with one element.\n        AssemblyName aName = new AssemblyName(&quot;EmittedAssembly&quot;);\n        AssemblyBuilder ab = AppDomain.CurrentDomain.DefineDynamicAssembly( \n            aName, \n            AssemblyBuilderAccess.Run,\n            new CustomAttributeBuilder[] { transparent } );\n\n        ModuleBuilder mb = ab.DefineDynamicModule( aName.Name );\n        TypeBuilder tb = mb.DefineType( \n            &quot;MyDynamicType&quot;, \n            TypeAttributes.Public );\n        tb.CreateType();\n\n        Console.WriteLine(&quot;{0}<br>Assembly attributes:&quot;, ab);\n        foreach (Attribute attr in ab.GetCustomAttributes(true))\n        {\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, attr);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nEmittedAssembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\nAssembly attributes:\n        System.Security.SecurityTransparentAttribute\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly using the specified name, access mode, and evidence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mode in which the dynamic assembly will be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>evidence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and features.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> begins with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only fully trusted callers can supply their <code>evidence</code> when defining a dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>. The runtime will map the <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a>through the security policy to determine the granted permissions. Partially trusted callers must supply a null <code>evidence</code>. If <code>evidence</code> is <code>null</code>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller&#39;s <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> to the dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> being defined and marks policy as resolved.  </p>\n<p> If the dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> was saved.  </p>\n<p> This method should only be used to define a dynamic assembly in the current application domain. For more information, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> in <code>refusedPermissions</code>. Including <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> in the <code>refusedPermissions</code> parameter ensures that the MSIL is verified. A limitation of this technique is that it also causes <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> to be thrown when used with code that demands full trust.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method and the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event.  </p>\n<p> First, the code example tries to create an instance of <code>MyDynamicType</code> by calling the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> method with an invalid assembly name, and catches the resulting exception.  </p>\n<p> The code example then adds an event handler for the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event, and again tries to create an instance of<code>MyDynamicType</code>. During the call to <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a>, the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event is raised for the invalid assembly. The event handler creates a dynamic assembly that contains a type named <code>MyDynamicType</code>, gives the type a parameterless constructor, and returns the new dynamic assembly. The call to <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> then finishes successfully, and the constructor for <code>MyDynamicType</code> displays a message at the console.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_DefineDynamicAssembly#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n\n      InstantiateMyDynamicType(currentDomain);   // Failed!\n      \n      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);\n      \n      InstantiateMyDynamicType(currentDomain);   // OK!\n   }\n\n   static void InstantiateMyDynamicType(AppDomain domain) {\n      try {\n         // You must supply a valid fully qualified assembly name here. \n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }   \n\n   static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args) {\n      return DefineDynamicAssembly((AppDomain) sender);\n   }\n   \n   static Assembly DefineDynamicAssembly(AppDomain domain) {\n      // Build a dynamic assembly using Reflection Emit API.\n   \n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;;\n\n      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);\n      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;);\n      TypeBuilder typeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public);\n      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);\n      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;);\n      ilGenerator.Emit(OpCodes.Ret);\n\n      typeBuilder.CreateType();\n\n      return assemblyBuilder;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_DefineDynamicAssembly#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nref class Test\n{\npublic:\n   static void InstantiateMyDynamicType( AppDomain^ domain )\n   {\n      try\n      {\n         \n         // You must supply a valid fully qualified assembly name here.\n         domain-&gt;CreateInstance( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   static Assembly^ MyResolveEventHandler( Object^ sender, ResolveEventArgs^ args )\n   {\n      return DefineDynamicAssembly( dynamic_cast&lt;AppDomain^&gt;(sender) );\n   }\n\n   static Assembly^ DefineDynamicAssembly( AppDomain^ domain )\n   {\n      \n      // Build a dynamic assembly using Reflection Emit API.\n      AssemblyName^ assemblyName = gcnew AssemblyName;\n      assemblyName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n      AssemblyBuilder^ assemblyBuilder = domain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Run );\n      ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule( &quot;MyDynamicModule&quot; );\n      TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType( &quot;MyDynamicType&quot;, TypeAttributes::Public );\n      ConstructorBuilder^ constructorBuilder = typeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, nullptr );\n      ILGenerator^ ilGenerator = constructorBuilder-&gt;GetILGenerator();\n      ilGenerator-&gt;EmitWriteLine( &quot;MyDynamicType instantiated!&quot; );\n      ilGenerator-&gt;Emit( OpCodes::Ret );\n      typeBuilder-&gt;CreateType();\n      return assemblyBuilder;\n   }\n\n};\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   Test::InstantiateMyDynamicType( currentDomain ); // Failed!\n   currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler( Test::MyResolveEventHandler );\n   Test::InstantiateMyDynamicType( currentDomain ); // OK!\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_DefineDynamicAssembly#1\">\nImports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;Failed!\n      \n      AddHandler currentDomain.AssemblyResolve, AddressOf MyResolveEventHandler\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;OK!\n   End Sub &#39;Main\n   \n   Sub InstantiateMyDynamicType(domain As AppDomain)\n      Try\n         &#39; You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateMyDynamicType\n   \n   Function MyResolveEventHandler(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n      Return DefineDynamicAssembly(DirectCast(sender, AppDomain))\n   End Function &#39;MyResolveEventHandler\n   \n   Function DefineDynamicAssembly(domain As AppDomain) As System.Reflection.Assembly\n      &#39; Build a dynamic assembly using Reflection Emit API.\n\n      Dim assemblyName As New AssemblyName()\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim assemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run)\n      Dim moduleBuilder As ModuleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;)\n      Dim typeBuilder As TypeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public)\n      Dim constructorBuilder As ConstructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, Nothing)\n      Dim ilGenerator As ILGenerator = constructorBuilder.GetILGenerator()\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;)\n      ilGenerator.Emit(OpCodes.Ret)\n      \n      typeBuilder.CreateType()\n      \n      Return assemblyBuilder\n   End Function &#39;DefineDynamicAssembly\n\nEnd Module &#39;Test \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly using the specified name, access mode, and storage directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mode in which the dynamic assembly will be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dir</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the directory where the assembly will be saved. If <code>dir</code> is <code>null</code>, the directory defaults to the current directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and features.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> begins with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method should only be used to define a dynamic assembly in the current application domain. For more information, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> in <code>refusedPermissions</code>. Including <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> in the <code>refusedPermissions</code> parameter ensures that the MSIL is verified. A limitation of this technique is that it also causes <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> to be thrown when used with code that demands full trust.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_DefineDynamicAssembly#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n\n      InstantiateMyDynamicType(currentDomain);   // Failed!\n      \n      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);\n      \n      InstantiateMyDynamicType(currentDomain);   // OK!\n   }\n\n   static void InstantiateMyDynamicType(AppDomain domain) {\n      try {\n         // You must supply a valid fully qualified assembly name here. \n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }   \n\n   static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args) {\n      return DefineDynamicAssembly((AppDomain) sender);\n   }\n   \n   static Assembly DefineDynamicAssembly(AppDomain domain) {\n      // Build a dynamic assembly using Reflection Emit API.\n   \n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;;\n\n      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);\n      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;);\n      TypeBuilder typeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public);\n      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);\n      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;);\n      ilGenerator.Emit(OpCodes.Ret);\n\n      typeBuilder.CreateType();\n\n      return assemblyBuilder;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_DefineDynamicAssembly#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nref class Test\n{\npublic:\n   static void InstantiateMyDynamicType( AppDomain^ domain )\n   {\n      try\n      {\n         \n         // You must supply a valid fully qualified assembly name here.\n         domain-&gt;CreateInstance( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   static Assembly^ MyResolveEventHandler( Object^ sender, ResolveEventArgs^ args )\n   {\n      return DefineDynamicAssembly( dynamic_cast&lt;AppDomain^&gt;(sender) );\n   }\n\n   static Assembly^ DefineDynamicAssembly( AppDomain^ domain )\n   {\n      \n      // Build a dynamic assembly using Reflection Emit API.\n      AssemblyName^ assemblyName = gcnew AssemblyName;\n      assemblyName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n      AssemblyBuilder^ assemblyBuilder = domain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Run );\n      ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule( &quot;MyDynamicModule&quot; );\n      TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType( &quot;MyDynamicType&quot;, TypeAttributes::Public );\n      ConstructorBuilder^ constructorBuilder = typeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, nullptr );\n      ILGenerator^ ilGenerator = constructorBuilder-&gt;GetILGenerator();\n      ilGenerator-&gt;EmitWriteLine( &quot;MyDynamicType instantiated!&quot; );\n      ilGenerator-&gt;Emit( OpCodes::Ret );\n      typeBuilder-&gt;CreateType();\n      return assemblyBuilder;\n   }\n\n};\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   Test::InstantiateMyDynamicType( currentDomain ); // Failed!\n   currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler( Test::MyResolveEventHandler );\n   Test::InstantiateMyDynamicType( currentDomain ); // OK!\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_DefineDynamicAssembly#1\">\nImports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;Failed!\n      \n      AddHandler currentDomain.AssemblyResolve, AddressOf MyResolveEventHandler\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;OK!\n   End Sub &#39;Main\n   \n   Sub InstantiateMyDynamicType(domain As AppDomain)\n      Try\n         &#39; You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateMyDynamicType\n   \n   Function MyResolveEventHandler(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n      Return DefineDynamicAssembly(DirectCast(sender, AppDomain))\n   End Function &#39;MyResolveEventHandler\n   \n   Function DefineDynamicAssembly(domain As AppDomain) As System.Reflection.Assembly\n      &#39; Build a dynamic assembly using Reflection Emit API.\n\n      Dim assemblyName As New AssemblyName()\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim assemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run)\n      Dim moduleBuilder As ModuleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;)\n      Dim typeBuilder As TypeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public)\n      Dim constructorBuilder As ConstructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, Nothing)\n      Dim ilGenerator As ILGenerator = constructorBuilder.GetILGenerator()\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;)\n      ilGenerator.Emit(OpCodes.Ret)\n      \n      typeBuilder.CreateType()\n      \n      Return assemblyBuilder\n   End Function &#39;DefineDynamicAssembly\n\nEnd Module &#39;Test \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__System_Security_SecurityContextSource_\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,IEnumerable&lt;CustomAttributeBuilder&gt;,SecurityContextSource)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly with the specified name, access mode, and custom attributes, and using the specified source for its security context.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes, System.Security.SecurityContextSource securityContextSource);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access mode for the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable list of attributes to be applied to the assembly, or <code>null</code> if there are no attributes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityContextSource</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securitycontextsource\" data-linktype=\"relative-path\">SecurityContextSource</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The source of the security context.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and features.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> starts with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of <code>securityContextSource</code> was not one of the enumeration values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created. For example, security attributes such as <a class=\"xref\" href=\"system.security.securitytransparentattribute\" data-linktype=\"relative-path\">SecurityTransparentAttribute</a> and <a class=\"xref\" href=\"system.security.securitycriticalattribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a> do not work correctly if they are added after a dynamic assembly has been created.  </p>\n<p> This method should be used only to define a dynamic assembly in the current application domain. For more information about this restriction, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly using the specified name, access mode, storage directory, and evidence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mode in which the dynamic assembly will be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dir</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the directory where the assembly will be saved. If <code>dir</code> is <code>null</code>, the directory defaults to the current directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>evidence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and features.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> begins with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only fully trusted callers can supply their <code>evidence</code> when defining a dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>. The runtime will map the <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> through the security policy to determine the granted permissions. Partially trusted callers must supply a null <code>evidence</code>. If <code>evidence</code> is <code>null</code>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller&#39;s <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> to the dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> being defined and marks policy as resolved.  </p>\n<p> If the dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> was saved.  </p>\n<p> This method should only be used to define a dynamic assembly in the current application domain. For more information, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> in <code>refusedPermissions</code>. Including <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> in the <code>refusedPermissions</code> parameter ensures that the MSIL is verified. A limitation of this technique is that it also causes <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> to be thrown when used with code that demands full trust.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_DefineDynamicAssembly#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n\n      InstantiateMyDynamicType(currentDomain);   // Failed!\n      \n      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);\n      \n      InstantiateMyDynamicType(currentDomain);   // OK!\n   }\n\n   static void InstantiateMyDynamicType(AppDomain domain) {\n      try {\n         // You must supply a valid fully qualified assembly name here. \n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }   \n\n   static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args) {\n      return DefineDynamicAssembly((AppDomain) sender);\n   }\n   \n   static Assembly DefineDynamicAssembly(AppDomain domain) {\n      // Build a dynamic assembly using Reflection Emit API.\n   \n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;;\n\n      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);\n      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;);\n      TypeBuilder typeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public);\n      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);\n      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;);\n      ilGenerator.Emit(OpCodes.Ret);\n\n      typeBuilder.CreateType();\n\n      return assemblyBuilder;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_DefineDynamicAssembly#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nref class Test\n{\npublic:\n   static void InstantiateMyDynamicType( AppDomain^ domain )\n   {\n      try\n      {\n         \n         // You must supply a valid fully qualified assembly name here.\n         domain-&gt;CreateInstance( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   static Assembly^ MyResolveEventHandler( Object^ sender, ResolveEventArgs^ args )\n   {\n      return DefineDynamicAssembly( dynamic_cast&lt;AppDomain^&gt;(sender) );\n   }\n\n   static Assembly^ DefineDynamicAssembly( AppDomain^ domain )\n   {\n      \n      // Build a dynamic assembly using Reflection Emit API.\n      AssemblyName^ assemblyName = gcnew AssemblyName;\n      assemblyName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n      AssemblyBuilder^ assemblyBuilder = domain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Run );\n      ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule( &quot;MyDynamicModule&quot; );\n      TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType( &quot;MyDynamicType&quot;, TypeAttributes::Public );\n      ConstructorBuilder^ constructorBuilder = typeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, nullptr );\n      ILGenerator^ ilGenerator = constructorBuilder-&gt;GetILGenerator();\n      ilGenerator-&gt;EmitWriteLine( &quot;MyDynamicType instantiated!&quot; );\n      ilGenerator-&gt;Emit( OpCodes::Ret );\n      typeBuilder-&gt;CreateType();\n      return assemblyBuilder;\n   }\n\n};\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   Test::InstantiateMyDynamicType( currentDomain ); // Failed!\n   currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler( Test::MyResolveEventHandler );\n   Test::InstantiateMyDynamicType( currentDomain ); // OK!\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_DefineDynamicAssembly#1\">\nImports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;Failed!\n      \n      AddHandler currentDomain.AssemblyResolve, AddressOf MyResolveEventHandler\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;OK!\n   End Sub &#39;Main\n   \n   Sub InstantiateMyDynamicType(domain As AppDomain)\n      Try\n         &#39; You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateMyDynamicType\n   \n   Function MyResolveEventHandler(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n      Return DefineDynamicAssembly(DirectCast(sender, AppDomain))\n   End Function &#39;MyResolveEventHandler\n   \n   Function DefineDynamicAssembly(domain As AppDomain) As System.Reflection.Assembly\n      &#39; Build a dynamic assembly using Reflection Emit API.\n\n      Dim assemblyName As New AssemblyName()\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim assemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run)\n      Dim moduleBuilder As ModuleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;)\n      Dim typeBuilder As TypeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public)\n      Dim constructorBuilder As ConstructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, Nothing)\n      Dim ilGenerator As ILGenerator = constructorBuilder.GetILGenerator()\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;)\n      ilGenerator.Emit(OpCodes.Ret)\n      \n      typeBuilder.CreateType()\n      \n      Return assemblyBuilder\n   End Function &#39;DefineDynamicAssembly\n\nEnd Module &#39;Test \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,PermissionSet,PermissionSet,PermissionSet)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly using the specified name, access mode, and permission requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mode in which the dynamic assembly will be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The required permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>optionalPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The optional permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>refusedPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The refused permissions request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and features.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> begins with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The permission requests specified for <code>requiredPermissions</code>, <code>optionalPermissions</code>, and <code>refusedPermissions</code> are not used unless the dynamic assembly has been saved and reloaded into memory. To specify permission requests for a transient assembly that is never saved to disk, use an overload of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method that specifies evidence as well as requested permissions, and supply an <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> in <code>refusedPermissions</code>. Including <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> in the <code>refusedPermissions</code> parameter ensures that the MSIL is verified. A limitation of this technique is that it also causes <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> to be thrown when used with code that demands full trust.  </p>\n</div>\n<p> This method should only be used to define a dynamic assembly in the current application domain. For more information, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload .</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_DefineDynamicAssembly#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n\n      InstantiateMyDynamicType(currentDomain);   // Failed!\n      \n      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);\n      \n      InstantiateMyDynamicType(currentDomain);   // OK!\n   }\n\n   static void InstantiateMyDynamicType(AppDomain domain) {\n      try {\n         // You must supply a valid fully qualified assembly name here. \n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }   \n\n   static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args) {\n      return DefineDynamicAssembly((AppDomain) sender);\n   }\n   \n   static Assembly DefineDynamicAssembly(AppDomain domain) {\n      // Build a dynamic assembly using Reflection Emit API.\n   \n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;;\n\n      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);\n      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;);\n      TypeBuilder typeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public);\n      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);\n      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;);\n      ilGenerator.Emit(OpCodes.Ret);\n\n      typeBuilder.CreateType();\n\n      return assemblyBuilder;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_DefineDynamicAssembly#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nref class Test\n{\npublic:\n   static void InstantiateMyDynamicType( AppDomain^ domain )\n   {\n      try\n      {\n         \n         // You must supply a valid fully qualified assembly name here.\n         domain-&gt;CreateInstance( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   static Assembly^ MyResolveEventHandler( Object^ sender, ResolveEventArgs^ args )\n   {\n      return DefineDynamicAssembly( dynamic_cast&lt;AppDomain^&gt;(sender) );\n   }\n\n   static Assembly^ DefineDynamicAssembly( AppDomain^ domain )\n   {\n      \n      // Build a dynamic assembly using Reflection Emit API.\n      AssemblyName^ assemblyName = gcnew AssemblyName;\n      assemblyName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n      AssemblyBuilder^ assemblyBuilder = domain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Run );\n      ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule( &quot;MyDynamicModule&quot; );\n      TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType( &quot;MyDynamicType&quot;, TypeAttributes::Public );\n      ConstructorBuilder^ constructorBuilder = typeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, nullptr );\n      ILGenerator^ ilGenerator = constructorBuilder-&gt;GetILGenerator();\n      ilGenerator-&gt;EmitWriteLine( &quot;MyDynamicType instantiated!&quot; );\n      ilGenerator-&gt;Emit( OpCodes::Ret );\n      typeBuilder-&gt;CreateType();\n      return assemblyBuilder;\n   }\n\n};\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   Test::InstantiateMyDynamicType( currentDomain ); // Failed!\n   currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler( Test::MyResolveEventHandler );\n   Test::InstantiateMyDynamicType( currentDomain ); // OK!\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_DefineDynamicAssembly#1\">\nImports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;Failed!\n      \n      AddHandler currentDomain.AssemblyResolve, AddressOf MyResolveEventHandler\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;OK!\n   End Sub &#39;Main\n   \n   Sub InstantiateMyDynamicType(domain As AppDomain)\n      Try\n         &#39; You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateMyDynamicType\n   \n   Function MyResolveEventHandler(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n      Return DefineDynamicAssembly(DirectCast(sender, AppDomain))\n   End Function &#39;MyResolveEventHandler\n   \n   Function DefineDynamicAssembly(domain As AppDomain) As System.Reflection.Assembly\n      &#39; Build a dynamic assembly using Reflection Emit API.\n\n      Dim assemblyName As New AssemblyName()\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim assemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run)\n      Dim moduleBuilder As ModuleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;)\n      Dim typeBuilder As TypeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public)\n      Dim constructorBuilder As ConstructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, Nothing)\n      Dim ilGenerator As ILGenerator = constructorBuilder.GetILGenerator()\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;)\n      ilGenerator.Emit(OpCodes.Ret)\n      \n      typeBuilder.CreateType()\n      \n      Return assemblyBuilder\n   End Function &#39;DefineDynamicAssembly\n\nEnd Module &#39;Test \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Boolean_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Boolean,IEnumerable&lt;CustomAttributeBuilder&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly using the specified name, access mode, storage directory, and synchronization option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, bool isSynchronized, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mode in which the dynamic assembly will be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dir</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the directory where the dynamic assembly will be saved. If <code>dir</code> is <code>null</code>, the current directory is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isSynchronized</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable list of attributes to be applied to the assembly, or <code>null</code> if there are no attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and features.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> starts with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created. For example, security attributes such as <a class=\"xref\" href=\"system.security.securitytransparentattribute\" data-linktype=\"relative-path\">SecurityTransparentAttribute</a> and <a class=\"xref\" href=\"system.security.securitycriticalattribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a> do not work correctly if they are added after a dynamic assembly has been created.  </p>\n<p> If <code>isSynchronized</code> is <code>true</code>, the following methods of the resulting <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a> will be synchronized: <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\" data-linktype=\"relative-path\">DefineDynamicModule</a>, <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineResource_\" data-linktype=\"relative-path\">DefineResource</a>, <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_AddResourceFile_\" data-linktype=\"relative-path\">AddResourceFile</a>, <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_GetDynamicModule_\" data-linktype=\"relative-path\">GetDynamicModule</a>, <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_SetEntryPoint_\" data-linktype=\"relative-path\">SetEntryPoint</a>, and <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_Save_\" data-linktype=\"relative-path\">Save</a>. If two of these methods are called on different threads, one will block until the other is completed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_Security_Policy_Evidence_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,Evidence,PermissionSet,PermissionSet,PermissionSet)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly using the specified name, access mode, evidence, and permission requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mode in which the dynamic assembly will be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>evidence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The required permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>optionalPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The optional permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>refusedPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The refused permissions request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and features.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> begins with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The permission requests specified for <code>requiredPermissions</code>, <code>optionalPermissions</code>, and <code>refusedPermissions</code> are used only if <code>evidence</code> is also supplied, or if the dynamic assembly is saved and reloaded into memory.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> During the development of code that emits dynamic assemblies, it is recommended that you include <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> in <code>refusedPermissions</code>. Including <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> in the <code>refusedPermissions</code> parameter ensures that the MSIL is verified. A limitation of this technique is that it also causes <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> to be thrown when used with code that demands full trust.  </p>\n</div>\n<p> Only fully trusted callers can supply their <code>evidence</code> when defining a dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>. The runtime will map the <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> through the security policy to determine the granted permissions. Partially trusted callers must supply a null <code>evidence</code>. If <code>evidence</code> is <code>null</code>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller&#39;s <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> to the dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> being defined and marks policy as resolved.  </p>\n<p> If the dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> was saved.  </p>\n<p> This method should only be used to define a dynamic assembly in the current application domain. For more information, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_DefineDynamicAssembly#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n\n      InstantiateMyDynamicType(currentDomain);   // Failed!\n      \n      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);\n      \n      InstantiateMyDynamicType(currentDomain);   // OK!\n   }\n\n   static void InstantiateMyDynamicType(AppDomain domain) {\n      try {\n         // You must supply a valid fully qualified assembly name here. \n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }   \n\n   static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args) {\n      return DefineDynamicAssembly((AppDomain) sender);\n   }\n   \n   static Assembly DefineDynamicAssembly(AppDomain domain) {\n      // Build a dynamic assembly using Reflection Emit API.\n   \n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;;\n\n      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);\n      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;);\n      TypeBuilder typeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public);\n      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);\n      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;);\n      ilGenerator.Emit(OpCodes.Ret);\n\n      typeBuilder.CreateType();\n\n      return assemblyBuilder;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_DefineDynamicAssembly#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nref class Test\n{\npublic:\n   static void InstantiateMyDynamicType( AppDomain^ domain )\n   {\n      try\n      {\n         \n         // You must supply a valid fully qualified assembly name here.\n         domain-&gt;CreateInstance( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   static Assembly^ MyResolveEventHandler( Object^ sender, ResolveEventArgs^ args )\n   {\n      return DefineDynamicAssembly( dynamic_cast&lt;AppDomain^&gt;(sender) );\n   }\n\n   static Assembly^ DefineDynamicAssembly( AppDomain^ domain )\n   {\n      \n      // Build a dynamic assembly using Reflection Emit API.\n      AssemblyName^ assemblyName = gcnew AssemblyName;\n      assemblyName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n      AssemblyBuilder^ assemblyBuilder = domain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Run );\n      ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule( &quot;MyDynamicModule&quot; );\n      TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType( &quot;MyDynamicType&quot;, TypeAttributes::Public );\n      ConstructorBuilder^ constructorBuilder = typeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, nullptr );\n      ILGenerator^ ilGenerator = constructorBuilder-&gt;GetILGenerator();\n      ilGenerator-&gt;EmitWriteLine( &quot;MyDynamicType instantiated!&quot; );\n      ilGenerator-&gt;Emit( OpCodes::Ret );\n      typeBuilder-&gt;CreateType();\n      return assemblyBuilder;\n   }\n\n};\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   Test::InstantiateMyDynamicType( currentDomain ); // Failed!\n   currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler( Test::MyResolveEventHandler );\n   Test::InstantiateMyDynamicType( currentDomain ); // OK!\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_DefineDynamicAssembly#1\">\nImports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;Failed!\n      \n      AddHandler currentDomain.AssemblyResolve, AddressOf MyResolveEventHandler\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;OK!\n   End Sub &#39;Main\n   \n   Sub InstantiateMyDynamicType(domain As AppDomain)\n      Try\n         &#39; You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateMyDynamicType\n   \n   Function MyResolveEventHandler(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n      Return DefineDynamicAssembly(DirectCast(sender, AppDomain))\n   End Function &#39;MyResolveEventHandler\n   \n   Function DefineDynamicAssembly(domain As AppDomain) As System.Reflection.Assembly\n      &#39; Build a dynamic assembly using Reflection Emit API.\n\n      Dim assemblyName As New AssemblyName()\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim assemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run)\n      Dim moduleBuilder As ModuleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;)\n      Dim typeBuilder As TypeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public)\n      Dim constructorBuilder As ConstructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, Nothing)\n      Dim ilGenerator As ILGenerator = constructorBuilder.GetILGenerator()\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;)\n      ilGenerator.Emit(OpCodes.Ret)\n      \n      typeBuilder.CreateType()\n      \n      Return assemblyBuilder\n   End Function &#39;DefineDynamicAssembly\n\nEnd Module &#39;Test \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,PermissionSet,PermissionSet,PermissionSet)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly using the specified name, access mode, storage directory, and permission requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mode in which the dynamic assembly will be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dir</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the directory where the assembly will be saved. If <code>dir</code> is <code>null</code>, the directory defaults to the current directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The required permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>optionalPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The optional permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>refusedPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The refused permissions request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and features.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> begins with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The permission requests specified for <code>requiredPermissions</code>, <code>optionalPermissions</code>, and <code>refusedPermissions</code> are not used unless the dynamic assembly has been saved and reloaded into memory. To specify permission requests for a transient assembly that is never saved to disk, use an overload of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method that specifies evidence as well as requested permissions, and supply an <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> in <code>refusedPermissions</code>. Including <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> in the <code>refusedPermissions</code> parameter ensures that the MSIL is verified. A limitation of this technique is that it also causes <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> to be thrown when used with code that demands full trust.  </p>\n</div>\n<p> This method should only be used to define a dynamic assembly in the current application domain. For more information, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_DefineDynamicAssembly#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n\n      InstantiateMyDynamicType(currentDomain);   // Failed!\n      \n      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);\n      \n      InstantiateMyDynamicType(currentDomain);   // OK!\n   }\n\n   static void InstantiateMyDynamicType(AppDomain domain) {\n      try {\n         // You must supply a valid fully qualified assembly name here. \n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }   \n\n   static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args) {\n      return DefineDynamicAssembly((AppDomain) sender);\n   }\n   \n   static Assembly DefineDynamicAssembly(AppDomain domain) {\n      // Build a dynamic assembly using Reflection Emit API.\n   \n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;;\n\n      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);\n      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;);\n      TypeBuilder typeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public);\n      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);\n      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;);\n      ilGenerator.Emit(OpCodes.Ret);\n\n      typeBuilder.CreateType();\n\n      return assemblyBuilder;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_DefineDynamicAssembly#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nref class Test\n{\npublic:\n   static void InstantiateMyDynamicType( AppDomain^ domain )\n   {\n      try\n      {\n         \n         // You must supply a valid fully qualified assembly name here.\n         domain-&gt;CreateInstance( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   static Assembly^ MyResolveEventHandler( Object^ sender, ResolveEventArgs^ args )\n   {\n      return DefineDynamicAssembly( dynamic_cast&lt;AppDomain^&gt;(sender) );\n   }\n\n   static Assembly^ DefineDynamicAssembly( AppDomain^ domain )\n   {\n      \n      // Build a dynamic assembly using Reflection Emit API.\n      AssemblyName^ assemblyName = gcnew AssemblyName;\n      assemblyName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n      AssemblyBuilder^ assemblyBuilder = domain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Run );\n      ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule( &quot;MyDynamicModule&quot; );\n      TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType( &quot;MyDynamicType&quot;, TypeAttributes::Public );\n      ConstructorBuilder^ constructorBuilder = typeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, nullptr );\n      ILGenerator^ ilGenerator = constructorBuilder-&gt;GetILGenerator();\n      ilGenerator-&gt;EmitWriteLine( &quot;MyDynamicType instantiated!&quot; );\n      ilGenerator-&gt;Emit( OpCodes::Ret );\n      typeBuilder-&gt;CreateType();\n      return assemblyBuilder;\n   }\n\n};\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   Test::InstantiateMyDynamicType( currentDomain ); // Failed!\n   currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler( Test::MyResolveEventHandler );\n   Test::InstantiateMyDynamicType( currentDomain ); // OK!\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_DefineDynamicAssembly#1\">\nImports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;Failed!\n      \n      AddHandler currentDomain.AssemblyResolve, AddressOf MyResolveEventHandler\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;OK!\n   End Sub &#39;Main\n   \n   Sub InstantiateMyDynamicType(domain As AppDomain)\n      Try\n         &#39; You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateMyDynamicType\n   \n   Function MyResolveEventHandler(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n      Return DefineDynamicAssembly(DirectCast(sender, AppDomain))\n   End Function &#39;MyResolveEventHandler\n   \n   Function DefineDynamicAssembly(domain As AppDomain) As System.Reflection.Assembly\n      &#39; Build a dynamic assembly using Reflection Emit API.\n\n      Dim assemblyName As New AssemblyName()\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim assemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run)\n      Dim moduleBuilder As ModuleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;)\n      Dim typeBuilder As TypeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public)\n      Dim constructorBuilder As ConstructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, Nothing)\n      Dim ilGenerator As ILGenerator = constructorBuilder.GetILGenerator()\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;)\n      ilGenerator.Emit(OpCodes.Ret)\n      \n      typeBuilder.CreateType()\n      \n      Return assemblyBuilder\n   End Function &#39;DefineDynamicAssembly\n\nEnd Module &#39;Test \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_Policy_Evidence_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Evidence,PermissionSet,PermissionSet,PermissionSet)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, and permission requests.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mode in which the dynamic assembly will be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dir</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the directory where the assembly will be saved. If <code>dir</code> is <code>null</code>, the directory defaults to the current directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>evidence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The required permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>optionalPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The optional permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>refusedPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The refused permissions request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and features.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> begins with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The permission requests specified for <code>requiredPermissions</code>, <code>optionalPermissions</code>, and <code>refusedPermissions</code> are used only if <code>evidence</code> is also supplied, or if the dynamic assembly is saved and reloaded into memory.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> During the development of code that emits dynamic assemblies, it is recommended that you include <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> in <code>refusedPermissions</code>. Including <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> in the <code>refusedPermissions</code> parameter ensures that the MSIL is verified. A limitation of this technique is that it also causes <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> to be thrown when used with code that demands full trust.  </p>\n</div>\n<p> Only fully trusted callers can supply their <code>evidence</code> when defining a dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>. The runtime will map the <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> through the security policy to determine the granted permissions. Partially trusted callers must supply a null <code>evidence</code>. If <code>evidence</code> is <code>null</code>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller&#39;s <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> to the dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> being defined and marks policy as resolved.  </p>\n<p> If the dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> was saved.  </p>\n<p> This method should only be used to define a dynamic assembly in the current application domain. For more information, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_DefineDynamicAssembly#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n\n      InstantiateMyDynamicType(currentDomain);   // Failed!\n      \n      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);\n      \n      InstantiateMyDynamicType(currentDomain);   // OK!\n   }\n\n   static void InstantiateMyDynamicType(AppDomain domain) {\n      try {\n         // You must supply a valid fully qualified assembly name here. \n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }   \n\n   static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args) {\n      return DefineDynamicAssembly((AppDomain) sender);\n   }\n   \n   static Assembly DefineDynamicAssembly(AppDomain domain) {\n      // Build a dynamic assembly using Reflection Emit API.\n   \n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;;\n\n      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);\n      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;);\n      TypeBuilder typeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public);\n      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);\n      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;);\n      ilGenerator.Emit(OpCodes.Ret);\n\n      typeBuilder.CreateType();\n\n      return assemblyBuilder;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_DefineDynamicAssembly#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nref class Test\n{\npublic:\n   static void InstantiateMyDynamicType( AppDomain^ domain )\n   {\n      try\n      {\n         \n         // You must supply a valid fully qualified assembly name here.\n         domain-&gt;CreateInstance( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   static Assembly^ MyResolveEventHandler( Object^ sender, ResolveEventArgs^ args )\n   {\n      return DefineDynamicAssembly( dynamic_cast&lt;AppDomain^&gt;(sender) );\n   }\n\n   static Assembly^ DefineDynamicAssembly( AppDomain^ domain )\n   {\n      \n      // Build a dynamic assembly using Reflection Emit API.\n      AssemblyName^ assemblyName = gcnew AssemblyName;\n      assemblyName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n      AssemblyBuilder^ assemblyBuilder = domain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Run );\n      ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule( &quot;MyDynamicModule&quot; );\n      TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType( &quot;MyDynamicType&quot;, TypeAttributes::Public );\n      ConstructorBuilder^ constructorBuilder = typeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, nullptr );\n      ILGenerator^ ilGenerator = constructorBuilder-&gt;GetILGenerator();\n      ilGenerator-&gt;EmitWriteLine( &quot;MyDynamicType instantiated!&quot; );\n      ilGenerator-&gt;Emit( OpCodes::Ret );\n      typeBuilder-&gt;CreateType();\n      return assemblyBuilder;\n   }\n\n};\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   Test::InstantiateMyDynamicType( currentDomain ); // Failed!\n   currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler( Test::MyResolveEventHandler );\n   Test::InstantiateMyDynamicType( currentDomain ); // OK!\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_DefineDynamicAssembly#1\">\nImports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;Failed!\n      \n      AddHandler currentDomain.AssemblyResolve, AddressOf MyResolveEventHandler\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;OK!\n   End Sub &#39;Main\n   \n   Sub InstantiateMyDynamicType(domain As AppDomain)\n      Try\n         &#39; You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateMyDynamicType\n   \n   Function MyResolveEventHandler(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n      Return DefineDynamicAssembly(DirectCast(sender, AppDomain))\n   End Function &#39;MyResolveEventHandler\n   \n   Function DefineDynamicAssembly(domain As AppDomain) As System.Reflection.Assembly\n      &#39; Build a dynamic assembly using Reflection Emit API.\n\n      Dim assemblyName As New AssemblyName()\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim assemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run)\n      Dim moduleBuilder As ModuleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;)\n      Dim typeBuilder As TypeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public)\n      Dim constructorBuilder As ConstructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, Nothing)\n      Dim ilGenerator As ILGenerator = constructorBuilder.GetILGenerator()\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;)\n      ilGenerator.Emit(OpCodes.Ret)\n      \n      typeBuilder.CreateType()\n      \n      Return assemblyBuilder\n   End Function &#39;DefineDynamicAssembly\n\nEnd Module &#39;Test \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_Policy_Evidence_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_System_Boolean_\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Evidence,PermissionSet,PermissionSet,PermissionSet,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, permission requests, and synchronization option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, bool isSynchronized);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mode in which the dynamic assembly will be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dir</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the directory where the dynamic assembly will be saved. If <code>dir</code> is <code>null</code>, the directory defaults to the current directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>evidence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The evidence supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The required permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>optionalPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The optional permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>refusedPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The refused permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isSynchronized</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and features.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> begins with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The permission requests specified for <code>requiredPermissions</code>, <code>optionalPermissions</code>, and <code>refusedPermissions</code> are used only if <code>evidence</code> is also supplied, or if the dynamic assembly is saved and reloaded into memory.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> During the development of code that emits dynamic assemblies, it is recommended that you include <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> in <code>refusedPermissions</code>. Including <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> in the <code>refusedPermissions</code> parameter ensures that the MSIL is verified. A limitation of this technique is that it also causes <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> to be thrown when used with code that demands full trust.  </p>\n</div>\n<p> Only fully trusted callers can supply their evidence when defining a dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>. The runtime will map the <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> through the security policy to determine the granted permissions. Partially trusted callers must supply <code>null</code> for the <code>evidence</code> parameter. If <code>evidence</code> is <code>null</code>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller&#39;s <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> to the dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> being defined and marks policy as resolved.  </p>\n<p> If the dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> was saved.  </p>\n<p> If <code>isSynchronized</code> is <code>true</code>, the following methods of the resulting <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a> will be synchronized: <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\" data-linktype=\"relative-path\">DefineDynamicModule</a>, <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineResource_\" data-linktype=\"relative-path\">DefineResource</a>, <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_AddResourceFile_\" data-linktype=\"relative-path\">AddResourceFile</a>, <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_GetDynamicModule_\" data-linktype=\"relative-path\">GetDynamicModule</a>, <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_SetEntryPoint_\" data-linktype=\"relative-path\">SetEntryPoint</a>, and <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_Save_\" data-linktype=\"relative-path\">Save</a>. If two of these methods are called on different threads, one will block until the other completes.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">AssemblyResolve</a> event.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_DefineDynamicAssembly#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n\n      InstantiateMyDynamicType(currentDomain);   // Failed!\n      \n      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);\n      \n      InstantiateMyDynamicType(currentDomain);   // OK!\n   }\n\n   static void InstantiateMyDynamicType(AppDomain domain) {\n      try {\n         // You must supply a valid fully qualified assembly name here. \n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }   \n\n   static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args) {\n      return DefineDynamicAssembly((AppDomain) sender);\n   }\n   \n   static Assembly DefineDynamicAssembly(AppDomain domain) {\n      // Build a dynamic assembly using Reflection Emit API.\n   \n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;;\n\n      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);\n      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;);\n      TypeBuilder typeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public);\n      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);\n      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;);\n      ilGenerator.Emit(OpCodes.Ret);\n\n      typeBuilder.CreateType();\n\n      return assemblyBuilder;\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_DefineDynamicAssembly#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nref class Test\n{\npublic:\n   static void InstantiateMyDynamicType( AppDomain^ domain )\n   {\n      try\n      {\n         \n         // You must supply a valid fully qualified assembly name here.\n         domain-&gt;CreateInstance( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot; );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   static Assembly^ MyResolveEventHandler( Object^ sender, ResolveEventArgs^ args )\n   {\n      return DefineDynamicAssembly( dynamic_cast&lt;AppDomain^&gt;(sender) );\n   }\n\n   static Assembly^ DefineDynamicAssembly( AppDomain^ domain )\n   {\n      \n      // Build a dynamic assembly using Reflection Emit API.\n      AssemblyName^ assemblyName = gcnew AssemblyName;\n      assemblyName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n      AssemblyBuilder^ assemblyBuilder = domain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Run );\n      ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule( &quot;MyDynamicModule&quot; );\n      TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType( &quot;MyDynamicType&quot;, TypeAttributes::Public );\n      ConstructorBuilder^ constructorBuilder = typeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, nullptr );\n      ILGenerator^ ilGenerator = constructorBuilder-&gt;GetILGenerator();\n      ilGenerator-&gt;EmitWriteLine( &quot;MyDynamicType instantiated!&quot; );\n      ilGenerator-&gt;Emit( OpCodes::Ret );\n      typeBuilder-&gt;CreateType();\n      return assemblyBuilder;\n   }\n\n};\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   Test::InstantiateMyDynamicType( currentDomain ); // Failed!\n   currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler( Test::MyResolveEventHandler );\n   Test::InstantiateMyDynamicType( currentDomain ); // OK!\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_DefineDynamicAssembly#1\">\nImports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;Failed!\n      \n      AddHandler currentDomain.AssemblyResolve, AddressOf MyResolveEventHandler\n      \n      InstantiateMyDynamicType(currentDomain)   &#39;OK!\n   End Sub &#39;Main\n   \n   Sub InstantiateMyDynamicType(domain As AppDomain)\n      Try\n         &#39; You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyDynamicType&quot;)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateMyDynamicType\n   \n   Function MyResolveEventHandler(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n      Return DefineDynamicAssembly(DirectCast(sender, AppDomain))\n   End Function &#39;MyResolveEventHandler\n   \n   Function DefineDynamicAssembly(domain As AppDomain) As System.Reflection.Assembly\n      &#39; Build a dynamic assembly using Reflection Emit API.\n\n      Dim assemblyName As New AssemblyName()\n      assemblyName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim assemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run)\n      Dim moduleBuilder As ModuleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyDynamicModule&quot;)\n      Dim typeBuilder As TypeBuilder = moduleBuilder.DefineType(&quot;MyDynamicType&quot;, TypeAttributes.Public)\n      Dim constructorBuilder As ConstructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, Nothing)\n      Dim ilGenerator As ILGenerator = constructorBuilder.GetILGenerator()\n      \n      ilGenerator.EmitWriteLine(&quot;MyDynamicType instantiated!&quot;)\n      ilGenerator.Emit(OpCodes.Ret)\n      \n      typeBuilder.CreateType()\n      \n      Return assemblyBuilder\n   End Function &#39;DefineDynamicAssembly\n\nEnd Module &#39;Test \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DefineDynamicAssembly_System_Reflection_AssemblyName_System_Reflection_Emit_AssemblyBuilderAccess_System_String_System_Security_Policy_Evidence_System_Security_PermissionSet_System_Security_PermissionSet_System_Security_PermissionSet_System_Boolean_System_Collections_Generic_IEnumerable_System_Reflection_Emit_CustomAttributeBuilder__\">\r\n    \r\n            <a id=\"System_AppDomain_DefineDynamicAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefineDynamicAssembly(AssemblyName,AssemblyBuilderAccess,String,Evidence,PermissionSet,PermissionSet,PermissionSet,Boolean,IEnumerable&lt;CustomAttributeBuilder&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Defines a dynamic assembly with the specified name, access mode, storage directory, evidence, permission requests, synchronization option, and custom attributes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, bool isSynchronized, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The unique identity of the dynamic assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilderaccess\" data-linktype=\"relative-path\">AssemblyBuilderAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The mode in which the dynamic assembly will be accessed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>dir</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the directory where the dynamic assembly will be saved. If <code>dir</code> is <code>null</code>, the current directory is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>evidence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The evidence that is supplied for the dynamic assembly. The evidence is used unaltered as the final set of evidence used for policy resolution.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The required permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>optionalPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The optional permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>refusedPermissions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissionset\" data-linktype=\"relative-path\">PermissionSet</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The refused permissions request.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isSynchronized</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable list of attributes to be applied to the assembly, or <code>null</code> if there are no attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a></div>\r\n                  </div>\r\n                  <p>A dynamic assembly with the specified name and features.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>Name</code> property of <code>name</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>Name</code> property of <code>name</code> starts with white space, or contains a forward or backward slash.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created. For example, security attributes such as <a class=\"xref\" href=\"system.security.securitytransparentattribute\" data-linktype=\"relative-path\">SecurityTransparentAttribute</a> and <a class=\"xref\" href=\"system.security.securitycriticalattribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a> do not work correctly if they are added after a dynamic assembly has been created.  </p>\n<p> The permission requests specified for the <code>requiredPermissions</code>, <code>optionalPermissions</code>, and <code>refusedPermissions</code> parameters are used only if the <code>evidence</code> parameter is also supplied, or if the dynamic assembly is saved and reloaded into memory.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you develop code that emits dynamic assemblies, we recommend that you include the <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.SecurityPermissionFlag</a> flag in the <code>refusedPermissions</code> parameter. The inclusion of this flag ensures that the Microsoft intermediate language (MSIL) will be verified. This technique will detect the unintentional generation of unverifiable code, which otherwise is very difficult to detect. A limitation of this technique is that it also causes <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> to be thrown when it is used with code that demands full trust.  </p>\n</div>\n<p> Only fully trusted callers can supply evidence when defining a dynamic <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>. The runtime maps the <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> through the security policy to determine the granted permissions. Partially trusted callers must supply <code>null</code> for the <code>evidence</code> parameter. If <code>evidence</code> is <code>null</code>, the runtime copies the permission sets (that is, the current grant and deny sets) from the caller&#39;s assembly to the dynamic assembly that is being defined, and marks the policy as resolved.  </p>\n<p> If the dynamic assembly is saved to disk, subsequent loads will get grants based on policies that are associated with the location where the dynamic assembly was saved.  </p>\n<p> If <code>isSynchronized</code> is <code>true</code>, the following methods of the resulting <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder\" data-linktype=\"relative-path\">AssemblyBuilder</a> will be synchronized: <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineDynamicModule_\" data-linktype=\"relative-path\">DefineDynamicModule</a>, <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_DefineResource_\" data-linktype=\"relative-path\">DefineResource</a>, <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_AddResourceFile_\" data-linktype=\"relative-path\">AddResourceFile</a>, <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_GetDynamicModule_\" data-linktype=\"relative-path\">GetDynamicModule</a>, <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_SetEntryPoint_\" data-linktype=\"relative-path\">SetEntryPoint</a>, and <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_Save_\" data-linktype=\"relative-path\">Save</a>. If two of these methods are called on different threads, one will block until the other is completed.  </p>\n<p> This method overload is introduced in the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-long-md.md&quot; --> .NET Framework 3.5 <!--END INCLUDE -->.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DoCallBack_System_CrossAppDomainDelegate_\">\r\n    \r\n            <a id=\"System_AppDomain_DoCallBack_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DoCallBack(CrossAppDomainDelegate)</div>        \r\n          </div>\r\n    \r\n            <p>Executes the code in another application domain that is identified by the specified delegate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void DoCallBack (CrossAppDomainDelegate callBackDelegate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>callBackDelegate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.crossappdomaindelegate\" data-linktype=\"relative-path\">CrossAppDomainDelegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate that specifies a method to call.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>callBackDelegate</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>callBackDelegate</code> can specify a marshal-by-value, <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, or <a class=\"xref\" href=\"system.contextboundobject\" data-linktype=\"relative-path\">ContextBoundObject</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates using a static DoCallBack method.  </p>\n<pre><code class=\"lang-vb\" name=\"AppDomain_DoCallBack#1\">Public Module PingPong\n\n    Private greetings As String = &quot;PONG!&quot;\n\n    Sub Main()\n        Dim otherDomain As AppDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;)\n\n        greetings = &quot;PING!&quot;\n        MyCallBack()\n        otherDomain.DoCallBack(AddressOf MyCallBack)\n\n        &#39; Output:\n        &#39;   PING! from defaultDomain\n        &#39;   PONG! from otherDomain\n     End Sub &#39;Main\n\n     Sub MyCallBack()\n        Dim name As String = AppDomain.CurrentDomain.FriendlyName\n        If name = AppDomain.CurrentDomain.SetupInformation.ApplicationName Then\n            name = &quot;defaultDomain&quot;\n        End If\n        Console.WriteLine(greetings + &quot; from &quot; + name)\n     End Sub &#39;MyCallBack\n\nEnd Module &#39;PingPong\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_DoCallBack#1\">public ref class PingPong\n{\nprivate:\n    static String^ greetings = &quot;PONG!&quot;;\n\npublic:\n    static void Main()\n    {\n        AppDomain^ otherDomain = AppDomain::CreateDomain(&quot;otherDomain&quot;);\n\n        greetings = &quot;PING!&quot;;\n        MyCallBack();\n        otherDomain-&gt;DoCallBack(gcnew CrossAppDomainDelegate(MyCallBack));\n\n        // Output:\n        //   PING! from defaultDomain\n        //   PONG! from otherDomain\n    }\n\n    static void MyCallBack()\n    {\n        String^ name = AppDomain::CurrentDomain-&gt;FriendlyName;\n\n        if (name == AppDomain::CurrentDomain-&gt;SetupInformation-&gt;ApplicationName)\n        {\n            name = &quot;defaultDomain&quot;;\n        }\n        Console::WriteLine(greetings + &quot; from &quot; + name);\n    }\n};\n\nint main()\n{\n   PingPong::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_DoCallBack#1\">    static string greetings = &quot;PONG!&quot;;\n\n    public static void Main()\n    {\n        AppDomain otherDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;);\n\n        greetings = &quot;PING!&quot;;\n        MyCallBack();\n        otherDomain.DoCallBack(new CrossAppDomainDelegate(MyCallBack));\n\n        // Output:\n        //   PING! from defaultDomain\n        //   PONG! from otherDomain\n    }\n\n    static public void MyCallBack()\n    {\n        string name = AppDomain.CurrentDomain.FriendlyName;\n\n        if (name == AppDomain.CurrentDomain.SetupInformation.ApplicationName)\n        {\n            name = &quot;defaultDomain&quot;;\n        }\n        Console.WriteLine(greetings + &quot; from &quot; + name);\n    }\n</code></pre><p> The following sample demonstrates using the DoCallBack method by value.  </p>\n<pre><code class=\"lang-vb\" name=\"AppDomain_DoCallBack#2\">&lt;Serializable&gt; _\nPublic Class PingPong\n     Private greetings As String = &quot;PING!&quot;\n\n     Public Shared Sub Main()\n        Dim otherDomain As AppDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;)\n\n        Dim pp As New PingPong()\n        pp.MyCallBack()\n        pp.greetings = &quot;PONG!&quot;\n        otherDomain.DoCallBack(AddressOf pp.MyCallBack)\n\n        &#39; Output:\n        &#39;   PING! from defaultDomain\n        &#39;   PONG! from otherDomain\n    End Sub &#39;Main\n\n    Public Sub MyCallBack()\n        Dim name As String = AppDomain.CurrentDomain.FriendlyName\n        If name = AppDomain.CurrentDomain.SetupInformation.ApplicationName Then\n            name = &quot;defaultDomain&quot;\n        End If\n        Console.WriteLine(greetings + &quot; from &quot; + name)\n    End Sub &#39;MyCallBack\n\nEnd Class &#39;PingPong\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_DoCallBack#2\">[Serializable]\npublic class PingPong\n{\n    private string greetings = &quot;PING!&quot;;\n\n    public static void Main()\n    {\n        AppDomain otherDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;);\n\n        PingPong pp = new PingPong();\n        pp.MyCallBack();\n        pp.greetings = &quot;PONG!&quot;;\n        otherDomain.DoCallBack(new CrossAppDomainDelegate(pp.MyCallBack));\n\n        // Output:\n        //   PING! from defaultDomain\n        //   PONG! from otherDomain\n    }\n\n    public void MyCallBack()\n    {\n        string name = AppDomain.CurrentDomain.FriendlyName;\n\n        if (name == AppDomain.CurrentDomain.SetupInformation.ApplicationName)\n        {\n            name = &quot;defaultDomain&quot;;\n        }\n        Console.WriteLine(greetings + &quot; from &quot; + name);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_DoCallBack#2\">\n[Serializable]\npublic ref class PingPong\n{\nprivate:\n    String^ greetings;\n\npublic:\n    PingPong()\n    {\n        greetings = &quot;PING!&quot;;\n    }\n\n    static void Main()\n    {\n        AppDomain^ otherDomain = AppDomain::CreateDomain(&quot;otherDomain&quot;);\n\n        PingPong^ pp = gcnew PingPong();\n        pp-&gt;MyCallBack();\n        pp-&gt;greetings = &quot;PONG!&quot;;\n        otherDomain-&gt;DoCallBack(gcnew CrossAppDomainDelegate( pp, &amp;PingPong::MyCallBack));\n\n        // Output:\n        //   PING! from defaultDomain\n        //   PONG! from otherDomain\n    }\n\n    void MyCallBack()\n    {\n        String^ name = AppDomain::CurrentDomain-&gt;FriendlyName;\n\n        if (name == AppDomain::CurrentDomain-&gt;SetupInformation-&gt;ApplicationName)\n        {\n            name = &quot;defaultDomain&quot;;\n        }\n        Console::WriteLine(greetings + &quot; from &quot; + name);\n    }\n};\n\nint main()\n{\n   PingPong::Main();\n}\n</code></pre><p> The following sample demonstrates using the DoCallBack method by reference.  </p>\n<pre><code class=\"lang-cpp\" name=\"AppDomain_DoCallBack#3\">public ref class PingPong : public MarshalByRefObject\n{\nprivate:\n   String^ greetings;\n\npublic:\n    PingPong()\n    {\n        greetings = &quot;PING!&quot;;\n    }\n\n    static void Main()\n    {\n        AppDomain^ otherDomain = AppDomain::CreateDomain(&quot;otherDomain&quot;);\n\n        PingPong^ pp = gcnew PingPong();\n        pp-&gt;MyCallBack();\n        pp-&gt;greetings = &quot;PONG!&quot;;\n        otherDomain-&gt;DoCallBack(gcnew CrossAppDomainDelegate( pp, &amp;PingPong::MyCallBack));\n\n        // Output:\n        //   PING! from defaultDomain\n        //   PONG! from defaultDomain\n    }\n\n    // Callback will always execute within defaultDomain due to inheritance from\n    // MarshalByRefObject\n    void MyCallBack()\n    {\n        String^ name = AppDomain::CurrentDomain-&gt;FriendlyName;\n        if (name == AppDomain::CurrentDomain-&gt;SetupInformation-&gt;ApplicationName)\n        {\n            name = &quot;defaultDomain&quot;;\n        }\n        Console::WriteLine(greetings + &quot; from &quot; + name);\n    }\n};\n\nint main()\n{\n   PingPong::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_DoCallBack#3\">public class PingPong : MarshalByRefObject\n{\n    private string greetings = &quot;PING!&quot;;\n\n    public static void Main()\n    {\n        AppDomain otherDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;);\n\n        PingPong pp = new PingPong();\n        pp.MyCallBack();\n        pp.greetings = &quot;PONG!&quot;;\n        otherDomain.DoCallBack(new CrossAppDomainDelegate(pp.MyCallBack));\n\n        // Output:\n        //   PING! from defaultDomain\n        //   PONG! from defaultDomain\n    }\n\n    // Callback will always execute within defaultDomain due to inheritance from\n    // MarshalByRefObject\n    public void MyCallBack()\n    {\n        string name = AppDomain.CurrentDomain.FriendlyName;\n        if (name == AppDomain.CurrentDomain.SetupInformation.ApplicationName)\n        {\n            name = &quot;defaultDomain&quot;;\n        }\n        Console.WriteLine(greetings + &quot; from &quot; + name);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_DoCallBack#3\">Public Class PingPong\n    Inherits MarshalByRefObject\n\n    Private greetings As String = &quot;PING!&quot;\n   \n    Public Shared Sub Main()\n        Dim otherDomain As AppDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;)\n\n        Dim pp As New PingPong()\n        pp.MyCallBack()\n        pp.greetings = &quot;PONG!&quot;\n        otherDomain.DoCallBack(AddressOf pp.MyCallBack)\n\n        &#39; Output:\n        &#39;   PING! from default domain\n        &#39;   PONG! from default domain\n     End Sub &#39;Main\n\n    &#39; Callback will always execute within defaultDomain due to inheritance from\n    &#39; MarshalByRefObject\n    Public Sub MyCallBack()\n        Dim name As String = AppDomain.CurrentDomain.FriendlyName\n        If name = AppDomain.CurrentDomain.SetupInformation.ApplicationName Then\n            name = &quot;defaultDomain&quot;\n        End If\n        Console.WriteLine((greetings + &quot; from &quot; + name))\n    End Sub &#39;MyCallBack\n\nEnd Class &#39;PingPong\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ExecuteAssembly_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_ExecuteAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteAssembly(String)</div>        \r\n          </div>\r\n    \r\n            <p>Executes the assembly contained in the specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExecuteAssembly (string assemblyFile);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file that contains the assembly to execute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value returned by the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The specified assembly has no entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The assembly begins executing at the entry point specified in the .NET Framework header.  </p>\n<p> This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.  </p>\n<p> This method loads assemblies using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method. You can also execute assemblies using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method, which loads assemblies using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method.  </p>\n<p> To create the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> to load and execute, use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateDomain_\" data-linktype=\"relative-path\">CreateDomain</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates using one of the overloads of ExecuteAssembly on two different domains.  </p>\n<pre><code class=\"lang-cpp\" name=\"AppDomain_ExecuteAssembly#1\">int main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   AppDomain^ otherDomain = AppDomain::CreateDomain( &quot;otherDomain&quot; );\n   currentDomain-&gt;ExecuteAssembly( &quot;MyExecutable.exe&quot; );\n   \n   // Prints S&quot;MyExecutable running on [default]&quot;\n   otherDomain-&gt;ExecuteAssembly( &quot;MyExecutable.exe&quot; );\n   \n   // Prints S&quot;MyExecutable running on otherDomain&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_ExecuteAssembly#1\">class Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n      AppDomain otherDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;);\n      \n      currentDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;);\n      // Prints &quot;MyExecutable running on [default]&quot;\n\n      otherDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;);\n      // Prints &quot;MyExecutable running on otherDomain&quot;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_ExecuteAssembly#1\">Module Test\n\n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      Dim otherDomain As AppDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;)\n      \n      currentDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;)\n      &#39; Prints &quot;MyExecutable running on [default]&quot;\n\n      otherDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;)\n      &#39; Prints &quot;MyExecutable running on otherDomain&quot;\n   End Sub &#39;Main\n\nEnd Module &#39;Test\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ExecuteAssembly_System_String_System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_AppDomain_ExecuteAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteAssembly(String,Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Executes the assembly contained in the specified file, using the specified evidence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file that contains the assembly to execute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value returned by the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The specified assembly has no entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The assembly begins executing at the entry point specified in the .NET Framework header.  </p>\n<p> The <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> method does not create a new process or application domain, and it does not execute the entry point method on a new thread.  </p>\n<p> This method loads assemblies using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method. You can also execute assemblies using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method, which loads assemblies using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates using one of the overloads of <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> on two different domains.  </p>\n<pre><code class=\"lang-cpp\" name=\"AppDomain_ExecuteAssembly#1\">int main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   AppDomain^ otherDomain = AppDomain::CreateDomain( &quot;otherDomain&quot; );\n   currentDomain-&gt;ExecuteAssembly( &quot;MyExecutable.exe&quot; );\n   \n   // Prints S&quot;MyExecutable running on [default]&quot;\n   otherDomain-&gt;ExecuteAssembly( &quot;MyExecutable.exe&quot; );\n   \n   // Prints S&quot;MyExecutable running on otherDomain&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_ExecuteAssembly#1\">class Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n      AppDomain otherDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;);\n      \n      currentDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;);\n      // Prints &quot;MyExecutable running on [default]&quot;\n\n      otherDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;);\n      // Prints &quot;MyExecutable running on otherDomain&quot;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_ExecuteAssembly#1\">Module Test\n\n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      Dim otherDomain As AppDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;)\n      \n      currentDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;)\n      &#39; Prints &quot;MyExecutable running on [default]&quot;\n\n      otherDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;)\n      &#39; Prints &quot;MyExecutable running on otherDomain&quot;\n   End Sub &#39;Main\n\nEnd Module &#39;Test\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ExecuteAssembly_System_String_System_String___\">\r\n    \r\n            <a id=\"System_AppDomain_ExecuteAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteAssembly(String,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Executes the assembly contained in the specified file, using the specified arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExecuteAssembly (string assemblyFile, string[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file that contains the assembly to execute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value that is returned by the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The specified assembly has no entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The assembly begins executing at the entry point specified in the .NET Framework header.  </p>\n<p> This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.  </p>\n<p> This method loads assemblies using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method. You can also execute assemblies using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method, which loads assemblies using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates using one of the overloads of <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> on two different domains.  </p>\n<pre><code class=\"lang-cpp\" name=\"AppDomain_ExecuteAssembly#1\">int main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   AppDomain^ otherDomain = AppDomain::CreateDomain( &quot;otherDomain&quot; );\n   currentDomain-&gt;ExecuteAssembly( &quot;MyExecutable.exe&quot; );\n   \n   // Prints S&quot;MyExecutable running on [default]&quot;\n   otherDomain-&gt;ExecuteAssembly( &quot;MyExecutable.exe&quot; );\n   \n   // Prints S&quot;MyExecutable running on otherDomain&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_ExecuteAssembly#1\">class Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n      AppDomain otherDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;);\n      \n      currentDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;);\n      // Prints &quot;MyExecutable running on [default]&quot;\n\n      otherDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;);\n      // Prints &quot;MyExecutable running on otherDomain&quot;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_ExecuteAssembly#1\">Module Test\n\n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      Dim otherDomain As AppDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;)\n      \n      currentDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;)\n      &#39; Prints &quot;MyExecutable running on [default]&quot;\n\n      otherDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;)\n      &#39; Prints &quot;MyExecutable running on otherDomain&quot;\n   End Sub &#39;Main\n\nEnd Module &#39;Test\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ExecuteAssembly_System_String_System_Security_Policy_Evidence_System_String___\">\r\n    \r\n            <a id=\"System_AppDomain_ExecuteAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteAssembly(String,Evidence,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Executes the assembly contained in the specified file, using the specified evidence and arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file that contains the assembly to execute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The supplied evidence for the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value returned by the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>assemblySecurity</code> is not <code>null</code>. When legacy CAS policy is not enabled, <code>assemblySecurity</code> should be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The specified assembly has no entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The assembly begins executing at the entry point specified in the .NET Framework header.  </p>\n<p> This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.  </p>\n<p> This method loads assemblies using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method. You can also execute assemblies using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method, which loads assemblies using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates using one of the overloads of <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> on two different domains.  </p>\n<pre><code class=\"lang-cpp\" name=\"AppDomain_ExecuteAssembly#1\">int main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   AppDomain^ otherDomain = AppDomain::CreateDomain( &quot;otherDomain&quot; );\n   currentDomain-&gt;ExecuteAssembly( &quot;MyExecutable.exe&quot; );\n   \n   // Prints S&quot;MyExecutable running on [default]&quot;\n   otherDomain-&gt;ExecuteAssembly( &quot;MyExecutable.exe&quot; );\n   \n   // Prints S&quot;MyExecutable running on otherDomain&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_ExecuteAssembly#1\">class Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n      AppDomain otherDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;);\n      \n      currentDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;);\n      // Prints &quot;MyExecutable running on [default]&quot;\n\n      otherDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;);\n      // Prints &quot;MyExecutable running on otherDomain&quot;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_ExecuteAssembly#1\">Module Test\n\n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      Dim otherDomain As AppDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;)\n      \n      currentDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;)\n      &#39; Prints &quot;MyExecutable running on [default]&quot;\n\n      otherDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;)\n      &#39; Prints &quot;MyExecutable running on otherDomain&quot;\n   End Sub &#39;Main\n\nEnd Module &#39;Test\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ExecuteAssembly_System_String_System_String___System_Byte___System_Configuration_Assemblies_AssemblyHashAlgorithm_\">\r\n    \r\n            <a id=\"System_AppDomain_ExecuteAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteAssembly(String,String[],Byte[],AssemblyHashAlgorithm)</div>        \r\n          </div>\r\n    \r\n            <p>Executes the assembly contained in the specified file, using the specified arguments, hash value, and hash algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExecuteAssembly (string assemblyFile, string[] args, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file that contains the assembly to execute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to the entry point of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Represents the value of the computed hash code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.assemblies.assemblyhashalgorithm\" data-linktype=\"relative-path\">AssemblyHashAlgorithm</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Represents the hash algorithm used by the assembly manifest.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value that is returned by the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The specified assembly has no entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The assembly begins executing at the entry point specified in the .NET Framework header.  </p>\n<p> This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.  </p>\n<p> This method loads assemblies using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method. You can also execute assemblies using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method, which loads assemblies using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates using one of the overloads of <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> on two different domains.  </p>\n<pre><code class=\"lang-cpp\" name=\"AppDomain_ExecuteAssembly#1\">int main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   AppDomain^ otherDomain = AppDomain::CreateDomain( &quot;otherDomain&quot; );\n   currentDomain-&gt;ExecuteAssembly( &quot;MyExecutable.exe&quot; );\n   \n   // Prints S&quot;MyExecutable running on [default]&quot;\n   otherDomain-&gt;ExecuteAssembly( &quot;MyExecutable.exe&quot; );\n   \n   // Prints S&quot;MyExecutable running on otherDomain&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_ExecuteAssembly#1\">class Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n      AppDomain otherDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;);\n      \n      currentDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;);\n      // Prints &quot;MyExecutable running on [default]&quot;\n\n      otherDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;);\n      // Prints &quot;MyExecutable running on otherDomain&quot;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_ExecuteAssembly#1\">Module Test\n\n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      Dim otherDomain As AppDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;)\n      \n      currentDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;)\n      &#39; Prints &quot;MyExecutable running on [default]&quot;\n\n      otherDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;)\n      &#39; Prints &quot;MyExecutable running on otherDomain&quot;\n   End Sub &#39;Main\n\nEnd Module &#39;Test\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ExecuteAssembly_System_String_System_Security_Policy_Evidence_System_String___System_Byte___System_Configuration_Assemblies_AssemblyHashAlgorithm_\">\r\n    \r\n            <a id=\"System_AppDomain_ExecuteAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteAssembly(String,Evidence,String[],Byte[],AssemblyHashAlgorithm)</div>        \r\n          </div>\r\n    \r\n            <p>Executes the assembly contained in the specified file, using the specified evidence, arguments, hash value, and hash algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyFile</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file that contains the assembly to execute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The supplied evidence for the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments to the entry point of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Represents the value of the computed hash code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashAlgorithm</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.assemblies.assemblyhashalgorithm\" data-linktype=\"relative-path\">AssemblyHashAlgorithm</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Represents the hash algorithm used by the assembly manifest.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value returned by the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyFile</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>assemblySecurity</code> is not <code>null</code>. When legacy CAS policy is not enabled, <code>assemblySecurity</code> should be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The specified assembly has no entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The assembly begins executing at the entry point specified in the .NET Framework header.  </p>\n<p> This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.  </p>\n<p> This method loads assemblies using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method. You can also execute assemblies using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method, which loads assemblies using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Thefollowing sample demonstrates using one of the overloads of <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> on two different domains.  </p>\n<pre><code class=\"lang-cpp\" name=\"AppDomain_ExecuteAssembly#1\">int main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   AppDomain^ otherDomain = AppDomain::CreateDomain( &quot;otherDomain&quot; );\n   currentDomain-&gt;ExecuteAssembly( &quot;MyExecutable.exe&quot; );\n   \n   // Prints S&quot;MyExecutable running on [default]&quot;\n   otherDomain-&gt;ExecuteAssembly( &quot;MyExecutable.exe&quot; );\n   \n   // Prints S&quot;MyExecutable running on otherDomain&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_ExecuteAssembly#1\">class Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n      AppDomain otherDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;);\n      \n      currentDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;);\n      // Prints &quot;MyExecutable running on [default]&quot;\n\n      otherDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;);\n      // Prints &quot;MyExecutable running on otherDomain&quot;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_ExecuteAssembly#1\">Module Test\n\n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      Dim otherDomain As AppDomain = AppDomain.CreateDomain(&quot;otherDomain&quot;)\n      \n      currentDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;)\n      &#39; Prints &quot;MyExecutable running on [default]&quot;\n\n      otherDomain.ExecuteAssembly(&quot;MyExecutable.exe&quot;)\n      &#39; Prints &quot;MyExecutable running on otherDomain&quot;\n   End Sub &#39;Main\n\nEnd Module &#39;Test\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ExecuteAssemblyByName_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_ExecuteAssemblyByName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteAssemblyByName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Executes an assembly given its display name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExecuteAssemblyByName (string assemblyName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value returned by the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> was found, but could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The specified assembly has no entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method provides similar functionality to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> method, but specifies the assembly by display name or <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> rather than by file location. Therefore, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> loads assemblies with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method rather than with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method.  </p>\n<p> The assembly begins executing at the entry point specified in the .NET Framework header.  </p>\n<p> This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.  </p>\n<p> To create the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> to load and execute, use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateDomain_\" data-linktype=\"relative-path\">CreateDomain</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ExecuteAssemblyByName_System_Reflection_AssemblyName_System_String___\">\r\n    \r\n            <a id=\"System_AppDomain_ExecuteAssemblyByName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteAssemblyByName(AssemblyName,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Executes the assembly given an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>, using the specified arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExecuteAssemblyByName (System.Reflection.AssemblyName assemblyName, string[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object representing the name of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Command-line arguments to pass when starting the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value that is returned by the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> was found, but could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>assemblyName</code> was compiled with a later version of the common language runtime than the version that is currently loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The specified assembly has no entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method provides similar functionality to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> method, but specifies the assembly by display name or <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> rather than by file location. Therefore, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> loads assemblies with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method rather than with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method.  </p>\n<p> The assembly begins executing at the entry point specified in the .NET Framework header.  </p>\n<p> This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ExecuteAssemblyByName_System_String_System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_AppDomain_ExecuteAssemblyByName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteAssemblyByName(String,Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Executes an assembly given its display name, using the specified evidence.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExecuteAssemblyByName (string assemblyName, System.Security.Policy.Evidence assemblySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value returned by the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> was found, but could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The specified assembly has no entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method provides similar functionality to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> method, but specifies the assembly by display name or <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> rather than by file location. Therefore, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> loads assemblies with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method rather than with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method.  </p>\n<p> The assembly begins executing at the entry point specified in the .NET Framework header.  </p>\n<p> The <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method does not create a new process or application domain, and it does not execute the entry point method on a new thread.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method with an <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method supersede pieces of evidence supplied by the loader.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ExecuteAssemblyByName_System_String_System_String___\">\r\n    \r\n            <a id=\"System_AppDomain_ExecuteAssemblyByName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteAssemblyByName(String,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Executes the assembly given its display name, using the specified arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExecuteAssemblyByName (string assemblyName, string[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Command-line arguments to pass when starting the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value that is returned by the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> was found, but could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> <code>assemblyName</code> was compiled with a later version of the common language runtime than the version that is currently loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The specified assembly has no entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method provides similar functionality to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> method, but specifies the assembly by display name or <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> rather than by file location. Therefore, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> loads assemblies with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method rather than with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method.  </p>\n<p> The assembly begins executing at the entry point specified in the .NET Framework header.  </p>\n<p> This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ExecuteAssemblyByName_System_Reflection_AssemblyName_System_Security_Policy_Evidence_System_String___\">\r\n    \r\n            <a id=\"System_AppDomain_ExecuteAssemblyByName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteAssemblyByName(AssemblyName,Evidence,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Executes the assembly given an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>, using the specified evidence and arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExecuteAssemblyByName (System.Reflection.AssemblyName assemblyName, System.Security.Policy.Evidence assemblySecurity, string[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object representing the name of the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Command-line arguments to pass when starting the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value returned by the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> was found, but could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>assemblySecurity</code> is not <code>null</code>. When legacy CAS policy is not enabled, <code>assemblySecurity</code> should be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The specified assembly has no entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method provides similar functionality to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> method, but specifies the assembly by display name or <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> rather than by file location. Therefore, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> loads assemblies with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method rather than with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method.  </p>\n<p> The assembly begins executing at the entry point specified in the .NET Framework header.  </p>\n<p> This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method with an <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method supersede pieces of evidence supplied by the loader.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ExecuteAssemblyByName_System_String_System_Security_Policy_Evidence_System_String___\">\r\n    \r\n            <a id=\"System_AppDomain_ExecuteAssemblyByName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExecuteAssemblyByName(String,Evidence,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Executes the assembly given its display name, using the specified evidence and arguments.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ExecuteAssemblyByName (string assemblyName, System.Security.Policy.Evidence assemblySecurity, string[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Command-line arguments to pass when starting the process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value returned by the entry point of the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> was found, but could not be loaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p>The assembly specified by <code>assemblyName</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyName</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>assemblySecurity</code> is not <code>null</code>. When legacy CAS policy is not enabled, <code>assemblySecurity</code> should be <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <p>The specified assembly has no entry point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method provides similar functionality to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssembly_\" data-linktype=\"relative-path\">ExecuteAssembly</a> method, but specifies the assembly by display name or <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> rather than by file location. Therefore, <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> loads assemblies with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method rather than with the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFile_\" data-linktype=\"relative-path\">LoadFile</a> method.  </p>\n<p> The assembly begins executing at the entry point specified in the .NET Framework header.  </p>\n<p> This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method with an <a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_ExecuteAssemblyByName_\" data-linktype=\"relative-path\">ExecuteAssemblyByName</a> method supersede pieces of evidence supplied by the loader.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_GetAssemblies\">\r\n    \r\n            <a id=\"System_AppDomain_GetAssemblies_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAssemblies()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the assemblies that have been loaded into the execution context of this application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Assembly[] GetAssemblies ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>[]</div>\r\n                  </div>\r\n                  <p>An array of assemblies in this application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the GetAssemblies method to get a list of all assemblies that have been loaded into the application domain. The assemblies are then displayed to the console.  </p>\n<p> To run this code example, you need to create an assembly named <code>CustomLibrary.dll</code>, or change the assembly name that is passed to the GetAssemblies method.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADGetAssemblies#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Security::Policy;\n\n//for Evidence Object\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   \n   //Provide the current application domain evidence for the assembly.\n   Evidence^ asEvidence = currentDomain-&gt;Evidence;\n   \n   //Load the assembly from the application directory using a simple name.\n   //Create an assembly called CustomLibrary to run this sample.\n   currentDomain-&gt;Load( &quot;CustomLibrary&quot;, asEvidence );\n   \n   //Make an array for the list of assemblies.\n   array&lt;Assembly^&gt;^assems = currentDomain-&gt;GetAssemblies();\n   \n   //List the assemblies in the current application domain.\n   Console::WriteLine( &quot;List of assemblies loaded in current appdomain:&quot; );\n   System::Collections::IEnumerator^ myEnum = assems-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Assembly^ assem = safe_cast&lt;Assembly^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( assem );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"ADGetAssemblies#1\">using System;\nusing System.Reflection;\nusing System.Security.Policy;  //for Evidence object\n\nclass ADGetAssemblies \n{\n\n\tpublic static void Main() \n\t{\n\t\tAppDomain currentDomain = AppDomain.CurrentDomain;\n\t\t//Provide the current application domain evidence for the assembly.\n\t\tEvidence asEvidence = currentDomain.Evidence;\n\t\t//Load the assembly from the application directory using a simple name.\n\n\t\t//Create an assembly called CustomLibrary to run this sample.\n\t\tcurrentDomain.Load(&quot;CustomLibrary&quot;,asEvidence);\n\n\t\t//Make an array for the list of assemblies.\n\t\tAssembly[] assems = currentDomain.GetAssemblies();\n\t\n\t\t//List the assemblies in the current application domain.\n\t\tConsole.WriteLine(&quot;List of assemblies loaded in current appdomain:&quot;);\n\t\t\tforeach (Assembly assem in assems)\n\t\t\t\tConsole.WriteLine(assem.ToString());\n\t}\n   \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ADGetAssemblies#1\">Imports System\nImports System.Reflection\nImports System.Security.Policy &#39;for Evidence object\n\nClass ADGetAssemblies\n   \n   \n   Public Shared Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      &#39;Provide the current application domain evidence for the assembly.\n      Dim asEvidence As Evidence = currentDomain.Evidence\n      &#39;Load the assembly from the application directory using a simple name.\n     \n      &#39;Create an assembly called CustomLibrary to run this sample.\n      currentDomain.Load(&quot;CustomLibrary&quot;, asEvidence)\n      \n      &#39;Make an array for the list of assemblies.\n      Dim assems As [Assembly]() = currentDomain.GetAssemblies()\n      \n      &#39;List the assemblies in the current application domain.\n      Console.WriteLine(&quot;List of assemblies loaded in current appdomain:&quot;)\n      Dim assem As [Assembly]\n      For Each assem In  assems\n         Console.WriteLine(assem.ToString())\n      Next assem\n   End Sub &#39;Main \nEnd Class &#39;ADGetAssemblies \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_GetCurrentThreadId\">\r\n    \r\n            <a id=\"System_AppDomain_GetCurrentThreadId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentThreadId()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current thread identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int GetCurrentThreadId ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer that is the identifier of the current thread.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_ManagedThreadId_\" data-linktype=\"relative-path\">ManagedThreadId</a> property, which is stable even when the .NET Framework is hosted by an environment that supports fibers (that is, lightweight threads).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_GetData_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_GetData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetData(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value stored in the current application domain for the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetData (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a predefined application domain property, or the name of an application domain property you have defined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value of the <code>name</code> property, or <code>null</code> if the property does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to retrieve the value of an entry in an internal cache of name-data pairs that describe properties of this instance of <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>. Note that the comparison of <code>name</code> with the name of key-value pairs is case-sensitive.  </p>\n<p> The cache automatically contains predefined system entries that are inserted when the application domain is created. You can inspect their values with the GetData method, or the equivalent <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> properties.  </p>\n<p> You can insert or modify your own user defined name-data pairs with the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_SetData_\" data-linktype=\"relative-path\">SetData</a> method and inspect their values with the GetData method.  </p>\n<p> The following table describes the <code>name</code> of each predefined system entry and its corresponding <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> property.  </p>\n<table>\n<thead>\n<tr>\n<th>Value of &#39;name&#39;</th>\n<th>Property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;APPBASE&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a></td>\n</tr>\n<tr>\n<td>&quot;APP_CONFIG_FILE&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ConfigurationFile_\" data-linktype=\"relative-path\">ConfigurationFile</a></td>\n</tr>\n<tr>\n<td>&quot;APP_LAUNCH_URL&quot;</td>\n<td>(no property)<br><br> &quot;APP_LAUNCH_URL&quot; represents the URL originally requested by the user, before any redirection. It is available only when the application has been launched with a browser such as Internet Explorer. Not all browsers provide this value.</td>\n</tr>\n<tr>\n<td>&quot;APP_NAME&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a></td>\n</tr>\n<tr>\n<td>&quot;BINPATH_PROBE_ONLY&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPathProbe_\" data-linktype=\"relative-path\">PrivateBinPathProbe</a></td>\n</tr>\n<tr>\n<td>&quot;CACHE_BASE&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_CachePath_\" data-linktype=\"relative-path\">CachePath</a></td>\n</tr>\n<tr>\n<td>&quot;CODE_DOWNLOAD_DISABLED&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DisallowCodeDownload_\" data-linktype=\"relative-path\">DisallowCodeDownload</a></td>\n</tr>\n<tr>\n<td>&quot;DEV_PATH&quot;</td>\n<td>(no property)</td>\n</tr>\n<tr>\n<td>&quot;DISALLOW_APP&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DisallowPublisherPolicy_\" data-linktype=\"relative-path\">DisallowPublisherPolicy</a></td>\n</tr>\n<tr>\n<td>&quot;DISALLOW_APP_BASE_PROBING&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DisallowApplicationBaseProbing_\" data-linktype=\"relative-path\">DisallowApplicationBaseProbing</a></td>\n</tr>\n<tr>\n<td>&quot;DISALLOW_APP_REDIRECTS&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DisallowBindingRedirects_\" data-linktype=\"relative-path\">DisallowBindingRedirects</a></td>\n</tr>\n<tr>\n<td>&quot;DYNAMIC_BASE&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DynamicBase_\" data-linktype=\"relative-path\">DynamicBase</a></td>\n</tr>\n<tr>\n<td>&quot;FORCE_CACHE_INSTALL&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ShadowCopyFiles_\" data-linktype=\"relative-path\">ShadowCopyFiles</a></td>\n</tr>\n<tr>\n<td>&quot;LICENSE_FILE&quot;, or an application-specific string</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_LicenseFile_\" data-linktype=\"relative-path\">LicenseFile</a></td>\n</tr>\n<tr>\n<td>&quot;LOADER_OPTIMIZATION&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_LoaderOptimization_\" data-linktype=\"relative-path\">LoaderOptimization</a></td>\n</tr>\n<tr>\n<td>&quot;LOCATION_URI&quot;</td>\n<td>(no property)</td>\n</tr>\n<tr>\n<td>&quot;PRIVATE_BINPATH&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a></td>\n</tr>\n<tr>\n<td>&quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot;</td>\n<td><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_MatchTimeout_\" data-linktype=\"relative-path\">MatchTimeout</a><br><br> &quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot; is not a system entry, and its value can be set by calling the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_SetData_\" data-linktype=\"relative-path\">SetData</a> method.</td>\n</tr>\n<tr>\n<td>&quot;SHADOW_COPY_DIRS&quot;</td>\n<td><a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ShadowCopyDirectories_\" data-linktype=\"relative-path\">ShadowCopyDirectories</a></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new application domain, sets a system-provided value for the domain, and adds a new value pair for the domain. The example then demonstrates how to use the GetData method to retrieve the data from these value pairs and display them to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADGetData#1\">using namespace System;\nusing namespace System::Reflection;\n\nint main()\n{\n   // appdomain setup information\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   \n   //Create a new value pair for the appdomain\n   currentDomain-&gt;SetData( &quot;ADVALUE&quot;, &quot;Example value&quot; );\n   \n   //get the value specified in the setdata method\n   Console::WriteLine( &quot;ADVALUE is: {0}&quot;, currentDomain-&gt;GetData( &quot;ADVALUE&quot; ) );\n   \n   //get a system value specified at appdomainsetup\n   Console::WriteLine( &quot;System value for loader optimization: {0}&quot;, \n      currentDomain-&gt;GetData( &quot;LOADER_OPTIMIZATION&quot; ) );\n}\n\n/* This code example produces the following output:\n\nADVALUE is: Example value\nSystem value for loader optimization: NotSpecified\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ADGetData#1\">Imports System\nImports System.Reflection\n\nClass ADGetData   \n   \n   Public Shared Sub Main()\n      &#39; appdomain setup information\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      &#39;Create a new value pair for the appdomain\n      currentDomain.SetData(&quot;ADVALUE&quot;, &quot;Example value&quot;)\n      \n      &#39;get the value specified in the setdata method\n      Console.WriteLine((&quot;ADVALUE is: &quot; &amp; currentDomain.GetData(&quot;ADVALUE&quot;)))\n      \n      &#39;get a system value specified at appdomainsetup\n      Console.WriteLine(&quot;System value for loader optimization: {0}&quot;, _\n         currentDomain.GetData(&quot;LOADER_OPTIMIZATION&quot;))\n\n   End Sub \nEnd Class \n\n&#39; This code example produces the following output:\n&#39;\n&#39;ADVALUE is: Example value\n&#39;System value for loader optimization: NotSpecified\n</code></pre><pre><code class=\"lang-cs\" name=\"ADGetData#1\">using System;\nusing System.Reflection;\n\nclass ADGetData \n{\n    public static void Main() \n    {\n        // appdomain setup information\n        AppDomain currentDomain = AppDomain.CurrentDomain;\n\n        //Create a new value pair for the appdomain\n        currentDomain.SetData(&quot;ADVALUE&quot;, &quot;Example value&quot;);\n\n        //get the value specified in the setdata method\n        Console.WriteLine(&quot;ADVALUE is: &quot; + currentDomain.GetData(&quot;ADVALUE&quot;));\n\n        //get a system value specified at appdomainsetup\n        Console.WriteLine(&quot;System value for loader optimization: {0}&quot;,\n            currentDomain.GetData(&quot;LOADER_OPTIMIZATION&quot;));\n    }\n}\n\n/* This code example produces the following output:\n\nADVALUE is: Example value\nSystem value for loader optimization: NotSpecified\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_GetType\">\r\n    \r\n            <a id=\"System_AppDomain_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetType()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type GetType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The type of the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_InitializeLifetimeService\">\r\n    \r\n            <a id=\"System_AppDomain_InitializeLifetimeService_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InitializeLifetimeService()</div>        \r\n          </div>\r\n    \r\n            <p>Gives the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> an infinite lifetime by preventing a lease from being created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object InitializeLifetimeService ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>Always <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_IsCompatibilitySwitchSet_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_IsCompatibilitySwitchSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsCompatibilitySwitchSet(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a nullable Boolean value that indicates whether any compatibility switches are set, and if so, whether the specified compatibility switch is set.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Nullable&lt;bool&gt; IsCompatibilitySwitchSet (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The compatibility switch to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </div>\r\n                  <p>A null reference (<code>Nothing</code> in Visual Basic) if no compatibility switches are set; otherwise, a Boolean value that indicates whether the compatibility switch that is specified by <code>value</code> is set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method tests whether the specified compatibility switch has been set for the current application domain. Compatibility switches typically restore a behavior (such as the way strings are sorted) that was changed between versions of the .NET Framework.  They are set by calling the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_SetCompatibilitySwitches_\" data-linktype=\"relative-path\">SetCompatibilitySwitches</a> method before creating an application domain.  </p>\n<p> The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.  </p>\n<table>\n<thead>\n<tr>\n<th>Switch</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;NetFx40_LegacySecurityPolicy&quot;</td>\n<td>Code access security (CAS) for the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-short-md.md&quot; -->.NET Framework 3.5<!--END INCLUDE --> is enabled in this application domain. See <a href=\"../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;NetFx40_LegacySecurityPolicy&amp;gt; Element</a>.</td>\n</tr>\n<tr>\n<td>&quot;NetFx40_Legacy20SortingBehavior&quot;</td>\n<td>String sorting defaults for the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-short-md.md&quot; -->.NET Framework 3.5<!--END INCLUDE --> are enabled in this application domain. Its success requires sort00001000.dll to be installed. See <a href=\"../Topic/%3CCompatSortNLSVersion%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;CompatSortNLSVersion&amp;gt; Element</a>.</td>\n</tr>\n<tr>\n<td>&quot;NetFx40_Legacy40SortingBehavior&quot;</td>\n<td>String sorting defaults for the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-short-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->and Unicode 5.0 are enabled in this application domain. Its success requires sort00060101.dll to be installed.</td>\n</tr>\n<tr>\n<td>&quot;NetFx40_TimeSpanLegacyFormatMode&quot;</td>\n<td><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> formatting behavior for the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v35-short-md.md&quot; -->.NET Framework 3.5<!--END INCLUDE --> is enabled in this application domain.  See <a href=\"../Topic/%3CTimeSpan_LegacyFormatMode%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;TimeSpan_LegacyFormatMode&amp;gt; Element</a> and the &quot;Restoring Legacy TimeSpan Formatting&quot; section of the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> topic.</td>\n</tr>\n<tr>\n<td>&quot;UseRandomizedStringHashAlgorithm&quot;</td>\n<td>The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains. See <a href=\"../Topic/%3CUseRandomizedStringHashAlgorithm%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;UseRandomizedStringHashAlgorithm&amp;gt; Element</a>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_IsDefaultAppDomain\">\r\n    \r\n            <a id=\"System_AppDomain_IsDefaultAppDomain_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefaultAppDomain()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether the application domain is the default application domain for the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsDefaultAppDomain ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> object represents the default application domain for the process; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every managed process has a default application domain. Execution begins in the default domain.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a second application domain and displays information about the default domain and the new domain.  </p>\n<pre><code class=\"lang-vb\" name=\"System.AppDomain.IsDefaultAppDomain#1\">Imports System\nImports System.Reflection\n\nPublic Class Example\n    \n    &#39; The following attribute indicates to the loader that assemblies \n    &#39; in the global assembly cache should be shared across multiple\n    &#39; application domains.\n    &lt;LoaderOptimizationAttribute(LoaderOptimization.MultiDomainHost)&gt; _\n    Public Shared Sub Main() \n        &#39; Show information for the default application domain.\n        ShowDomainInfo()\n        \n        &#39; Create a new application domain and display its information.\n        Dim newDomain As AppDomain = AppDomain.CreateDomain(&quot;MyMultiDomain&quot;)\n        newDomain.DoCallBack(AddressOf ShowDomainInfo)\n    \n    End Sub &#39;Main\n    \n    \n    &#39; This method has the same signature as the CrossAppDomainDelegate,\n    &#39; so that it can be executed easily in the new application domain.\n    &#39; \n    Public Shared Sub ShowDomainInfo() \n        Dim ad As AppDomain = AppDomain.CurrentDomain\n        Console.WriteLine()\n        Console.WriteLine(&quot;FriendlyName: {0}&quot;, ad.FriendlyName)\n        Console.WriteLine(&quot;Id: {0}&quot;, ad.Id)\n        Console.WriteLine(&quot;IsDefaultAppDomain: {0}&quot;, ad.IsDefaultAppDomain())\n    \n    End Sub \nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.AppDomain.IsDefaultAppDomain#1\">using namespace System;\nusing namespace System::Reflection;\n\n// This method has the same signature as the CrossAppDomainDelegate,\n// so that it can be executed easily in the new application domain.\n//\nstatic void ShowDomainInfo()\n{\n    AppDomain^ ad = AppDomain::CurrentDomain;\n    Console::WriteLine();\n    Console::WriteLine( L&quot;FriendlyName: {0}&quot;, ad-&gt;FriendlyName );\n    Console::WriteLine( L&quot;Id: {0}&quot;, ad-&gt;Id );\n    Console::WriteLine( L&quot;IsDefaultAppDomain: {0}&quot;, ad-&gt;IsDefaultAppDomain() );\n}\n\n// The following attribute indicates to the loader that assemblies\n// in the global assembly cache should be shared across multiple \n// application domains.\n//\n[LoaderOptimizationAttribute(LoaderOptimization::MultiDomainHost)]\nint main()\n{\n    // Show information for the default application domain.\n    ShowDomainInfo();\n\n    // Create a new application domain and display its information.\n    AppDomain^ newDomain = AppDomain::CreateDomain( L&quot;MyMultiDomain&quot; );\n    newDomain-&gt;DoCallBack( gcnew CrossAppDomainDelegate( ShowDomainInfo ) );\n\n    return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.AppDomain.IsDefaultAppDomain#1\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    // The following attribute indicates to the loader that assemblies\n    // in the global assembly cache should be shared across multiple \n    // application domains.\n    [LoaderOptimizationAttribute( LoaderOptimization.MultiDomainHost)]\n    public static void Main()\n    {\n        // Show information for the default application domain.\n        ShowDomainInfo();\n\n        // Create a new application domain and display its information.\n        AppDomain newDomain = AppDomain.CreateDomain(&quot;MyMultiDomain&quot;);\n        newDomain.DoCallBack(new CrossAppDomainDelegate(ShowDomainInfo));\n    }\n\n    // This method has the same signature as the CrossAppDomainDelegate,\n    // so that it can be executed easily in the new application domain.\n    // \n    public static void ShowDomainInfo()\n    {\n        AppDomain ad = AppDomain.CurrentDomain;\n        Console.WriteLine();\n        Console.WriteLine(&quot;FriendlyName: {0}&quot;, ad.FriendlyName);\n        Console.WriteLine(&quot;Id: {0}&quot;, ad.Id);\n        Console.WriteLine(&quot;IsDefaultAppDomain: {0}&quot;, ad.IsDefaultAppDomain());\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_IsFinalizingForUnload\">\r\n    \r\n            <a id=\"System_AppDomain_IsFinalizingForUnload_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFinalizingForUnload()</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether this application domain is unloading, and the objects it contains are being finalized by the common language runtime.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFinalizingForUnload ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this application domain is unloading and the common language runtime has started invoking finalizers; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The finalization method for an object provides you an opportunity to perform any necessary cleanup operations before the object is garbage collected. After finalization, the object is accessible but in an invalid state and therefore unusable. Eventually, garbage collection completes and reclaims the object.  </p>\n<p> An object&#39;s finalization method is called in one of the following situations: during garbage collection, when the common language runtime is shutting down, or when the application domain that contains the object is unloaded. The IsFinalizingForUnload method returns <code>true</code> only in the last case; it does not return <code>true</code> if finalization results from routine garbage collection or from CLR shutdown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To determine whether finalization is due to CLR shutdown, use the <a class=\"xref\" href=\"system.environment#System_Environment_HasShutdownStarted_\" data-linktype=\"relative-path\">HasShutdownStarted</a> property. It returns <code>true</code> if finalization is due to an application domain being unloaded or to the CLR shutting down.  </p>\n</div>\n<p> While executing in your finalization method during domain unloading, you might want to access another object that is referenced by a static field and has a finalization method. However, you cannot reliably do so because the accessed object might already have been finalized.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An exception to this rule is the <a class=\"xref\" href=\"system.console\" data-linktype=\"relative-path\">Console</a> class, which contains static fields that reference stream objects, but is implemented specially so you can always write to the system console, even during domain unloading or system shutdown.  </p>\n</div>\n<p> Use this method in an object&#39;s finalization method to determine whether the application domain that contains the object is unloading. If that is the case, you cannot reliably access any object that has a finalization method and is referenced by a static field.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_Load_System_Byte___\">\r\n    \r\n            <a id=\"System_AppDomain_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Loads the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> with a common object file format (COFF) based image containing an emitted <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Assembly Load (byte[] rawAssembly);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawAssembly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <code>byte</code> that is a COFF-based image containing an emitted assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.  </p>\n<p> This method should be used only to load an assembly into the current application domain. This method is provided as a convenience for interoperability callers who cannot call the static <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method. To load assemblies into other application domains, use a method such as <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a>.  </p>\n<p> For information that is common to all overloads of this method, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the use of loading a raw assembly.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"AppDomain_LoadRaw#1\">Imports System\nImports System.IO\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      InstantiateMyType(currentDomain)      &#39; Failed!\n\n      AddHandler currentDomain.AssemblyResolve, AddressOf MyResolver\n      \n      InstantiateMyType(currentDomain)      &#39; OK!\n   End Sub &#39;Main\n   \n   \n   Sub InstantiateMyType(domain As AppDomain)\n      Try\n\t &#39; You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyType&quot;)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateMyType\n   \n   \n   &#39; Loads the content of a file to a byte array. \n   Function loadFile(filename As String) As Byte()\n      Dim fs As New FileStream(filename, FileMode.Open)\n      Dim buffer(CInt(fs.Length)) As Byte\n      fs.Read(buffer, 0, buffer.Length)\n      fs.Close()\n      \n      Return buffer\n   End Function &#39;loadFile\n   \n   \n   Function MyResolver(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n      Dim domain As AppDomain = DirectCast(sender, AppDomain)\n      \n      &#39; Once the files are generated, this call is\n      &#39; actually no longer necessary.\n      EmitAssembly(domain)\n      \n      Dim rawAssembly As Byte() = loadFile(&quot;temp.dll&quot;)\n      Dim rawSymbolStore As Byte() = loadFile(&quot;temp.pdb&quot;)\n      Dim myAssembly As System.Reflection.Assembly = domain.Load(rawAssembly, rawSymbolStore)\n      \n      Return myAssembly\n   End Function &#39;MyResolver\n   \n   \n   &#39; Creates a dynamic assembly with symbol information\n   &#39; and saves them to temp.dll and temp.pdb\n   Sub EmitAssembly(domain As AppDomain)\n      Dim assemblyName As New AssemblyName()\n      assemblyName.Name = &quot;MyAssembly&quot;\n      \n      Dim assemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Save)\n      Dim moduleBuilder As ModuleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyModule&quot;, &quot;temp.dll&quot;, True)\n      Dim typeBuilder As TypeBuilder = moduleBuilder.DefineType(&quot;MyType&quot;, TypeAttributes.Public)\n      \n      Dim constructorBuilder As ConstructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, Nothing)\n      Dim ilGenerator As ILGenerator = constructorBuilder.GetILGenerator()\n      ilGenerator.EmitWriteLine(&quot;MyType instantiated!&quot;)\n      ilGenerator.Emit(OpCodes.Ret)\n      \n      typeBuilder.CreateType()\n      \n      assemblyBuilder.Save(&quot;temp.dll&quot;)\n   End Sub &#39;EmitAssembly\n\nEnd Module &#39;Test\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_LoadRaw#1\">using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n      \n      InstantiateMyType(currentDomain);   // Failed!\n\n      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolver);\n      \n      InstantiateMyType(currentDomain);   // OK!\n   }\n   \n   static void InstantiateMyType(AppDomain domain) {\n      try {\n\t // You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyType&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }\n   \n   // Loads the content of a file to a byte array. \n   static byte[] loadFile(string filename) {\n      FileStream fs = new FileStream(filename, FileMode.Open);\n      byte[] buffer = new byte[(int) fs.Length];\n      fs.Read(buffer, 0, buffer.Length);\n      fs.Close();\n   \n      return buffer;\n   }   \n\n   static Assembly MyResolver(object sender, ResolveEventArgs args) {\n      AppDomain domain = (AppDomain) sender;\n\n      // Once the files are generated, this call is\n      // actually no longer necessary.\n      EmitAssembly(domain);\n      \n      byte[] rawAssembly = loadFile(&quot;temp.dll&quot;);\n      byte[] rawSymbolStore = loadFile(&quot;temp.pdb&quot;);\n      Assembly assembly = domain.Load(rawAssembly, rawSymbolStore);\n\n      return assembly;\n   }\n   \n   // Creates a dynamic assembly with symbol information\n   // and saves them to temp.dll and temp.pdb\n   static void EmitAssembly(AppDomain domain) {\n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;MyAssembly&quot;;\n\n      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Save);\n      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyModule&quot;, &quot;temp.dll&quot;, true);\n      TypeBuilder typeBuilder = moduleBuilder.DefineType(&quot;MyType&quot;, TypeAttributes.Public);\n\n      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);\n      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();\n      ilGenerator.EmitWriteLine(&quot;MyType instantiated!&quot;);\n      ilGenerator.Emit(OpCodes.Ret);\n\n      typeBuilder.CreateType();\n      \n      assemblyBuilder.Save(&quot;temp.dll&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_LoadRaw#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nvoid InstantiateMyType( AppDomain^ domain )\n{\n   try\n   {\n      \n      // You must supply a valid fully qualified assembly name here.\n      domain-&gt;CreateInstance( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyType&quot; );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\n\n// Loads the content of a file to a Byte array.\narray&lt;Byte&gt;^ loadFile( String^ filename )\n{\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Open );\n   array&lt;Byte&gt;^buffer = gcnew array&lt;Byte&gt;((int)fs-&gt;Length);\n   fs-&gt;Read( buffer, 0, buffer-&gt;Length );\n   fs-&gt;Close();\n   return buffer;\n}\n\n\n// Creates a dynamic assembly with symbol information\n// and saves them to temp.dll and temp.pdb\nvoid EmitAssembly( AppDomain^ domain )\n{\n   AssemblyName^ assemblyName = gcnew AssemblyName;\n   assemblyName-&gt;Name = &quot;MyAssembly&quot;;\n   AssemblyBuilder^ assemblyBuilder = domain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Save );\n   ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule( &quot;MyModule&quot;, &quot;temp.dll&quot;, true );\n   TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType( &quot;MyType&quot;, TypeAttributes::Public );\n   ConstructorBuilder^ constructorBuilder = typeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, nullptr );\n   ILGenerator^ ilGenerator = constructorBuilder-&gt;GetILGenerator();\n   ilGenerator-&gt;EmitWriteLine( &quot;MyType instantiated!&quot; );\n   ilGenerator-&gt;Emit( OpCodes::Ret );\n   typeBuilder-&gt;CreateType();\n   assemblyBuilder-&gt;Save( &quot;temp.dll&quot; );\n}\n\nref class Resolver\n{\npublic:\n   static Assembly^ MyResolver( Object^ sender, ResolveEventArgs^ args )\n   {\n      AppDomain^ domain = dynamic_cast&lt;AppDomain^&gt;(sender);\n      \n      // Once the files are generated, this call is\n      // actually no longer necessary.\n      EmitAssembly( domain );\n      array&lt;Byte&gt;^rawAssembly = loadFile( &quot;temp.dll&quot; );\n      array&lt;Byte&gt;^rawSymbolStore = loadFile( &quot;temp.pdb&quot; );\n      Assembly^ assembly = domain-&gt;Load( rawAssembly, rawSymbolStore );\n      return assembly;\n   }\n\n};\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   InstantiateMyType( currentDomain ); // Failed!\n   currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler( Resolver::MyResolver );\n   InstantiateMyType( currentDomain ); // OK!\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_Load_System_Reflection_AssemblyName_\">\r\n    \r\n            <a id=\"System_AppDomain_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(AssemblyName)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> given its <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyRef</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that describes the assembly to load.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyRef</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyRef</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyRef</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyRef</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method should be used only to load an assembly into the current application domain. This method is provided as a convenience for interoperability callers who cannot call the static <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method. To load assemblies into other application domains, use a method such as <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a>.  </p>\n<p> If a version of the requested assembly is already loaded, this method returns the loaded assembly, even if a different version is requested.  </p>\n<p> Supplying a partial assembly name for <code>assemblyRef</code> is not recommended. (A partial name omits one or more of culture, version, or public key token. For overloads that take a string instead of an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object, &quot;MyAssembly, Version=1.0.0.0&quot; is an example of a partial name and &quot;MyAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=18ab3442da84b47&quot; is an example of a full name.) Using partial names has a negative effect on performance. In addition, a partial assembly name can load an assembly from the global assembly cache only if there is an exact copy of the assembly in the application base directory (<a class=\"xref\" href=\"system.appdomain#System_AppDomain_BaseDirectory_\" data-linktype=\"relative-path\">BaseDirectory</a> or <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a>).  </p>\n<p> If the current <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> object represents application domain <code>A</code>, and the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_\" data-linktype=\"relative-path\">Load</a> method is called from application domain <code>B</code>, the assembly is loaded into both application domains. For example, the following code loads <code>MyAssembly</code> into the new application domain <code>ChildDomain</code> and also into the application domain where the code executes:  </p>\n<pre><code class=\"lang-vb\" name=\"System.AppDomain.Load#1\">\t\tDim ad As AppDomain  = AppDomain.CreateDomain(&quot;ChildDomain&quot;)\n\t\tad.Load(&quot;MyAssembly&quot;)\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.AppDomain.Load#1\">         AppDomain^ ad = AppDomain::CreateDomain(&quot;ChildDomain&quot;);\n         ad-&gt;Load(&quot;MyAssembly&quot;);\n</code></pre><pre><code class=\"lang-cs\" name=\"System.AppDomain.Load#1\">\t\tAppDomain ad = AppDomain.CreateDomain(&quot;ChildDomain&quot;);\n\t\tad.Load(&quot;MyAssembly&quot;);\n</code></pre><p> The assembly is loaded into both domains because <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> does not derive from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, and therefore the return value of the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_\" data-linktype=\"relative-path\">Load</a> method cannot be marshaled. Instead, the common language runtime tries to load the assembly into the calling application domain. The assemblies that are loaded into the two application domains might be different if the path settings for the two application domains are different.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If both the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_Name_\" data-linktype=\"relative-path\">Name</a> property and the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_FullName_\" data-linktype=\"relative-path\">FullName</a> property). If the file is not found, the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a> property is used to search for the assembly. If the assembly is found using <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_CodeBase_\" data-linktype=\"relative-path\">CodeBase</a>, the display name is matched against the assembly. If the match fails, a <a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> is thrown.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_Load_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> given its display name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Assembly Load (string assemblyString);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is <code>null</code></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method should be used only to load an assembly into the current application domain. This method is provided as a convenience for interoperability callers who cannot call the static <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method. To load assemblies into other application domains, use a method such as <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a>.  </p>\n<p> For information that is common to all overloads of this method, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_Load_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_AppDomain_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Loads the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> with a common object file format (COFF) based image containing an emitted <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>. The raw bytes representing the symbols for the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> are also loaded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawAssembly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <code>byte</code> that is a COFF-based image containing an emitted assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawSymbolStore</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <code>byte</code> containing the raw bytes representing the symbols for the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.  </p>\n<p> This method should be used only to load an assembly into the current application domain. This method is provided as a convenience for interoperability callers who cannot call the static <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method. To load assemblies into other application domains, use a method such as <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a>.  </p>\n<p> For information that is common to all overloads of this method, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the use of loading a raw assembly.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"AppDomain_LoadRaw#1\">Imports System\nImports System.IO\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      InstantiateMyType(currentDomain)      &#39; Failed!\n\n      AddHandler currentDomain.AssemblyResolve, AddressOf MyResolver\n      \n      InstantiateMyType(currentDomain)      &#39; OK!\n   End Sub &#39;Main\n   \n   \n   Sub InstantiateMyType(domain As AppDomain)\n      Try\n\t &#39; You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyType&quot;)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateMyType\n   \n   \n   &#39; Loads the content of a file to a byte array. \n   Function loadFile(filename As String) As Byte()\n      Dim fs As New FileStream(filename, FileMode.Open)\n      Dim buffer(CInt(fs.Length)) As Byte\n      fs.Read(buffer, 0, buffer.Length)\n      fs.Close()\n      \n      Return buffer\n   End Function &#39;loadFile\n   \n   \n   Function MyResolver(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n      Dim domain As AppDomain = DirectCast(sender, AppDomain)\n      \n      &#39; Once the files are generated, this call is\n      &#39; actually no longer necessary.\n      EmitAssembly(domain)\n      \n      Dim rawAssembly As Byte() = loadFile(&quot;temp.dll&quot;)\n      Dim rawSymbolStore As Byte() = loadFile(&quot;temp.pdb&quot;)\n      Dim myAssembly As System.Reflection.Assembly = domain.Load(rawAssembly, rawSymbolStore)\n      \n      Return myAssembly\n   End Function &#39;MyResolver\n   \n   \n   &#39; Creates a dynamic assembly with symbol information\n   &#39; and saves them to temp.dll and temp.pdb\n   Sub EmitAssembly(domain As AppDomain)\n      Dim assemblyName As New AssemblyName()\n      assemblyName.Name = &quot;MyAssembly&quot;\n      \n      Dim assemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Save)\n      Dim moduleBuilder As ModuleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyModule&quot;, &quot;temp.dll&quot;, True)\n      Dim typeBuilder As TypeBuilder = moduleBuilder.DefineType(&quot;MyType&quot;, TypeAttributes.Public)\n      \n      Dim constructorBuilder As ConstructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, Nothing)\n      Dim ilGenerator As ILGenerator = constructorBuilder.GetILGenerator()\n      ilGenerator.EmitWriteLine(&quot;MyType instantiated!&quot;)\n      ilGenerator.Emit(OpCodes.Ret)\n      \n      typeBuilder.CreateType()\n      \n      assemblyBuilder.Save(&quot;temp.dll&quot;)\n   End Sub &#39;EmitAssembly\n\nEnd Module &#39;Test\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_LoadRaw#1\">using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n      \n      InstantiateMyType(currentDomain);   // Failed!\n\n      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolver);\n      \n      InstantiateMyType(currentDomain);   // OK!\n   }\n   \n   static void InstantiateMyType(AppDomain domain) {\n      try {\n\t // You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyType&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }\n   \n   // Loads the content of a file to a byte array. \n   static byte[] loadFile(string filename) {\n      FileStream fs = new FileStream(filename, FileMode.Open);\n      byte[] buffer = new byte[(int) fs.Length];\n      fs.Read(buffer, 0, buffer.Length);\n      fs.Close();\n   \n      return buffer;\n   }   \n\n   static Assembly MyResolver(object sender, ResolveEventArgs args) {\n      AppDomain domain = (AppDomain) sender;\n\n      // Once the files are generated, this call is\n      // actually no longer necessary.\n      EmitAssembly(domain);\n      \n      byte[] rawAssembly = loadFile(&quot;temp.dll&quot;);\n      byte[] rawSymbolStore = loadFile(&quot;temp.pdb&quot;);\n      Assembly assembly = domain.Load(rawAssembly, rawSymbolStore);\n\n      return assembly;\n   }\n   \n   // Creates a dynamic assembly with symbol information\n   // and saves them to temp.dll and temp.pdb\n   static void EmitAssembly(AppDomain domain) {\n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;MyAssembly&quot;;\n\n      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Save);\n      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyModule&quot;, &quot;temp.dll&quot;, true);\n      TypeBuilder typeBuilder = moduleBuilder.DefineType(&quot;MyType&quot;, TypeAttributes.Public);\n\n      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);\n      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();\n      ilGenerator.EmitWriteLine(&quot;MyType instantiated!&quot;);\n      ilGenerator.Emit(OpCodes.Ret);\n\n      typeBuilder.CreateType();\n      \n      assemblyBuilder.Save(&quot;temp.dll&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_LoadRaw#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nvoid InstantiateMyType( AppDomain^ domain )\n{\n   try\n   {\n      \n      // You must supply a valid fully qualified assembly name here.\n      domain-&gt;CreateInstance( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyType&quot; );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\n\n// Loads the content of a file to a Byte array.\narray&lt;Byte&gt;^ loadFile( String^ filename )\n{\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Open );\n   array&lt;Byte&gt;^buffer = gcnew array&lt;Byte&gt;((int)fs-&gt;Length);\n   fs-&gt;Read( buffer, 0, buffer-&gt;Length );\n   fs-&gt;Close();\n   return buffer;\n}\n\n\n// Creates a dynamic assembly with symbol information\n// and saves them to temp.dll and temp.pdb\nvoid EmitAssembly( AppDomain^ domain )\n{\n   AssemblyName^ assemblyName = gcnew AssemblyName;\n   assemblyName-&gt;Name = &quot;MyAssembly&quot;;\n   AssemblyBuilder^ assemblyBuilder = domain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Save );\n   ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule( &quot;MyModule&quot;, &quot;temp.dll&quot;, true );\n   TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType( &quot;MyType&quot;, TypeAttributes::Public );\n   ConstructorBuilder^ constructorBuilder = typeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, nullptr );\n   ILGenerator^ ilGenerator = constructorBuilder-&gt;GetILGenerator();\n   ilGenerator-&gt;EmitWriteLine( &quot;MyType instantiated!&quot; );\n   ilGenerator-&gt;Emit( OpCodes::Ret );\n   typeBuilder-&gt;CreateType();\n   assemblyBuilder-&gt;Save( &quot;temp.dll&quot; );\n}\n\nref class Resolver\n{\npublic:\n   static Assembly^ MyResolver( Object^ sender, ResolveEventArgs^ args )\n   {\n      AppDomain^ domain = dynamic_cast&lt;AppDomain^&gt;(sender);\n      \n      // Once the files are generated, this call is\n      // actually no longer necessary.\n      EmitAssembly( domain );\n      array&lt;Byte&gt;^rawAssembly = loadFile( &quot;temp.dll&quot; );\n      array&lt;Byte&gt;^rawSymbolStore = loadFile( &quot;temp.pdb&quot; );\n      Assembly^ assembly = domain-&gt;Load( rawAssembly, rawSymbolStore );\n      return assembly;\n   }\n\n};\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   InstantiateMyType( currentDomain ); // Failed!\n   currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler( Resolver::MyResolver );\n   InstantiateMyType( currentDomain ); // OK!\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_Load_System_Reflection_AssemblyName_System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_AppDomain_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(AssemblyName,Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> given its <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyRef</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that describes the assembly to load.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyRef</code> is <code>null</code></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyRef</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyRef</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyRef</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method should be used only to load an assembly into the current application domain. This method is provided as a convenience for interoperability callers who cannot call the static <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method. To load assemblies into other application domains, use a method such as <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a>.  </p>\n<p> For information that is common to all overloads of this method, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_Load_System_String_System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_AppDomain_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(String,Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> given its display name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Assembly Load (string assemblyString, System.Security.Policy.Evidence assemblySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblyString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The display name of the assembly. See <span class=\"xref\">stem.Reflection.Assembly.FullName*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>assemblySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is <code>null</code></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>assemblyString</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method should be used only to load an assembly into the current application domain. This method is provided as a convenience for interoperability callers who cannot call the static <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method. To load assemblies into other application domains, use a method such as <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a>.  </p>\n<p> For information that is common to all overloads of this method, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_Load_System_Byte___System_Byte___System_Security_Policy_Evidence_\">\r\n    \r\n            <a id=\"System_AppDomain_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Byte[],Byte[],Evidence)</div>        \r\n          </div>\r\n    \r\n            <p>Loads the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> with a common object file format (COFF) based image containing an emitted <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>. The raw bytes representing the symbols for the <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> are also loaded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawAssembly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <code>byte</code> that is a COFF-based image containing an emitted assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rawSymbolStore</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of type <code>byte</code> containing the raw bytes representing the symbols for the assembly.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>securityEvidence</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Evidence for loading the assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a></div>\r\n                  </div>\r\n                  <p>The loaded assembly.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.badimageformatexception\" data-linktype=\"relative-path\">BadImageFormatException</a></div>\r\n                  </div>\r\n                  <p><code>rawAssembly</code> is not a valid assembly.  </p>\n<p> -or-  </p>\n<p> Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a></div>\r\n                  </div>\r\n                  <p>An assembly or module was loaded twice with two different evidences.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>securityEvidence</code> is not <code>null</code>. When legacy CAS policy is not enabled, <code>securityEvidence</code> should be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.  </p>\n<p> This method should be used only to load an assembly into the current application domain. This method is provided as a convenience for interoperability callers who cannot call the static <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_\" data-linktype=\"relative-path\">Load</a> method. To load assemblies into other application domains, use a method such as <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a>.  </p>\n<p> For information that is common to all overloads of this method, see the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Load_System_Reflection_AssemblyName_\" data-linktype=\"relative-path\">Load(AssemblyName)</a> method overload.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the use of loading a raw assembly.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"AppDomain_LoadRaw#1\">Imports System\nImports System.IO\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      InstantiateMyType(currentDomain)      &#39; Failed!\n\n      AddHandler currentDomain.AssemblyResolve, AddressOf MyResolver\n      \n      InstantiateMyType(currentDomain)      &#39; OK!\n   End Sub &#39;Main\n   \n   \n   Sub InstantiateMyType(domain As AppDomain)\n      Try\n\t &#39; You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyType&quot;)\n      Catch e As Exception\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;InstantiateMyType\n   \n   \n   &#39; Loads the content of a file to a byte array. \n   Function loadFile(filename As String) As Byte()\n      Dim fs As New FileStream(filename, FileMode.Open)\n      Dim buffer(CInt(fs.Length)) As Byte\n      fs.Read(buffer, 0, buffer.Length)\n      fs.Close()\n      \n      Return buffer\n   End Function &#39;loadFile\n   \n   \n   Function MyResolver(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n      Dim domain As AppDomain = DirectCast(sender, AppDomain)\n      \n      &#39; Once the files are generated, this call is\n      &#39; actually no longer necessary.\n      EmitAssembly(domain)\n      \n      Dim rawAssembly As Byte() = loadFile(&quot;temp.dll&quot;)\n      Dim rawSymbolStore As Byte() = loadFile(&quot;temp.pdb&quot;)\n      Dim myAssembly As System.Reflection.Assembly = domain.Load(rawAssembly, rawSymbolStore)\n      \n      Return myAssembly\n   End Function &#39;MyResolver\n   \n   \n   &#39; Creates a dynamic assembly with symbol information\n   &#39; and saves them to temp.dll and temp.pdb\n   Sub EmitAssembly(domain As AppDomain)\n      Dim assemblyName As New AssemblyName()\n      assemblyName.Name = &quot;MyAssembly&quot;\n      \n      Dim assemblyBuilder As AssemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Save)\n      Dim moduleBuilder As ModuleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyModule&quot;, &quot;temp.dll&quot;, True)\n      Dim typeBuilder As TypeBuilder = moduleBuilder.DefineType(&quot;MyType&quot;, TypeAttributes.Public)\n      \n      Dim constructorBuilder As ConstructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, Nothing)\n      Dim ilGenerator As ILGenerator = constructorBuilder.GetILGenerator()\n      ilGenerator.EmitWriteLine(&quot;MyType instantiated!&quot;)\n      ilGenerator.Emit(OpCodes.Ret)\n      \n      typeBuilder.CreateType()\n      \n      assemblyBuilder.Save(&quot;temp.dll&quot;)\n   End Sub &#39;EmitAssembly\n\nEnd Module &#39;Test\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomain_LoadRaw#1\">using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test {\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n      \n      InstantiateMyType(currentDomain);   // Failed!\n\n      currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolver);\n      \n      InstantiateMyType(currentDomain);   // OK!\n   }\n   \n   static void InstantiateMyType(AppDomain domain) {\n      try {\n\t // You must supply a valid fully qualified assembly name here.\n         domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyType&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(e.Message);\n      }\n   }\n   \n   // Loads the content of a file to a byte array. \n   static byte[] loadFile(string filename) {\n      FileStream fs = new FileStream(filename, FileMode.Open);\n      byte[] buffer = new byte[(int) fs.Length];\n      fs.Read(buffer, 0, buffer.Length);\n      fs.Close();\n   \n      return buffer;\n   }   \n\n   static Assembly MyResolver(object sender, ResolveEventArgs args) {\n      AppDomain domain = (AppDomain) sender;\n\n      // Once the files are generated, this call is\n      // actually no longer necessary.\n      EmitAssembly(domain);\n      \n      byte[] rawAssembly = loadFile(&quot;temp.dll&quot;);\n      byte[] rawSymbolStore = loadFile(&quot;temp.pdb&quot;);\n      Assembly assembly = domain.Load(rawAssembly, rawSymbolStore);\n\n      return assembly;\n   }\n   \n   // Creates a dynamic assembly with symbol information\n   // and saves them to temp.dll and temp.pdb\n   static void EmitAssembly(AppDomain domain) {\n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;MyAssembly&quot;;\n\n      AssemblyBuilder assemblyBuilder = domain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Save);\n      ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule(&quot;MyModule&quot;, &quot;temp.dll&quot;, true);\n      TypeBuilder typeBuilder = moduleBuilder.DefineType(&quot;MyType&quot;, TypeAttributes.Public);\n\n      ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, null);\n      ILGenerator ilGenerator = constructorBuilder.GetILGenerator();\n      ilGenerator.EmitWriteLine(&quot;MyType instantiated!&quot;);\n      ilGenerator.Emit(OpCodes.Ret);\n\n      typeBuilder.CreateType();\n      \n      assemblyBuilder.Save(&quot;temp.dll&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_LoadRaw#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nvoid InstantiateMyType( AppDomain^ domain )\n{\n   try\n   {\n      \n      // You must supply a valid fully qualified assembly name here.\n      domain-&gt;CreateInstance( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyType&quot; );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\n\n// Loads the content of a file to a Byte array.\narray&lt;Byte&gt;^ loadFile( String^ filename )\n{\n   FileStream^ fs = gcnew FileStream( filename,FileMode::Open );\n   array&lt;Byte&gt;^buffer = gcnew array&lt;Byte&gt;((int)fs-&gt;Length);\n   fs-&gt;Read( buffer, 0, buffer-&gt;Length );\n   fs-&gt;Close();\n   return buffer;\n}\n\n\n// Creates a dynamic assembly with symbol information\n// and saves them to temp.dll and temp.pdb\nvoid EmitAssembly( AppDomain^ domain )\n{\n   AssemblyName^ assemblyName = gcnew AssemblyName;\n   assemblyName-&gt;Name = &quot;MyAssembly&quot;;\n   AssemblyBuilder^ assemblyBuilder = domain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Save );\n   ModuleBuilder^ moduleBuilder = assemblyBuilder-&gt;DefineDynamicModule( &quot;MyModule&quot;, &quot;temp.dll&quot;, true );\n   TypeBuilder^ typeBuilder = moduleBuilder-&gt;DefineType( &quot;MyType&quot;, TypeAttributes::Public );\n   ConstructorBuilder^ constructorBuilder = typeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, nullptr );\n   ILGenerator^ ilGenerator = constructorBuilder-&gt;GetILGenerator();\n   ilGenerator-&gt;EmitWriteLine( &quot;MyType instantiated!&quot; );\n   ilGenerator-&gt;Emit( OpCodes::Ret );\n   typeBuilder-&gt;CreateType();\n   assemblyBuilder-&gt;Save( &quot;temp.dll&quot; );\n}\n\nref class Resolver\n{\npublic:\n   static Assembly^ MyResolver( Object^ sender, ResolveEventArgs^ args )\n   {\n      AppDomain^ domain = dynamic_cast&lt;AppDomain^&gt;(sender);\n      \n      // Once the files are generated, this call is\n      // actually no longer necessary.\n      EmitAssembly( domain );\n      array&lt;Byte&gt;^rawAssembly = loadFile( &quot;temp.dll&quot; );\n      array&lt;Byte&gt;^rawSymbolStore = loadFile( &quot;temp.pdb&quot; );\n      Assembly^ assembly = domain-&gt;Load( rawAssembly, rawSymbolStore );\n      return assembly;\n   }\n\n};\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   InstantiateMyType( currentDomain ); // Failed!\n   currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler( Resolver::MyResolver );\n   InstantiateMyType( currentDomain ); // OK!\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ReflectionOnlyGetAssemblies\">\r\n    \r\n            <a id=\"System_AppDomain_ReflectionOnlyGetAssemblies_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectionOnlyGetAssemblies()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the assemblies that have been loaded into the reflection-only context of the application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Assembly[] ReflectionOnlyGetAssemblies ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.assembly\" data-linktype=\"relative-path\">Assembly</a> objects that represent the assemblies loaded into the reflection-only context of the application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>An operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns the assemblies that have been loaded into the reflection-only context. To get the assemblies that have been loaded for execution, use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_GetAssemblies_\" data-linktype=\"relative-path\">GetAssemblies</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example loads the System.dll assembly into the execution context and then into the reflection-only context. The <a class=\"xref\" href=\"system.appdomain#System_AppDomain_GetAssemblies_\" data-linktype=\"relative-path\">GetAssemblies</a> and ReflectionOnlyGetAssemblies methods are used to display the assemblies loaded into each context.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain.ReflectionOnlyGetAssemblies#1\">using System;\nusing System.Reflection;\nusing System.Timers;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Get the assembly display name for System.dll, the assembly \n        // that contains System.Timers.Timer. Note that this causes\n        // System.dll to be loaded into the execution context.\n        //\n        string displayName = typeof(Timer).Assembly.FullName;\n\n        // Load System.dll into the reflection-only context. Note that \n        // if you obtain the display name (for example, by running this\n        // example program), and enter it as a literal string in the \n        // preceding line of code, you can load System.dll into the \n        // reflection-only context without loading it into the execution \n        // context.\n        Assembly.ReflectionOnlyLoad(displayName);\n\n        // Display the assemblies loaded into the execution and \n        // reflection-only contexts. System.dll appears in both contexts.\n        //\n        Console.WriteLine(&quot;------------- Execution Context --------------&quot;);\n        foreach (Assembly a in AppDomain.CurrentDomain.GetAssemblies())\n        {\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, a.GetName());\n        }\n        Console.WriteLine(&quot;------------- Reflection-only Context --------------&quot;);\n        foreach (Assembly a in AppDomain.CurrentDomain.ReflectionOnlyGetAssemblies())\n        {\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, a.GetName());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain.ReflectionOnlyGetAssemblies#1\">using namespace System;\nusing namespace System::Reflection;\n\n#using &lt;System.dll&gt;\n\nusing namespace System::Timers;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Get the assembly display name for System.dll, the assembly \n   // that contains System.Timers.Timer. Note that this causes\n   // System.dll to be loaded into the execution context.\n   //\n   String^ displayName = Timer::typeid-&gt;Assembly-&gt;FullName;\n   \n   // Load System.dll into the reflection-only context. Note that \n   // if you obtain the display name (for example, by running this\n   // example program), and enter it as a literal string in the \n   // preceding line of code, you can load System.dll into the \n   // reflection-only context without loading it into the execution \n   // context.\n   Assembly::ReflectionOnlyLoad( displayName );\n   \n   // Display the assemblies loaded into the execution and \n   // reflection-only contexts. System.dll appears in both contexts.\n   //\n   Console::WriteLine( L&quot;------------- Execution Context --------------&quot; );\n   IEnumerator^ myEnum = AppDomain::CurrentDomain-&gt;GetAssemblies()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Assembly^ a = safe_cast&lt;Assembly^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( L&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, a-&gt;GetName() );\n   }\n\n   Console::WriteLine( L&quot;------------- Reflection-only Context --------------&quot; );\n   IEnumerator^ myEnum1 = AppDomain::CurrentDomain-&gt;ReflectionOnlyGetAssemblies()-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      Assembly^ a = safe_cast&lt;Assembly^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( L&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, a-&gt;GetName() );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain.ReflectionOnlyGetAssemblies#1\">Imports System\nImports System.Reflection\nImports System.Timers\n\nPublic Class Example\n    \n    Public Shared Sub Main() \n        &#39; Get the assembly display name for System.dll, the assembly \n        &#39; that contains System.Timers.Timer. Note that this causes\n        &#39; System.dll to be loaded into the execution context.\n        &#39;\n        Dim displayName As String = GetType(Timer).Assembly.FullName\n        \n        &#39; Load System.dll into the reflection-only context. Note that \n        &#39; if you obtain the display name (for example, by running this\n        &#39; example program), and enter it as a literal string in the \n        &#39; preceding line of code, you can load System.dll into the \n        &#39; reflection-only context without loading it into the execution \n        &#39; context.\n        Assembly.ReflectionOnlyLoad(displayName)\n        \n        &#39; Display the assemblies loaded into the execution and \n        &#39; reflection-only contexts. System.dll appears in both contexts.\n        &#39;\n        Dim ad As AppDomain = AppDomain.CurrentDomain\n        Console.WriteLine(&quot;------------- Execution Context --------------&quot;)\n        For Each a As Assembly In ad.GetAssemblies()\n            Console.WriteLine(vbTab + &quot;{0}&quot;, a.GetName())\n        Next a\n        Console.WriteLine(&quot;------------- Reflection-only Context --------------&quot;)\n        For Each a As Assembly In ad.ReflectionOnlyGetAssemblies()\n            Console.WriteLine(vbTab + &quot;{0}&quot;, a.GetName())\n        Next a\n    \n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_SetAppDomainPolicy_System_Security_Policy_PolicyLevel_\">\r\n    \r\n            <a id=\"System_AppDomain_SetAppDomainPolicy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAppDomainPolicy(PolicyLevel)</div>        \r\n          </div>\r\n    \r\n            <p>Establishes the security policy level for this application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAppDomainPolicy (System.Security.Policy.PolicyLevel domainPolicy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>domainPolicy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policylevel\" data-linktype=\"relative-path\">PolicyLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The security policy level.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>domainPolicy</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policyexception\" data-linktype=\"relative-path\">PolicyException</a></div>\r\n                  </div>\r\n                  <p>The security policy level has already been set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call this method before an assembly is loaded into the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> in order for the security policy to have effect.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the SetAppDomainPolicymethod to set the security policy level of an application domain.  </p>\n<pre><code class=\"lang-cs\" name=\"ADSetAppDomainPolicy#1\">using System;\nusing System.Threading;\nusing System.Security;\nusing System.Security.Policy;\nusing System.Security.Permissions;\n\nnamespace AppDomainSnippets\n{\n\tclass ADSetAppDomainPolicy\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\t\t\t// Create a new application domain.\n\t\t\tAppDomain domain = System.AppDomain.CreateDomain(&quot;MyDomain&quot;);\n\t\t\t\n\t\t\t// Create a new AppDomain PolicyLevel.\n\t\t\tPolicyLevel polLevel = PolicyLevel.CreateAppDomainLevel();\n\t\t\t// Create a new, empty permission set.\n\t\t\tPermissionSet permSet = new PermissionSet(PermissionState.None);\n\t\t\t// Add permission to execute code to the permission set.\n\t\t\tpermSet.AddPermission\n\t\t\t\t(new SecurityPermission(SecurityPermissionFlag.Execution));\n\t\t\t// Give the policy level&#39;s root code group a new policy statement based\n\t\t\t// on the new permission set.\n\t\t\tpolLevel.RootCodeGroup.PolicyStatement = new PolicyStatement(permSet);\n\t\t\t// Give the new policy level to the application domain.\n\t\t\tdomain.SetAppDomainPolicy(polLevel);\n\t\t\t\n\t\t\t// Try to execute the assembly.\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// This will throw a PolicyException if the executable tries to\n\t\t\t\t// access any resources like file I/O or tries to create a window.\n\t\t\t\tdomain.ExecuteAssembly(&quot;Assemblies\\\\MyWindowsExe.exe&quot;);\n\t\t\t}\n\t\t\tcatch(PolicyException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;PolicyException: {0}&quot;, e.Message);\n\t\t\t}\n\n\t\t\tAppDomain.Unload(domain);\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ADSetAppDomainPolicy#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Security;\nusing namespace System::Security::Policy;\nusing namespace System::Security::Permissions;\nint main()\n{\n   \n   // Create a new application domain.\n   AppDomain^ domain = System::AppDomain::CreateDomain( &quot;MyDomain&quot; );\n   \n   // Create a new AppDomain PolicyLevel.\n   PolicyLevel^ polLevel = PolicyLevel::CreateAppDomainLevel();\n   \n   // Create a new, empty permission set.\n   PermissionSet^ permSet = gcnew PermissionSet( PermissionState::None );\n   \n   // Add permission to execute code to the permission set.\n   permSet-&gt;AddPermission( gcnew SecurityPermission( SecurityPermissionFlag::Execution ) );\n   \n   // Give the policy level&#39;s root code group a new policy statement based\n   // on the new permission set.\n   polLevel-&gt;RootCodeGroup-&gt;PolicyStatement = gcnew PolicyStatement( permSet );\n   \n   // Give the new policy level to the application domain.\n   domain-&gt;SetAppDomainPolicy( polLevel );\n   \n   // Try to execute the assembly.\n   try\n   {\n      \n      // This will throw a PolicyException if the executable tries to\n      // access any resources like file I/O or tries to create a window.\n      domain-&gt;ExecuteAssembly( &quot;Assemblies\\\\MyWindowsExe.exe&quot; );\n   }\n   catch ( PolicyException^ e ) \n   {\n      Console::WriteLine( &quot;PolicyException: {0}&quot;, e-&gt;Message );\n   }\n\n   AppDomain::Unload( domain );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ADSetAppDomainPolicy#1\">Imports System\nImports System.Threading\nImports System.Security\nImports System.Security.Policy\nImports System.Security.Permissions\n\n\n\nClass ADSetAppDomainPolicy\n   \n   Overloads Shared Sub Main(args() As String)\n      &#39; Create a new application domain.\n      Dim domain As AppDomain = System.AppDomain.CreateDomain(&quot;MyDomain&quot;)\n      \n      &#39; Create a new AppDomain PolicyLevel.\n      Dim polLevel As PolicyLevel = PolicyLevel.CreateAppDomainLevel()\n      &#39; Create a new, empty permission set.\n      Dim permSet As New PermissionSet(PermissionState.None)\n      &#39; Add permission to execute code to the permission set.\n      permSet.AddPermission(New SecurityPermission(SecurityPermissionFlag.Execution))\n      &#39; Give the policy level&#39;s root code group a new policy statement based\n      &#39; on the new permission set.\n      polLevel.RootCodeGroup.PolicyStatement = New PolicyStatement(permSet)\n      &#39; Give the new policy level to the application domain.\n      domain.SetAppDomainPolicy(polLevel)\n      \n      &#39; Try to execute the assembly.\n      Try\n         &#39; This will throw a PolicyException if the executable tries to\n         &#39; access any resources like file I/Q or window creation.\n         domain.ExecuteAssembly(&quot;Assemblies\\MyWindowsExe.exe&quot;)\n      Catch e As PolicyException\n         Console.WriteLine(&quot;PolicyException: {0}&quot;, e.Message)\n      End Try\n      \n      AppDomain.Unload(domain)\n   End Sub &#39;Main\nEnd Class &#39;ADSetAppDomainPolicy\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_SetCachePath_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_SetCachePath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCachePath(String)</div>        \r\n          </div>\r\n    \r\n            <p>Establishes the specified directory path as the location where assemblies are shadow copied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCachePath (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified path to the shadow copy location.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The cache path is ignored if the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> property is not set. See the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_CachePath_\" data-linktype=\"relative-path\">CachePath</a> property.  </p>\n<p> For more information on shadow copying see <a href=\"../Topic/Shadow%20Copying%20Assemblies.md\" data-linktype=\"relative-path\">Shadow Copying Assemblies</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_SetData_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_AppDomain_SetData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetData(String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Assigns the specified value to the specified application domain property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetData (string name, object data);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a user-defined application domain property to create or change.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to insert an entry, or modify the value of an entry in an internal cache of name-data pairs that describe properties of this instance of <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>.  </p>\n<p> The cache automatically contains predefined system entries that are inserted when the application domain is created. You cannot insert or modify system entries with this method. A method call that attempts to modify a system entry has no effect; the method does not throw an exception. You can inspect the values of system entries with the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_GetData_\" data-linktype=\"relative-path\">GetData</a> method, or the equivalent <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> properties described in <a class=\"xref\" href=\"system.appdomain#System_AppDomain_GetData_\" data-linktype=\"relative-path\">GetData</a>.  </p>\n<p> You can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply &quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot; as the value of the <code>name</code> argument and a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value that represents the timeout interval as the value of the <code>data</code> argument. You can also insert or modify your own user defined name-data pairs with this method and inspect their values with the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_GetData_\" data-linktype=\"relative-path\">GetData</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the SetData method to create a new value pair. The example then uses the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_GetData_\" data-linktype=\"relative-path\">GetData</a> method to retrieve the value, and displays it to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADGetData#1\">using namespace System;\nusing namespace System::Reflection;\n\nint main()\n{\n   // appdomain setup information\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   \n   //Create a new value pair for the appdomain\n   currentDomain-&gt;SetData( &quot;ADVALUE&quot;, &quot;Example value&quot; );\n   \n   //get the value specified in the setdata method\n   Console::WriteLine( &quot;ADVALUE is: {0}&quot;, currentDomain-&gt;GetData( &quot;ADVALUE&quot; ) );\n   \n   //get a system value specified at appdomainsetup\n   Console::WriteLine( &quot;System value for loader optimization: {0}&quot;, \n      currentDomain-&gt;GetData( &quot;LOADER_OPTIMIZATION&quot; ) );\n}\n\n/* This code example produces the following output:\n\nADVALUE is: Example value\nSystem value for loader optimization: NotSpecified\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ADGetData#1\">Imports System\nImports System.Reflection\n\nClass ADGetData   \n   \n   Public Shared Sub Main()\n      &#39; appdomain setup information\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      \n      &#39;Create a new value pair for the appdomain\n      currentDomain.SetData(&quot;ADVALUE&quot;, &quot;Example value&quot;)\n      \n      &#39;get the value specified in the setdata method\n      Console.WriteLine((&quot;ADVALUE is: &quot; &amp; currentDomain.GetData(&quot;ADVALUE&quot;)))\n      \n      &#39;get a system value specified at appdomainsetup\n      Console.WriteLine(&quot;System value for loader optimization: {0}&quot;, _\n         currentDomain.GetData(&quot;LOADER_OPTIMIZATION&quot;))\n\n   End Sub \nEnd Class \n\n&#39; This code example produces the following output:\n&#39;\n&#39;ADVALUE is: Example value\n&#39;System value for loader optimization: NotSpecified\n</code></pre><pre><code class=\"lang-cs\" name=\"ADGetData#1\">using System;\nusing System.Reflection;\n\nclass ADGetData \n{\n    public static void Main() \n    {\n        // appdomain setup information\n        AppDomain currentDomain = AppDomain.CurrentDomain;\n\n        //Create a new value pair for the appdomain\n        currentDomain.SetData(&quot;ADVALUE&quot;, &quot;Example value&quot;);\n\n        //get the value specified in the setdata method\n        Console.WriteLine(&quot;ADVALUE is: &quot; + currentDomain.GetData(&quot;ADVALUE&quot;));\n\n        //get a system value specified at appdomainsetup\n        Console.WriteLine(&quot;System value for loader optimization: {0}&quot;,\n            currentDomain.GetData(&quot;LOADER_OPTIMIZATION&quot;));\n    }\n}\n\n/* This code example produces the following output:\n\nADVALUE is: Example value\nSystem value for loader optimization: NotSpecified\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_SetData_System_String_System_Object_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_AppDomain_SetData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetData(String,Object,IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>Assigns the specified value to the specified application domain property, with a specified permission to demand of the caller when the property is retrieved.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetData (string name, object data, System.Security.IPermission permission);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a user-defined application domain property to create or change.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>data</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>permission</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The permission to demand of the caller when the property is retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> specifies a system-defined property string and <code>permission</code> is not <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to insert or modify your own user-defined entries in an internal cache of name/data pairs that describe properties of the application domain. When you insert an entry, you can specify a permission demand to enforce when the entry is retrieved.In addition, you can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply &quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot; as the value of the <code>name</code> argument and a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value that represents the timeout interval as the value of the <code>data</code> argument.  </p>\n<p> You cannot use this method to assign a security demand to a system-defined property string.  </p>\n<p> The cache automatically contains predefined system entries that are inserted when the application domain is created. You cannot insert or modify system entries with this method. A method call that attempts to modify a system entry has no effect; the method does not throw an exception. You can inspect the values of system entries with the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_GetData_\" data-linktype=\"relative-path\">GetData</a> method or the equivalent <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> properties described in the Remarks section for the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_GetData_\" data-linktype=\"relative-path\">GetData</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_SetDynamicBase_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_SetDynamicBase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetDynamicBase(String)</div>        \r\n          </div>\r\n    \r\n            <p>Establishes the specified directory path as the base directory for subdirectories where dynamically generated files are stored and accessed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetDynamicBase (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fully qualified path that is the base directory for subdirectories where dynamic assemblies are stored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method sets the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DynamicBase_\" data-linktype=\"relative-path\">DynamicBase</a> property of the internal <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> associated with this instance.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This method is now obsolete, and should not be used for new development. The following example shows how to use the non-obsolete alternative, the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DynamicBase_\" data-linktype=\"relative-path\">DynamicBase</a> property. For an explanation of this example, see the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DynamicBase_\" data-linktype=\"relative-path\">DynamicBase</a> property or the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DynamicDirectory_\" data-linktype=\"relative-path\">DynamicDirectory</a> property.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADDynamicBase#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\npublic ref class Example : MarshalByRefObject\n{\npublic:\n   void Test()\n   {\n      Assembly^ dynAssem = Assembly::Load(\n         &quot;DynamicHelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;);\n\n      Type^ myType = dynAssem-&gt;GetType(&quot;HelloWorld&quot;);\n      myType-&gt;InvokeMember(&quot;HelloFromAD&quot;, BindingFlags::Public | \n         BindingFlags::Static | BindingFlags::InvokeMethod, \n         Type::DefaultBinder, nullptr, nullptr);\n   }\n};\n\n\nstatic void GenerateDynamicAssembly(String^ location)\n{\n   // Define the dynamic assembly and the module. There is only one\n   // module in this assembly. Note that the call to DefineDynamicAssembly \n   // specifies the location where the assembly will be saved. The \n   // assembly version is 1.0.0.0.\n   //\n   AssemblyName^ asmName = gcnew AssemblyName(&quot;DynamicHelloWorld&quot;);\n   asmName-&gt;Version = gcnew Version(&quot;1.0.0.0&quot;);\n\n   AssemblyBuilder^ ab = \n      AppDomain::CurrentDomain-&gt;DefineDynamicAssembly( \n         asmName, AssemblyBuilderAccess::Save, location);\n\n   String^ moduleName = asmName-&gt;Name + &quot;.exe&quot;;\n   ModuleBuilder^ mb = ab-&gt;DefineDynamicModule(asmName-&gt;Name, moduleName);\n   \n   // Define the &quot;HelloWorld&quot; type, with one static method.\n   TypeBuilder^ tb = mb-&gt;DefineType(&quot;HelloWorld&quot;, TypeAttributes::Public);\n   MethodBuilder^ hello = tb-&gt;DefineMethod(&quot;HelloFromAD&quot;, \n      MethodAttributes::Public | MethodAttributes::Static, nullptr, nullptr);\n\n   // The method displays a message that contains the name of the application\n   // domain where the method is executed.\n   ILGenerator^ il = hello-&gt;GetILGenerator();\n   il-&gt;Emit(OpCodes::Ldstr, &quot;Hello from &#39;{0}&#39;!&quot;);\n   il-&gt;Emit(OpCodes::Call, AppDomain::typeid-&gt;GetProperty(&quot;CurrentDomain&quot;)-&gt;GetGetMethod());\n   il-&gt;Emit(OpCodes::Call, AppDomain::typeid-&gt;GetProperty(&quot;FriendlyName&quot;)-&gt;GetGetMethod());\n   il-&gt;Emit(OpCodes::Call, Console::typeid-&gt;GetMethod(&quot;WriteLine&quot;, \n                            gcnew array&lt;Type^&gt; { String::typeid, String::typeid }));\n   il-&gt;Emit(OpCodes::Ret);\n\n   // Complete the HelloWorld type and save the assembly. The assembly\n   // is placed in the location specified by DefineDynamicAssembly.\n   Type^ myType = tb-&gt;CreateType();\n   ab-&gt;Save(moduleName);\n};\n\nvoid main()\n{\n   // Prepare to create a new application domain.\n   AppDomainSetup^ setup = gcnew AppDomainSetup();\n\n   // Set the application name before setting the dynamic base.\n   setup-&gt;ApplicationName = &quot;Example&quot;;\n   \n   // Set the location of the base directory where assembly resolution \n   // probes for dynamic assemblies. Note that the hash code of the \n   // application name is concatenated to the base directory name you \n   // supply. \n   setup-&gt;DynamicBase = &quot;C:\\\\DynamicAssemblyDir&quot;;\n   Console::WriteLine(&quot;DynamicBase is set to &#39;{0}&#39;.&quot;, setup-&gt;DynamicBase);\n\n   AppDomain^ ad = AppDomain::CreateDomain(&quot;MyDomain&quot;, nullptr, setup);\n   \n   // The dynamic directory name is the dynamic base concatenated with\n   // the application name: &lt;DynamicBase&gt;\\&lt;hash code&gt;\\&lt;ApplicationName&gt;\n   String^ dynamicDir = ad-&gt;DynamicDirectory;\n   Console::WriteLine(&quot;Dynamic directory is &#39;{0}&#39;.&quot;, dynamicDir);\n\n   // The AssemblyBuilder won&#39;t create this directory automatically.\n   if (!System::IO::Directory::Exists(dynamicDir))\n   {\n      Console::WriteLine(&quot;Creating the dynamic directory.&quot;);\n      System::IO::Directory::CreateDirectory(dynamicDir);\n   }\n\n   // Generate a dynamic assembly and store it in the dynamic \n   // directory.\n   GenerateDynamicAssembly(dynamicDir);\n\n   // Create an instance of the Example class in the application domain,\n   // and call its Test method to load the dynamic assembly and use it.\n   Example^ ex = (Example^) ad-&gt;CreateInstanceAndUnwrap( \n         Example::typeid-&gt;Assembly-&gt;FullName, &quot;Example&quot;);\n   ex-&gt;Test();\n}\n\n/* This example produces output similar to the following:\n\nDynamicBase is set to &#39;C:\\DynamicAssemblyDir\\5e4a7545&#39;.\nDynamic directory is &#39;C:\\DynamicAssemblyDir\\5e4a7545\\Example&#39;.\nCreating the dynamic directory.\nHello from &#39;MyDomain&#39;!\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ADDynamicBase#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\npublic class Example : MarshalByRefObject\n{\n   static void Main()\n   {\n      // Prepare to create a new application domain.\n      AppDomainSetup setup = new AppDomainSetup();\n   \n      // Set the application name before setting the dynamic base.\n      setup.ApplicationName = &quot;Example&quot;;\n   \n      // Set the location of the base directory where assembly resolution \n      // probes for dynamic assemblies. Note that the hash code of the \n      // application name is concatenated to the base directory name you \n      // supply. \n      setup.DynamicBase = &quot;C:\\\\DynamicAssemblyDir&quot;;\n      Console.WriteLine(&quot;DynamicBase is set to &#39;{0}&#39;.&quot;, setup.DynamicBase);\n\n      AppDomain ad = AppDomain.CreateDomain(&quot;MyDomain&quot;, null, setup);\n   \n      // The dynamic directory name is the dynamic base concatenated with\n      // the application name: &lt;DynamicBase&gt;\\&lt;hash code&gt;\\&lt;ApplicationName&gt;\n      string dynamicDir = ad.DynamicDirectory;\n      Console.WriteLine(&quot;Dynamic directory is &#39;{0}&#39;.&quot;, dynamicDir);\n\n      // The AssemblyBuilder won&#39;t create this directory automatically.\n      if (!System.IO.Directory.Exists(dynamicDir))\n      {\n         Console.WriteLine(&quot;Creating the dynamic directory.&quot;);\n         System.IO.Directory.CreateDirectory(dynamicDir);\n      }\n\n      // Generate a dynamic assembly and store it in the dynamic \n      // directory.\n      GenerateDynamicAssembly(dynamicDir);\n\n      // Create an instance of the Example class in the application domain,\n      // and call its Test method to load the dynamic assembly and use it.\n      Example ex = (Example) ad.CreateInstanceAndUnwrap(\n         typeof(Example).Assembly.FullName, &quot;Example&quot;);\n      ex.Test();\n   }\n\n   public void Test()\n   {\n      Assembly dynAssem = Assembly.Load(\n         &quot;DynamicHelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;);\n\n      Type myType = dynAssem.GetType(&quot;HelloWorld&quot;);\n      myType.InvokeMember(&quot;HelloFromAD&quot;, BindingFlags.Public | \n         BindingFlags.Static | BindingFlags.InvokeMethod, \n         Type.DefaultBinder, null, null);\n   }\n\n\n   private static void GenerateDynamicAssembly(string location)\n   {\n      // Define the dynamic assembly and the module. There is only one\n      // module in this assembly. Note that the call to DefineDynamicAssembly \n      // specifies the location where the assembly will be saved. The \n      // assembly version is 1.0.0.0.\n      //\n      AssemblyName asmName = new AssemblyName(&quot;DynamicHelloWorld&quot;);\n      asmName.Version = new Version(&quot;1.0.0.0&quot;);\n\n      AssemblyBuilder ab = \n         AppDomain.CurrentDomain.DefineDynamicAssembly( \n            asmName, AssemblyBuilderAccess.Save, location);\n\n      String moduleName = asmName.Name + &quot;.exe&quot;;\n      ModuleBuilder mb = ab.DefineDynamicModule(asmName.Name, moduleName);\n      \n      // Define the &quot;HelloWorld&quot; type, with one static method.\n      TypeBuilder tb = mb.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public);\n      MethodBuilder hello = tb.DefineMethod(&quot;HelloFromAD&quot;, \n         MethodAttributes.Public | MethodAttributes.Static, null, null);\n\n      // The method displays a message that contains the name of the application\n      // domain where the method is executed.\n      ILGenerator il = hello.GetILGenerator();\n      il.Emit(OpCodes.Ldstr, &quot;Hello from &#39;{0}&#39;!&quot;);\n      il.Emit(OpCodes.Call, typeof(AppDomain).GetProperty(&quot;CurrentDomain&quot;).GetGetMethod());\n      il.Emit(OpCodes.Call, typeof(AppDomain).GetProperty(&quot;FriendlyName&quot;).GetGetMethod());\n      il.Emit(OpCodes.Call, typeof(Console).GetMethod(&quot;WriteLine&quot;, \n                             new Type[] { typeof(String), typeof(String) }));\n      il.Emit(OpCodes.Ret);\n\n      // Complete the HelloWorld type and save the assembly. The assembly\n      // is placed in the location specified by DefineDynamicAssembly.\n      Type myType = tb.CreateType();\n      ab.Save(moduleName);\n   }\n}\n\n/* This example produces output similar to the following:\n\nDynamicBase is set to &#39;C:\\DynamicAssemblyDir\\5e4a7545&#39;.\nDynamic directory is &#39;C:\\DynamicAssemblyDir\\5e4a7545\\Example&#39;.\nCreating the dynamic directory.\nHello from &#39;MyDomain&#39;!\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ADDynamicBase#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nPublic Class Example \n   Inherits MarshalByRefObject\n   \n   Shared Sub Main(args() As String)\n\n      &#39; Prepare to create a new application domain.\n      Dim setup As New AppDomainSetup()\n\n      &#39; Set the application name before setting the dynamic base.\n      setup.ApplicationName = &quot;Example&quot;\n      \n      &#39; Set the location of the base directory where assembly resolution \n      &#39; probes for dynamic assemblies. Note that the hash code of the \n      &#39; application name is concatenated to the base directory name you \n      &#39; supply. \n      setup.DynamicBase = &quot;C:\\DynamicAssemblyDir&quot;\n      Console.WriteLine(&quot;DynamicBase is set to &#39;{0}&#39;.&quot;, setup.DynamicBase)\n\n      Dim ad As AppDomain = AppDomain.CreateDomain(&quot;MyDomain&quot;, Nothing, setup)\n      \n      &#39; The dynamic directory name is the dynamic base concatenated with\n      &#39; the application name: &lt;DynamicBase&gt;\\&lt;hash code&gt;\\&lt;ApplicationName&gt;\n      Dim dynamicDir As String = ad.DynamicDirectory \n      Console.WriteLine(&quot;Dynamic directory is &#39;{0}&#39;.&quot;, dynamicDir)\n\n      &#39; The AssemblyBuilder won&#39;t create this directory automatically.\n      If Not System.IO.Directory.Exists(dynamicDir) Then \n         Console.WriteLine(&quot;Creating the dynamic directory.&quot;)\n         System.IO.Directory.CreateDirectory(dynamicDir)\n      End If\n\n      &#39; Generate a dynamic assembly and store it in the dynamic \n      &#39; directory.\n      GenerateDynamicAssembly(dynamicDir) \n\n      &#39; Create an instance of the Example class in the application domain,\n      &#39; and call its Test method to load the dynamic assembly and use it.  \n      Dim ex As Example = CType( _\n         ad.CreateInstanceAndUnwrap( _\n            GetType(Example).Assembly.FullName, &quot;Example&quot;), Example)\n      ex.Test()\n   End Sub\n\n   Public Sub Test() \n\n      Dim dynAssem As [Assembly] = Assembly.Load(\n         &quot;DynamicHelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;)\n\n      Dim myType As Type = dynAssem.GetType(&quot;HelloWorld&quot;)\n      myType.InvokeMember(&quot;HelloFromAD&quot;, BindingFlags.Public Or _\n         BindingFlags.Static Or BindingFlags.InvokeMethod, _\n         Type.DefaultBinder, Nothing, Nothing) &#39;New Object() {})\n   End Sub\n\n\n   Private Shared Sub GenerateDynamicAssembly(ByVal location As String)\n      \n      &#39; Define the dynamic assembly and the module. There is only one\n      &#39; module in this assembly. Note that the call to DefineDynamicAssembly \n      &#39; specifies the location where the assembly will be saved. The \n      &#39; assembly version is 1.0.0.0.\n      &#39;\n      Dim asmName As New AssemblyName(&quot;DynamicHelloWorld&quot;)\n      asmName.Version = New Version(&quot;1.0.0.0&quot;)\n\n      Dim ab As AssemblyBuilder = _\n         AppDomain.CurrentDomain.DefineDynamicAssembly( _\n            asmName, AssemblyBuilderAccess.Save, location)\n\n      Dim moduleName As String = asmName.Name &amp; &quot;.dll&quot;\n      Dim mb As ModuleBuilder = ab.DefineDynamicModule(asmName.Name, moduleName)\n      \n      &#39; Define the &quot;HelloWorld&quot; type, with one static method.\n      Dim tb As TypeBuilder = mb.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public)\n      Dim hello As MethodBuilder = tb.DefineMethod(&quot;HelloFromAD&quot;, _\n         MethodAttributes.Public Or MethodAttributes.Static, Nothing, Nothing)\n\n      &#39; The method displays a message that contains the name of the application\n      &#39; domain where the method is executed.\n      Dim il As ILGenerator = hello.GetILGenerator()\n      il.Emit(OpCodes.Ldstr, &quot;Hello from &#39;{0}&#39;!&quot;)\n      il.Emit(OpCodes.Call, GetType(AppDomain).GetProperty(&quot;CurrentDomain&quot;).GetGetMethod())\n      il.Emit(OpCodes.Call, GetType(AppDomain).GetProperty(&quot;FriendlyName&quot;).GetGetMethod())\n      il.Emit(OpCodes.Call, GetType(Console).GetMethod(&quot;WriteLine&quot;, _\n                             New Type() { GetType(String), GetType(String) }))\n      il.Emit(OpCodes.Ret)\n\n      &#39; Complete the HelloWorld type and save the assembly. The assembly\n      &#39; is placed in the location specified by DefineDynamicAssembly.\n      Dim myType As Type = tb.CreateType()\n      ab.Save(moduleName)\n   End Sub\nEnd Class \n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;DynamicBase is set to &#39;C:\\DynamicAssemblyDir\\5e4a7545&#39;.\n&#39;Dynamic directory is &#39;C:\\DynamicAssemblyDir\\5e4a7545\\Example&#39;.\n&#39;Creating the dynamic directory.\n&#39;Hello from &#39;MyDomain&#39;!\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_SetPrincipalPolicy_System_Security_Principal_PrincipalPolicy_\">\r\n    \r\n            <a id=\"System_AppDomain_SetPrincipalPolicy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetPrincipalPolicy(PrincipalPolicy)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies how principal and identity objects should be attached to a thread if the thread attempts to bind to a principal while executing in this application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetPrincipalPolicy (System.Security.Principal.PrincipalPolicy policy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>policy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.principalpolicy\" data-linktype=\"relative-path\">PrincipalPolicy</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.principalpolicy\" data-linktype=\"relative-path\">PrincipalPolicy</a> values that specifies the type of the principal object to attach to threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting this value will only be effective if you set it before using the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentPrincipal_\" data-linktype=\"relative-path\">CurrentPrincipal</a> property. For example, if you set <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentPrincipal_\" data-linktype=\"relative-path\">CurrentPrincipal</a> to a given principal (for example, a generic principal) and then use the SetPrincipalPolicy method to set the <a class=\"xref\" href=\"system.security.principal.principalpolicy\" data-linktype=\"relative-path\">PrincipalPolicy</a> to <a class=\"xref\" href=\"system.security.principal.principalpolicy\" data-linktype=\"relative-path\">PrincipalPolicy</a>, the current principal will remain the generic principal.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the effect on threads of using the SetPrincipalPolicy method to change the principal policy of the application domain. It also shows the effect of using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_SetThreadPrincipal_\" data-linktype=\"relative-path\">SetThreadPrincipal</a> method to change the principal that is available for attaching to threads in the application domain.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADPrincipal#1\">using namespace System;\nusing namespace System::Security::Principal;\nusing namespace System::Threading;\nref class ADPrincipal\n{\npublic:\n   static void PrintPrincipalInformation()\n   {\n      IPrincipal^ curPrincipal = Thread::CurrentPrincipal;\n      if ( curPrincipal != nullptr )\n      {\n         Console::WriteLine( &quot;Type: {0}&quot;, curPrincipal-&gt;GetType()-&gt;Name );\n         Console::WriteLine( &quot;Name: {0}&quot;, curPrincipal-&gt;Identity-&gt;Name );\n         Console::WriteLine( &quot;Authenticated: {0}&quot;, curPrincipal-&gt;Identity-&gt;IsAuthenticated );\n         Console::WriteLine();\n      }\n   }\n\n};\n\nint main()\n{\n   \n   // Create a new thread with a generic principal.\n   Thread^ t = gcnew Thread( gcnew ThreadStart( ADPrincipal::PrintPrincipalInformation ) );\n   t-&gt;Start();\n   t-&gt;Join();\n   \n   // Set the principal policy to WindowsPrincipal.\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   currentDomain-&gt;SetPrincipalPolicy( PrincipalPolicy::WindowsPrincipal );\n   \n   // The new thread will have a Windows principal representing the\n   // current user.\n   t = gcnew Thread( gcnew ThreadStart( ADPrincipal::PrintPrincipalInformation ) );\n   t-&gt;Start();\n   t-&gt;Join();\n   \n   // Create a principal to use for new threads.\n   IIdentity^ identity = gcnew GenericIdentity( &quot;NewUser&quot; );\n   IPrincipal^ principal = gcnew GenericPrincipal( identity,nullptr );\n   currentDomain-&gt;SetThreadPrincipal( principal );\n   \n   // Create a new thread with the principal created above.\n   t = gcnew Thread( gcnew ThreadStart( ADPrincipal::PrintPrincipalInformation ) );\n   t-&gt;Start();\n   t-&gt;Join();\n   \n   // Wait for user input before terminating.\n   Console::ReadLine();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ADPrincipal#1\">Imports System\nImports System.Security.Principal\nImports System.Threading\n\nClass ADPrincipal\n    Overloads Shared Sub Main(ByVal args() As String)\n        &#39; Create a new thread with a generic principal.\n        Dim t As New Thread(New ThreadStart(AddressOf PrintPrincipalInformation))\n        t.Start()\n        t.Join()\n\n        &#39; Set the principal policy to WindowsPrincipal.\n        Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n        currentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal)\n\n        &#39; The new thread will have a Windows principal representing the\n        &#39; current user.\n        t = New Thread(New ThreadStart(AddressOf PrintPrincipalInformation))\n        t.Start()\n        t.Join()\n\n        &#39; Create a principal to use for new threads.\n        Dim identity = New GenericIdentity(&quot;NewUser&quot;)\n        Dim principal = New GenericPrincipal(identity, Nothing)\n        currentDomain.SetThreadPrincipal(principal)\n\n        &#39; Create a new thread with the principal created above.\n        t = New Thread(New ThreadStart(AddressOf PrintPrincipalInformation))\n        t.Start()\n        t.Join()\n\n        &#39; Wait for user input before terminating.\n        Console.ReadLine()\n    End Sub &#39;Main\n\n\n    Shared Sub PrintPrincipalInformation()\n        Dim curPrincipal As IPrincipal = Thread.CurrentPrincipal\n        If Not (curPrincipal Is Nothing) Then\n            Console.WriteLine(&quot;Type: &quot; &amp; CType(curPrincipal, Object).GetType().Name)\n            Console.WriteLine(&quot;Name: &quot; &amp; curPrincipal.Identity.Name)\n            Console.WriteLine(&quot;Authenticated: &quot; &amp; curPrincipal.Identity.IsAuthenticated)\n            Console.WriteLine()\n\n        End If\n    End Sub &#39;PrintPrincipalInformation\nEnd Class &#39;ADPrincipal \n</code></pre><pre><code class=\"lang-cs\" name=\"ADPrincipal#1\">using System;\nusing System.Security.Principal;\nusing System.Threading;\n\nclass ADPrincipal\n{\n\tstatic void Main(string[] args)\n\t{\n\t\t// Create a new thread with a generic principal.\n\t\tThread t = new Thread(new ThreadStart(PrintPrincipalInformation));\n\t\tt.Start();\n\t\tt.Join();\n\n\t\t// Set the principal policy to WindowsPrincipal.\n\t\tAppDomain currentDomain = AppDomain.CurrentDomain;\n\t\tcurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);\n\t\t\t\n\t\t// The new thread will have a Windows principal representing the\n\t\t// current user.\n\t\tt = new Thread(new ThreadStart(PrintPrincipalInformation));\n\t\tt.Start();\n\t\tt.Join();\n\n\t\t// Create a principal to use for new threads.\n\t\tIIdentity identity = new GenericIdentity(&quot;NewUser&quot;);\n\t\tIPrincipal principal = new GenericPrincipal(identity, null);\n\t\tcurrentDomain.SetThreadPrincipal(principal);\n\t\t\t\n\t\t// Create a new thread with the principal created above.\n\t\tt = new Thread(new ThreadStart(PrintPrincipalInformation));\n\t\tt.Start();\n\t\tt.Join();\n\t\t\n\t\t// Wait for user input before terminating.\n\t\tConsole.ReadLine();\n\t}\n\n\tstatic void PrintPrincipalInformation()\n\t{\n\t\tIPrincipal curPrincipal = Thread.CurrentPrincipal;\n\t\tif(curPrincipal != null)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Type: &quot; + curPrincipal.GetType().Name);\n\t\t\tConsole.WriteLine(&quot;Name: &quot; + curPrincipal.Identity.Name);\n\t\t\tConsole.WriteLine(&quot;Authenticated: &quot; +\n\t\t\t\tcurPrincipal.Identity.IsAuthenticated);\n\t\t\tConsole.WriteLine();\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_SetShadowCopyFiles\">\r\n    \r\n            <a id=\"System_AppDomain_SetShadowCopyFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetShadowCopyFiles()</div>        \r\n          </div>\r\n    \r\n            <p>Turns on shadow copying.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetShadowCopyFiles ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information on shadow copying, see <a href=\"../Topic/Shadow%20Copying%20Assemblies.md\" data-linktype=\"relative-path\">Shadow Copying Assemblies</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This method is now obsolete, and should not be used for new development.  </p>\n<pre><code class=\"lang-cpp\" name=\"adproperties#1\">using namespace System;\nusing namespace System::Security::Policy;\n\n//for evidence object\nint main()\n{\n   AppDomainSetup^ setup = gcnew AppDomainSetup;\n   \n   // Shadow copying will not work unless the application has a name.\n   setup-&gt;ApplicationName = &quot;MyApplication&quot;;\n   \n   //Create evidence for the new application domain from evidence of\n   // current application domain.\n   Evidence^ adevidence = AppDomain::CurrentDomain-&gt;Evidence;\n   \n   // Create a new application domain.\n   AppDomain^ domain = AppDomain::CreateDomain( &quot;MyDomain&quot;, adevidence, setup );\n   \n   // MyAssembly.dll is located in the Assemblies subdirectory.\n   domain-&gt;AppendPrivatePath( &quot;Assemblies&quot; );\n   \n   // MyOtherAssembly.dll and MyThirdAssembly.dll are located in the\n   // MoreAssemblies subdirectory.\n   domain-&gt;AppendPrivatePath( &quot;MoreAssemblies&quot; );\n   \n   // Display the relative search path.\n   Console::WriteLine( &quot;RelativeSearchPath: {0}&quot;, domain-&gt;RelativeSearchPath );\n   \n   // Because Load returns an Assembly object, the assemblies must be\n   // loaded into the current domain as well. This will fail unless the\n   // current domain also has these directories in its search path.\n   AppDomain::CurrentDomain-&gt;AppendPrivatePath( &quot;Assemblies&quot; );\n   AppDomain::CurrentDomain-&gt;AppendPrivatePath( &quot;MoreAssemblies&quot; );\n   \n   // Save shadow copies to C:\\Cache\n   domain-&gt;SetCachePath( &quot;C:\\\\Cache&quot; );\n   \n   // Shadow copy only the assemblies in the Assemblies directory.\n   domain-&gt;SetShadowCopyPath( String::Concat( domain-&gt;BaseDirectory, &quot;Assemblies&quot; ) );\n   \n   // Turn shadow copying on.\n   domain-&gt;SetShadowCopyFiles();\n   Console::WriteLine( &quot;ShadowCopyFiles turned on: {0}&quot;, domain-&gt;ShadowCopyFiles );\n   \n   // This will be copied.\n   // You must supply a valid fully qualified assembly name here. \n   domain-&gt;Load( &quot;Assembly1 text name, Version, Culture, PublicKeyToken&quot; );\n   \n   // This will not be copied.\n   // You must supply a valid fully qualified assembly name here. \n   domain-&gt;Load( &quot;Assembly2 text name, Version, Culture, PublicKeyToken&quot; );\n   \n   // When the shadow copy path is cleared, the CLR will make shadow copies\n   // of all private assemblies.\n   domain-&gt;ClearShadowCopyPath();\n   \n   // MoreAssemblies\\MyThirdAssembly.dll should be shadow copied this time.\n   // You must supply a valid fully qualified assembly name here.\n   domain-&gt;Load( &quot;Assembly3 text name, Version, Culture, PublicKeyToken&quot; );\n   \n   // Unload the domain.\n   AppDomain::Unload( domain );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"adproperties#1\">Imports System\nImports System.Security.Policy\n &#39;for evidence object\n\nClass ADProperties\n    \n    Shared Sub Main(args() As String)\n        \n        Dim setup As New AppDomainSetup()\n        &#39; Shadow copying will not work unless the application has a name.\n        setup.ApplicationName = &quot;MyApplication&quot;\n        \n        &#39;Create evidence for the new application domain from evidence of\n        &#39; current application domain.\n        Dim adevidence As Evidence = AppDomain.CurrentDomain.Evidence\n        \n        &#39; Create a new application domain.\n        Dim domain As AppDomain = AppDomain.CreateDomain(&quot;MyDomain&quot;, adevidence, setup)\n        \n        &#39; MyAssembly.dll is located in the Assemblies subdirectory.\n        domain.AppendPrivatePath(&quot;Assemblies&quot;)\n        &#39; MyOtherAssembly.dll and MyThirdAssembly.dll are located in the\n        &#39; MoreAssemblies subdirectory.\n        domain.AppendPrivatePath(&quot;MoreAssemblies&quot;)\n        &#39; Display the relative search path.\n        Console.WriteLine(&quot;RelativeSearchPath: &quot; &amp; domain.RelativeSearchPath)\n        &#39; Because Load returns an Assembly object, the assemblies must be\n        &#39; loaded into the current domain as well. This will fail unless the\n        &#39; current domain also has these directories in its search path.\n        AppDomain.CurrentDomain.AppendPrivatePath(&quot;Assemblies&quot;)\n        AppDomain.CurrentDomain.AppendPrivatePath(&quot;MoreAssemblies&quot;)\n        \n        &#39; Save shadow copies to C:\\Cache\n        domain.SetCachePath(&quot;C:\\Cache&quot;)\n        &#39; Shadow copy only the assemblies in the Assemblies directory.\n        domain.SetShadowCopyPath(domain.BaseDirectory + &quot;Assemblies&quot;)\n        &#39; Turn shadow copying on.\n        domain.SetShadowCopyFiles()\n        Console.WriteLine(&quot;ShadowCopyFiles turned on: &quot; &amp; domain.ShadowCopyFiles)\n        \n        &#39; This will be copied.\n        &#39; You must supply a valid fully qualified assembly name here. \n        domain.Load(&quot;Assembly1 text name, Version, Culture, PublicKeyToken&quot;)\n        &#39; This will not be copied.\n        &#39; You must supply a valid fully qualified assembly name here. \n        domain.Load(&quot;Assembly2 text name, Version, Culture, PublicKeyToken&quot;)\n        \n        &#39; When the shadow copy path is cleared, the CLR will make shadow copies\n        &#39; of all private assemblies.\n        domain.ClearShadowCopyPath()\n        &#39; MoreAssemblies\\MyThirdAssembly.dll should be shadow copied this time.\n        &#39; You must supply a valid fully qualified assembly name here.\n        domain.Load(&quot;Assembly3 text name, Version, Culture, PublicKeyToken&quot;)\n        \n        &#39; Unload the domain.\n        AppDomain.Unload(domain)\n    End Sub &#39;Main\nEnd Class &#39;ADProperties\n</code></pre><pre><code class=\"lang-cs\" name=\"adproperties#1\">using System;\nusing System.Security.Policy;  //for evidence object\nnamespace AppDomainSnippets\n{\n\tclass ADProperties\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\n\t\t\tAppDomainSetup setup = new AppDomainSetup();\n\t\t\t// Shadow copying will not work unless the application has a name.\n\t\t\tsetup.ApplicationName = &quot;MyApplication&quot;;\n\n\t\t\t//Create evidence for the new application domain from evidence of\n\t\t\t// current application domain.\n\t\t\tEvidence adevidence = AppDomain.CurrentDomain.Evidence;\n\t\t\t\n\t\t\t// Create a new application domain.\n\t\t\tAppDomain domain = AppDomain.CreateDomain(&quot;MyDomain&quot;, adevidence, setup);\n\t\t\t\n\t\t\t// MyAssembly.dll is located in the Assemblies subdirectory.\n\t\t\tdomain.AppendPrivatePath(&quot;Assemblies&quot;);\n\t\t\t// MyOtherAssembly.dll and MyThirdAssembly.dll are located in the\n\t\t\t// MoreAssemblies subdirectory.\n\t\t\tdomain.AppendPrivatePath(&quot;MoreAssemblies&quot;);\n\t\t\t// Display the relative search path.\n\t\t\tConsole.WriteLine(&quot;RelativeSearchPath: &quot; + domain.RelativeSearchPath);\n\t\t\t// Because Load returns an Assembly object, the assemblies must be\n\t\t\t// loaded into the current domain as well. This will fail unless the\n\t\t\t// current domain also has these directories in its search path.\n\t\t\tAppDomain.CurrentDomain.AppendPrivatePath(&quot;Assemblies&quot;);\n\t\t\tAppDomain.CurrentDomain.AppendPrivatePath(&quot;MoreAssemblies&quot;);\n\t\t\t\n\t\t\t// Save shadow copies to C:\\Cache\n\t\t\tdomain.SetCachePath(&quot;C:\\\\Cache&quot;);\n\t\t\t// Shadow copy only the assemblies in the Assemblies directory.\n\t\t\tdomain.SetShadowCopyPath(domain.BaseDirectory + &quot;Assemblies&quot;);\n\t\t\t// Turn shadow copying on.\n\t\t\tdomain.SetShadowCopyFiles();\n\t\t\tConsole.WriteLine(&quot;ShadowCopyFiles turned on: &quot; + domain.ShadowCopyFiles);\n\n\t\t\t// This will be copied.\n\t\t\t// You must supply a valid fully qualified assembly name here. \n\t\t\tdomain.Load(&quot;Assembly1 text name, Version, Culture, PublicKeyToken&quot;);\n\t\t\t// This will not be copied.\n\t\t\t// You must supply a valid fully qualified assembly name here. \n\t\t\tdomain.Load(&quot;Assembly2 text name, Version, Culture, PublicKeyToken&quot;);\n\t\t\t\n\t\t\t// When the shadow copy path is cleared, the CLR will make shadow copies\n\t\t\t// of all private assemblies.\n\t\t\tdomain.ClearShadowCopyPath();\n\t\t\t// MoreAssemblies\\MyThirdAssembly.dll should be shadow copied this time.\n\t\t\t// You must supply a valid fully qualified assembly name here.\n\t\t\tdomain.Load(&quot;Assembly3 text name, Version, Culture, PublicKeyToken&quot;);\n\t\t\t\n\t\t\t// Unload the domain.\n\t\t\tAppDomain.Unload(domain);\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_SetShadowCopyPath_System_String_\">\r\n    \r\n            <a id=\"System_AppDomain_SetShadowCopyPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetShadowCopyPath(String)</div>        \r\n          </div>\r\n    \r\n            <p>Establishes the specified directory path as the location of assemblies to be shadow copied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetShadowCopyPath (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A list of directory names, where each name is separated by a semicolon.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, a shadow copy includes all assemblies found through probing. The SetShadowCopyPath method restricts the shadow copy to the assemblies in the directories specified by <code>path</code>.  </p>\n<p> The SetShadowCopyPath method does not specify additional directories to be searched for assemblies. Assemblies to be shadow-copied must already be located in the search path, for example under <a class=\"xref\" href=\"system.appdomain#System_AppDomain_BaseDirectory_\" data-linktype=\"relative-path\">BaseDirectory</a>. The SetShadowCopyPath method specifies which search paths are eligible to be shadow-copied.  </p>\n<p> This method sets the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ShadowCopyDirectories_\" data-linktype=\"relative-path\">ShadowCopyDirectories</a> property of the internal <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> associated with this instance.  </p>\n<p> For more information on shadow copying, see <a href=\"../Topic/Shadow%20Copying%20Assemblies.md\" data-linktype=\"relative-path\">Shadow Copying Assemblies</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This method is now obsolete, and should not be used for new development.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADShadowCopy#1\">using namespace System;\nusing namespace System::Security::Policy;\n\n//for evidence Object*\nint main()\n{\n   AppDomainSetup^ setup = gcnew AppDomainSetup;\n   \n   // Shadow copying will not work unless the application has a name.\n   setup-&gt;ApplicationName = &quot;MyApplication&quot;;\n   \n   //Create evidence for the new application domain from evidence of\n   // current application domain.\n   Evidence^ adevidence = AppDomain::CurrentDomain-&gt;Evidence;\n   \n   // Create a new application domain.\n   AppDomain^ domain = AppDomain::CreateDomain( &quot;MyDomain&quot;, adevidence, setup );\n   \n   // MyAssembly.dll is located in the Assemblies subdirectory.\n   domain-&gt;AppendPrivatePath( &quot;Assemblies&quot; );\n   \n   // MyOtherAssembly.dll and MyThirdAssembly.dll are located in the\n   // MoreAssemblies subdirectory.\n   domain-&gt;AppendPrivatePath( &quot;MoreAssemblies&quot; );\n   \n   // Display the relative search path.\n   Console::WriteLine( &quot;RelativeSearchPath: {0}&quot;, domain-&gt;RelativeSearchPath );\n   \n   // Because Load returns an Assembly Object*, the assemblies must be\n   // loaded into the current domain as well. This will fail unless the\n   // current domain also has these directories in its search path.\n   AppDomain::CurrentDomain-&gt;AppendPrivatePath( &quot;Assemblies&quot; );\n   AppDomain::CurrentDomain-&gt;AppendPrivatePath( &quot;MoreAssemblies&quot; );\n   \n   // Save shadow copies to C:\\Cache\n   domain-&gt;SetCachePath( &quot;C:\\\\Cache&quot; );\n   \n   // Shadow copy only the assemblies in the Assemblies directory.\n   domain-&gt;SetShadowCopyPath( String::Concat( domain-&gt;BaseDirectory, &quot;Assemblies&quot; ) );\n   \n   // Turn shadow copying on.\n   domain-&gt;SetShadowCopyFiles();\n   \n   // This will be copied.\n   // You must supply a valid fully qualified assembly name here.\n   domain-&gt;Load( &quot;Assembly1 text name, Version, Culture, PublicKeyToken&quot; );\n   \n   // This will not be copied.\n   // You must supply a valid fully qualified assembly name here.\n   domain-&gt;Load( &quot;Assembly2 text name, Version, Culture, PublicKeyToken&quot; );\n   \n   // When the shadow copy path is cleared, the CLR will make shadow copies\n   // of all private assemblies.\n   domain-&gt;ClearShadowCopyPath();\n   \n   // MoreAssemblies\\MyThirdAssembly.dll should be shadow copied this time.\n   // You must supply a valid fully qualified assembly name here.\n   domain-&gt;Load( &quot;Assembly3 text name, Version, Culture, PublicKeyToken&quot; );\n   \n   // Unload the domain.\n   AppDomain::Unload( domain );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ADShadowCopy#1\">Imports System\nImports System.Security.Policy\n &#39;for evidence object\n\nClass ADShadowCopy\n   \n   &#39;Entry point which delegates to C-style main Private Function\n   &#39; Public Overloads Shared Sub Main()\n    &#39;  Main(System.Environment.GetCommandLineArgs())\n   &#39; End Sub\n   \n   Public Overloads Shared Sub Main(args() As String)\n      \n      Dim setup As New AppDomainSetup()\n      &#39; Shadow copying will not work unless the application has a name.\n      setup.ApplicationName = &quot;MyApplication&quot;\n      \n      &#39;Create evidence for the new application domain from evidence of\n      &#39; current application domain.\n      Dim adevidence As Evidence = AppDomain.CurrentDomain.Evidence\n      \n      &#39; Create a new application domain.\n      Dim domain As AppDomain = AppDomain.CreateDomain(&quot;MyDomain&quot;, adevidence, setup)\n      \n      &#39; MyAssembly.dll is located in the Assemblies subdirectory.\n      domain.AppendPrivatePath(&quot;Assemblies&quot;)\n      &#39; MyOtherAssembly.dll and MyThirdAssembly.dll are located in the\n      &#39; MoreAssemblies subdirectory.\n      domain.AppendPrivatePath(&quot;MoreAssemblies&quot;)\n      &#39; Display the relative search path.\n      Console.WriteLine((&quot;RelativeSearchPath: &quot; + domain.RelativeSearchPath))\n      &#39; Because Load returns an Assembly object, the assemblies must be\n      &#39; loaded into the current domain as well. This will fail unless the\n      &#39; current domain also has these directories in its search path.\n      AppDomain.CurrentDomain.AppendPrivatePath(&quot;Assemblies&quot;)\n      AppDomain.CurrentDomain.AppendPrivatePath(&quot;MoreAssemblies&quot;)\n      \n      &#39; Save shadow copies to C:\\Cache\n      domain.SetCachePath(&quot;C:\\Cache&quot;)\n      &#39; Shadow copy only the assemblies in the Assemblies directory.\n      domain.SetShadowCopyPath((domain.BaseDirectory + &quot;Assemblies&quot;))\n      &#39; Turn shadow copying on.\n      domain.SetShadowCopyFiles()\n      \n      &#39; This will be copied.\n      &#39; You must supply a valid fully qualified assembly name here. \n      domain.Load(&quot;Assembly1 text name, Version, Culture, PublicKeyToken&quot;)\n      &#39; This will not be copied.\n      &#39; You must supply a valid fully qualified assembly name here. \n      domain.Load(&quot;Assembly2 text name, Version, Culture, PublicKeyToken&quot;)\n      \n      &#39; When the shadow copy path is cleared, the CLR will make shadow copies\n      &#39; of all private assemblies.\n      domain.ClearShadowCopyPath()\n      &#39; MoreAssemblies\\MyThirdAssembly.dll should be shadow copied this time.\n      &#39; You must supply a valid fully qualified assembly name here.\n      domain.Load(&quot;Assembly3 text name, Version, Culture, PublicKeyToken&quot;)\n      \n      &#39; Unload the domain.\n      AppDomain.Unload(domain)\n   End Sub &#39;Main\nEnd Class &#39;ADShadowCopy\n</code></pre><pre><code class=\"lang-cs\" name=\"ADShadowCopy#1\">using System;\nusing System.Security.Policy;  //for evidence object\nnamespace AppDomainSnippets\n{\n\tclass ADShadowCopy\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\n\t\t\tAppDomainSetup setup = new AppDomainSetup();\n\t\t\t// Shadow copying will not work unless the application has a name.\n\t\t\tsetup.ApplicationName = &quot;MyApplication&quot;;\n\n\t\t\t//Create evidence for the new application domain from evidence of\n\t\t\t// current application domain.\n\t\t\tEvidence adevidence = AppDomain.CurrentDomain.Evidence;\n\t\t\t\n\t\t\t// Create a new application domain.\n\t\t\tAppDomain domain = AppDomain.CreateDomain(&quot;MyDomain&quot;, adevidence, setup);\n\t\t\t\n\t\t\t// MyAssembly.dll is located in the Assemblies subdirectory.\n\t\t\tdomain.AppendPrivatePath(&quot;Assemblies&quot;);\n\t\t\t// MyOtherAssembly.dll and MyThirdAssembly.dll are located in the\n\t\t\t// MoreAssemblies subdirectory.\n\t\t\tdomain.AppendPrivatePath(&quot;MoreAssemblies&quot;);\n\t\t\t// Display the relative search path.\n\t\t\tConsole.WriteLine(&quot;RelativeSearchPath: &quot; + domain.RelativeSearchPath);\n\t\t\t// Because Load returns an Assembly object, the assemblies must be\n\t\t\t// loaded into the current domain as well. This will fail unless the\n\t\t\t// current domain also has these directories in its search path.\n\t\t\tAppDomain.CurrentDomain.AppendPrivatePath(&quot;Assemblies&quot;);\n\t\t\tAppDomain.CurrentDomain.AppendPrivatePath(&quot;MoreAssemblies&quot;);\n\t\t\t\n\t\t\t// Save shadow copies to C:\\Cache\n\t\t\tdomain.SetCachePath(&quot;C:\\\\Cache&quot;);\n\t\t\t// Shadow copy only the assemblies in the Assemblies directory.\n\t\t\tdomain.SetShadowCopyPath(domain.BaseDirectory + &quot;Assemblies&quot;);\n\t\t\t// Turn shadow copying on.\n\t\t\tdomain.SetShadowCopyFiles();\n\t\t\t\n\t\t\t// This will be copied.\n\t\t\t// You must supply a valid fully qualified assembly name here. \n\t\t\tdomain.Load(&quot;Assembly1 text name, Version, Culture, PublicKeyToken&quot;);\n\t\t\t// This will not be copied.\n\t\t\t// You must supply a valid fully qualified assembly name here. \n\t\t\tdomain.Load(&quot;Assembly2 text name, Version, Culture, PublicKeyToken&quot;);\n\t\t\t\n\t\t\t// When the shadow copy path is cleared, the CLR will make shadow copies\n\t\t\t// of all private assemblies.\n\t\t\tdomain.ClearShadowCopyPath();\n\t\t\t// MoreAssemblies\\MyThirdAssembly.dll should be shadow copied this time.\n\t\t\t// You must supply a valid fully qualified assembly name here.\n\t\t\tdomain.Load(&quot;Assembly3 text name, Version, Culture, PublicKeyToken&quot;);\n\t\t\t\n\t\t\t// Unload the domain.\n\t\t\tAppDomain.Unload(domain);\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_SetThreadPrincipal_System_Security_Principal_IPrincipal_\">\r\n    \r\n            <a id=\"System_AppDomain_SetThreadPrincipal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetThreadPrincipal(IPrincipal)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the default principal object to be attached to threads if they attempt to bind to a principal while executing in this application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetThreadPrincipal (System.Security.Principal.IPrincipal principal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>principal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.iprincipal\" data-linktype=\"relative-path\">IPrincipal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The principal object to attach to threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>principal</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policyexception\" data-linktype=\"relative-path\">PolicyException</a></div>\r\n                  </div>\r\n                  <p>The thread principal has already been set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The operation is attempted on an unloaded application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the effect of using the SetThreadPrincipal method to change the principal that is available for attaching to threads that are executing in the application domain. It also shows the effect on threads of using the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_SetPrincipalPolicy_\" data-linktype=\"relative-path\">SetPrincipalPolicy</a> method to change the principal policy of the application domain.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADPrincipal#1\">using namespace System;\nusing namespace System::Security::Principal;\nusing namespace System::Threading;\nref class ADPrincipal\n{\npublic:\n   static void PrintPrincipalInformation()\n   {\n      IPrincipal^ curPrincipal = Thread::CurrentPrincipal;\n      if ( curPrincipal != nullptr )\n      {\n         Console::WriteLine( &quot;Type: {0}&quot;, curPrincipal-&gt;GetType()-&gt;Name );\n         Console::WriteLine( &quot;Name: {0}&quot;, curPrincipal-&gt;Identity-&gt;Name );\n         Console::WriteLine( &quot;Authenticated: {0}&quot;, curPrincipal-&gt;Identity-&gt;IsAuthenticated );\n         Console::WriteLine();\n      }\n   }\n\n};\n\nint main()\n{\n   \n   // Create a new thread with a generic principal.\n   Thread^ t = gcnew Thread( gcnew ThreadStart( ADPrincipal::PrintPrincipalInformation ) );\n   t-&gt;Start();\n   t-&gt;Join();\n   \n   // Set the principal policy to WindowsPrincipal.\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   currentDomain-&gt;SetPrincipalPolicy( PrincipalPolicy::WindowsPrincipal );\n   \n   // The new thread will have a Windows principal representing the\n   // current user.\n   t = gcnew Thread( gcnew ThreadStart( ADPrincipal::PrintPrincipalInformation ) );\n   t-&gt;Start();\n   t-&gt;Join();\n   \n   // Create a principal to use for new threads.\n   IIdentity^ identity = gcnew GenericIdentity( &quot;NewUser&quot; );\n   IPrincipal^ principal = gcnew GenericPrincipal( identity,nullptr );\n   currentDomain-&gt;SetThreadPrincipal( principal );\n   \n   // Create a new thread with the principal created above.\n   t = gcnew Thread( gcnew ThreadStart( ADPrincipal::PrintPrincipalInformation ) );\n   t-&gt;Start();\n   t-&gt;Join();\n   \n   // Wait for user input before terminating.\n   Console::ReadLine();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ADPrincipal#1\">Imports System\nImports System.Security.Principal\nImports System.Threading\n\nClass ADPrincipal\n    Overloads Shared Sub Main(ByVal args() As String)\n        &#39; Create a new thread with a generic principal.\n        Dim t As New Thread(New ThreadStart(AddressOf PrintPrincipalInformation))\n        t.Start()\n        t.Join()\n\n        &#39; Set the principal policy to WindowsPrincipal.\n        Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n        currentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal)\n\n        &#39; The new thread will have a Windows principal representing the\n        &#39; current user.\n        t = New Thread(New ThreadStart(AddressOf PrintPrincipalInformation))\n        t.Start()\n        t.Join()\n\n        &#39; Create a principal to use for new threads.\n        Dim identity = New GenericIdentity(&quot;NewUser&quot;)\n        Dim principal = New GenericPrincipal(identity, Nothing)\n        currentDomain.SetThreadPrincipal(principal)\n\n        &#39; Create a new thread with the principal created above.\n        t = New Thread(New ThreadStart(AddressOf PrintPrincipalInformation))\n        t.Start()\n        t.Join()\n\n        &#39; Wait for user input before terminating.\n        Console.ReadLine()\n    End Sub &#39;Main\n\n\n    Shared Sub PrintPrincipalInformation()\n        Dim curPrincipal As IPrincipal = Thread.CurrentPrincipal\n        If Not (curPrincipal Is Nothing) Then\n            Console.WriteLine(&quot;Type: &quot; &amp; CType(curPrincipal, Object).GetType().Name)\n            Console.WriteLine(&quot;Name: &quot; &amp; curPrincipal.Identity.Name)\n            Console.WriteLine(&quot;Authenticated: &quot; &amp; curPrincipal.Identity.IsAuthenticated)\n            Console.WriteLine()\n\n        End If\n    End Sub &#39;PrintPrincipalInformation\nEnd Class &#39;ADPrincipal \n</code></pre><pre><code class=\"lang-cs\" name=\"ADPrincipal#1\">using System;\nusing System.Security.Principal;\nusing System.Threading;\n\nclass ADPrincipal\n{\n\tstatic void Main(string[] args)\n\t{\n\t\t// Create a new thread with a generic principal.\n\t\tThread t = new Thread(new ThreadStart(PrintPrincipalInformation));\n\t\tt.Start();\n\t\tt.Join();\n\n\t\t// Set the principal policy to WindowsPrincipal.\n\t\tAppDomain currentDomain = AppDomain.CurrentDomain;\n\t\tcurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);\n\t\t\t\n\t\t// The new thread will have a Windows principal representing the\n\t\t// current user.\n\t\tt = new Thread(new ThreadStart(PrintPrincipalInformation));\n\t\tt.Start();\n\t\tt.Join();\n\n\t\t// Create a principal to use for new threads.\n\t\tIIdentity identity = new GenericIdentity(&quot;NewUser&quot;);\n\t\tIPrincipal principal = new GenericPrincipal(identity, null);\n\t\tcurrentDomain.SetThreadPrincipal(principal);\n\t\t\t\n\t\t// Create a new thread with the principal created above.\n\t\tt = new Thread(new ThreadStart(PrintPrincipalInformation));\n\t\tt.Start();\n\t\tt.Join();\n\t\t\n\t\t// Wait for user input before terminating.\n\t\tConsole.ReadLine();\n\t}\n\n\tstatic void PrintPrincipalInformation()\n\t{\n\t\tIPrincipal curPrincipal = Thread.CurrentPrincipal;\n\t\tif(curPrincipal != null)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Type: &quot; + curPrincipal.GetType().Name);\n\t\t\tConsole.WriteLine(&quot;Name: &quot; + curPrincipal.Identity.Name);\n\t\t\tConsole.WriteLine(&quot;Authenticated: &quot; +\n\t\t\t\tcurPrincipal.Identity.IsAuthenticated);\n\t\t\tConsole.WriteLine();\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ToString\">\r\n    \r\n            <a id=\"System_AppDomain_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Obtains a string representation that includes the friendly name of the application domain and any context policies.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string formed by concatenating the literal string &quot;Name:&quot;, the friendly name of the application domain, and either string representations of the context policies or the string &quot;There are no context policies.&quot;</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomainunloadedexception\" data-linktype=\"relative-path\">AppDomainUnloadedException</a></div>\r\n                  </div>\r\n                  <p>The application domain represented by the current <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> has been unloaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the return value of the ToString method.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADToString#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Security::Policy;\n\n//for evidence Object*\nint main()\n{\n   \n   // Create application domain setup information\n   AppDomainSetup^ domaininfo = gcnew AppDomainSetup;\n   \n   //Create evidence for the new appdomain from evidence of the current application domain\n   Evidence^ adevidence = AppDomain::CurrentDomain-&gt;Evidence;\n   \n   // Create appdomain\n   AppDomain^ domain = AppDomain::CreateDomain( &quot;MyDomain&quot;, adevidence, domaininfo );\n   \n   // Write out application domain information\n   Console::WriteLine( &quot;Host domain: {0}&quot;, AppDomain::CurrentDomain-&gt;FriendlyName );\n   Console::WriteLine( &quot;child domain: {0}&quot;, domain-&gt;FriendlyName );\n   Console::WriteLine( &quot;child domain name using ToString: {0}&quot;, domain );\n   Console::WriteLine();\n   AppDomain::Unload( domain );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"ADToString#1\">using System;\nusing System.Reflection;\nusing System.Security.Policy;  //for evidence object\nclass ADSetup\n{\n\tpublic static void Main()\n\t{\n\t\t// Create application domain setup information\n\t\tAppDomainSetup domaininfo = new AppDomainSetup();\n\t\t\n\t\t//Create evidence for the new appdomain from evidence of the current application domain\n\t\tEvidence adevidence = AppDomain.CurrentDomain.Evidence;\n\n\t\t// Create appdomain\n\t\tAppDomain domain = AppDomain.CreateDomain(&quot;MyDomain&quot;, adevidence, domaininfo);\n\n\t\t// Write out application domain information\n\t\tConsole.WriteLine(&quot;Host domain: &quot; + AppDomain.CurrentDomain.FriendlyName);\n\t\tConsole.WriteLine(&quot;child domain: &quot; + domain.FriendlyName);\n\t\tConsole.WriteLine(&quot;child domain name using ToString:&quot; + domain.ToString());\n\t\tConsole.WriteLine();\n\t\t\n\t\tAppDomain.Unload(domain);\n\t\n\t}\n\t\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ADToString#1\">Imports System\nImports System.Reflection\nImports System.Security.Policy\n &#39;for evidence object\n\nClass ADSetup\n   \n   Public Shared Sub Main()\n      &#39; Create application domain setup information\n      Dim domaininfo As New AppDomainSetup()\n      \n      &#39;Create evidence for the new appdomain from evidence of the current application domain\n      Dim adevidence As Evidence = AppDomain.CurrentDomain.Evidence\n      \n      &#39; Create appdomain\n      Dim domain As AppDomain = AppDomain.CreateDomain(&quot;MyDomain&quot;, adevidence, domaininfo)\n      \n      &#39; Write out application domain information\n      Console.WriteLine((&quot;Host domain: &quot; + AppDomain.CurrentDomain.FriendlyName))\n      Console.WriteLine((&quot;child domain: &quot; + domain.FriendlyName))\n      Console.WriteLine((&quot;child domain name using ToString:&quot; + domain.ToString()))\n      Console.WriteLine()\n      \n      AppDomain.Unload(domain)\n   End Sub &#39;Main \nEnd Class &#39;ADSetup\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_Unload_System_AppDomain_\">\r\n    \r\n            <a id=\"System_AppDomain_Unload_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unload(AppDomain)</div>        \r\n          </div>\r\n    \r\n            <p>Unloads the specified application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Unload (AppDomain domain);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>domain</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An application domain to unload.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>domain</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.cannotunloadappdomainexception\" data-linktype=\"relative-path\">CannotUnloadAppDomainException</a></div>\r\n                  </div>\r\n                  <p><code>domain</code> could not be unloaded.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </div>\r\n                  <p>An error occurred during the unload process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the .NET Framework version 2.0 there is a thread dedicated to unloading application domains. This improves reliability, especially when the .NET Framework is hosted. When a thread calls Unload, the target domain is marked for unloading. The dedicated thread attempts to unload the domain, and all threads in the domain are aborted. If a thread does not abort, for example because it is executing unmanaged code, or because it is executing a <code>finally</code> block, then after a period of time a <a class=\"xref\" href=\"system.cannotunloadappdomainexception\" data-linktype=\"relative-path\">CannotUnloadAppDomainException</a> is thrown in the thread that originally called Unload. If the thread that could not be aborted eventually ends, the target domain is not unloaded. Thus, in the .NET Framework version 2.0 <code>domain</code> is not guaranteed to unload, because it might not be possible to terminate executing threads.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In some cases, calling Unload causes an immediate <a class=\"xref\" href=\"system.cannotunloadappdomainexception\" data-linktype=\"relative-path\">CannotUnloadAppDomainException</a>, for example if it is called in a finalizer.  </p>\n</div>\n<p> The threads in <code>domain</code> are terminated using the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Abort_\" data-linktype=\"relative-path\">Abort</a> method, which throws a <a class=\"xref\" href=\"system.threading.threadabortexception\" data-linktype=\"relative-path\">ThreadAbortException</a> in the thread. Although the thread should terminate promptly, it can continue executing for an unpredictable amount of time in a <code>finally</code> clause.  </p>\n<h2 id=\"version-compatibility\">Version Compatibility</h2>\n<p> In the .NET Framework version 1.0 and 1.1 if the thread that calls Unload is running in <code>domain</code>, another thread is started to perform the unload operation. If <code>domain</code> cannot be unloaded, a <a class=\"xref\" href=\"system.cannotunloadappdomainexception\" data-linktype=\"relative-path\">CannotUnloadAppDomainException</a> is thrown in that thread, not in the original thread that called Unload. However, if the thread that calls Unload is running outside <code>domain</code>, that thread receives the exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to unload an application domain.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADUnload#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Security::Policy;\n\n//for evidence Object*\nint main()\n{\n   \n   //Create evidence for the new appdomain.\n   Evidence^ adevidence = AppDomain::CurrentDomain-&gt;Evidence;\n   \n   // Create the new application domain.\n   AppDomain^ domain = AppDomain::CreateDomain( &quot;MyDomain&quot;, adevidence );\n   Console::WriteLine( &quot;Host domain: {0}&quot;, AppDomain::CurrentDomain-&gt;FriendlyName );\n   Console::WriteLine( &quot;child domain: {0}&quot;, domain-&gt;FriendlyName );\n   \n   // Unload the application domain.\n   AppDomain::Unload( domain );\n   try\n   {\n      Console::WriteLine();\n      \n      // Note that the following statement creates an exception because the domain no longer exists.\n      Console::WriteLine( &quot;child domain: {0}&quot;, domain-&gt;FriendlyName );\n   }\n   catch ( AppDomainUnloadedException^ /*e*/ ) \n   {\n      Console::WriteLine( &quot;The appdomain MyDomain does not exist.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ADUnload#1\">Imports System\nImports System.Reflection\nImports System.Security.Policy &#39;for evidence object\n\nClass ADUnload\n   \n   Public Shared Sub Main()\n\n      &#39;Create evidence for the new appdomain.\n      Dim adevidence As Evidence = AppDomain.CurrentDomain.Evidence\n\n      &#39; Create the new application domain.\n      Dim domain As AppDomain = AppDomain.CreateDomain(&quot;MyDomain&quot;, adevidence)\n      \n      Console.WriteLine((&quot;Host domain: &quot; + AppDomain.CurrentDomain.FriendlyName))\n      Console.WriteLine((&quot;child domain: &quot; + domain.FriendlyName))\n      &#39; Unload the application domain.\n      AppDomain.Unload(domain)\n      \n      Try\n         Console.WriteLine()\n         &#39; Note that the following statement creates an exception because the domain no longer exists.\n         Console.WriteLine((&quot;child domain: &quot; + domain.FriendlyName))\n      \n      Catch e As AppDomainUnloadedException\n         Console.WriteLine(&quot;The appdomain MyDomain does not exist.&quot;)\n      End Try\n   End Sub &#39;Main \nEnd Class &#39;ADUnload\n</code></pre><pre><code class=\"lang-cs\" name=\"ADUnload#1\">using System;\nusing System.Reflection;\nusing System.Security.Policy;  //for evidence object\nclass ADUnload\n{\n\tpublic static void Main()\n\t{\n\n\t\t//Create evidence for the new appdomain.\n\t\tEvidence adevidence = AppDomain.CurrentDomain.Evidence;\n\n \t\t// Create the new application domain.\n \t\tAppDomain domain = AppDomain.CreateDomain(&quot;MyDomain&quot;, adevidence);\n\n            \tConsole.WriteLine(&quot;Host domain: &quot; + AppDomain.CurrentDomain.FriendlyName);\n            \tConsole.WriteLine(&quot;child domain: &quot; + domain.FriendlyName);\n\t\t// Unload the application domain.\n\t\tAppDomain.Unload(domain);\n\n\t\ttry\n\t\t{\n\t\tConsole.WriteLine();\n\t\t// Note that the following statement creates an exception because the domain no longer exists.\n            \tConsole.WriteLine(&quot;child domain: &quot; + domain.FriendlyName);\n\t\t}\n\n\t\tcatch (AppDomainUnloadedException e)\n\t\t{\n\t\tConsole.WriteLine(&quot;The appdomain MyDomain does not exist.&quot;);\n\t\t}\n\t\t\n\t}\n\t\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_AssemblyLoad\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AssemblyLoad</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an assembly is loaded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event AssemblyLoadEventHandler AssemblyLoad;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.assemblyloadeventhandler\" data-linktype=\"relative-path\">AssemblyLoadEventHandler</a> delegate for this event indicates what assembly was loaded.  </p>\n<p> To register an event handler for this event, you must have the required permissions, or a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the AssemblyLoad event.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_AssemblyLoad#1\">using System;\nusing System.Reflection;\n\nclass Test {\n\n   public static void Main() {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n      currentDomain.AssemblyLoad += new AssemblyLoadEventHandler(MyAssemblyLoadEventHandler);\n      \n      PrintLoadedAssemblies(currentDomain);\n      // Lists mscorlib and this assembly\n\n      // You must supply a valid fully qualified assembly name here.      \n      currentDomain.CreateInstance(&quot;System.Windows.Forms, Version, Culture, PublicKeyToken&quot;, &quot;System.Windows.Forms.TextBox&quot;);\n      // Loads System, System.Drawing, System.Windows.Forms\n      \n      PrintLoadedAssemblies(currentDomain);\n      // Lists all five assemblies\n   }\n   \n   static void PrintLoadedAssemblies(AppDomain domain) {\n      Console.WriteLine(&quot;LOADED ASSEMBLIES:&quot;);\n      foreach (Assembly a in domain.GetAssemblies()) {\n         Console.WriteLine(a.FullName);\n      }\n      Console.WriteLine();\n   }\n   \n   static void MyAssemblyLoadEventHandler(object sender, AssemblyLoadEventArgs args) {\n      Console.WriteLine(&quot;ASSEMBLY LOADED: &quot; + args.LoadedAssembly.FullName);\n      Console.WriteLine();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_AssemblyLoad#1\">Option Strict On\nOption Explicit On\n\nImports System\nImports System.Reflection\n\nModule Test\n   \n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      AddHandler currentDomain.AssemblyLoad, AddressOf MyAssemblyLoadEventHandler\n      \n      PrintLoadedAssemblies(currentDomain)\n      &#39; Lists mscorlib and this assembly\n\n      &#39; You must supply a valid fully qualified assembly name here.      \n      currentDomain.CreateInstance(&quot;System.Windows.Forms,Version,Culture,PublicKeyToken&quot;, &quot;System.Windows.Forms.TextBox&quot;)\n      &#39; Loads System, System.Drawing, System.Windows.Forms\n      \n      PrintLoadedAssemblies(currentDomain)\n      &#39; Lists all five assemblies\n   End Sub &#39;Main\n   \n   Sub PrintLoadedAssemblies(domain As AppDomain)\n      Console.WriteLine(&quot;LOADED ASSEMBLIES:&quot;)\n      Dim a As System.Reflection.Assembly\n      For Each a In domain.GetAssemblies()\n         Console.WriteLine(a.FullName)\n      Next a\n      Console.WriteLine()\n   End Sub &#39;PrintLoadedAssemblies\n   \n   Sub MyAssemblyLoadEventHandler(sender As Object, args As AssemblyLoadEventArgs)\n      Console.WriteLine(&quot;ASSEMBLY LOADED: &quot; + args.LoadedAssembly.FullName)\n      Console.WriteLine()\n   End Sub &#39;MyAssemblyLoadEventHandler\n\nEnd Module &#39;Test \n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_AssemblyLoad#1\">using namespace System;\nusing namespace System::Reflection;\nref class Test\n{\npublic:\n   static void MyAssemblyLoadEventHandler( Object^ sender, AssemblyLoadEventArgs^ args )\n   {\n      Console::WriteLine( &quot;ASSEMBLY LOADED: {0}&quot;, args-&gt;LoadedAssembly-&gt;FullName );\n      Console::WriteLine();\n   }\n\n};\n\nvoid PrintLoadedAssemblies( AppDomain^ domain )\n{\n   Console::WriteLine( &quot;LOADED ASSEMBLIES:&quot; );\n   System::Collections::IEnumerator^ myEnum = domain-&gt;GetAssemblies()-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Assembly^ a = safe_cast&lt;Assembly^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( a-&gt;FullName );\n   }\n\n   Console::WriteLine();\n}\n\nint main()\n{\n   AppDomain^ currentDomain = AppDomain::CurrentDomain;\n   currentDomain-&gt;AssemblyLoad += gcnew AssemblyLoadEventHandler( Test::MyAssemblyLoadEventHandler );\n   PrintLoadedAssemblies( currentDomain );\n   \n   // Lists mscorlib and this assembly\n   // You must supply a valid fully qualified assembly name here.\n   currentDomain-&gt;CreateInstance( &quot;System.Windows.Forms, Version, Culture, PublicKeyToken&quot;, &quot;System.Windows.Forms.TextBox&quot; );\n   \n   // Loads System, System::Drawing, System::Windows::Forms\n   PrintLoadedAssemblies( currentDomain );\n   \n   // Lists all five assemblies\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_AssemblyResolve\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AssemblyResolve</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the resolution of an assembly fails.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event ResolveEventHandler AssemblyResolve;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>It is the responsibility of the <a class=\"xref\" href=\"system.resolveeventhandler\" data-linktype=\"relative-path\">ResolveEventHandler</a> for this event to return the assembly that is specified by the <a class=\"xref\" href=\"system.resolveeventargs#System_ResolveEventArgs_Name_\" data-linktype=\"relative-path\">Name</a> property, or to return null if the assembly is not recognized. The assembly must be loaded into an execution context; if it is loaded into the reflection-only context, the load that caused this event to be raised fails.  </p>\n<p> For guidance on the use of this event, see <a href=\"../Topic/Resolving%20Assembly%20Loads.md\" data-linktype=\"relative-path\">Resolving Assembly Loads</a>.  </p>\n<p> Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the <a class=\"xref\" href=\"system.resolveeventargs#System_ResolveEventArgs_RequestingAssembly_\" data-linktype=\"relative-path\">RequestingAssembly</a> property returns the assembly that requested the assembly load that could not be resolved. For example, the loader might be unable to load a dependency of the requesting assembly because the requesting assembly and its dependency are not in the probing path. Knowing the identity of the requesting assembly might be useful in locating the dependency or in identifying the correct version, if more than one version of the dependency is available. For more information, see <a class=\"xref\" href=\"system.resolveeventargs#System_ResolveEventArgs_RequestingAssembly_\" data-linktype=\"relative-path\">RequestingAssembly</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-short-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the <a class=\"xref\" href=\"system.resolveeventhandler\" data-linktype=\"relative-path\">ResolveEventHandler</a> event is raised for all assemblies, including resource assemblies. In earlier versions, the event was not raised for resource assemblies. If the operating system is localized, the handler might be called multiple times: once for each culture in the fallback chain.  </p>\n</div>\n<p> For this event, the <a class=\"xref\" href=\"system.resolveeventargs#System_ResolveEventArgs_Name_\" data-linktype=\"relative-path\">Name</a> property returns the assembly name before policy is applied.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If more than one event handler is registered for this event, the event handlersarecalled in order until an event handler returns a value that isn&#39;t <code>null</code>. Subsequent event handlers are ignored.  </p>\n</div>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the AssemblyResolve event.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"AssemblyResolve#1\">public ref class MyType\n{\npublic:\n    MyType()\n    {\n        Console::WriteLine();\n        Console::WriteLine(&quot;MyType instantiated!&quot;);\n    }\n};\n\nclass Test\n{\npublic:\n    static void Main()\n    {\n        AppDomain^ currentDomain = AppDomain::CurrentDomain;\n\n        // This call will fail to create an instance of MyType since the\n        // assembly resolver is not set\n        InstantiateMyTypeFail(currentDomain);\n\n        currentDomain-&gt;AssemblyResolve += gcnew ResolveEventHandler(&amp;Test::MyResolveEventHandler);\n\n        // This call will succeed in creating an instance of MyType since the\n        // assembly resolver is now set.\n        InstantiateMyTypeFail(currentDomain);\n\n        // This call will succeed in creating an instance of MyType since the\n        // assembly name is valid.\n        InstantiateMyTypeSucceed(currentDomain);\n    }\n\nprivate:\n    static void InstantiateMyTypeFail(AppDomain^ domain)\n    {\n        // Calling InstantiateMyType will always fail since the assembly info\n        // given to CreateInstance is invalid.\n        try\n        {\n            // You must supply a valid fully qualified assembly name here.\n            domain-&gt;CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyType&quot;);\n        }\n        catch (Exception^ e)\n        {\n            Console::WriteLine();\n            Console::WriteLine(e-&gt;Message);\n        }\n    }\n\n    static void InstantiateMyTypeSucceed(AppDomain^ domain)\n    {\n        try\n        {\n            String^ asmname = Assembly::GetCallingAssembly()-&gt;FullName;\n            domain-&gt;CreateInstance(asmname, &quot;MyType&quot;);\n        }\n        catch (Exception^ e)\n        {\n            Console::WriteLine();\n            Console::WriteLine(e-&gt;Message);\n        }\n    }\n\n    static Assembly^ MyResolveEventHandler(Object^ sender, ResolveEventArgs^ args)\n    {\n        Console::WriteLine(&quot;Resolving...&quot;);\n        return MyType::typeid-&gt;Assembly;\n    }\n};\n\nint main()\n{\n    Test::Main();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"AssemblyResolve#1\">public class MyType\n{\n    public MyType()\n    {\n        Console.WriteLine();\n        Console.WriteLine(&quot;MyType instantiated!&quot;);\n    }\n}\n\nclass Test\n{\n    public static void Main()\n    {\n        AppDomain currentDomain = AppDomain.CurrentDomain;\n\n        // This call will fail to create an instance of MyType since the\n        // assembly resolver is not set\n        InstantiateMyTypeFail(currentDomain);\n\n        currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);\n\n        // This call will succeed in creating an instance of MyType since the\n        // assembly resolver is now set.\n        InstantiateMyTypeFail(currentDomain);\n\n        // This call will succeed in creating an instance of MyType since the\n        // assembly name is valid.\n        InstantiateMyTypeSucceed(currentDomain);\n    }\n\n    private static void InstantiateMyTypeFail(AppDomain domain)\n    {\n        // Calling InstantiateMyType will always fail since the assembly info\n        // given to CreateInstance is invalid.\n        try\n        {\n            // You must supply a valid fully qualified assembly name here.\n            domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyType&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine();\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    private static void InstantiateMyTypeSucceed(AppDomain domain)\n    {\n        try\n        {\n            string asmname = Assembly.GetCallingAssembly().FullName;\n            domain.CreateInstance(asmname, &quot;MyType&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine();\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    private static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args)\n    {\n        Console.WriteLine(&quot;Resolving...&quot;);\n        return typeof(MyType).Assembly;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AssemblyResolve#1\">Public Class MyType\n\n    Public Sub New()\n        Console.WriteLine()\n        Console.WriteLine(&quot;MyType instantiated!&quot;)\n    End Sub &#39;New\n\nEnd Class &#39;MyType\n\nClass Test\n\n    Public Shared Sub Main()\n        Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n\n        &#39; This call will fail to create an instance of MyType since the\n        &#39; assembly resolver is not set\n        InstantiateMyTypeFail(currentDomain)\n\n        AddHandler currentDomain.AssemblyResolve, AddressOf MyResolveEventHandler\n\n        &#39; This call will succeed in creating an instance of MyType since the\n        &#39; assembly resolver is now set.\n        InstantiateMyTypeFail(currentDomain)\n\n        &#39; This call will succeed in creating an instance of MyType since the\n        &#39; assembly name is valid.\n        InstantiateMyTypeSucceed(currentDomain)\n    End Sub &#39;Main\n\n    Private Shared Sub InstantiateMyTypeFail(domain As AppDomain)\n        &#39; Calling InstantiateMyType will always fail since the assembly info\n        &#39; given to CreateInstance is invalid.\n        Try\n            &#39; You must supply a valid fully qualified assembly name here.\n            domain.CreateInstance(&quot;Assembly text name, Version, Culture, PublicKeyToken&quot;, &quot;MyType&quot;)\n        Catch e As Exception\n            Console.WriteLine()\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub &#39;InstantiateMyType\n\n    Private Shared Sub InstantiateMyTypeSucceed(domain As AppDomain)\n        Try\n            Dim asmname As String = Assembly.GetCallingAssembly().FullName\n            domain.CreateInstance(asmname, &quot;MyType&quot;)\n        Catch e As Exception\n            Console.WriteLine()\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n    Private Shared Function MyResolveEventHandler(sender As Object, args As ResolveEventArgs) As Assembly\n        Console.WriteLine(&quot;Resolving...&quot;)\n        Return GetType(MyType).Assembly\n    End Function &#39;MyResolveEventHandler\n\nEnd Class &#39;Test\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_DomainUnload\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DomainUnload</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> is about to be unloaded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler DomainUnload;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a> delegate for this event can perform any termination activities before the application domain is unloaded.  </p>\n<p> Each application domain that needs to perform processing when it is unloaded should register an event handler for this event. A shared event handler should not be used, because the <a class=\"xref\" href=\"system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a> delegate does not identify the domain that is being unloaded.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This event is never raised in the default application domain.  </p>\n</div>\n<p> Do not make assumptions about the thread the event is raised on. The event can be raised on a different thread than the one that called the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_Unload_\" data-linktype=\"relative-path\">Unload</a> method.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_FirstChanceException\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FirstChanceException</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an exception is thrown in managed code, before the runtime searches the call stack for an exception handler in the application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler&lt;System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt; FirstChanceException;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is only a notification. Handling this event does not handle the exception or affect subsequent exception handling in any way. After the event has been raised and event handlers have been invoked, the common language runtime (CLR) begins to search for a handler for the exception. FirstChanceException provides the application domain with a first chance to examine any managed exception.  </p>\n<p> The event can be handled per application domain. If a thread passes through multiple application domains while executing a call, the event is raised in each application domain that has registered an event handler, before the CLR begins searching for a matching exception handler in that application domain. After the event has been handled, a search is made for a matching exception handler in that application domain. If none is found, the event is raised in the next application domain.  </p>\n<p> You must handle all exceptions that occur in the event handler for the FirstChanceException event. Otherwise, FirstChanceException is raised recursively. This could result in a stack overflow and termination of the application. We recommend that you implement event handlers for this event as constrained execution regions (CERs), to keep infrastructure-related exceptions such as out-of-memory or stack overflow from affecting the virtual machine while the exception notification is being processed.  </p>\n<p> This event is not raised for exceptions that indicate corruption of process state, such as access violations, unless the event handler is security-critical and has the <a class=\"xref\" href=\"system.runtime.exceptionservices.handleprocesscorruptedstateexceptionsattribute\" data-linktype=\"relative-path\">HandleProcessCorruptedStateExceptionsAttribute</a> attribute.  </p>\n<p> The common language runtime suspends thread aborts while this notification event is being handled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a series of application domains named <code>AD0</code> through <code>AD3</code>, with a <code>Worker</code> object in each application domain. Each <code>Worker</code> object has a reference to the <code>Worker</code> object in the next application domain, except for the <code>Worker</code> in the last application domain. The FirstChanceException event is handled in all application domains except <code>AD1</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In addition to this example, which demonstrates first-chance exception notifications in multiple application domains, you can find simple use cases in <a href=\"../Topic/How%20to:%20Receive%20First-Chance%20Exception%20Notifications.md\" data-linktype=\"relative-path\">How to: Receive First-Chance Exception Notifications</a>.  </p>\n</div>\n<p> When the application domains have been created, the default application domain calls the <code>TestException</code> method for the first application domain. Each <code>Worker</code> object calls the <code>TestException</code> method for the next application domain, until the last <code>Worker</code> throws an exception that is either handled or unhandled. Thus, the current thread passes through all the application domains, and <code>TestException</code> is added to the stack in each application domain.  </p>\n<p> When the last <code>Worker</code> object handles the exception, the FirstChanceException event is raised only in the last application domain. The other application domains never get a chance to handle the exception, so the event is not raised.  </p>\n<p> When the last <code>Worker</code> object does not handle the exception, the FirstChanceException event is raised in each application domain that has an event handler. After each event handler has finished, the stack continues to unwind until the exception is caught by the default application domain.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To see how the stack display grows as the event is raised closer and closer to the default application domain, change <code>e.Exception.Message</code> to <code>e.Exception</code> in the <code>FirstChanceHandler</code> event handlers. Notice that when <code>TestException</code> is called across application domain boundaries, it appears twice: once for the proxy and once for the stub.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.AppDomain.FirstChanceException#1\">Imports System.Reflection\nImports System.Runtime.ExceptionServices\n\nClass Example\n\n    Shared Sub Main()\n    \n        AddHandler AppDomain.CurrentDomain.FirstChanceException, AddressOf FirstChanceHandler\n\n        &#39; Create a set of application domains, with a Worker object in each one.\n        &#39; Each Worker object creates the next application domain.\n        Dim ad As AppDomain = AppDomain.CreateDomain(&quot;AD0&quot;)\n        Dim w As Worker = CType(ad.CreateInstanceAndUnwrap(\n                                GetType(Worker).Assembly.FullName, &quot;Worker&quot;),\n                                Worker)\n        w.Initialize(0, 3)\n\n        Console.WriteLine(vbCrLf &amp; &quot;The last application domain throws an exception and catches it:&quot;)\n        Console.WriteLine()\n        w.TestException(true)\n\n        Try\n            Console.WriteLine(vbCrLf &amp; \n                &quot;The last application domain throws an exception and does not catch it:&quot;)\n            Console.WriteLine()\n            w.TestException(false) \n\n        Catch ex As ArgumentException\n        \n            Console.WriteLine(&quot;ArgumentException caught in {0}: {1}&quot;, \n                AppDomain.CurrentDomain.FriendlyName, ex.Message)\n        End Try\n    End Sub\n\n    Shared Sub FirstChanceHandler(ByVal source As Object, \n                                  ByVal e As FirstChanceExceptionEventArgs)\n    \n        Console.WriteLine(&quot;FirstChanceException event raised in {0}: {1}&quot;,\n            AppDomain.CurrentDomain.FriendlyName, e.Exception.Message)\n    End Sub\nEnd Class\n\nPublic Class Worker\n    Inherits MarshalByRefObject\n\n    Private ad As AppDomain = Nothing\n    Private w As Worker = Nothing\n\n    Public Sub Initialize(ByVal count As Integer, ByVal max As Integer)\n    \n        &#39; Handle the FirstChanceException event in all application domains except\n        &#39; AD1.\n        If count &lt;&gt; 1\n        \n            AddHandler AppDomain.CurrentDomain.FirstChanceException, AddressOf FirstChanceHandler\n\n        End If\n\n        &#39; Create another application domain, until the maximum is reached.\n        &#39; Field w remains Nothing in the last application domain, as a signal \n        &#39; to TestException(). \n        If count &lt; max\n            Dim nextAD As Integer = count + 1\n            ad = AppDomain.CreateDomain(&quot;AD&quot; &amp; nextAD)\n            w = CType(ad.CreateInstanceAndUnwrap(\n                      GetType(Worker).Assembly.FullName, &quot;Worker&quot;),\n                      Worker)\n            w.Initialize(nextAD, max)\n        End If\n    End Sub\n\n    Public Sub TestException(ByVal handled As Boolean)\n    \n        &#39; As long as there is another application domain, call TestException() on\n        &#39; its Worker object. When the last application domain is reached, throw a\n        &#39; handled or unhandled exception.\n        If w IsNot Nothing\n        \n            w.TestException(handled)\n\n        Else If handled\n        \n            Try\n                Throw New ArgumentException(&quot;Thrown in &quot; &amp; AppDomain.CurrentDomain.FriendlyName)\n\n            Catch ex As ArgumentException\n            \n                Console.WriteLine(&quot;ArgumentException caught in {0}: {1}&quot;, \n                    AppDomain.CurrentDomain.FriendlyName, ex.Message)\n            End Try\n        Else\n        \n            Throw New ArgumentException(&quot;Thrown in &quot; &amp; AppDomain.CurrentDomain.FriendlyName)\n        End If\n    End Sub\n\n    Shared Sub FirstChanceHandler(ByVal source As Object, \n                                  ByVal e As FirstChanceExceptionEventArgs)\n    \n        Console.WriteLine(&quot;FirstChanceException event raised in {0}: {1}&quot;,\n            AppDomain.CurrentDomain.FriendlyName, e.Exception.Message)\n    End Sub\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;The last application domain throws an exception and catches it:\n&#39;\n&#39;FirstChanceException event raised in AD3: Thrown in AD3\n&#39;ArgumentException caught in AD3: Thrown in AD3\n&#39;\n&#39;The last application domain throws an exception and does not catch it:\n&#39;\n&#39;FirstChanceException event raised in AD3: Thrown in AD3\n&#39;FirstChanceException event raised in AD2: Thrown in AD3\n&#39;FirstChanceException event raised in AD0: Thrown in AD3\n&#39;FirstChanceException event raised in Example.exe: Thrown in AD3\n&#39;ArgumentException caught in Example.exe: Thrown in AD3\n</code></pre><pre><code class=\"lang-cs\" name=\"System.AppDomain.FirstChanceException#1\">using System;\nusing System.Reflection;\nusing System.Runtime.ExceptionServices;\n\nclass Example\n{\n    static void Main()\n    {\n        AppDomain.CurrentDomain.FirstChanceException += FirstChanceHandler;\n\n        // Create a set of application domains, with a Worker object in each one.\n        // Each Worker object creates the next application domain.\n        AppDomain ad = AppDomain.CreateDomain(&quot;AD0&quot;);\n        Worker w = (Worker) ad.CreateInstanceAndUnwrap(\n                                typeof(Worker).Assembly.FullName, &quot;Worker&quot;);\n        w.Initialize(0, 3);\n\n        Console.WriteLine(&quot;\\r<br>The last application domain throws an exception and catches it:&quot;);\n        Console.WriteLine();\n        w.TestException(true);\n\n        try\n        {\n            Console.WriteLine(\n                &quot;\\r<br>The last application domain throws an exception and does not catch it:&quot;);\n            Console.WriteLine();\n            w.TestException(false);\n        }\n        catch (ArgumentException ex)\n        {\n            Console.WriteLine(&quot;ArgumentException caught in {0}: {1}&quot;, \n                AppDomain.CurrentDomain.FriendlyName, ex.Message);\n        }\n    }\n\n    static void FirstChanceHandler(object source, FirstChanceExceptionEventArgs e)\n    {\n        Console.WriteLine(&quot;FirstChanceException event raised in {0}: {1}&quot;,\n            AppDomain.CurrentDomain.FriendlyName, e.Exception.Message);\n    }\n}\n\npublic class Worker : MarshalByRefObject\n{\n    private AppDomain ad = null;\n    private Worker w = null;\n\n    public void Initialize(int count, int max)\n    {\n        // Handle the FirstChanceException event in all application domains except\n        // AD1.\n        if (count != 1)\n        {\n            AppDomain.CurrentDomain.FirstChanceException += FirstChanceHandler;\n        }\n\n        // Create another application domain, until the maximum is reached.\n        // Field w remains null in the last application domain, as a signal\n        // to TestException(). \n        if (count &lt; max)\n        {\n            int next = count + 1;\n            ad = AppDomain.CreateDomain(&quot;AD&quot; + next);\n            w = (Worker) ad.CreateInstanceAndUnwrap(\n                             typeof(Worker).Assembly.FullName, &quot;Worker&quot;);\n            w.Initialize(next, max);\n        }\n    }\n\n    public void TestException(bool handled)\n    {\n        // As long as there is another application domain, call TestException() on\n        // its Worker object. When the last application domain is reached, throw a\n        // handled or unhandled exception.\n        if (w != null)\n        {\n            w.TestException(handled);\n        }\n        else if (handled)\n        {\n            try\n            {\n                throw new ArgumentException(&quot;Thrown in &quot; + AppDomain.CurrentDomain.FriendlyName);\n            }\n            catch (ArgumentException ex)\n            {\n                Console.WriteLine(&quot;ArgumentException caught in {0}: {1}&quot;, \n                    AppDomain.CurrentDomain.FriendlyName, ex.Message);\n            }\n        }\n        else\n        {\n            throw new ArgumentException(&quot;Thrown in &quot; + AppDomain.CurrentDomain.FriendlyName);\n        }\n    }\n\n    static void FirstChanceHandler(object source, FirstChanceExceptionEventArgs e)\n    {\n        Console.WriteLine(&quot;FirstChanceException event raised in {0}: {1}&quot;,\n            AppDomain.CurrentDomain.FriendlyName, e.Exception.Message);\n    }\n}\n\n/* This example produces output similar to the following:\n\nThe last application domain throws an exception and catches it:\n\nFirstChanceException event raised in AD3: Thrown in AD3\nArgumentException caught in AD3: Thrown in AD3\n\nThe last application domain throws an exception and does not catch it:\n\nFirstChanceException event raised in AD3: Thrown in AD3\nFirstChanceException event raised in AD2: Thrown in AD3\nFirstChanceException event raised in AD0: Thrown in AD3\nFirstChanceException event raised in Example.exe: Thrown in AD3\nArgumentException caught in Example.exe: Thrown in AD3\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ProcessExit\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessExit</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the default application domain&#39;s parent process exits.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler ProcessExit;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a> for this event can perform termination activities, such as closing files, releasing storage and so on, before the process ends.  </p>\n<p> Beginning with the .NET Framework version 2.0, this event is raised in each application domain that registers an event handler.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The total execution time of all ProcessExit event handlers is limited, just as the total execution time of all finalizers is limited at process shutdown. The default is two seconds. An unmanaged host can change this execution time by calling the <a href=\"../Topic/ICLRPolicyManager::SetTimeout%20Method.md\" data-linktype=\"relative-path\">ICLRPolicyManager::SetTimeout</a> method with the <a href=\"../Topic/EClrOperation%20Enumeration.md\" data-linktype=\"relative-path\">OPR_ProcessExit</a> enumeration value.  </p>\n</div>\n<p> In the .NET Framework versions 1.0 and 1.1, this event is raised only in the default application domain, and only if an event handler is registered in the default application domain.  </p>\n<p> To register an event handler for this event, you must have the required permissions, or a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ReflectionOnlyAssemblyResolve\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectionOnlyAssemblyResolve</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the resolution of an assembly fails in the reflection-only context.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event ResolveEventHandler ReflectionOnlyAssemblyResolve;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In the reflection-only context, dependencies are not resolved automatically. They must be preloaded or returned by the handler for this event. This event is raised when an assembly has a dependency that is not already loaded into the reflection-only context. The missing dependency is specified by the <a class=\"xref\" href=\"system.resolveeventargs#System_ResolveEventArgs_Name_\" data-linktype=\"relative-path\">Name</a> property. The <a class=\"xref\" href=\"system.resolveeventhandler\" data-linktype=\"relative-path\">ResolveEventHandler</a> for this event must return an assembly that satisfies the dependency. The assembly that is returned must be loaded into the reflection-only context.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This event is raised only for missing dependencies of the assembly that you are loading into the reflection-only context (for example, by using the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_ReflectionOnlyLoad_\" data-linktype=\"relative-path\">ReflectionOnlyLoad</a> method). It is not raised if the assembly that you are loading cannot be found.  </p>\n</div>\n<p> Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the <a class=\"xref\" href=\"system.resolveeventargs#System_ResolveEventArgs_RequestingAssembly_\" data-linktype=\"relative-path\">RequestingAssembly</a> property returns the assembly that requested the assembly load that could not be resolved. Knowing the identity of the requesting assembly might be useful in identifying the correct version of the dependency, if more than one version is available. For more information, see <a class=\"xref\" href=\"system.resolveeventargs#System_ResolveEventArgs_RequestingAssembly_\" data-linktype=\"relative-path\">RequestingAssembly</a>.  </p>\n<p> For this event, the <a class=\"xref\" href=\"system.resolveeventargs#System_ResolveEventArgs_Name_\" data-linktype=\"relative-path\">Name</a> property returns the assembly name before policy is applied.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_ResourceResolve\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResourceResolve</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the resolution of a resource fails because the resource is not a valid linked or embedded resource in the assembly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event ResolveEventHandler ResourceResolve;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.resolveeventhandler\" data-linktype=\"relative-path\">ResolveEventHandler</a> for this event can attempt to locate the assembly containing the resource and return it.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This event is not raised if resolution fails because no file can be found for a valid linked resource. It is raised if a manifest resource stream cannot be found, but it is not raised if an individual resource key cannot be found.  </p>\n</div>\n<p> Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the <a class=\"xref\" href=\"system.resolveeventargs#System_ResolveEventArgs_RequestingAssembly_\" data-linktype=\"relative-path\">RequestingAssembly</a> property contains the assembly that requested the resource. For more information, see <a class=\"xref\" href=\"system.resolveeventargs#System_ResolveEventArgs_RequestingAssembly_\" data-linktype=\"relative-path\">RequestingAssembly</a>.  </p>\n<p> To register an event handler for this event, you must have the required permissions, or a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_TypeResolve\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeResolve</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the resolution of a type fails.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event ResolveEventHandler TypeResolve;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TypeResolve event occurs when the common language runtime is unable to determine the assembly that can create the requested type. This can occur if the type is defined in a dynamic assembly, or the type is not defined in a dynamic assembly but the runtime does not know which assembly the type is defined in. The latter situation can occur when <a class=\"xref\" href=\"system.type#System_Type_GetType_\" data-linktype=\"relative-path\">GetType</a> is called with a type name that is not qualified with the assembly name.  </p>\n<p> The <a class=\"xref\" href=\"system.resolveeventhandler\" data-linktype=\"relative-path\">ResolveEventHandler</a> for this event can attempt to locate and create the type.  </p>\n<p> However, the TypeResolve event does not occur if the runtime knows it is not possible to find a type in certain assemblies. For example, this event does not occur if the type is not found in a static assembly because the runtime knows types cannot be added dynamically to static assemblies.  </p>\n<p> Beginning with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, the <a class=\"xref\" href=\"system.resolveeventargs#System_ResolveEventArgs_RequestingAssembly_\" data-linktype=\"relative-path\">RequestingAssembly</a> property contains the assembly that requested the type. For more information, see <a class=\"xref\" href=\"system.resolveeventargs#System_ResolveEventArgs_RequestingAssembly_\" data-linktype=\"relative-path\">RequestingAssembly</a>.  </p>\n<p> To register an event handler for this event, you must have the required permissions, or a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample demonstrates the TypeResolve event.  </p>\n<p> For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_TypeResolve#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Test \n{\n    // For this code example, the following information needs to be\n    // available to both Main and the HandleTypeResolve event\n    // handler:\n    private static AssemblyBuilder ab;\n    private static string moduleName;\n\n    public static void Main() \n    {\n        AppDomain currDom = AppDomain.CurrentDomain;\n\n        // Create a dynamic assembly with one module, to be saved to \n        // disk (AssemblyBuilderAccess.Save).\n        // \n        AssemblyName aName = new AssemblyName();\n        aName.Name = &quot;Transient&quot;;\n        moduleName = aName.Name + &quot;.dll&quot;;\n        ab = currDom.DefineDynamicAssembly(aName,\n            AssemblyBuilderAccess.Save);\n        ModuleBuilder mb = ab.DefineDynamicModule(aName.Name, moduleName);\n\n        // The dynamic assembly has just one dummy type, to demonstrate\n        // type resolution.\n        TypeBuilder tb = mb.DefineType(&quot;Example&quot;);\n        tb.CreateType();\n\n\n        // First, try to load the type without saving the dynamic \n        // assembly and without hooking up the TypeResolve event. The\n        // type cannot be loaded.\n        try\n        {\n            Type temp = Type.GetType(&quot;Example&quot;, true);\n            Console.WriteLine(&quot;Loaded type {0}.&quot;, temp);\n        }\n        catch (TypeLoadException)\n        {\n            Console.WriteLine(&quot;Loader could not resolve the type.&quot;);\n        }\n\n        // Hook up the TypeResolve event.\n        //      \n        currDom.TypeResolve += \n            new ResolveEventHandler(HandleTypeResolve);\n\n        // Now try to load the type again. The TypeResolve event is \n        // raised, the dynamic assembly is saved, and the dummy type is\n        // loaded successfully. Display it to the console, and create\n        // an instance.\n        Type t = Type.GetType(&quot;Example&quot;, true);\n        Console.WriteLine(&quot;Loaded type \\&quot;{0}\\&quot;.&quot;, t);\n        Object o = Activator.CreateInstance(t);\n    }\n\n    static Assembly HandleTypeResolve(object sender, ResolveEventArgs args) \n    {\n        Console.WriteLine(&quot;TypeResolve event handler.&quot;);\n\n        // Save the dynamic assembly, and then load it using its\n        // display name. Return the loaded assembly.\n        //\n        ab.Save(moduleName);\n        return Assembly.Load(ab.FullName); \n    }\n}\n\n/* This code example produces the following output:\n\nLoader could not resolve the type.\nTypeResolve event handler.\nLoaded type &quot;Example&quot;.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_TypeResolve#1\">Option Strict On\nOption Explicit On\n\nImports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nModule Test\n\n    &#39; For this code example, the following information needs to be\n    &#39; available to both Main and the HandleTypeResolve event\n    &#39; handler:\n    Private ab As AssemblyBuilder\n    Private moduleName As String\n\n    Sub Main() \n    \n        Dim currDom As AppDomain = AppDomain.CurrentDomain\n\n        &#39; Create a dynamic assembly with one module, to be saved to \n        &#39; disk (AssemblyBuilderAccess.Save).\n        &#39; \n        Dim aName As AssemblyName = new AssemblyName()\n        aName.Name = &quot;Transient&quot;\n        moduleName = aName.Name + &quot;.dll&quot;\n        ab = currDom.DefineDynamicAssembly(aName, _\n            AssemblyBuilderAccess.Save)\n        Dim mb As ModuleBuilder = _\n            ab.DefineDynamicModule(aName.Name, moduleName)\n\n        &#39; The dynamic assembly has just one dummy type, to demonstrate\n        &#39; type resolution.\n        Dim tb As TypeBuilder = mb.DefineType(&quot;Example&quot;)\n        tb.CreateType()\n\n\n        &#39; First, try to load the type without saving the dynamic \n        &#39; assembly and without hooking up the TypeResolve event. The\n        &#39; type cannot be loaded.\n        Try\n            Dim temp As Type = Type.GetType(&quot;Example&quot;, true)\n            Console.WriteLine(&quot;Loaded type {0}.&quot;, temp)\n        Catch ex As TypeLoadException\n            Console.WriteLine(&quot;Loader could not resolve the type.&quot;)\n        End Try\n\n        &#39; Hook up the TypeResolve event.\n        &#39;      \n        AddHandler currDom.TypeResolve, AddressOf HandleTypeResolve\n\n        &#39; Now try to load the type again. The TypeResolve event is \n        &#39; raised, the dynamic assembly is saved, and the dummy type is\n        &#39; loaded successfully. Display it to the console, and create\n        &#39; an instance.\n        Dim t As Type = Type.GetType(&quot;Example&quot;, true)\n        Console.WriteLine(&quot;Loaded type &quot;&quot;{0}&quot;&quot;.&quot;, t)\n        Dim o As Object = Activator.CreateInstance(t)\n    End Sub\n\n    Private Function HandleTypeResolve(ByVal sender As Object, _\n        ByVal e As ResolveEventArgs) As [Assembly]\n    \n        Console.WriteLine(&quot;TypeResolve event handler.&quot;)\n\n        &#39; Save the dynamic assembly, and then load it using its\n        &#39; display name. Return the loaded assembly.\n        &#39;\n        ab.Save(moduleName)\n        Return [Assembly].Load(ab.FullName) \n    End Function\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Loader could not resolve the type.\n&#39;TypeResolve event handler.\n&#39;Loaded type &quot;Example&quot;.\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_TypeResolve#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\nref class Test\n{\nprivate:\n    static Assembly^ HandleTypeResolve(Object^ sender, ResolveEventArgs^ args) \n    {\n        Console::WriteLine(&quot;TypeResolve event handler.&quot;);\n\n        // Save the dynamic assembly, and then load it using its\n        // display name. Return the loaded assembly.\n        //\n        ab-&gt;Save(moduleName);\n        return Assembly::Load(ab-&gt;FullName); \n    }\n\n    // For this code example, the following information needs to be\n    // available to both Demo and the HandleTypeResolve event\n    // handler:\n    static AssemblyBuilder^ ab;\n    static String^ moduleName;\n\npublic:\n    static void Demo() \n    {\n        AppDomain^ currDom = AppDomain::CurrentDomain;\n\n        // Create a dynamic assembly with one module, to be saved to \n        // disk (AssemblyBuilderAccess::Save).\n        // \n        AssemblyName^ aName = gcnew AssemblyName();\n        aName-&gt;Name = &quot;Transient&quot;;\n        moduleName = aName-&gt;Name + &quot;.dll&quot;;\n        ab = currDom-&gt;DefineDynamicAssembly(aName,\n            AssemblyBuilderAccess::Save);\n        ModuleBuilder^ mb = ab-&gt;DefineDynamicModule(aName-&gt;Name, moduleName);\n\n        // The dynamic assembly has just one dummy type, to demonstrate\n        // type resolution.\n        TypeBuilder^ tb = mb-&gt;DefineType(&quot;Example&quot;);\n        tb-&gt;CreateType();\n\n\n        // First, try to load the type without saving the dynamic \n        // assembly and without hooking up the TypeResolve event. The\n        // type cannot be loaded.\n        try\n        {\n            Type^ temp = Type::GetType(&quot;Example&quot;, true);\n            Console::WriteLine(&quot;Loaded type {0}.&quot;, temp);\n        }\n        catch (TypeLoadException^)\n        {\n            Console::WriteLine(&quot;Loader could not resolve the type.&quot;);\n        }\n\n        // Hook up the TypeResolve event.\n        //      \n        currDom-&gt;TypeResolve += \n            gcnew ResolveEventHandler(HandleTypeResolve);\n\n        // Now try to load the type again. The TypeResolve event is \n        // raised, the dynamic assembly is saved, and the dummy type is\n        // loaded successfully. Display it to the console, and create\n        // an instance.\n        Type^ t = Type::GetType(&quot;Example&quot;, true);\n        Console::WriteLine(&quot;Loaded type \\&quot;{0}\\&quot;.&quot;, t);\n        Object^ o = Activator::CreateInstance(t);\n    }\n};\n\nvoid main()\n{\n    Test::Demo();\n}\n\n/* This code example produces the following output:\n\nLoader could not resolve the type.\nTypeResolve event handler.\nLoaded type &quot;Example&quot;.\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_UnhandledException\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnhandledException</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when an exception is not caught.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event UnhandledExceptionEventHandler UnhandledException;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event provides notification of uncaught exceptions. It allows the application to log information about the exception before the system default handler reports the exception to the user and terminates the application. If sufficient information about the state of the application is available, other actions may be undertaken â€” such as saving program data for later recovery. Caution is advised, because program data can become corrupted when exceptions are not handled.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, application termination and debugging options are reported to the user before this event is raised, rather than after.  </p>\n</div>\n<p> This event can be handled in any application domain. However, the event is not necessarily raised in the application domain where the exception occurred. An exception is unhandled only if the entire stack for the thread has been unwound without finding an applicable exception handler, so the first place the event can be raised is in the application domain where the thread originated.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this event occurs only for the default application domain that is created by the system when an application is started. If an application creates additional application domains, specifying a delegate for this event in those applications domains has no effect.  </p>\n</div>\n<p> If the UnhandledException event is handled in the default application domain, it is raised there for any unhandled exception in any thread, no matter what application domain the thread started in. If the thread started in an application domain that has an event handler for UnhandledException, the event is raised in that application domain. If that application domain is not the default application domain, and there is also an event handler in the default application domain, the event is raised in both application domains.  </p>\n<p> For example, suppose a thread starts in application domain &quot;AD1&quot;, calls a method in application domain &quot;AD2&quot;, and from there calls a method in application domain &quot;AD3&quot;, where it throws an exception. The first application domain in which the UnhandledException event can be raised is &quot;AD1&quot;. If that application domain is not the default application domain, the event can also be raised in the default application domain.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The common language runtime suspends thread aborts while event handlers for the UnhandledException event are executing.  </p>\n</div>\n<p> If the event handler has a <a class=\"xref\" href=\"system.runtime.constrainedexecution.reliabilitycontractattribute\" data-linktype=\"relative-path\">ReliabilityContractAttribute</a> attribute with the appropriate flags, the event handler is treated as a constrained execution region.  </p>\n<p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, this event is not raised for exceptions that corrupt the state of the process, such as stack overflows or access violations, unless the event handler is security-critical and has the <a class=\"xref\" href=\"system.runtime.exceptionservices.handleprocesscorruptedstateexceptionsattribute\" data-linktype=\"relative-path\">HandleProcessCorruptedStateExceptionsAttribute</a> attribute.  </p>\n<p> In the .NET Framework versions 1.0 and 1.1, an unhandled exception that occurs in a thread other than the main application thread is caught by the runtime and therefore does not cause the application to terminate. Thus, it is possible for the UnhandledException event to be raised without the application terminating. Starting with the .NET Framework version 2.0, this backstop for unhandled exceptions in child threads was removed, because the cumulative effect of such silent failures included performance degradation, corrupted data, and lockups, all of which were difficult to debug. For more information, including a list of cases in which the runtime does not terminate, see <a href=\"../Topic/Exceptions%20in%20Managed%20Threads.md\" data-linktype=\"relative-path\">Exceptions in Managed Threads</a>.  </p>\n<p> To register an event handler for this event, you must have the required permissions, or a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.  </p>\n<h2 id=\"other-events-for-unhandled-exceptions\">Other Events for Unhandled Exceptions</h2>\n<p> For certain application models, the UnhandledException event can be preempted by other events if the unhandled exception occurs in the main application thread.  </p>\n<p> In applications that use Windows Forms, unhandled exceptions in the main application thread cause the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ThreadException\" data-linktype=\"relative-path\">System.Windows.Forms.Application.ThreadException</a> event to be raised. If this event is handled, the default behavior is that the unhandled exception does not terminate the application, although the application is left in an unknown state. In that case, the UnhandledException event is not raised. This behavior can be changed by using the application configuration file, or by using the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_SetUnhandledExceptionMode_\" data-linktype=\"relative-path\">SetUnhandledExceptionMode</a> method to change the mode to <a class=\"xref\" href=\"system.windows.forms.unhandledexceptionmode\" data-linktype=\"relative-path\">System.Windows.Forms.UnhandledExceptionMode</a> before the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_ThreadException\" data-linktype=\"relative-path\">ThreadException</a> event handler is hooked up. This applies only to the main application thread. The UnhandledException event is raised for unhandled exceptions thrown in other threads.  </p>\n<p> Starting with Microsoft Visual Studio 2005, the Visual Basic application framework provides another event for unhandled exceptions in the main application thread. See the <a class=\"xref\" href=\"microsoft.visualbasic.applicationservices.windowsformsapplicationbase#Microsoft_VisualBasic_ApplicationServices_WindowsFormsApplicationBase_UnhandledException\" data-linktype=\"relative-path\">Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException</a> event. This event has an event arguments object with the same name as the event arguments object used by UnhandledException, but with different properties. In particular, this event arguments object has an <a class=\"xref\" href=\"microsoft.visualbasic.applicationservices.unhandledexceptioneventargs#Microsoft_VisualBasic_ApplicationServices_UnhandledExceptionEventArgs_ExitApplication_\" data-linktype=\"relative-path\">ExitApplication</a> property that allows the application to continue running, ignoring the unhandled exception (and leaving the application in an unknown state). In that case, the UnhandledException event is not raised.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The followingexample demonstrates the UnhandledException event. It defines an event handler, <code>MyHandler</code>, that is invoked whenever an unhandled exception is thrown in the default application domain. It then throws two exceptions. The first is handled by a <strong>try/catch</strong> block. The second is unhandled and invokes the <code>MyHandle</code> routine before the application terminates.  </p>\n<pre><code class=\"lang-cs\" name=\"AppDomain_UnhandledException#1\">using System;\nusing System.Security.Permissions;\n\npublic class Example \n{\n   [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.ControlAppDomain)]\n   public static void Main()\n   {\n      AppDomain currentDomain = AppDomain.CurrentDomain;\n      currentDomain.UnhandledException += new UnhandledExceptionEventHandler(MyHandler);\n      \n      try {\n         throw new Exception(&quot;1&quot;);\n      } catch (Exception e) {\n         Console.WriteLine(&quot;Catch clause caught : {0} <br>&quot;, e.Message);\n      }\n\n      throw new Exception(&quot;2&quot;);\n   }\n   \n   static void MyHandler(object sender, UnhandledExceptionEventArgs args) \n   {\n      Exception e = (Exception) args.ExceptionObject;\n      Console.WriteLine(&quot;MyHandler caught : &quot; + e.Message);\n      Console.WriteLine(&quot;Runtime terminating: {0}&quot;, args.IsTerminating);\n   }\n}\n// The example displays the following output:\n//       Catch clause caught : 1\n//       \n//       MyHandler caught : 2\n//       Runtime terminating: True\n//       \n//       Unhandled Exception: System.Exception: 2\n//          at Example.Main()  \n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomain_UnhandledException#1\">Module Example\n   Sub Main()\n      Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n      AddHandler currentDomain.UnhandledException, AddressOf MyHandler\n      \n      Try\n         Throw New Exception(&quot;1&quot;)\n      Catch e As Exception\n         Console.WriteLine(&quot;Catch clause caught : &quot; + e.Message)\n         Console.WriteLine()\n      End Try\n      \n      Throw New Exception(&quot;2&quot;)\n   End Sub\n   \n   Sub MyHandler(sender As Object, args As UnhandledExceptionEventArgs)\n      Dim e As Exception = DirectCast(args.ExceptionObject, Exception)\n      Console.WriteLine(&quot;MyHandler caught : &quot; + e.Message)\n      Console.WriteLine(&quot;Runtime terminating: {0}&quot;, args.IsTerminating)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Catch clause caught : 1\n&#39;       \n&#39;       MyHandler caught : 2\n&#39;       Runtime terminating: True\n&#39;       \n&#39;       Unhandled Exception: System.Exception: 2\n&#39;          at Example.Main()\n</code></pre><pre><code class=\"lang-cpp\" name=\"AppDomain_UnhandledException#1\">// The example should be compiled with the /clr:pure compiler option.\nusing namespace System;\nusing namespace System::Security::Permissions;\n\npublic ref class Example\n{\n\n\nprivate:\n   static void MyHandler(Object^ sender, UnhandledExceptionEventArgs^ args)\n   {\n      Exception^ e = dynamic_cast&lt;Exception^&gt;(args-&gt;ExceptionObject);\n      Console::WriteLine( &quot;MyHandler caught : {0}&quot;, e-&gt;Message );\n      Console::WriteLine(&quot;Runtime terminating: {0}&quot;, args-&gt;IsTerminating);\n   }\n   \npublic: \n   [SecurityPermissionAttribute( SecurityAction::Demand, ControlAppDomain = true )]\n   static void Main()\n   {\n      AppDomain^ currentDomain = AppDomain::CurrentDomain;\n      currentDomain-&gt;UnhandledException += gcnew UnhandledExceptionEventHandler(Example::MyHandler);\n      try\n      {\n         throw gcnew Exception(&quot;1&quot;);\n      }\n      catch (Exception^ e) \n      {\n         Console::WriteLine( &quot;Catch clause caught : {0}<br>&quot;, e-&gt;Message );\n      }\n\n      throw gcnew Exception(&quot;2&quot;);\n   }\n};\n\nvoid main()\n{\n   Example::Main();\n}   \n// The example displays the following output:\n//       Catch clause caught : 1\n//       \n//       MyHandler caught : 2\n//       Runtime terminating: True\n//       \n//       Unhandled Exception: System.Exception: 2\n//          at Example.Main()\n//          at mainCRTStartup(String[] arguments)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_System__AppDomain_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_AppDomain_System__AppDomain_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_AppDomain.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _AppDomain.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_System__AppDomain_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_AppDomain_System__AppDomain_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_AppDomain.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _AppDomain.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_System__AppDomain_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_AppDomain_System__AppDomain_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_AppDomain.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _AppDomain.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomain_System__AppDomain_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_AppDomain_System__AppDomain_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_AppDomain.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _AppDomain.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.AppDomain.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.AppDomain.yml\">\r\n<meta name=\"APIName\" content=\"System.AppDomain\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ActivationContext\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.AppendPrivatePath\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ApplicationIdentity\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ApplicationTrust\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ApplyPolicy\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.AssemblyLoad\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.add_AssemblyLoad\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.remove_AssemblyLoad\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.AssemblyResolve\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.add_AssemblyResolve\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.remove_AssemblyResolve\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.BaseDirectory\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ClearPrivatePath\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ClearShadowCopyPath\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.CreateComInstanceFrom\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.CreateDomain\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.CreateInstance\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.CreateInstanceAndUnwrap\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.CreateInstanceFrom\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.CreateInstanceFromAndUnwrap\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.CurrentDomain\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.DefineDynamicAssembly\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.DoCallBack\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.DomainManager\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.DomainUnload\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.add_DomainUnload\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.remove_DomainUnload\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.DynamicDirectory\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.Evidence\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ExecuteAssembly\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ExecuteAssemblyByName\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.FirstChanceException\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.add_FirstChanceException\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.remove_FirstChanceException\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.FriendlyName\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.GetAssemblies\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.GetCurrentThreadId\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.GetData\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.GetType\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.Id\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.InitializeLifetimeService\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.IsCompatibilitySwitchSet\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.IsDefaultAppDomain\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.IsFinalizingForUnload\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.IsFullyTrusted\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.IsHomogenous\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.Load\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.MonitoringIsEnabled\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.MonitoringSurvivedMemorySize\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.MonitoringSurvivedProcessMemorySize\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.MonitoringTotalAllocatedMemorySize\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.MonitoringTotalProcessorTime\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.PermissionSet\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ProcessExit\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.add_ProcessExit\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.remove_ProcessExit\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ReflectionOnlyAssemblyResolve\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.add_ReflectionOnlyAssemblyResolve\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.remove_ReflectionOnlyAssemblyResolve\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ReflectionOnlyGetAssemblies\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.RelativeSearchPath\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ResourceResolve\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.add_ResourceResolve\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.remove_ResourceResolve\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.SetAppDomainPolicy\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.SetCachePath\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.SetData\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.SetDynamicBase\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.SetPrincipalPolicy\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.SetShadowCopyFiles\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.SetShadowCopyPath\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.SetThreadPrincipal\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.SetupInformation\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ShadowCopyFiles\">\r\n<meta name=\"APIName\" content=\"System.AppDomain._AppDomain.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.AppDomain._AppDomain.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.AppDomain._AppDomain.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.AppDomain._AppDomain.Invoke\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.ToString\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.TypeResolve\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.add_TypeResolve\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.remove_TypeResolve\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.UnhandledException\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.add_UnhandledException\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.remove_UnhandledException\">\r\n<meta name=\"APIName\" content=\"System.AppDomain.Unload\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"bbaac828-5526-5d21-bc00-200484a95d53\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\AppDomain.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an application domain, which is an isolated environment where applications execute. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.AppDomain\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.AppDomain.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.AppDomain.yml","open_to_public_contributors":true,"api_name":["System.AppDomain","System.AppDomain.ActivationContext","System.AppDomain.AppendPrivatePath","System.AppDomain.ApplicationIdentity","System.AppDomain.ApplicationTrust","System.AppDomain.ApplyPolicy","System.AppDomain.AssemblyLoad","System.AppDomain.add_AssemblyLoad","System.AppDomain.remove_AssemblyLoad","System.AppDomain.AssemblyResolve","System.AppDomain.add_AssemblyResolve","System.AppDomain.remove_AssemblyResolve","System.AppDomain.BaseDirectory","System.AppDomain.ClearPrivatePath","System.AppDomain.ClearShadowCopyPath","System.AppDomain.CreateComInstanceFrom","System.AppDomain.CreateDomain","System.AppDomain.CreateInstance","System.AppDomain.CreateInstanceAndUnwrap","System.AppDomain.CreateInstanceFrom","System.AppDomain.CreateInstanceFromAndUnwrap","System.AppDomain.CurrentDomain","System.AppDomain.DefineDynamicAssembly","System.AppDomain.DoCallBack","System.AppDomain.DomainManager","System.AppDomain.DomainUnload","System.AppDomain.add_DomainUnload","System.AppDomain.remove_DomainUnload","System.AppDomain.DynamicDirectory","System.AppDomain.Evidence","System.AppDomain.ExecuteAssembly","System.AppDomain.ExecuteAssemblyByName","System.AppDomain.FirstChanceException","System.AppDomain.add_FirstChanceException","System.AppDomain.remove_FirstChanceException","System.AppDomain.FriendlyName","System.AppDomain.GetAssemblies","System.AppDomain.GetCurrentThreadId","System.AppDomain.GetData","System.AppDomain.GetType","System.AppDomain.Id","System.AppDomain.InitializeLifetimeService","System.AppDomain.IsCompatibilitySwitchSet","System.AppDomain.IsDefaultAppDomain","System.AppDomain.IsFinalizingForUnload","System.AppDomain.IsFullyTrusted","System.AppDomain.IsHomogenous","System.AppDomain.Load","System.AppDomain.MonitoringIsEnabled","System.AppDomain.MonitoringSurvivedMemorySize","System.AppDomain.MonitoringSurvivedProcessMemorySize","System.AppDomain.MonitoringTotalAllocatedMemorySize","System.AppDomain.MonitoringTotalProcessorTime","System.AppDomain.PermissionSet","System.AppDomain.ProcessExit","System.AppDomain.add_ProcessExit","System.AppDomain.remove_ProcessExit","System.AppDomain.ReflectionOnlyAssemblyResolve","System.AppDomain.add_ReflectionOnlyAssemblyResolve","System.AppDomain.remove_ReflectionOnlyAssemblyResolve","System.AppDomain.ReflectionOnlyGetAssemblies","System.AppDomain.RelativeSearchPath","System.AppDomain.ResourceResolve","System.AppDomain.add_ResourceResolve","System.AppDomain.remove_ResourceResolve","System.AppDomain.SetAppDomainPolicy","System.AppDomain.SetCachePath","System.AppDomain.SetData","System.AppDomain.SetDynamicBase","System.AppDomain.SetPrincipalPolicy","System.AppDomain.SetShadowCopyFiles","System.AppDomain.SetShadowCopyPath","System.AppDomain.SetThreadPrincipal","System.AppDomain.SetupInformation","System.AppDomain.ShadowCopyFiles","System.AppDomain._AppDomain.GetIDsOfNames","System.AppDomain._AppDomain.GetTypeInfo","System.AppDomain._AppDomain.GetTypeInfoCount","System.AppDomain._AppDomain.Invoke","System.AppDomain.ToString","System.AppDomain.TypeResolve","System.AppDomain.add_TypeResolve","System.AppDomain.remove_TypeResolve","System.AppDomain.UnhandledException","System.AppDomain.add_UnhandledException","System.AppDomain.remove_UnhandledException","System.AppDomain.Unload"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.AppDomain","System::AppDomain","System.AppDomain.ActivationContext","System::AppDomain::ActivationContext","System.AppDomain.AppendPrivatePath","System::AppDomain::AppendPrivatePath","System.AppDomain.ApplicationIdentity","System::AppDomain::ApplicationIdentity","System.AppDomain.ApplicationTrust","System::AppDomain::ApplicationTrust","System.AppDomain.ApplyPolicy","System::AppDomain::ApplyPolicy","System.AppDomain.AssemblyLoad","System::AppDomain::AssemblyLoad","System.AppDomain.AssemblyResolve","System::AppDomain::AssemblyResolve","System.AppDomain.BaseDirectory","System::AppDomain::BaseDirectory","System.AppDomain.ClearPrivatePath","System::AppDomain::ClearPrivatePath","System.AppDomain.ClearShadowCopyPath","System::AppDomain::ClearShadowCopyPath","System.AppDomain.CreateComInstanceFrom","System::AppDomain::CreateComInstanceFrom","System.AppDomain.CreateDomain","System::AppDomain::CreateDomain","System.AppDomain.CreateInstance","System::AppDomain::CreateInstance","System.AppDomain.CreateInstanceAndUnwrap","System::AppDomain::CreateInstanceAndUnwrap","System.AppDomain.CreateInstanceFrom","System::AppDomain::CreateInstanceFrom","System.AppDomain.CreateInstanceFromAndUnwrap","System::AppDomain::CreateInstanceFromAndUnwrap","System.AppDomain.CurrentDomain","System::AppDomain::CurrentDomain","System.AppDomain.DefineDynamicAssembly","System::AppDomain::DefineDynamicAssembly","System.AppDomain.DoCallBack","System::AppDomain::DoCallBack","System.AppDomain.DomainManager","System::AppDomain::DomainManager","System.AppDomain.DomainUnload","System::AppDomain::DomainUnload","System.AppDomain.DynamicDirectory","System::AppDomain::DynamicDirectory","System.AppDomain.Evidence","System::AppDomain::Evidence","System.AppDomain.ExecuteAssembly","System::AppDomain::ExecuteAssembly","System.AppDomain.ExecuteAssemblyByName","System::AppDomain::ExecuteAssemblyByName","System.AppDomain.FirstChanceException","System::AppDomain::FirstChanceException","System.AppDomain.FriendlyName","System::AppDomain::FriendlyName","System.AppDomain.GetAssemblies","System::AppDomain::GetAssemblies","System.AppDomain.GetCurrentThreadId","System::AppDomain::GetCurrentThreadId","System.AppDomain.GetData","System::AppDomain::GetData","System.AppDomain.GetType","System::AppDomain::GetType","System.AppDomain.Id","System::AppDomain::Id","System.AppDomain.InitializeLifetimeService","System::AppDomain::InitializeLifetimeService","System.AppDomain.IsCompatibilitySwitchSet","System::AppDomain::IsCompatibilitySwitchSet","System.AppDomain.IsDefaultAppDomain","System::AppDomain::IsDefaultAppDomain","System.AppDomain.IsFinalizingForUnload","System::AppDomain::IsFinalizingForUnload","System.AppDomain.IsFullyTrusted","System::AppDomain::IsFullyTrusted","System.AppDomain.IsHomogenous","System::AppDomain::IsHomogenous","System.AppDomain.Load","System::AppDomain::Load","System.AppDomain.MonitoringIsEnabled","System::AppDomain::MonitoringIsEnabled","System.AppDomain.MonitoringSurvivedMemorySize","System::AppDomain::MonitoringSurvivedMemorySize","System.AppDomain.MonitoringSurvivedProcessMemorySize","System::AppDomain::MonitoringSurvivedProcessMemorySize","System.AppDomain.MonitoringTotalAllocatedMemorySize","System::AppDomain::MonitoringTotalAllocatedMemorySize","System.AppDomain.MonitoringTotalProcessorTime","System::AppDomain::MonitoringTotalProcessorTime","System.AppDomain.PermissionSet","System::AppDomain::PermissionSet","System.AppDomain.ProcessExit","System::AppDomain::ProcessExit","System.AppDomain.ReflectionOnlyAssemblyResolve","System::AppDomain::ReflectionOnlyAssemblyResolve","System.AppDomain.ReflectionOnlyGetAssemblies","System::AppDomain::ReflectionOnlyGetAssemblies","System.AppDomain.RelativeSearchPath","System::AppDomain::RelativeSearchPath","System.AppDomain.ResourceResolve","System::AppDomain::ResourceResolve","System.AppDomain.SetAppDomainPolicy","System::AppDomain::SetAppDomainPolicy","System.AppDomain.SetCachePath","System::AppDomain::SetCachePath","System.AppDomain.SetData","System::AppDomain::SetData","System.AppDomain.SetDynamicBase","System::AppDomain::SetDynamicBase","System.AppDomain.SetPrincipalPolicy","System::AppDomain::SetPrincipalPolicy","System.AppDomain.SetShadowCopyFiles","System::AppDomain::SetShadowCopyFiles","System.AppDomain.SetShadowCopyPath","System::AppDomain::SetShadowCopyPath","System.AppDomain.SetThreadPrincipal","System::AppDomain::SetThreadPrincipal","System.AppDomain.SetupInformation","System::AppDomain::SetupInformation","System.AppDomain.ShadowCopyFiles","System::AppDomain::ShadowCopyFiles","System.AppDomain.System#_AppDomain#GetIDsOfNames","System::AppDomain::System#_AppDomain#GetIDsOfNames","System.AppDomain.System#_AppDomain#GetTypeInfo","System::AppDomain::System#_AppDomain#GetTypeInfo","System.AppDomain.System#_AppDomain#GetTypeInfoCount","System::AppDomain::System#_AppDomain#GetTypeInfoCount","System.AppDomain.System#_AppDomain#Invoke","System::AppDomain::System#_AppDomain#Invoke","System.AppDomain.ToString","System::AppDomain::ToString","System.AppDomain.TypeResolve","System::AppDomain::TypeResolve","System.AppDomain.UnhandledException","System::AppDomain::UnhandledException","System.AppDomain.Unload","System::AppDomain::Unload"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"bbaac828-5526-5d21-bc00-200484a95d53","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\AppDomain.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/AppDomain.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AppDomain class | Microsoft Docs","_op_ogTitle":"AppDomain class","description":"Represents an application domain, which is an isolated environment where applications execute. This class cannot be inherited.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.AppDomain","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.appdomain","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.appdomain","fileRelativePath":"System.AppDomain.html"},"themesRelativePathToOutputRoot":"_themes/"}