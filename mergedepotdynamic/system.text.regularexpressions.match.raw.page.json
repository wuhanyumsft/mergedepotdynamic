{"content":"    \r\n    <h1 id=\"System_Text_RegularExpressions_Match\">\r\n      <span class=\"lang-csharp\">Match</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the results from a single regular expression match.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class Match : System.Text.RegularExpressions.Group</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Group</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Match</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Index\" data-linktype=\"relative-path\">Index</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Length\" data-linktype=\"relative-path\">Length</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Value\" data-linktype=\"relative-path\">Value</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Captures\" data-linktype=\"relative-path\">Captures</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Success\" data-linktype=\"relative-path\">Success</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Synchronized_System_Text_RegularExpressions_Group_\" data-linktype=\"relative-path\">Synchronized(Group)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Match object is immutable and has no public constructor. An instance of the Match class is returned by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_\" data-linktype=\"relative-path\">Match</a> method and represents the first pattern match in a string. Subsequent matches are represented by Match objects returned by the <a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_NextMatch_\" data-linktype=\"relative-path\">NextMatch</a> method. In addition, a <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> object that consists of zero, one, or more Match objects is returned by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_\" data-linktype=\"relative-path\">Matches</a> method.  </p>\n<p> If the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_\" data-linktype=\"relative-path\">Matches</a> method fails to match a regular expression pattern in an input string, it returns an empty <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> object. You can then use a <code>foreach</code> construct in C# or a <code>For Each</code> construct in Visual Basic to iterate the collection.  </p>\n<p> If the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_\" data-linktype=\"relative-path\">Match</a> method fails to match the regular expression pattern, it returns a Match object that is equal to <a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_Empty_\" data-linktype=\"relative-path\">Empty</a>. You can use the <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Success_\" data-linktype=\"relative-path\">Success</a> property to determine whether the match was successful. The following example provides an illustration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Match.Class#1\">      // Search for a pattern that is not found in the input string.\n      string pattern = &quot;dog&quot;;\n      string input = &quot;The cat saw the other cats playing in the back yard.&quot;;\n      Match match = Regex.Match(input, pattern);\n      if (match.Success )\n         // Report position as a one-based integer.\n         Console.WriteLine(&quot;&#39;{0}&#39; was found at position {1} in &#39;{2}&#39;.&quot;, \n                           match.Value, match.Index + 1, input);\n      else\n         Console.WriteLine(&quot;The pattern &#39;{0}&#39; was not found in &#39;{1}&#39;.&quot;,\n                           pattern, input);\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Match.Class#1\">      &#39; Search for a pattern that is not found in the input string.\n      Dim pattern As String = &quot;dog&quot;\n      Dim input As String = &quot;The cat saw the other cats playing in the back yard.&quot;\n      Dim match As Match = Regex.Match(input, pattern)\n      If match.Success Then\n         &#39; Report position as a one-based integer.\n         Console.WriteLine(&quot;&#39;{0}&#39; was found at position {1} in &#39;{2}&#39;.&quot;, _ \n                           match.Value, match.Index + 1, input)\n      Else\n         Console.WriteLine(&quot;The pattern &#39;{0}&#39; was not found in &#39;{1}&#39;.&quot;, _\n                           pattern, input)\n      End If\n</code></pre><p> If a pattern match is successful, the <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Value_\" data-linktype=\"relative-path\">Value</a> property contains the matched substring, the <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Index_\" data-linktype=\"relative-path\">Index</a> property indicates the zero-based starting position of the matched substring in the input string, and the <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Length_\" data-linktype=\"relative-path\">Length</a> property indicates the length of matched substring in the input string.  </p>\n<p> Because a single match can involve multiple capturing groups, Match has a <a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_Groups_\" data-linktype=\"relative-path\">Groups</a> property that returns the <a class=\"xref\" href=\"system.text.regularexpressions.groupcollection\" data-linktype=\"relative-path\">GroupCollection</a>. The Match instance itself is equivalent to the first object in the collection, at <code>Match.Groups[0]</code> (<code>Match.Groups(0)</code> in Visual Basic), which represents the entire match. You can access the captured groups in a match in the following ways:  </p>\n<ul>\n<li><p>You can iterate the members of the <a class=\"xref\" href=\"system.text.regularexpressions.groupcollection\" data-linktype=\"relative-path\">GroupCollection</a> object  by using a <code>foreach</code> (C#) or <code>For Each</code> (Visual Basic) construct.  </p>\n</li>\n<li><p>You can use the [GroupCollection.Item&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=fullName&gt; property to retrieve groups by the number of the capturing group. Note that you can determine which numbered groups are present in a regular expression by calling the instance <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_GetGroupNumbers_\" data-linktype=\"relative-path\">GetGroupNumbers</a> method.  </p>\n</li>\n<li><p>You can use the [GroupCollection.Item&lt;xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=fullName&gt; property to retrieve groups by the name of the capturing group. Note that you can determine which named groups are present in a regular expression by calling the instance <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_GetGroupNames\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.GetGroupNames()</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_Match_Empty\" data-linktype=\"self-bookmark\">Empty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the empty group. All failed matches return this empty match.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_Match_Groups\" data-linktype=\"self-bookmark\">Groups</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of groups matched by the regular expression.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_Match_NextMatch\" data-linktype=\"self-bookmark\">NextMatch()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a new <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_Match_Result_System_String_\" data-linktype=\"self-bookmark\">Result(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the expansion of the specified replacement pattern.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_RegularExpressions_Match_Synchronized_System_Text_RegularExpressions_Match_\" data-linktype=\"self-bookmark\">Synchronized(Match)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> instance equivalent to the one supplied that is suitable to share between multiple threads.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_Match_Empty\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_Match_Empty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Empty</div>        \r\n          </div>\r\n    \r\n            <p>Gets the empty group. All failed matches return this empty match.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.RegularExpressions.Match Empty { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a></div>\r\n                  </div>\r\n                  <p>An empty match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property should not be used to determine if a match is successful. Instead, use the <code>Match.Success</code> property (which is inherited from <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Success_\" data-linktype=\"relative-path\">Success</a>).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_Match_Groups\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_Match_Groups_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Groups</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of groups matched by the regular expression.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.groupcollection\" data-linktype=\"relative-path\">GroupCollection</a></div>\r\n                  </div>\r\n                  <p>The character groups matched by the pattern.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A regular expression pattern can include subexpressions, which are defined by enclosing a portion of the regular expression pattern in parentheses. Every such subexpression forms a group. The Groups property provides access to information about those subexpression matches. For example, the regular expression pattern <code>(\\d{3})-(\\d{3}-\\d{4})</code>, which matches North American telephone numbers, has two subexpressions. The first consists of the area code, which composes the first three digits of the telephone number. This group is captured by the first portion of the regular expression, <code>(\\d{3})</code>.The second consists of the individual telephone number, which composes the last seven digits of the telephone number. This group is captured by the second portion of the regular expression, <code>(\\d{3}-\\d{4})</code>. These two groups can then be retrieved from the <a class=\"xref\" href=\"system.text.regularexpressions.groupcollection\" data-linktype=\"relative-path\">GroupCollection</a> object that is returned by the Groups property, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Match.Groups#1\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;(\\d{3})-(\\d{3}-\\d{4})&quot;\n      Dim input As String = &quot;212-555-6666 906-932-1111 415-222-3333 425-888-9999&quot;\n      Dim matches As MatchCollection = Regex.Matches(input, pattern)\n      \n      For Each match As Match In matches\n         Console.WriteLine(&quot;Area Code:        {0}&quot;, match.Groups(1).Value)\n         Console.WriteLine(&quot;Telephone number: {0}&quot;, match.Groups(2).Value)\n         Console.WriteLine()\n      Next\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Area Code:        212\n&#39;       Telephone number: 555-6666\n&#39;       \n&#39;       Area Code:        906\n&#39;       Telephone number: 932-1111\n&#39;       \n&#39;       Area Code:        415\n&#39;       Telephone number: 222-3333\n&#39;       \n&#39;       Area Code:        425\n&#39;       Telephone number: 888-9999\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Match.Groups#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = @&quot;(\\d{3})-(\\d{3}-\\d{4})&quot;;\n      string input = &quot;212-555-6666 906-932-1111 415-222-3333 425-888-9999&quot;;\n      MatchCollection matches = Regex.Matches(input, pattern);\n      \n      foreach (Match match in matches)\n      {\n         Console.WriteLine(&quot;Area Code:        {0}&quot;, match.Groups[1].Value);\n         Console.WriteLine(&quot;Telephone number: {0}&quot;, match.Groups[2].Value);\n         Console.WriteLine();\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//       Area Code:        212\n//       Telephone number: 555-6666\n//       \n//       Area Code:        906\n//       Telephone number: 932-1111\n//       \n//       Area Code:        415\n//       Telephone number: 222-3333\n//       \n//       Area Code:        425\n//       Telephone number: 888-9999\n</code></pre><p> The <a class=\"xref\" href=\"system.text.regularexpressions.groupcollection\" data-linktype=\"relative-path\">GroupCollection</a> object returned by the Groups property is a zero-based collection object that always has at least one member. If the regular expression engine cannot find any matches in a particular input string, the <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Success_\" data-linktype=\"relative-path\">Success</a> property of the single <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object in the collection (the object at index 0) is set to <code>false</code> and the <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Value_\" data-linktype=\"relative-path\">Value</a> property is set to <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>. If the regular expression engine can find a match, the first element of the <a class=\"xref\" href=\"system.text.regularexpressions.groupcollection\" data-linktype=\"relative-path\">GroupCollection</a> object (the element at index 0) returned by the Groups property contains a string that matches the entire regular expression pattern. Each subsequent element, from index one upward, represents a captured group, if the regular expression includes capturing groups. For more information, see the &quot;Grouping Constructs and Regular Expression Objects&quot; section of the <a href=\"../Topic/Grouping%20Constructs%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Grouping Constructs</a> article.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to match a regular expression pattern against a sample string. The example uses the Groups property to store information that is retrieved by the match for display to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"Regex Match, NextMatch, Groups, Captures#8\">using System;\nusing System.Text.RegularExpressions;\n\nclass Example \n{\n   static void Main() \n   {\n      string text = &quot;One car red car blue car&quot;;\n      string pat = @&quot;(\\w+)\\s+(car)&quot;;\n\n      // Instantiate the regular expression object.\n      Regex r = new Regex(pat, RegexOptions.IgnoreCase);\n      \n      // Match the regular expression pattern against a text string.\n      Match m = r.Match(text);\n      int matchCount = 0;\n      while (m.Success) \n      {\n         Console.WriteLine(&quot;Match&quot;+ (++matchCount));\n         for (int i = 1; i &lt;= 2; i++) \n         {\n            Group g = m.Groups[i];\n            Console.WriteLine(&quot;Group&quot;+i+&quot;=&#39;&quot; + g + &quot;&#39;&quot;);\n            CaptureCollection cc = g.Captures;\n            for (int j = 0; j &lt; cc.Count; j++) \n            {\n               Capture c = cc[j];\n               System.Console.WriteLine(&quot;Capture&quot;+j+&quot;=&#39;&quot; + c + &quot;&#39;, Position=&quot;+c.Index);\n            }\n         }\n         m = m.NextMatch();\n      }\n   }\n}\n// This example displays the following output:\n//       Match1\n//       Group1=&#39;One&#39;\n//       Capture0=&#39;One&#39;, Position=0\n//       Group2=&#39;car&#39;\n//       Capture0=&#39;car&#39;, Position=4\n//       Match2\n//       Group1=&#39;red&#39;\n//       Capture0=&#39;red&#39;, Position=8\n//       Group2=&#39;car&#39;\n//       Capture0=&#39;car&#39;, Position=12\n//       Match3\n//       Group1=&#39;blue&#39;\n//       Capture0=&#39;blue&#39;, Position=16\n//       Group2=&#39;car&#39;\n//       Capture0=&#39;car&#39;, Position=21\n</code></pre><pre><code class=\"lang-vb\" name=\"Regex Match, NextMatch, Groups, Captures#8\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim text As String = &quot;One car red car blue car&quot;\n      Dim pattern As String = &quot;(\\w+)\\s+(car)&quot;\n\n      &#39; Instantiate the regular expression object.\n      Dim r As Regex = new Regex(pattern, RegexOptions.IgnoreCase)\n\n      &#39; Match the regular expression pattern against a text string.\n      Dim m As Match = r.Match(text)\n      Dim matchcount as Integer = 0\n      Do While m.Success\n         matchCount += 1\n         Console.WriteLine(&quot;Match&quot; &amp; (matchCount))\n         Dim i As Integer\n         For i = 1 to 2\n            Dim g as Group = m.Groups(i)\n            Console.WriteLine(&quot;Group&quot; &amp; i &amp; &quot;=&#39;&quot; &amp; g.ToString() &amp; &quot;&#39;&quot;)\n            Dim cc As CaptureCollection = g.Captures\n            Dim j As Integer \n            For j = 0 to cc.Count - 1\n      \t      Dim c As Capture = cc(j)\n               Console.WriteLine(&quot;Capture&quot; &amp; j &amp; &quot;=&#39;&quot; &amp; c.ToString() _\n                  &amp; &quot;&#39;, Position=&quot; &amp; c.Index)\n            Next \n         Next \n         m = m.NextMatch()\n      Loop\n   End Sub\nEnd Module\n&#39; This example displays the following output:\n&#39;       Match1\n&#39;       Group1=&#39;One&#39;\n&#39;       Capture0=&#39;One&#39;, Position=0\n&#39;       Group2=&#39;car&#39;\n&#39;       Capture0=&#39;car&#39;, Position=4\n&#39;       Match2\n&#39;       Group1=&#39;red&#39;\n&#39;       Capture0=&#39;red&#39;, Position=8\n&#39;       Group2=&#39;car&#39;\n&#39;       Capture0=&#39;car&#39;, Position=12\n&#39;       Match3\n&#39;       Group1=&#39;blue&#39;\n&#39;       Capture0=&#39;blue&#39;, Position=16\n&#39;       Group2=&#39;car&#39;\n&#39;       Capture0=&#39;car&#39;, Position=21\n</code></pre><pre><code class=\"lang-cpp\" name=\"Regex Match, NextMatch, Groups, Captures#8\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Text::RegularExpressions;\nvoid main()\n{\n   \n   String^ text = &quot;One car red car blue car&quot;;\n   String^ pat = &quot;(\\\\w+)\\\\s+(car)&quot;;\n   \n   // Compile the regular expression.\n   Regex^ r = gcnew Regex( pat,RegexOptions::IgnoreCase );\n   \n   // Match the regular expression pattern against a text string.\n   Match^ m = r-&gt;Match(text);\n   int matchCount = 0;\n   while ( m-&gt;Success )\n   {\n      Console::WriteLine( &quot;Match{0}&quot;, ++matchCount );\n      for ( int i = 1; i &lt;= 2; i++ )\n      {\n         Group^ g = m-&gt;Groups[ i ];\n         Console::WriteLine( &quot;Group{0}=&#39;{1}&#39;&quot;, i, g );\n         CaptureCollection^ cc = g-&gt;Captures;\n         for ( int j = 0; j &lt; cc-&gt;Count; j++ )\n         {\n            Capture^ c = cc[ j ];\n            System::Console::WriteLine( &quot;Capture{0}=&#39;{1}&#39;, Position={2}&quot;, j, c, c-&gt;Index );\n         }\n      }\n      m = m-&gt;NextMatch();\n   }\n}  \n// This example displays the following output:\n//       Match1\n//       Group1=&#39;One&#39;\n//       Capture0=&#39;One&#39;, Position=0\n//       Group2=&#39;car&#39;\n//       Capture0=&#39;car&#39;, Position=4\n//       Match2\n//       Group1=&#39;red&#39;\n//       Capture0=&#39;red&#39;, Position=8\n//       Group2=&#39;car&#39;\n//       Capture0=&#39;car&#39;, Position=12\n//       Match3\n//       Group1=&#39;blue&#39;\n//       Capture0=&#39;blue&#39;, Position=16\n//       Group2=&#39;car&#39;\n//       Capture0=&#39;car&#39;, Position=21\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_Match_NextMatch\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_Match_NextMatch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextMatch()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a new <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.RegularExpressions.Match NextMatch ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a></div>\r\n                  </div>\r\n                  <p>The next regular expression match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></div>\r\n                  </div>\r\n                  <p>A time-out occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is similar to calling <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_System_String_System_Int32_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Match(String,Int32)</a> again and passing (<code>Index+Length</code>) as the new starting position.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method does not modify the current instance. Instead, it returns a new <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object that contains information about the next match.  </p>\n</div>\n<p> Attempting to retrieve the next match may throw a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> if a time-out value for matching operations is in effect and the attempt to find the next match exceeds that time-out interval.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the NextMatch method to capture regular expression matches beyond the first match.  </p>\n<pre><code class=\"lang-cs\" name=\"Regex Match, NextMatch, Groups, Captures#8\">using System;\nusing System.Text.RegularExpressions;\n\nclass Example \n{\n   static void Main() \n   {\n      string text = &quot;One car red car blue car&quot;;\n      string pat = @&quot;(\\w+)\\s+(car)&quot;;\n\n      // Instantiate the regular expression object.\n      Regex r = new Regex(pat, RegexOptions.IgnoreCase);\n      \n      // Match the regular expression pattern against a text string.\n      Match m = r.Match(text);\n      int matchCount = 0;\n      while (m.Success) \n      {\n         Console.WriteLine(&quot;Match&quot;+ (++matchCount));\n         for (int i = 1; i &lt;= 2; i++) \n         {\n            Group g = m.Groups[i];\n            Console.WriteLine(&quot;Group&quot;+i+&quot;=&#39;&quot; + g + &quot;&#39;&quot;);\n            CaptureCollection cc = g.Captures;\n            for (int j = 0; j &lt; cc.Count; j++) \n            {\n               Capture c = cc[j];\n               System.Console.WriteLine(&quot;Capture&quot;+j+&quot;=&#39;&quot; + c + &quot;&#39;, Position=&quot;+c.Index);\n            }\n         }\n         m = m.NextMatch();\n      }\n   }\n}\n// This example displays the following output:\n//       Match1\n//       Group1=&#39;One&#39;\n//       Capture0=&#39;One&#39;, Position=0\n//       Group2=&#39;car&#39;\n//       Capture0=&#39;car&#39;, Position=4\n//       Match2\n//       Group1=&#39;red&#39;\n//       Capture0=&#39;red&#39;, Position=8\n//       Group2=&#39;car&#39;\n//       Capture0=&#39;car&#39;, Position=12\n//       Match3\n//       Group1=&#39;blue&#39;\n//       Capture0=&#39;blue&#39;, Position=16\n//       Group2=&#39;car&#39;\n//       Capture0=&#39;car&#39;, Position=21\n</code></pre><pre><code class=\"lang-vb\" name=\"Regex Match, NextMatch, Groups, Captures#8\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim text As String = &quot;One car red car blue car&quot;\n      Dim pattern As String = &quot;(\\w+)\\s+(car)&quot;\n\n      &#39; Instantiate the regular expression object.\n      Dim r As Regex = new Regex(pattern, RegexOptions.IgnoreCase)\n\n      &#39; Match the regular expression pattern against a text string.\n      Dim m As Match = r.Match(text)\n      Dim matchcount as Integer = 0\n      Do While m.Success\n         matchCount += 1\n         Console.WriteLine(&quot;Match&quot; &amp; (matchCount))\n         Dim i As Integer\n         For i = 1 to 2\n            Dim g as Group = m.Groups(i)\n            Console.WriteLine(&quot;Group&quot; &amp; i &amp; &quot;=&#39;&quot; &amp; g.ToString() &amp; &quot;&#39;&quot;)\n            Dim cc As CaptureCollection = g.Captures\n            Dim j As Integer \n            For j = 0 to cc.Count - 1\n      \t      Dim c As Capture = cc(j)\n               Console.WriteLine(&quot;Capture&quot; &amp; j &amp; &quot;=&#39;&quot; &amp; c.ToString() _\n                  &amp; &quot;&#39;, Position=&quot; &amp; c.Index)\n            Next \n         Next \n         m = m.NextMatch()\n      Loop\n   End Sub\nEnd Module\n&#39; This example displays the following output:\n&#39;       Match1\n&#39;       Group1=&#39;One&#39;\n&#39;       Capture0=&#39;One&#39;, Position=0\n&#39;       Group2=&#39;car&#39;\n&#39;       Capture0=&#39;car&#39;, Position=4\n&#39;       Match2\n&#39;       Group1=&#39;red&#39;\n&#39;       Capture0=&#39;red&#39;, Position=8\n&#39;       Group2=&#39;car&#39;\n&#39;       Capture0=&#39;car&#39;, Position=12\n&#39;       Match3\n&#39;       Group1=&#39;blue&#39;\n&#39;       Capture0=&#39;blue&#39;, Position=16\n&#39;       Group2=&#39;car&#39;\n&#39;       Capture0=&#39;car&#39;, Position=21\n</code></pre><pre><code class=\"lang-cpp\" name=\"Regex Match, NextMatch, Groups, Captures#8\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Text::RegularExpressions;\nvoid main()\n{\n   \n   String^ text = &quot;One car red car blue car&quot;;\n   String^ pat = &quot;(\\\\w+)\\\\s+(car)&quot;;\n   \n   // Compile the regular expression.\n   Regex^ r = gcnew Regex( pat,RegexOptions::IgnoreCase );\n   \n   // Match the regular expression pattern against a text string.\n   Match^ m = r-&gt;Match(text);\n   int matchCount = 0;\n   while ( m-&gt;Success )\n   {\n      Console::WriteLine( &quot;Match{0}&quot;, ++matchCount );\n      for ( int i = 1; i &lt;= 2; i++ )\n      {\n         Group^ g = m-&gt;Groups[ i ];\n         Console::WriteLine( &quot;Group{0}=&#39;{1}&#39;&quot;, i, g );\n         CaptureCollection^ cc = g-&gt;Captures;\n         for ( int j = 0; j &lt; cc-&gt;Count; j++ )\n         {\n            Capture^ c = cc[ j ];\n            System::Console::WriteLine( &quot;Capture{0}=&#39;{1}&#39;, Position={2}&quot;, j, c, c-&gt;Index );\n         }\n      }\n      m = m-&gt;NextMatch();\n   }\n}  \n// This example displays the following output:\n//       Match1\n//       Group1=&#39;One&#39;\n//       Capture0=&#39;One&#39;, Position=0\n//       Group2=&#39;car&#39;\n//       Capture0=&#39;car&#39;, Position=4\n//       Match2\n//       Group1=&#39;red&#39;\n//       Capture0=&#39;red&#39;, Position=8\n//       Group2=&#39;car&#39;\n//       Capture0=&#39;car&#39;, Position=12\n//       Match3\n//       Group1=&#39;blue&#39;\n//       Capture0=&#39;blue&#39;, Position=16\n//       Group2=&#39;car&#39;\n//       Capture0=&#39;car&#39;, Position=21\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_Match_Result_System_String_\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_Match_Result_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Result(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the expansion of the specified replacement pattern.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string Result (string replacement);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>replacement</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The replacement pattern to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The expanded version of the <code>replacement</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>replacement</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Expansion is not allowed for this pattern.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Whereas the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Replace_\" data-linktype=\"relative-path\">Replace</a> method replaces all matches in an input string with a specified replacement pattern, the Result method replaces a single match with a specified replacement pattern. Because it operates on an individual match, it is also possible to perform processing on the matched string before you call the Result method.  </p>\n<p> The <code>replacement</code> parameter is a standard regular expression replacement pattern. It can consist of literal characters and regular expression substitutions. For more information, see <a href=\"../Topic/Substitutions%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Substitutions</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example replaces the hyphens that begin and end a parenthetical expression with parentheses.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Match.Result#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = &quot;--(.+?)--&quot;;\n      string replacement = &quot;($1)&quot;;\n      string input = &quot;He said--decisively--that the time--whatever time it was--had come.&quot;;\n      foreach (Match match in Regex.Matches(input, pattern))\n      {\n         string result = match.Result(replacement);\n         Console.WriteLine(result);\n      }\n   }\n}\n// The example displays the following output:\n//       (decisively)\n//       (whatever time it was)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Match.Result#1\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;--(.+?)--&quot;\n      Dim replacement As String = &quot;($1)&quot;\n      Dim input As String = &quot;He said--decisively--that the time--whatever time it was--had come.&quot;\n      For Each match As Match In Regex.Matches(input, pattern)\n         Dim result As String = match.Result(replacement)\n         Console.WriteLine(result)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       (decisively)\n&#39;       (whatever time it was)\n</code></pre><p> The regular expression pattern <code>--(.+?)--</code> is interpreted as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--</code></td>\n<td>Match two hyphens.</td>\n</tr>\n<tr>\n<td><code>(.+?)</code></td>\n<td>Match any character one or more times, but as few times as possible. This is the first capturing group.</td>\n</tr>\n<tr>\n<td><code>--</code></td>\n<td>Match two hyphens.</td>\n</tr>\n</tbody>\n</table>\n<p> Note that the regular expression pattern <code>--(.+?)--</code> uses the lazy quantifier <code>+?</code>. If the greedy quantifier <code>+</code> were used instead, the regular expression engine would find only a single match in the input string.  </p>\n<p> The replacement string <code>($1)</code> replaces the match with the first captured group, which is enclosed in parentheses.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_RegularExpressions_Match_Synchronized_System_Text_RegularExpressions_Match_\">\r\n    \r\n            <a id=\"System_Text_RegularExpressions_Match_Synchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Synchronized(Match)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> instance equivalent to the one supplied that is suitable to share between multiple threads.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A regular expression match equivalent to the one expected.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a></div>\r\n                  </div>\r\n                  <p>A regular expression match that is suitable to share between multiple threads.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>inner</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.RegularExpressions.Match.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.RegularExpressions.Match.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Match\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Match.Empty\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Match.Groups\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Match.NextMatch\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Match.Result\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Match.Synchronized\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"29ce89b3-39f2-bc7e-3342-e7d505fe4749\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the results from a single regular expression match.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Text.RegularExpressions/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.RegularExpressions.Match\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.RegularExpressions.Match.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.RegularExpressions.Match.yml","open_to_public_contributors":true,"api_name":["System.Text.RegularExpressions.Match","System.Text.RegularExpressions.Match.Empty","System.Text.RegularExpressions.Match.Groups","System.Text.RegularExpressions.Match.NextMatch","System.Text.RegularExpressions.Match.Result","System.Text.RegularExpressions.Match.Synchronized"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.RegularExpressions.Match","System::Text::RegularExpressions::Match","System.Text.RegularExpressions.Match.Empty","System::Text::RegularExpressions::Match::Empty","System.Text.RegularExpressions.Match.Groups","System::Text::RegularExpressions::Match::Groups","System.Text.RegularExpressions.Match.NextMatch","System::Text::RegularExpressions::Match::NextMatch","System.Text.RegularExpressions.Match.Result","System::Text::RegularExpressions::Match::Result","System.Text.RegularExpressions.Match.Synchronized","System::Text::RegularExpressions::Match::Synchronized"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"29ce89b3-39f2-bc7e-3342-e7d505fe4749","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Text.RegularExpressions/Match.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Match class | Microsoft Docs","_op_ogTitle":"Match class","description":"Represents the results from a single regular expression match.\n","toc_asset_id":"_splitted/System.Text.RegularExpressions/toc.json","toc_rel":"_splitted/System.Text.RegularExpressions/toc.json","source_url":"","ms.assetid":"System.Text.RegularExpressions.Match","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.regularexpressions.match","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.regularexpressions.match","fileRelativePath":"System.Text.RegularExpressions.Match.html"},"themesRelativePathToOutputRoot":"_themes/"}