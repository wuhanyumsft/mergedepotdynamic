{"content":"    \r\n    <h1 id=\"System_Windows_Forms_KeyEventArgs\">\r\n      <span class=\"lang-csharp\">KeyEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class KeyEventArgs : EventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">System.EventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">KeyEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A KeyEventArgs, which specifies the key the user pressed and whether any modifier keys (CTRL, ALT, and SHIFT) were pressed at the same time, is passed with each <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event occurs when the user presses any key. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event occurs when the user releases the key. Duplicate <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> events occur each time the key repeats, if the key is held down, but only one <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event is generated when the user releases the key.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a> event also occurs when a key is pressed. A <a class=\"xref\" href=\"system.windows.forms.keypresseventargs\" data-linktype=\"relative-path\">KeyPressEventArgs</a> is passed with each <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a> event, and specifies the character that was composed as a result of each key press.  </p>\n<p> For information about the event model, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_KeyEventArgs__ctor_System_Windows_Forms_Keys_\" data-linktype=\"self-bookmark\">KeyEventArgs(Keys)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_KeyEventArgs_Alt\" data-linktype=\"self-bookmark\">Alt</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the ALT key was pressed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_KeyEventArgs_Control\" data-linktype=\"self-bookmark\">Control</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the CTRL key was pressed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_KeyEventArgs_Handled\" data-linktype=\"self-bookmark\">Handled</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the event was handled.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_KeyEventArgs_KeyCode\" data-linktype=\"self-bookmark\">KeyCode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the keyboard code for a <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_KeyEventArgs_KeyData\" data-linktype=\"self-bookmark\">KeyData</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the key data for a <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_KeyEventArgs_KeyValue\" data-linktype=\"self-bookmark\">KeyValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the keyboard value for a <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_KeyEventArgs_Modifiers\" data-linktype=\"self-bookmark\">Modifiers</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the modifier flags for a <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event. The flags indicate which combination of CTRL, SHIFT, and ALT keys was pressed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_KeyEventArgs_Shift\" data-linktype=\"self-bookmark\">Shift</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the SHIFT key was pressed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_KeyEventArgs_SuppressKeyPress\" data-linktype=\"self-bookmark\">SuppressKeyPress</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the key event should be passed on to the underlying control.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_KeyEventArgs__ctor_System_Windows_Forms_Keys_\">\r\n    \r\n            <a id=\"System_Windows_Forms_KeyEventArgs__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyEventArgs(Keys)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public KeyEventArgs (System.Windows.Forms.Keys keyData);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a> representing the key that was pressed, combined with any modifier flags that indicate which CTRL, SHIFT, and ALT keys were pressed at the same time. Possible values are obtained be applying the bitwise OR (|) operator to constants from the <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a> enumeration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_KeyEventArgs_Alt\">\r\n    \r\n            <a id=\"System_Windows_Forms_KeyEventArgs_Alt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Alt</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the ALT key was pressed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool Alt { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the ALT key was pressed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p><strong>Example 1</strong>  </p>\n<p> The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event with the <a class=\"xref\" href=\"system.windows.forms.help\" data-linktype=\"relative-path\">Help</a> class to display pop-up style Help to the user of the application. The example uses the <a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> properties passed to the event handler method to filter for all variations of pressing the F1 key with a modifier key. When the user presses any variation of F1 that includes any keyboard modifier, the <a class=\"xref\" href=\"system.windows.forms.help\" data-linktype=\"relative-path\">Help</a> class displays a pop-up window, similar to a <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a>, near the control. If the user presses ALT+F2, a different Help pop-up is displayed with additional information.  </p>\n<pre><code class=\"lang-cs\" name=\"KeyEventArgs.Modifiers#1\">        private void textBox1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Determine whether the key entered is the F1 key. If it is, display Help.\n            if(e.KeyCode == Keys.F1 &amp;&amp; (e.Alt || e.Control || e.Shift))\n            {\n                // Display a pop-up Help topic to assist the user.\n                Help.ShowPopup(textBox1, &quot;Enter your name.&quot;, new Point(textBox1.Bottom, textBox1.Right));\n            }\n            else if(e.KeyCode == Keys.F2 &amp;&amp; e.Modifiers == Keys.Alt)\n            {\n                // Display a pop-up Help topic to provide additional assistance to the user.\n                Help.ShowPopup(textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;,\n                    new Point(textBox1.Top, this.textBox1.Left));\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"KeyEventArgs.Modifiers#1\">   // This example demonstrates how to use the KeyDown event with the Help class to display\n   // pop-up style help to the user of the application. The example filters for all variations\n   // of pressing the F1 key with a modifier key by using the KeyEventArgs properties passed\n   // to the event handling method.\n   // When the user presses any variation of F1 that includes any keyboard modifier, the Help\n   // class displays a pop-up window, similar to a ToolTip, near the control. If the user presses\n   // ALT + F2, a different Help pop-up is displayed with additional information. This example assumes\n   // that a tTextBox control, named textBox1, has been added to the form and its KeyDown\n   // event has been contected to this event handling method.\nprivate:\n   void textBox1_KeyDown( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      // Determine whether the key entered is the F1 key. If it is, display Help.\n      if ( e-&gt;KeyCode == Keys::F1 &amp;&amp; (e-&gt;Alt || e-&gt;Control || e-&gt;Shift) )\n      {\n         \n         // Display a pop-up Help topic to assist the user.\n         Help::ShowPopup( textBox1, &quot;Enter your name.&quot;, Point(textBox1-&gt;Bottom,textBox1-&gt;Right) );\n      }\n      else\n      if ( e-&gt;KeyCode == Keys::F2 &amp;&amp; e-&gt;Modifiers == Keys::Alt )\n      {\n         // Display a pop-up Help topic to provide additional assistance to the user.\n         Help::ShowPopup( textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;,\n            Point(textBox1-&gt;Top,this-&gt;textBox1-&gt;Left) );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"KeyEventArgs.Modifiers#1\">    Private Sub textBox1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles textBox1.KeyDown\n        &#39; Determine whether the key entered is the F1 key. If it is, display Help.\n        If e.KeyCode = Keys.F1 AndAlso (e.Alt OrElse e.Control OrElse e.Shift) Then\n            &#39; Display a pop-up Help topic to assist the user.\n            Help.ShowPopup(textBox1, &quot;Enter your name.&quot;, New Point(textBox1.Bottom, textBox1.Right))\n        ElseIf e.KeyCode = Keys.F2 AndAlso e.Modifiers = Keys.Alt Then\n            &#39; Display a pop-up Help topic to provide additional assistance to the user.\n            Help.ShowPopup(textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;, _\n                 New Point(textBox1.Top, Me.textBox1.Left))\n        End If\n    End Sub &#39;textBox1_KeyDown\n</code></pre><p> <strong>Example 2</strong>  </p>\n<p> The following example determines whether the user pressed ALT+E, and if the mouse pointer is over <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>, allows the user to edit that <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Members4#3\">private void treeView1_KeyDown(object sender, KeyEventArgs e)\n{\n   /* If the &#39;Alt&#39; and &#39;E&#39; keys are pressed,\n      * allow the user to edit the TreeNode label. */\n   if(e.Alt &amp;&amp; e.KeyCode == Keys.E)\n         \n   {\n      treeView1.LabelEdit = true;\n      // If there is a TreeNode under the mose cursor, begin editing. \n      TreeNode editNode = treeView1.GetNodeAt(\n         treeView1.PointToClient(System.Windows.Forms.Control.MousePosition));\n      if(editNode != null)\n      { \n         editNode.BeginEdit();\n      }\n   }\n}\n\nprivate void treeView1_AfterLabelEdit(object sender, NodeLabelEditEventArgs e)\n{\n   // Disable the ability to edit the TreeNode labels.\n   treeView1.LabelEdit = false;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Members4#3\">Private Sub treeView1_KeyDown(sender As Object, _\n  e As KeyEventArgs) Handles treeView1.KeyDown\n   &#39; If the &#39;Alt&#39; and &#39;E&#39; keys are pressed,\n   &#39; allow the user to edit the TreeNode label. \n   If e.Alt And e.KeyCode = Keys.E Then\n      treeView1.LabelEdit = True\n      &#39; If there is a TreeNode under the mose cursor, begin editing. \n      Dim editNode As TreeNode = treeView1.GetNodeAt( _\n        treeView1.PointToClient(System.Windows.Forms.Control.MousePosition))\n      If (editNode IsNot Nothing) Then\n         editNode.BeginEdit()\n      End If\n   End If\nEnd Sub\n\nPrivate Sub treeView1_AfterLabelEdit(sender As Object, _\n  e As NodeLabelEditEventArgs) Handles treeView1.AfterLabelEdit\n   &#39; Disable the ability to edit the TreeNode labels.\n   treeView1.LabelEdit = False\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Members4#3\">   private:\n      void treeView1_KeyDown( Object^ /*sender*/, KeyEventArgs^ e )\n      {\n         /* If the &#39;Alt&#39; and &#39;E&#39; keys are pressed,\n            * allow the user to edit the TreeNode label. */\n         if ( e-&gt;Alt &amp;&amp; e-&gt;KeyCode == Keys::E )\n         {\n            treeView1-&gt;LabelEdit = true;\n            \n            // If there is a TreeNode under the mose cursor, begin editing.\n            TreeNode^ editNode = treeView1-&gt;GetNodeAt( treeView1-&gt;PointToClient( Control::MousePosition ) );\n            if ( editNode != nullptr )\n            {\n               editNode-&gt;BeginEdit();\n            }\n         }\n      }\n\n      void treeView1_AfterLabelEdit( Object^ /*sender*/, NodeLabelEditEventArgs^ /*e*/ )\n      {\n         // Disable the ability to edit the TreeNode labels.\n         treeView1-&gt;LabelEdit = false;\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_KeyEventArgs_Control\">\r\n    \r\n            <a id=\"System_Windows_Forms_KeyEventArgs_Control_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Control</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the CTRL key was pressed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Control { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the CTRL key was pressed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event with the <a class=\"xref\" href=\"system.windows.forms.help\" data-linktype=\"relative-path\">Help</a> class to display pop-up style Help to the user of the application. The example uses the <a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> properties passed to the event handler method to filter for all variations of pressing the F1 key with a modifier key. When the user presses any variation of F1 that includes any keyboard modifier, the <a class=\"xref\" href=\"system.windows.forms.help\" data-linktype=\"relative-path\">Help</a> class displays a pop-up window, similar to a <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a>, near the control. If the user presses ALT+F2, a different Help pop-up is displayed with additional information.  </p>\n<pre><code class=\"lang-cs\" name=\"KeyEventArgs.Modifiers#1\">        private void textBox1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Determine whether the key entered is the F1 key. If it is, display Help.\n            if(e.KeyCode == Keys.F1 &amp;&amp; (e.Alt || e.Control || e.Shift))\n            {\n                // Display a pop-up Help topic to assist the user.\n                Help.ShowPopup(textBox1, &quot;Enter your name.&quot;, new Point(textBox1.Bottom, textBox1.Right));\n            }\n            else if(e.KeyCode == Keys.F2 &amp;&amp; e.Modifiers == Keys.Alt)\n            {\n                // Display a pop-up Help topic to provide additional assistance to the user.\n                Help.ShowPopup(textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;,\n                    new Point(textBox1.Top, this.textBox1.Left));\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"KeyEventArgs.Modifiers#1\">   // This example demonstrates how to use the KeyDown event with the Help class to display\n   // pop-up style help to the user of the application. The example filters for all variations\n   // of pressing the F1 key with a modifier key by using the KeyEventArgs properties passed\n   // to the event handling method.\n   // When the user presses any variation of F1 that includes any keyboard modifier, the Help\n   // class displays a pop-up window, similar to a ToolTip, near the control. If the user presses\n   // ALT + F2, a different Help pop-up is displayed with additional information. This example assumes\n   // that a tTextBox control, named textBox1, has been added to the form and its KeyDown\n   // event has been contected to this event handling method.\nprivate:\n   void textBox1_KeyDown( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      // Determine whether the key entered is the F1 key. If it is, display Help.\n      if ( e-&gt;KeyCode == Keys::F1 &amp;&amp; (e-&gt;Alt || e-&gt;Control || e-&gt;Shift) )\n      {\n         \n         // Display a pop-up Help topic to assist the user.\n         Help::ShowPopup( textBox1, &quot;Enter your name.&quot;, Point(textBox1-&gt;Bottom,textBox1-&gt;Right) );\n      }\n      else\n      if ( e-&gt;KeyCode == Keys::F2 &amp;&amp; e-&gt;Modifiers == Keys::Alt )\n      {\n         // Display a pop-up Help topic to provide additional assistance to the user.\n         Help::ShowPopup( textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;,\n            Point(textBox1-&gt;Top,this-&gt;textBox1-&gt;Left) );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"KeyEventArgs.Modifiers#1\">    Private Sub textBox1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles textBox1.KeyDown\n        &#39; Determine whether the key entered is the F1 key. If it is, display Help.\n        If e.KeyCode = Keys.F1 AndAlso (e.Alt OrElse e.Control OrElse e.Shift) Then\n            &#39; Display a pop-up Help topic to assist the user.\n            Help.ShowPopup(textBox1, &quot;Enter your name.&quot;, New Point(textBox1.Bottom, textBox1.Right))\n        ElseIf e.KeyCode = Keys.F2 AndAlso e.Modifiers = Keys.Alt Then\n            &#39; Display a pop-up Help topic to provide additional assistance to the user.\n            Help.ShowPopup(textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;, _\n                 New Point(textBox1.Top, Me.textBox1.Left))\n        End If\n    End Sub &#39;textBox1_KeyDown\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_KeyEventArgs_Handled\">\r\n    \r\n            <a id=\"System_Windows_Forms_KeyEventArgs_Handled_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Handled</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the event was handled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Handled { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to bypass the control&#39;s default handling; otherwise, <code>false</code> to also pass the event along to the default control handler.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Handled is implemented differently by different controls within Windows Forms. For controls like <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> which subclass native Win32 controls, it is interpreted to mean that the key message should not be passed to the underlying native control. If you set <code>Handled</code> to true on a <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>, that control will not pass the key press <code>events</code> to the underlying Win32 text box control, but it will still display the characters that the user typed.  </p>\n<p> If you want to prevent the current control from receiving a key press, use the <a class=\"xref\" href=\"system.windows.forms.keyeventargs#System_Windows_Forms_KeyEventArgs_SuppressKeyPress_\" data-linktype=\"relative-path\">SuppressKeyPress</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether the user pressed a non-numeric key, and if so, cancels the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a> event by using the Handled property.  </p>\n<pre><code class=\"lang-vb\" name=\"Control.KeyDown#1\">    &#39; Boolean flag used to determine when a character other than a number is entered.\n    Private nonNumberEntered As Boolean = False\n   \n   \n    &#39; Handle the KeyDown event to determine the type of character entered into the control.\n    Private Sub textBox1_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) _\n         Handles textBox1.KeyDown\n        &#39; Initialize the flag to false.\n        nonNumberEntered = False\n      \n        &#39; Determine whether the keystroke is a number from the top of the keyboard.\n        If e.KeyCode &lt; Keys.D0 OrElse e.KeyCode &gt; Keys.D9 Then\n            &#39; Determine whether the keystroke is a number from the keypad.\n            If e.KeyCode &lt; Keys.NumPad0 OrElse e.KeyCode &gt; Keys.NumPad9 Then\n                &#39; Determine whether the keystroke is a backspace.\n                If e.KeyCode &lt;&gt; Keys.Back Then\n                    &#39; A non-numerical keystroke was pressed. \n                    &#39; Set the flag to true and evaluate in KeyPress event.\n                    nonNumberEntered = True\n                End If\n            End If\n        End If\n        &#39;If shift key was pressed, it&#39;s not a number.\n        If Control.ModifierKeys = Keys.Shift Then\n            nonNumberEntered = true\n        End If\n    End Sub &#39;textBox1_KeyDown\n   \n   \n    &#39; This event occurs after the KeyDown event and can be used \n    &#39; to prevent characters from entering the control.\n    Private Sub textBox1_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) _\n        Handles textBox1.KeyPress\n        &#39; Check for the flag being set in the KeyDown event.\n        If nonNumberEntered = True Then\n            &#39; Stop the character from being entered into the control since it is non-numerical.\n            e.Handled = True\n        End If\n    End Sub &#39;textBox1_KeyPress\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.KeyDown#1\">   // Boolean flag used to determine when a character other than a number is entered.\nprivate:\n   bool nonNumberEntered;\n\n   // Handle the KeyDown event to determine the type of character entered into the control.\n   void textBox1_KeyDown( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      // Initialize the flag to false.\n      nonNumberEntered = false;\n\n      // Determine whether the keystroke is a number from the top of the keyboard.\n      if ( e-&gt;KeyCode &lt; Keys::D0 || e-&gt;KeyCode &gt; Keys::D9 )\n      {\n         // Determine whether the keystroke is a number from the keypad.\n         if ( e-&gt;KeyCode &lt; Keys::NumPad0 || e-&gt;KeyCode &gt; Keys::NumPad9 )\n         {\n            // Determine whether the keystroke is a backspace.\n            if ( e-&gt;KeyCode != Keys::Back )\n            {\n               // A non-numerical keystroke was pressed.\n               // Set the flag to true and evaluate in KeyPress event.\n               nonNumberEntered = true;\n            }\n         }\n      }\n      //If shift key was pressed, it&#39;s not a number.\n      if (Control::ModifierKeys == Keys::Shift) {\n         nonNumberEntered = true;\n      }\n   }\n\n   // This event occurs after the KeyDown event and can be used to prevent\n   // characters from entering the control.\n   void textBox1_KeyPress( Object^ /*sender*/, System::Windows::Forms::KeyPressEventArgs^ e )\n   {\n      // Check for the flag being set in the KeyDown event.\n      if ( nonNumberEntered == true )\n      {         // Stop the character from being entered into the control since it is non-numerical.\n         e-&gt;Handled = true;\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.KeyDown#1\">        // Boolean flag used to determine when a character other than a number is entered.\n        private bool nonNumberEntered = false;\n\n        // Handle the KeyDown event to determine the type of character entered into the control.\n        private void textBox1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Initialize the flag to false.\n            nonNumberEntered = false;\n\n            // Determine whether the keystroke is a number from the top of the keyboard.\n            if (e.KeyCode &lt; Keys.D0 || e.KeyCode &gt; Keys.D9)\n            {\n                // Determine whether the keystroke is a number from the keypad.\n                if (e.KeyCode &lt; Keys.NumPad0 || e.KeyCode &gt; Keys.NumPad9)\n                {\n                    // Determine whether the keystroke is a backspace.\n                    if(e.KeyCode != Keys.Back)\n                    {\n                        // A non-numerical keystroke was pressed.\n                        // Set the flag to true and evaluate in KeyPress event.\n                        nonNumberEntered = true;\n                    }\n                }\n            }\n            //If shift key was pressed, it&#39;s not a number.\n            if (Control.ModifierKeys == Keys.Shift) {\n                nonNumberEntered = true;\n            }\n        }\n\n        // This event occurs after the KeyDown event and can be used to prevent\n        // characters from entering the control.\n        private void textBox1_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)\n        {\n            // Check for the flag being set in the KeyDown event.\n            if (nonNumberEntered == true)\n            {\n                // Stop the character from being entered into the control since it is non-numerical.\n                e.Handled = true;\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_KeyEventArgs_KeyCode\">\r\n    \r\n            <a id=\"System_Windows_Forms_KeyEventArgs_KeyCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyCode</div>        \r\n          </div>\r\n    \r\n            <p>Gets the keyboard code for a <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Keys KeyCode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a> value that is the key code for the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code examples show how to use the KeyCode property to determine which key was pressed.  </p>\n<p> <strong>Example 1</strong>  </p>\n<p> The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event with the <a class=\"xref\" href=\"system.windows.forms.help\" data-linktype=\"relative-path\">Help</a> class to display pop-up style Help to the user of the application. The example uses the <a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> properties passed to the event handler method to filter for all variations of pressing the F1 key with a modifier key. When the user presses any variation of F1 that includes any keyboard modifier, the <a class=\"xref\" href=\"system.windows.forms.help\" data-linktype=\"relative-path\">Help</a> class displays a pop-up window, similar to a <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a>, near the control. If the user presses ALT+F2, a different Help pop-up is displayed with additional information.  </p>\n<pre><code class=\"lang-cs\" name=\"KeyEventArgs.Modifiers#1\">        private void textBox1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Determine whether the key entered is the F1 key. If it is, display Help.\n            if(e.KeyCode == Keys.F1 &amp;&amp; (e.Alt || e.Control || e.Shift))\n            {\n                // Display a pop-up Help topic to assist the user.\n                Help.ShowPopup(textBox1, &quot;Enter your name.&quot;, new Point(textBox1.Bottom, textBox1.Right));\n            }\n            else if(e.KeyCode == Keys.F2 &amp;&amp; e.Modifiers == Keys.Alt)\n            {\n                // Display a pop-up Help topic to provide additional assistance to the user.\n                Help.ShowPopup(textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;,\n                    new Point(textBox1.Top, this.textBox1.Left));\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"KeyEventArgs.Modifiers#1\">   // This example demonstrates how to use the KeyDown event with the Help class to display\n   // pop-up style help to the user of the application. The example filters for all variations\n   // of pressing the F1 key with a modifier key by using the KeyEventArgs properties passed\n   // to the event handling method.\n   // When the user presses any variation of F1 that includes any keyboard modifier, the Help\n   // class displays a pop-up window, similar to a ToolTip, near the control. If the user presses\n   // ALT + F2, a different Help pop-up is displayed with additional information. This example assumes\n   // that a tTextBox control, named textBox1, has been added to the form and its KeyDown\n   // event has been contected to this event handling method.\nprivate:\n   void textBox1_KeyDown( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      // Determine whether the key entered is the F1 key. If it is, display Help.\n      if ( e-&gt;KeyCode == Keys::F1 &amp;&amp; (e-&gt;Alt || e-&gt;Control || e-&gt;Shift) )\n      {\n         \n         // Display a pop-up Help topic to assist the user.\n         Help::ShowPopup( textBox1, &quot;Enter your name.&quot;, Point(textBox1-&gt;Bottom,textBox1-&gt;Right) );\n      }\n      else\n      if ( e-&gt;KeyCode == Keys::F2 &amp;&amp; e-&gt;Modifiers == Keys::Alt )\n      {\n         // Display a pop-up Help topic to provide additional assistance to the user.\n         Help::ShowPopup( textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;,\n            Point(textBox1-&gt;Top,this-&gt;textBox1-&gt;Left) );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"KeyEventArgs.Modifiers#1\">    Private Sub textBox1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles textBox1.KeyDown\n        &#39; Determine whether the key entered is the F1 key. If it is, display Help.\n        If e.KeyCode = Keys.F1 AndAlso (e.Alt OrElse e.Control OrElse e.Shift) Then\n            &#39; Display a pop-up Help topic to assist the user.\n            Help.ShowPopup(textBox1, &quot;Enter your name.&quot;, New Point(textBox1.Bottom, textBox1.Right))\n        ElseIf e.KeyCode = Keys.F2 AndAlso e.Modifiers = Keys.Alt Then\n            &#39; Display a pop-up Help topic to provide additional assistance to the user.\n            Help.ShowPopup(textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;, _\n                 New Point(textBox1.Top, Me.textBox1.Left))\n        End If\n    End Sub &#39;textBox1_KeyDown\n</code></pre><p> <strong>Example 2</strong>  </p>\n<p> The following example determines whether the user pressed ALT+E, and if the mouse pointer is over a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>, allows the user to edit that <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Windows.Forms.Control Members4#3\">private void treeView1_KeyDown(object sender, KeyEventArgs e)\n{\n   /* If the &#39;Alt&#39; and &#39;E&#39; keys are pressed,\n      * allow the user to edit the TreeNode label. */\n   if(e.Alt &amp;&amp; e.KeyCode == Keys.E)\n         \n   {\n      treeView1.LabelEdit = true;\n      // If there is a TreeNode under the mose cursor, begin editing. \n      TreeNode editNode = treeView1.GetNodeAt(\n         treeView1.PointToClient(System.Windows.Forms.Control.MousePosition));\n      if(editNode != null)\n      { \n         editNode.BeginEdit();\n      }\n   }\n}\n\nprivate void treeView1_AfterLabelEdit(object sender, NodeLabelEditEventArgs e)\n{\n   // Disable the ability to edit the TreeNode labels.\n   treeView1.LabelEdit = false;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Windows.Forms.Control Members4#3\">Private Sub treeView1_KeyDown(sender As Object, _\n  e As KeyEventArgs) Handles treeView1.KeyDown\n   &#39; If the &#39;Alt&#39; and &#39;E&#39; keys are pressed,\n   &#39; allow the user to edit the TreeNode label. \n   If e.Alt And e.KeyCode = Keys.E Then\n      treeView1.LabelEdit = True\n      &#39; If there is a TreeNode under the mose cursor, begin editing. \n      Dim editNode As TreeNode = treeView1.GetNodeAt( _\n        treeView1.PointToClient(System.Windows.Forms.Control.MousePosition))\n      If (editNode IsNot Nothing) Then\n         editNode.BeginEdit()\n      End If\n   End If\nEnd Sub\n\nPrivate Sub treeView1_AfterLabelEdit(sender As Object, _\n  e As NodeLabelEditEventArgs) Handles treeView1.AfterLabelEdit\n   &#39; Disable the ability to edit the TreeNode labels.\n   treeView1.LabelEdit = False\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"Windows.Forms.Control Members4#3\">   private:\n      void treeView1_KeyDown( Object^ /*sender*/, KeyEventArgs^ e )\n      {\n         /* If the &#39;Alt&#39; and &#39;E&#39; keys are pressed,\n            * allow the user to edit the TreeNode label. */\n         if ( e-&gt;Alt &amp;&amp; e-&gt;KeyCode == Keys::E )\n         {\n            treeView1-&gt;LabelEdit = true;\n            \n            // If there is a TreeNode under the mose cursor, begin editing.\n            TreeNode^ editNode = treeView1-&gt;GetNodeAt( treeView1-&gt;PointToClient( Control::MousePosition ) );\n            if ( editNode != nullptr )\n            {\n               editNode-&gt;BeginEdit();\n            }\n         }\n      }\n\n      void treeView1_AfterLabelEdit( Object^ /*sender*/, NodeLabelEditEventArgs^ /*e*/ )\n      {\n         // Disable the ability to edit the TreeNode labels.\n         treeView1-&gt;LabelEdit = false;\n      }\n</code></pre><p> <strong>Example 3</strong>  </p>\n<p> The following example determines whether the user pressed a non-numeric key, and if so, cancels the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a> event by using the <a class=\"xref\" href=\"system.windows.forms.keyeventargs#System_Windows_Forms_KeyEventArgs_Handled_\" data-linktype=\"relative-path\">Handled</a> property.  </p>\n<pre><code class=\"lang-vb\" name=\"Control.KeyDown#1\">    &#39; Boolean flag used to determine when a character other than a number is entered.\n    Private nonNumberEntered As Boolean = False\n   \n   \n    &#39; Handle the KeyDown event to determine the type of character entered into the control.\n    Private Sub textBox1_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) _\n         Handles textBox1.KeyDown\n        &#39; Initialize the flag to false.\n        nonNumberEntered = False\n      \n        &#39; Determine whether the keystroke is a number from the top of the keyboard.\n        If e.KeyCode &lt; Keys.D0 OrElse e.KeyCode &gt; Keys.D9 Then\n            &#39; Determine whether the keystroke is a number from the keypad.\n            If e.KeyCode &lt; Keys.NumPad0 OrElse e.KeyCode &gt; Keys.NumPad9 Then\n                &#39; Determine whether the keystroke is a backspace.\n                If e.KeyCode &lt;&gt; Keys.Back Then\n                    &#39; A non-numerical keystroke was pressed. \n                    &#39; Set the flag to true and evaluate in KeyPress event.\n                    nonNumberEntered = True\n                End If\n            End If\n        End If\n        &#39;If shift key was pressed, it&#39;s not a number.\n        If Control.ModifierKeys = Keys.Shift Then\n            nonNumberEntered = true\n        End If\n    End Sub &#39;textBox1_KeyDown\n   \n   \n    &#39; This event occurs after the KeyDown event and can be used \n    &#39; to prevent characters from entering the control.\n    Private Sub textBox1_KeyPress(sender As Object, e As System.Windows.Forms.KeyPressEventArgs) _\n        Handles textBox1.KeyPress\n        &#39; Check for the flag being set in the KeyDown event.\n        If nonNumberEntered = True Then\n            &#39; Stop the character from being entered into the control since it is non-numerical.\n            e.Handled = True\n        End If\n    End Sub &#39;textBox1_KeyPress\n</code></pre><pre><code class=\"lang-cpp\" name=\"Control.KeyDown#1\">   // Boolean flag used to determine when a character other than a number is entered.\nprivate:\n   bool nonNumberEntered;\n\n   // Handle the KeyDown event to determine the type of character entered into the control.\n   void textBox1_KeyDown( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      // Initialize the flag to false.\n      nonNumberEntered = false;\n\n      // Determine whether the keystroke is a number from the top of the keyboard.\n      if ( e-&gt;KeyCode &lt; Keys::D0 || e-&gt;KeyCode &gt; Keys::D9 )\n      {\n         // Determine whether the keystroke is a number from the keypad.\n         if ( e-&gt;KeyCode &lt; Keys::NumPad0 || e-&gt;KeyCode &gt; Keys::NumPad9 )\n         {\n            // Determine whether the keystroke is a backspace.\n            if ( e-&gt;KeyCode != Keys::Back )\n            {\n               // A non-numerical keystroke was pressed.\n               // Set the flag to true and evaluate in KeyPress event.\n               nonNumberEntered = true;\n            }\n         }\n      }\n      //If shift key was pressed, it&#39;s not a number.\n      if (Control::ModifierKeys == Keys::Shift) {\n         nonNumberEntered = true;\n      }\n   }\n\n   // This event occurs after the KeyDown event and can be used to prevent\n   // characters from entering the control.\n   void textBox1_KeyPress( Object^ /*sender*/, System::Windows::Forms::KeyPressEventArgs^ e )\n   {\n      // Check for the flag being set in the KeyDown event.\n      if ( nonNumberEntered == true )\n      {         // Stop the character from being entered into the control since it is non-numerical.\n         e-&gt;Handled = true;\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Control.KeyDown#1\">        // Boolean flag used to determine when a character other than a number is entered.\n        private bool nonNumberEntered = false;\n\n        // Handle the KeyDown event to determine the type of character entered into the control.\n        private void textBox1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Initialize the flag to false.\n            nonNumberEntered = false;\n\n            // Determine whether the keystroke is a number from the top of the keyboard.\n            if (e.KeyCode &lt; Keys.D0 || e.KeyCode &gt; Keys.D9)\n            {\n                // Determine whether the keystroke is a number from the keypad.\n                if (e.KeyCode &lt; Keys.NumPad0 || e.KeyCode &gt; Keys.NumPad9)\n                {\n                    // Determine whether the keystroke is a backspace.\n                    if(e.KeyCode != Keys.Back)\n                    {\n                        // A non-numerical keystroke was pressed.\n                        // Set the flag to true and evaluate in KeyPress event.\n                        nonNumberEntered = true;\n                    }\n                }\n            }\n            //If shift key was pressed, it&#39;s not a number.\n            if (Control.ModifierKeys == Keys.Shift) {\n                nonNumberEntered = true;\n            }\n        }\n\n        // This event occurs after the KeyDown event and can be used to prevent\n        // characters from entering the control.\n        private void textBox1_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)\n        {\n            // Check for the flag being set in the KeyDown event.\n            if (nonNumberEntered == true)\n            {\n                // Stop the character from being entered into the control since it is non-numerical.\n                e.Handled = true;\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_KeyEventArgs_KeyData\">\r\n    \r\n            <a id=\"System_Windows_Forms_KeyEventArgs_KeyData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyData</div>        \r\n          </div>\r\n    \r\n            <p>Gets the key data for a <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Keys KeyData { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a> representing the key code for the key that was pressed, combined with modifier flags that indicate which combination of CTRL, SHIFT, and ALT keys was pressed at the same time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use constants from <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a> to extract information from the KeyData property. Use the bitwise AND operator to compare data returned by KeyData with constants in <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a> to obtain information about which keys the user pressed. To determine whether a specific modifier key was pressed, use the <a class=\"xref\" href=\"system.windows.forms.keyeventargs#System_Windows_Forms_KeyEventArgs_Control_\" data-linktype=\"relative-path\">Control</a>, <a class=\"xref\" href=\"system.windows.forms.keyeventargs#System_Windows_Forms_KeyEventArgs_Shift_\" data-linktype=\"relative-path\">Shift</a>, and <a class=\"xref\" href=\"system.windows.forms.keyeventargs#System_Windows_Forms_KeyEventArgs_Alt_\" data-linktype=\"relative-path\">Alt</a> properties.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">System.Windows.Forms.Control.KeyDown</a> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">System.Windows.Forms.Control.KeyDown</a> event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#48\">private void Control1_KeyDown(Object sender, KeyEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Alt&quot;, e.Alt );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Control&quot;, e.Control );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Handled&quot;, e.Handled );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyCode&quot;, e.KeyCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyValue&quot;, e.KeyValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyData&quot;, e.KeyData );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Modifiers&quot;, e.Modifiers );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Shift&quot;, e.Shift );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;SuppressKeyPress&quot;, e.SuppressKeyPress );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;KeyDown Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#48\">Private Sub Control1_KeyDown(sender as Object, e as KeyEventArgs) _ \n     Handles Control1.KeyDown\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Alt&quot;, e.Alt)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Control&quot;, e.Control)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Handled&quot;, e.Handled)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyCode&quot;, e.KeyCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyValue&quot;, e.KeyValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyData&quot;, e.KeyData)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Modifiers&quot;, e.Modifiers)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Shift&quot;, e.Shift)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;SuppressKeyPress&quot;, e.SuppressKeyPress)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;KeyDown Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_KeyEventArgs_KeyValue\">\r\n    \r\n            <a id=\"System_Windows_Forms_KeyEventArgs_KeyValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyValue</div>        \r\n          </div>\r\n    \r\n            <p>Gets the keyboard value for a <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int KeyValue { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The integer representation of the <span class=\"xref\">stem.Windows.Forms.KeyEventArgs.KeyCode*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">System.Windows.Forms.Control.KeyDown</a> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of a type that inherits from <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, such as a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> or <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>. Then name the instance <code>Control1</code> and ensure that the event handler is associated with the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">System.Windows.Forms.Control.KeyDown</a> event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#48\">private void Control1_KeyDown(Object sender, KeyEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Alt&quot;, e.Alt );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Control&quot;, e.Control );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Handled&quot;, e.Handled );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyCode&quot;, e.KeyCode );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyValue&quot;, e.KeyValue );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyData&quot;, e.KeyData );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Modifiers&quot;, e.Modifiers );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Shift&quot;, e.Shift );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;SuppressKeyPress&quot;, e.SuppressKeyPress );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;KeyDown Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#48\">Private Sub Control1_KeyDown(sender as Object, e as KeyEventArgs) _ \n     Handles Control1.KeyDown\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Alt&quot;, e.Alt)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Control&quot;, e.Control)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Handled&quot;, e.Handled)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyCode&quot;, e.KeyCode)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyValue&quot;, e.KeyValue)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;KeyData&quot;, e.KeyData)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Modifiers&quot;, e.Modifiers)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Shift&quot;, e.Shift)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;SuppressKeyPress&quot;, e.SuppressKeyPress)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;KeyDown Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_KeyEventArgs_Modifiers\">\r\n    \r\n            <a id=\"System_Windows_Forms_KeyEventArgs_Modifiers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Modifiers</div>        \r\n          </div>\r\n    \r\n            <p>Gets the modifier flags for a <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a> event. The flags indicate which combination of CTRL, SHIFT, and ALT keys was pressed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Keys Modifiers { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a> value representing one or more modifier flags.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To determine whether a specific modifier key was pressed, use the <a class=\"xref\" href=\"system.windows.forms.keyeventargs#System_Windows_Forms_KeyEventArgs_Control_\" data-linktype=\"relative-path\">Control</a>, <a class=\"xref\" href=\"system.windows.forms.keyeventargs#System_Windows_Forms_KeyEventArgs_Shift_\" data-linktype=\"relative-path\">Shift</a>, and <a class=\"xref\" href=\"system.windows.forms.keyeventargs#System_Windows_Forms_KeyEventArgs_Alt_\" data-linktype=\"relative-path\">Alt</a> properties. Modifier flags can be combined with bitwise OR.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the Modifiers property to determine which modifier keys were pressed along with the primary key.  </p>\n<pre><code class=\"lang-cs\" name=\"KeyEventArgs.Modifiers#1\">        private void textBox1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Determine whether the key entered is the F1 key. If it is, display Help.\n            if(e.KeyCode == Keys.F1 &amp;&amp; (e.Alt || e.Control || e.Shift))\n            {\n                // Display a pop-up Help topic to assist the user.\n                Help.ShowPopup(textBox1, &quot;Enter your name.&quot;, new Point(textBox1.Bottom, textBox1.Right));\n            }\n            else if(e.KeyCode == Keys.F2 &amp;&amp; e.Modifiers == Keys.Alt)\n            {\n                // Display a pop-up Help topic to provide additional assistance to the user.\n                Help.ShowPopup(textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;,\n                    new Point(textBox1.Top, this.textBox1.Left));\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"KeyEventArgs.Modifiers#1\">   // This example demonstrates how to use the KeyDown event with the Help class to display\n   // pop-up style help to the user of the application. The example filters for all variations\n   // of pressing the F1 key with a modifier key by using the KeyEventArgs properties passed\n   // to the event handling method.\n   // When the user presses any variation of F1 that includes any keyboard modifier, the Help\n   // class displays a pop-up window, similar to a ToolTip, near the control. If the user presses\n   // ALT + F2, a different Help pop-up is displayed with additional information. This example assumes\n   // that a tTextBox control, named textBox1, has been added to the form and its KeyDown\n   // event has been contected to this event handling method.\nprivate:\n   void textBox1_KeyDown( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      // Determine whether the key entered is the F1 key. If it is, display Help.\n      if ( e-&gt;KeyCode == Keys::F1 &amp;&amp; (e-&gt;Alt || e-&gt;Control || e-&gt;Shift) )\n      {\n         \n         // Display a pop-up Help topic to assist the user.\n         Help::ShowPopup( textBox1, &quot;Enter your name.&quot;, Point(textBox1-&gt;Bottom,textBox1-&gt;Right) );\n      }\n      else\n      if ( e-&gt;KeyCode == Keys::F2 &amp;&amp; e-&gt;Modifiers == Keys::Alt )\n      {\n         // Display a pop-up Help topic to provide additional assistance to the user.\n         Help::ShowPopup( textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;,\n            Point(textBox1-&gt;Top,this-&gt;textBox1-&gt;Left) );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"KeyEventArgs.Modifiers#1\">    Private Sub textBox1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles textBox1.KeyDown\n        &#39; Determine whether the key entered is the F1 key. If it is, display Help.\n        If e.KeyCode = Keys.F1 AndAlso (e.Alt OrElse e.Control OrElse e.Shift) Then\n            &#39; Display a pop-up Help topic to assist the user.\n            Help.ShowPopup(textBox1, &quot;Enter your name.&quot;, New Point(textBox1.Bottom, textBox1.Right))\n        ElseIf e.KeyCode = Keys.F2 AndAlso e.Modifiers = Keys.Alt Then\n            &#39; Display a pop-up Help topic to provide additional assistance to the user.\n            Help.ShowPopup(textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;, _\n                 New Point(textBox1.Top, Me.textBox1.Left))\n        End If\n    End Sub &#39;textBox1_KeyDown\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_KeyEventArgs_Shift\">\r\n    \r\n            <a id=\"System_Windows_Forms_KeyEventArgs_Shift_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Shift</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the SHIFT key was pressed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool Shift { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the SHIFT key was pressed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether the user pressed the Shift key with the F1 key, and if so, displays help.  </p>\n<pre><code class=\"lang-cs\" name=\"KeyEventArgs.Modifiers#1\">        private void textBox1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)\n        {\n            // Determine whether the key entered is the F1 key. If it is, display Help.\n            if(e.KeyCode == Keys.F1 &amp;&amp; (e.Alt || e.Control || e.Shift))\n            {\n                // Display a pop-up Help topic to assist the user.\n                Help.ShowPopup(textBox1, &quot;Enter your name.&quot;, new Point(textBox1.Bottom, textBox1.Right));\n            }\n            else if(e.KeyCode == Keys.F2 &amp;&amp; e.Modifiers == Keys.Alt)\n            {\n                // Display a pop-up Help topic to provide additional assistance to the user.\n                Help.ShowPopup(textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;,\n                    new Point(textBox1.Top, this.textBox1.Left));\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"KeyEventArgs.Modifiers#1\">   // This example demonstrates how to use the KeyDown event with the Help class to display\n   // pop-up style help to the user of the application. The example filters for all variations\n   // of pressing the F1 key with a modifier key by using the KeyEventArgs properties passed\n   // to the event handling method.\n   // When the user presses any variation of F1 that includes any keyboard modifier, the Help\n   // class displays a pop-up window, similar to a ToolTip, near the control. If the user presses\n   // ALT + F2, a different Help pop-up is displayed with additional information. This example assumes\n   // that a tTextBox control, named textBox1, has been added to the form and its KeyDown\n   // event has been contected to this event handling method.\nprivate:\n   void textBox1_KeyDown( Object^ /*sender*/, System::Windows::Forms::KeyEventArgs^ e )\n   {\n      // Determine whether the key entered is the F1 key. If it is, display Help.\n      if ( e-&gt;KeyCode == Keys::F1 &amp;&amp; (e-&gt;Alt || e-&gt;Control || e-&gt;Shift) )\n      {\n         \n         // Display a pop-up Help topic to assist the user.\n         Help::ShowPopup( textBox1, &quot;Enter your name.&quot;, Point(textBox1-&gt;Bottom,textBox1-&gt;Right) );\n      }\n      else\n      if ( e-&gt;KeyCode == Keys::F2 &amp;&amp; e-&gt;Modifiers == Keys::Alt )\n      {\n         // Display a pop-up Help topic to provide additional assistance to the user.\n         Help::ShowPopup( textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;,\n            Point(textBox1-&gt;Top,this-&gt;textBox1-&gt;Left) );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"KeyEventArgs.Modifiers#1\">    Private Sub textBox1_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles textBox1.KeyDown\n        &#39; Determine whether the key entered is the F1 key. If it is, display Help.\n        If e.KeyCode = Keys.F1 AndAlso (e.Alt OrElse e.Control OrElse e.Shift) Then\n            &#39; Display a pop-up Help topic to assist the user.\n            Help.ShowPopup(textBox1, &quot;Enter your name.&quot;, New Point(textBox1.Bottom, textBox1.Right))\n        ElseIf e.KeyCode = Keys.F2 AndAlso e.Modifiers = Keys.Alt Then\n            &#39; Display a pop-up Help topic to provide additional assistance to the user.\n            Help.ShowPopup(textBox1, &quot;Enter your first name followed by your last name. Middle name is optional.&quot;, _\n                 New Point(textBox1.Top, Me.textBox1.Left))\n        End If\n    End Sub &#39;textBox1_KeyDown\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_KeyEventArgs_SuppressKeyPress\">\r\n    \r\n            <a id=\"System_Windows_Forms_KeyEventArgs_SuppressKeyPress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SuppressKeyPress</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the key event should be passed on to the underlying control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SuppressKeyPress { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key event should not be sent to the control; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can assign <code>true</code> to this property in an event handler such as <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> in order to prevent user input.  </p>\n<p> Setting SuppressKeyPress to <code>true</code> also sets <a class=\"xref\" href=\"system.windows.forms.keyeventargs#System_Windows_Forms_KeyEventArgs_Handled_\" data-linktype=\"relative-path\">Handled</a> to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example prevents numeric keystrokes from reaching the <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a> control named <code>textBox1</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"KeyEventArgs.SuppressKeyPress#1\">private void textBox1_KeyDown(object sender, KeyEventArgs e)\n{\n    if (e.KeyCode &gt;= Keys.D0 &amp;&amp; e.KeyCode &lt;= Keys.D9 &amp;&amp; e.Modifiers != Keys.Shift)\n    {\n        e.SuppressKeyPress = true;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"KeyEventArgs.SuppressKeyPress#1\">Private Sub TextBox1_KeyDown(ByVal sender As System.Object, _\n    ByVal e As System.Windows.Forms.KeyEventArgs) Handles TextBox1.KeyDown\n    \n    If e.KeyCode &gt;= Keys.D0 And e.KeyCode &lt;= Keys.D9 And _\n    e.Modifiers &lt;&gt; Keys.Shift Then\n        e.SuppressKeyPress = True\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.KeyEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.KeyEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventArgs.Alt\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventArgs.Control\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventArgs.Handled\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventArgs.KeyCode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventArgs.KeyData\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventArgs.KeyValue\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventArgs.Modifiers\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventArgs.Shift\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.KeyEventArgs.SuppressKeyPress\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3e3fdfaf-7787-7d64-fdf6-ec8b1d370373\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  or  event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.KeyEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.KeyEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.KeyEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.KeyEventArgs","System.Windows.Forms.KeyEventArgs..ctor","System.Windows.Forms.KeyEventArgs.Alt","System.Windows.Forms.KeyEventArgs.Control","System.Windows.Forms.KeyEventArgs.Handled","System.Windows.Forms.KeyEventArgs.KeyCode","System.Windows.Forms.KeyEventArgs.KeyData","System.Windows.Forms.KeyEventArgs.KeyValue","System.Windows.Forms.KeyEventArgs.Modifiers","System.Windows.Forms.KeyEventArgs.Shift","System.Windows.Forms.KeyEventArgs.SuppressKeyPress"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.KeyEventArgs","System::Windows::Forms::KeyEventArgs","System.Windows.Forms.KeyEventArgs.#ctor","System::Windows::Forms::KeyEventArgs::#ctor","System.Windows.Forms.KeyEventArgs.Alt","System::Windows::Forms::KeyEventArgs::Alt","System.Windows.Forms.KeyEventArgs.Control","System::Windows::Forms::KeyEventArgs::Control","System.Windows.Forms.KeyEventArgs.Handled","System::Windows::Forms::KeyEventArgs::Handled","System.Windows.Forms.KeyEventArgs.KeyCode","System::Windows::Forms::KeyEventArgs::KeyCode","System.Windows.Forms.KeyEventArgs.KeyData","System::Windows::Forms::KeyEventArgs::KeyData","System.Windows.Forms.KeyEventArgs.KeyValue","System::Windows::Forms::KeyEventArgs::KeyValue","System.Windows.Forms.KeyEventArgs.Modifiers","System::Windows::Forms::KeyEventArgs::Modifiers","System.Windows.Forms.KeyEventArgs.Shift","System::Windows::Forms::KeyEventArgs::Shift","System.Windows.Forms.KeyEventArgs.SuppressKeyPress","System::Windows::Forms::KeyEventArgs::SuppressKeyPress"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3e3fdfaf-7787-7d64-fdf6-ec8b1d370373","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/KeyEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"KeyEventArgs class | Microsoft Docs","_op_ogTitle":"KeyEventArgs class","description":"Provides data for the  or  event.\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.KeyEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.keyeventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.keyeventargs","fileRelativePath":"System.Windows.Forms.KeyEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}