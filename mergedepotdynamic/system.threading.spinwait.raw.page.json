{"content":"    \r\n    <h1 id=\"System_Threading_SpinWait\">\r\n      <span class=\"lang-csharp\">SpinWait</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides support for spin-based waiting.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public struct SpinWait</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SpinWait</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>SpinWait encapsulates common spinning logic. On single-processor machines, yields are always used instead of busy waits, and on computers with Intel processors employing Hyper-Threading technology, it helps to prevent hardware thread starvation. SpinWait encapsulates a good mixture of spinning and true yielding.  </p>\n<p> SpinWait is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads. SpinWait is not generally useful for ordinary applications. In most cases, you should use the synchronization classes provided by the .NET Framework, such as <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a>. For most purposes where spin waiting is required, however, the SpinWait type should be preferred over the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_SpinWait_\" data-linktype=\"relative-path\">SpinWait</a> method.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinWait_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of times <span class=\"xref\">stem.Threading.SpinWait.SpinOnce*</span> has been called on this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinWait_NextSpinWillYield\" data-linktype=\"self-bookmark\">NextSpinWillYield</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether the next call to <span class=\"xref\">stem.Threading.SpinWait.SpinOnce*</span> will yield the processor, triggering a forced context switch.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinWait_Reset\" data-linktype=\"self-bookmark\">Reset()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the spin counter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinWait_SpinOnce\" data-linktype=\"self-bookmark\">SpinOnce()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a single spin.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinWait_SpinUntil_System_Func_System_Boolean__\" data-linktype=\"self-bookmark\">SpinUntil(Func&lt;Boolean&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Spins until the specified condition is satisfied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinWait_SpinUntil_System_Func_System_Boolean__System_Int32_\" data-linktype=\"self-bookmark\">SpinUntil(Func&lt;Boolean&gt;,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Spins until the specified condition is satisfied or until the specified timeout is expired.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_SpinWait_SpinUntil_System_Func_System_Boolean__System_TimeSpan_\" data-linktype=\"self-bookmark\">SpinUntil(Func&lt;Boolean&gt;,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Spins until the specified condition is satisfied or until the specified timeout is expired.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinWait_Count\">\r\n    \r\n            <a id=\"System_Threading_SpinWait_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of times <span class=\"xref\">stem.Threading.SpinWait.SpinOnce*</span> has been called on this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns an integer that represents the number of times <span class=\"xref\">stem.Threading.SpinWait.SpinOnce*</span> has been called on this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinWait_NextSpinWillYield\">\r\n    \r\n            <a id=\"System_Threading_SpinWait_NextSpinWillYield_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextSpinWillYield</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether the next call to <span class=\"xref\">stem.Threading.SpinWait.SpinOnce*</span> will yield the processor, triggering a forced context switch.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool NextSpinWillYield { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Whether the next call to <span class=\"xref\">stem.Threading.SpinWait.SpinOnce*</span> will yield the processor, triggering a forced context switch.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>On a single-CPU machine, <a class=\"xref\" href=\"system.threading.spinwait#System_Threading_SpinWait_SpinOnce_\" data-linktype=\"relative-path\">SpinOnce</a> always yields the processor. On machines with multiple CPUs, <a class=\"xref\" href=\"system.threading.spinwait#System_Threading_SpinWait_SpinOnce_\" data-linktype=\"relative-path\">SpinOnce</a> may yield after an unspecified number of calls.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinWait_Reset\">\r\n    \r\n            <a id=\"System_Threading_SpinWait_Reset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reset()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the spin counter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Reset ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This makes <a class=\"xref\" href=\"system.threading.spinwait#System_Threading_SpinWait_SpinOnce_\" data-linktype=\"relative-path\">SpinOnce</a> and <a class=\"xref\" href=\"system.threading.spinwait#System_Threading_SpinWait_NextSpinWillYield_\" data-linktype=\"relative-path\">NextSpinWillYield</a> behave as though no calls to <a class=\"xref\" href=\"system.threading.spinwait#System_Threading_SpinWait_SpinOnce_\" data-linktype=\"relative-path\">SpinOnce</a> had been issued on this instance. If a <a class=\"xref\" href=\"system.threading.spinwait\" data-linktype=\"relative-path\">SpinWait</a> instance is reused many times, it may be useful to reset it to avoid yielding too soon.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following is an example of using SpinWait in a simple lock-free stack implementation. (This is just an example. If an efficient, thread-safe stack is needed, consider using ConcurrentStack.)  </p>\n<p> <code>// C#</code>  </p>\n<p> <code>public class LockFreeStack&lt;T&gt;</code>  </p>\n<p> <code>{</code>  </p>\n<p> <code>private volatile Node m_head;</code>  </p>\n<p> <code>private class Node { public Node Next; public T Value; }</code>  </p>\n<p> <code>public void Push(T item)</code>  </p>\n<p> <code>{</code>  </p>\n<p> <code>var spin = new SpinWait();</code>  </p>\n<p> <code>Node node = new Node { Value = item }, head;</code>  </p>\n<p> <code>while (true)</code>  </p>\n<p> <code>{</code>  </p>\n<p> <code>head = m_head;</code>  </p>\n<p> <code>node.Next = head;</code>  </p>\n<p> <code>if (Interlocked.CompareExchange(ref m_head, node, head) == head) break;</code>  </p>\n<p> <code>spin.SpinOnce();</code>  </p>\n<p> <code>}</code>  </p>\n<p> <code>}</code>  </p>\n<p> <code>public bool TryPop(out T result)</code>  </p>\n<p> <code>{</code>  </p>\n<p> <code>result = default(T);</code>  </p>\n<p> <code>var spin = new SpinWait();</code>  </p>\n<p> <code>Node head;</code>  </p>\n<p> <code>while (true)</code>  </p>\n<p> <code>{</code>  </p>\n<p> <code>head = m_head;</code>  </p>\n<p> <code>if (head == null) return false;</code>  </p>\n<p> <code>if (Interlocked.CompareExchange(ref m_head, head.Next, head) == head)</code>  </p>\n<p> <code>{</code>  </p>\n<p> <code>result = head.Value;</code>  </p>\n<p> <code>return true;</code>  </p>\n<p> <code>}</code>  </p>\n<p> <code>spin.SpinOnce();</code>  </p>\n<p> <code>}</code>  </p>\n<p> <code>}</code>  </p>\n<p> <code>}</code>  </p>\n<p> <code>&#39; Visual Basic</code>  </p>\n<p> <code>Public Class LockFreeStack(Of T)</code>  </p>\n<p> <code>Private m_head As Node</code>  </p>\n<p> <code>Private Class Node</code>  </p>\n<p> <code>Public [Next] As Node</code>  </p>\n<p> <code>Public Value As T</code>  </p>\n<p> <code>End Class</code>  </p>\n<p> <code>Public Sub Push(ByVal item As T)</code>  </p>\n<p> <code>Dim spin As New SpinWait()</code>  </p>\n<p> <code>Dim head As Node, node As New Node With {.Value = item}</code>  </p>\n<p> <code>While True</code>  </p>\n<p> <code>Thread.MemoryBarrier()</code>  </p>\n<p> <code>head = m_head</code>  </p>\n<p> <code>node.Next = head</code>  </p>\n<p> <code>If Interlocked.CompareExchange(m_head, node, head) Is head Then Exit While</code>  </p>\n<p> <code>spin.SpinOnce()</code>  </p>\n<p> <code>End While</code>  </p>\n<p> <code>End Sub</code>  </p>\n<p> <code>Public Function TryPop(ByRef result As T) As Boolean</code>  </p>\n<p> <code>result = CType(Nothing, T)</code>  </p>\n<p> <code>Dim spin As New SpinWait()</code>  </p>\n<p> <code>Dim head As Node</code>  </p>\n<p> <code>While True</code>  </p>\n<p> <code>Thread.MemoryBarrier()</code>  </p>\n<p> <code>head = m_head</code>  </p>\n<p> <code>If head Is Nothing Then Return False</code>  </p>\n<p> <code>If Interlocked.CompareExchange(m_head, head.Next, head) Is head Then</code>  </p>\n<p> <code>result = head.Value</code>  </p>\n<p> <code>Return True</code>  </p>\n<p> <code>End If</code>  </p>\n<p> <code>spin.SpinOnce()</code>  </p>\n<p> <code>End While</code>  </p>\n<p> <code>End Function</code>  </p>\n<p> <code>End Class</code></p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinWait_SpinOnce\">\r\n    \r\n            <a id=\"System_Threading_SpinWait_SpinOnce_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SpinOnce()</div>        \r\n          </div>\r\n    \r\n            <p>Performs a single spin.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SpinOnce ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is typically called in a loop, and may change in behavior based on the number of times a SpinOnce has been called thus far on this instance. Each spin results in the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_SpinWait_\" data-linktype=\"relative-path\">SpinWait</a> method being called. A count is kept of the number of times SpinOnce is called, and after a threshold count is reached, the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Yield_\" data-linktype=\"relative-path\">Yield</a> method is called.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinWait_SpinUntil_System_Func_System_Boolean__\">\r\n    \r\n            <a id=\"System_Threading_SpinWait_SpinUntil_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SpinUntil(Func&lt;Boolean&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Spins until the specified condition is satisfied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SpinUntil (Func&lt;bool&gt; condition);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate to be executed over and over until it returns true.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>condition</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinWait_SpinUntil_System_Func_System_Boolean__System_Int32_\">\r\n    \r\n            <a id=\"System_Threading_SpinWait_SpinUntil_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SpinUntil(Func&lt;Boolean&gt;,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Spins until the specified condition is satisfied or until the specified timeout is expired.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool SpinUntil (Func&lt;bool&gt; condition, int millisecondsTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate to be executed over and over until it returns true.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecondsTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of milliseconds to wait, or <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> (-1) to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>True if the condition is satisfied within the timeout; otherwise, false</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>condition</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_SpinWait_SpinUntil_System_Func_System_Boolean__System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Threading_SpinWait_SpinUntil_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SpinUntil(Func&lt;Boolean&gt;,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Spins until the specified condition is satisfied or until the specified timeout is expired.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool SpinUntil (Func&lt;bool&gt; condition, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate to be executed over and over until it returns true.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>True if the condition is satisfied within the timeout; otherwise, false</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>condition</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.SpinWait.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.SpinWait.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinWait\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinWait.Count\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinWait.NextSpinWillYield\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinWait.Reset\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinWait.SpinOnce\">\r\n<meta name=\"APIName\" content=\"System.Threading.SpinWait.SpinUntil\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"57974bef-9da1-aff3-0ed3-5b9967d81137\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides support for spin-based waiting.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.SpinWait\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.SpinWait.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.SpinWait.yml","open_to_public_contributors":true,"api_name":["System.Threading.SpinWait","System.Threading.SpinWait.Count","System.Threading.SpinWait.NextSpinWillYield","System.Threading.SpinWait.Reset","System.Threading.SpinWait.SpinOnce","System.Threading.SpinWait.SpinUntil"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.SpinWait","System::Threading::SpinWait","System.Threading.SpinWait.Count","System::Threading::SpinWait::Count","System.Threading.SpinWait.NextSpinWillYield","System::Threading::SpinWait::NextSpinWillYield","System.Threading.SpinWait.Reset","System::Threading::SpinWait::Reset","System.Threading.SpinWait.SpinOnce","System::Threading::SpinWait::SpinOnce","System.Threading.SpinWait.SpinUntil","System::Threading::SpinWait::SpinUntil"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"57974bef-9da1-aff3-0ed3-5b9967d81137","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading/SpinWait.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SpinWait struct | Microsoft Docs","_op_ogTitle":"SpinWait struct","description":"Provides support for spin-based waiting.\n","toc_asset_id":"_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.SpinWait","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.spinwait","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.spinwait","fileRelativePath":"System.Threading.SpinWait.html"},"themesRelativePathToOutputRoot":"_themes/"}