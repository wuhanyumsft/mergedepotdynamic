{"content":"    \r\n    <h1 id=\"System_Collections_CollectionBase\">\r\n      <span class=\"lang-csharp\">CollectionBase</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides the <code>abstract</code> base class for a strongly typed collection.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class CollectionBase : System.Collections.IList</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CollectionBase</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A CollectionBase instance is always modifiable. See <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> for a read-only version of this class.  </p>\n<p> The capacity of a CollectionBase is the number of elements the CollectionBase can hold. As elements are added to a CollectionBase, the capacity is automatically increased as required through reallocation. The capacity can be decreased by setting the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property explicitly.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase__ctor\" data-linktype=\"self-bookmark\">CollectionBase()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class with the default initial capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase__ctor_System_Int32_\" data-linktype=\"self-bookmark\">CollectionBase(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class with the specified capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_Capacity\" data-linktype=\"self-bookmark\">Capacity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the number of elements that the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> can contain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements contained in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance. This property cannot be overridden.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_InnerList\" data-linktype=\"self-bookmark\">InnerList</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> containing the list of elements in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_List\" data-linktype=\"self-bookmark\">List</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> containing the list of elements in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all objects from the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance. This method cannot be overridden.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_OnClear\" data-linktype=\"self-bookmark\">OnClear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes when clearing the contents of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_OnClearComplete\" data-linktype=\"self-bookmark\">OnClearComplete()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes after clearing the contents of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_OnInsert_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">OnInsert(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes before inserting a new element into the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_OnInsertComplete_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">OnInsertComplete(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes after inserting a new element into the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_OnRemove_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">OnRemove(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes when removing an element from the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_OnRemoveComplete_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">OnRemoveComplete(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes after removing an element from the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_OnSet_System_Int32_System_Object_System_Object_\" data-linktype=\"self-bookmark\">OnSet(Int32,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes before setting a value in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_OnSetComplete_System_Int32_System_Object_System_Object_\" data-linktype=\"self-bookmark\">OnSetComplete(Int32,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes after setting a value in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_OnValidate_System_Object_\" data-linktype=\"self-bookmark\">OnValidate(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes when validating a value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_RemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">RemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element at the specified index of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance. This method is not overridable.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">ICollection.CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_System_Collections_ICollection_IsSynchronized\" data-linktype=\"self-bookmark\">ICollection.IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_System_Collections_ICollection_SyncRoot\" data-linktype=\"self-bookmark\">ICollection.SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_System_Collections_IList_Add_System_Object_\" data-linktype=\"self-bookmark\">IList.Add(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an object to the end of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_System_Collections_IList_Contains_System_Object_\" data-linktype=\"self-bookmark\">IList.Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> contains a specific element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_System_Collections_IList_IndexOf_System_Object_\" data-linktype=\"self-bookmark\">IList.IndexOf(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the first occurrence within the entire <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_System_Collections_IList_Insert_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">IList.Insert(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts an element into the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_System_Collections_IList_IsFixedSize\" data-linktype=\"self-bookmark\">IList.IsFixedSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> has a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_System_Collections_IList_IsReadOnly\" data-linktype=\"self-bookmark\">IList.IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_System_Collections_IList_Item_System_Int32_\" data-linktype=\"self-bookmark\">IList.Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_CollectionBase_System_Collections_IList_Remove_System_Object_\" data-linktype=\"self-bookmark\">IList.Remove(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase__ctor\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CollectionBase()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class with the default initial capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected CollectionBase ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CollectionBase(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class with the specified capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected CollectionBase (int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements that the new list can initially store.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>capacity</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_Capacity\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_Capacity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Capacity</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the number of elements that the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> can contain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Capacity { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements that the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> can contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Capacity is set to a value that is less than <span class=\"xref\">stem.Collections.CollectionBase.Count*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is not enough memory available on the system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Capacity is the number of elements that the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> can store. <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a> is the number of elements that are actually in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.  </p>\n<p> Capacity is always greater than or equal to <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>. If <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a> exceeds Capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  </p>\n<p> The capacity can be decreased by setting the Capacity property explicitly. When the value of Capacity is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is an O(<code>n</code>) operation, where <code>n</code> is the new capacity.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_Count\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements contained in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance. This property cannot be overridden.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements contained in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_InnerList\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_InnerList_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InnerList</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> containing the list of elements in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Collections.ArrayList InnerList { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> representing the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance itself.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_List_\" data-linktype=\"relative-path\">List</a> property, but not on the instance returned by the InnerList property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_List\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_List_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">List</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> containing the list of elements in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Collections.IList List { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> representing the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance itself.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The On* methods are invoked only on the instance returned by the List property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_InnerList_\" data-linktype=\"relative-path\">InnerList</a> property.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_Clear\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all objects from the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance. This method cannot be overridden.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> To perform custom actions before or after the collection is cleared, override the protected <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_OnClear_\" data-linktype=\"relative-path\">OnClear</a> or <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_OnClearComplete_\" data-linktype=\"relative-path\">OnClearComplete</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position. At this position, calling <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, calling <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>. If the collection is modified between <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the element that it is set to, even if the enumerator is already invalidated.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> While the GetEnumerator method is not visible to COM clients by default, inheriting the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class can expose it and can cause undesirable behavior in COM clients.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_OnClear\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_OnClear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnClear()</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes when clearing the contents of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnClear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_List_\" data-linktype=\"relative-path\">List</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_InnerList_\" data-linktype=\"relative-path\">InnerList</a> property.  </p>\n<p> If the process fails, the collection reverts back to its previous state.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_OnClearComplete\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_OnClearComplete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnClearComplete()</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes after clearing the contents of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnClearComplete ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_List_\" data-linktype=\"relative-path\">List</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_InnerList_\" data-linktype=\"relative-path\">InnerList</a> property.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_OnInsert_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_OnInsert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnInsert(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes before inserting a new element into the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnInsert (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which to insert <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value of the element at <code>index</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_List_\" data-linktype=\"relative-path\">List</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_InnerList_\" data-linktype=\"relative-path\">InnerList</a> property.  </p>\n<p> If the process fails, the collection reverts back to its previous state.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_OnInsertComplete_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_OnInsertComplete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnInsertComplete(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes after inserting a new element into the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnInsertComplete (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which to insert <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value of the element at <code>index</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_List_\" data-linktype=\"relative-path\">List</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_InnerList_\" data-linktype=\"relative-path\">InnerList</a> property.  </p>\n<p> The collection reverts back to its previous state if one of the following occurs:  </p>\n<ul>\n<li><p>The process fails.  </p>\n</li>\n<li><p>This method is overridden to throw an exception.  </p>\n<p>The default implementation of this method is an O(1) operation.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_OnRemove_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_OnRemove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRemove(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes when removing an element from the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRemove (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>value</code> can be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the element to remove from <code>index</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_List_\" data-linktype=\"relative-path\">List</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_InnerList_\" data-linktype=\"relative-path\">InnerList</a> property.  </p>\n<p> If the process fails, the collection reverts back to its previous state.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_OnRemoveComplete_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_OnRemoveComplete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRemoveComplete(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes after removing an element from the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRemoveComplete (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>value</code> can be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the element to remove from <code>index</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_List_\" data-linktype=\"relative-path\">List</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_InnerList_\" data-linktype=\"relative-path\">InnerList</a> property.  </p>\n<p> The collection reverts back to its previous state if one of the following occurs:  </p>\n<ul>\n<li><p>The process fails.  </p>\n</li>\n<li><p>This method is overridden to throw an exception.  </p>\n<p>The default implementation of this method is an O(1) operation.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_OnSet_System_Int32_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_OnSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnSet(Int32,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes before setting a value in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnSet (int index, object oldValue, object newValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>oldValue</code> can be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to replace with <code>newValue</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value of the element at <code>index</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_List_\" data-linktype=\"relative-path\">List</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_InnerList_\" data-linktype=\"relative-path\">InnerList</a> property.  </p>\n<p> If the process fails, the collection reverts back to its previous state.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_OnSetComplete_System_Int32_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_OnSetComplete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnSetComplete(Int32,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes after setting a value in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnSetComplete (int index, object oldValue, object newValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>oldValue</code> can be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to replace with <code>newValue</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value of the element at <code>index</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_List_\" data-linktype=\"relative-path\">List</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_InnerList_\" data-linktype=\"relative-path\">InnerList</a> property.  </p>\n<p> The collection reverts back to its previous state if one of the following occurs:  </p>\n<ul>\n<li><p>The process fails.  </p>\n</li>\n<li><p>This method is overridden to throw an exception.  </p>\n<p>The default implementation of this method is an O(1) operation.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_OnValidate_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_OnValidate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnValidate(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes when validating a value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnValidate (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to validate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method determines whether <code>value</code> is <code>null</code>, and, if so, throws <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a>. It is intended to be overridden by a derived class to perform additional action when the specified element is validated.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_List_\" data-linktype=\"relative-path\">List</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_InnerList_\" data-linktype=\"relative-path\">InnerList</a> property.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_RemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_RemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element at the specified index of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance. This method is not overridable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.CollectionBase.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_System_Collections_ICollection_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection.CopyTo (Array array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The specified array must be of a compatible type.  </p>\n<p> This method uses <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to copy the elements.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_System_Collections_ICollection_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_System_Collections_ICollection_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.ICollection.IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> is synchronized (thread safe); otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> instance is not synchronized. Derived classes can provide a synchronized version of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property.  </p>\n<p> Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#2\">        // Get the ICollection interface from the CollectionBase\n        // derived class.\n        ICollection^ myCollection = myCollectionBase;\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#2\">        // Get the ICollection interface from the CollectionBase\n        // derived class.\n        ICollection myCollection = myCollectionBase;\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#2\">        &#39; Get the ICollection interface from the CollectionBase\n        &#39; derived class.\n        Dim myCollection As ICollection = myCollectionBase\n        SyncLock myCollection.SyncRoot\n            For Each item As Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_System_Collections_ICollection_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_System_Collections_ICollection_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.ICollection.SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Derived classes can provide their own synchronized version of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property. The synchronizing code must perform operations on the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>, not directly on the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> object.  </p>\n<p> Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> during the entire enumeration:  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#2\">        // Get the ICollection interface from the CollectionBase\n        // derived class.\n        ICollection^ myCollection = myCollectionBase;\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#2\">        // Get the ICollection interface from the CollectionBase\n        // derived class.\n        ICollection myCollection = myCollectionBase;\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#2\">        &#39; Get the ICollection interface from the CollectionBase\n        &#39; derived class.\n        Dim myCollection As ICollection = myCollectionBase\n        SyncLock myCollection.SyncRoot\n            For Each item As Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_System_Collections_IList_Add_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_System_Collections_IList_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Add(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an object to the end of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IList.Add (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to be added to the end of the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> index at which the <code>value</code> has been added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array and copying the existing elements to the new array before the new element is added.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_System_Collections_IList_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_System_Collections_IList_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> contains a specific element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IList.Contains (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> contains the specified <code>value</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether <code>item</code> exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_System_Collections_IList_IndexOf_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_System_Collections_IList_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IndexOf(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and returns the zero-based index of the first occurrence within the entire <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IList.IndexOf (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code> within the entire <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collectionâ€™s objectsâ€™ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether <code>item</code> exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_System_Collections_IList_Insert_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_System_Collections_IList_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Insert(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts an element into the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList.Insert (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>value</code> should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than <span class=\"xref\">stem.Collections.CollectionBase.Count*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.  </p>\n<p> If <code>index</code> is equal to <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>, <code>value</code> is added to the end of <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_System_Collections_IList_IsFixedSize\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_System_Collections_IList_IsFixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IsFixedSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> has a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.IList.IsFixedSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> has a fixed size; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_System_Collections_IList_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_System_Collections_IList_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.IList.IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> is read-only; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_System_Collections_IList_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_System_Collections_IList_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.IList.Item[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The element at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.CollectionBase.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_CollectionBase_System_Collections_IList_Remove_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_CollectionBase_System_Collections_IList_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Remove(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList.Remove (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to remove from the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>value</code> parameter was not found in the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> does not contain the specified object, the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> remains unchanged. No exception is thrown.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.collectionbase#System_Collections_CollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> This method determines equality by calling <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class and uses that implementation to create a collection of <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> objects.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.CollectionBase#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\n\npublic ref class Int16Collection: public CollectionBase\n{\npublic:\n\n   property Int16 Item [int]\n   {\n      Int16 get( int index )\n      {\n         return ( (Int16)(List[ index ]));\n      }\n\n      void set( int index, Int16 value )\n      {\n         List[ index ] = value;\n      }\n   }\n   int Add( Int16 value )\n   {\n      return (List-&gt;Add( value ));\n   }\n\n   int IndexOf( Int16 value )\n   {\n      return (List-&gt;IndexOf( value ));\n   }\n\n   void Insert( int index, Int16 value )\n   {\n      List-&gt;Insert( index, value );\n   }\n\n   void Remove( Int16 value )\n   {\n      List-&gt;Remove( value );\n   }\n\n   bool Contains( Int16 value )\n   {\n      // If value is not of type Int16, this will return false.\n      return (List-&gt;Contains( value ));\n   }\n\nprotected:\n   virtual void OnInsert( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   virtual void OnRemove( int /*index*/, Object^ /*value*/ ) override\n   {\n      // Insert additional code to be run only when removing values.\n   }\n\n   virtual void OnSet( int /*index*/, Object^ /*oldValue*/, Object^ /*newValue*/ ) override\n   {\n      // Insert additional code to be run only when setting values.\n   }\n\n   virtual void OnValidate( Object^ value ) override\n   {\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.Int16&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type Int16.&quot;,&quot;value&quot; );\n   }\n\n};\n\nvoid PrintIndexAndValues( Int16Collection^ myCol );\nvoid PrintValues2( Int16Collection^ myCol );\nint main()\n{\n   // Create and initialize a new CollectionBase.\n   Int16Collection^ myI16 = gcnew Int16Collection;\n   \n   // Add elements to the collection.\n   myI16-&gt;Add( (Int16)1 );\n   myI16-&gt;Add( (Int16)2 );\n   myI16-&gt;Add( (Int16)3 );\n   myI16-&gt;Add( (Int16)5 );\n   myI16-&gt;Add( (Int16)7 );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myI16 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains 3: {0}&quot;, myI16-&gt;Contains( 3 ) );\n   Console::WriteLine( &quot;2 is at index {0}.&quot;, myI16-&gt;IndexOf( 2 ) );\n   Console::WriteLine();\n\n   // Insert an element into the collection at index 3.\n   myI16-&gt;Insert( 3, (Int16)13 );\n   Console::WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Get and set an element using the index.\n   myI16-&gt;Item[ 4 ] = 123;\n   Console::WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n   PrintIndexAndValues( myI16 );\n\n   // Remove an element from the collection.\n   myI16-&gt;Remove( (Int16)2 );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n   PrintIndexAndValues( myI16 );\n}\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( Int16Collection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n// Uses the enumerator. \nvoid PrintValues2( Int16Collection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.CollectionBase#1\">using System;\nusing System.Collections;\n\npublic class Int16Collection : CollectionBase  {\n\n   public Int16 this[ int index ]  {\n      get  {\n         return( (Int16) List[index] );\n      }\n      set  {\n         List[index] = value;\n      }\n   }\n\n   public int Add( Int16 value )  {\n      return( List.Add( value ) );\n   }\n\n   public int IndexOf( Int16 value )  {\n      return( List.IndexOf( value ) );\n   }\n\n   public void Insert( int index, Int16 value )  {\n      List.Insert( index, value );\n   }\n\n   public void Remove( Int16 value )  {\n      List.Remove( value );\n   }\n\n   public bool Contains( Int16 value )  {\n      // If value is not of type Int16, this will return false.\n      return( List.Contains( value ) );\n   }\n\n   protected override void OnInsert( int index, Object value )  {\n      // Insert additional code to be run only when inserting values.\n   }\n\n   protected override void OnRemove( int index, Object value )  {\n      // Insert additional code to be run only when removing values.\n   }\n\n   protected override void OnSet( int index, Object oldValue, Object newValue )  {\n      // Insert additional code to be run only when setting values.\n   }\n\n   protected override void OnValidate( Object value )  {\n      if ( value.GetType() != typeof(System.Int16) )\n         throw new ArgumentException( &quot;value must be of type Int16.&quot;, &quot;value&quot; );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n \n      // Create and initialize a new CollectionBase.\n      Int16Collection myI16 = new Int16Collection();\n\n      // Add elements to the collection.\n      myI16.Add( (Int16) 1 );\n      myI16.Add( (Int16) 2 );\n      myI16.Add( (Int16) 3 );\n      myI16.Add( (Int16) 5 );\n      myI16.Add( (Int16) 7 );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myI16 );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myI16 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains 3: {0}&quot;, myI16.Contains( 3 ) );\n      Console.WriteLine( &quot;2 is at index {0}.&quot;, myI16.IndexOf( 2 ) );\n      Console.WriteLine();\n\n      // Insert an element into the collection at index 3.\n      myI16.Insert( 3, (Int16) 13 );\n      Console.WriteLine( &quot;Contents of the collection after inserting at index 3:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Get and set an element using the index.\n      myI16[4] = 123;\n      Console.WriteLine( &quot;Contents of the collection after setting the element at index 4 to 123:&quot; );\n      PrintIndexAndValues( myI16 );\n\n      // Remove an element from the collection.\n      myI16.Remove( (Int16) 2 );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection after removing the element 2:&quot; );\n      PrintIndexAndValues( myI16 );\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( Int16Collection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( Int16Collection myCol )  {\n      foreach ( Int16 i16 in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, i16 );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( Int16Collection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   1\n   2\n   3\n   5\n   7\n\nContents of the collection (using enumerator):\n   1\n   2\n   3\n   5\n   7\n\nInitial contents of the collection (using Count and Item):\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   5\n   [4]:   7\n\nContains 3: True\n2 is at index 1.\n\nContents of the collection after inserting at index 3:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   5\n   [5]:   7\n\nContents of the collection after setting the element at index 4 to 123:\n   [0]:   1\n   [1]:   2\n   [2]:   3\n   [3]:   13\n   [4]:   123\n   [5]:   7\n\nContents of the collection after removing the element 2:\n   [0]:   1\n   [1]:   3\n   [2]:   13\n   [3]:   123\n   [4]:   7\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.CollectionBase#1\">Imports System\nImports System.Collections\n\n\nPublic Class Int16Collection\n   Inherits CollectionBase\n\n\n   Default Public Property Item(index As Integer) As Int16\n      Get\n         Return CType(List(index), Int16)\n      End Get\n      Set\n         List(index) = value\n      End Set\n   End Property\n\n\n   Public Function Add(value As Int16) As Integer\n      Return List.Add(value)\n   End Function &#39;Add\n\n   Public Function IndexOf(value As Int16) As Integer\n      Return List.IndexOf(value)\n   End Function &#39;IndexOf\n\n\n   Public Sub Insert(index As Integer, value As Int16)\n      List.Insert(index, value)\n   End Sub &#39;Insert\n\n\n   Public Sub Remove(value As Int16)\n      List.Remove(value)\n   End Sub &#39;Remove\n\n\n   Public Function Contains(value As Int16) As Boolean\n      &#39; If value is not of type Int16, this will return false.\n      Return List.Contains(value)\n   End Function &#39;Contains\n\n\n   Protected Overrides Sub OnInsert(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when inserting values.\n   End Sub &#39;OnInsert\n\n\n   Protected Overrides Sub OnRemove(index As Integer, value As Object)\n      &#39; Insert additional code to be run only when removing values.\n   End Sub &#39;OnRemove\n\n\n   Protected Overrides Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n      &#39; Insert additional code to be run only when setting values.\n   End Sub &#39;OnSet\n\n\n   Protected Overrides Sub OnValidate(value As Object)\n      If Not GetType(System.Int16).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type Int16.&quot;, &quot;value&quot;)\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;Int16Collection\n\n\nPublic Class SamplesCollectionBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new CollectionBase.\n      Dim myI16 As New Int16Collection()\n\n      &#39; Adds elements to the collection.\n      myI16.Add( 1 )\n      myI16.Add( 2 )\n      myI16.Add( 3 )\n      myI16.Add( 5 )\n      myI16.Add( 7 )\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintValues1(myI16)\n      \n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintValues2(myI16)\n      \n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Count and Item):&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Searches the collection with Contains and IndexOf.\n      Console.WriteLine(&quot;Contains 3: {0}&quot;, myI16.Contains(3))\n      Console.WriteLine(&quot;2 is at index {0}.&quot;, myI16.IndexOf(2))\n      Console.WriteLine()\n      \n      &#39; Inserts an element into the collection at index 3.\n      myI16.Insert(3, 13)\n      Console.WriteLine(&quot;Contents of the collection after inserting at index 3:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Gets and sets an element using the index.\n      myI16(4) = 123\n      Console.WriteLine(&quot;Contents of the collection after setting the element at index 4 to 123:&quot;)\n      PrintIndexAndValues(myI16)\n      \n      &#39; Removes an element from the collection.\n      myI16.Remove(2)\n\n      &#39; Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine(&quot;Contents of the collection after removing the element 2:&quot;)\n      PrintIndexAndValues(myI16)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As Int16Collection)\n      Dim i As Integer\n      For i = 0 To myCol.Count - 1\n          Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n      Next i\n      Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As Int16Collection)\n      Dim i16 As Int16\n      For Each i16 In  myCol\n          Console.WriteLine(&quot;   {0}&quot;, i16)\n      Next i16\n      Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As Int16Collection)\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   1\n&#39;   2\n&#39;   3\n&#39;   5\n&#39;   7\n&#39;\n&#39;Initial contents of the collection (using Count and Item):\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   5\n&#39;   [4]:   7\n&#39;\n&#39;Contains 3: True\n&#39;2 is at index 1.\n&#39;\n&#39;Contents of the collection after inserting at index 3:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   5\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after setting the element at index 4 to 123:\n&#39;   [0]:   1\n&#39;   [1]:   2\n&#39;   [2]:   3\n&#39;   [3]:   13\n&#39;   [4]:   123\n&#39;   [5]:   7\n&#39;\n&#39;Contents of the collection after removing the element 2:\n&#39;   [0]:   1\n&#39;   [1]:   3\n&#39;   [2]:   13\n&#39;   [3]:   123\n&#39;   [4]:   7\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.CollectionBase.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.CollectionBase.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.Capacity\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.InnerList\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.List\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.OnClear\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.OnClearComplete\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.OnInsert\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.OnInsertComplete\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.OnRemove\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.OnRemoveComplete\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.OnSet\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.OnSetComplete\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.OnValidate\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.RemoveAt\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.ICollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.ICollection.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.ICollection.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.IList.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.IList.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.IList.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.IList.Insert\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.IList.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.IList.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.IList.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.CollectionBase.IList.Remove\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"5d8771a2-7474-bf12-3f6a-246ff753a240\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the abstract base class for a strongly typed collection.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.CollectionBase\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.CollectionBase.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.CollectionBase.yml","open_to_public_contributors":true,"api_name":["System.Collections.CollectionBase","System.Collections.CollectionBase..ctor","System.Collections.CollectionBase.Capacity","System.Collections.CollectionBase.Clear","System.Collections.CollectionBase.Count","System.Collections.CollectionBase.GetEnumerator","System.Collections.CollectionBase.InnerList","System.Collections.CollectionBase.List","System.Collections.CollectionBase.OnClear","System.Collections.CollectionBase.OnClearComplete","System.Collections.CollectionBase.OnInsert","System.Collections.CollectionBase.OnInsertComplete","System.Collections.CollectionBase.OnRemove","System.Collections.CollectionBase.OnRemoveComplete","System.Collections.CollectionBase.OnSet","System.Collections.CollectionBase.OnSetComplete","System.Collections.CollectionBase.OnValidate","System.Collections.CollectionBase.RemoveAt","System.Collections.CollectionBase.ICollection.CopyTo","System.Collections.CollectionBase.ICollection.IsSynchronized","System.Collections.CollectionBase.ICollection.SyncRoot","System.Collections.CollectionBase.IList.Add","System.Collections.CollectionBase.IList.Contains","System.Collections.CollectionBase.IList.IndexOf","System.Collections.CollectionBase.IList.Insert","System.Collections.CollectionBase.IList.IsFixedSize","System.Collections.CollectionBase.IList.IsReadOnly","System.Collections.CollectionBase.IList.Item","System.Collections.CollectionBase.IList.Remove"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.CollectionBase","System::Collections::CollectionBase","System.Collections.CollectionBase.#ctor","System::Collections::CollectionBase::#ctor","System.Collections.CollectionBase.Capacity","System::Collections::CollectionBase::Capacity","System.Collections.CollectionBase.Clear","System::Collections::CollectionBase::Clear","System.Collections.CollectionBase.Count","System::Collections::CollectionBase::Count","System.Collections.CollectionBase.GetEnumerator","System::Collections::CollectionBase::GetEnumerator","System.Collections.CollectionBase.InnerList","System::Collections::CollectionBase::InnerList","System.Collections.CollectionBase.List","System::Collections::CollectionBase::List","System.Collections.CollectionBase.OnClear","System::Collections::CollectionBase::OnClear","System.Collections.CollectionBase.OnClearComplete","System::Collections::CollectionBase::OnClearComplete","System.Collections.CollectionBase.OnInsert","System::Collections::CollectionBase::OnInsert","System.Collections.CollectionBase.OnInsertComplete","System::Collections::CollectionBase::OnInsertComplete","System.Collections.CollectionBase.OnRemove","System::Collections::CollectionBase::OnRemove","System.Collections.CollectionBase.OnRemoveComplete","System::Collections::CollectionBase::OnRemoveComplete","System.Collections.CollectionBase.OnSet","System::Collections::CollectionBase::OnSet","System.Collections.CollectionBase.OnSetComplete","System::Collections::CollectionBase::OnSetComplete","System.Collections.CollectionBase.OnValidate","System::Collections::CollectionBase::OnValidate","System.Collections.CollectionBase.RemoveAt","System::Collections::CollectionBase::RemoveAt","System.Collections.CollectionBase.System#Collections#ICollection#CopyTo","System::Collections::CollectionBase::System#Collections#ICollection#CopyTo","System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized","System::Collections::CollectionBase::System#Collections#ICollection#IsSynchronized","System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot","System::Collections::CollectionBase::System#Collections#ICollection#SyncRoot","System.Collections.CollectionBase.System#Collections#IList#Add","System::Collections::CollectionBase::System#Collections#IList#Add","System.Collections.CollectionBase.System#Collections#IList#Contains","System::Collections::CollectionBase::System#Collections#IList#Contains","System.Collections.CollectionBase.System#Collections#IList#IndexOf","System::Collections::CollectionBase::System#Collections#IList#IndexOf","System.Collections.CollectionBase.System#Collections#IList#Insert","System::Collections::CollectionBase::System#Collections#IList#Insert","System.Collections.CollectionBase.System#Collections#IList#IsFixedSize","System::Collections::CollectionBase::System#Collections#IList#IsFixedSize","System.Collections.CollectionBase.System#Collections#IList#IsReadOnly","System::Collections::CollectionBase::System#Collections#IList#IsReadOnly","System.Collections.CollectionBase.System#Collections#IList#Item","System::Collections::CollectionBase::System#Collections#IList#Item","System.Collections.CollectionBase.System#Collections#IList#Remove","System::Collections::CollectionBase::System#Collections#IList#Remove"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"5d8771a2-7474-bf12-3f6a-246ff753a240","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/CollectionBase.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CollectionBase class | Microsoft Docs","_op_ogTitle":"CollectionBase class","description":"Provides the abstract base class for a strongly typed collection.\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.CollectionBase","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.collectionbase","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.collectionbase","fileRelativePath":"System.Collections.CollectionBase.html"},"themesRelativePathToOutputRoot":"_themes/"}