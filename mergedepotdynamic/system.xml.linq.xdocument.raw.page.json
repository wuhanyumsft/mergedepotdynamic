{"content":"    \r\n    <h1 id=\"System_Xml_Linq_XDocument\">\r\n      <span class=\"lang-csharp\">XDocument</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an XML document. For the components and usage of an XDocument object, see <a href=\"../Topic/XDocument%20Class%20Overview.md\" data-linktype=\"relative-path\">XDocument Class Overview</a>.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3354dac0913e417b\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class XDocument : System.Xml.Linq.XContainer</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">System.Xml.Linq.XContainer</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XDocument</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Add_System_Object_\" data-linktype=\"relative-path\">Add(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Add_System_Object___\" data-linktype=\"relative-path\">Add(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_AddFirst_System_Object_\" data-linktype=\"relative-path\">AddFirst(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_AddFirst_System_Object___\" data-linktype=\"relative-path\">AddFirst(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_CreateWriter\" data-linktype=\"relative-path\">CreateWriter()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_DescendantNodes\" data-linktype=\"relative-path\">DescendantNodes()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Descendants\" data-linktype=\"relative-path\">Descendants()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Descendants_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">Descendants(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Element_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">Element(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Elements\" data-linktype=\"relative-path\">Elements()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Elements_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">Elements(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_FirstNode\" data-linktype=\"relative-path\">FirstNode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_LastNode\" data-linktype=\"relative-path\">LastNode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Nodes\" data-linktype=\"relative-path\">Nodes()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_RemoveNodes\" data-linktype=\"relative-path\">RemoveNodes()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_ReplaceNodes_System_Object_\" data-linktype=\"relative-path\">ReplaceNodes(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_ReplaceNodes_System_Object___\" data-linktype=\"relative-path\">ReplaceNodes(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_AddAfterSelf_System_Object_\" data-linktype=\"relative-path\">AddAfterSelf(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_AddAfterSelf_System_Object___\" data-linktype=\"relative-path\">AddAfterSelf(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_AddBeforeSelf_System_Object_\" data-linktype=\"relative-path\">AddBeforeSelf(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_AddBeforeSelf_System_Object___\" data-linktype=\"relative-path\">AddBeforeSelf(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_Ancestors\" data-linktype=\"relative-path\">Ancestors()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_Ancestors_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">Ancestors(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_CompareDocumentOrder_System_Xml_Linq_XNode_System_Xml_Linq_XNode_\" data-linktype=\"relative-path\">CompareDocumentOrder(XNode,XNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_CreateReader\" data-linktype=\"relative-path\">CreateReader()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_CreateReader_System_Xml_Linq_ReaderOptions_\" data-linktype=\"relative-path\">CreateReader(ReaderOptions)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_DeepEquals_System_Xml_Linq_XNode_System_Xml_Linq_XNode_\" data-linktype=\"relative-path\">DeepEquals(XNode,XNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_DocumentOrderComparer\" data-linktype=\"relative-path\">DocumentOrderComparer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsAfterSelf\" data-linktype=\"relative-path\">ElementsAfterSelf()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsAfterSelf_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">ElementsAfterSelf(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsBeforeSelf\" data-linktype=\"relative-path\">ElementsBeforeSelf()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsBeforeSelf_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">ElementsBeforeSelf(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_EqualityComparer\" data-linktype=\"relative-path\">EqualityComparer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_IsAfter_System_Xml_Linq_XNode_\" data-linktype=\"relative-path\">IsAfter(XNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_IsBefore_System_Xml_Linq_XNode_\" data-linktype=\"relative-path\">IsBefore(XNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_NextNode\" data-linktype=\"relative-path\">NextNode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_NodesAfterSelf\" data-linktype=\"relative-path\">NodesAfterSelf()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_NodesBeforeSelf\" data-linktype=\"relative-path\">NodesBeforeSelf()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_PreviousNode\" data-linktype=\"relative-path\">PreviousNode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ReadFrom_System_Xml_XmlReader_\" data-linktype=\"relative-path\">ReadFrom(XmlReader)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_Remove\" data-linktype=\"relative-path\">Remove()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ReplaceWith_System_Object_\" data-linktype=\"relative-path\">ReplaceWith(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ReplaceWith_System_Object___\" data-linktype=\"relative-path\">ReplaceWith(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ToString_System_Xml_Linq_SaveOptions_\" data-linktype=\"relative-path\">ToString(SaveOptions)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_AddAnnotation_System_Object_\" data-linktype=\"relative-path\">AddAnnotation(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Annotation_System_Type_\" data-linktype=\"relative-path\">Annotation(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Annotation__1\" data-linktype=\"relative-path\">Annotation&lt;T&gt;()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Annotations_System_Type_\" data-linktype=\"relative-path\">Annotations(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Annotations__1\" data-linktype=\"relative-path\">Annotations&lt;T&gt;()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_BaseUri\" data-linktype=\"relative-path\">BaseUri</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Document\" data-linktype=\"relative-path\">Document</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Parent\" data-linktype=\"relative-path\">Parent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_RemoveAnnotations_System_Type_\" data-linktype=\"relative-path\">RemoveAnnotations(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_RemoveAnnotations__1\" data-linktype=\"relative-path\">RemoveAnnotations&lt;T&gt;()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_System_Xml_IXmlLineInfo_HasLineInfo\" data-linktype=\"relative-path\">IXmlLineInfo.HasLineInfo()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_System_Xml_IXmlLineInfo_LineNumber\" data-linktype=\"relative-path\">IXmlLineInfo.LineNumber</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_System_Xml_IXmlLineInfo_LinePosition\" data-linktype=\"relative-path\">IXmlLineInfo.LinePosition</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3354dac0913e417b\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> For details about the valid content of an XDocument, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument__ctor\" data-linktype=\"self-bookmark\">XDocument()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument__ctor_System_Object___\" data-linktype=\"self-bookmark\">XDocument(Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> class with the specified content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument__ctor_System_Xml_Linq_XDocument_\" data-linktype=\"self-bookmark\">XDocument(XDocument)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> class from an existing <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument__ctor_System_Xml_Linq_XDeclaration_System_Object___\" data-linktype=\"self-bookmark\">XDocument(XDeclaration,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> class with the specified <a class=\"xref\" href=\"system.xml.linq.xdeclaration\" data-linktype=\"relative-path\">XDeclaration</a> and content.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Declaration\" data-linktype=\"self-bookmark\">Declaration</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the XML declaration for this document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_DocumentType\" data-linktype=\"self-bookmark\">DocumentType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the Document Type Definition (DTD) for this document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_NodeType\" data-linktype=\"self-bookmark\">NodeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the node type for this node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Root\" data-linktype=\"self-bookmark\">Root</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the root element of the XML Tree for this document.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Load_System_IO_Stream_\" data-linktype=\"self-bookmark\">Load(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> instance by using the specified stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Load_System_IO_TextReader_\" data-linktype=\"self-bookmark\">Load(TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Load_System_String_\" data-linktype=\"self-bookmark\">Load(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Load_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">Load(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Load_System_IO_Stream_System_Xml_Linq_LoadOptions_\" data-linktype=\"self-bookmark\">Load(Stream,LoadOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Load_System_IO_TextReader_System_Xml_Linq_LoadOptions_\" data-linktype=\"self-bookmark\">Load(TextReader,LoadOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Load_System_String_System_Xml_Linq_LoadOptions_\" data-linktype=\"self-bookmark\">Load(String,LoadOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a file, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Load_System_Xml_XmlReader_System_Xml_Linq_LoadOptions_\" data-linktype=\"self-bookmark\">Load(XmlReader,LoadOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>, optionally setting the base URI, and retaining line information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Parse_System_String_System_Xml_Linq_LoadOptions_\" data-linktype=\"self-bookmark\">Parse(String,LoadOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a string, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Save_System_IO_Stream_\" data-linktype=\"self-bookmark\">Save(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Save_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">Save(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Save_System_String_\" data-linktype=\"self-bookmark\">Save(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to a file, overwriting an existing file, if it exists.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Save_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">Save(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Save_System_IO_Stream_System_Xml_Linq_SaveOptions_\" data-linktype=\"self-bookmark\">Save(Stream,SaveOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, optionally specifying formatting behavior.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Save_System_IO_TextWriter_System_Xml_Linq_SaveOptions_\" data-linktype=\"self-bookmark\">Save(TextWriter,SaveOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>, optionally disabling formatting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_Save_System_String_System_Xml_Linq_SaveOptions_\" data-linktype=\"self-bookmark\">Save(String,SaveOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to a file, optionally disabling formatting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XDocument_WriteTo_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">WriteTo(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Write this document to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument__ctor\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XDocument()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XDocument ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There are not many scenarios that require you to create an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>. Instead, you can usually create your XML trees with an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> as your root node.  </p>\n<p> For details about the valid content of an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new document, and then adds a comment and an element to it.  </p>\n<pre><code class=\"lang-c#\">\n                XDocument doc = new XDocument();  \ndoc.Add(new XComment(&quot;This is a comment&quot;));  \ndoc.Add(new XElement(&quot;Root&quot;, &quot;content&quot;));  \nConsole.WriteLine(doc);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim doc As XDocument = New XDocument()  \ndoc.Add(&lt;!--This is a comment--&gt;)  \ndoc.Add(&lt;Root&gt;content&lt;/Root&gt;)  \nConsole.WriteLine(doc)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;!--This is a comment--&gt;  \n&lt;Root&gt;content&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument__ctor_System_Object___\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XDocument(Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> class with the specified content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XDocument (object[] content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A parameter list of content objects to add to this document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There are not many scenarios that require you to create an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>. Instead, you can usually create your XML trees with an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> as your root node.  </p>\n<p> For details about the valid content of an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a document, and then adds a comment and an element to it. It then composes another document using the results of a query.  </p>\n<pre><code class=\"lang-c#\">\n                XDocument srcTree = new XDocument(  \n    new XComment(&quot;This is a comment&quot;),  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child1&quot;, &quot;data1&quot;),  \n        new XElement(&quot;Child2&quot;, &quot;data2&quot;),  \n        new XElement(&quot;Child3&quot;, &quot;data3&quot;),  \n        new XElement(&quot;Child2&quot;, &quot;data4&quot;),  \n        new XElement(&quot;Info5&quot;, &quot;info5&quot;),  \n        new XElement(&quot;Info6&quot;, &quot;info6&quot;),  \n        new XElement(&quot;Info7&quot;, &quot;info7&quot;),  \n        new XElement(&quot;Info8&quot;, &quot;info8&quot;)  \n    )  \n);  \n\nXDocument doc = new XDocument(  \n    new XComment(&quot;This is a comment&quot;),  \n    new XElement(&quot;Root&quot;,  \n        from el in srcTree.Element(&quot;Root&quot;).Elements()  \n        where ((string)el).StartsWith(&quot;data&quot;)  \n        select el  \n    )  \n);  \nConsole.WriteLine(doc);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XDocument = _  \n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;  \n        &lt;!--This is a comment--&gt;  \n        &lt;Root&gt;  \n            &lt;Child1&gt;data1&lt;/Child1&gt;  \n            &lt;Child2&gt;data2&lt;/Child2&gt;  \n            &lt;Child3&gt;data3&lt;/Child3&gt;  \n            &lt;Child2&gt;data4&lt;/Child2&gt;  \n            &lt;Info5&gt;info5&lt;/Info5&gt;  \n            &lt;Info6&gt;info6&lt;/Info6&gt;  \n            &lt;Info7&gt;info7&lt;/Info7&gt;  \n            &lt;Info8&gt;info8&lt;/Info8&gt;  \n        &lt;/Root&gt;  \nDim doc As XDocument = _   \n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;  \n        &lt;!--This is a comment--&gt;  \n        &lt;Root&gt;  \n            &lt;%= From el In srcTree.&lt;Root&gt;.Elements _  \n                Where CStr(el).StartsWith(&quot;data&quot;) _  \n                Select el %&gt;  \n        &lt;/Root&gt;  \nConsole.WriteLine(doc)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;!--This is a comment--&gt;  \n&lt;Root&gt;  \n  &lt;Child1&gt;data1&lt;/Child1&gt;  \n  &lt;Child2&gt;data2&lt;/Child2&gt;  \n  &lt;Child3&gt;data3&lt;/Child3&gt;  \n  &lt;Child2&gt;data4&lt;/Child2&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument__ctor_System_Xml_Linq_XDocument_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XDocument(XDocument)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> class from an existing <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XDocument (System.Xml.Linq.XDocument other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> object that will be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You use this constructor to make a deep copy of an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>.  </p>\n<p> This constructor traverses all nodes and attributes in the document specified in the <code>other</code> parameter, and creates copies of all nodes as it assembles the newly initialized <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument__ctor_System_Xml_Linq_XDeclaration_System_Object___\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XDocument(XDeclaration,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> class with the specified <a class=\"xref\" href=\"system.xml.linq.xdeclaration\" data-linktype=\"relative-path\">XDeclaration</a> and content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XDocument (System.Xml.Linq.XDeclaration declaration, object[] content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>declaration</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdeclaration\" data-linktype=\"relative-path\">XDeclaration</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xdeclaration\" data-linktype=\"relative-path\">XDeclaration</a> for the document.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The content of the document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There are not many scenarios that require you to create an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>. Instead, you can usually create your XML trees with an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> root node. Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> as your root node.  </p>\n<p> For details about the valid content of an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this constructor to create a document.  </p>\n<pre><code class=\"lang-c#\">\n                XDocument srcTree = new XDocument(  \n    new XComment(&quot;This is a comment&quot;),  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child1&quot;, &quot;data1&quot;),  \n        new XElement(&quot;Child2&quot;, &quot;data2&quot;),  \n        new XElement(&quot;Child3&quot;, &quot;data3&quot;),  \n        new XElement(&quot;Child2&quot;, &quot;data4&quot;),  \n        new XElement(&quot;Info5&quot;, &quot;info5&quot;),  \n        new XElement(&quot;Info6&quot;, &quot;info6&quot;),  \n        new XElement(&quot;Info7&quot;, &quot;info7&quot;),  \n        new XElement(&quot;Info8&quot;, &quot;info8&quot;)  \n    )  \n);  \n\nXDocument doc = new XDocument(  \n    new XDeclaration(&quot;1.0&quot;, &quot;utf-8&quot;, &quot;yes&quot;),  \n    new XComment(&quot;This is a new comment&quot;),  \n    new XElement(&quot;Root&quot;,  \n        from el in srcTree.Element(&quot;Root&quot;).Elements()  \n        where ((string)el).StartsWith(&quot;data&quot;)  \n        select el  \n    )  \n);  \ndoc.Save(&quot;Test.xml&quot;);  \nConsole.WriteLine(File.ReadAllText(&quot;Test.xml&quot;));\n</code></pre><pre><code class=\"lang-vb\">\n                Dim srcTree As XDocument = _   \n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;  \n        &lt;!--This is a comment--&gt;  \n        &lt;Root&gt;  \n            &lt;Child1&gt;data1&lt;/Child1&gt;  \n            &lt;Child2&gt;data2&lt;/Child2&gt;  \n            &lt;Child3&gt;data3&lt;/Child3&gt;  \n            &lt;Child2&gt;data4&lt;/Child2&gt;  \n            &lt;Info5&gt;info5&lt;/Info5&gt;  \n            &lt;Info6&gt;info6&lt;/Info6&gt;  \n            &lt;Info7&gt;info7&lt;/Info7&gt;  \n            &lt;Info8&gt;info8&lt;/Info8&gt;  \n        &lt;/Root&gt;  \nDim doc As XDocument = _   \n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;  \n        &lt;!--This is a new comment--&gt;  \n        &lt;Root&gt;  \n            &lt;%= From el In srcTree.&lt;Root&gt;.Elements _  \n                Where CStr(el).StartsWith(&quot;data&quot;) _  \n                Select el %&gt;  \n        &lt;/Root&gt;  \ndoc.Save(&quot;Test.xml&quot;)  \nConsole.WriteLine(File.ReadAllText(&quot;Test.xml&quot;))\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;  \n&lt;!--This is a new comment--&gt;  \n&lt;Root&gt;  \n  &lt;Child1&gt;data1&lt;/Child1&gt;  \n  &lt;Child2&gt;data2&lt;/Child2&gt;  \n  &lt;Child3&gt;data3&lt;/Child3&gt;  \n  &lt;Child2&gt;data4&lt;/Child2&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Declaration\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Declaration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Declaration</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the XML declaration for this document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XDeclaration Declaration { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdeclaration\" data-linktype=\"relative-path\">XDeclaration</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xdeclaration\" data-linktype=\"relative-path\">XDeclaration</a> that contains the XML declaration for this document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Sometimes you have to create an XML declaration for a document. If you want to indicate that a document is standalone, you must use this property. If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <a class=\"xref\" href=\"system.xml.linq.xdeclaration\" data-linktype=\"relative-path\">XDeclaration</a>. Another approach for encoding a document is to specify the encoding on an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> that you pass to LINQ to XML for writing.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this property to retrieve the XML declaration of a document.  </p>\n<pre><code class=\"lang-c#\">\n                XDocument doc = new XDocument(  \n    new XDeclaration(&quot;1.0&quot;, &quot;utf-8&quot;, &quot;yes&quot;),  \n    new XComment(&quot;This is a comment&quot;),  \n    new XElement(&quot;Root&quot;, &quot;content&quot;)  \n);  \n\nConsole.WriteLine(doc.Declaration);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim doc As XDocument = _  \n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;  \n        &lt;!--This is a comment--&gt;  \n        &lt;Root&gt;content&lt;/Root&gt;  \n\nConsole.WriteLine(doc.Declaration)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_DocumentType\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_DocumentType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DocumentType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the Document Type Definition (DTD) for this document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XDocumentType DocumentType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocumenttype\" data-linktype=\"relative-path\">XDocumentType</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.xdocumenttype\" data-linktype=\"relative-path\">XDocumentType</a> that contains the DTD for this document.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/sqltecxlinq-md.md&quot; -->LINQ to XML<!--END INCLUDE --> provides limited support for DTDs.  </p>\n<p> You can populate an XML tree with an XML document that contains a DTD. The XML tree will then contain a DocumentType node. When you serialize or save the tree, the DTD will also be serialized. <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/sqltecxlinq-md.md&quot; -->LINQ to XML<!--END INCLUDE --> will expand any entities in the DTD. When you serialize or save the XML tree, the entity references are not saved; instead, the nodes are saved with the entity references replaced by the text of the entity.  </p>\n<p> If the DTD contains default attributes, the attributes are created in the XML tree as ordinary attributes.  </p>\n<p> By default, <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/sqltecxlinq-md.md&quot; -->LINQ to XML<!--END INCLUDE --> does not validate a document based on its DTD. To validate a document based on a DTD, create an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> that will validate based on a DTD, and then create an XML tree from the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a document that contains an <a class=\"xref\" href=\"system.xml.linq.xdocumenttype\" data-linktype=\"relative-path\">XDocumentType</a>.  </p>\n<p> Visual Basic does not support document types within XML literals. However, it is possible to create a document that contains a document type by first creating the document using XML literals, and then creating and adding an <a class=\"xref\" href=\"system.xml.linq.xdocumenttype\" data-linktype=\"relative-path\">XDocumentType</a> node in the appropriate place in the XML tree.  </p>\n<pre><code class=\"lang-c#\">\n                string internalSubset = @&quot;&lt;!ELEMENT Pubs (Book+)&gt;  \n&lt;!ELEMENT Book (Title, Author)&gt;  \n&lt;!ELEMENT Title (#PCDATA)&gt;  \n&lt;!ELEMENT Author (#PCDATA)&gt;&quot;;  \n\nstring target = &quot;xml-stylesheet&quot;;  \nstring data = &quot;href=&#39;mystyle.css&#39; title=&#39;Compact&#39; type=&#39;text/css&#39;&quot;;  \n\nXDocument doc = new XDocument(  \n    new XComment(&quot;This is a comment.&quot;),  \n    new XProcessingInstruction(target, data),  \n    new XDocumentType(&quot;Pubs&quot;, null, null, internalSubset),  \n    new XElement(&quot;Pubs&quot;,   \n        new XElement(&quot;Book&quot;,  \n            new XElement(&quot;Title&quot;, &quot;Artifacts of Roman Civilization&quot;),  \n            new XElement(&quot;Author&quot;, &quot;Moreno, Jordao&quot;)  \n        ),  \n        new XElement(&quot;Book&quot;,  \n            new XElement(&quot;Title&quot;, &quot;Midieval Tools and Implements&quot;),  \n            new XElement(&quot;Author&quot;, &quot;Gazit, Inbar&quot;)  \n        )  \n    ),  \n    new XComment(&quot;This is another comment.&quot;)  \n);  \ndoc.Declaration = new XDeclaration(&quot;1.0&quot;, &quot;utf-8&quot;, &quot;true&quot;);  \nConsole.WriteLine(doc);  \n\ndoc.Save(&quot;test.xml&quot;);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim internalSubset = _  \n        &quot;&lt;!ELEMENT Pubs (Book+)&gt;&quot; &amp; Environment.NewLine &amp; _  \n        &quot;&lt;!ELEMENT Book (Title, Author)&gt;&quot; &amp; Environment.NewLine &amp; _  \n        &quot;&lt;!ELEMENT Title (#PCDATA)&gt;&quot; &amp; Environment.NewLine &amp; _  \n        &quot;&lt;!ELEMENT Author (#PCDATA)&gt;&quot;  \n\nDim doc As XDocument = _  \n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;  \n    &lt;!--This is a comment.--&gt;  \n    &lt;?xml-stylesheet href=&#39;mystyle.css&#39; title=&#39;Compact&#39; type=&#39;text/css&#39;?&gt;  \n    &lt;Pubs&gt;  \n        &lt;Book&gt;  \n            &lt;Title&gt;Artifacts of Roman Civilization&lt;/Title&gt;  \n            &lt;Author&gt;Moreno, Jordao&lt;/Author&gt;  \n        &lt;/Book&gt;  \n        &lt;Book&gt;  \n            &lt;Title&gt;Midieval Tools and Implements&lt;/Title&gt;  \n            &lt;Author&gt;Gazit, Inbar&lt;/Author&gt;  \n        &lt;/Book&gt;  \n    &lt;/Pubs&gt;  \n    &lt;!--This is another comment.--&gt;  \n\ndoc.Nodes().Skip(1).First().AddAfterSelf(New XDocumentType(&quot;Pubs&quot;, Nothing, Nothing, internalSubset))  \nConsole.WriteLine(doc)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;!--This is a comment.--&gt;  \n&lt;?xml-stylesheet href=&#39;mystyle.css&#39; title=&#39;Compact&#39; type=&#39;text/css&#39;?&gt;  \n&lt;!DOCTYPE Pubs [&lt;!ELEMENT Pubs (Book+)&gt;  \n&lt;!ELEMENT Book (Title, Author)&gt;  \n&lt;!ELEMENT Title (#PCDATA)&gt;  \n&lt;!ELEMENT Author (#PCDATA)&gt;]&gt;  \n&lt;Pubs&gt;  \n  &lt;Book&gt;  \n    &lt;Title&gt;Artifacts of Roman Civilization&lt;/Title&gt;  \n    &lt;Author&gt;Moreno, Jordao&lt;/Author&gt;  \n  &lt;/Book&gt;  \n  &lt;Book&gt;  \n    &lt;Title&gt;Midieval Tools and Implements&lt;/Title&gt;  \n    &lt;Author&gt;Gazit, Inbar&lt;/Author&gt;  \n  &lt;/Book&gt;  \n&lt;/Pubs&gt;  \n&lt;!--This is another comment.--&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_NodeType\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_NodeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the node type for this node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNodeType NodeType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </div>\r\n                  <p>The node type. For <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> objects, this value is <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because all classes that derive from <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a> contain a <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_NodeType_\" data-linktype=\"relative-path\">NodeType</a> property, you can write code that operates on collections of objects where the type of each is a subclass of <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a>. Your code can then test for the node type of each object in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the use of this property.  </p>\n<pre><code class=\"lang-c#\">\n                // Note that this property uses XmlNodeType, which is in the System.Xml namespace.  \nXDocument xmlTree = new XDocument(  \n    new XDeclaration(&quot;1.0&quot;, &quot;utf-8&quot;, &quot;yes&quot;),  \n    new XElement(&quot;Root&quot;, &quot;content&quot;)  \n);  \nConsole.WriteLine(xmlTree.NodeType);\n</code></pre><pre><code class=\"lang-vb\">\n                &#39; Note that this property uses XmlNodeType, which is in the System.Xml namespace.  \nDim xmlTree As XDocument = _  \n    &lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39; standalone=&#39;yes&#39;?&gt;  \n        &lt;Root&gt;content&lt;/Root&gt;  \nConsole.WriteLine(&quot;{0}&quot;, xmlTree.NodeType)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nDocument\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Root\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Root_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Root</div>        \r\n          </div>\r\n    \r\n            <p>Gets the root element of the XML Tree for this document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XElement Root { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </div>\r\n                  <p>The root <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> of the XML tree.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is useful when you want to compose <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/sqltecxlinq-md.md&quot; -->LINQ to XML<!--END INCLUDE --> queries in the same context as when composing them for a tree rooted in <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>. See <a href=\"../Topic/Querying%20an%20XDocument%20vs.%20Querying%20an%20XElement.md\" data-linktype=\"relative-path\">Querying an XDocument vs. Querying an XElement</a> for more details.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this property to get the root element of a document.  </p>\n<pre><code class=\"lang-c#\">\n                XDocument doc = new XDocument(  \n    new XComment(&quot;This is a comment.&quot;),  \n    new XElement(&quot;Pubs&quot;,   \n        new XElement(&quot;Book&quot;,  \n            new XElement(&quot;Title&quot;, &quot;Artifacts of Roman Civilization&quot;),  \n            new XElement(&quot;Author&quot;, &quot;Moreno, Jordao&quot;)  \n        ),  \n        new XElement(&quot;Book&quot;,  \n            new XElement(&quot;Title&quot;, &quot;Midieval Tools and Implements&quot;),  \n            new XElement(&quot;Author&quot;, &quot;Gazit, Inbar&quot;)  \n        )  \n    ),  \n    new XComment(&quot;This is another comment.&quot;)  \n);  \nConsole.WriteLine(doc.Root.Name.ToString());\n</code></pre><pre><code class=\"lang-vb\">\n                Dim doc As XDocument = _  \n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;  \n    &lt;!--This is a comment.--&gt;  \n    &lt;Pubs&gt;  \n        &lt;Book&gt;  \n            &lt;Title&gt;Artifacts of Roman Civilization&lt;/Title&gt;  \n            &lt;Author&gt;Moreno, Jordao&lt;/Author&gt;  \n        &lt;/Book&gt;  \n        &lt;Book&gt;  \n            &lt;Title&gt;Midieval Tools and Implements&lt;/Title&gt;  \n            &lt;Author&gt;Gazit, Inbar&lt;/Author&gt;  \n        &lt;/Book&gt;  \n        &lt;!--This is another comment.--&gt;  \n    &lt;/Pubs&gt;  \n\nConsole.WriteLine(doc.Root.Name.ToString())\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nPubs\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Load_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> instance by using the specified stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XDocument Load (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream that contains the XML data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> object that reads the data that is contained in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you want to control load options, use the <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Load_\" data-linktype=\"relative-path\">Load</a> overload that takes <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> as a parameter.  </p>\n<p> The loading functionality of LINQ to XML is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.  </p>\n<p> If you have to modify <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a>, follow these steps:  </p>\n<ol>\n<li><p>Create an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> by calling one of the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overloads that take <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> as a parameter.  </p>\n</li>\n<li><p>Pass the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to one of the <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Load_\" data-linktype=\"relative-path\">Load</a> overloads of <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> that takes <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> as a parameter.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Load_System_IO_TextReader_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XDocument Load (System.IO.TextReader textReader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textReader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> that contains the content for the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> that contains the contents of the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a document from a <a class=\"xref\" href=\"system.io.stringreader\" data-linktype=\"relative-path\">StringReader</a>.  </p>\n<pre><code class=\"lang-c#\">\n                TextReader tr = new StringReader(&quot;&lt;Root&gt;Content&lt;/Root&gt;&quot;);  \nXDocument doc = XDocument.Load(tr);  \nConsole.WriteLine(doc);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim tr As TextReader = New StringReader(&quot;&lt;Root&gt;Content&lt;/Root&gt;&quot;)  \nDim doc As XDocument = XDocument.Load(tr)  \nConsole.WriteLine(doc)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Root&gt;Content&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Load_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XDocument Load (string uri);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>uri</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A URI string that references the file to load into a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> that contains the contents of the specified file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses an underlying <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to read the XML into an XML tree.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Parse_\" data-linktype=\"relative-path\">Parse</a> to create an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a string that contains XML.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to load an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a file.  </p>\n<p> This example uses the following XML document:  </p>\n<p> <a href=\"../Topic/Sample%20XML%20File:%20Typical%20Purchase%20Order%20(LINQ%20to%20XML)3.md\" data-linktype=\"relative-path\">Sample XML File: Typical Purchase Order (LINQ to XML)</a>  </p>\n<pre><code class=\"lang-c#\">\n                XDocument doc = XDocument.Load(&quot;PurchaseOrder.xml&quot;);  \nConsole.WriteLine(doc);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim doc As XDocument = XDocument.Load(&quot;PurchaseOrder.xml&quot;)  \nConsole.WriteLine(doc)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;PurchaseOrder PurchaseOrderNumber=&quot;99503&quot; OrderDate=&quot;1999-10-20&quot;&gt;  \n  &lt;Address Type=&quot;Shipping&quot;&gt;  \n    &lt;Name&gt;Ellen Adams&lt;/Name&gt;  \n    &lt;Street&gt;123 Maple Street&lt;/Street&gt;  \n    &lt;City&gt;Mill Valley&lt;/City&gt;  \n    &lt;State&gt;CA&lt;/State&gt;  \n    &lt;Zip&gt;10999&lt;/Zip&gt;  \n    &lt;Country&gt;USA&lt;/Country&gt;  \n  &lt;/Address&gt;  \n  &lt;Address Type=&quot;Billing&quot;&gt;  \n    &lt;Name&gt;Tai Yee&lt;/Name&gt;  \n    &lt;Street&gt;8 Oak Avenue&lt;/Street&gt;  \n    &lt;City&gt;Old Town&lt;/City&gt;  \n    &lt;State&gt;PA&lt;/State&gt;  \n    &lt;Zip&gt;95819&lt;/Zip&gt;  \n    &lt;Country&gt;USA&lt;/Country&gt;  \n  &lt;/Address&gt;  \n  &lt;DeliveryNotes&gt;Please leave packages in shed by driveway.&lt;/DeliveryNotes&gt;  \n  &lt;Items&gt;  \n    &lt;Item PartNumber=&quot;872-AA&quot;&gt;  \n      &lt;ProductName&gt;Lawnmower&lt;/ProductName&gt;  \n      &lt;Quantity&gt;1&lt;/Quantity&gt;  \n      &lt;USPrice&gt;148.95&lt;/USPrice&gt;  \n      &lt;Comment&gt;Confirm this is electric&lt;/Comment&gt;  \n    &lt;/Item&gt;  \n    &lt;Item PartNumber=&quot;926-AA&quot;&gt;  \n      &lt;ProductName&gt;Baby Monitor&lt;/ProductName&gt;  \n      &lt;Quantity&gt;2&lt;/Quantity&gt;  \n      &lt;USPrice&gt;39.98&lt;/USPrice&gt;  \n      &lt;ShipDate&gt;1999-05-21&lt;/ShipDate&gt;  \n    &lt;/Item&gt;  \n  &lt;/Items&gt;  \n&lt;/PurchaseOrder&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Load_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XDocument Load (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> that contains the content for the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> that contains the contents of the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>One possible use for this method is to create a copy of a DOM document in a LINQ to XML tree. To do this, you create an <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> from a DOM document, and then use the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> to create an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a DOM document, creates an <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> from the DOM document, creates an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> using the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a>.  </p>\n<pre><code class=\"lang-c#\">\n                // Create a DOM document with some content.  \nXmlDocument doc = new XmlDocument();  \nXmlElement child = doc.CreateElement(&quot;Child&quot;);  \nchild.InnerText = &quot;child contents&quot;;  \nXmlElement root = doc.CreateElement(&quot;Root&quot;);  \nroot.AppendChild(child);  \ndoc.AppendChild(root);  \n\n// create a reader and move to the content  \nusing (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  \n    // the reader must be in the Interactive state in order to  \n    // create a LINQ to XML tree from it.  \n    nodeReader.MoveToContent();  \n\n    XDocument xRoot = XDocument.Load(nodeReader);  \n    Console.WriteLine(xRoot);  \n}\n</code></pre><pre><code class=\"lang-vb\">&#39; Create a DOM document with some content.  \nDim doc As XmlDocument = New XmlDocument()  \nDim child As XmlElement = doc.CreateElement(&quot;Child&quot;)  \nchild.InnerText = &quot;child contents&quot;  \nDim root As XmlElement = doc.CreateElement(&quot;Root&quot;)  \nroot.AppendChild(child)  \ndoc.AppendChild(root)  \n\n&#39; create a reader and move to the content  \nUsing nodeReader = New XmlNodeReader(doc)  \n    &#39; the reader must be in the Interactive state in order to  \n    &#39; create a LINQ to XML tree from it.  \n    nodeReader.MoveToContent()  \n\n    Dim xRoot As XDocument = XDocument.Load(nodeReader)  \n    Console.WriteLine(xRoot)  \nEnd Using\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child&gt;child contents&lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Load_System_IO_Stream_System_Xml_Linq_LoadOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Stream,LoadOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XDocument Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream containing the XML data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> that specifies whether to load base URI and line information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> object that reads the data that is contained in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The loading functionality of LINQ to XML is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.  </p>\n<p> If you have to modify <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a>, follow these steps:  </p>\n<ol>\n<li><p>Create an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> by calling one of the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overloads that takes <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> as a parameter.  </p>\n</li>\n<li><p>Pass the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to one of the <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Load_\" data-linktype=\"relative-path\">Load</a> overloads of <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> that takes <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> as a parameter.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Load_System_IO_TextReader_System_Xml_Linq_LoadOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(TextReader,LoadOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XDocument Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textReader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> that contains the content for the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> that specifies white space behavior, and whether to load base URI and line information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> that contains the XML that was read from the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the source XML is indented, setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> causes the reader to read all white space in the source XML. Nodes of type <a class=\"xref\" href=\"system.xml.linq.xtext\" data-linktype=\"relative-path\">XText</a> are created for both significant and insignificant white space.  </p>\n<p> If the source XML is indented, not setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  </p>\n<p> If the source XML is not indented, setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Parse_\" data-linktype=\"relative-path\">Parse</a> to create an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a string that contains XML.  </p>\n<p> Setting <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> is not valid when loading from a <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> There is a performance penalty if you set the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag.  </p>\n<p> The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a document from a <a class=\"xref\" href=\"system.io.stringreader\" data-linktype=\"relative-path\">StringReader</a>.  </p>\n<pre><code class=\"lang-c#\">\n                TextReader sr;  \nint whiteSpaceNodes;  \n\nsr = new StringReader(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;);  \nXDocument xmlTree1 = XDocument.Load(sr, LoadOptions.None);  \nsr.Close();  \nwhiteSpaceNodes = xmlTree1  \n    .Element(&quot;Root&quot;)  \n    .DescendantNodesAndSelf()  \n    .OfType&lt;XText&gt;()  \n    .Where(tNode =&gt; tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(&quot;Count of white space nodes (not preserving whitespace): {0}&quot;, whiteSpaceNodes);  \n\nsr = new StringReader(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;);  \nXDocument xmlTree2 = XDocument.Load(sr, LoadOptions.PreserveWhitespace);  \nsr.Close();  \nwhiteSpaceNodes = xmlTree2  \n    .Element(&quot;Root&quot;)  \n    .DescendantNodesAndSelf()  \n    .OfType&lt;XText&gt;()  \n    .Where(tNode =&gt; tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(&quot;Count of white space nodes (preserving whitespace): {0}&quot;, whiteSpaceNodes);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim sr As TextReader  \nDim whiteSpaceNodes As Integer  \n\nsr = New StringReader(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;)  \nDim xmlTree1 As XDocument = XDocument.Load(sr, LoadOptions.None)  \nsr.Close()  \nwhiteSpaceNodes = xmlTree1 _  \n              .Element(&quot;Root&quot;) _  \n              .DescendantNodesAndSelf() _  \n              .OfType(Of XText)() _  \n              .Where(Function(ByVal tNode As XNode) tNode. _  \n                  ToString().Trim().Length = 0).Count()  \nConsole.WriteLine(&quot;Count of white space nodes (not preserving whitespace): {0}&quot;, whiteSpaceNodes)  \n\nsr = New StringReader(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;)  \nDim xmlTree2 As XDocument = XDocument.Load(sr, LoadOptions.PreserveWhitespace)  \nsr.Close()  \nwhiteSpaceNodes = xmlTree2 _  \n              .Element(&quot;Root&quot;) _  \n              .DescendantNodesAndSelf() _  \n              .OfType(Of XText)() _  \n              .Where(Function(ByVal tNode As XNode) tNode. _  \n                  ToString().Trim().Length = 0).Count()  \nConsole.WriteLine(&quot;Count of white space nodes (preserving whitespace): {0}&quot;, whiteSpaceNodes)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                Count of white space nodes (not preserving whitespace): 0  \nCount of white space nodes (preserving whitespace): 3\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Load_System_String_System_Xml_Linq_LoadOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(String,LoadOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a file, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XDocument Load (string uri, System.Xml.Linq.LoadOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>uri</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A URI string that references the file to load into a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> that specifies white space behavior, and whether to load base URI and line information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> that contains the contents of the specified file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the source XML is indented, setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> causes the reader to read all white space in the source XML. Nodes of type <a class=\"xref\" href=\"system.xml.linq.xtext\" data-linktype=\"relative-path\">XText</a> are created for both significant and insignificant white space.  </p>\n<p> If the source XML is indented, not setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  </p>\n<p> If the source XML is not indented, setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Parse_\" data-linktype=\"relative-path\">Parse</a> to create an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a string that contains XML.  </p>\n<p> There is a performance penalty if you set the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> and the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flags.  </p>\n<p> The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to load an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a file.  </p>\n<p> This example uses the following XML document:  </p>\n<p> <a href=\"../Topic/Sample%20XML%20File:%20Typical%20Purchase%20Order%20(LINQ%20to%20XML)3.md\" data-linktype=\"relative-path\">Sample XML File: Typical Purchase Order (LINQ to XML)</a>  </p>\n<pre><code class=\"lang-c#\">\n                XDocument doc1 = XDocument.Load(&quot;PurchaseOrder.xml&quot;, LoadOptions.None);  \nConsole.WriteLine(&quot;nodes if not preserving whitespace: {0}&quot;, doc1.DescendantNodes().Count());  \n\nXDocument doc2 = XDocument.Load(&quot;PurchaseOrder.xml&quot;, LoadOptions.PreserveWhitespace);  \nConsole.WriteLine(&quot;nodes if preserving whitespace: {0}&quot;, doc2.DescendantNodes().Count());\n</code></pre><pre><code class=\"lang-vb\">\n                Dim doc1 As XDocument = XDocument.Load(&quot;PurchaseOrder.xml&quot;, LoadOptions.None)  \nConsole.WriteLine(&quot;nodes if not preserving whitespace: {0}&quot;, doc1.DescendantNodes().Count())  \n\nDim doc2 As XDocument = XDocument.Load(&quot;PurchaseOrder.xml&quot;, LoadOptions.PreserveWhitespace)  \nConsole.WriteLine(&quot;nodes if preserving whitespace: {0}&quot;, doc2.DescendantNodes().Count())\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                nodes if not preserving whitespace: 48  \nnodes if preserving whitespace: 82\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Load_System_Xml_XmlReader_System_Xml_Linq_LoadOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(XmlReader,LoadOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>, optionally setting the base URI, and retaining line information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XDocument Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> that will be read for the content of the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> that specifies whether to load base URI and line information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> that contains the XML that was read from the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By creating an <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> from a DOM document, and then using the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> to create an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Parse_\" data-linktype=\"relative-path\">Parse</a> to create an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a string that contains XML.  </p>\n<p> Setting <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> is not valid when loading from a <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> will be configured to either read whitespace or not. The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces. This will be the behavior regardless of whether <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> is set or not.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> may have a valid base URI or not. If you set <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a>, the base URI will be set in the XML tree from the base URI that is reported by the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> may have a valid line information or not. If you set <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a>, the line information will be set in the XML tree from the line information that is reported by the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.  </p>\n<p> There is a performance penalty if you set the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag.  </p>\n<p> The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads the line information that it loads from the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. It then prints the line information.  </p>\n<pre><code class=\"lang-c#\">\n                string markup =  \n@&quot;&lt;Root&gt;  \n    &lt;Child&gt;  \n        &lt;GrandChild/&gt;  \n    &lt;/Child&gt;  \n&lt;/Root&gt;&quot;;  \n\n// Create a reader and move to the content.  \nusing (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  \n{  \n    // the reader must be in the Interactive state in order to  \n    // Create a LINQ to XML tree from it.  \n    nodeReader.MoveToContent();  \n\n    XDocument xRoot = XDocument.Load(nodeReader, LoadOptions.SetLineInfo);  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;,  \n        &quot;Element Name&quot;.PadRight(20),  \n        &quot;Line&quot;.PadRight(5),  \n        &quot;Position&quot;);  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;,  \n        &quot;------------&quot;.PadRight(20),  \n        &quot;----&quot;.PadRight(5),  \n        &quot;--------&quot;);  \n    foreach (XElement e in xRoot.Elements(&quot;Root&quot;).DescendantsAndSelf())  \n        Console.WriteLine(&quot;{0}{1}{2}&quot;,  \n            (&quot;&quot;.PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \n            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \n            ((IXmlLineInfo)e).LinePosition);  \n}\n</code></pre><pre><code class=\"lang-vb\">\n                Dim markup As String = _  \n    &quot;&lt;Root&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;    &lt;Child&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;        &lt;GrandChild/&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;    &lt;/Child&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;&lt;/Root&gt;&quot;  \n\n&#39; Create a reader and move to the content.  \nUsing nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  \n\n    &#39; The reader must be in the Interactive state in order to  \n    &#39; create a LINQ to XML tree from it.  \n    nodeReader.MoveToContent()  \n\n    Dim xRoot As XDocument = XDocument.Load(nodeReader, LoadOptions.SetLineInfo)  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;, _  \n        &quot;Element Name&quot;.PadRight(20), _  \n        &quot;Line&quot;.PadRight(5), _  \n        &quot;Position&quot;)  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;, _  \n        &quot;------------&quot;.PadRight(20), _  \n        &quot;----&quot;.PadRight(5), _  \n        &quot;--------&quot;)  \n    For Each e As XElement In xRoot.Elements(&quot;Root&quot;).DescendantsAndSelf()  \n        Console.WriteLine(&quot;{0}{1}{2}&quot;, _  \n            (&quot;&quot;.PadRight(e.Ancestors().Count() * 2) &amp; e.Name.ToString()).PadRight(20), _  \n            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  \n            (DirectCast(e, IXmlLineInfo)).LinePosition)  \n    Next  \nEnd Using\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                Element Name        Line Position  \n------------        ---- --------  \nRoot                1    2  \n  Child             2    6  \n    GrandChild      3    10\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XDocument Parse (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> populated from the string that contains XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not preserve white space. If you want to preserve white space in the XML tree, use the overload of <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Parse_\" data-linktype=\"relative-path\">Parse</a> that takes <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> as a parameter.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a string that contains XML. It then parses the string into an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>.  </p>\n<pre><code class=\"lang-c#\">\n                string str =  \n@&quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot;?&gt;  \n&lt;!-- comment at the root level --&gt;  \n&lt;Root&gt;  \n    &lt;Child&gt;Content&lt;/Child&gt;  \n&lt;/Root&gt;&quot;;  \nXDocument doc = XDocument.Parse(str);  \nConsole.WriteLine(doc);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim str As String = _  \n    &quot;&lt;?xml version= &#39;1.0&#39;?&gt;&quot; &amp; _  \n    &quot;&lt;!-- comment at the root level --&gt;&quot; &amp; _  \n    &quot;&lt;Root&gt;&quot; &amp; _  \n    &quot;  &lt;Child&gt;Content&lt;/Child&gt;&quot; &amp; _  \n    &quot;&lt;/Root&gt;&quot;  \n\nDim doc As XDocument = XDocument.Parse(str)  \nConsole.WriteLine(doc)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;!-- comment at the root level --&gt;  \n&lt;Root&gt;  \n  &lt;Child&gt;Content&lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Parse_System_String_System_Xml_Linq_LoadOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,LoadOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> from a string, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XDocument Parse (string text, System.Xml.Linq.LoadOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains XML.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> that specifies white space behavior, and whether to load base URI and line information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> populated from the string that contains XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the source XML is indented, setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> causes the reader to read all white space in the source XML. Nodes of type <a class=\"xref\" href=\"system.xml.linq.xtext\" data-linktype=\"relative-path\">XText</a> are created for both significant and insignificant white space.  </p>\n<p> If the source XML is indented, not setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  </p>\n<p> If the source XML is not indented, setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.  </p>\n<p> Setting <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> is not valid when parsing from a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> There is a performance penalty if you set the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag.  </p>\n<p> The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example parses a string into an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>.  </p>\n<pre><code class=\"lang-c#\">\n                string str =  \n@&quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot;?&gt;  \n&lt;!-- comment at the root level --&gt;  \n&lt;Root&gt;  \n    &lt;Child&gt;Content&lt;/Child&gt;  \n&lt;/Root&gt;&quot;;  \nXDocument doc1 = XDocument.Parse(str, LoadOptions.PreserveWhitespace);  \nConsole.WriteLine(&quot;nodes when preserving whitespace: {0}&quot;, doc1.DescendantNodes().Count());  \nXDocument doc2 = XDocument.Parse(str, LoadOptions.None);  \nConsole.WriteLine(&quot;nodes when not preserving whitespace: {0}&quot;, doc2.DescendantNodes().Count());\n</code></pre><pre><code class=\"lang-vb\">\n                Dim str As String = _  \n&quot;&lt;?xml version= &#39;1.0&#39;?&gt;&quot; &amp; Environment.NewLine &amp; _  \n&quot;&lt;!-- comment at the root level --&gt;&quot; &amp; Environment.NewLine &amp; _  \n&quot;&lt;Root&gt;&quot; &amp; Environment.NewLine &amp; _  \n&quot;    &lt;Child&gt;Content&lt;/Child&gt;&quot;  &amp; Environment.NewLine &amp; _  \n&quot;&lt;/Root&gt;&quot;  \n\nDim doc1 As XDocument = XDocument.Parse(str, LoadOptions.PreserveWhitespace)  \nConsole.WriteLine(&quot;nodes when preserving whitespace: {0}&quot;, doc1.DescendantNodes().Count())  \nDim doc2 As XDocument = XDocument.Parse(str, LoadOptions.None)  \nConsole.WriteLine(&quot;nodes when not preserving whitespace: {0}&quot;, doc2.DescendantNodes().Count())\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                nodes when preserving whitespace: 8  \nnodes when not preserving whitespace: 4\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Save_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to output this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  </p>\n<p> If you want to control white space, use the overload of <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Save_\" data-linktype=\"relative-path\">Save</a> that takes <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> as a parameter. Use the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> option if you want to remove duplicate namespace declarations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Save_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.IO.TextWriter textWriter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textWriter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> that the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> will be written to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  </p>\n<p> If you want to control white space, use the overload of <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Save_\" data-linktype=\"relative-path\">Save</a> that takes <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> as a parameter. For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>, saves the document to a <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a>, and then prints the string to the console.  </p>\n<pre><code class=\"lang-c#\">\n                StringBuilder sb = new StringBuilder();  \n\nXDocument doc = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child&quot;, &quot;content&quot;)  \n    )  \n);  \nTextWriter tr = new StringWriter(sb);  \ndoc.Save(tr);  \nConsole.WriteLine(sb.ToString());\n</code></pre><pre><code class=\"lang-vb\">\n                Dim sb As StringBuilder = New StringBuilder()  \n\nDim doc As XDocument = _   \n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n        &lt;Root&gt;&lt;Child&gt;content&lt;/Child&gt;&lt;/Root&gt;  \n\nDim tr As TextWriter = New StringWriter(sb)  \ndoc.Save(tr)  \nConsole.WriteLine(sb.ToString())\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;  \n&lt;Root&gt;  \n  &lt;Child&gt;content&lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Save_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(String)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to a file, overwriting an existing file, if it exists.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the name of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  </p>\n<p> If you want to control white space, use the overload of <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Save_\" data-linktype=\"relative-path\">Save</a> that takes <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> as a parameter. For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>, saves the document to a file, and then prints the file to the console.  </p>\n<pre><code class=\"lang-c#\">\n                XDocument doc = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child&quot;, &quot;content&quot;)  \n    )  \n);  \ndoc.Save(&quot;Root.xml&quot;);  \nConsole.WriteLine(File.ReadAllText(&quot;Root.xml&quot;));\n</code></pre><pre><code class=\"lang-vb\">\n                Dim doc As XDocument = _   \n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n        &lt;Root&gt;&lt;Child&gt;content&lt;/Child&gt;&lt;/Root&gt;  \n\ndoc.Save(&quot;Root.xml&quot;)  \nConsole.WriteLine(File.ReadAllText(&quot;Root.xml&quot;))\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n&lt;Root&gt;  \n  &lt;Child&gt;content&lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Save_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> that the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> will be written to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to save an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.  </p>\n<pre><code class=\"lang-c#\">\n                StringBuilder sb = new StringBuilder();  \nXmlWriterSettings xws = new XmlWriterSettings();  \nxws.OmitXmlDeclaration = true;  \nxws.Indent = true;  \n\nusing (XmlWriter xw = XmlWriter.Create(sb, xws)) {  \n    XDocument doc = new XDocument(  \n        new XElement(&quot;Child&quot;,  \n            new XElement(&quot;GrandChild&quot;, &quot;some content&quot;)  \n        )  \n    );  \n    doc.Save(xw);  \n}  \n\nConsole.WriteLine(sb.ToString());\n</code></pre><pre><code class=\"lang-vb\">\n                Dim sb As StringBuilder = New StringBuilder()  \nDim xws As XmlWriterSettings = New XmlWriterSettings()  \nxws.OmitXmlDeclaration = True  \nxws.Indent = True  \n\nUsing xw = XmlWriter.Create(sb, xws)  \n    Dim doc As XDocument = New XDocument(&lt;Child&gt;&lt;GrandChild&gt;some content&lt;/GrandChild&gt;&lt;/Child&gt;)  \n    doc.Save(xw)  \n\nEnd Using  \n\nConsole.WriteLine(sb.ToString())\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Child&gt;  \n  &lt;GrandChild&gt;some content&lt;/GrandChild&gt;  \n&lt;/Child&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Save_System_IO_Stream_System_Xml_Linq_SaveOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(Stream,SaveOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, optionally specifying formatting behavior.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to output this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> that specifies formatting behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default the <code>options</code> are set to <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.  </p>\n<p> If you want to save unindented XML, specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will cause the writer to write all white spaces exactly as represented in the XML tree.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> option if you want to remove duplicate namespace declarations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Save_System_IO_TextWriter_System_Xml_Linq_SaveOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(TextWriter,SaveOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>, optionally disabling formatting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textWriter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to output the XML to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> that specifies formatting behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you want to save unindented XML, specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will cause the writer to write all white space exactly as represented in the XML tree.  </p>\n<p> If you want to save indented XML, do not specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Save_\" data-linktype=\"relative-path\">Save</a> methods that do not take <code>options</code> as a parameter.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows two uses of this method. The first use serializes the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> with formatting. The second preserves white space. Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.  </p>\n<pre><code class=\"lang-c#\">\n                XDocument doc = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child&quot;, &quot;content&quot;)  \n    )  \n);  \nStringBuilder sb1 = new StringBuilder();  \nusing (StringWriter sr1 = new StringWriter(sb1)) {  \n    doc.Save(sr1, SaveOptions.None);  \n    Console.WriteLine(sb1.ToString());  \n}  \n\nStringBuilder sb2 = new StringBuilder();  \nusing (StringWriter sr2 = new StringWriter(sb2)) {  \n    doc.Save(sr2, SaveOptions.DisableFormatting);  \n    Console.WriteLine(sb2.ToString());  \n}\n</code></pre><pre><code class=\"lang-vb\">\n                Dim doc As XDocument = _   \n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n        &lt;Root&gt;&lt;Child&gt;content&lt;/Child&gt;&lt;/Root&gt;  \n\nDim sb1 As StringBuilder = New StringBuilder()  \n\nUsing sr1 = New StringWriter(sb1)  \n    doc.Save(sr1, SaveOptions.None)  \n    Console.WriteLine(sb1.ToString())  \nEnd Using  \n\nDim sb2 As StringBuilder = New StringBuilder()  \n\nUsing sr2 = New StringWriter(sb2)  \n    doc.Save(sr2, SaveOptions.DisableFormatting)  \n    Console.WriteLine(sb2.ToString())  \nEnd Using\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;  \n&lt;Root&gt;  \n  &lt;Child&gt;content&lt;/Child&gt;  \n&lt;/Root&gt;  \n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;&lt;Root&gt;&lt;Child&gt;content&lt;/Child&gt;&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_Save_System_String_System_Xml_Linq_SaveOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(String,SaveOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to a file, optionally disabling formatting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (string fileName, System.Xml.Linq.SaveOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the name of the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> that specifies formatting behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you want to save unindented XML, specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will cause the writer to write all white space exactly as represented in the XML tree.  </p>\n<p> If you want to save indented XML, do not specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <a class=\"xref\" href=\"system.xml.linq.xdocument#System_Xml_Linq_XDocument_Save_\" data-linktype=\"relative-path\">Save</a> methods that do not take <code>options</code> as a parameter.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows two uses of this method. The first use preserves white space. The second one serializes the <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> with indenting.  </p>\n<pre><code class=\"lang-c#\">\n                XDocument doc = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child&quot;, &quot;content&quot;)  \n    )  \n);  \ndoc.Save(&quot;Root1.xml&quot;, SaveOptions.DisableFormatting);  \nConsole.WriteLine(File.ReadAllText(&quot;Root1.xml&quot;));  \ndoc.Save(&quot;Root2.xml&quot;, SaveOptions.None);  \nConsole.WriteLine(File.ReadAllText(&quot;Root2.xml&quot;));\n</code></pre><pre><code class=\"lang-vb\">\n                Dim doc As XDocument = _   \n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n        &lt;Root&gt;&lt;Child&gt;content&lt;/Child&gt;&lt;/Root&gt;  \n\ndoc.Save(&quot;Root1.xml&quot;, SaveOptions.DisableFormatting)  \nConsole.WriteLine(File.ReadAllText(&quot;Root1.xml&quot;))  \ndoc.Save(&quot;Root2.xml&quot;, SaveOptions.None)  \nConsole.WriteLine(File.ReadAllText(&quot;Root2.xml&quot;))\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;Root&gt;&lt;Child&gt;content&lt;/Child&gt;&lt;/Root&gt;  \n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n&lt;Root&gt;  \n  &lt;Child&gt;content&lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XDocument_WriteTo_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XDocument_WriteTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteTo(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Write this document to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteTo (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> into which this method will write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to write an <a class=\"xref\" href=\"system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>. Note that the example did not write an XML declaration.  </p>\n<pre><code class=\"lang-c#\">\n                StringBuilder sb = new StringBuilder();  \nXmlWriterSettings xws = new XmlWriterSettings();  \nxws.OmitXmlDeclaration = true;  \nxws.Indent = true;  \n\nusing (XmlWriter xw = XmlWriter.Create(sb, xws))  \n{  \n    XDocument doc = new XDocument(  \n        new XElement(&quot;Child&quot;,  \n            new XElement(&quot;GrandChild&quot;, &quot;some content&quot;)  \n        )  \n    );  \n    doc.WriteTo(xw);  \n}  \n\nConsole.WriteLine(sb.ToString());\n</code></pre><pre><code class=\"lang-vb\">\n                Dim sb As StringBuilder = New StringBuilder()  \nDim xws As XmlWriterSettings = New XmlWriterSettings()  \nxws.OmitXmlDeclaration = True  \nxws.Indent = True  \n\nUsing xw = XmlWriter.Create(sb, xws)  \n    Dim doc As XDocument = New XDocument(&lt;Child&gt;&lt;GrandChild&gt;some content&lt;/GrandChild&gt;&lt;/Child&gt;)  \n    doc.WriteTo(xw)  \nEnd Using  \n\nConsole.WriteLine(sb.ToString())\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Child&gt;  \n  &lt;GrandChild&gt;some content&lt;/GrandChild&gt;  \n&lt;/Child&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XDocument.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XDocument.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XDocument\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XDocument..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XDocument.Declaration\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XDocument.DocumentType\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XDocument.Load\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XDocument.NodeType\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XDocument.Parse\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XDocument.Root\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XDocument.Save\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XDocument.WriteTo\">\r\n<meta name=\"APILocation\" content=\"System.Xml.Linq.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"2c705303-53c6-9f06-a77a-5339a5a84872\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Xml.Linq\\XDocument.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an XML document. For the components and usage of an XDocument object, see XDocument Class Overview.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Linq/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Linq.XDocument\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XDocument.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XDocument.yml","open_to_public_contributors":true,"api_name":["System.Xml.Linq.XDocument","System.Xml.Linq.XDocument..ctor","System.Xml.Linq.XDocument.Declaration","System.Xml.Linq.XDocument.DocumentType","System.Xml.Linq.XDocument.Load","System.Xml.Linq.XDocument.NodeType","System.Xml.Linq.XDocument.Parse","System.Xml.Linq.XDocument.Root","System.Xml.Linq.XDocument.Save","System.Xml.Linq.XDocument.WriteTo"],"api_location":["System.Xml.Linq.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Linq.XDocument","System::Xml::Linq::XDocument","System.Xml.Linq.XDocument.#ctor","System::Xml::Linq::XDocument::#ctor","System.Xml.Linq.XDocument.Declaration","System::Xml::Linq::XDocument::Declaration","System.Xml.Linq.XDocument.DocumentType","System::Xml::Linq::XDocument::DocumentType","System.Xml.Linq.XDocument.Load","System::Xml::Linq::XDocument::Load","System.Xml.Linq.XDocument.NodeType","System::Xml::Linq::XDocument::NodeType","System.Xml.Linq.XDocument.Parse","System::Xml::Linq::XDocument::Parse","System.Xml.Linq.XDocument.Root","System::Xml::Linq::XDocument::Root","System.Xml.Linq.XDocument.Save","System::Xml::Linq::XDocument::Save","System.Xml.Linq.XDocument.WriteTo","System::Xml::Linq::XDocument::WriteTo"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"2c705303-53c6-9f06-a77a-5339a5a84872","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Xml.Linq\\XDocument.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Linq/XDocument.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XDocument class | Microsoft Docs","_op_ogTitle":"XDocument class","description":"Represents an XML document. For the components and usage of an XDocument object, see XDocument Class Overview.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Xml.Linq/toc.json","toc_rel":"_splitted/System.Xml.Linq/toc.json","source_url":"","ms.assetid":"System.Xml.Linq.XDocument","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xdocument","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xdocument","fileRelativePath":"System.Xml.Linq.XDocument.html"},"themesRelativePathToOutputRoot":"_themes/"}