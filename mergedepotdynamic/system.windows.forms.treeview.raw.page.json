{"content":"    \r\n    <h1 id=\"System_Windows_Forms_TreeView\">\r\n      <span class=\"lang-csharp\">TreeView</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Displays a hierarchical collection of labeled items, each represented by a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultEvent(&quot;AfterSelect&quot;)]\n[System.ComponentModel.DefaultProperty(&quot;Nodes&quot;)]\n[System.ComponentModel.Designer(&quot;System.Windows.Forms.Design.TreeViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\n[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]\n[System.Runtime.InteropServices.ComVisible(true)]\n[System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)]\npublic class TreeView : System.Windows.Forms.Control</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">System.Windows.Forms.Control</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TreeView</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibilityNotifyClients_System_Windows_Forms_AccessibleEvents_System_Int32_\" data-linktype=\"relative-path\">AccessibilityNotifyClients(AccessibleEvents,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibilityNotifyClients_System_Windows_Forms_AccessibleEvents_System_Int32_System_Int32_\" data-linktype=\"relative-path\">AccessibilityNotifyClients(AccessibleEvents,Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibilityObject\" data-linktype=\"relative-path\">AccessibilityObject</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleDefaultActionDescription\" data-linktype=\"relative-path\">AccessibleDefaultActionDescription</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleDescription\" data-linktype=\"relative-path\">AccessibleDescription</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleName\" data-linktype=\"relative-path\">AccessibleName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AccessibleRole\" data-linktype=\"relative-path\">AccessibleRole</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AllowDrop\" data-linktype=\"relative-path\">AllowDrop</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Anchor\" data-linktype=\"relative-path\">Anchor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AutoScrollOffset\" data-linktype=\"relative-path\">AutoScrollOffset</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AutoSize\" data-linktype=\"relative-path\">AutoSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_AutoSizeChanged\" data-linktype=\"relative-path\">AutoSizeChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BackColorChanged\" data-linktype=\"relative-path\">BackColorChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BeginInvoke_System_Delegate_\" data-linktype=\"relative-path\">BeginInvoke(Delegate)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BeginInvoke_System_Delegate_System_Object___\" data-linktype=\"relative-path\">BeginInvoke(Delegate,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BindingContext\" data-linktype=\"relative-path\">BindingContext</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BindingContextChanged\" data-linktype=\"relative-path\">BindingContextChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Bottom\" data-linktype=\"relative-path\">Bottom</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Bounds\" data-linktype=\"relative-path\">Bounds</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BringToFront\" data-linktype=\"relative-path\">BringToFront()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CanEnableIme\" data-linktype=\"relative-path\">CanEnableIme</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CanFocus\" data-linktype=\"relative-path\">CanFocus</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CanSelect\" data-linktype=\"relative-path\">CanSelect</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Capture\" data-linktype=\"relative-path\">Capture</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CausesValidation\" data-linktype=\"relative-path\">CausesValidation</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CausesValidationChanged\" data-linktype=\"relative-path\">CausesValidationChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ChangeUICues\" data-linktype=\"relative-path\">ChangeUICues</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CheckForIllegalCrossThreadCalls\" data-linktype=\"relative-path\">CheckForIllegalCrossThreadCalls</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ClientRectangle\" data-linktype=\"relative-path\">ClientRectangle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ClientSize\" data-linktype=\"relative-path\">ClientSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ClientSizeChanged\" data-linktype=\"relative-path\">ClientSizeChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CompanyName\" data-linktype=\"relative-path\">CompanyName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Contains_System_Windows_Forms_Control_\" data-linktype=\"relative-path\">Contains(Control)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ContainsFocus\" data-linktype=\"relative-path\">ContainsFocus</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ContextMenu\" data-linktype=\"relative-path\">ContextMenu</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ContextMenuChanged\" data-linktype=\"relative-path\">ContextMenuChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ContextMenuStrip\" data-linktype=\"relative-path\">ContextMenuStrip</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ContextMenuStripChanged\" data-linktype=\"relative-path\">ContextMenuStripChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlAdded\" data-linktype=\"relative-path\">ControlAdded</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ControlRemoved\" data-linktype=\"relative-path\">ControlRemoved</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Controls\" data-linktype=\"relative-path\">Controls</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateAccessibilityInstance\" data-linktype=\"relative-path\">CreateAccessibilityInstance()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateControl\" data-linktype=\"relative-path\">CreateControl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateControlsInstance\" data-linktype=\"relative-path\">CreateControlsInstance()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Created\" data-linktype=\"relative-path\">Created</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateGraphics\" data-linktype=\"relative-path\">CreateGraphics()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Cursor\" data-linktype=\"relative-path\">Cursor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CursorChanged\" data-linktype=\"relative-path\">CursorChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DataBindings\" data-linktype=\"relative-path\">DataBindings</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultBackColor\" data-linktype=\"relative-path\">DefaultBackColor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultCursor\" data-linktype=\"relative-path\">DefaultCursor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultFont\" data-linktype=\"relative-path\">DefaultFont</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultForeColor\" data-linktype=\"relative-path\">DefaultForeColor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultImeMode\" data-linktype=\"relative-path\">DefaultImeMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultMargin\" data-linktype=\"relative-path\">DefaultMargin</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultMaximumSize\" data-linktype=\"relative-path\">DefaultMaximumSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultMinimumSize\" data-linktype=\"relative-path\">DefaultMinimumSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefaultPadding\" data-linktype=\"relative-path\">DefaultPadding</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DefWndProc_System_Windows_Forms_Message__\" data-linktype=\"relative-path\">DefWndProc(Message)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DestroyHandle\" data-linktype=\"relative-path\">DestroyHandle()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DisplayRectangle\" data-linktype=\"relative-path\">DisplayRectangle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Disposing\" data-linktype=\"relative-path\">Disposing</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Dock\" data-linktype=\"relative-path\">Dock</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DockChanged\" data-linktype=\"relative-path\">DockChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_System_Object_System_Windows_Forms_DragDropEffects_\" data-linktype=\"relative-path\">DoDragDrop(Object,DragDropEffects)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoubleClick\" data-linktype=\"relative-path\">DoubleClick</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragLeave\" data-linktype=\"relative-path\">DragLeave</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DrawToBitmap_System_Drawing_Bitmap_System_Drawing_Rectangle_\" data-linktype=\"relative-path\">DrawToBitmap(Bitmap,Rectangle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enabled\" data-linktype=\"relative-path\">Enabled</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EnabledChanged\" data-linktype=\"relative-path\">EnabledChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_EndInvoke_System_IAsyncResult_\" data-linktype=\"relative-path\">EndInvoke(IAsyncResult)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Enter\" data-linktype=\"relative-path\">Enter</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_FindForm\" data-linktype=\"relative-path\">FindForm()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Focus\" data-linktype=\"relative-path\">Focus()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Focused\" data-linktype=\"relative-path\">Focused</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Font\" data-linktype=\"relative-path\">Font</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_FontChanged\" data-linktype=\"relative-path\">FontChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_FontHeight\" data-linktype=\"relative-path\">FontHeight</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColorChanged\" data-linktype=\"relative-path\">ForeColorChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_FromChildHandle_System_IntPtr_\" data-linktype=\"relative-path\">FromChildHandle(IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_FromHandle_System_IntPtr_\" data-linktype=\"relative-path\">FromHandle(IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetAccessibilityObjectById_System_Int32_\" data-linktype=\"relative-path\">GetAccessibilityObjectById(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetAutoSizeMode\" data-linktype=\"relative-path\">GetAutoSizeMode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetChildAtPoint_System_Drawing_Point_\" data-linktype=\"relative-path\">GetChildAtPoint(Point)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetChildAtPoint_System_Drawing_Point_System_Windows_Forms_GetChildAtPointSkip_\" data-linktype=\"relative-path\">GetChildAtPoint(Point,GetChildAtPointSkip)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetContainerControl\" data-linktype=\"relative-path\">GetContainerControl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetNextControl_System_Windows_Forms_Control_System_Boolean_\" data-linktype=\"relative-path\">GetNextControl(Control,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetPreferredSize_System_Drawing_Size_\" data-linktype=\"relative-path\">GetPreferredSize(Size)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetScaledBounds_System_Drawing_Rectangle_System_Drawing_SizeF_System_Windows_Forms_BoundsSpecified_\" data-linktype=\"relative-path\">GetScaledBounds(Rectangle,SizeF,BoundsSpecified)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetStyle_System_Windows_Forms_ControlStyles_\" data-linktype=\"relative-path\">GetStyle(ControlStyles)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GetTopLevel\" data-linktype=\"relative-path\">GetTopLevel()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GotFocus\" data-linktype=\"relative-path\">GotFocus</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Handle\" data-linktype=\"relative-path\">Handle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_HandleCreated\" data-linktype=\"relative-path\">HandleCreated</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_HandleDestroyed\" data-linktype=\"relative-path\">HandleDestroyed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_HasChildren\" data-linktype=\"relative-path\">HasChildren</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Height\" data-linktype=\"relative-path\">Height</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_HelpRequested\" data-linktype=\"relative-path\">HelpRequested</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Hide\" data-linktype=\"relative-path\">Hide()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ImeMode\" data-linktype=\"relative-path\">ImeMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ImeModeBase\" data-linktype=\"relative-path\">ImeModeBase</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ImeModeChanged\" data-linktype=\"relative-path\">ImeModeChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InitLayout\" data-linktype=\"relative-path\">InitLayout()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate\" data-linktype=\"relative-path\">Invalidate()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_System_Boolean_\" data-linktype=\"relative-path\">Invalidate(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_System_Drawing_Rectangle_\" data-linktype=\"relative-path\">Invalidate(Rectangle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_System_Drawing_Rectangle_System_Boolean_\" data-linktype=\"relative-path\">Invalidate(Rectangle,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_System_Drawing_Region_\" data-linktype=\"relative-path\">Invalidate(Region)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidate_System_Drawing_Region_System_Boolean_\" data-linktype=\"relative-path\">Invalidate(Region,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invalidated\" data-linktype=\"relative-path\">Invalidated</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_System_Delegate_\" data-linktype=\"relative-path\">Invoke(Delegate)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_System_Delegate_System_Object___\" data-linktype=\"relative-path\">Invoke(Delegate,Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokeGotFocus_System_Windows_Forms_Control_System_EventArgs_\" data-linktype=\"relative-path\">InvokeGotFocus(Control,EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokeLostFocus_System_Windows_Forms_Control_System_EventArgs_\" data-linktype=\"relative-path\">InvokeLostFocus(Control,EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokeOnClick_System_Windows_Forms_Control_System_EventArgs_\" data-linktype=\"relative-path\">InvokeOnClick(Control,EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokePaint_System_Windows_Forms_Control_System_Windows_Forms_PaintEventArgs_\" data-linktype=\"relative-path\">InvokePaint(Control,PaintEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokePaintBackground_System_Windows_Forms_Control_System_Windows_Forms_PaintEventArgs_\" data-linktype=\"relative-path\">InvokePaintBackground(Control,PaintEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_InvokeRequired\" data-linktype=\"relative-path\">InvokeRequired</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsAccessible\" data-linktype=\"relative-path\">IsAccessible</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsDisposed\" data-linktype=\"relative-path\">IsDisposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsHandleCreated\" data-linktype=\"relative-path\">IsHandleCreated</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsInputChar_System_Char_\" data-linktype=\"relative-path\">IsInputChar(Char)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsKeyLocked_System_Windows_Forms_Keys_\" data-linktype=\"relative-path\">IsKeyLocked(Keys)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsMirrored\" data-linktype=\"relative-path\">IsMirrored</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_IsMnemonic_System_Char_System_String_\" data-linktype=\"relative-path\">IsMnemonic(Char,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyUp\" data-linktype=\"relative-path\">KeyUp</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LayoutEngine\" data-linktype=\"relative-path\">LayoutEngine</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Leave\" data-linktype=\"relative-path\">Leave</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Left\" data-linktype=\"relative-path\">Left</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Location\" data-linktype=\"relative-path\">Location</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LocationChanged\" data-linktype=\"relative-path\">LocationChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_LostFocus\" data-linktype=\"relative-path\">LostFocus</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Margin\" data-linktype=\"relative-path\">Margin</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MarginChanged\" data-linktype=\"relative-path\">MarginChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MaximumSize\" data-linktype=\"relative-path\">MaximumSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MinimumSize\" data-linktype=\"relative-path\">MinimumSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ModifierKeys\" data-linktype=\"relative-path\">ModifierKeys</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseButtons\" data-linktype=\"relative-path\">MouseButtons</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseCaptureChanged\" data-linktype=\"relative-path\">MouseCaptureChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseClick\" data-linktype=\"relative-path\">MouseClick</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDoubleClick\" data-linktype=\"relative-path\">MouseDoubleClick</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseEnter\" data-linktype=\"relative-path\">MouseEnter</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseMove\" data-linktype=\"relative-path\">MouseMove</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MousePosition\" data-linktype=\"relative-path\">MousePosition</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseUp\" data-linktype=\"relative-path\">MouseUp</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseWheel\" data-linktype=\"relative-path\">MouseWheel</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Move\" data-linktype=\"relative-path\">Move</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Name\" data-linktype=\"relative-path\">Name</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_NotifyInvalidate_System_Drawing_Rectangle_\" data-linktype=\"relative-path\">NotifyInvalidate(Rectangle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnAutoSizeChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnAutoSizeChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnBackColorChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnBackColorChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnBackgroundImageChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnBackgroundImageChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnBackgroundImageLayoutChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnBackgroundImageLayoutChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnBindingContextChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnBindingContextChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnCausesValidationChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnCausesValidationChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnChangeUICues_System_Windows_Forms_UICuesEventArgs_\" data-linktype=\"relative-path\">OnChangeUICues(UICuesEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnClick_System_EventArgs_\" data-linktype=\"relative-path\">OnClick(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnClientSizeChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnClientSizeChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnContextMenuChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnContextMenuChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnContextMenuStripChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnContextMenuStripChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnControlAdded_System_Windows_Forms_ControlEventArgs_\" data-linktype=\"relative-path\">OnControlAdded(ControlEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnControlRemoved_System_Windows_Forms_ControlEventArgs_\" data-linktype=\"relative-path\">OnControlRemoved(ControlEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnCreateControl\" data-linktype=\"relative-path\">OnCreateControl()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnCursorChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnCursorChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnDockChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnDockChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnDoubleClick_System_EventArgs_\" data-linktype=\"relative-path\">OnDoubleClick(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnDragDrop_System_Windows_Forms_DragEventArgs_\" data-linktype=\"relative-path\">OnDragDrop(DragEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnDragEnter_System_Windows_Forms_DragEventArgs_\" data-linktype=\"relative-path\">OnDragEnter(DragEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnDragLeave_System_EventArgs_\" data-linktype=\"relative-path\">OnDragLeave(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnDragOver_System_Windows_Forms_DragEventArgs_\" data-linktype=\"relative-path\">OnDragOver(DragEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnEnabledChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnEnabledChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnEnter_System_EventArgs_\" data-linktype=\"relative-path\">OnEnter(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnFontChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnFontChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnForeColorChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnForeColorChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnGiveFeedback_System_Windows_Forms_GiveFeedbackEventArgs_\" data-linktype=\"relative-path\">OnGiveFeedback(GiveFeedbackEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnGotFocus_System_EventArgs_\" data-linktype=\"relative-path\">OnGotFocus(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnHelpRequested_System_Windows_Forms_HelpEventArgs_\" data-linktype=\"relative-path\">OnHelpRequested(HelpEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnImeModeChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnImeModeChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnInvalidated_System_Windows_Forms_InvalidateEventArgs_\" data-linktype=\"relative-path\">OnInvalidated(InvalidateEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnLayout_System_Windows_Forms_LayoutEventArgs_\" data-linktype=\"relative-path\">OnLayout(LayoutEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnLeave_System_EventArgs_\" data-linktype=\"relative-path\">OnLeave(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnLocationChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnLocationChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnLostFocus_System_EventArgs_\" data-linktype=\"relative-path\">OnLostFocus(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnMarginChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnMarginChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnMouseCaptureChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnMouseCaptureChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnMouseClick_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"relative-path\">OnMouseClick(MouseEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnMouseDoubleClick_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"relative-path\">OnMouseDoubleClick(MouseEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnMouseDown_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"relative-path\">OnMouseDown(MouseEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnMouseEnter_System_EventArgs_\" data-linktype=\"relative-path\">OnMouseEnter(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnMouseMove_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"relative-path\">OnMouseMove(MouseEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnMouseUp_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"relative-path\">OnMouseUp(MouseEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnMouseWheel_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"relative-path\">OnMouseWheel(MouseEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnMove_System_EventArgs_\" data-linktype=\"relative-path\">OnMove(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnNotifyMessage_System_Windows_Forms_Message_\" data-linktype=\"relative-path\">OnNotifyMessage(Message)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnPaddingChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnPaddingChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnPaint_System_Windows_Forms_PaintEventArgs_\" data-linktype=\"relative-path\">OnPaint(PaintEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnPaintBackground_System_Windows_Forms_PaintEventArgs_\" data-linktype=\"relative-path\">OnPaintBackground(PaintEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnParentBackColorChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnParentBackColorChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnParentBackgroundImageChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnParentBackgroundImageChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnParentBindingContextChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnParentBindingContextChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnParentChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnParentChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnParentCursorChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnParentCursorChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnParentEnabledChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnParentEnabledChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnParentFontChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnParentFontChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnParentForeColorChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnParentForeColorChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnParentRightToLeftChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnParentRightToLeftChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnParentVisibleChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnParentVisibleChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnPreviewKeyDown_System_Windows_Forms_PreviewKeyDownEventArgs_\" data-linktype=\"relative-path\">OnPreviewKeyDown(PreviewKeyDownEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnPrint_System_Windows_Forms_PaintEventArgs_\" data-linktype=\"relative-path\">OnPrint(PaintEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnQueryContinueDrag_System_Windows_Forms_QueryContinueDragEventArgs_\" data-linktype=\"relative-path\">OnQueryContinueDrag(QueryContinueDragEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnRegionChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnRegionChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnResize_System_EventArgs_\" data-linktype=\"relative-path\">OnResize(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnRightToLeftChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnRightToLeftChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnSizeChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnSizeChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnStyleChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnStyleChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnSystemColorsChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnSystemColorsChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnTabIndexChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnTabIndexChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnTabStopChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnTabStopChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnTextChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnTextChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnValidated_System_EventArgs_\" data-linktype=\"relative-path\">OnValidated(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnValidating_System_ComponentModel_CancelEventArgs_\" data-linktype=\"relative-path\">OnValidating(CancelEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_OnVisibleChanged_System_EventArgs_\" data-linktype=\"relative-path\">OnVisibleChanged(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Parent\" data-linktype=\"relative-path\">Parent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ParentChanged\" data-linktype=\"relative-path\">ParentChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PerformLayout\" data-linktype=\"relative-path\">PerformLayout()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PerformLayout_System_Windows_Forms_Control_System_String_\" data-linktype=\"relative-path\">PerformLayout(Control,String)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PointToClient_System_Drawing_Point_\" data-linktype=\"relative-path\">PointToClient(Point)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PointToScreen_System_Drawing_Point_\" data-linktype=\"relative-path\">PointToScreen(Point)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PreferredSize\" data-linktype=\"relative-path\">PreferredSize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PreProcessControlMessage_System_Windows_Forms_Message__\" data-linktype=\"relative-path\">PreProcessControlMessage(Message)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PreProcessMessage_System_Windows_Forms_Message__\" data-linktype=\"relative-path\">PreProcessMessage(Message)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PreviewKeyDown\" data-linktype=\"relative-path\">PreviewKeyDown</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessCmdKey_System_Windows_Forms_Message__System_Windows_Forms_Keys_\" data-linktype=\"relative-path\">ProcessCmdKey(Message,Keys)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessDialogChar_System_Char_\" data-linktype=\"relative-path\">ProcessDialogChar(Char)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessDialogKey_System_Windows_Forms_Keys_\" data-linktype=\"relative-path\">ProcessDialogKey(Keys)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessKeyEventArgs_System_Windows_Forms_Message__\" data-linktype=\"relative-path\">ProcessKeyEventArgs(Message)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessKeyMessage_System_Windows_Forms_Message__\" data-linktype=\"relative-path\">ProcessKeyMessage(Message)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessKeyPreview_System_Windows_Forms_Message__\" data-linktype=\"relative-path\">ProcessKeyPreview(Message)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProcessMnemonic_System_Char_\" data-linktype=\"relative-path\">ProcessMnemonic(Char)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProductName\" data-linktype=\"relative-path\">ProductName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ProductVersion\" data-linktype=\"relative-path\">ProductVersion</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_PropagatingImeMode\" data-linktype=\"relative-path\">PropagatingImeMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryAccessibilityHelp\" data-linktype=\"relative-path\">QueryAccessibilityHelp</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RaiseDragEvent_System_Object_System_Windows_Forms_DragEventArgs_\" data-linktype=\"relative-path\">RaiseDragEvent(Object,DragEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RaiseKeyEvent_System_Object_System_Windows_Forms_KeyEventArgs_\" data-linktype=\"relative-path\">RaiseKeyEvent(Object,KeyEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RaiseMouseEvent_System_Object_System_Windows_Forms_MouseEventArgs_\" data-linktype=\"relative-path\">RaiseMouseEvent(Object,MouseEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RaisePaintEvent_System_Object_System_Windows_Forms_PaintEventArgs_\" data-linktype=\"relative-path\">RaisePaintEvent(Object,PaintEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RecreateHandle\" data-linktype=\"relative-path\">RecreateHandle()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RecreatingHandle\" data-linktype=\"relative-path\">RecreatingHandle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RectangleToClient_System_Drawing_Rectangle_\" data-linktype=\"relative-path\">RectangleToClient(Rectangle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RectangleToScreen_System_Drawing_Rectangle_\" data-linktype=\"relative-path\">RectangleToScreen(Rectangle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ReflectMessage_System_IntPtr_System_Windows_Forms_Message__\" data-linktype=\"relative-path\">ReflectMessage(IntPtr,Message)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Refresh\" data-linktype=\"relative-path\">Refresh()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Region\" data-linktype=\"relative-path\">Region</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RegionChanged\" data-linktype=\"relative-path\">RegionChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RenderRightToLeft\" data-linktype=\"relative-path\">RenderRightToLeft</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResetBackColor\" data-linktype=\"relative-path\">ResetBackColor()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResetBindings\" data-linktype=\"relative-path\">ResetBindings()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResetCursor\" data-linktype=\"relative-path\">ResetCursor()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResetFont\" data-linktype=\"relative-path\">ResetFont()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResetForeColor\" data-linktype=\"relative-path\">ResetForeColor()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResetImeMode\" data-linktype=\"relative-path\">ResetImeMode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResetMouseEventArgs\" data-linktype=\"relative-path\">ResetMouseEventArgs()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResetRightToLeft\" data-linktype=\"relative-path\">ResetRightToLeft()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResetText\" data-linktype=\"relative-path\">ResetText()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Resize\" data-linktype=\"relative-path\">Resize</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResizeRedraw\" data-linktype=\"relative-path\">ResizeRedraw</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout\" data-linktype=\"relative-path\">ResumeLayout()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ResumeLayout_System_Boolean_\" data-linktype=\"relative-path\">ResumeLayout(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Right\" data-linktype=\"relative-path\">Right</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeft\" data-linktype=\"relative-path\">RightToLeft</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeftChanged\" data-linktype=\"relative-path\">RightToLeftChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RtlTranslateAlignment_System_Drawing_ContentAlignment_\" data-linktype=\"relative-path\">RtlTranslateAlignment(ContentAlignment)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RtlTranslateAlignment_System_Windows_Forms_HorizontalAlignment_\" data-linktype=\"relative-path\">RtlTranslateAlignment(HorizontalAlignment)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RtlTranslateAlignment_System_Windows_Forms_LeftRightAlignment_\" data-linktype=\"relative-path\">RtlTranslateAlignment(LeftRightAlignment)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RtlTranslateContent_System_Drawing_ContentAlignment_\" data-linktype=\"relative-path\">RtlTranslateContent(ContentAlignment)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RtlTranslateHorizontal_System_Windows_Forms_HorizontalAlignment_\" data-linktype=\"relative-path\">RtlTranslateHorizontal(HorizontalAlignment)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RtlTranslateLeftRight_System_Windows_Forms_LeftRightAlignment_\" data-linktype=\"relative-path\">RtlTranslateLeftRight(LeftRightAlignment)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Scale_System_Drawing_SizeF_\" data-linktype=\"relative-path\">Scale(SizeF)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Scale_System_Single_\" data-linktype=\"relative-path\">Scale(Single)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Scale_System_Single_System_Single_\" data-linktype=\"relative-path\">Scale(Single,Single)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ScaleChildren\" data-linktype=\"relative-path\">ScaleChildren</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ScaleControl_System_Drawing_SizeF_System_Windows_Forms_BoundsSpecified_\" data-linktype=\"relative-path\">ScaleControl(SizeF,BoundsSpecified)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ScaleCore_System_Single_System_Single_\" data-linktype=\"relative-path\">ScaleCore(Single,Single)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Select\" data-linktype=\"relative-path\">Select()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Select_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">Select(Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SelectNextControl_System_Windows_Forms_Control_System_Boolean_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">SelectNextControl(Control,Boolean,Boolean,Boolean,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SendToBack\" data-linktype=\"relative-path\">SendToBack()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetAutoSizeMode_System_Windows_Forms_AutoSizeMode_\" data-linktype=\"relative-path\">SetAutoSizeMode(AutoSizeMode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetBounds_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"relative-path\">SetBounds(Int32,Int32,Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetBounds_System_Int32_System_Int32_System_Int32_System_Int32_System_Windows_Forms_BoundsSpecified_\" data-linktype=\"relative-path\">SetBounds(Int32,Int32,Int32,Int32,BoundsSpecified)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetBoundsCore_System_Int32_System_Int32_System_Int32_System_Int32_System_Windows_Forms_BoundsSpecified_\" data-linktype=\"relative-path\">SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetClientSizeCore_System_Int32_System_Int32_\" data-linktype=\"relative-path\">SetClientSizeCore(Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetStyle_System_Windows_Forms_ControlStyles_System_Boolean_\" data-linktype=\"relative-path\">SetStyle(ControlStyles,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetTopLevel_System_Boolean_\" data-linktype=\"relative-path\">SetTopLevel(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SetVisibleCore_System_Boolean_\" data-linktype=\"relative-path\">SetVisibleCore(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Show\" data-linktype=\"relative-path\">Show()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ShowFocusCues\" data-linktype=\"relative-path\">ShowFocusCues</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ShowKeyboardCues\" data-linktype=\"relative-path\">ShowKeyboardCues</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Size\" data-linktype=\"relative-path\">Size</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SizeChanged\" data-linktype=\"relative-path\">SizeChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SizeFromClientSize_System_Drawing_Size_\" data-linktype=\"relative-path\">SizeFromClientSize(Size)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_StyleChanged\" data-linktype=\"relative-path\">StyleChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SuspendLayout\" data-linktype=\"relative-path\">SuspendLayout()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragDrop_System_Windows_Forms_DragEventArgs_\" data-linktype=\"relative-path\">IDropTarget.OnDragDrop(DragEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragEnter_System_Windows_Forms_DragEventArgs_\" data-linktype=\"relative-path\">IDropTarget.OnDragEnter(DragEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragLeave_System_EventArgs_\" data-linktype=\"relative-path\">IDropTarget.OnDragLeave(EventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_System_Windows_Forms_IDropTarget_OnDragOver_System_Windows_Forms_DragEventArgs_\" data-linktype=\"relative-path\">IDropTarget.OnDragOver(DragEventArgs)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_SystemColorsChanged\" data-linktype=\"relative-path\">SystemColorsChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabIndex\" data-linktype=\"relative-path\">TabIndex</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabIndexChanged\" data-linktype=\"relative-path\">TabIndexChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabStop\" data-linktype=\"relative-path\">TabStop</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TabStopChanged\" data-linktype=\"relative-path\">TabStopChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Tag\" data-linktype=\"relative-path\">Tag</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Top\" data-linktype=\"relative-path\">Top</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_TopLevelControl\" data-linktype=\"relative-path\">TopLevelControl</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Update\" data-linktype=\"relative-path\">Update()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_UpdateBounds\" data-linktype=\"relative-path\">UpdateBounds()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_UpdateBounds_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"relative-path\">UpdateBounds(Int32,Int32,Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_UpdateBounds_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"relative-path\">UpdateBounds(Int32,Int32,Int32,Int32,Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_UpdateStyles\" data-linktype=\"relative-path\">UpdateStyles()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_UpdateZOrder\" data-linktype=\"relative-path\">UpdateZOrder()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_UseWaitCursor\" data-linktype=\"relative-path\">UseWaitCursor</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validated\" data-linktype=\"relative-path\">Validated</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Validating\" data-linktype=\"relative-path\">Validating</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Visible\" data-linktype=\"relative-path\">Visible</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_VisibleChanged\" data-linktype=\"relative-path\">VisibleChanged</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Width\" data-linktype=\"relative-path\">Width</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_WindowTarget\" data-linktype=\"relative-path\">WindowTarget</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_Nodes_\" data-linktype=\"relative-path\">Nodes</a> collection holds all the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects that are assigned to the TreeView control. The tree nodes in this collection are referred to as the root tree nodes. Any tree node that is subsequently added to a root tree node is referred to as a child node. Because each <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> can contain a collection of other <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects, you might find it difficult to determine your location in the tree structure when you iterate through the collection. You can parse the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_FullPath_\" data-linktype=\"relative-path\">FullPath</a> string by using the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_PathSeparator_\" data-linktype=\"relative-path\">PathSeparator</a> string value to determine where a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> label begins and ends.  </p>\n<p> You can display images next to the tree nodes by assigning an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> to the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageList_\" data-linktype=\"relative-path\">ImageList</a> property and referencing the index value of an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> in the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> to assign that <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a>. Use the following properties to assign images:  </p>\n<ul>\n<li><p>Set the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> property to the index value of the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> that you want to display when a tree node is not selected.  </p>\n</li>\n<li><p>Set the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> property to the index value of the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> that you want to display when a tree node is selected.  </p>\n<p>The images referenced by the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> property values are the default images displayed by all the tree nodes that are assigned to the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_Nodes_\" data-linktype=\"relative-path\">Nodes</a> collection. Individual tree nodes can override the default images by setting the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> and <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> properties.  </p>\n<p>The state images displayed in the TreeView are 16 x 16 pixels by default. Setting the <a class=\"xref\" href=\"system.windows.forms.imagelist#System_Windows_Forms_ImageList_ImageSize_\" data-linktype=\"relative-path\">ImageSize</a> property of the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_StateImageList_\" data-linktype=\"relative-path\">StateImageList</a> will have no effect on how the images are displayed. However, the state images are resized according to the system DPI setting when the app.config file contains the following entry:  </p>\n</li>\n</ul>\n<pre><code>&lt;appSettings&gt;  \n  &lt;add key=&quot;EnableWindowsFormsHighDpiAutoResizing&quot; value=&quot;true&quot; /&gt;  \n&lt;/appSettings&gt;  \n</code></pre><p> Tree nodes can be expanded to display the next level of child tree nodes. The user can expand the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> by clicking the plus-sign (+) button, if one is displayed next to the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>, or you can expand the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> by calling the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Expand_\" data-linktype=\"relative-path\">Expand</a> method. To expand all the child tree node levels in the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Nodes_\" data-linktype=\"relative-path\">Nodes</a> collection, call the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ExpandAll_\" data-linktype=\"relative-path\">ExpandAll</a> method. You can collapse the child <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> level by calling the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Collapse_\" data-linktype=\"relative-path\">Collapse</a> method, or the user can press the minus-sign (-) button, if one is displayed next to the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>. You can also call the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Toggle_\" data-linktype=\"relative-path\">Toggle</a> method to alternate between the expanded and collapsed states.  </p>\n<p> Tree nodes can optionally display check boxes. To display the check boxes, set the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_CheckBoxes_\" data-linktype=\"relative-path\">CheckBoxes</a> property of the TreeView to <code>true</code>. The <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Checked_\" data-linktype=\"relative-path\">Checked</a> property is set to <code>true</code> for tree nodes that are in a checked state.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Setting the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Checked_\" data-linktype=\"relative-path\">Checked</a> property from within the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCheck\" data-linktype=\"relative-path\">BeforeCheck</a> or <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterCheck\" data-linktype=\"relative-path\">AfterCheck</a> event causes the event to be raised multiple times and can result in unexpected behavior. For example, you might set the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Checked_\" data-linktype=\"relative-path\">Checked</a> property in the event handler when you are recursively updating the child nodes so that the user does not have to expand and check each one individually. To prevent the event from being raised multiple times, add logic to your event handler that only executes your recursive code if the <a class=\"xref\" href=\"system.windows.forms.treevieweventargs#System_Windows_Forms_TreeViewEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> property of the <a class=\"xref\" href=\"system.windows.forms.treevieweventargs\" data-linktype=\"relative-path\">TreeViewEventArgs</a> is not set to <a class=\"xref\" href=\"system.windows.forms.treeviewaction\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewAction</a>. For an example of how to do this, see the Example section of the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterCheck\" data-linktype=\"relative-path\">AfterCheck</a> or <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCheck\" data-linktype=\"relative-path\">BeforeCheck</a> events.  </p>\n</div>\n<p> You can change the appearance of the TreeView control by setting some of its display and style properties. Setting <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowPlusMinus_\" data-linktype=\"relative-path\">ShowPlusMinus</a> to <code>true</code> displays a plus-sign or minus-sign button next to each <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that can be expanded or collapsed, respectively. Setting the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowRootLines_\" data-linktype=\"relative-path\">ShowRootLines</a> property to <code>true</code> causes the TreeView to display lines that join all the root tree nodes together. You can display lines that connect child tree nodes to their root node by setting the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowLines_\" data-linktype=\"relative-path\">ShowLines</a> property to <code>true</code>. Setting the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_HotTracking_\" data-linktype=\"relative-path\">HotTracking</a> property to <code>true</code> changes the appearance of the tree node labels as the mouse pointer passes over them. When hot-tracked, the tree node labels take on the appearance of a hyperlink. You can also completely customize the appearance of the TreeView control. To do this, set the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property to a value other than <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewDrawMode</a> and handle the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> event.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When setting the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_CheckBoxes_\" data-linktype=\"relative-path\">CheckBoxes</a>, <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_Scrollable_\" data-linktype=\"relative-path\">Scrollable</a>, <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a>, and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> properties at run time, the TreeView handle is recreated (see <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RecreateHandle_\" data-linktype=\"relative-path\">RecreateHandle</a>) to update the control&#39;s appearance. This causes all tree nodes to be collapsed, except for the selected <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView__ctor\" data-linktype=\"self-bookmark\">TreeView()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_BackColor\" data-linktype=\"self-bookmark\">BackColor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the background color for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_BackgroundImage\" data-linktype=\"self-bookmark\">BackgroundImage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or set the background image for the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_BackgroundImageLayout\" data-linktype=\"self-bookmark\">BackgroundImageLayout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the layout of the background image for the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_BorderStyle\" data-linktype=\"self-bookmark\">BorderStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the border style of the tree view control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_CheckBoxes\" data-linktype=\"self-bookmark\">CheckBoxes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether check boxes are displayed next to the tree nodes in the tree view control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_CreateParams\" data-linktype=\"self-bookmark\">CreateParams</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the required creation parameters when the control handle is created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_DefaultSize\" data-linktype=\"self-bookmark\">DefaultSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default size of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_DoubleBuffered\" data-linktype=\"self-bookmark\">DoubleBuffered</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the control should redraw its surface using a secondary buffer. The DoubleBuffered property does not affect the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_DrawMode\" data-linktype=\"self-bookmark\">DrawMode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the mode in which the control is drawn.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_ForeColor\" data-linktype=\"self-bookmark\">ForeColor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the foreground color of the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_FullRowSelect\" data-linktype=\"self-bookmark\">FullRowSelect</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the selection highlight spans the width of the tree view control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_HideSelection\" data-linktype=\"self-bookmark\">HideSelection</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the selected tree node remains highlighted even when the tree view has lost the focus.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_HotTracking\" data-linktype=\"self-bookmark\">HotTracking</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether a tree node label takes on the appearance of a hyperlink as the mouse pointer passes over it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_ImageIndex\" data-linktype=\"self-bookmark\">ImageIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the image-list index value of the default image that is displayed by the tree nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_ImageKey\" data-linktype=\"self-bookmark\">ImageKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the key of the default image for each node in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control when it is in an unselected state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_ImageList\" data-linktype=\"self-bookmark\">ImageList</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> that contains the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> objects that are used by the tree nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_Indent\" data-linktype=\"self-bookmark\">Indent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the distance to indent each child tree node level.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_ItemHeight\" data-linktype=\"self-bookmark\">ItemHeight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the height of each tree node in the tree view control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_LabelEdit\" data-linktype=\"self-bookmark\">LabelEdit</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the label text of the tree nodes can be edited.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_LineColor\" data-linktype=\"self-bookmark\">LineColor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the color of the lines connecting the nodes of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_Nodes\" data-linktype=\"self-bookmark\">Nodes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of tree nodes that are assigned to the tree view control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_Padding\" data-linktype=\"self-bookmark\">Padding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the spacing between the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control&#39;s contents and its edges.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_PathSeparator\" data-linktype=\"self-bookmark\">PathSeparator</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the delimiter string that the tree node path uses.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_RightToLeftLayout\" data-linktype=\"self-bookmark\">RightToLeftLayout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> should be laid out from right-to-left.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_Scrollable\" data-linktype=\"self-bookmark\">Scrollable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the tree view control displays scroll bars when they are needed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_SelectedImageIndex\" data-linktype=\"self-bookmark\">SelectedImageIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the image list index value of the image that is displayed when a tree node is selected.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_SelectedImageKey\" data-linktype=\"self-bookmark\">SelectedImageKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the key of the default image shown when a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is in a selected state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_SelectedNode\" data-linktype=\"self-bookmark\">SelectedNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the tree node that is currently selected in the tree view control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_ShowLines\" data-linktype=\"self-bookmark\">ShowLines</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether lines are drawn between tree nodes in the tree view control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_ShowNodeToolTips\" data-linktype=\"self-bookmark\">ShowNodeToolTips</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating ToolTips are shown when the mouse pointer hovers over a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_ShowPlusMinus\" data-linktype=\"self-bookmark\">ShowPlusMinus</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether plus-sign (+) and minus-sign (-) buttons are displayed next to tree nodes that contain child tree nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_ShowRootLines\" data-linktype=\"self-bookmark\">ShowRootLines</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether lines are drawn between the tree nodes that are at the root of the tree view.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_Sorted\" data-linktype=\"self-bookmark\">Sorted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the tree nodes in the tree view are sorted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_StateImageList\" data-linktype=\"self-bookmark\">StateImageList</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the image list that is used to indicate the state of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> and its nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_Text\" data-linktype=\"self-bookmark\">Text</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the text of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_TopNode\" data-linktype=\"self-bookmark\">TopNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the first fully-visible tree node in the tree view control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_TreeViewNodeSorter\" data-linktype=\"self-bookmark\">TreeViewNodeSorter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the implementation of <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> to perform a custom sort of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_VisibleCount\" data-linktype=\"self-bookmark\">VisibleCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of tree nodes that can be fully visible in the tree view control.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_BeginUpdate\" data-linktype=\"self-bookmark\">BeginUpdate()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Disables any redrawing of the tree view.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_CollapseAll\" data-linktype=\"self-bookmark\">CollapseAll()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Collapses all the tree nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_CreateHandle\" data-linktype=\"self-bookmark\">CreateHandle()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a handle for the control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_EndUpdate\" data-linktype=\"self-bookmark\">EndUpdate()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enables the redrawing of the tree view.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_ExpandAll\" data-linktype=\"self-bookmark\">ExpandAll()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Expands all the tree nodes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_GetItemRenderStyles_System_Windows_Forms_TreeNode_System_Int32_\" data-linktype=\"self-bookmark\">GetItemRenderStyles(TreeNode,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.windows.forms.ownerdrawpropertybag\" data-linktype=\"relative-path\">OwnerDrawPropertyBag</a> for the specified <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_GetNodeAt_System_Drawing_Point_\" data-linktype=\"self-bookmark\">GetNodeAt(Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the tree node that is at the specified point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_GetNodeAt_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetNodeAt(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the tree node at the point with the specified coordinates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_GetNodeCount_System_Boolean_\" data-linktype=\"self-bookmark\">GetNodeCount(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of tree nodes, optionally including those in all subtrees, assigned to the tree view control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_HitTest_System_Drawing_Point_\" data-linktype=\"self-bookmark\">HitTest(Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides node information, given a point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_HitTest_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">HitTest(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides node information, given x- and y-coordinates.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_IsInputKey_System_Windows_Forms_Keys_\" data-linktype=\"self-bookmark\">IsInputKey(Keys)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnAfterCheck_System_Windows_Forms_TreeViewEventArgs_\" data-linktype=\"self-bookmark\">OnAfterCheck(TreeViewEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterCheck\" data-linktype=\"relative-path\">AfterCheck</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnAfterCollapse_System_Windows_Forms_TreeViewEventArgs_\" data-linktype=\"self-bookmark\">OnAfterCollapse(TreeViewEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterCollapse\" data-linktype=\"relative-path\">AfterCollapse</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnAfterExpand_System_Windows_Forms_TreeViewEventArgs_\" data-linktype=\"self-bookmark\">OnAfterExpand(TreeViewEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterExpand\" data-linktype=\"relative-path\">AfterExpand</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnAfterLabelEdit_System_Windows_Forms_NodeLabelEditEventArgs_\" data-linktype=\"self-bookmark\">OnAfterLabelEdit(NodeLabelEditEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterLabelEdit\" data-linktype=\"relative-path\">AfterLabelEdit</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnAfterSelect_System_Windows_Forms_TreeViewEventArgs_\" data-linktype=\"self-bookmark\">OnAfterSelect(TreeViewEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterSelect\" data-linktype=\"relative-path\">AfterSelect</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnBeforeCheck_System_Windows_Forms_TreeViewCancelEventArgs_\" data-linktype=\"self-bookmark\">OnBeforeCheck(TreeViewCancelEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCheck\" data-linktype=\"relative-path\">BeforeCheck</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnBeforeCollapse_System_Windows_Forms_TreeViewCancelEventArgs_\" data-linktype=\"self-bookmark\">OnBeforeCollapse(TreeViewCancelEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCollapse\" data-linktype=\"relative-path\">BeforeCollapse</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnBeforeExpand_System_Windows_Forms_TreeViewCancelEventArgs_\" data-linktype=\"self-bookmark\">OnBeforeExpand(TreeViewCancelEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeExpand\" data-linktype=\"relative-path\">BeforeExpand</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnBeforeLabelEdit_System_Windows_Forms_NodeLabelEditEventArgs_\" data-linktype=\"self-bookmark\">OnBeforeLabelEdit(NodeLabelEditEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeLabelEdit\" data-linktype=\"relative-path\">BeforeLabelEdit</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnBeforeSelect_System_Windows_Forms_TreeViewCancelEventArgs_\" data-linktype=\"self-bookmark\">OnBeforeSelect(TreeViewCancelEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeSelect\" data-linktype=\"relative-path\">BeforeSelect</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnDrawNode_System_Windows_Forms_DrawTreeNodeEventArgs_\" data-linktype=\"self-bookmark\">OnDrawNode(DrawTreeNodeEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnHandleCreated_System_EventArgs_\" data-linktype=\"self-bookmark\">OnHandleCreated(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Overrides <span class=\"xref\">stem.Windows.Forms.Control.OnHandleCreated*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnHandleDestroyed_System_EventArgs_\" data-linktype=\"self-bookmark\">OnHandleDestroyed(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Overrides <span class=\"xref\">stem.Windows.Forms.Control.OnHandleDestroyed*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnItemDrag_System_Windows_Forms_ItemDragEventArgs_\" data-linktype=\"self-bookmark\">OnItemDrag(ItemDragEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ItemDrag\" data-linktype=\"relative-path\">ItemDrag</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnKeyDown_System_Windows_Forms_KeyEventArgs_\" data-linktype=\"self-bookmark\">OnKeyDown(KeyEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnKeyPress_System_Windows_Forms_KeyPressEventArgs_\" data-linktype=\"self-bookmark\">OnKeyPress(KeyPressEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnKeyUp_System_Windows_Forms_KeyEventArgs_\" data-linktype=\"self-bookmark\">OnKeyUp(KeyEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Overrides <span class=\"xref\">stem.Windows.Forms.Control.OnKeyUp*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnMouseHover_System_EventArgs_\" data-linktype=\"self-bookmark\">OnMouseHover(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnMouseLeave_System_EventArgs_\" data-linktype=\"self-bookmark\">OnMouseLeave(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnNodeMouseClick_System_Windows_Forms_TreeNodeMouseClickEventArgs_\" data-linktype=\"self-bookmark\">OnNodeMouseClick(TreeNodeMouseClickEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_NodeMouseClick\" data-linktype=\"relative-path\">NodeMouseClick</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnNodeMouseDoubleClick_System_Windows_Forms_TreeNodeMouseClickEventArgs_\" data-linktype=\"self-bookmark\">OnNodeMouseDoubleClick(TreeNodeMouseClickEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_NodeMouseDoubleClick\" data-linktype=\"relative-path\">NodeMouseDoubleClick</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnNodeMouseHover_System_Windows_Forms_TreeNodeMouseHoverEventArgs_\" data-linktype=\"self-bookmark\">OnNodeMouseHover(TreeNodeMouseHoverEventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_NodeMouseHover\" data-linktype=\"relative-path\">NodeMouseHover</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_OnRightToLeftLayoutChanged_System_EventArgs_\" data-linktype=\"self-bookmark\">OnRightToLeftLayoutChanged(EventArgs)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_RightToLeftLayoutChanged\" data-linktype=\"relative-path\">RightToLeftLayoutChanged</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_Sort\" data-linktype=\"self-bookmark\">Sort()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the items in <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the name of the <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a>, if any. This method should not be overridden.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_WndProc_System_Windows_Forms_Message__\" data-linktype=\"self-bookmark\">WndProc(Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Overrides <span class=\"xref\">stem.Windows.Forms.Control.WndProc*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_AfterCheck\" data-linktype=\"self-bookmark\">AfterCheck</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs after the tree node check box is checked.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_AfterCollapse\" data-linktype=\"self-bookmark\">AfterCollapse</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs after the tree node is collapsed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_AfterExpand\" data-linktype=\"self-bookmark\">AfterExpand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs after the tree node is expanded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_AfterLabelEdit\" data-linktype=\"self-bookmark\">AfterLabelEdit</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs after the tree node label text is edited.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_AfterSelect\" data-linktype=\"self-bookmark\">AfterSelect</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs after the tree node is selected.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_BackgroundImageChanged\" data-linktype=\"self-bookmark\">BackgroundImageChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.TreeView.BackgroundImage*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_BackgroundImageLayoutChanged\" data-linktype=\"self-bookmark\">BackgroundImageLayoutChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.TreeView.BackgroundImageLayout*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_BeforeCheck\" data-linktype=\"self-bookmark\">BeforeCheck</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs before the tree node check box is checked.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_BeforeCollapse\" data-linktype=\"self-bookmark\">BeforeCollapse</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs before the tree node is collapsed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_BeforeExpand\" data-linktype=\"self-bookmark\">BeforeExpand</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs before the tree node is expanded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_BeforeLabelEdit\" data-linktype=\"self-bookmark\">BeforeLabelEdit</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs before the tree node label text is edited.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_BeforeSelect\" data-linktype=\"self-bookmark\">BeforeSelect</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs before the tree node is selected.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"self-bookmark\">DrawNode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is drawn and the <span class=\"xref\">stem.Windows.Forms.TreeView.DrawMode*</span> property is set to a <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a> value other than <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_ItemDrag\" data-linktype=\"self-bookmark\">ItemDrag</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user begins dragging a node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_NodeMouseClick\" data-linktype=\"self-bookmark\">NodeMouseClick</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user clicks a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> with the mouse.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_NodeMouseDoubleClick\" data-linktype=\"self-bookmark\">NodeMouseDoubleClick</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the user double-clicks a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> with the mouse.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_NodeMouseHover\" data-linktype=\"self-bookmark\">NodeMouseHover</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the mouse hovers over a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_PaddingChanged\" data-linktype=\"self-bookmark\">PaddingChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.TreeView.Padding*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_Paint\" data-linktype=\"self-bookmark\">Paint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is drawn.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_RightToLeftLayoutChanged\" data-linktype=\"self-bookmark\">RightToLeftLayoutChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.TreeView.RightToLeftLayout*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TreeView_TextChanged\" data-linktype=\"self-bookmark\">TextChanged</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.TreeView.Text*</span> property changes.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView__ctor\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TreeView()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TreeView ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to change the collapse state of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> so that all the checked nodes are visible. First, all the nodes are expanded, and a handler is added for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCollapse\" data-linktype=\"relative-path\">BeforeCollapse</a> event. Next, all the nodes are collapsed. The <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCollapse\" data-linktype=\"relative-path\">BeforeCollapse</a> event handler determines whether a given node has child nodes that are checked. If a node has checked children, the collapse is canceled for that node. In order to allow standard node collapse when the minus sign next to a node is clicked, the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCollapse\" data-linktype=\"relative-path\">BeforeCollapse</a> event handler is then removed.  </p>\n<p> This behavior can also be implemented by handling the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeExpand\" data-linktype=\"relative-path\">BeforeExpand</a> event, as illustrated in the example for that topic.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeViewShowCheckedNodes2#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\npublic class Form1 : Form\n{\n    private TreeView treeView1;\n    private Button showCheckedNodesButton;\n    private TreeViewCancelEventHandler checkForCheckedChildren;\n\n    public Form1()\n    {\n        treeView1 = new TreeView();\n        showCheckedNodesButton = new Button();\n        checkForCheckedChildren = \n            new TreeViewCancelEventHandler(CheckForCheckedChildrenHandler);\n\n        this.SuspendLayout();\n\n        // Initialize treeView1.\n        treeView1.Location = new Point(0, 25);\n        treeView1.Size = new Size(292, 248);\n        treeView1.Anchor = AnchorStyles.Top | AnchorStyles.Left | \n            AnchorStyles.Bottom | AnchorStyles.Right;\n        treeView1.CheckBoxes = true;\n\n        // Add nodes to treeView1.\n        TreeNode node;\n        for (int x = 0; x &lt; 3; ++x)\n        {\n            // Add a root node.\n            node = treeView1.Nodes.Add(String.Format(&quot;Node{0}&quot;, x*4));\n            for (int y = 1; y &lt; 4; ++y)\n            {\n                // Add a node as a child of the previously added node.\n                node = node.Nodes.Add(String.Format(&quot;Node{0}&quot;, x*4 + y));\n            }\n        }\n\n        // Set the checked state of one of the nodes to\n        // demonstrate the showCheckedNodesButton button behavior.\n        treeView1.Nodes[1].Nodes[0].Nodes[0].Checked = true;\n\n        // Initialize showCheckedNodesButton.\n        showCheckedNodesButton.Size = new Size(144, 24);\n        showCheckedNodesButton.Text = &quot;Show Checked Nodes&quot;;\n        showCheckedNodesButton.Click += \n            new EventHandler(showCheckedNodesButton_Click);\n\n        // Initialize the form.\n        this.ClientSize = new Size(292, 273);\n        this.Controls.AddRange(new Control[] \n            { showCheckedNodesButton, treeView1 } );\n\n        this.ResumeLayout(false);\n    }\n\n    [STAThreadAttribute()]\n    static void Main() \n    {\n        Application.Run(new Form1());\n    }\n\n    private void showCheckedNodesButton_Click(object sender, EventArgs e)\n    {\n        // Disable redrawing of treeView1 to prevent flickering \n        // while changes are made.\n        treeView1.BeginUpdate();\n\n        // Collapse all nodes of treeView1.\n        treeView1.ExpandAll();\n\n        // Add the checkForCheckedChildren event handler to the BeforeExpand event.\n        treeView1.BeforeCollapse += checkForCheckedChildren;\n\n        // Expand all nodes of treeView1. Nodes without checked children are \n        // prevented from expanding by the checkForCheckedChildren event handler.\n        treeView1.CollapseAll();\n\n        // Remove the checkForCheckedChildren event handler from the BeforeExpand \n        // event so manual node expansion will work correctly.\n        treeView1.BeforeCollapse -= checkForCheckedChildren;\n\n        // Enable redrawing of treeView1.\n        treeView1.EndUpdate();\n    }\n\n    // Prevent collapse of a node that has checked child nodes.\n    private void CheckForCheckedChildrenHandler(object sender, \n        TreeViewCancelEventArgs e)\n    {\n        if (HasCheckedChildNodes(e.Node)) e.Cancel = true;\n    }\n\n    // Returns a value indicating whether the specified \n    // TreeNode has checked child nodes.\n    private bool HasCheckedChildNodes(TreeNode node)\n    {\n        if (node.Nodes.Count == 0) return false;\n        foreach (TreeNode childNode in node.Nodes)\n        {\n            if (childNode.Checked) return true;\n            // Recursively check the children of the current child node.\n            if (HasCheckedChildNodes(childNode)) return true;\n        }\n        return false;\n    }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewShowCheckedNodes2#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\npublic ref class Form1: public Form\n{\nprivate:\n   TreeView^ treeView1;\n   Button^ showCheckedNodesButton;\n   TreeViewCancelEventHandler^ checkForCheckedChildren;\n\npublic:\n   Form1()\n   {\n      treeView1 = gcnew TreeView;\n      showCheckedNodesButton = gcnew Button;\n      checkForCheckedChildren = gcnew TreeViewCancelEventHandler( this, &amp;Form1::CheckForCheckedChildrenHandler );\n      this-&gt;SuspendLayout();\n      \n      // Initialize treeView1.\n      treeView1-&gt;Location = Point(0,25);\n      treeView1-&gt;Size = System::Drawing::Size( 292, 248 );\n      treeView1-&gt;Anchor = static_cast&lt;AnchorStyles&gt;(AnchorStyles::Top | AnchorStyles::Left | AnchorStyles::Bottom | AnchorStyles::Right);\n      treeView1-&gt;CheckBoxes = true;\n      \n      // Add nodes to treeView1.\n      TreeNode^ node;\n      for ( int x = 0; x &lt; 3; ++x )\n      {\n         \n         // Add a root node.\n         node = treeView1-&gt;Nodes-&gt;Add( String::Format( &quot;Node{0}&quot;, x * 4 ) );\n         for ( int y = 1; y &lt; 4; ++y )\n         {\n            \n            // Add a node as a child of the previously added node.\n            node = node-&gt;Nodes-&gt;Add( String::Format( &quot;Node{0}&quot;, x * 4 + y ) );\n\n         }\n\n      }\n      \n      // Set the checked state of one of the nodes to\n      // demonstrate the showCheckedNodesButton button behavior.\n      treeView1-&gt;Nodes[ 1 ]-&gt;Nodes[ 0 ]-&gt;Nodes[ 0 ]-&gt;Checked = true;\n      \n      // Initialize showCheckedNodesButton.\n      showCheckedNodesButton-&gt;Size = System::Drawing::Size( 144, 24 );\n      showCheckedNodesButton-&gt;Text = &quot;Show Checked Nodes&quot;;\n      showCheckedNodesButton-&gt;Click += gcnew EventHandler( this, &amp;Form1::showCheckedNodesButton_Click );\n      \n      // Initialize the form.\n      this-&gt;ClientSize = System::Drawing::Size( 292, 273 );\n      array&lt;Control^&gt;^temp1 = {showCheckedNodesButton,treeView1};\n      this-&gt;Controls-&gt;AddRange( temp1 );\n      this-&gt;ResumeLayout( false );\n   }\n\nprivate:\n   void showCheckedNodesButton_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Disable redrawing of treeView1 to prevent flickering \n      // while changes are made.\n      treeView1-&gt;BeginUpdate();\n      \n      // Collapse all nodes of treeView1.\n      treeView1-&gt;ExpandAll();\n      \n      // Add the checkForCheckedChildren event handler to the BeforeExpand event.\n      treeView1-&gt;BeforeCollapse += checkForCheckedChildren;\n      \n      // Expand all nodes of treeView1. Nodes without checked children are \n      // prevented from expanding by the checkForCheckedChildren event handler.\n      treeView1-&gt;CollapseAll();\n      \n      // Remove the checkForCheckedChildren event handler from the BeforeExpand \n      // event so manual node expansion will work correctly.\n      treeView1-&gt;BeforeCollapse -= checkForCheckedChildren;\n      \n      // Enable redrawing of treeView1.\n      treeView1-&gt;EndUpdate();\n   }\n\n   // Prevent collapse of a node that has checked child nodes.\n   void CheckForCheckedChildrenHandler( Object^ /*sender*/, TreeViewCancelEventArgs^ e )\n   {\n      if ( HasCheckedChildNodes( e-&gt;Node ) )\n            e-&gt;Cancel = true;\n   }\n\n   // Returns a value indicating whether the specified \n   // TreeNode has checked child nodes.\n   bool HasCheckedChildNodes( TreeNode^ node )\n   {\n      if ( node-&gt;Nodes-&gt;Count == 0 )\n            return false;\n\n      System::Collections::IEnumerator^ myEnum = node-&gt;Nodes-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         TreeNode^ childNode = safe_cast&lt;TreeNode^&gt;(myEnum-&gt;Current);\n         if ( childNode-&gt;Checked )\n                  return true;\n\n         // Recursively check the children of the current child node.\n         if ( HasCheckedChildNodes( childNode ) )\n                  return true;\n      }\n\n      return false;\n   }\n};\n\nint main()\n{\n   Application::Run( gcnew Form1 );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeViewShowCheckedNodes2#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nPublic Class Form1\n    Inherits Form\n    Private treeView1 As TreeView\n    Private showCheckedNodesButton As Button\n\n    Public Sub New()\n        treeView1 = New TreeView\n        showCheckedNodesButton = New Button\n\n        Me.SuspendLayout()\n        \n        &#39; Initialize treeView1.\n        treeView1.Location = New Point(0, 25)\n        treeView1.Size = New Size(292, 248)\n        treeView1.Anchor = AnchorStyles.Top Or AnchorStyles.Left Or AnchorStyles.Bottom Or AnchorStyles.Right\n        treeView1.CheckBoxes = True\n        \n        &#39; Add nodes to treeView1.\n        Dim node As TreeNode\n        Dim x As Integer\n        For x = 0 To 3\n            &#39; Add a root node.\n            node = treeView1.Nodes.Add(String.Format(&quot;Node{0}&quot;, x * 4))\n            Dim y As Integer\n            For y = 1 To 4\n                &#39; Add a node as a child of the previously added node.\n                node = node.Nodes.Add(String.Format(&quot;Node{0}&quot;, x * 4 + y))\n            Next y\n        Next x\n\n        &#39; Set the checked state of one of the nodes to\n        &#39; demonstrate the showCheckedNodesButton button behavior.\n        treeView1.Nodes(1).Nodes(0).Nodes(0).Checked = True\n\n        &#39; Initialize showCheckedNodesButton.\n        showCheckedNodesButton.Size = New Size(144, 24)\n        showCheckedNodesButton.Text = &quot;Show Checked Nodes&quot;\n        AddHandler showCheckedNodesButton.Click, AddressOf showCheckedNodesButton_Click\n\n        &#39; Initialize the form.\n        Me.ClientSize = New Size(292, 273)\n        Me.Controls.AddRange(New Control() {showCheckedNodesButton, treeView1})\n\n        Me.ResumeLayout(False)\n    End Sub &#39;New\n    \n    &lt;STAThreadAttribute()&gt; _\n    Shared Sub Main()\n        Application.Run(New Form1())\n    End Sub &#39;Main\n    \n    Private Sub showCheckedNodesButton_Click(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Disable redrawing of treeView1 to prevent flickering \n        &#39; while changes are made.\n        treeView1.BeginUpdate()\n\n        &#39; Collapse all nodes of treeView1.\n        treeView1.ExpandAll()\n\n        &#39; Add the CheckForCheckedChildren event handler to the BeforeExpand event.\n        AddHandler treeView1.BeforeCollapse, AddressOf CheckForCheckedChildren\n\n        &#39; Expand all nodes of treeView1. Nodes without checked children are \n        &#39; prevented from expanding by the checkForCheckedChildren event handler.\n        treeView1.CollapseAll()\n\n        &#39; Remove the checkForCheckedChildren event handler from the BeforeExpand \n        &#39; event so manual node expansion will work correctly.\n        RemoveHandler treeView1.BeforeCollapse, AddressOf CheckForCheckedChildren\n        &#39; Enable redrawing of treeView1.\n        treeView1.EndUpdate()\n    End Sub &#39;showCheckedNodesButton_Click\n\n\n    &#39; Prevent collapse of a node that has checked child nodes.\n    Private Sub CheckForCheckedChildren(ByVal sender As Object, ByVal e As TreeViewCancelEventArgs)\n        If HasCheckedChildNodes(e.Node) Then\n            e.Cancel = True\n        End If\n    End Sub &#39;CheckForCheckedChildren\n\n    &#39; Returns a value indicating whether the specified \n    &#39; TreeNode has checked child nodes.\n    Private Function HasCheckedChildNodes(ByVal node As TreeNode) As Boolean\n        If node.Nodes.Count = 0 Then\n            Return False\n        End If\n        Dim childNode As TreeNode\n        For Each childNode In node.Nodes\n            If childNode.Checked Then\n                Return True\n            End If\n            &#39; Recursively check the children of the current child node.\n            If HasCheckedChildNodes(childNode) Then\n                Return True\n            End If\n        Next childNode\n        Return False\n    End Function &#39;HasCheckedChildNodes\n\nEnd Class &#39;Form1 \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_BackColor\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_BackColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackColor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the background color for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Drawing.Color BackColor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a> that represents the background color of the control. The default is the value of the <span class=\"xref\">stem.Windows.Forms.Control.DefaultBackColor*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_BackgroundImage\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_BackgroundImage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackgroundImage</div>        \r\n          </div>\r\n    \r\n            <p>Gets or set the background image for the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Drawing.Image BackgroundImage { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> that is the background image for the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_BackgroundImageLayout\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_BackgroundImageLayout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackgroundImageLayout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the layout of the background image for the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a> values. The default is <a class=\"xref\" href=\"system.windows.forms.imagelayout\" data-linktype=\"relative-path\">ImageLayout</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property/method/event is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_BorderStyle\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_BorderStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BorderStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the border style of the tree view control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.BorderStyle BorderStyle { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.borderstyle\" data-linktype=\"relative-path\">BorderStyle</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.borderstyle\" data-linktype=\"relative-path\">BorderStyle</a> values. The default is <a class=\"xref\" href=\"system.windows.forms.borderstyle\" data-linktype=\"relative-path\">BorderStyle</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The assigned value is not one of the <a class=\"xref\" href=\"system.windows.forms.borderstyle\" data-linktype=\"relative-path\">BorderStyle</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the BorderStyle property is set to <a class=\"xref\" href=\"system.windows.forms.borderstyle\" data-linktype=\"relative-path\">BorderStyle</a>, the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> has a sunken, three-dimensional appearance. To display a flat, thin border around the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control, set the <a class=\"xref\" href=\"system.windows.forms.borderstyle\" data-linktype=\"relative-path\">BorderStyle</a> property to <a class=\"xref\" href=\"system.windows.forms.borderstyle\" data-linktype=\"relative-path\">BorderStyle</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.borderstyle\" data-linktype=\"relative-path\">BorderStyle</a> enumeration and the BorderStyle, <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowLines_\" data-linktype=\"relative-path\">ShowLines</a>, <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_Scrollable_\" data-linktype=\"relative-path\">Scrollable</a>, <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_HideSelection_\" data-linktype=\"relative-path\">HideSelection</a> and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowRootLines_\" data-linktype=\"relative-path\">ShowRootLines</a> properties. To run this example, paste the following code in a form and call the <code>InitializeTreeView</code> method in the form&#39;s constructor or <code>Load</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewExample#1\">   // Declare the TreeView control.\ninternal:\n   System::Windows::Forms::TreeView^ TreeView1;\n\nprivate:\n   // Initialize the TreeView to blend with the form, giving it the \n   // same color as the form and no border.\n   void InitializeTreeView()\n   {\n      // Create a new TreeView control and set the location and size.\n      this-&gt;TreeView1 = gcnew System::Windows::Forms::TreeView;\n      this-&gt;TreeView1-&gt;Location = System::Drawing::Point( 72, 48 );\n      this-&gt;TreeView1-&gt;Size = System::Drawing::Size( 200, 200 );\n\n      // Set the BorderStyle property to none, the BackColor property to  \n      // the form&#39;s backcolor, and the Scrollable property to false.  \n      // This allows the TreeView to blend in form.\n      this-&gt;TreeView1-&gt;BorderStyle = BorderStyle::None;\n      this-&gt;TreeView1-&gt;BackColor = this-&gt;BackColor;\n      this-&gt;TreeView1-&gt;Scrollable = false;\n\n      // Set the HideSelection property to false to keep the \n      // selection highlighted when the user leaves the control. \n      // This helps it blend with form.\n      this-&gt;TreeView1-&gt;HideSelection = false;\n\n      // Set the ShowRootLines and ShowLines properties to false to \n      // give the TreeView a list-like appearance.\n      this-&gt;TreeView1-&gt;ShowRootLines = false;\n      this-&gt;TreeView1-&gt;ShowLines = false;\n\n      // Add the nodes.\n      array&lt;TreeNode^&gt;^temp0 = {gcnew TreeNode( &quot;Full Color&quot; ),gcnew TreeNode( &quot;Project Wizards&quot; ),gcnew TreeNode( &quot;Visual C# and Visual Basic Support&quot; )};\n      array&lt;TreeNode^&gt;^temp1 = {gcnew TreeNode( &quot;Pentium 133 MHz or faster processor &quot; ),gcnew TreeNode( &quot;Windows 98 or later&quot; ),gcnew TreeNode( &quot;100 MB Disk space&quot; )};\n      array&lt;TreeNode^&gt;^temp2 = {gcnew TreeNode( &quot;Features&quot;,temp0 ),gcnew TreeNode( &quot;System Requirements&quot;,temp1 )};\n      this-&gt;TreeView1-&gt;Nodes-&gt;AddRange( temp2 );\n\n      // Set the tab index and add the TreeView to the form.\n      this-&gt;TreeView1-&gt;TabIndex = 0;\n      this-&gt;Controls-&gt;Add( this-&gt;TreeView1 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewExample#1\">\n\t// Declare the TreeView control.\n\tinternal System.Windows.Forms.TreeView TreeView1;\n\n\t// Initialize the TreeView to blend with the form, giving it the \n\t// same color as the form and no border.\n\tprivate void InitializeTreeView()\n\t{\n\n\t\t// Create a new TreeView control and set the location and size.\n\t\tthis.TreeView1 = new System.Windows.Forms.TreeView();\n\t\tthis.TreeView1.Location = new System.Drawing.Point(72, 48);\n\t\tthis.TreeView1.Size = new System.Drawing.Size(200, 200);\n\n\t\t// Set the BorderStyle property to none, the BackColor property to  \n\t\t// the form&#39;s backcolor, and the Scrollable property to false.  \n\t\t// This allows the TreeView to blend in form.\n\n\t\tthis.TreeView1.BorderStyle = BorderStyle.None;\n\t\tthis.TreeView1.BackColor = this.BackColor;\n\t\tthis.TreeView1.Scrollable = false;\n\n\t\t// Set the HideSelection property to false to keep the \n\t\t// selection highlighted when the user leaves the control. \n\t\t// This helps it blend with form.\n\t\tthis.TreeView1.HideSelection = false;\n\n\t\t// Set the ShowRootLines and ShowLines properties to false to \n\t\t// give the TreeView a list-like appearance.\n\t\tthis.TreeView1.ShowRootLines = false;\n\t\tthis.TreeView1.ShowLines = false;\n\n\t\t// Add the nodes.\n\t\tthis.TreeView1.Nodes.AddRange(new TreeNode[]\n\t\t\t{new TreeNode(&quot;Features&quot;, \n\t\t\t\tnew TreeNode[]{\n\t\t\t\tnew TreeNode(&quot;Full Color&quot;), \n\t\t\t\tnew TreeNode(&quot;Project Wizards&quot;), \n\t\t\t\tnew TreeNode(&quot;Visual C# and Visual Basic Support&quot;)}), \n\t\t\t\tnew TreeNode(&quot;System Requirements&quot;, \n\t\t\t\tnew TreeNode[]{\n\t\t\t\t\tnew TreeNode(&quot;Pentium 133 MHz or faster processor &quot;),\n\t\t\t\t\tnew TreeNode(&quot;Windows 98 or later&quot;), \n\t\t\t\t\tnew TreeNode(&quot;100 MB Disk space&quot;)})\n\t\t\t});\n\n\t\t// Set the tab index and add the TreeView to the form.\n\t\tthis.TreeView1.TabIndex = 0;\n\t\tthis.Controls.Add(this.TreeView1);\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewExample#1\">\n    &#39; Declare the TreeView control.\n    Friend WithEvents TreeView1 As System.Windows.Forms.TreeView\n\n    &#39; Initialize the TreeView to blend with the form, giving it the \n    &#39; same color as the form and no border.\n    Private Sub InitializeTreeView()\n\n        &#39; Create a new TreeView control and set the location and size.\n        Me.TreeView1 = New System.Windows.Forms.TreeView\n        Me.TreeView1.Location = New System.Drawing.Point(72, 48)\n        Me.TreeView1.Size = New System.Drawing.Size(200, 200)\n\n        &#39; Set the BorderStyle property to none, the BackColor property to  \n        &#39; the form&#39;s backcolor, and the Scrollable property to false.  \n        &#39; This allows the TreeView to blend in form.\n        Me.TreeView1.BorderStyle = BorderStyle.None\n        Me.TreeView1.BackColor = Me.BackColor\n        Me.TreeView1.Scrollable = False\n\n        \n        &#39; Set the ShowRootLines and ShowLines properties to false to \n        &#39; give the TreeView a list-like appearance.\n        Me.TreeView1.ShowRootLines = False\n        Me.TreeView1.ShowLines = False\n\n        &#39; Add the nodes.\n        Me.TreeView1.Nodes.AddRange(New System.Windows.Forms.TreeNode() _\n            {New System.Windows.Forms.TreeNode(&quot;Features&quot;, _\n            New System.Windows.Forms.TreeNode() _\n            {New System.Windows.Forms.TreeNode(&quot;Full Color&quot;), _\n            New System.Windows.Forms.TreeNode(&quot;Project Wizards&quot;), _\n            New System.Windows.Forms.TreeNode(&quot;Visual C# and Visual Basic Support&quot;)}), _\n            New System.Windows.Forms.TreeNode(&quot;System Requirements&quot;, _\n            New System.Windows.Forms.TreeNode() _\n            {New System.Windows.Forms.TreeNode _\n            (&quot;Pentium 133 MHz or faster processor &quot;), _\n            New System.Windows.Forms.TreeNode(&quot;Windows 98 or later&quot;), _\n            New System.Windows.Forms.TreeNode(&quot;100 MB Disk space&quot;)})})\n\n        &#39; Set the tab index and add the TreeView to the form.\n        Me.TreeView1.TabIndex = 0\n        Me.Controls.Add(Me.TreeView1)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_CheckBoxes\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_CheckBoxes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckBoxes</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether check boxes are displayed next to the tree nodes in the tree view control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CheckBoxes { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a check box is displayed next to each tree node in the tree view control; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A check box is displayed to the left of both the tree node label and tree node <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a>, if any. Check boxes allow the user to select more than one tree node at a time.  </p>\n<p> When the CheckBoxes property of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is set to <code>true</code>, and the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_StateImageList_\" data-linktype=\"relative-path\">StateImageList</a> property is set, each <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that is contained in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> displays the first and second images from the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_StateImageList_\" data-linktype=\"relative-path\">StateImageList</a> to indicate an unchecked or checked state, respectively. However, the displayed images may be different if the following situation occurs: If the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> of the node is set to a value other than 0 or 1, and the CheckBoxes property of the parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is set to <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> will not automatically reset to -1 to indicate it is not set. In this case, the state image at the indicated index position is shown. If CheckBoxes is set to <code>true</code> again, the first and second images of the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_StateImageList_\" data-linktype=\"relative-path\">StateImageList</a> are shown to indicate a checked or unchecked state, respectively.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When setting the CheckBoxes property at run time, the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> handle is recreated (see <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RecreateHandle_\" data-linktype=\"relative-path\">RecreateHandle</a>) to update the control&#39;s appearance. This causes all tree nodes to be collapsed, with the exception of the selected <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to change the collapse state of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> so that all the checked nodes are visible. First, all the nodes are collapsed, and a handler is added for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeExpand\" data-linktype=\"relative-path\">BeforeExpand</a> event. Next, all the nodes are expanded. The <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeExpand\" data-linktype=\"relative-path\">BeforeExpand</a> event handler determines whether a given node has child nodes that are checked. If a node does not have checked children, the expansion is canceled for that node. In order to allow standard node expansion when the plus sign next to a node is clicked, the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeExpand\" data-linktype=\"relative-path\">BeforeExpand</a> event handler is then removed.  </p>\n<p> This behavior can also be implemented by handling the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCollapse\" data-linktype=\"relative-path\">BeforeCollapse</a> event, as illustrated in the example for that topic.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewShowCheckedNodes1#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nPublic Class Form1\n    Inherits Form\n    Private treeView1 As TreeView\n    Private showCheckedNodesButton As Button\n\n    Public Sub New()\n        treeView1 = New TreeView\n        showCheckedNodesButton = New Button\n\n        Me.SuspendLayout()\n\n        &#39; Initialize treeView1.\n        treeView1.Location = New Point(0, 25)\n        treeView1.Size = New Size(292, 248)\n        treeView1.Anchor = AnchorStyles.Top Or AnchorStyles.Left Or AnchorStyles.Bottom Or AnchorStyles.Right\n        treeView1.CheckBoxes = True\n\n        &#39; Add nodes to treeView1.\n        Dim node As TreeNode\n        Dim x As Integer\n        For x = 0 To 3\n            &#39; Add a root node.\n            node = treeView1.Nodes.Add(String.Format(&quot;Node{0}&quot;, x * 4))\n            Dim y As Integer\n            For y = 1 To 4\n                &#39; Add a node as a child of the previously added node.\n                node = node.Nodes.Add(String.Format(&quot;Node{0}&quot;, x * 4 + y))\n            Next y\n        Next x\n\n        &#39; Set the checked state of one of the nodes to\n        &#39; demonstrate the showCheckedNodesButton button behavior.\n        treeView1.Nodes(1).Nodes(0).Nodes(0).Checked = True\n\n        &#39; Initialize showCheckedNodesButton.\n        showCheckedNodesButton.Size = New Size(144, 24)\n        showCheckedNodesButton.Text = &quot;Show Checked Nodes&quot;\n        AddHandler showCheckedNodesButton.Click, AddressOf showCheckedNodesButton_Click\n\n        &#39; Initialize the form.\n        Me.ClientSize = New Size(292, 273)\n        Me.Controls.AddRange(New Control() {showCheckedNodesButton, treeView1})\n\n        Me.ResumeLayout(False)\n    End Sub &#39;New\n\n    &lt;STAThreadAttribute()&gt; _\n    Shared Sub Main()\n        Application.Run(New Form1)\n    End Sub &#39;Main\n\n    Private Sub showCheckedNodesButton_Click(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Disable redrawing of treeView1 to prevent flickering \n        &#39; while changes are made.\n        treeView1.BeginUpdate()\n\n        &#39; Collapse all nodes of treeView1.\n        treeView1.CollapseAll()\n\n        &#39; Add the CheckForCheckedChildren event handler to the BeforeExpand event.\n        AddHandler treeView1.BeforeExpand, AddressOf CheckForCheckedChildren\n\n        &#39; Expand all nodes of treeView1. Nodes without checked children are \n        &#39; prevented from expanding by the checkForCheckedChildren event handler.\n        treeView1.ExpandAll()\n\n        &#39; Remove the checkForCheckedChildren event handler from the BeforeExpand \n        &#39; event so manual node expansion will work correctly.\n        RemoveHandler treeView1.BeforeExpand, AddressOf CheckForCheckedChildren\n\n        &#39; Enable redrawing of treeView1.\n        treeView1.EndUpdate()\n    End Sub &#39;showCheckedNodesButton_Click\n\n    &#39; Prevent expansion of a node that does not have any checked child nodes.\n    Private Sub CheckForCheckedChildren(ByVal sender As Object, ByVal e As TreeViewCancelEventArgs)\n        If Not HasCheckedChildNodes(e.Node) Then\n            e.Cancel = True\n        End If\n    End Sub &#39;CheckForCheckedChildren\n\n    &#39; Returns a value indicating whether the specified \n    &#39; TreeNode has checked child nodes.\n    Private Function HasCheckedChildNodes(ByVal node As TreeNode) As Boolean\n        If node.Nodes.Count = 0 Then\n            Return False\n        End If\n        Dim childNode As TreeNode\n        For Each childNode In node.Nodes\n            If childNode.Checked Then\n                Return True\n            End If\n            &#39; Recursively check the children of the current child node.\n            If HasCheckedChildNodes(childNode) Then\n                Return True\n            End If\n        Next childNode\n        Return False\n    End Function &#39;HasCheckedChildNodes\n\nEnd Class &#39;Form1 \n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewShowCheckedNodes1#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\npublic ref class Form1: public Form\n{\nprivate:\n   TreeView^ treeView1;\n   Button^ showCheckedNodesButton;\n   TreeViewCancelEventHandler^ checkForCheckedChildren;\n\npublic:\n   Form1()\n   {\n      treeView1 = gcnew TreeView;\n      showCheckedNodesButton = gcnew Button;\n      checkForCheckedChildren = gcnew TreeViewCancelEventHandler( this, &amp;Form1::CheckForCheckedChildrenHandler );\n      this-&gt;SuspendLayout();\n      \n      // Initialize treeView1.\n      treeView1-&gt;Location = Point(0,25);\n      treeView1-&gt;Size = System::Drawing::Size( 292, 248 );\n      treeView1-&gt;Anchor = static_cast&lt;AnchorStyles&gt;(AnchorStyles::Top | AnchorStyles::Left | AnchorStyles::Bottom | AnchorStyles::Right);\n      treeView1-&gt;CheckBoxes = true;\n      \n      // Add nodes to treeView1.\n      TreeNode^ node;\n      for ( int x = 0; x &lt; 3; ++x )\n      {\n         \n         // Add a root node.\n         node = treeView1-&gt;Nodes-&gt;Add( String::Format( &quot;Node{0}&quot;, x * 4 ) );\n         for ( int y = 1; y &lt; 4; ++y )\n         {\n            \n            // Add a node as a child of the previously added node.\n            node = node-&gt;Nodes-&gt;Add( String::Format( &quot;Node{0}&quot;, x * 4 + y ) );\n\n         }\n      }\n      \n      // Set the checked state of one of the nodes to\n      // demonstrate the showCheckedNodesButton button behavior.\n      treeView1-&gt;Nodes[ 1 ]-&gt;Nodes[ 0 ]-&gt;Nodes[ 0 ]-&gt;Checked = true;\n      \n      // Initialize showCheckedNodesButton.\n      showCheckedNodesButton-&gt;Size = System::Drawing::Size( 144, 24 );\n      showCheckedNodesButton-&gt;Text = &quot;Show Checked Nodes&quot;;\n      showCheckedNodesButton-&gt;Click += gcnew EventHandler( this, &amp;Form1::showCheckedNodesButton_Click );\n      \n      // Initialize the form.\n      this-&gt;ClientSize = System::Drawing::Size( 292, 273 );\n      array&lt;Control^&gt;^temp0 = {showCheckedNodesButton,treeView1};\n      this-&gt;Controls-&gt;AddRange( temp0 );\n      this-&gt;ResumeLayout( false );\n   }\n\nprivate:\n   void showCheckedNodesButton_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      // Disable redrawing of treeView1 to prevent flickering \n      // while changes are made.\n      treeView1-&gt;BeginUpdate();\n      \n      // Collapse all nodes of treeView1.\n      treeView1-&gt;CollapseAll();\n      \n      // Add the checkForCheckedChildren event handler to the BeforeExpand event.\n      treeView1-&gt;BeforeExpand += checkForCheckedChildren;\n      \n      // Expand all nodes of treeView1. Nodes without checked children are \n      // prevented from expanding by the checkForCheckedChildren event handler.\n      treeView1-&gt;ExpandAll();\n      \n      // Remove the checkForCheckedChildren event handler from the BeforeExpand \n      // event so manual node expansion will work correctly.\n      treeView1-&gt;BeforeExpand -= checkForCheckedChildren;\n      \n      // Enable redrawing of treeView1.\n      treeView1-&gt;EndUpdate();\n   }\n\n   // Prevent expansion of a node that does not have any checked child nodes.\n   void CheckForCheckedChildrenHandler( Object^ /*sender*/, TreeViewCancelEventArgs^ e )\n   {\n      if (  !HasCheckedChildNodes( e-&gt;Node ) )\n            e-&gt;Cancel = true;\n   }\n\n\n   // Returns a value indicating whether the specified \n   // TreeNode has checked child nodes.\n   bool HasCheckedChildNodes( TreeNode^ node )\n   {\n      if ( node-&gt;Nodes-&gt;Count == 0 )\n            return false;\n\n      System::Collections::IEnumerator^ myEnum = node-&gt;Nodes-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         TreeNode^ childNode = safe_cast&lt;TreeNode^&gt;(myEnum-&gt;Current);\n         if ( childNode-&gt;Checked )\n                  return true;\n\n         // Recursively check the children of the current child node.\n         if ( HasCheckedChildNodes( childNode ) )\n                  return true;\n      }\n\n      return false;\n   }\n};\n\nint main()\n{\n   Application::Run( gcnew Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewShowCheckedNodes1#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\npublic class Form1 : Form\n{\n    private TreeView treeView1;\n    private Button showCheckedNodesButton;\n    private TreeViewCancelEventHandler checkForCheckedChildren;\n\n    public Form1()\n    {\n        treeView1 = new TreeView();\n        showCheckedNodesButton = new Button();\n        checkForCheckedChildren = \n            new TreeViewCancelEventHandler(CheckForCheckedChildrenHandler);\n\n        this.SuspendLayout();\n\n        // Initialize treeView1.\n        treeView1.Location = new Point(0, 25);\n        treeView1.Size = new Size(292, 248);\n        treeView1.Anchor = AnchorStyles.Top | AnchorStyles.Left | \n            AnchorStyles.Bottom | AnchorStyles.Right;\n        treeView1.CheckBoxes = true;\n\n        // Add nodes to treeView1.\n        TreeNode node;\n        for (int x = 0; x &lt; 3; ++x)\n        {\n            // Add a root node.\n            node = treeView1.Nodes.Add(String.Format(&quot;Node{0}&quot;, x*4));\n            for (int y = 1; y &lt; 4; ++y)\n            {\n                // Add a node as a child of the previously added node.\n                node = node.Nodes.Add(String.Format(&quot;Node{0}&quot;, x*4 + y));\n            }\n        }\n\n        // Set the checked state of one of the nodes to\n        // demonstrate the showCheckedNodesButton button behavior.\n        treeView1.Nodes[1].Nodes[0].Nodes[0].Checked = true;\n\n        // Initialize showCheckedNodesButton.\n        showCheckedNodesButton.Size = new Size(144, 24);\n        showCheckedNodesButton.Text = &quot;Show Checked Nodes&quot;;\n        showCheckedNodesButton.Click += \n            new EventHandler(showCheckedNodesButton_Click);\n\n        // Initialize the form.\n        this.ClientSize = new Size(292, 273);\n        this.Controls.AddRange(new Control[] \n            { showCheckedNodesButton, treeView1 } );\n\n        this.ResumeLayout(false);\n    }\n\n    [STAThreadAttribute()]\n    static void Main() \n    {\n        Application.Run(new Form1());\n    }\n\n    private void showCheckedNodesButton_Click(object sender, EventArgs e)\n    {\n        // Disable redrawing of treeView1 to prevent flickering \n        // while changes are made.\n        treeView1.BeginUpdate();\n\n        // Collapse all nodes of treeView1.\n        treeView1.CollapseAll();\n\n        // Add the checkForCheckedChildren event handler to the BeforeExpand event.\n        treeView1.BeforeExpand += checkForCheckedChildren;\n\n        // Expand all nodes of treeView1. Nodes without checked children are \n        // prevented from expanding by the checkForCheckedChildren event handler.\n        treeView1.ExpandAll();\n\n        // Remove the checkForCheckedChildren event handler from the BeforeExpand \n        // event so manual node expansion will work correctly.\n        treeView1.BeforeExpand -= checkForCheckedChildren;\n\n        // Enable redrawing of treeView1.\n        treeView1.EndUpdate();\n    }\n\n    // Prevent expansion of a node that does not have any checked child nodes.\n    private void CheckForCheckedChildrenHandler(object sender, \n        TreeViewCancelEventArgs e)\n    {\n        if (!HasCheckedChildNodes(e.Node)) e.Cancel = true;\n    }\n\n    // Returns a value indicating whether the specified \n    // TreeNode has checked child nodes.\n    private bool HasCheckedChildNodes(TreeNode node)\n    {\n        if (node.Nodes.Count == 0) return false;\n        foreach (TreeNode childNode in node.Nodes)\n        {\n            if (childNode.Checked) return true;\n            // Recursively check the children of the current child node.\n            if (HasCheckedChildNodes(childNode)) return true;\n        }\n        return false;\n    }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_CreateParams\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_CreateParams_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateParams</div>        \r\n          </div>\r\n    \r\n            <p>Gets the required creation parameters when the control handle is created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Windows.Forms.CreateParams CreateParams { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.createparams\" data-linktype=\"relative-path\">CreateParams</a></div>\r\n                  </div>\r\n                  <p>The creation parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_DefaultSize\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_DefaultSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default size of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override System.Drawing.Size DefaultSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>The default <a class=\"xref\" href=\"system.drawing.size\" data-linktype=\"relative-path\">Size</a> of the control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_DoubleBuffered\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_DoubleBuffered_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DoubleBuffered</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the control should redraw its surface using a secondary buffer. The DoubleBuffered property does not affect the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool DoubleBuffered { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control uses a secondary buffer; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting the DoubleBuffered property does not affect the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control. If you want to reduce flicker when the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is drawn, use the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeginUpdate_\" data-linktype=\"relative-path\">BeginUpdate</a> and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_EndUpdate_\" data-linktype=\"relative-path\">EndUpdate</a> methods.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_DrawMode\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_DrawMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DrawMode</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the mode in which the control is drawn.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeViewDrawMode DrawMode { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a> values. The default is <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property value is not a valid <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The nodes of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> are typically drawn by the operating system. The DrawMode property lets you customize the appearance of the nodes. To do this, set DrawMode to <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewDrawMode</a> or <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewDrawMode</a> and provide a handler for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> event. This is called owner drawing.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to customize a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control using owner drawing. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control in the example displays optional node tags alongside the standard node labels. Node tags are specified by using the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control also uses custom colors, which include a custom highlight color.  </p>\n<p> You can customize most of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> colors by setting color properties, but the selection highlight color is not available as a property. Additionally, the default selection highlight rectangle extends only around a node label. Owner drawing must be used to draw the node tags and to draw a customized highlight rectangle large enough to include a node tag.  </p>\n<p> For the complete example, see the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> reference topic.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewOwnerDraw#2\">    Public Sub New()\n\n        &#39; Create and initialize the TreeView control.\n        myTreeView = New TreeView()\n        myTreeView.Dock = DockStyle.Fill\n        myTreeView.BackColor = Color.Tan\n        myTreeView.CheckBoxes = True\n        \n        &#39; Add nodes to the TreeView control.\n        Dim node As TreeNode\n        Dim x As Integer\n        For x = 1 To 3\n\n            &#39; Add a root node to the TreeView control.\n            node = myTreeView.Nodes.Add(String.Format(&quot;Task {0}&quot;, x))\n            Dim y As Integer\n            For y = 1 To 3 \n\n                &#39; Add a child node to the root node.\n                node.Nodes.Add(String.Format(&quot;Subtask {0}&quot;, y))\n            Next y\n        Next x\n        myTreeView.ExpandAll()\n        \n        &#39; Add tags containing alert messages to a few nodes \n        &#39; and set the node background color to highlight them.\n        myTreeView.Nodes(1).Nodes(0).Tag = &quot;urgent!&quot;\n        myTreeView.Nodes(1).Nodes(0).BackColor = Color.Yellow\n        myTreeView.SelectedNode = myTreeView.Nodes(1).Nodes(0)\n        myTreeView.Nodes(2).Nodes(1).Tag = &quot;urgent!&quot;\n        myTreeView.Nodes(2).Nodes(1).BackColor = Color.Yellow\n        \n        &#39; Configure the TreeView control for owner-draw.\n        myTreeView.DrawMode = TreeViewDrawMode.OwnerDrawText\n\n        &#39; Add a handler for the MouseDown event so that a node can be \n        &#39; selected by clicking the tag text as well as the node text.\n        AddHandler myTreeView.MouseDown, AddressOf myTreeView_MouseDown\n        \n        &#39; Initialize the form and add the TreeView control to it.\n        Me.ClientSize = New Size(292, 273)\n        Me.Controls.Add(myTreeView)\n    End Sub &#39;New\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewOwnerDraw#2\">   TreeViewOwnerDraw()\n   {\n      tagFont = gcnew System::Drawing::Font( &quot;Helvetica&quot;,8,FontStyle::Bold );\n\n      // Create and initialize the TreeView control.\n      myTreeView = gcnew TreeView;\n      myTreeView-&gt;Dock = DockStyle::Fill;\n      myTreeView-&gt;BackColor = Color::Tan;\n      myTreeView-&gt;CheckBoxes = true;\n      \n      // Add nodes to the TreeView control.\n      TreeNode^ node;\n      for ( int x = 1; x &lt; 4; ++x )\n      {\n         // Add a root node to the TreeView control.\n         node = myTreeView-&gt;Nodes-&gt;Add( String::Format( &quot;Task {0}&quot;, x ) );\n         for ( int y = 1; y &lt; 4; ++y )\n         {\n            // Add a child node to the root node.\n            node-&gt;Nodes-&gt;Add( String::Format( &quot;Subtask {0}&quot;, y ) );\n         }\n      }\n      myTreeView-&gt;ExpandAll();\n      \n      // Add tags containing alert messages to a few nodes \n      // and set the node background color to highlight them.\n      myTreeView-&gt;Nodes[ 1 ]-&gt;Nodes[ 0 ]-&gt;Tag = &quot;urgent!&quot;;\n      myTreeView-&gt;Nodes[ 1 ]-&gt;Nodes[ 0 ]-&gt;BackColor = Color::Yellow;\n      myTreeView-&gt;SelectedNode = myTreeView-&gt;Nodes[ 1 ]-&gt;Nodes[ 0 ];\n      myTreeView-&gt;Nodes[ 2 ]-&gt;Nodes[ 1 ]-&gt;Tag = &quot;urgent!&quot;;\n      myTreeView-&gt;Nodes[ 2 ]-&gt;Nodes[ 1 ]-&gt;BackColor = Color::Yellow;\n      \n      // Configure the TreeView control for owner-draw and add\n      // a handler for the DrawNode event.\n      myTreeView-&gt;DrawMode = TreeViewDrawMode::OwnerDrawText;\n      myTreeView-&gt;DrawNode += gcnew DrawTreeNodeEventHandler( this, &amp;TreeViewOwnerDraw::myTreeView_DrawNode );\n      \n      // Add a handler for the MouseDown event so that a node can be \n      // selected by clicking the tag text as well as the node text.\n      myTreeView-&gt;MouseDown += gcnew MouseEventHandler( this, &amp;TreeViewOwnerDraw::myTreeView_MouseDown );\n      \n      // Initialize the form and add the TreeView control to it.\n      this-&gt;ClientSize = System::Drawing::Size( 292, 273 );\n      this-&gt;Controls-&gt;Add( myTreeView );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewOwnerDraw#2\">    public TreeViewOwnerDraw()\n    {\n        // Create and initialize the TreeView control.\n        myTreeView = new TreeView();\n        myTreeView.Dock = DockStyle.Fill;\n        myTreeView.BackColor = Color.Tan;\n        myTreeView.CheckBoxes = true;\n\n        // Add nodes to the TreeView control.\n        TreeNode node;\n        for (int x = 1; x &lt; 4; ++x)\n        {\n            // Add a root node to the TreeView control.\n            node = myTreeView.Nodes.Add(String.Format(&quot;Task {0}&quot;, x));\n            for (int y = 1; y &lt; 4; ++y)\n            {\n                // Add a child node to the root node.\n                node.Nodes.Add(String.Format(&quot;Subtask {0}&quot;, y));\n            }\n        }\n        myTreeView.ExpandAll();\n\n        // Add tags containing alert messages to a few nodes \n        // and set the node background color to highlight them.\n        myTreeView.Nodes[1].Nodes[0].Tag = &quot;urgent!&quot;;\n        myTreeView.Nodes[1].Nodes[0].BackColor = Color.Yellow;\n        myTreeView.SelectedNode = myTreeView.Nodes[1].Nodes[0];\n        myTreeView.Nodes[2].Nodes[1].Tag = &quot;urgent!&quot;;\n        myTreeView.Nodes[2].Nodes[1].BackColor = Color.Yellow;\n\n        // Configure the TreeView control for owner-draw and add\n        // a handler for the DrawNode event.\n        myTreeView.DrawMode = TreeViewDrawMode.OwnerDrawText;\n        myTreeView.DrawNode += \n            new DrawTreeNodeEventHandler(myTreeView_DrawNode);\n\n        // Add a handler for the MouseDown event so that a node can be \n        // selected by clicking the tag text as well as the node text.\n        myTreeView.MouseDown += new MouseEventHandler(myTreeView_MouseDown);\n\n        // Initialize the form and add the TreeView control to it.\n        this.ClientSize = new Size(292, 273);\n        this.Controls.Add(myTreeView);\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_ForeColor\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_ForeColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForeColor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the foreground color of the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Drawing.Color ForeColor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a></div>\r\n                  </div>\r\n                  <p>The foreground <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a> of the control. The default is the value of the <span class=\"xref\">stem.Windows.Forms.Control.DefaultForeColor*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_FullRowSelect\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_FullRowSelect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FullRowSelect</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the selection highlight spans the width of the tree view control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool FullRowSelect { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the selection highlight spans the width of the tree view control; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When FullRowSelect is <code>true</code>, a selection highlight spans the entire width of the tree view, display instead of the width of just the tree node label. The FullRowSelect property is ignored if <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowLines_\" data-linktype=\"relative-path\">ShowLines</a> is set to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates a customized <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. By inheriting the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> class, this custom version has all the functionality of a typical <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. Changing various property values in the constructor provides a unique appearance. Because the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowPlusMinus_\" data-linktype=\"relative-path\">ShowPlusMinus</a> property is set to <code>false</code>, the customized control also overrides the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_OnAfterSelect_\" data-linktype=\"relative-path\">OnAfterSelect</a> method so nodes can be expanded and collapsed when they are clicked.  </p>\n<p> A control that is customized in this way can be used throughout an organization, making it easy to provide a consistent interface without requiring the control properties to be specified in each individual project.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewCustomization#2\">Public Class CustomizedTreeView\n    Inherits TreeView\n\n    Public Sub New()\n        &#39; Customize the TreeView control by setting various properties.\n        BackColor = System.Drawing.Color.CadetBlue\n        FullRowSelect = True\n        HotTracking = True\n        Indent = 34\n        ShowPlusMinus = False\n\n        &#39; The ShowLines property must be false for the FullRowSelect \n        &#39; property to work.\n        ShowLines = False\n    End Sub &#39;New\n\n\n    Protected Overrides Sub OnAfterSelect(ByVal e As TreeViewEventArgs)\n        &#39; Confirm that the user initiated the selection.\n        &#39; This prevents the first node from expanding when it is\n        &#39; automatically selected during the initialization of \n        &#39; the TreeView control.\n        If e.Action &lt;&gt; TreeViewAction.Unknown Then\n            If e.Node.IsExpanded Then\n                e.Node.Collapse()\n            Else\n                e.Node.Expand()\n            End If\n        End If\n\n        &#39; Remove the selection. This allows the same node to be\n        &#39; clicked twice in succession to toggle the expansion state.\n        SelectedNode = Nothing\n    End Sub &#39;OnAfterSelect\n\nEnd Class &#39;CustomizedTreeView \n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewCustomization#2\">public ref class CustomizedTreeView: public TreeView\n{\npublic:\n   CustomizedTreeView()\n   {\n\n      // Customize the TreeView control by setting various properties.\n      BackColor = System::Drawing::Color::CadetBlue;\n      FullRowSelect = true;\n      HotTracking = true;\n      Indent = 34;\n      ShowPlusMinus = false;\n\n      // The ShowLines property must be false for the FullRowSelect\n      // property to work.\n      ShowLines = false;\n   }\n\nprotected:\n   virtual void OnAfterSelect( TreeViewEventArgs^ e ) override\n   {\n      // Confirm that the user initiated the selection.\n      // This prevents the first node from expanding when it is\n      // automatically selected during the initialization of\n      // the TreeView control.\n      if ( e-&gt;Action != TreeViewAction::Unknown )\n      {\n         if ( e-&gt;Node-&gt;IsExpanded )\n         {\n            e-&gt;Node-&gt;Collapse();\n         }\n         else\n         {\n            e-&gt;Node-&gt;Expand();\n         }\n      }\n\n      \n      // Remove the selection. This allows the same node to be\n      // clicked twice in succession to toggle the expansion state.\n      SelectedNode = nullptr;\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewCustomization#2\">    public class CustomizedTreeView : TreeView\n    {\n        public CustomizedTreeView()\n        {\n            // Customize the TreeView control by setting various properties.\n            BackColor = System.Drawing.Color.CadetBlue;\n            FullRowSelect = true;\n            HotTracking = true;\n            Indent = 34;\n            ShowPlusMinus = false;\n\n            // The ShowLines property must be false for the FullRowSelect \n            // property to work.\n            ShowLines = false;\n        }\n\n        protected override void OnAfterSelect(TreeViewEventArgs e)\n        {\n            // Confirm that the user initiated the selection.\n            // This prevents the first node from expanding when it is\n            // automatically selected during the initialization of \n            // the TreeView control.\n            if (e.Action != TreeViewAction.Unknown)\n            {\n                if (e.Node.IsExpanded) \n                {\n                    e.Node.Collapse();\n                }\n                else \n                {\n                    e.Node.Expand();\n                }\n            }\n\n            // Remove the selection. This allows the same node to be\n            // clicked twice in succession to toggle the expansion state.\n            SelectedNode = null;\n        }\n\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_HideSelection\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_HideSelection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HideSelection</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the selected tree node remains highlighted even when the tree view has lost the focus.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HideSelection { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the selected tree node is not highlighted when the tree view has lost the focus; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When this property is set to <code>false</code>, selected nodes in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control remain highlighted in a different color than the current selection color when the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control loses focus. You can use this property to keep items that are selected by the user visible when the user clicks a different control on the form or moves to a different window.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you are concerned with the accessibility of your applications, it is recommended that you set the HideSelection property to <code>false</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the HideSelection property. To run this example, paste the following code in a form and call the <code>InitializeSelectedTreeView</code> method in the form&#39;s constructor or <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Load\" data-linktype=\"relative-path\">Load</a> event handler.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewExample#2\">   System::Windows::Forms::TreeView^ TreeView2;\n\n   // Initialize the TreeView to blend with the form, giving it the \n   // same color as the form and no border.\n   void InitializeSelectedTreeView()\n   {\n      \n      // Create a new TreeView control and set the location and size.\n      this-&gt;TreeView2 = gcnew System::Windows::Forms::TreeView;\n      this-&gt;TreeView2-&gt;Location = System::Drawing::Point( 72, 48 );\n      this-&gt;TreeView2-&gt;Size = System::Drawing::Size( 200, 200 );\n      this-&gt;TreeView2-&gt;BorderStyle = BorderStyle::Fixed3D;\n      \n      // Set the HideSelection property to false to keep the \n      // selection highlighted when the user leaves the control. \n      this-&gt;TreeView1-&gt;HideSelection = false;\n      \n      // Add the nodes.\n      array&lt;TreeNode^&gt;^temp0 = {gcnew TreeNode( &quot;Full Color&quot; ),gcnew TreeNode( &quot;Project Wizards&quot; ),gcnew TreeNode( &quot;Visual C# and Visual Basic Support&quot; )};\n      array&lt;TreeNode^&gt;^temp1 = {gcnew TreeNode( &quot;Pentium 133 MHz or faster processor &quot; ),gcnew TreeNode( &quot;Windows 98 or later&quot; ),gcnew TreeNode( &quot;100 MB Disk space&quot; )};\n      array&lt;TreeNode^&gt;^temp2 = {gcnew TreeNode( &quot;Features&quot;,temp0 ),gcnew TreeNode( &quot;System Requirements&quot;,temp1 )};\n      this-&gt;TreeView1-&gt;Nodes-&gt;AddRange( temp2 );\n      \n      // Set the tab index and add the TreeView to the form.\n      this-&gt;TreeView1-&gt;TabIndex = 0;\n      this-&gt;Controls-&gt;Add( this-&gt;TreeView1 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewExample#2\">\n\t// Declare the TreeView control.\n\tinternal System.Windows.Forms.TreeView TreeView2;\n\n\t// Initialize the TreeView to blend with the form, giving it the \n\t// same color as the form and no border.\n\tprivate void InitializeSelectedTreeView()\n\t{\n\n\t\t// Create a new TreeView control and set the location and size.\n\t\tthis.TreeView2 = new System.Windows.Forms.TreeView();\n\t\tthis.TreeView2.Location = new System.Drawing.Point(72, 48);\n\t\tthis.TreeView2.Size = new System.Drawing.Size(200, 200);\n\n\t\tthis.TreeView2.BorderStyle = BorderStyle.Fixed3D;\n\t\t\n\t\t// Set the HideSelection property to false to keep the \n\t\t// selection highlighted when the user leaves the control. \n\t\t// This helps it blend with form.\n\t\tthis.TreeView2.HideSelection = false;\n\n\t\t// Add the nodes.\n\t\tthis.TreeView2.Nodes.AddRange(new TreeNode[]\n\t\t\t{new TreeNode(&quot;Features&quot;, \n\t\t\t\tnew TreeNode[]{\n\t\t\t\tnew TreeNode(&quot;Full Color&quot;), \n\t\t\t\tnew TreeNode(&quot;Project Wizards&quot;), \n\t\t\t\tnew TreeNode(&quot;Visual C# and Visual Basic Support&quot;)}), \n\t\t\t\tnew TreeNode(&quot;System Requirements&quot;, \n\t\t\t\tnew TreeNode[]{\n\t\t\t\t\tnew TreeNode(&quot;Pentium 133 MHz or faster processor &quot;),\n\t\t\t\t\tnew TreeNode(&quot;Windows 98 or later&quot;), \n\t\t\t\t\tnew TreeNode(&quot;100 MB Disk space&quot;)})\n\t\t\t});\n\n\t\t// Set the tab index and add the TreeView to the form.\n\t\tthis.TreeView2.TabIndex = 0;\n\t\tthis.Controls.Add(this.TreeView2);\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewExample#2\">\n    &#39; Declare the TreeView control.\n    Friend WithEvents TreeView2 As System.Windows.Forms.TreeView\n\n    &#39; Initialize the TreeView to blend with the form, giving it the \n    &#39; same color as the form and no border.\n    Private Sub InitializeSelectedTreeView()\n\n        &#39; Create a new TreeView control and set the location and size.\n        Me.TreeView2 = New System.Windows.Forms.TreeView\n        Me.TreeView2.Location = New System.Drawing.Point(72, 48)\n        Me.TreeView2.Size = New System.Drawing.Size(200, 200)\n        Me.TreeView2.BorderStyle = BorderStyle.Fixed3D\n       \n        &#39; Set the HideSelection property to false to keep the \n        &#39; selection highlighted when the user leaves the control. \n        Me.TreeView2.HideSelection = False\n\n        &#39; Add the nodes.\n        Me.TreeView2.Nodes.AddRange(New System.Windows.Forms.TreeNode() _\n            {New System.Windows.Forms.TreeNode(&quot;Features&quot;, _\n            New System.Windows.Forms.TreeNode() _\n            {New System.Windows.Forms.TreeNode(&quot;Full Color&quot;), _\n            New System.Windows.Forms.TreeNode(&quot;Project Wizards&quot;), _\n            New System.Windows.Forms.TreeNode(&quot;Visual C# and Visual Basic Support&quot;)}), _\n            New System.Windows.Forms.TreeNode(&quot;System Requirements&quot;, _\n            New System.Windows.Forms.TreeNode() _\n            {New System.Windows.Forms.TreeNode _\n            (&quot;Pentium 133 MHz or faster processor &quot;), _\n            New System.Windows.Forms.TreeNode(&quot;Windows 98 or later&quot;), _\n            New System.Windows.Forms.TreeNode(&quot;100 MB Disk space&quot;)})})\n\n        &#39; Set the tab index and add the TreeView to the form.\n        Me.TreeView2.TabIndex = 0\n        Me.Controls.Add(Me.TreeView2)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_HotTracking\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_HotTracking_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HotTracking</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether a tree node label takes on the appearance of a hyperlink as the mouse pointer passes over it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HotTracking { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a tree node label takes on the appearance of a hyperlink as the mouse pointer passes over it; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_CheckBoxes_\" data-linktype=\"relative-path\">CheckBoxes</a> property is set to <code>true</code>, the HotTracking property has no effect.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When the HotTracking property is set to <code>true</code>, each tree node label takes on the appearance of a hyperlink as the mouse pointer passes over it. The <a class=\"xref\" href=\"system.drawing.fontstyle\" data-linktype=\"relative-path\">FontStyle</a> font style is applied to the <a class=\"xref\" href=\"system.drawing.font\" data-linktype=\"relative-path\">Font</a> and the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_ForeColor_\" data-linktype=\"relative-path\">ForeColor</a> is set to blue to make the label appear as a link. The appearance is not controlled by the Internet settings of the user&#39;s operating system.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates a customized <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. By inheriting the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> class, this custom version has all the functionality of a typical <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. Changing various property values in the constructor provides a unique appearance. Because the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowPlusMinus_\" data-linktype=\"relative-path\">ShowPlusMinus</a> property is set to <code>false</code>, the customized control also overrides the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_OnAfterSelect_\" data-linktype=\"relative-path\">OnAfterSelect</a> method so that nodes can be expanded and collapsed when they are clicked.  </p>\n<p> A control that is customized in this way can be used throughout an organization, making it easy to provide a consistent interface without requiring the control properties to be specified in each individual project.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewCustomization#2\">Public Class CustomizedTreeView\n    Inherits TreeView\n\n    Public Sub New()\n        &#39; Customize the TreeView control by setting various properties.\n        BackColor = System.Drawing.Color.CadetBlue\n        FullRowSelect = True\n        HotTracking = True\n        Indent = 34\n        ShowPlusMinus = False\n\n        &#39; The ShowLines property must be false for the FullRowSelect \n        &#39; property to work.\n        ShowLines = False\n    End Sub &#39;New\n\n\n    Protected Overrides Sub OnAfterSelect(ByVal e As TreeViewEventArgs)\n        &#39; Confirm that the user initiated the selection.\n        &#39; This prevents the first node from expanding when it is\n        &#39; automatically selected during the initialization of \n        &#39; the TreeView control.\n        If e.Action &lt;&gt; TreeViewAction.Unknown Then\n            If e.Node.IsExpanded Then\n                e.Node.Collapse()\n            Else\n                e.Node.Expand()\n            End If\n        End If\n\n        &#39; Remove the selection. This allows the same node to be\n        &#39; clicked twice in succession to toggle the expansion state.\n        SelectedNode = Nothing\n    End Sub &#39;OnAfterSelect\n\nEnd Class &#39;CustomizedTreeView \n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewCustomization#2\">public ref class CustomizedTreeView: public TreeView\n{\npublic:\n   CustomizedTreeView()\n   {\n\n      // Customize the TreeView control by setting various properties.\n      BackColor = System::Drawing::Color::CadetBlue;\n      FullRowSelect = true;\n      HotTracking = true;\n      Indent = 34;\n      ShowPlusMinus = false;\n\n      // The ShowLines property must be false for the FullRowSelect\n      // property to work.\n      ShowLines = false;\n   }\n\nprotected:\n   virtual void OnAfterSelect( TreeViewEventArgs^ e ) override\n   {\n      // Confirm that the user initiated the selection.\n      // This prevents the first node from expanding when it is\n      // automatically selected during the initialization of\n      // the TreeView control.\n      if ( e-&gt;Action != TreeViewAction::Unknown )\n      {\n         if ( e-&gt;Node-&gt;IsExpanded )\n         {\n            e-&gt;Node-&gt;Collapse();\n         }\n         else\n         {\n            e-&gt;Node-&gt;Expand();\n         }\n      }\n\n      \n      // Remove the selection. This allows the same node to be\n      // clicked twice in succession to toggle the expansion state.\n      SelectedNode = nullptr;\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewCustomization#2\">    public class CustomizedTreeView : TreeView\n    {\n        public CustomizedTreeView()\n        {\n            // Customize the TreeView control by setting various properties.\n            BackColor = System.Drawing.Color.CadetBlue;\n            FullRowSelect = true;\n            HotTracking = true;\n            Indent = 34;\n            ShowPlusMinus = false;\n\n            // The ShowLines property must be false for the FullRowSelect \n            // property to work.\n            ShowLines = false;\n        }\n\n        protected override void OnAfterSelect(TreeViewEventArgs e)\n        {\n            // Confirm that the user initiated the selection.\n            // This prevents the first node from expanding when it is\n            // automatically selected during the initialization of \n            // the TreeView control.\n            if (e.Action != TreeViewAction.Unknown)\n            {\n                if (e.Node.IsExpanded) \n                {\n                    e.Node.Collapse();\n                }\n                else \n                {\n                    e.Node.Expand();\n                }\n            }\n\n            // Remove the selection. This allows the same node to be\n            // clicked twice in succession to toggle the expansion state.\n            SelectedNode = null;\n        }\n\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_ImageIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_ImageIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImageIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the image-list index value of the default image that is displayed by the tree nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ImageIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A zero-based index that represents the position of an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> in an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>. The default is zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The specified index is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ImageIndex value is the index of an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> stored in the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> assigned to the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageList_\" data-linktype=\"relative-path\">ImageList</a> property.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageKey_\" data-linktype=\"relative-path\">ImageKey</a> and ImageIndex properties are mutually exclusive; if one is set, the other is ignored. If you set <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageKey_\" data-linktype=\"relative-path\">ImageKey</a>, ImageIndex is automatically set to -1. Alternatively, if you set ImageIndex, <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageKey_\" data-linktype=\"relative-path\">ImageKey</a> is automatically set to an empty string (&quot;&quot;).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When setting the ImageIndex property at run time, the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> handle is recreated (see <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RecreateHandle_\" data-linktype=\"relative-path\">RecreateHandle</a>) to update the control&#39;s appearance. This causes all tree nodes to be collapsed, with the exception of the selected <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates and assigns an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> to a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control and fills the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. The tree nodes are assigned images from the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> that are displayed when in a selected or unselected state. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>, and an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that contains <code>Customer</code> objects that each contain <code>Order</code> objects. It is also assumed that the <code>Customer</code> and <code>Order</code> objects are defined.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_TreeNode#1\">Public Class Customer\n   Public CustomerOrders As ArrayList\n   Public CustomerName As String\n   \n   Public Sub New(myName As String)\n      CustomerName = myName\n      CustomerOrders = New ArrayList()\n   End Sub &#39;New\nEnd Class &#39;Customer\n\n\nPublic Class Order\n   Public OrderID As String\n   \n   Public Sub New(myOrderID As String)\n      Me.OrderID = myOrderID\n   End Sub &#39;New\nEnd Class &#39;Order\n\nPrivate Sub FillTreeView()\n   &#39; Load the images in an ImageList.\n   Dim myImageList As New ImageList()\n   myImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;))\n   \n   &#39; Assign the ImageList to the TreeView.\n   myTreeView.ImageList = myImageList\n   \n   &#39; Set the TreeView control&#39;s default image and selected image indexes.\n   myTreeView.ImageIndex = 0\n   myTreeView.SelectedImageIndex = 1\n   \n   &#39; Set the index of image from the \n   &#39; ImageList for selected and unselected tree nodes.\n   Me.rootImageIndex = 2\n   Me.selectedCustomerImageIndex = 3\n   Me.unselectedCustomerImageIndex = 4\n   Me.selectedOrderImageIndex = 5\n   Me.unselectedOrderImageIndex = 6\n   \n   &#39; Create the root tree node.\n   Dim rootNode As New TreeNode(&quot;CustomerList&quot;)\n   rootNode.ImageIndex = rootImageIndex\n   rootNode.SelectedImageIndex = rootImageIndex\n   \n   &#39; Add a main root tree node.\n   myTreeView.Nodes.Add(rootNode)\n   \n   &#39; Add a root tree node for each Customer object in the ArrayList.\n   Dim myCustomer As Customer\n   For Each myCustomer In  customerArray\n      &#39; Add a child tree node for each Order object.\n      Dim countIndex As Integer = 0\n      Dim myTreeNodeArray(myCustomer.CustomerOrders.Count) As TreeNode\n      Dim myOrder As Order\n      For Each myOrder In  myCustomer.CustomerOrders\n         &#39; Add the Order tree node to the array.\n         myTreeNodeArray(countIndex) = New TreeNode(myOrder.OrderID, _\n            unselectedOrderImageIndex, selectedOrderImageIndex)\n         countIndex += 1\n      Next myOrder\n      &#39; Add the Customer tree node.\n      Dim customerNode As New TreeNode(myCustomer.CustomerName, _\n         unselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray)\n      myTreeView.Nodes(0).Nodes.Add(customerNode)\n   Next myCustomer\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_TreeNode#1\">ref class Customer\n{\npublic:\n   ArrayList^ CustomerOrders;\n   String^ CustomerName;\n   Customer( String^ myName )\n   {\n      CustomerName = myName;\n      CustomerOrders = gcnew ArrayList;\n   }\n\n};\n\nref class Order\n{\npublic:\n   String^ OrderID;\n   Order( String^ myOrderID )\n   {\n      this-&gt;OrderID = myOrderID;\n   }\n\n};\n\n   void FillTreeView()\n   {\n      \n      // Load the images in an ImageList.\n      ImageList^ myImageList = gcnew ImageList;\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Default.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedDefault.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Root.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedOrder.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedOrder.gif&quot; ) );\n      \n      // Assign the ImageList to the TreeView.\n      myTreeView-&gt;ImageList = myImageList;\n      \n      // Set the TreeView control&#39;s default image and selected image indexes.\n      myTreeView-&gt;ImageIndex = 0;\n      myTreeView-&gt;SelectedImageIndex = 1;\n      \n      /* Set the index of image from the\n        ImageList for selected and unselected tree nodes.*/\n      this-&gt;rootImageIndex = 2;\n      this-&gt;selectedCustomerImageIndex = 3;\n      this-&gt;unselectedCustomerImageIndex = 4;\n      this-&gt;selectedOrderImageIndex = 5;\n      this-&gt;unselectedOrderImageIndex = 6;\n      \n      // Create the root tree node.\n      TreeNode^ rootNode = gcnew TreeNode( &quot;CustomerList&quot; );\n      rootNode-&gt;ImageIndex = rootImageIndex;\n      rootNode-&gt;SelectedImageIndex = rootImageIndex;\n      \n      // Add a main root tree node.\n      myTreeView-&gt;Nodes-&gt;Add( rootNode );\n      \n      // Add a root tree node for each Customer object in the ArrayList.\n      IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Customer^ myCustomer = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n         \n         // Add a child tree node for each Order object.\n         int countIndex = 0;\n         array&lt;TreeNode^&gt;^myTreeNodeArray = gcnew array&lt;TreeNode^&gt;(myCustomer-&gt;CustomerOrders-&gt;Count);\n         IEnumerator^ myEnum = myCustomer-&gt;CustomerOrders-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Order^ myOrder = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n            \n            // Add the Order tree node to the array.\n            myTreeNodeArray[ countIndex ] = gcnew TreeNode( myOrder-&gt;OrderID,unselectedOrderImageIndex,selectedOrderImageIndex );\n            countIndex++;\n         }\n         TreeNode^ customerNode = gcnew TreeNode( myCustomer-&gt;CustomerName,unselectedCustomerImageIndex,selectedCustomerImageIndex,myTreeNodeArray );\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Add( customerNode );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_TreeNode#1\">\npublic class Customer\n{\n   public ArrayList CustomerOrders;\n   public string CustomerName;\n   public Customer(string myName)\n   {\n      CustomerName = myName;\n      CustomerOrders = new ArrayList(); \n   }\n}\npublic class Order\n{\n   public string OrderID;\n   public Order(string myOrderID )\n   {\n      this.OrderID = myOrderID;\n   }\n}\n\nprivate void FillTreeView()\n{\n\t// Load the images in an ImageList.\n\tImageList myImageList = new ImageList();\n\tmyImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;));\n\t\n\t// Assign the ImageList to the TreeView.\n\tmyTreeView.ImageList = myImageList;\n\t\n\t// Set the TreeView control&#39;s default image and selected image indexes.\n\tmyTreeView.ImageIndex = 0;\n\tmyTreeView.SelectedImageIndex = 1;\n\n\t/* Set the index of image from the \n\tImageList for selected and unselected tree nodes.*/\n\tthis.rootImageIndex = 2;\n\tthis.selectedCustomerImageIndex = 3;\n\tthis.unselectedCustomerImageIndex = 4;\n\tthis.selectedOrderImageIndex = 5;\n\tthis.unselectedOrderImageIndex = 6;\n\t\n\t// Create the root tree node.\n\tTreeNode rootNode = new TreeNode(&quot;CustomerList&quot;);\n\trootNode.ImageIndex = rootImageIndex;\n\trootNode.SelectedImageIndex = rootImageIndex;\n      \n\t// Add a main root tree node.\n\tmyTreeView.Nodes.Add(rootNode);\n\n\t// Add a root tree node for each Customer object in the ArrayList.\n\tforeach(Customer myCustomer in customerArray)\n\t{\n\t\t// Add a child tree node for each Order object.\n\t\tint countIndex=0;\n\t\tTreeNode[] myTreeNodeArray = new TreeNode[myCustomer.CustomerOrders.Count];\n\t\tforeach(Order myOrder in myCustomer.CustomerOrders)\n\t\t{\n\t\t\t// Add the Order tree node to the array.\n\t\t\tmyTreeNodeArray[countIndex] = new TreeNode(myOrder.OrderID,\n\t\t\t  unselectedOrderImageIndex, selectedOrderImageIndex);\n\t\t\tcountIndex++;\n\t\t}\n\t\t// Add the Customer tree node.\n\t\tTreeNode customerNode = new TreeNode(myCustomer.CustomerName,\n\t\t\tunselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray);\n\t\tmyTreeView.Nodes[0].Nodes.Add(customerNode);\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_ImageKey\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_ImageKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImageKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the key of the default image for each node in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control when it is in an unselected state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ImageKey { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The key of the default image shown for each node <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control when the node is in an unselected state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ImageKey property is case-insensitive.  </p>\n<p> If a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> does not have an image set, the image specified by the ImageKey property will be shown when the node is not selected. When the node is selected, the first item in the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> will be shown.  </p>\n<p> The ImageKey and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> properties are mutually exclusive, meaning if one is set, the other is ignored. If you set the ImageKey property, the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> property is automatically set to -1. Alternatively, if you set the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> property, the ImageKey is automatically set to an empty string (&quot;&quot;).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_ImageList\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_ImageList_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImageList</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> that contains the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> objects that are used by the tree nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.ImageList ImageList { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> that contains the <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> objects that are used by the tree nodes. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> property value is anything other than <code>null</code>, all the tree nodes display the first <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> stored in the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>. You can specify which images from the list are displayed for selected and unselected nodes by setting the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> properties. Individual <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects can specify which image is displayed by setting their <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ImageIndex_\" data-linktype=\"relative-path\">ImageIndex</a> and <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> properties. These individual settings will override the settings in the corresponding <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> properties.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework version 1.1, there is an issue that prevents images from appearing on <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> nodes when your application calls <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_EnableVisualStyles_\" data-linktype=\"relative-path\">EnableVisualStyles</a>. To work around this issue, call <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_DoEvents_\" data-linktype=\"relative-path\">DoEvents</a> in your <code>Main</code> method immediately after you call <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_EnableVisualStyles_\" data-linktype=\"relative-path\">EnableVisualStyles</a>. This issue is fixed in the .NET Framework 2.0.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates and assigns an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> to a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control and fills the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. The tree nodes are assigned images from the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> that are displayed when in a selected or unselected state. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>, and an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that contains <code>Customer</code> objects that each contain <code>Order</code> objects.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_TreeNode#1\">Public Class Customer\n   Public CustomerOrders As ArrayList\n   Public CustomerName As String\n   \n   Public Sub New(myName As String)\n      CustomerName = myName\n      CustomerOrders = New ArrayList()\n   End Sub &#39;New\nEnd Class &#39;Customer\n\n\nPublic Class Order\n   Public OrderID As String\n   \n   Public Sub New(myOrderID As String)\n      Me.OrderID = myOrderID\n   End Sub &#39;New\nEnd Class &#39;Order\n\nPrivate Sub FillTreeView()\n   &#39; Load the images in an ImageList.\n   Dim myImageList As New ImageList()\n   myImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;))\n   \n   &#39; Assign the ImageList to the TreeView.\n   myTreeView.ImageList = myImageList\n   \n   &#39; Set the TreeView control&#39;s default image and selected image indexes.\n   myTreeView.ImageIndex = 0\n   myTreeView.SelectedImageIndex = 1\n   \n   &#39; Set the index of image from the \n   &#39; ImageList for selected and unselected tree nodes.\n   Me.rootImageIndex = 2\n   Me.selectedCustomerImageIndex = 3\n   Me.unselectedCustomerImageIndex = 4\n   Me.selectedOrderImageIndex = 5\n   Me.unselectedOrderImageIndex = 6\n   \n   &#39; Create the root tree node.\n   Dim rootNode As New TreeNode(&quot;CustomerList&quot;)\n   rootNode.ImageIndex = rootImageIndex\n   rootNode.SelectedImageIndex = rootImageIndex\n   \n   &#39; Add a main root tree node.\n   myTreeView.Nodes.Add(rootNode)\n   \n   &#39; Add a root tree node for each Customer object in the ArrayList.\n   Dim myCustomer As Customer\n   For Each myCustomer In  customerArray\n      &#39; Add a child tree node for each Order object.\n      Dim countIndex As Integer = 0\n      Dim myTreeNodeArray(myCustomer.CustomerOrders.Count) As TreeNode\n      Dim myOrder As Order\n      For Each myOrder In  myCustomer.CustomerOrders\n         &#39; Add the Order tree node to the array.\n         myTreeNodeArray(countIndex) = New TreeNode(myOrder.OrderID, _\n            unselectedOrderImageIndex, selectedOrderImageIndex)\n         countIndex += 1\n      Next myOrder\n      &#39; Add the Customer tree node.\n      Dim customerNode As New TreeNode(myCustomer.CustomerName, _\n         unselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray)\n      myTreeView.Nodes(0).Nodes.Add(customerNode)\n   Next myCustomer\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_TreeNode#1\">ref class Customer\n{\npublic:\n   ArrayList^ CustomerOrders;\n   String^ CustomerName;\n   Customer( String^ myName )\n   {\n      CustomerName = myName;\n      CustomerOrders = gcnew ArrayList;\n   }\n\n};\n\nref class Order\n{\npublic:\n   String^ OrderID;\n   Order( String^ myOrderID )\n   {\n      this-&gt;OrderID = myOrderID;\n   }\n\n};\n\n   void FillTreeView()\n   {\n      \n      // Load the images in an ImageList.\n      ImageList^ myImageList = gcnew ImageList;\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Default.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedDefault.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Root.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedOrder.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedOrder.gif&quot; ) );\n      \n      // Assign the ImageList to the TreeView.\n      myTreeView-&gt;ImageList = myImageList;\n      \n      // Set the TreeView control&#39;s default image and selected image indexes.\n      myTreeView-&gt;ImageIndex = 0;\n      myTreeView-&gt;SelectedImageIndex = 1;\n      \n      /* Set the index of image from the\n        ImageList for selected and unselected tree nodes.*/\n      this-&gt;rootImageIndex = 2;\n      this-&gt;selectedCustomerImageIndex = 3;\n      this-&gt;unselectedCustomerImageIndex = 4;\n      this-&gt;selectedOrderImageIndex = 5;\n      this-&gt;unselectedOrderImageIndex = 6;\n      \n      // Create the root tree node.\n      TreeNode^ rootNode = gcnew TreeNode( &quot;CustomerList&quot; );\n      rootNode-&gt;ImageIndex = rootImageIndex;\n      rootNode-&gt;SelectedImageIndex = rootImageIndex;\n      \n      // Add a main root tree node.\n      myTreeView-&gt;Nodes-&gt;Add( rootNode );\n      \n      // Add a root tree node for each Customer object in the ArrayList.\n      IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Customer^ myCustomer = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n         \n         // Add a child tree node for each Order object.\n         int countIndex = 0;\n         array&lt;TreeNode^&gt;^myTreeNodeArray = gcnew array&lt;TreeNode^&gt;(myCustomer-&gt;CustomerOrders-&gt;Count);\n         IEnumerator^ myEnum = myCustomer-&gt;CustomerOrders-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Order^ myOrder = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n            \n            // Add the Order tree node to the array.\n            myTreeNodeArray[ countIndex ] = gcnew TreeNode( myOrder-&gt;OrderID,unselectedOrderImageIndex,selectedOrderImageIndex );\n            countIndex++;\n         }\n         TreeNode^ customerNode = gcnew TreeNode( myCustomer-&gt;CustomerName,unselectedCustomerImageIndex,selectedCustomerImageIndex,myTreeNodeArray );\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Add( customerNode );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_TreeNode#1\">\npublic class Customer\n{\n   public ArrayList CustomerOrders;\n   public string CustomerName;\n   public Customer(string myName)\n   {\n      CustomerName = myName;\n      CustomerOrders = new ArrayList(); \n   }\n}\npublic class Order\n{\n   public string OrderID;\n   public Order(string myOrderID )\n   {\n      this.OrderID = myOrderID;\n   }\n}\n\nprivate void FillTreeView()\n{\n\t// Load the images in an ImageList.\n\tImageList myImageList = new ImageList();\n\tmyImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;));\n\t\n\t// Assign the ImageList to the TreeView.\n\tmyTreeView.ImageList = myImageList;\n\t\n\t// Set the TreeView control&#39;s default image and selected image indexes.\n\tmyTreeView.ImageIndex = 0;\n\tmyTreeView.SelectedImageIndex = 1;\n\n\t/* Set the index of image from the \n\tImageList for selected and unselected tree nodes.*/\n\tthis.rootImageIndex = 2;\n\tthis.selectedCustomerImageIndex = 3;\n\tthis.unselectedCustomerImageIndex = 4;\n\tthis.selectedOrderImageIndex = 5;\n\tthis.unselectedOrderImageIndex = 6;\n\t\n\t// Create the root tree node.\n\tTreeNode rootNode = new TreeNode(&quot;CustomerList&quot;);\n\trootNode.ImageIndex = rootImageIndex;\n\trootNode.SelectedImageIndex = rootImageIndex;\n      \n\t// Add a main root tree node.\n\tmyTreeView.Nodes.Add(rootNode);\n\n\t// Add a root tree node for each Customer object in the ArrayList.\n\tforeach(Customer myCustomer in customerArray)\n\t{\n\t\t// Add a child tree node for each Order object.\n\t\tint countIndex=0;\n\t\tTreeNode[] myTreeNodeArray = new TreeNode[myCustomer.CustomerOrders.Count];\n\t\tforeach(Order myOrder in myCustomer.CustomerOrders)\n\t\t{\n\t\t\t// Add the Order tree node to the array.\n\t\t\tmyTreeNodeArray[countIndex] = new TreeNode(myOrder.OrderID,\n\t\t\t  unselectedOrderImageIndex, selectedOrderImageIndex);\n\t\t\tcountIndex++;\n\t\t}\n\t\t// Add the Customer tree node.\n\t\tTreeNode customerNode = new TreeNode(myCustomer.CustomerName,\n\t\t\tunselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray);\n\t\tmyTreeView.Nodes[0].Nodes.Add(customerNode);\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_Indent\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_Indent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Indent</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the distance to indent each child tree node level.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Indent { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The distance, in pixels, to indent each child tree node level. The default value is 19.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The assigned value is less than 0 (see Remarks).  </p>\n<p> -or-  </p>\n<p> The assigned value is greater than 32,000.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting this property to a value of -1 does not throw an exception if the value has not yet been changed from its default. This is because the control uses a value of -1 as an internal default before the control handle has been created. This internal default value causes the wrapped control to return its own default value of 19.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates a customized <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. By inheriting the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> class, this custom version has all the functionality of a typical <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. Changing various property values in the constructor provides a unique appearance. Because the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowPlusMinus_\" data-linktype=\"relative-path\">ShowPlusMinus</a> property is set to false, the customized control also overrides the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_OnAfterSelect_\" data-linktype=\"relative-path\">OnAfterSelect</a> method so that nodes can be expanded and collapsed when they are clicked.  </p>\n<p> A control that is customized in this way can be used throughout an organization, making it easy to provide a consistent interface without requiring the control properties to be specified in each individual project.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewCustomization#2\">Public Class CustomizedTreeView\n    Inherits TreeView\n\n    Public Sub New()\n        &#39; Customize the TreeView control by setting various properties.\n        BackColor = System.Drawing.Color.CadetBlue\n        FullRowSelect = True\n        HotTracking = True\n        Indent = 34\n        ShowPlusMinus = False\n\n        &#39; The ShowLines property must be false for the FullRowSelect \n        &#39; property to work.\n        ShowLines = False\n    End Sub &#39;New\n\n\n    Protected Overrides Sub OnAfterSelect(ByVal e As TreeViewEventArgs)\n        &#39; Confirm that the user initiated the selection.\n        &#39; This prevents the first node from expanding when it is\n        &#39; automatically selected during the initialization of \n        &#39; the TreeView control.\n        If e.Action &lt;&gt; TreeViewAction.Unknown Then\n            If e.Node.IsExpanded Then\n                e.Node.Collapse()\n            Else\n                e.Node.Expand()\n            End If\n        End If\n\n        &#39; Remove the selection. This allows the same node to be\n        &#39; clicked twice in succession to toggle the expansion state.\n        SelectedNode = Nothing\n    End Sub &#39;OnAfterSelect\n\nEnd Class &#39;CustomizedTreeView \n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewCustomization#2\">public ref class CustomizedTreeView: public TreeView\n{\npublic:\n   CustomizedTreeView()\n   {\n\n      // Customize the TreeView control by setting various properties.\n      BackColor = System::Drawing::Color::CadetBlue;\n      FullRowSelect = true;\n      HotTracking = true;\n      Indent = 34;\n      ShowPlusMinus = false;\n\n      // The ShowLines property must be false for the FullRowSelect\n      // property to work.\n      ShowLines = false;\n   }\n\nprotected:\n   virtual void OnAfterSelect( TreeViewEventArgs^ e ) override\n   {\n      // Confirm that the user initiated the selection.\n      // This prevents the first node from expanding when it is\n      // automatically selected during the initialization of\n      // the TreeView control.\n      if ( e-&gt;Action != TreeViewAction::Unknown )\n      {\n         if ( e-&gt;Node-&gt;IsExpanded )\n         {\n            e-&gt;Node-&gt;Collapse();\n         }\n         else\n         {\n            e-&gt;Node-&gt;Expand();\n         }\n      }\n\n      \n      // Remove the selection. This allows the same node to be\n      // clicked twice in succession to toggle the expansion state.\n      SelectedNode = nullptr;\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewCustomization#2\">    public class CustomizedTreeView : TreeView\n    {\n        public CustomizedTreeView()\n        {\n            // Customize the TreeView control by setting various properties.\n            BackColor = System.Drawing.Color.CadetBlue;\n            FullRowSelect = true;\n            HotTracking = true;\n            Indent = 34;\n            ShowPlusMinus = false;\n\n            // The ShowLines property must be false for the FullRowSelect \n            // property to work.\n            ShowLines = false;\n        }\n\n        protected override void OnAfterSelect(TreeViewEventArgs e)\n        {\n            // Confirm that the user initiated the selection.\n            // This prevents the first node from expanding when it is\n            // automatically selected during the initialization of \n            // the TreeView control.\n            if (e.Action != TreeViewAction.Unknown)\n            {\n                if (e.Node.IsExpanded) \n                {\n                    e.Node.Collapse();\n                }\n                else \n                {\n                    e.Node.Expand();\n                }\n            }\n\n            // Remove the selection. This allows the same node to be\n            // clicked twice in succession to toggle the expansion state.\n            SelectedNode = null;\n        }\n\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_ItemHeight\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_ItemHeight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ItemHeight</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the height of each tree node in the tree view control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ItemHeight { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height, in pixels, of each tree node in the tree view.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The assigned value is less than one.  </p>\n<p> -or-  </p>\n<p> The assigned value is greater than the <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the item height is set to a value larger than the height of the tree view control, calling the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_EnsureVisible_\" data-linktype=\"relative-path\">EnsureVisible</a> method will have unexpected results.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example changes the size <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_NodeFont_\" data-linktype=\"relative-path\">NodeFont</a> to the specified size and adjusts the ItemHeight of the tree node&#39;s parent <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with a collection of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects, and a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a> that contains font sizes.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeNode_Bounds#2\">   private void Button1_Click(object sender,EventArgs e)\n   {\n      myTreeView.ItemHeight = 5;\n      myTreeView.SelectedNode.NodeFont = new Font(&quot;Arial&quot;,5);\n\n      // Get the font size from combobox.\n      string selectedString = myComboBox.SelectedItem.ToString();\n      int myNodeFontSize = Int32.Parse(selectedString);\n\n      // Set the font of root node.\n      myTreeView.SelectedNode.NodeFont = new Font(&quot;Arial&quot;,myNodeFontSize);\n      for(int i = 0; i &lt; myTreeView.Nodes[0].Nodes.Count; i++)\n      {\n         // Set the font of child nodes.\n         myTreeView.Nodes[0].Nodes[i].NodeFont =\n           new Font(&quot;Arial&quot;,myNodeFontSize);\n      }\n\n      // Get the bounds of the tree node.\n      Rectangle myRectangle = myTreeView.SelectedNode.Bounds;\n      int myNodeHeight = myRectangle.Height;\n      if(myNodeHeight &lt; myNodeFontSize)\n      {\n         myNodeHeight = myNodeFontSize;\n      }\n      myTreeView.ItemHeight = myNodeHeight + 4;\n   }\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_Bounds#2\">private:\n   void Button1_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      myTreeView-&gt;ItemHeight = 5;\n      myTreeView-&gt;SelectedNode-&gt;NodeFont = gcnew System::Drawing::Font( &quot;Arial&quot;,5 );\n      \n      // Get the font size from combobox.\n      String^ selectedString = myComboBox-&gt;SelectedItem-&gt;ToString();\n      int myNodeFontSize = Int32::Parse( selectedString );\n      \n      // Set the font of root node.\n      myTreeView-&gt;SelectedNode-&gt;NodeFont = gcnew System::Drawing::Font( &quot;Arial&quot;,(float)myNodeFontSize );\n      for ( int i = 0; i &lt; myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Count; i++ )\n      {\n         \n         // Set the font of child nodes.\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes[ i ]-&gt;NodeFont = gcnew System::Drawing::Font( &quot;Arial&quot;,(float)myNodeFontSize );\n\n      }\n      \n      // Get the bounds of the tree node.\n      Rectangle myRectangle = myTreeView-&gt;SelectedNode-&gt;Bounds;\n      int myNodeHeight = myRectangle.Height;\n      if ( myNodeHeight &lt; myNodeFontSize )\n      {\n         myNodeHeight = myNodeFontSize;\n      }\n\n      myTreeView-&gt;ItemHeight = myNodeHeight + 4;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_Bounds#2\">Private Sub Button1_Click(sender As Object, e As EventArgs)\n   myTreeView.ItemHeight = 5\n   myTreeView.SelectedNode.NodeFont = New Font(&quot;Arial&quot;, 5)\n\n   &#39; Get the font size from combobox.\n   Dim selectedString As String = myComboBox.SelectedItem.ToString()\n   Dim myNodeFontSize As Integer = Int32.Parse(selectedString)\n\n   &#39; Set the font of root node.\n   myTreeView.SelectedNode.NodeFont = New Font(&quot;Arial&quot;, myNodeFontSize)\n   Dim i As Integer\n   For  i = 0 To (myTreeView.Nodes(0).Nodes.Count) - 1\n      &#39; Set the font of child nodes.\n      myTreeView.Nodes(0).Nodes(i).NodeFont = New Font(&quot;Arial&quot;, _\n        myNodeFontSize)\n   Next i\n\n   &#39; Get the bounds of the tree node.\n   Dim myRectangle As Rectangle = myTreeView.SelectedNode.Bounds\n   Dim myNodeHeight As Integer = myRectangle.Height\n   If myNodeHeight &lt; myNodeFontSize Then\n      myNodeHeight = myNodeFontSize\n   End If\n   myTreeView.ItemHeight = myNodeHeight + 4\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_LabelEdit\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_LabelEdit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LabelEdit</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the label text of the tree nodes can be edited.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool LabelEdit { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the label text of the tree nodes can be edited; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_BeginEdit_\" data-linktype=\"relative-path\">BeginEdit</a> method works only if the LabelEdit property is <code>true</code>. If LabelEdit is <code>false</code> when you attempt to edit the label, an exception will be thrown and the tree node will not be put in to an editable state.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lets the user edit nonroot tree nodes by using a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a>. When the user right clicks the mouse, the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> at that position is determined and stored in a variable named <code>mySelectedNode</code>. If a nonroot tree node was selected, it is put into an editable state, which allows the user to edit the node label. After the user stops editing the tree node label, the new label text is evaluated and saved. For this example, several characters are considered not valid in the label text. If one of the invalid characters is in the label string, or the string is empty, the user is notified of the error and the label is returned to its previous text.  </p>\n<pre><code class=\"lang-cpp\" name=\"classic treenode.beginedit example#1\">   /* Get the tree node under the mouse pointer and \n      save it in the mySelectedNode variable. */\nprivate:\n   void treeView1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      mySelectedNode = treeView1-&gt;GetNodeAt( e-&gt;X, e-&gt;Y );\n   }\n\n   void menuItem1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      if ( mySelectedNode != nullptr &amp;&amp; mySelectedNode-&gt;Parent != nullptr )\n      {\n         treeView1-&gt;SelectedNode = mySelectedNode;\n         treeView1-&gt;LabelEdit = true;\n         if (  !mySelectedNode-&gt;IsEditing )\n         {\n            mySelectedNode-&gt;BeginEdit();\n         }\n      }\n      else\n      {\n         MessageBox::Show( String::Concat( &quot;No tree node selected or selected node is a root node.<br>&quot;,\n            &quot;Editing of root nodes is not allowed.&quot; ), &quot;Invalid selection&quot; );\n      }\n   }\n\n   void treeView1_AfterLabelEdit( Object^ /*sender*/,\n      System::Windows::Forms::NodeLabelEditEventArgs^ e )\n   {\n      if ( e-&gt;Label != nullptr )\n      {\n         if ( e-&gt;Label-&gt;Length &gt; 0 )\n         {\n            array&lt;Char&gt;^ temp0 = {&#39;@&#39;,&#39;.&#39;,&#39;,&#39;,&#39;!&#39;};\n            if ( e-&gt;Label-&gt;IndexOfAny( temp0 ) == -1 )\n            {\n               \n               // Stop editing without canceling the label change.\n               e-&gt;Node-&gt;EndEdit( false );\n            }\n            else\n            {\n               /* Cancel the label edit action, inform the user, and \n                  place the node in edit mode again. */\n               e-&gt;CancelEdit = true;\n               MessageBox::Show( String::Concat( &quot;Invalid tree node label.<br>&quot;,\n                  &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot; ),\n                  &quot;Node Label Edit&quot; );\n               e-&gt;Node-&gt;BeginEdit();\n            }\n         }\n         else\n         {\n            /* Cancel the label edit action, inform the user, and \n               place the node in edit mode again. */\n            e-&gt;CancelEdit = true;\n            MessageBox::Show( &quot;Invalid tree node label.<br>The label cannot be blank&quot;,\n               &quot;Node Label Edit&quot; );\n            e-&gt;Node-&gt;BeginEdit();\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"classic treenode.beginedit example#1\">/* Get the tree node under the mouse pointer and \n   save it in the mySelectedNode variable. */\nprivate void treeView1_MouseDown(object sender, \n  System.Windows.Forms.MouseEventArgs e)\n{\n   mySelectedNode = treeView1.GetNodeAt(e.X, e.Y);\n}\n\nprivate void menuItem1_Click(object sender, System.EventArgs e)\n{\n   if (mySelectedNode != null &amp;&amp; mySelectedNode.Parent != null)\n   {\n      treeView1.SelectedNode = mySelectedNode;\n      treeView1.LabelEdit = true;\n      if(!mySelectedNode.IsEditing)\n      {\n         mySelectedNode.BeginEdit();\n      }\n   }\n   else\n   {\n      MessageBox.Show(&quot;No tree node selected or selected node is a root node.<br>&quot; + \n         &quot;Editing of root nodes is not allowed.&quot;, &quot;Invalid selection&quot;);\n   }\n}\n\nprivate void treeView1_AfterLabelEdit(object sender, \n         System.Windows.Forms.NodeLabelEditEventArgs e)\n{\n   if (e.Label != null)\n   {\n     if(e.Label.Length &gt; 0)\n     {\n        if (e.Label.IndexOfAny(new char[]{&#39;@&#39;, &#39;.&#39;, &#39;,&#39;, &#39;!&#39;}) == -1)\n        {\n           // Stop editing without canceling the label change.\n           e.Node.EndEdit(false);\n        }\n        else\n        {\n           /* Cancel the label edit action, inform the user, and \n              place the node in edit mode again. */\n           e.CancelEdit = true;\n           MessageBox.Show(&quot;Invalid tree node label.<br>&quot; + \n              &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot;, \n              &quot;Node Label Edit&quot;);\n           e.Node.BeginEdit();\n        }\n     }\n     else\n     {\n        /* Cancel the label edit action, inform the user, and \n           place the node in edit mode again. */\n        e.CancelEdit = true;\n        MessageBox.Show(&quot;Invalid tree node label.<br>The label cannot be blank&quot;, \n           &quot;Node Label Edit&quot;);\n        e.Node.BeginEdit();\n     }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"classic treenode.beginedit example#1\">&#39; Get the tree node under the mouse pointer and\n&#39; save it in the mySelectedNode variable. \nPrivate Sub treeView1_MouseDown(sender As Object, _\n  e As System.Windows.Forms.MouseEventArgs)\n        \n   mySelectedNode = treeView1.GetNodeAt(e.X, e.Y)\nEnd Sub    \n    \nPrivate Sub menuItem1_Click(sender As Object, e As System.EventArgs)\n   If Not (mySelectedNode Is Nothing) And _\n     Not (mySelectedNode.Parent Is Nothing) Then\n      treeView1.SelectedNode = mySelectedNode\n      treeView1.LabelEdit = True\n      If Not mySelectedNode.IsEditing Then\n         mySelectedNode.BeginEdit()\n      End If\n   Else\n      MessageBox.Show(&quot;No tree node selected or selected node is a root node.&quot; &amp; _\n        Microsoft.VisualBasic.ControlChars.Cr &amp; _\n        &quot;Editing of root nodes is not allowed.&quot;, &quot;Invalid selection&quot;)\n   End If\nEnd Sub    \n    \nPrivate Sub treeView1_AfterLabelEdit(sender As Object, _\n  e As System.Windows.Forms.NodeLabelEditEventArgs)\n   If Not (e.Label Is Nothing) Then\n      If e.Label.Length &gt; 0 Then\n         If e.Label.IndexOfAny(New Char() {&quot;@&quot;c, &quot;.&quot;c, &quot;,&quot;c, &quot;!&quot;c}) = -1 Then\n            &#39; Stop editing without canceling the label change.\n            e.Node.EndEdit(False)\n         Else\n            &#39; Cancel the label edit action, inform the user, and\n            &#39; place the node in edit mode again. \n            e.CancelEdit = True\n            MessageBox.Show(&quot;Invalid tree node label.&quot; &amp; _\n              Microsoft.VisualBasic.ControlChars.Cr &amp; _\n              &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot;, _\n              &quot;Node Label Edit&quot;)\n            e.Node.BeginEdit()\n         End If\n      Else\n         &#39; Cancel the label edit action, inform the user, and\n         &#39; place the node in edit mode again. \n         e.CancelEdit = True\n         MessageBox.Show(&quot;Invalid tree node label.&quot; &amp; _\n           Microsoft.VisualBasic.ControlChars.Cr &amp; _\n           &quot;The label cannot be blank&quot;, &quot;Node Label Edit&quot;)\n           e.Node.BeginEdit()\n      End If\n   End If\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_LineColor\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_LineColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LineColor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the color of the lines connecting the nodes of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Drawing.Color LineColor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a> of the lines connecting the tree nodes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates setting the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> line color. To run this example, paste the code into a Windows Form. Call <code>InitializeLineTreeView</code> from the form&#39;s constructor or <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Load\" data-linktype=\"relative-path\">Load</a> event handler.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#2\">private:\n    TreeView^ lineTreeView;\n\npublic:\n    void InitializeLineTreeView()\n    {\n        lineTreeView = gcnew TreeView();\n        lineTreeView-&gt;Size = System::Drawing::Size(200, 200);\n\n        lineTreeView-&gt;LineColor = Color::Red;\n\n        // Create the root nodes.\n        TreeNode^ docNode = gcnew TreeNode(&quot;Documents&quot;);\n\n        // Add some additional nodes.\n        docNode-&gt;Nodes-&gt;Add(&quot;phoneList.doc&quot;);\n        docNode-&gt;Nodes-&gt;Add(&quot;resume.doc&quot;);\n\n        lineTreeView-&gt;Nodes-&gt;Add(docNode);\n        this-&gt;Controls-&gt;Add(lineTreeView);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#2\">    private TreeView lineTreeView;\n    public void InitializeLineTreeView()\n    {\n        lineTreeView = new TreeView();\n        lineTreeView.Size = new Size(200, 200);\n\n        lineTreeView.LineColor = Color.Red;\n\n        // Create the root nodes.\n        TreeNode docNode = new TreeNode(&quot;Documents&quot;);\n       \n        // Add some additional nodes.\n        docNode.Nodes.Add(&quot;phoneList.doc&quot;);\n        docNode.Nodes.Add(&quot;resume.doc&quot;);\n        \n        lineTreeView.Nodes.Add(docNode);\n        Controls.Add(lineTreeView);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#2\">    Private lineTreeView As TreeView\n    \n    Public Sub InitializeLineTreeView() \n        lineTreeView = New TreeView()\n        lineTreeView.Size = New Size(200, 200)\n        \n        lineTreeView.LineColor = Color.Red\n        \n        &#39; Create the root nodes.\n        Dim docNode As New TreeNode(&quot;Documents&quot;)\n        \n        &#39; Add some additional nodes.\n        docNode.Nodes.Add(&quot;phoneList.doc&quot;)\n        docNode.Nodes.Add(&quot;resume.doc&quot;)\n        \n        lineTreeView.Nodes.Add(docNode)\n        Controls.Add(lineTreeView)\n    \n    End Sub\n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_Nodes\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_Nodes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Nodes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of tree nodes that are assigned to the tree view control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNodeCollection Nodes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that represents the tree nodes assigned to the tree view control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Nodes property holds a collection of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects, each of which has a <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Nodes_\" data-linktype=\"relative-path\">Nodes</a> property that can contain its own <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a>. This nesting of tree nodes can make it difficult to navigate a tree structure, but the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_FullPath_\" data-linktype=\"relative-path\">FullPath</a> property makes it easier to determine your location within the tree structure.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays customer information in a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is suppressed by using the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeginUpdate_\" data-linktype=\"relative-path\">BeginUpdate</a> and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_EndUpdate_\" data-linktype=\"relative-path\">EndUpdate</a> methods, and a wait <a class=\"xref\" href=\"system.windows.forms.cursor\" data-linktype=\"relative-path\">Cursor</a> is displayed while the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> creates and paints the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. This example requires that you have a <code>Customer</code> object that can hold a collection of <code>Order</code> objects. It also requires that you have created an instance of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeView#1\">      Public Class Customer\n         Inherits [Object]\n         Private custName As String = &quot;&quot;\n         Friend custOrders As New ArrayList()\n\n         Public Sub New(ByVal customername As String)\n            Me.custName = customername\n         End Sub\n\n         Public Property CustomerName() As String\n            Get\n               Return Me.custName\n            End Get\n            Set(ByVal Value As String)\n               Me.custName = Value\n            End Set\n         End Property\n\n         Public ReadOnly Property CustomerOrders() As ArrayList\n            Get\n               Return Me.custOrders\n            End Get\n         End Property\n      End Class &#39;End Customer class\n\n\n      Public Class Order\n         Inherits [Object]\n         Private ordID As String\n\n         Public Sub New(ByVal orderid As String)\n            Me.ordID = orderid\n         End Sub &#39;New\n\n         Public Property OrderID() As String\n            Get\n               Return Me.ordID\n            End Get\n            Set(ByVal Value As String)\n               Me.ordID = Value\n            End Set\n         End Property\n      End Class &#39; End Order class\n\n      &#39; Create a new ArrayList to hold the Customer objects.\n      Private customerArray As New ArrayList()\n\n      Private Sub FillMyTreeView()\n         &#39; Add customers to the ArrayList of Customer objects.\n         Dim x As Integer\n         For x = 0 To 999\n            customerArray.Add(New Customer(&quot;Customer&quot; + x.ToString()))\n         Next x\n\n         &#39; Add orders to each Customer object in the ArrayList.\n         Dim customer1 As Customer\n         For Each customer1 In customerArray\n            Dim y As Integer\n            For y = 0 To 14\n               customer1.CustomerOrders.Add(New Order(&quot;Order&quot; + y.ToString()))\n            Next y\n         Next customer1\n\n         &#39; Display a wait cursor while the TreeNodes are being created.\n         Cursor.Current = New Cursor(&quot;MyWait.cur&quot;)\n\n         &#39; Suppress repainting the TreeView until all the objects have been created.\n         treeView1.BeginUpdate()\n\n         &#39; Clear the TreeView each time the method is called.\n         treeView1.Nodes.Clear()\n\n         &#39; Add a root TreeNode for each Customer object in the ArrayList.\n         Dim customer2 As Customer\n         For Each customer2 In customerArray\n            treeView1.Nodes.Add(New TreeNode(customer2.CustomerName))\n\n            &#39; Add a child TreeNode for each Order object in the current Customer object.\n            Dim order1 As Order\n            For Each order1 In customer2.CustomerOrders\n               treeView1.Nodes(customerArray.IndexOf(customer2)).Nodes.Add( _\n          New TreeNode(customer2.CustomerName + &quot;.&quot; + order1.OrderID))\n            Next order1\n         Next customer2\n\n         &#39; Reset the cursor to the default for all controls.\n         Cursor.Current = System.Windows.Forms.Cursors.Default\n\n         &#39; Begin repainting the TreeView.\n         treeView1.EndUpdate()\n      End Sub &#39;FillMyTreeView\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeView#1\">\n// The basic Customer class.\npublic class Customer : System.Object\n{\n   private string custName = &quot;&quot;;\n   protected ArrayList custOrders = new ArrayList();\n\n   public Customer(string customername)\n   {\n      this.custName = customername;\n   }\n\n   public string CustomerName\n   {      \n      get{return this.custName;}\n      set{this.custName = value;}\n   }\n\n   public ArrayList CustomerOrders \n   {\n      get{return this.custOrders;}\n   }\n\n} // End Customer class \n\n\n// The basic customer Order class.\npublic class Order : System.Object\n{\n   private string ordID = &quot;&quot;;\n\n   public Order(string orderid)\n   {\n      this.ordID = orderid;\n   }\n\n   public string OrderID\n   {      \n      get{return this.ordID;}\n      set{this.ordID = value;}\n   }\n\n} // End Order class\n\n// Create a new ArrayList to hold the Customer objects.\nprivate ArrayList customerArray = new ArrayList(); \n\nprivate void FillMyTreeView()\n{\n   // Add customers to the ArrayList of Customer objects.\n   for(int x=0; x&lt;1000; x++)\n   {\n      customerArray.Add(new Customer(&quot;Customer&quot; + x.ToString()));\n   }\n\n   // Add orders to each Customer object in the ArrayList.\n   foreach(Customer customer1 in customerArray)\n   {\n      for(int y=0; y&lt;15; y++)\n      {\n         customer1.CustomerOrders.Add(new Order(&quot;Order&quot; + y.ToString()));    \n      }\n   }\n\n   // Display a wait cursor while the TreeNodes are being created.\n   Cursor.Current = new Cursor(&quot;MyWait.cur&quot;);\n        \n   // Suppress repainting the TreeView until all the objects have been created.\n   treeView1.BeginUpdate();\n\n   // Clear the TreeView each time the method is called.\n   treeView1.Nodes.Clear();\n\n   // Add a root TreeNode for each Customer object in the ArrayList.\n   foreach(Customer customer2 in customerArray)\n   {\n      treeView1.Nodes.Add(new TreeNode(customer2.CustomerName));\n          \n      // Add a child treenode for each Order object in the current Customer object.\n      foreach(Order order1 in customer2.CustomerOrders)\n      {\n         treeView1.Nodes[customerArray.IndexOf(customer2)].Nodes.Add(\n           new TreeNode(customer2.CustomerName + &quot;.&quot; + order1.OrderID));\n      }\n   }\n\n   // Reset the cursor to the default for all controls.\n   Cursor.Current = Cursors.Default;\n\n   // Begin repainting the TreeView.\n   treeView1.EndUpdate();\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeView#1\">      // The basic Customer class.\n      ref class Customer: public System::Object\n      {\n      private:\n         String^ custName;\n\n      protected:\n         ArrayList^ custOrders;\n\n      public:\n         Customer( String^ customername )\n         {\n            custName = &quot;&quot;;\n            custOrders = gcnew ArrayList;\n            this-&gt;custName = customername;\n         }\n\n\n         property String^ CustomerName \n         {\n            String^ get()\n            {\n               return this-&gt;custName;\n            }\n\n            void set( String^ value )\n            {\n               this-&gt;custName = value;\n            }\n\n         }\n\n         property ArrayList^ CustomerOrders \n         {\n            ArrayList^ get()\n            {\n               return this-&gt;custOrders;\n            }\n\n         }\n\n      };\n\n\n      // End Customer class\n      // The basic customer Order class.\n      ref class Order: public System::Object\n      {\n      private:\n         String^ ordID;\n\n      public:\n         Order( String^ orderid )\n         {\n            ordID = &quot;&quot;;\n            this-&gt;ordID = orderid;\n         }\n\n\n         property String^ OrderID \n         {\n            String^ get()\n            {\n               return this-&gt;ordID;\n            }\n\n            void set( String^ value )\n            {\n               this-&gt;ordID = value;\n            }\n\n         }\n\n      };\n      // End Order class\n\n\n\n      void FillMyTreeView()\n      {\n         // Add customers to the ArrayList of Customer objects.\n         for ( int x = 0; x &lt; 1000; x++ )\n         {\n            customerArray-&gt;Add( gcnew Customer( &quot;Customer &quot; + x ) );\n         }\n         \n         // Add orders to each Customer object in the ArrayList.\n         IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Customer^ customer1 = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n            for ( int y = 0; y &lt; 15; y++ )\n            {\n               customer1-&gt;CustomerOrders-&gt;Add( gcnew Order( &quot;Order &quot; + y ) );\n            }\n         }\n\n         // Display a wait cursor while the TreeNodes are being created.\n         ::Cursor::Current = gcnew System::Windows::Forms::Cursor( &quot;MyWait.cur&quot; );\n         \n         // Suppress repainting the TreeView until all the objects have been created.\n         treeView1-&gt;BeginUpdate();\n         \n         // Clear the TreeView each time the method is called.\n         treeView1-&gt;Nodes-&gt;Clear();\n         \n         // Add a root TreeNode for each Customer object in the ArrayList.\n         myEnum = customerArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Customer^ customer2 = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n            treeView1-&gt;Nodes-&gt;Add( gcnew TreeNode( customer2-&gt;CustomerName ) );\n            \n            // Add a child treenode for each Order object in the current Customer object.\n            IEnumerator^ myEnum = customer2-&gt;CustomerOrders-&gt;GetEnumerator();\n            while ( myEnum-&gt;MoveNext() )\n            {\n               Order^ order1 = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n               treeView1-&gt;Nodes[ customerArray-&gt;IndexOf( customer2 ) ]-&gt;Nodes-&gt;Add( gcnew TreeNode( customer2-&gt;CustomerName + &quot;.&quot; + order1-&gt;OrderID ) );\n            }\n         }\n         \n         // Reset the cursor to the default for all controls.\n         ::Cursor::Current = Cursors::Default;\n         \n         // Begin repainting the TreeView.\n         treeView1-&gt;EndUpdate();\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_Padding\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_Padding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Padding</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the spacing between the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control&#39;s contents and its edges.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.Padding Padding { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.padding\" data-linktype=\"relative-path\">Padding</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.padding\" data-linktype=\"relative-path\">Padding</a> indicating the space between the control edges and its contents.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_PathSeparator\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_PathSeparator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PathSeparator</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the delimiter string that the tree node path uses.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string PathSeparator { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The delimiter string that the tree node <span class=\"xref\">stem.Windows.Forms.TreeNode.FullPath*</span> property uses. The default is the backslash character (\\).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The tree node path consists of a set of tree node labels separated by the PathSeparator delimiter strings. The labels range from the root tree node to the tree node that you want.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the PathSeparator property of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> and displays the number of child tree nodes that is contained in the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> of the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedNode_\" data-linktype=\"relative-path\">SelectedNode</a>. The percentage of child tree node to total tree nodes in the tree view control is also displayed. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>, and a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that has several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects (preferably with three or more levels).  </p>\n<pre><code class=\"lang-cpp\" name=\"TreeNode_ForeColor#2\">   void myButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      \n      // Set the tree view&#39;s PathSeparator property.\n      myTreeView-&gt;PathSeparator = &quot;.&quot;;\n      \n      // Get the count of the child tree nodes contained in the SelectedNode.\n      int myNodeCount = myTreeView-&gt;SelectedNode-&gt;GetNodeCount( true );\n      Decimal myChildPercentage = ((Decimal)myNodeCount / (Decimal)myTreeView-&gt;GetNodeCount( true )) * 100;\n      \n      // Display the tree node path and the number of child nodes it and the tree view have.\n      MessageBox::Show( String::Concat( &quot;The &#39;&quot;, myTreeView-&gt;SelectedNode-&gt;FullPath, &quot;&#39; node has &quot;, myNodeCount, &quot; child nodes.<br>That is &quot;, String::Format( &quot;{0:###.##}&quot;, myChildPercentage ), &quot;% of the total tree nodes in the tree view control.&quot; ) );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_ForeColor#2\">private void myButton_Click(object sender, System.EventArgs e)\n{\n   // Set the tree view&#39;s PathSeparator property.\n   myTreeView.PathSeparator = &quot;.&quot;;\n\n   // Get the count of the child tree nodes contained in the SelectedNode.\n   int myNodeCount = myTreeView.SelectedNode.GetNodeCount(true);\n   decimal myChildPercentage = ((decimal)myNodeCount/\n     (decimal)myTreeView.GetNodeCount(true)) * 100;\n\n   // Display the tree node path and the number of child nodes it and the tree view have.\n   MessageBox.Show(&quot;The &#39;&quot; + myTreeView.SelectedNode.FullPath + &quot;&#39; node has &quot; \n     + myNodeCount.ToString() + &quot; child nodes.<br>That is &quot; \n     + string.Format(&quot;{0:###.##}&quot;, myChildPercentage) \n     + &quot;% of the total tree nodes in the tree view control.&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_ForeColor#2\">Private Sub myButton_Click(ByVal sender As Object, _\n  ByVal e As System.EventArgs) Handles myButton.Click\n   &#39; Set the tree view&#39;s PathSeparator property.\n   myTreeView.PathSeparator = &quot;.&quot;\n\n   &#39; Get the count of the child tree nodes contained in the SelectedNode.\n   Dim myNodeCount As Integer = myTreeView.SelectedNode.GetNodeCount(True)\n   Dim myChildPercentage As Decimal = CDec(myNodeCount) / _\n      CDec(myTreeView.GetNodeCount(True)) * 100\n\n   &#39; Display the tree node path and the number of child nodes it and the tree view have.\n   MessageBox.Show((&quot;The &#39;&quot; + myTreeView.SelectedNode.FullPath + &quot;&#39; node has &quot; _\n      + myNodeCount.ToString() + &quot; child nodes.&quot; + Microsoft.VisualBasic.ControlChars.Lf _\n      + &quot;That is &quot; + String.Format(&quot;{0:###.##}&quot;, myChildPercentage) _\n      + &quot;% of the total tree nodes in the tree view control.&quot;))\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_RightToLeftLayout\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_RightToLeftLayout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RightToLeftLayout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> should be laid out from right-to-left.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool RightToLeftLayout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the control should be laid out from right-to-left; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The RightToLeftLayout property is for use with international applications where the language is read from right-to-left. If you set RightToLeftLayout and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RightToLeft_\" data-linktype=\"relative-path\">RightToLeft</a> to <code>true</code> the control&#39;s contents and text will be laid out from right-to-left.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_Scrollable\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_Scrollable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Scrollable</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the tree view control displays scroll bars when they are needed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Scrollable { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the tree view control displays scroll bars when they are needed; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this property is set to <code>true</code>, scroll bars are displayed on the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> when any <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is located outside the control&#39;s client region.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When setting the Scrollable property at run time, the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> handle is recreated (see <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RecreateHandle_\" data-linktype=\"relative-path\">RecreateHandle</a>) to update the control&#39;s appearance. This causes all tree nodes to be collapsed, with the exception of the selected <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.borderstyle\" data-linktype=\"relative-path\">BorderStyle</a> enumeration and the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BorderStyle_\" data-linktype=\"relative-path\">BorderStyle</a>, <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowLines_\" data-linktype=\"relative-path\">ShowLines</a>, Scrollable, <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_HideSelection_\" data-linktype=\"relative-path\">HideSelection</a> and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowRootLines_\" data-linktype=\"relative-path\">ShowRootLines</a> properties. To run this example, paste the following code in a form and call the <code>InitializeTreeView</code> method in the form&#39;s constructor or <code>Load</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewExample#1\">   // Declare the TreeView control.\ninternal:\n   System::Windows::Forms::TreeView^ TreeView1;\n\nprivate:\n   // Initialize the TreeView to blend with the form, giving it the \n   // same color as the form and no border.\n   void InitializeTreeView()\n   {\n      // Create a new TreeView control and set the location and size.\n      this-&gt;TreeView1 = gcnew System::Windows::Forms::TreeView;\n      this-&gt;TreeView1-&gt;Location = System::Drawing::Point( 72, 48 );\n      this-&gt;TreeView1-&gt;Size = System::Drawing::Size( 200, 200 );\n\n      // Set the BorderStyle property to none, the BackColor property to  \n      // the form&#39;s backcolor, and the Scrollable property to false.  \n      // This allows the TreeView to blend in form.\n      this-&gt;TreeView1-&gt;BorderStyle = BorderStyle::None;\n      this-&gt;TreeView1-&gt;BackColor = this-&gt;BackColor;\n      this-&gt;TreeView1-&gt;Scrollable = false;\n\n      // Set the HideSelection property to false to keep the \n      // selection highlighted when the user leaves the control. \n      // This helps it blend with form.\n      this-&gt;TreeView1-&gt;HideSelection = false;\n\n      // Set the ShowRootLines and ShowLines properties to false to \n      // give the TreeView a list-like appearance.\n      this-&gt;TreeView1-&gt;ShowRootLines = false;\n      this-&gt;TreeView1-&gt;ShowLines = false;\n\n      // Add the nodes.\n      array&lt;TreeNode^&gt;^temp0 = {gcnew TreeNode( &quot;Full Color&quot; ),gcnew TreeNode( &quot;Project Wizards&quot; ),gcnew TreeNode( &quot;Visual C# and Visual Basic Support&quot; )};\n      array&lt;TreeNode^&gt;^temp1 = {gcnew TreeNode( &quot;Pentium 133 MHz or faster processor &quot; ),gcnew TreeNode( &quot;Windows 98 or later&quot; ),gcnew TreeNode( &quot;100 MB Disk space&quot; )};\n      array&lt;TreeNode^&gt;^temp2 = {gcnew TreeNode( &quot;Features&quot;,temp0 ),gcnew TreeNode( &quot;System Requirements&quot;,temp1 )};\n      this-&gt;TreeView1-&gt;Nodes-&gt;AddRange( temp2 );\n\n      // Set the tab index and add the TreeView to the form.\n      this-&gt;TreeView1-&gt;TabIndex = 0;\n      this-&gt;Controls-&gt;Add( this-&gt;TreeView1 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewExample#1\">\n\t// Declare the TreeView control.\n\tinternal System.Windows.Forms.TreeView TreeView1;\n\n\t// Initialize the TreeView to blend with the form, giving it the \n\t// same color as the form and no border.\n\tprivate void InitializeTreeView()\n\t{\n\n\t\t// Create a new TreeView control and set the location and size.\n\t\tthis.TreeView1 = new System.Windows.Forms.TreeView();\n\t\tthis.TreeView1.Location = new System.Drawing.Point(72, 48);\n\t\tthis.TreeView1.Size = new System.Drawing.Size(200, 200);\n\n\t\t// Set the BorderStyle property to none, the BackColor property to  \n\t\t// the form&#39;s backcolor, and the Scrollable property to false.  \n\t\t// This allows the TreeView to blend in form.\n\n\t\tthis.TreeView1.BorderStyle = BorderStyle.None;\n\t\tthis.TreeView1.BackColor = this.BackColor;\n\t\tthis.TreeView1.Scrollable = false;\n\n\t\t// Set the HideSelection property to false to keep the \n\t\t// selection highlighted when the user leaves the control. \n\t\t// This helps it blend with form.\n\t\tthis.TreeView1.HideSelection = false;\n\n\t\t// Set the ShowRootLines and ShowLines properties to false to \n\t\t// give the TreeView a list-like appearance.\n\t\tthis.TreeView1.ShowRootLines = false;\n\t\tthis.TreeView1.ShowLines = false;\n\n\t\t// Add the nodes.\n\t\tthis.TreeView1.Nodes.AddRange(new TreeNode[]\n\t\t\t{new TreeNode(&quot;Features&quot;, \n\t\t\t\tnew TreeNode[]{\n\t\t\t\tnew TreeNode(&quot;Full Color&quot;), \n\t\t\t\tnew TreeNode(&quot;Project Wizards&quot;), \n\t\t\t\tnew TreeNode(&quot;Visual C# and Visual Basic Support&quot;)}), \n\t\t\t\tnew TreeNode(&quot;System Requirements&quot;, \n\t\t\t\tnew TreeNode[]{\n\t\t\t\t\tnew TreeNode(&quot;Pentium 133 MHz or faster processor &quot;),\n\t\t\t\t\tnew TreeNode(&quot;Windows 98 or later&quot;), \n\t\t\t\t\tnew TreeNode(&quot;100 MB Disk space&quot;)})\n\t\t\t});\n\n\t\t// Set the tab index and add the TreeView to the form.\n\t\tthis.TreeView1.TabIndex = 0;\n\t\tthis.Controls.Add(this.TreeView1);\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewExample#1\">\n    &#39; Declare the TreeView control.\n    Friend WithEvents TreeView1 As System.Windows.Forms.TreeView\n\n    &#39; Initialize the TreeView to blend with the form, giving it the \n    &#39; same color as the form and no border.\n    Private Sub InitializeTreeView()\n\n        &#39; Create a new TreeView control and set the location and size.\n        Me.TreeView1 = New System.Windows.Forms.TreeView\n        Me.TreeView1.Location = New System.Drawing.Point(72, 48)\n        Me.TreeView1.Size = New System.Drawing.Size(200, 200)\n\n        &#39; Set the BorderStyle property to none, the BackColor property to  \n        &#39; the form&#39;s backcolor, and the Scrollable property to false.  \n        &#39; This allows the TreeView to blend in form.\n        Me.TreeView1.BorderStyle = BorderStyle.None\n        Me.TreeView1.BackColor = Me.BackColor\n        Me.TreeView1.Scrollable = False\n\n        \n        &#39; Set the ShowRootLines and ShowLines properties to false to \n        &#39; give the TreeView a list-like appearance.\n        Me.TreeView1.ShowRootLines = False\n        Me.TreeView1.ShowLines = False\n\n        &#39; Add the nodes.\n        Me.TreeView1.Nodes.AddRange(New System.Windows.Forms.TreeNode() _\n            {New System.Windows.Forms.TreeNode(&quot;Features&quot;, _\n            New System.Windows.Forms.TreeNode() _\n            {New System.Windows.Forms.TreeNode(&quot;Full Color&quot;), _\n            New System.Windows.Forms.TreeNode(&quot;Project Wizards&quot;), _\n            New System.Windows.Forms.TreeNode(&quot;Visual C# and Visual Basic Support&quot;)}), _\n            New System.Windows.Forms.TreeNode(&quot;System Requirements&quot;, _\n            New System.Windows.Forms.TreeNode() _\n            {New System.Windows.Forms.TreeNode _\n            (&quot;Pentium 133 MHz or faster processor &quot;), _\n            New System.Windows.Forms.TreeNode(&quot;Windows 98 or later&quot;), _\n            New System.Windows.Forms.TreeNode(&quot;100 MB Disk space&quot;)})})\n\n        &#39; Set the tab index and add the TreeView to the form.\n        Me.TreeView1.TabIndex = 0\n        Me.Controls.Add(Me.TreeView1)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_SelectedImageIndex\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_SelectedImageIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedImageIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the image list index value of the image that is displayed when a tree node is selected.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int SelectedImageIndex { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A zero-based index value that represents the position of an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> in an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The index assigned value is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SelectedImageIndex value is the index of an <a class=\"xref\" href=\"system.drawing.image\" data-linktype=\"relative-path\">Image</a> stored in the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> assigned to the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ImageList_\" data-linktype=\"relative-path\">ImageList</a> property.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When setting the SelectedImageIndex property at run time, the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> handle is recreated (see <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_RecreateHandle_\" data-linktype=\"relative-path\">RecreateHandle</a>) to update the control&#39;s appearance. This causes all tree nodes to be collapsed, except for the selected <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates and assigns an <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> to a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control and fills the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. The tree nodes are assigned images from the <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> that are displayed when in a selected or unselected state. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that contains a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>, and an <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> that contains <code>Customer</code> objects that each contain <code>Order</code> objects. It is also assumed that the <code>Customer</code> and <code>Order</code> objects are defined.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeNode_TreeNode#1\">Public Class Customer\n   Public CustomerOrders As ArrayList\n   Public CustomerName As String\n   \n   Public Sub New(myName As String)\n      CustomerName = myName\n      CustomerOrders = New ArrayList()\n   End Sub &#39;New\nEnd Class &#39;Customer\n\n\nPublic Class Order\n   Public OrderID As String\n   \n   Public Sub New(myOrderID As String)\n      Me.OrderID = myOrderID\n   End Sub &#39;New\nEnd Class &#39;Order\n\nPrivate Sub FillTreeView()\n   &#39; Load the images in an ImageList.\n   Dim myImageList As New ImageList()\n   myImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;))\n   myImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;))\n   \n   &#39; Assign the ImageList to the TreeView.\n   myTreeView.ImageList = myImageList\n   \n   &#39; Set the TreeView control&#39;s default image and selected image indexes.\n   myTreeView.ImageIndex = 0\n   myTreeView.SelectedImageIndex = 1\n   \n   &#39; Set the index of image from the \n   &#39; ImageList for selected and unselected tree nodes.\n   Me.rootImageIndex = 2\n   Me.selectedCustomerImageIndex = 3\n   Me.unselectedCustomerImageIndex = 4\n   Me.selectedOrderImageIndex = 5\n   Me.unselectedOrderImageIndex = 6\n   \n   &#39; Create the root tree node.\n   Dim rootNode As New TreeNode(&quot;CustomerList&quot;)\n   rootNode.ImageIndex = rootImageIndex\n   rootNode.SelectedImageIndex = rootImageIndex\n   \n   &#39; Add a main root tree node.\n   myTreeView.Nodes.Add(rootNode)\n   \n   &#39; Add a root tree node for each Customer object in the ArrayList.\n   Dim myCustomer As Customer\n   For Each myCustomer In  customerArray\n      &#39; Add a child tree node for each Order object.\n      Dim countIndex As Integer = 0\n      Dim myTreeNodeArray(myCustomer.CustomerOrders.Count) As TreeNode\n      Dim myOrder As Order\n      For Each myOrder In  myCustomer.CustomerOrders\n         &#39; Add the Order tree node to the array.\n         myTreeNodeArray(countIndex) = New TreeNode(myOrder.OrderID, _\n            unselectedOrderImageIndex, selectedOrderImageIndex)\n         countIndex += 1\n      Next myOrder\n      &#39; Add the Customer tree node.\n      Dim customerNode As New TreeNode(myCustomer.CustomerName, _\n         unselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray)\n      myTreeView.Nodes(0).Nodes.Add(customerNode)\n   Next myCustomer\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeNode_TreeNode#1\">ref class Customer\n{\npublic:\n   ArrayList^ CustomerOrders;\n   String^ CustomerName;\n   Customer( String^ myName )\n   {\n      CustomerName = myName;\n      CustomerOrders = gcnew ArrayList;\n   }\n\n};\n\nref class Order\n{\npublic:\n   String^ OrderID;\n   Order( String^ myOrderID )\n   {\n      this-&gt;OrderID = myOrderID;\n   }\n\n};\n\n   void FillTreeView()\n   {\n      \n      // Load the images in an ImageList.\n      ImageList^ myImageList = gcnew ImageList;\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Default.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedDefault.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;Root.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedCustomer.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;UnselectedOrder.gif&quot; ) );\n      myImageList-&gt;Images-&gt;Add( Image::FromFile( &quot;SelectedOrder.gif&quot; ) );\n      \n      // Assign the ImageList to the TreeView.\n      myTreeView-&gt;ImageList = myImageList;\n      \n      // Set the TreeView control&#39;s default image and selected image indexes.\n      myTreeView-&gt;ImageIndex = 0;\n      myTreeView-&gt;SelectedImageIndex = 1;\n      \n      /* Set the index of image from the\n        ImageList for selected and unselected tree nodes.*/\n      this-&gt;rootImageIndex = 2;\n      this-&gt;selectedCustomerImageIndex = 3;\n      this-&gt;unselectedCustomerImageIndex = 4;\n      this-&gt;selectedOrderImageIndex = 5;\n      this-&gt;unselectedOrderImageIndex = 6;\n      \n      // Create the root tree node.\n      TreeNode^ rootNode = gcnew TreeNode( &quot;CustomerList&quot; );\n      rootNode-&gt;ImageIndex = rootImageIndex;\n      rootNode-&gt;SelectedImageIndex = rootImageIndex;\n      \n      // Add a main root tree node.\n      myTreeView-&gt;Nodes-&gt;Add( rootNode );\n      \n      // Add a root tree node for each Customer object in the ArrayList.\n      IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Customer^ myCustomer = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n         \n         // Add a child tree node for each Order object.\n         int countIndex = 0;\n         array&lt;TreeNode^&gt;^myTreeNodeArray = gcnew array&lt;TreeNode^&gt;(myCustomer-&gt;CustomerOrders-&gt;Count);\n         IEnumerator^ myEnum = myCustomer-&gt;CustomerOrders-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Order^ myOrder = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n            \n            // Add the Order tree node to the array.\n            myTreeNodeArray[ countIndex ] = gcnew TreeNode( myOrder-&gt;OrderID,unselectedOrderImageIndex,selectedOrderImageIndex );\n            countIndex++;\n         }\n         TreeNode^ customerNode = gcnew TreeNode( myCustomer-&gt;CustomerName,unselectedCustomerImageIndex,selectedCustomerImageIndex,myTreeNodeArray );\n         myTreeView-&gt;Nodes[ 0 ]-&gt;Nodes-&gt;Add( customerNode );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_TreeNode#1\">\npublic class Customer\n{\n   public ArrayList CustomerOrders;\n   public string CustomerName;\n   public Customer(string myName)\n   {\n      CustomerName = myName;\n      CustomerOrders = new ArrayList(); \n   }\n}\npublic class Order\n{\n   public string OrderID;\n   public Order(string myOrderID )\n   {\n      this.OrderID = myOrderID;\n   }\n}\n\nprivate void FillTreeView()\n{\n\t// Load the images in an ImageList.\n\tImageList myImageList = new ImageList();\n\tmyImageList.Images.Add(Image.FromFile(&quot;Default.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedDefault.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;Root.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedCustomer.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;UnselectedOrder.gif&quot;));\n\tmyImageList.Images.Add(Image.FromFile(&quot;SelectedOrder.gif&quot;));\n\t\n\t// Assign the ImageList to the TreeView.\n\tmyTreeView.ImageList = myImageList;\n\t\n\t// Set the TreeView control&#39;s default image and selected image indexes.\n\tmyTreeView.ImageIndex = 0;\n\tmyTreeView.SelectedImageIndex = 1;\n\n\t/* Set the index of image from the \n\tImageList for selected and unselected tree nodes.*/\n\tthis.rootImageIndex = 2;\n\tthis.selectedCustomerImageIndex = 3;\n\tthis.unselectedCustomerImageIndex = 4;\n\tthis.selectedOrderImageIndex = 5;\n\tthis.unselectedOrderImageIndex = 6;\n\t\n\t// Create the root tree node.\n\tTreeNode rootNode = new TreeNode(&quot;CustomerList&quot;);\n\trootNode.ImageIndex = rootImageIndex;\n\trootNode.SelectedImageIndex = rootImageIndex;\n      \n\t// Add a main root tree node.\n\tmyTreeView.Nodes.Add(rootNode);\n\n\t// Add a root tree node for each Customer object in the ArrayList.\n\tforeach(Customer myCustomer in customerArray)\n\t{\n\t\t// Add a child tree node for each Order object.\n\t\tint countIndex=0;\n\t\tTreeNode[] myTreeNodeArray = new TreeNode[myCustomer.CustomerOrders.Count];\n\t\tforeach(Order myOrder in myCustomer.CustomerOrders)\n\t\t{\n\t\t\t// Add the Order tree node to the array.\n\t\t\tmyTreeNodeArray[countIndex] = new TreeNode(myOrder.OrderID,\n\t\t\t  unselectedOrderImageIndex, selectedOrderImageIndex);\n\t\t\tcountIndex++;\n\t\t}\n\t\t// Add the Customer tree node.\n\t\tTreeNode customerNode = new TreeNode(myCustomer.CustomerName,\n\t\t\tunselectedCustomerImageIndex, selectedCustomerImageIndex, myTreeNodeArray);\n\t\tmyTreeView.Nodes[0].Nodes.Add(customerNode);\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_SelectedImageKey\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_SelectedImageKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedImageKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the key of the default image shown when a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is in a selected state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string SelectedImageKey { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The key of the default image shown when a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is in a selected state.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> does not have a selected image set, the image specified by the SelectedImageKey property will be shown when the node is not selected.  </p>\n<p> The SelectedImageKey and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> properties are mutually exclusive; if one is set, the other is ignored. If you set the SelectedImageKey property, the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> property is automatically set to -1. Alternatively, if you set the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedImageIndex_\" data-linktype=\"relative-path\">SelectedImageIndex</a> property, the SelectedImageKey is automatically set to an empty string (&quot;&quot;).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_SelectedNode\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_SelectedNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectedNode</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the tree node that is currently selected in the tree view control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNode SelectedNode { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that is currently selected in the tree view control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If no <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> is currently selected, the SelectedNode property is <code>null</code>.  </p>\n<p> When you set this property, the specified node is scrolled into view and any parent nodes are expanded so that the specified node is visible.  </p>\n<p> When the parent node or any ancestor node of the selected node is collapsed either programmatically or through user action, the collapsed node becomes the selected node.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_PathSeparator_\" data-linktype=\"relative-path\">PathSeparator</a> property of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> and displays the number of child tree nodes that is contained in the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> of the SelectedNode. The percentage of child tree node to total tree nodes in the tree view control is also displayed. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>, and a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that has several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects (preferably with three or more levels).  </p>\n<pre><code class=\"lang-cpp\" name=\"TreeNode_ForeColor#2\">   void myButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      \n      // Set the tree view&#39;s PathSeparator property.\n      myTreeView-&gt;PathSeparator = &quot;.&quot;;\n      \n      // Get the count of the child tree nodes contained in the SelectedNode.\n      int myNodeCount = myTreeView-&gt;SelectedNode-&gt;GetNodeCount( true );\n      Decimal myChildPercentage = ((Decimal)myNodeCount / (Decimal)myTreeView-&gt;GetNodeCount( true )) * 100;\n      \n      // Display the tree node path and the number of child nodes it and the tree view have.\n      MessageBox::Show( String::Concat( &quot;The &#39;&quot;, myTreeView-&gt;SelectedNode-&gt;FullPath, &quot;&#39; node has &quot;, myNodeCount, &quot; child nodes.<br>That is &quot;, String::Format( &quot;{0:###.##}&quot;, myChildPercentage ), &quot;% of the total tree nodes in the tree view control.&quot; ) );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_ForeColor#2\">private void myButton_Click(object sender, System.EventArgs e)\n{\n   // Set the tree view&#39;s PathSeparator property.\n   myTreeView.PathSeparator = &quot;.&quot;;\n\n   // Get the count of the child tree nodes contained in the SelectedNode.\n   int myNodeCount = myTreeView.SelectedNode.GetNodeCount(true);\n   decimal myChildPercentage = ((decimal)myNodeCount/\n     (decimal)myTreeView.GetNodeCount(true)) * 100;\n\n   // Display the tree node path and the number of child nodes it and the tree view have.\n   MessageBox.Show(&quot;The &#39;&quot; + myTreeView.SelectedNode.FullPath + &quot;&#39; node has &quot; \n     + myNodeCount.ToString() + &quot; child nodes.<br>That is &quot; \n     + string.Format(&quot;{0:###.##}&quot;, myChildPercentage) \n     + &quot;% of the total tree nodes in the tree view control.&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_ForeColor#2\">Private Sub myButton_Click(ByVal sender As Object, _\n  ByVal e As System.EventArgs) Handles myButton.Click\n   &#39; Set the tree view&#39;s PathSeparator property.\n   myTreeView.PathSeparator = &quot;.&quot;\n\n   &#39; Get the count of the child tree nodes contained in the SelectedNode.\n   Dim myNodeCount As Integer = myTreeView.SelectedNode.GetNodeCount(True)\n   Dim myChildPercentage As Decimal = CDec(myNodeCount) / _\n      CDec(myTreeView.GetNodeCount(True)) * 100\n\n   &#39; Display the tree node path and the number of child nodes it and the tree view have.\n   MessageBox.Show((&quot;The &#39;&quot; + myTreeView.SelectedNode.FullPath + &quot;&#39; node has &quot; _\n      + myNodeCount.ToString() + &quot; child nodes.&quot; + Microsoft.VisualBasic.ControlChars.Lf _\n      + &quot;That is &quot; + String.Format(&quot;{0:###.##}&quot;, myChildPercentage) _\n      + &quot;% of the total tree nodes in the tree view control.&quot;))\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_ShowLines\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_ShowLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShowLines</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether lines are drawn between tree nodes in the tree view control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ShowLines { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if lines are drawn between tree nodes in the tree view control; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If ShowLines is set to <code>true</code>, the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_FullRowSelect_\" data-linktype=\"relative-path\">FullRowSelect</a> property is ignored.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates a customized <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. By inheriting the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> class, this custom version has all the functionality of a typical <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. Changing various property values in the constructor provides a unique appearance. Because the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowPlusMinus_\" data-linktype=\"relative-path\">ShowPlusMinus</a> property is set to false, the customized control also overrides the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_OnAfterSelect_\" data-linktype=\"relative-path\">OnAfterSelect</a> method so that nodes can be expanded and collapsed when they are clicked.  </p>\n<p> A control that is customized in this way can be used throughout an organization, making it easy to provide a consistent interface without requiring the control properties to be specified in each individual project.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewCustomization#2\">Public Class CustomizedTreeView\n    Inherits TreeView\n\n    Public Sub New()\n        &#39; Customize the TreeView control by setting various properties.\n        BackColor = System.Drawing.Color.CadetBlue\n        FullRowSelect = True\n        HotTracking = True\n        Indent = 34\n        ShowPlusMinus = False\n\n        &#39; The ShowLines property must be false for the FullRowSelect \n        &#39; property to work.\n        ShowLines = False\n    End Sub &#39;New\n\n\n    Protected Overrides Sub OnAfterSelect(ByVal e As TreeViewEventArgs)\n        &#39; Confirm that the user initiated the selection.\n        &#39; This prevents the first node from expanding when it is\n        &#39; automatically selected during the initialization of \n        &#39; the TreeView control.\n        If e.Action &lt;&gt; TreeViewAction.Unknown Then\n            If e.Node.IsExpanded Then\n                e.Node.Collapse()\n            Else\n                e.Node.Expand()\n            End If\n        End If\n\n        &#39; Remove the selection. This allows the same node to be\n        &#39; clicked twice in succession to toggle the expansion state.\n        SelectedNode = Nothing\n    End Sub &#39;OnAfterSelect\n\nEnd Class &#39;CustomizedTreeView \n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewCustomization#2\">public ref class CustomizedTreeView: public TreeView\n{\npublic:\n   CustomizedTreeView()\n   {\n\n      // Customize the TreeView control by setting various properties.\n      BackColor = System::Drawing::Color::CadetBlue;\n      FullRowSelect = true;\n      HotTracking = true;\n      Indent = 34;\n      ShowPlusMinus = false;\n\n      // The ShowLines property must be false for the FullRowSelect\n      // property to work.\n      ShowLines = false;\n   }\n\nprotected:\n   virtual void OnAfterSelect( TreeViewEventArgs^ e ) override\n   {\n      // Confirm that the user initiated the selection.\n      // This prevents the first node from expanding when it is\n      // automatically selected during the initialization of\n      // the TreeView control.\n      if ( e-&gt;Action != TreeViewAction::Unknown )\n      {\n         if ( e-&gt;Node-&gt;IsExpanded )\n         {\n            e-&gt;Node-&gt;Collapse();\n         }\n         else\n         {\n            e-&gt;Node-&gt;Expand();\n         }\n      }\n\n      \n      // Remove the selection. This allows the same node to be\n      // clicked twice in succession to toggle the expansion state.\n      SelectedNode = nullptr;\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewCustomization#2\">    public class CustomizedTreeView : TreeView\n    {\n        public CustomizedTreeView()\n        {\n            // Customize the TreeView control by setting various properties.\n            BackColor = System.Drawing.Color.CadetBlue;\n            FullRowSelect = true;\n            HotTracking = true;\n            Indent = 34;\n            ShowPlusMinus = false;\n\n            // The ShowLines property must be false for the FullRowSelect \n            // property to work.\n            ShowLines = false;\n        }\n\n        protected override void OnAfterSelect(TreeViewEventArgs e)\n        {\n            // Confirm that the user initiated the selection.\n            // This prevents the first node from expanding when it is\n            // automatically selected during the initialization of \n            // the TreeView control.\n            if (e.Action != TreeViewAction.Unknown)\n            {\n                if (e.Node.IsExpanded) \n                {\n                    e.Node.Collapse();\n                }\n                else \n                {\n                    e.Node.Expand();\n                }\n            }\n\n            // Remove the selection. This allows the same node to be\n            // clicked twice in succession to toggle the expansion state.\n            SelectedNode = null;\n        }\n\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_ShowNodeToolTips\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_ShowNodeToolTips_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShowNodeToolTips</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating ToolTips are shown when the mouse pointer hovers over a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ShowNodeToolTips { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if ToolTips are shown when the mouse pointer hovers over a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In order for ToolTips to be visible, you must set the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ToolTipText_\" data-linktype=\"relative-path\">ToolTipText</a> for a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ToolTipText_\" data-linktype=\"relative-path\">ToolTipText</a> and ShowNodeToolTips properties. To run this example, paste the following code into a Windows Form and call <code>InitializeTreeViewWithToolTips</code> from the form&#39;s constructor or <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Load\" data-linktype=\"relative-path\">Load</a> event handler.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#7\">    TreeView treeViewWithToolTips;\n    private void InitializeTreeViewWithToolTips()\n    {\n        treeViewWithToolTips = new TreeView();\n        TreeNode node1 = new TreeNode(&quot;Node1&quot;);\n        node1.ToolTipText = &quot;Help for Node1&quot;;\n        TreeNode node2 = new TreeNode(&quot;Node2&quot;);\n        node2.ToolTipText = &quot;A Tip for Node2&quot;;\n        treeViewWithToolTips.Nodes.AddRange(new TreeNode[] { node1, node2 });\n        treeViewWithToolTips.ShowNodeToolTips = true;\n        this.Controls.Add(treeViewWithToolTips);\n\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#7\">    Private treeViewWithToolTips As TreeView\n    \n    Private Sub InitializeTreeViewWithToolTips() \n        treeViewWithToolTips = New TreeView()\n        Dim node1 As New TreeNode(&quot;Node1&quot;)\n        node1.ToolTipText = &quot;Help for Node1&quot;\n        Dim node2 As New TreeNode(&quot;Node2&quot;)\n        node2.ToolTipText = &quot;A Tip for Node2&quot;\n        treeViewWithToolTips.Nodes.AddRange(New TreeNode() {node1, node2})\n        treeViewWithToolTips.ShowNodeToolTips = True\n        Me.Controls.Add(treeViewWithToolTips)\n    \n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_ShowPlusMinus\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_ShowPlusMinus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShowPlusMinus</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether plus-sign (+) and minus-sign (-) buttons are displayed next to tree nodes that contain child tree nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ShowPlusMinus { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if plus sign and minus sign buttons are displayed next to tree nodes that contain child tree nodes; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The plus sign and minus sign buttons appear next to the root tree nodes only if the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowRootLines_\" data-linktype=\"relative-path\">ShowRootLines</a> property value is <code>true</code>. If the plus sign and minus sign buttons are not displayed, no visual cue exists to indicate that the tree node contains child tree nodes and is expandable. The user then must double-click a tree node to determine whether it contains child tree nodes, to expand it, or to collapse it.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates a customized <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. By inheriting the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> class, this custom version has all the functionality of a typical <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. Changing various property values in the constructor provides a unique appearance. Because the ShowPlusMinus property is set to false, the customized control also overrides the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_OnAfterSelect_\" data-linktype=\"relative-path\">OnAfterSelect</a> method so that nodes can be expanded and collapsed when they are clicked.  </p>\n<p> A control that is customized in this way can be used throughout an organization, making it easy to provide a consistent interface without requiring the control properties to be specified in each individual project.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewCustomization#2\">Public Class CustomizedTreeView\n    Inherits TreeView\n\n    Public Sub New()\n        &#39; Customize the TreeView control by setting various properties.\n        BackColor = System.Drawing.Color.CadetBlue\n        FullRowSelect = True\n        HotTracking = True\n        Indent = 34\n        ShowPlusMinus = False\n\n        &#39; The ShowLines property must be false for the FullRowSelect \n        &#39; property to work.\n        ShowLines = False\n    End Sub &#39;New\n\n\n    Protected Overrides Sub OnAfterSelect(ByVal e As TreeViewEventArgs)\n        &#39; Confirm that the user initiated the selection.\n        &#39; This prevents the first node from expanding when it is\n        &#39; automatically selected during the initialization of \n        &#39; the TreeView control.\n        If e.Action &lt;&gt; TreeViewAction.Unknown Then\n            If e.Node.IsExpanded Then\n                e.Node.Collapse()\n            Else\n                e.Node.Expand()\n            End If\n        End If\n\n        &#39; Remove the selection. This allows the same node to be\n        &#39; clicked twice in succession to toggle the expansion state.\n        SelectedNode = Nothing\n    End Sub &#39;OnAfterSelect\n\nEnd Class &#39;CustomizedTreeView \n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewCustomization#2\">public ref class CustomizedTreeView: public TreeView\n{\npublic:\n   CustomizedTreeView()\n   {\n\n      // Customize the TreeView control by setting various properties.\n      BackColor = System::Drawing::Color::CadetBlue;\n      FullRowSelect = true;\n      HotTracking = true;\n      Indent = 34;\n      ShowPlusMinus = false;\n\n      // The ShowLines property must be false for the FullRowSelect\n      // property to work.\n      ShowLines = false;\n   }\n\nprotected:\n   virtual void OnAfterSelect( TreeViewEventArgs^ e ) override\n   {\n      // Confirm that the user initiated the selection.\n      // This prevents the first node from expanding when it is\n      // automatically selected during the initialization of\n      // the TreeView control.\n      if ( e-&gt;Action != TreeViewAction::Unknown )\n      {\n         if ( e-&gt;Node-&gt;IsExpanded )\n         {\n            e-&gt;Node-&gt;Collapse();\n         }\n         else\n         {\n            e-&gt;Node-&gt;Expand();\n         }\n      }\n\n      \n      // Remove the selection. This allows the same node to be\n      // clicked twice in succession to toggle the expansion state.\n      SelectedNode = nullptr;\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewCustomization#2\">    public class CustomizedTreeView : TreeView\n    {\n        public CustomizedTreeView()\n        {\n            // Customize the TreeView control by setting various properties.\n            BackColor = System.Drawing.Color.CadetBlue;\n            FullRowSelect = true;\n            HotTracking = true;\n            Indent = 34;\n            ShowPlusMinus = false;\n\n            // The ShowLines property must be false for the FullRowSelect \n            // property to work.\n            ShowLines = false;\n        }\n\n        protected override void OnAfterSelect(TreeViewEventArgs e)\n        {\n            // Confirm that the user initiated the selection.\n            // This prevents the first node from expanding when it is\n            // automatically selected during the initialization of \n            // the TreeView control.\n            if (e.Action != TreeViewAction.Unknown)\n            {\n                if (e.Node.IsExpanded) \n                {\n                    e.Node.Collapse();\n                }\n                else \n                {\n                    e.Node.Expand();\n                }\n            }\n\n            // Remove the selection. This allows the same node to be\n            // clicked twice in succession to toggle the expansion state.\n            SelectedNode = null;\n        }\n\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_ShowRootLines\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_ShowRootLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShowRootLines</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether lines are drawn between the tree nodes that are at the root of the tree view.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool ShowRootLines { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if lines are drawn between the tree nodes that are at the root of the tree view; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the ShowRootLines property is <code>false</code>, the plus-sign and minus-sign buttons will not appear next to the root tree nodes, and the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowPlusMinus_\" data-linktype=\"relative-path\">ShowPlusMinus</a> property will have no effect.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.borderstyle\" data-linktype=\"relative-path\">BorderStyle</a> enumeration and the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BorderStyle_\" data-linktype=\"relative-path\">BorderStyle</a>, <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ShowLines_\" data-linktype=\"relative-path\">ShowLines</a>, <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_Scrollable_\" data-linktype=\"relative-path\">Scrollable</a>, <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_HideSelection_\" data-linktype=\"relative-path\">HideSelection</a> and ShowRootLines properties. To run this example, paste the following code in a form and call the <code>InitializeTreeView</code> method in the form&#39;s constructor or <code>Load</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewExample#1\">   // Declare the TreeView control.\ninternal:\n   System::Windows::Forms::TreeView^ TreeView1;\n\nprivate:\n   // Initialize the TreeView to blend with the form, giving it the \n   // same color as the form and no border.\n   void InitializeTreeView()\n   {\n      // Create a new TreeView control and set the location and size.\n      this-&gt;TreeView1 = gcnew System::Windows::Forms::TreeView;\n      this-&gt;TreeView1-&gt;Location = System::Drawing::Point( 72, 48 );\n      this-&gt;TreeView1-&gt;Size = System::Drawing::Size( 200, 200 );\n\n      // Set the BorderStyle property to none, the BackColor property to  \n      // the form&#39;s backcolor, and the Scrollable property to false.  \n      // This allows the TreeView to blend in form.\n      this-&gt;TreeView1-&gt;BorderStyle = BorderStyle::None;\n      this-&gt;TreeView1-&gt;BackColor = this-&gt;BackColor;\n      this-&gt;TreeView1-&gt;Scrollable = false;\n\n      // Set the HideSelection property to false to keep the \n      // selection highlighted when the user leaves the control. \n      // This helps it blend with form.\n      this-&gt;TreeView1-&gt;HideSelection = false;\n\n      // Set the ShowRootLines and ShowLines properties to false to \n      // give the TreeView a list-like appearance.\n      this-&gt;TreeView1-&gt;ShowRootLines = false;\n      this-&gt;TreeView1-&gt;ShowLines = false;\n\n      // Add the nodes.\n      array&lt;TreeNode^&gt;^temp0 = {gcnew TreeNode( &quot;Full Color&quot; ),gcnew TreeNode( &quot;Project Wizards&quot; ),gcnew TreeNode( &quot;Visual C# and Visual Basic Support&quot; )};\n      array&lt;TreeNode^&gt;^temp1 = {gcnew TreeNode( &quot;Pentium 133 MHz or faster processor &quot; ),gcnew TreeNode( &quot;Windows 98 or later&quot; ),gcnew TreeNode( &quot;100 MB Disk space&quot; )};\n      array&lt;TreeNode^&gt;^temp2 = {gcnew TreeNode( &quot;Features&quot;,temp0 ),gcnew TreeNode( &quot;System Requirements&quot;,temp1 )};\n      this-&gt;TreeView1-&gt;Nodes-&gt;AddRange( temp2 );\n\n      // Set the tab index and add the TreeView to the form.\n      this-&gt;TreeView1-&gt;TabIndex = 0;\n      this-&gt;Controls-&gt;Add( this-&gt;TreeView1 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewExample#1\">\n\t// Declare the TreeView control.\n\tinternal System.Windows.Forms.TreeView TreeView1;\n\n\t// Initialize the TreeView to blend with the form, giving it the \n\t// same color as the form and no border.\n\tprivate void InitializeTreeView()\n\t{\n\n\t\t// Create a new TreeView control and set the location and size.\n\t\tthis.TreeView1 = new System.Windows.Forms.TreeView();\n\t\tthis.TreeView1.Location = new System.Drawing.Point(72, 48);\n\t\tthis.TreeView1.Size = new System.Drawing.Size(200, 200);\n\n\t\t// Set the BorderStyle property to none, the BackColor property to  \n\t\t// the form&#39;s backcolor, and the Scrollable property to false.  \n\t\t// This allows the TreeView to blend in form.\n\n\t\tthis.TreeView1.BorderStyle = BorderStyle.None;\n\t\tthis.TreeView1.BackColor = this.BackColor;\n\t\tthis.TreeView1.Scrollable = false;\n\n\t\t// Set the HideSelection property to false to keep the \n\t\t// selection highlighted when the user leaves the control. \n\t\t// This helps it blend with form.\n\t\tthis.TreeView1.HideSelection = false;\n\n\t\t// Set the ShowRootLines and ShowLines properties to false to \n\t\t// give the TreeView a list-like appearance.\n\t\tthis.TreeView1.ShowRootLines = false;\n\t\tthis.TreeView1.ShowLines = false;\n\n\t\t// Add the nodes.\n\t\tthis.TreeView1.Nodes.AddRange(new TreeNode[]\n\t\t\t{new TreeNode(&quot;Features&quot;, \n\t\t\t\tnew TreeNode[]{\n\t\t\t\tnew TreeNode(&quot;Full Color&quot;), \n\t\t\t\tnew TreeNode(&quot;Project Wizards&quot;), \n\t\t\t\tnew TreeNode(&quot;Visual C# and Visual Basic Support&quot;)}), \n\t\t\t\tnew TreeNode(&quot;System Requirements&quot;, \n\t\t\t\tnew TreeNode[]{\n\t\t\t\t\tnew TreeNode(&quot;Pentium 133 MHz or faster processor &quot;),\n\t\t\t\t\tnew TreeNode(&quot;Windows 98 or later&quot;), \n\t\t\t\t\tnew TreeNode(&quot;100 MB Disk space&quot;)})\n\t\t\t});\n\n\t\t// Set the tab index and add the TreeView to the form.\n\t\tthis.TreeView1.TabIndex = 0;\n\t\tthis.Controls.Add(this.TreeView1);\n\t}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewExample#1\">\n    &#39; Declare the TreeView control.\n    Friend WithEvents TreeView1 As System.Windows.Forms.TreeView\n\n    &#39; Initialize the TreeView to blend with the form, giving it the \n    &#39; same color as the form and no border.\n    Private Sub InitializeTreeView()\n\n        &#39; Create a new TreeView control and set the location and size.\n        Me.TreeView1 = New System.Windows.Forms.TreeView\n        Me.TreeView1.Location = New System.Drawing.Point(72, 48)\n        Me.TreeView1.Size = New System.Drawing.Size(200, 200)\n\n        &#39; Set the BorderStyle property to none, the BackColor property to  \n        &#39; the form&#39;s backcolor, and the Scrollable property to false.  \n        &#39; This allows the TreeView to blend in form.\n        Me.TreeView1.BorderStyle = BorderStyle.None\n        Me.TreeView1.BackColor = Me.BackColor\n        Me.TreeView1.Scrollable = False\n\n        \n        &#39; Set the ShowRootLines and ShowLines properties to false to \n        &#39; give the TreeView a list-like appearance.\n        Me.TreeView1.ShowRootLines = False\n        Me.TreeView1.ShowLines = False\n\n        &#39; Add the nodes.\n        Me.TreeView1.Nodes.AddRange(New System.Windows.Forms.TreeNode() _\n            {New System.Windows.Forms.TreeNode(&quot;Features&quot;, _\n            New System.Windows.Forms.TreeNode() _\n            {New System.Windows.Forms.TreeNode(&quot;Full Color&quot;), _\n            New System.Windows.Forms.TreeNode(&quot;Project Wizards&quot;), _\n            New System.Windows.Forms.TreeNode(&quot;Visual C# and Visual Basic Support&quot;)}), _\n            New System.Windows.Forms.TreeNode(&quot;System Requirements&quot;, _\n            New System.Windows.Forms.TreeNode() _\n            {New System.Windows.Forms.TreeNode _\n            (&quot;Pentium 133 MHz or faster processor &quot;), _\n            New System.Windows.Forms.TreeNode(&quot;Windows 98 or later&quot;), _\n            New System.Windows.Forms.TreeNode(&quot;100 MB Disk space&quot;)})})\n\n        &#39; Set the tab index and add the TreeView to the form.\n        Me.TreeView1.TabIndex = 0\n        Me.Controls.Add(Me.TreeView1)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_Sorted\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_Sorted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sorted</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the tree nodes in the tree view are sorted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Sorted { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the tree nodes in the tree view are sorted; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When Sorted is set to <code>true</code>, the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects are sorted in alphabetical order by their <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Text_\" data-linktype=\"relative-path\">Text</a> property values. You should always use <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeginUpdate_\" data-linktype=\"relative-path\">BeginUpdate</a> and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_EndUpdate_\" data-linktype=\"relative-path\">EndUpdate</a> to maintain performance when you add a large quantity of items to a sorted <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. When the text of an existing node is changed, you must call <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_Sort_\" data-linktype=\"relative-path\">Sort</a> to resort the items.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The default sorter uses the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_\" data-linktype=\"relative-path\">Compare</a> method based on the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> specified by the application. This means that <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects with equal value are kept in the order in which they were added to the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_StateImageList\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_StateImageList_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StateImageList</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the image list that is used to indicate the state of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> and its nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.ImageList StateImageList { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.imagelist\" data-linktype=\"relative-path\">ImageList</a> used for indicating the state of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> and its nodes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To indicate the state of a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>, set the StateImageList property and also set the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_StateImageKey_\" data-linktype=\"relative-path\">StateImageKey</a> or <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_StateImageIndex_\" data-linktype=\"relative-path\">StateImageIndex</a> property for each <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.  </p>\n<p> The state images displayed in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> are 16 x 16 pixels by default. Setting the <a class=\"xref\" href=\"system.windows.forms.imagelist#System_Windows_Forms_ImageList_ImageSize_\" data-linktype=\"relative-path\">ImageSize</a> property of the StateImageList will have no effect on how the images are displayed. However, the state images are resized according to the system DPI setting when the app.config file contains the following entry:  </p>\n<pre><code>&lt;appSettings&gt;  \n  &lt;add key=&quot;EnableWindowsFormsHighDpiAutoResizing&quot; value=&quot;true&quot; /&gt;  \n&lt;/appSettings&gt;  \n</code></pre><p> When the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_CheckBoxes_\" data-linktype=\"relative-path\">CheckBoxes</a> property of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is set to <code>true</code> and the StateImageList property is set, each <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that is contained in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> displays the first and second images from the StateImageList to indicate an unchecked or checked state, respectively. You should set the StateImageList property before you add nodes to the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> to prevent state images being shown at design time for nodes that do not have a state image set.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the StateImageList property. To run this example, paste the code into a Windows Form and call <code>InitializeCheckTreeView</code> from the form&#39;s constructor or <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Load\" data-linktype=\"relative-path\">Load</a> event handler.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#8\">    TreeView^ checkTreeView;\nprivate:\n    void InitializeCheckTreeView()\n    {\n        checkTreeView = gcnew TreeView();\n\n        // Show check boxes for the TreeView. This\n        // will cause the StateImageList to be used.\n        checkTreeView-&gt;CheckBoxes = true;\n\n        // Create the StateImageList and add two images.\n        checkTreeView-&gt;StateImageList = gcnew ImageList();\n        checkTreeView-&gt;StateImageList-&gt;Images-&gt;Add(SystemIcons::Question);\n        checkTreeView-&gt;StateImageList-&gt;Images-&gt;Add(SystemIcons::Exclamation);\n\n        // Add some nodes to the TreeView and the TreeView to the form.\n        checkTreeView-&gt;Nodes-&gt;Add(&quot;Node1&quot;);\n        checkTreeView-&gt;Nodes-&gt;Add(&quot;Node2&quot;);\n        this-&gt;Controls-&gt;Add(checkTreeView);\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#8\">    TreeView checkTreeView;\n    private void InitializeCheckTreeView()\n    {\n        checkTreeView = new TreeView();\n        \n        // Show check boxes for the TreeView. This\n        // will cause the StateImageList to be used.\n        checkTreeView.CheckBoxes = true;\n\n        // Create the StateImageList and add two images.\n        checkTreeView.StateImageList = new ImageList();\n        checkTreeView.StateImageList.Images.Add(SystemIcons.Question);\n        checkTreeView.StateImageList.Images.Add(SystemIcons.Exclamation);\n        \n        // Add some nodes to the TreeView and the TreeView to the form.\n        checkTreeView.Nodes.Add(&quot;Node1&quot;);\n        checkTreeView.Nodes.Add(&quot;Node2&quot;);\n        this.Controls.Add(checkTreeView);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#8\">    Private checkTreeView As TreeView\n    \n    Private Sub InitializeCheckTreeView() \n        checkTreeView = New TreeView()\n        \n        &#39; Show check boxes for the TreeView.\n        checkTreeView.CheckBoxes = True\n        \n        &#39; Create the StateImageList and add two images.\n        checkTreeView.StateImageList = New ImageList()\n        checkTreeView.StateImageList.Images.Add(SystemIcons.Question)\n        checkTreeView.StateImageList.Images.Add(SystemIcons.Exclamation)\n        \n        &#39; Add some nodes to the TreeView and the TreeView to the form.\n        checkTreeView.Nodes.Add(&quot;Node1&quot;)\n        checkTreeView.Nodes.Add(&quot;Node2&quot;)\n        Me.Controls.Add(checkTreeView)\n    \n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_Text\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_Text_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Text</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the text of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Text { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p><code>Null</code> in all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is not relevant for this class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_TopNode\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_TopNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TopNode</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the first fully-visible tree node in the tree view control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNode TopNode { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> that represents the first fully-visible tree node in the tree view control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Initially, the TopNode returns the first root tree node, which is located at the top of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. However, if the user has scrolled the contents, another tree node might be at the top.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Setting this property has no effect when the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_Scrollable_\" data-linktype=\"relative-path\">Scrollable</a> property value is <code>false</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeLabelEdit\" data-linktype=\"relative-path\">BeforeLabelEdit</a><a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterSelect\" data-linktype=\"relative-path\">AfterSelect</a> and TopNode members. To run this example, paste the following code in a form that contains a <code>TreeView</code> control that is named <code>TreeView1</code>. Call the <code>InitializeTreeView</code> method in the form&#39;s constructor or <code>Load</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#1\">\tprivate void InitializeTreeView()\n\t{\n\n\t\t// Construct the TreeView object.\n\t\tthis.TreeView1 = new System.Windows.Forms.TreeView();\n\n\t\t// Set dock, location, size name, and tab order\n\t\t// values for the TreeView object.\n\t\tTreeView1.Dock = System.Windows.Forms.DockStyle.Left;\n\t\tTreeView1.Location = new System.Drawing.Point(0, 0);\n\t\tTreeView1.Name = &quot;TreeView1&quot;;\n\t\tTreeView1.Size = new System.Drawing.Size(152, 266);\n\t\tTreeView1.TabIndex = 1;\n\t\t\n\t\t// Associate the event-handling methods with the\n\t\t// BeforeLabeEdit and the AfterSelect events.\n\t\tTreeView1.BeforeLabelEdit += \n\t\t\tnew NodeLabelEditEventHandler(TreeView1_BeforeLabelEdit);\n\t\tTreeView1.AfterSelect += \n\t\t\tnew TreeViewEventHandler(TreeView1_AfterSelect);\n\n\t\t// Set the LabelEdit property to true to allow the \n\t\t// user to edit the TreeNode text.\n\t\tthis.TreeView1.LabelEdit = true;\n\n\t\t// Declare and create objects needed to populate \n\t\t// the TreeView.\n\t\tstring[] files = new string[]{&quot;bigPresentation.ppt&quot;, \n\t\t\t&quot;myFinances.xls&quot;, &quot;myResume.doc&quot;};; \n\t\tstring filePath = &quot;c:\\\\myFiles&quot;;\n\t\tSystem.Collections.ArrayList nodes = \n\t\t\tnew System.Collections.ArrayList();\n\n\t\t// Create a node for each file, setting the Text property to the \n\t\t// file&#39;s name and the Tag property to file&#39;s fully-qualified name.\n\t\tforeach ( string file in files )\n\t\t{\n\t\t\tTreeNode node = new TreeNode(file);\n\t\t\tnode.Tag = filePath+&quot;\\\\&quot;+file;\n\t\t\tnodes.Add(node);\n\t\t}\n\n\t\tTreeNode[] treeNodes = new TreeNode[nodes.Count];\n\t\tnodes.CopyTo(treeNodes);\n\n\t\t// Create a new node named topNode and add the ArrayList of \n\t\t// nodes to topNode.\n\t\tTreeNode topNode = new TreeNode(&quot;myFiles&quot;,  treeNodes);\n\t\ttopNode.Tag = filePath;\n\n\t\t// Add topNode to the TreeView.\n\t\tTreeView1.Nodes.Add(topNode);\n\n\t\t// Add the TreeView to the form.\n\t\tthis.Controls.Add(TreeView1);\n\t}\n\n\tprivate void TreeView1_BeforeLabelEdit(object sender, \n\t\tNodeLabelEditEventArgs e)\n\t{\n\n\t\t// Determine whether the user has selected the top node. If so,\n\t\t// change the CancelEdit property to true to cancel the edit.  \n\t\tif (e.Node == TreeView1.TopNode)\n\n\t\t{\n\t\t\te.CancelEdit = true;\n\t\t\tMessageBox.Show(&quot;You are not allowed to edit the top node&quot;);\n\t\t}\n\t\t\n\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#1\">private:\n   void InitializeTreeView()\n   {\n      \n      // Construct the TreeView object.\n      this-&gt;TreeView1 = gcnew System::Windows::Forms::TreeView;\n      \n      // Set dock, location, size name, and tab order\n      // values for the TreeView object.\n      TreeView1-&gt;Dock = System::Windows::Forms::DockStyle::Left;\n      TreeView1-&gt;Location = System::Drawing::Point( 0, 0 );\n      TreeView1-&gt;Name = &quot;TreeView1&quot;;\n      TreeView1-&gt;Size = System::Drawing::Size( 152, 266 );\n      TreeView1-&gt;TabIndex = 1;\n      \n      // Associate the event-handling methods with the\n      // BeforeLabeEdit and the AfterSelect events.\n      TreeView1-&gt;BeforeLabelEdit += gcnew NodeLabelEditEventHandler( this, &amp;Form1::TreeView1_BeforeLabelEdit );\n      TreeView1-&gt;AfterSelect += gcnew TreeViewEventHandler( this, &amp;Form1::TreeView1_AfterSelect );\n      \n      // Set the LabelEdit property to true to allow the \n      // user to edit the TreeNode text.\n      this-&gt;TreeView1-&gt;LabelEdit = true;\n      \n      // Declare and create objects needed to populate \n      // the TreeView.\n      array&lt;String^&gt;^files = {&quot;bigPresentation.ppt&quot;,&quot;myFinances.xls&quot;,&quot;myResume.doc&quot;};\n      ;\n      String^ filePath = &quot;c:\\\\myFiles&quot;;\n      System::Collections::ArrayList^ nodes = gcnew System::Collections::ArrayList;\n      \n      // Create a node for each file, setting the Text property to the \n      // file&#39;s name and the Tag property to file&#39;s fully-qualified name.\n      System::Collections::IEnumerator^ myEnum = files-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         String^ file = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n         TreeNode^ node = gcnew TreeNode( file );\n         node-&gt;Tag = String::Concat( filePath, &quot;\\\\&quot;, file );\n         nodes-&gt;Add( node );\n      }\n\n      array&lt;TreeNode^&gt;^treeNodes = gcnew array&lt;TreeNode^&gt;(nodes-&gt;Count);\n      nodes-&gt;CopyTo( treeNodes );\n      \n      // Create a new node named topNode and add the ArrayList of \n      // nodes to topNode.\n      TreeNode^ topNode = gcnew TreeNode( &quot;myFiles&quot;,treeNodes );\n      topNode-&gt;Tag = filePath;\n      \n      // Add topNode to the TreeView.\n      TreeView1-&gt;Nodes-&gt;Add( topNode );\n      \n      // Add the TreeView to the form.\n      this-&gt;Controls-&gt;Add( TreeView1 );\n   }\n\n   void TreeView1_BeforeLabelEdit( Object^ /*sender*/, NodeLabelEditEventArgs^ e )\n   {\n      \n      // Determine whether the user has selected the top node. If so,\n      // change the CancelEdit property to true to cancel the edit.\n      if ( e-&gt;Node == TreeView1-&gt;TopNode )\n      {\n         e-&gt;CancelEdit = true;\n         MessageBox::Show( &quot;You are not allowed to edit the top node&quot; );\n      }\n\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#1\">    Private Sub InitializeTreeView()\n\n        &#39; Construct the TreeView object.\n        Me.TreeView1 = New System.Windows.Forms.TreeView\n\n        &#39; Set dock, location, size name, and tab order\n        &#39; values for the TreeView object.\n\n        With TreeView1\n            .Dock = System.Windows.Forms.DockStyle.Left\n            .Location = New System.Drawing.Point(0, 0)\n            .Name = &quot;TreeView1&quot;\n            .Size = New System.Drawing.Size(152, 266)\n            .TabIndex = 1\n        End With\n\n        &#39; Set the LabelEdit property to true to allow the \n        &#39; user to edit the TreeNode text.\n        Me.TreeView1.LabelEdit = True\n\n        &#39; Declare and create objects needed to populate \n        &#39; the TreeView.\n        Dim file, files(), filePath As String\n        files = New String() {&quot;bigPresentation.ppt&quot;, &quot;myFinances.xls&quot;, _\n            &quot;myResume.doc&quot;}\n        filePath = &quot;c:\\myFiles&quot;\n        Dim nodes As New System.Collections.ArrayList\n\n        &#39; Create a node for each file, setting the Text property to the \n        &#39; file&#39;s name and the Tag property to file&#39;s fully-qualified name.\n        For Each file In files\n            Dim node As New TreeNode(file)\n            node.Tag = filePath &amp; &quot;\\&quot; &amp; file\n            nodes.Add(node)\n        Next\n\n        &#39; Create a new node named topNode and add the ArrayList of \n        &#39; nodes to topNode.\n        Dim topNode As New TreeNode(&quot;myFiles&quot;, _\n            nodes.ToArray(GetType(TreeNode)))\n\n        topNode.Tag = filePath\n\n        &#39; Add topNode to the TreeView.\n        TreeView1.Nodes.Add(topNode)\n\n        &#39; Add the TreeView to the form.\n        Me.Controls.Add(TreeView1)\n    End Sub\n\n    Private Sub TreeView1_BeforeLabelEdit(ByVal sender As Object, _\n        ByVal e As NodeLabelEditEventArgs) Handles TreeView1.BeforeLabelEdit\n\n        &#39; Determine whether the user has selected the top node. If so,\n        &#39; change the CancelEdit property to true to cancel the edit.  \n        If (e.Node Is TreeView1.TopNode) Then\n\n            e.CancelEdit = True\n            MessageBox.Show(&quot;You are not allowed to edit the top node&quot;)\n        End If\n\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#2\">\t// Handle the After_Select event.\n\tprivate void TreeView1_AfterSelect(System.Object sender, \n\t\tSystem.Windows.Forms.TreeViewEventArgs e)\n\t{\n\n\t\t// Vary the response depending on which TreeViewAction\n\t\t// triggered the event. \n\t\tswitch((e.Action))\n\t\t{\n\t\t\tcase TreeViewAction.ByKeyboard:\n\t\t\t\tMessageBox.Show(&quot;You like the keyboard!&quot;);\n\t\t\t\tbreak;\n\t\t\tcase TreeViewAction.ByMouse:\n\t\t\t\tMessageBox.Show(&quot;You like the mouse!&quot;);\n\t\t\t\tbreak;\n\t\t}\n\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#2\">private:\n   // Handle the After_Select event.\n   void TreeView1_AfterSelect( System::Object^ /*sender*/, System::Windows::Forms::TreeViewEventArgs^ e )\n   {\n      \n      // Vary the response depending on which TreeViewAction\n      // triggered the event. \n      switch ( (e-&gt;Action) )\n      {\n         case TreeViewAction::ByKeyboard:\n            MessageBox::Show( &quot;You like the keyboard!&quot; );\n            break;\n\n         case TreeViewAction::ByMouse:\n            MessageBox::Show( &quot;You like the mouse!&quot; );\n            break;\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#2\">    &#39; Handle the After_Select event.\n    Private Sub TreeView1_AfterSelect(ByVal sender As System.Object, _\n        ByVal e As System.Windows.Forms.TreeViewEventArgs) _\n            Handles TreeView1.AfterSelect\n\n        &#39; Vary the response depending on which TreeViewAction\n        &#39; triggered the event. \n        Select Case (e.Action)\n            Case TreeViewAction.ByKeyboard\n                MessageBox.Show(&quot;You like the keyboard!&quot;)\n            Case TreeViewAction.ByMouse\n                MessageBox.Show(&quot;You like the mouse!&quot;)\n        End Select\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_TreeViewNodeSorter\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_TreeViewNodeSorter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TreeViewNodeSorter</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the implementation of <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> to perform a custom sort of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IComparer TreeViewNodeSorter { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> to perform the custom sort.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The custom sort is applied when the TreeViewNodeSorter is set.  </p>\n<p> If a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> label is changed, you can call the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_Sort_\" data-linktype=\"relative-path\">Sort</a> method to sort the items again with the custom sorter specified by the TreeViewNodeSorter property.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The default sorter uses the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_\" data-linktype=\"relative-path\">Compare</a> method based on the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> specified by the application. This means that <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects with equal value are kept in the order in which they were added to the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control. This behavior may be different if a custom sort is applied.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the TreeViewNodeSorter property to sort nodes from smallest to largest. To run this example, paste the following code into a Windows Form and call <code>InitializeTreeView1</code> from the form&#39;s constructor or <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Load\" data-linktype=\"relative-path\">Load</a> event handler.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#1\">    // Create a node sorter that implements the IComparer interface.\nprivate:\n    ref class NodeSorter : public IComparer\n    {\n        // Compare the length of the strings, or the strings\n        // themselves, if they are the same length.\n    public:\n        virtual int Compare(Object^ x, Object^ y)\n        {\n            TreeNode^ tx = (TreeNode^)x;\n            TreeNode^ ty = (TreeNode^)y;\n\n            // Compare the length of the strings, returning the difference.\n            if (tx-&gt;Text-&gt;Length != ty-&gt;Text-&gt;Length)\n            {\n                return (tx-&gt;Text-&gt;Length - ty-&gt;Text-&gt;Length);\n            }\n\n            // If they are the same length, call Compare.\n            return String::Compare(tx-&gt;Text, ty-&gt;Text);\n        }\n    };\n\n    // Declare the TreeView.\nprivate:\n    TreeView^ initialTreeView;\nprivate:\n    TextBox^ displayNodes;\nprivate:\n    Button^ setSorter;\n\nprivate:\n    void InitializeInitialTreeView()\n    {\n        // Create the TreeView\n        initialTreeView = gcnew TreeView();\n        initialTreeView-&gt;Size = System::Drawing::Size(200, 200);\n\n        // Create the button and set some basic properties.\n        setSorter = gcnew Button();\n        setSorter-&gt;Location = Point(205, 138);\n        setSorter-&gt;Text = &quot;Set Sorter&quot;;\n\n        // Handle the click event for the button.\n        setSorter-&gt;Click += gcnew EventHandler(this, \n            &amp;TreeViewWhidbeyMembersExample::SetSorter_Click);\n\n        // Create the root nodes.\n        TreeNode^ docNode = gcnew TreeNode(&quot;Documents&quot;);\n        TreeNode^ spreadSheetNode = gcnew TreeNode(&quot;Spreadsheets&quot;);\n\n        // Add some additional nodes.\n        spreadSheetNode-&gt;Nodes-&gt;Add(&quot;payroll.xls&quot;);\n        spreadSheetNode-&gt;Nodes-&gt;Add(&quot;checking.xls&quot;);\n        spreadSheetNode-&gt;Nodes-&gt;Add(&quot;tracking.xls&quot;);\n        docNode-&gt;Nodes-&gt;Add(&quot;phoneList.doc&quot;);\n        docNode-&gt;Nodes-&gt;Add(&quot;resume.doc&quot;);\n\n        // Add the root nodes to the TreeView.\n        initialTreeView-&gt;Nodes-&gt;Add(spreadSheetNode);\n        initialTreeView-&gt;Nodes-&gt;Add(docNode);\n\n        // Add the TreeView to the form.\n        this-&gt;Controls-&gt;Add(initialTreeView);\n        this-&gt;Controls-&gt;Add(setSorter);\n    }\n\n    // Set the TreeViewNodeSorter property to a new instance\n    // of the custom sorter.\nprivate:\n    void SetSorter_Click(Object^ sender, EventArgs^ e)\n    {\n        initialTreeView-&gt;TreeViewNodeSorter = gcnew NodeSorter();\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#1\">    // Declare the TreeView.\n    private TreeView treeView1;\n    private TextBox textBox1;\n    private Button button1;\n\n    private void InitializeTreeView1()\n    {\n        // Create the TreeView\n        treeView1 = new TreeView();\n        treeView1.Size = new Size(200, 200);\n\n        // Create the button and set some basic properties. \n        button1 = new Button();\n        button1.Location = new Point(205, 138);\n        button1.Text = &quot;Set Sorter&quot;;\n\n        // Handle the click event for the button.\n        button1.Click += new EventHandler(button1_Click);\n\n        // Create the root nodes.\n        TreeNode docNode = new TreeNode(&quot;Documents&quot;);\n        TreeNode spreadSheetNode = new TreeNode(&quot;Spreadsheets&quot;);\n\n        // Add some additional nodes.\n        spreadSheetNode.Nodes.Add(&quot;payroll.xls&quot;);\n        spreadSheetNode.Nodes.Add(&quot;checking.xls&quot;);\n        spreadSheetNode.Nodes.Add(&quot;tracking.xls&quot;);\n        docNode.Nodes.Add(&quot;phoneList.doc&quot;);\n        docNode.Nodes.Add(&quot;resume.doc&quot;);\n\n        // Add the root nodes to the TreeView.\n        treeView1.Nodes.Add(spreadSheetNode);\n        treeView1.Nodes.Add(docNode);\n\n        // Add the TreeView to the form.\n        Controls.Add(treeView1);\n        Controls.Add(button1);\n    }\n\n    // Set the TreeViewNodeSorter property to a new instance\n    // of the custom sorter.\n    private void button1_Click(object sender, EventArgs e)\n    {\n        treeView1.TreeViewNodeSorter = new NodeSorter();\n    }\n\n    // Create a node sorter that implements the IComparer interface.\n    public class NodeSorter : IComparer\n    {\n        // Compare the length of the strings, or the strings\n        // themselves, if they are the same length.\n        public int Compare(object x, object y)\n        {\n            TreeNode tx = x as TreeNode;\n            TreeNode ty = y as TreeNode;\n\n            // Compare the length of the strings, returning the difference.\n            if (tx.Text.Length != ty.Text.Length)\n                return tx.Text.Length - ty.Text.Length;\n\n            // If they are the same length, call Compare.\n            return string.Compare(tx.Text, ty.Text);\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#1\">    &#39; Declare the TreeView.\n    Private WithEvents treeView1 As TreeView\n    Private textBox1 As TextBox\n    Private WithEvents button1 As Button\n    \n    \n    Private Sub InitializeTreeView1()\n\n        &#39; Create the TreeView\n        treeView1 = New TreeView()\n        treeView1.Size = New Size(200, 200)\n\n        &#39; Create the button and set some basic properties. \n        button1 = New Button()\n        button1.Location = New Point(205, 138)\n        button1.Text = &quot;Set Sorter&quot;\n\n        &#39; Create the root nodes.\n        Dim docNode As New TreeNode(&quot;Documents&quot;)\n        Dim spreadSheetNode As New TreeNode(&quot;Spreadsheets&quot;)\n\n        &#39; Add some additional nodes.\n        spreadSheetNode.Nodes.Add(&quot;payroll.xls&quot;)\n        spreadSheetNode.Nodes.Add(&quot;checking.xls&quot;)\n        spreadSheetNode.Nodes.Add(&quot;tracking.xls&quot;)\n        docNode.Nodes.Add(&quot;phoneList.doc&quot;)\n        docNode.Nodes.Add(&quot;resume.doc&quot;)\n\n        &#39; Add the root nodes to the TreeView.\n        treeView1.Nodes.Add(spreadSheetNode)\n        treeView1.Nodes.Add(docNode)\n\n        &#39; Add the TreeView to the form.\n        Controls.Add(treeView1)\n        Controls.Add(button1)\n\n    End Sub\n    \n    \n    &#39; Set the TreeViewNodeSorter property to a new instance\n    &#39; of the custom sorter.\n    Private Sub button1_Click(ByVal sender As Object, _\n        ByVal e As EventArgs) Handles button1.Click\n\n        treeView1.TreeViewNodeSorter = New NodeSorter()\n\n    End Sub &#39;button1_Click\n    \n    &#39; Create a node sorter that implements the IComparer interface.\n    \n    Public Class NodeSorter\n        Implements IComparer\n        \n        &#39; Compare the length of the strings, or the strings\n        &#39; themselves, if they are the same length.\n        Public Function Compare(ByVal x As Object, ByVal y As Object) _\n            As Integer Implements IComparer.Compare\n            Dim tx As TreeNode = CType(x, TreeNode)\n            Dim ty As TreeNode = CType(y, TreeNode)\n           \n            If tx.Text.Length &lt;&gt; ty.Text.Length Then\n                Return tx.Text.Length - ty.Text.Length\n            End If\n            Return String.Compare(tx.Text, ty.Text)\n\n        End Function\n    End Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_VisibleCount\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_VisibleCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VisibleCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of tree nodes that can be fully visible in the tree view control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int VisibleCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> items that can be fully visible in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The VisibleCount value can be greater than the number of tree nodes in the tree view. The value is calculated by dividing the height of the client window by the height of a tree node item. The result is the total number of <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects that the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> can display within its current dimensions.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_BeginUpdate\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_BeginUpdate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginUpdate()</div>        \r\n          </div>\r\n    \r\n            <p>Disables any redrawing of the tree view.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void BeginUpdate ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To maintain performance while items are added one at a time to the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>, call the BeginUpdate method. The BeginUpdate method prevents the control from painting until the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_EndUpdate_\" data-linktype=\"relative-path\">EndUpdate</a> method is called.  </p>\n<p> The preferred way to add items to a tree view control is to use the <a class=\"xref\" href=\"system.windows.forms.treenodecollection#System_Windows_Forms_TreeNodeCollection_AddRange_\" data-linktype=\"relative-path\">AddRange</a> method to add an array of tree node items to a tree view. However, if you want to add items one at a time, use the BeginUpdate method to prevent the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control from painting during the add operations. To allow the control to resume painting, call the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_EndUpdate_\" data-linktype=\"relative-path\">EndUpdate</a> method when all the tree nodes have been added to the tree view.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays customer information in a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is suppressed by using the BeginUpdate and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_EndUpdate_\" data-linktype=\"relative-path\">EndUpdate</a> methods, and a wait <a class=\"xref\" href=\"system.windows.forms.cursor\" data-linktype=\"relative-path\">Cursor</a> is displayed while the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> creates and paints the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. This example requires that you have a <code>Customer</code> object that can hold a collection of <code>Order</code> objects. It also requires that you have a cursor file that is named <code>MyWait.cur</code> in the application directory and that you have created an instance of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeView#1\">      Public Class Customer\n         Inherits [Object]\n         Private custName As String = &quot;&quot;\n         Friend custOrders As New ArrayList()\n\n         Public Sub New(ByVal customername As String)\n            Me.custName = customername\n         End Sub\n\n         Public Property CustomerName() As String\n            Get\n               Return Me.custName\n            End Get\n            Set(ByVal Value As String)\n               Me.custName = Value\n            End Set\n         End Property\n\n         Public ReadOnly Property CustomerOrders() As ArrayList\n            Get\n               Return Me.custOrders\n            End Get\n         End Property\n      End Class &#39;End Customer class\n\n\n      Public Class Order\n         Inherits [Object]\n         Private ordID As String\n\n         Public Sub New(ByVal orderid As String)\n            Me.ordID = orderid\n         End Sub &#39;New\n\n         Public Property OrderID() As String\n            Get\n               Return Me.ordID\n            End Get\n            Set(ByVal Value As String)\n               Me.ordID = Value\n            End Set\n         End Property\n      End Class &#39; End Order class\n\n      &#39; Create a new ArrayList to hold the Customer objects.\n      Private customerArray As New ArrayList()\n\n      Private Sub FillMyTreeView()\n         &#39; Add customers to the ArrayList of Customer objects.\n         Dim x As Integer\n         For x = 0 To 999\n            customerArray.Add(New Customer(&quot;Customer&quot; + x.ToString()))\n         Next x\n\n         &#39; Add orders to each Customer object in the ArrayList.\n         Dim customer1 As Customer\n         For Each customer1 In customerArray\n            Dim y As Integer\n            For y = 0 To 14\n               customer1.CustomerOrders.Add(New Order(&quot;Order&quot; + y.ToString()))\n            Next y\n         Next customer1\n\n         &#39; Display a wait cursor while the TreeNodes are being created.\n         Cursor.Current = New Cursor(&quot;MyWait.cur&quot;)\n\n         &#39; Suppress repainting the TreeView until all the objects have been created.\n         treeView1.BeginUpdate()\n\n         &#39; Clear the TreeView each time the method is called.\n         treeView1.Nodes.Clear()\n\n         &#39; Add a root TreeNode for each Customer object in the ArrayList.\n         Dim customer2 As Customer\n         For Each customer2 In customerArray\n            treeView1.Nodes.Add(New TreeNode(customer2.CustomerName))\n\n            &#39; Add a child TreeNode for each Order object in the current Customer object.\n            Dim order1 As Order\n            For Each order1 In customer2.CustomerOrders\n               treeView1.Nodes(customerArray.IndexOf(customer2)).Nodes.Add( _\n          New TreeNode(customer2.CustomerName + &quot;.&quot; + order1.OrderID))\n            Next order1\n         Next customer2\n\n         &#39; Reset the cursor to the default for all controls.\n         Cursor.Current = System.Windows.Forms.Cursors.Default\n\n         &#39; Begin repainting the TreeView.\n         treeView1.EndUpdate()\n      End Sub &#39;FillMyTreeView\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeView#1\">\n// The basic Customer class.\npublic class Customer : System.Object\n{\n   private string custName = &quot;&quot;;\n   protected ArrayList custOrders = new ArrayList();\n\n   public Customer(string customername)\n   {\n      this.custName = customername;\n   }\n\n   public string CustomerName\n   {      \n      get{return this.custName;}\n      set{this.custName = value;}\n   }\n\n   public ArrayList CustomerOrders \n   {\n      get{return this.custOrders;}\n   }\n\n} // End Customer class \n\n\n// The basic customer Order class.\npublic class Order : System.Object\n{\n   private string ordID = &quot;&quot;;\n\n   public Order(string orderid)\n   {\n      this.ordID = orderid;\n   }\n\n   public string OrderID\n   {      \n      get{return this.ordID;}\n      set{this.ordID = value;}\n   }\n\n} // End Order class\n\n// Create a new ArrayList to hold the Customer objects.\nprivate ArrayList customerArray = new ArrayList(); \n\nprivate void FillMyTreeView()\n{\n   // Add customers to the ArrayList of Customer objects.\n   for(int x=0; x&lt;1000; x++)\n   {\n      customerArray.Add(new Customer(&quot;Customer&quot; + x.ToString()));\n   }\n\n   // Add orders to each Customer object in the ArrayList.\n   foreach(Customer customer1 in customerArray)\n   {\n      for(int y=0; y&lt;15; y++)\n      {\n         customer1.CustomerOrders.Add(new Order(&quot;Order&quot; + y.ToString()));    \n      }\n   }\n\n   // Display a wait cursor while the TreeNodes are being created.\n   Cursor.Current = new Cursor(&quot;MyWait.cur&quot;);\n        \n   // Suppress repainting the TreeView until all the objects have been created.\n   treeView1.BeginUpdate();\n\n   // Clear the TreeView each time the method is called.\n   treeView1.Nodes.Clear();\n\n   // Add a root TreeNode for each Customer object in the ArrayList.\n   foreach(Customer customer2 in customerArray)\n   {\n      treeView1.Nodes.Add(new TreeNode(customer2.CustomerName));\n          \n      // Add a child treenode for each Order object in the current Customer object.\n      foreach(Order order1 in customer2.CustomerOrders)\n      {\n         treeView1.Nodes[customerArray.IndexOf(customer2)].Nodes.Add(\n           new TreeNode(customer2.CustomerName + &quot;.&quot; + order1.OrderID));\n      }\n   }\n\n   // Reset the cursor to the default for all controls.\n   Cursor.Current = Cursors.Default;\n\n   // Begin repainting the TreeView.\n   treeView1.EndUpdate();\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeView#1\">      // The basic Customer class.\n      ref class Customer: public System::Object\n      {\n      private:\n         String^ custName;\n\n      protected:\n         ArrayList^ custOrders;\n\n      public:\n         Customer( String^ customername )\n         {\n            custName = &quot;&quot;;\n            custOrders = gcnew ArrayList;\n            this-&gt;custName = customername;\n         }\n\n\n         property String^ CustomerName \n         {\n            String^ get()\n            {\n               return this-&gt;custName;\n            }\n\n            void set( String^ value )\n            {\n               this-&gt;custName = value;\n            }\n\n         }\n\n         property ArrayList^ CustomerOrders \n         {\n            ArrayList^ get()\n            {\n               return this-&gt;custOrders;\n            }\n\n         }\n\n      };\n\n\n      // End Customer class\n      // The basic customer Order class.\n      ref class Order: public System::Object\n      {\n      private:\n         String^ ordID;\n\n      public:\n         Order( String^ orderid )\n         {\n            ordID = &quot;&quot;;\n            this-&gt;ordID = orderid;\n         }\n\n\n         property String^ OrderID \n         {\n            String^ get()\n            {\n               return this-&gt;ordID;\n            }\n\n            void set( String^ value )\n            {\n               this-&gt;ordID = value;\n            }\n\n         }\n\n      };\n      // End Order class\n\n\n\n      void FillMyTreeView()\n      {\n         // Add customers to the ArrayList of Customer objects.\n         for ( int x = 0; x &lt; 1000; x++ )\n         {\n            customerArray-&gt;Add( gcnew Customer( &quot;Customer &quot; + x ) );\n         }\n         \n         // Add orders to each Customer object in the ArrayList.\n         IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Customer^ customer1 = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n            for ( int y = 0; y &lt; 15; y++ )\n            {\n               customer1-&gt;CustomerOrders-&gt;Add( gcnew Order( &quot;Order &quot; + y ) );\n            }\n         }\n\n         // Display a wait cursor while the TreeNodes are being created.\n         ::Cursor::Current = gcnew System::Windows::Forms::Cursor( &quot;MyWait.cur&quot; );\n         \n         // Suppress repainting the TreeView until all the objects have been created.\n         treeView1-&gt;BeginUpdate();\n         \n         // Clear the TreeView each time the method is called.\n         treeView1-&gt;Nodes-&gt;Clear();\n         \n         // Add a root TreeNode for each Customer object in the ArrayList.\n         myEnum = customerArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Customer^ customer2 = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n            treeView1-&gt;Nodes-&gt;Add( gcnew TreeNode( customer2-&gt;CustomerName ) );\n            \n            // Add a child treenode for each Order object in the current Customer object.\n            IEnumerator^ myEnum = customer2-&gt;CustomerOrders-&gt;GetEnumerator();\n            while ( myEnum-&gt;MoveNext() )\n            {\n               Order^ order1 = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n               treeView1-&gt;Nodes[ customerArray-&gt;IndexOf( customer2 ) ]-&gt;Nodes-&gt;Add( gcnew TreeNode( customer2-&gt;CustomerName + &quot;.&quot; + order1-&gt;OrderID ) );\n            }\n         }\n         \n         // Reset the cursor to the default for all controls.\n         ::Cursor::Current = Cursors::Default;\n         \n         // Begin repainting the TreeView.\n         treeView1-&gt;EndUpdate();\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_CollapseAll\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_CollapseAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CollapseAll()</div>        \r\n          </div>\r\n    \r\n            <p>Collapses all the tree nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CollapseAll ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CollapseAll method collapses all the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects, which includes all the child tree nodes, that are in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The state of a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> persists. For example, suppose that you call the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Expand_\" data-linktype=\"relative-path\">Expand</a> method for a root tree node. If the child tree nodes were not previously collapsed, they will appear in their previously-expanded state. Calling the CollapseAll method ensures that all the tree nodes appear in the collapsed state.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to change the collapse state of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> so that all the checked nodes are visible. First, all the nodes are collapsed, and a handler is added for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeExpand\" data-linktype=\"relative-path\">BeforeExpand</a> event. Next, all the nodes are expanded. The <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeExpand\" data-linktype=\"relative-path\">BeforeExpand</a> event handler determines whether a given node has child nodes that are checked. If a node does not have checked children, the expansion is canceled for that node. In order to allow standard node expansion when the plus sign next to a node is clicked, the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeExpand\" data-linktype=\"relative-path\">BeforeExpand</a> event handler is then removed.  </p>\n<p> This behavior can also be implemented by handling the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCollapse\" data-linktype=\"relative-path\">BeforeCollapse</a> event, as illustrated in the example for that topic.  </p>\n<p> For the complete example, see the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_CheckBoxes_\" data-linktype=\"relative-path\">CheckBoxes</a> reference topic.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewShowCheckedNodes1#2\">    Private Sub showCheckedNodesButton_Click(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Disable redrawing of treeView1 to prevent flickering \n        &#39; while changes are made.\n        treeView1.BeginUpdate()\n\n        &#39; Collapse all nodes of treeView1.\n        treeView1.CollapseAll()\n\n        &#39; Add the CheckForCheckedChildren event handler to the BeforeExpand event.\n        AddHandler treeView1.BeforeExpand, AddressOf CheckForCheckedChildren\n\n        &#39; Expand all nodes of treeView1. Nodes without checked children are \n        &#39; prevented from expanding by the checkForCheckedChildren event handler.\n        treeView1.ExpandAll()\n\n        &#39; Remove the checkForCheckedChildren event handler from the BeforeExpand \n        &#39; event so manual node expansion will work correctly.\n        RemoveHandler treeView1.BeforeExpand, AddressOf CheckForCheckedChildren\n\n        &#39; Enable redrawing of treeView1.\n        treeView1.EndUpdate()\n    End Sub &#39;showCheckedNodesButton_Click\n\n    &#39; Prevent expansion of a node that does not have any checked child nodes.\n    Private Sub CheckForCheckedChildren(ByVal sender As Object, ByVal e As TreeViewCancelEventArgs)\n        If Not HasCheckedChildNodes(e.Node) Then\n            e.Cancel = True\n        End If\n    End Sub &#39;CheckForCheckedChildren\n\n    &#39; Returns a value indicating whether the specified \n    &#39; TreeNode has checked child nodes.\n    Private Function HasCheckedChildNodes(ByVal node As TreeNode) As Boolean\n        If node.Nodes.Count = 0 Then\n            Return False\n        End If\n        Dim childNode As TreeNode\n        For Each childNode In node.Nodes\n            If childNode.Checked Then\n                Return True\n            End If\n            &#39; Recursively check the children of the current child node.\n            If HasCheckedChildNodes(childNode) Then\n                Return True\n            End If\n        Next childNode\n        Return False\n    End Function &#39;HasCheckedChildNodes\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewShowCheckedNodes1#2\">private:\n   void showCheckedNodesButton_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      // Disable redrawing of treeView1 to prevent flickering \n      // while changes are made.\n      treeView1-&gt;BeginUpdate();\n      \n      // Collapse all nodes of treeView1.\n      treeView1-&gt;CollapseAll();\n      \n      // Add the checkForCheckedChildren event handler to the BeforeExpand event.\n      treeView1-&gt;BeforeExpand += checkForCheckedChildren;\n      \n      // Expand all nodes of treeView1. Nodes without checked children are \n      // prevented from expanding by the checkForCheckedChildren event handler.\n      treeView1-&gt;ExpandAll();\n      \n      // Remove the checkForCheckedChildren event handler from the BeforeExpand \n      // event so manual node expansion will work correctly.\n      treeView1-&gt;BeforeExpand -= checkForCheckedChildren;\n      \n      // Enable redrawing of treeView1.\n      treeView1-&gt;EndUpdate();\n   }\n\n   // Prevent expansion of a node that does not have any checked child nodes.\n   void CheckForCheckedChildrenHandler( Object^ /*sender*/, TreeViewCancelEventArgs^ e )\n   {\n      if (  !HasCheckedChildNodes( e-&gt;Node ) )\n            e-&gt;Cancel = true;\n   }\n\n\n   // Returns a value indicating whether the specified \n   // TreeNode has checked child nodes.\n   bool HasCheckedChildNodes( TreeNode^ node )\n   {\n      if ( node-&gt;Nodes-&gt;Count == 0 )\n            return false;\n\n      System::Collections::IEnumerator^ myEnum = node-&gt;Nodes-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         TreeNode^ childNode = safe_cast&lt;TreeNode^&gt;(myEnum-&gt;Current);\n         if ( childNode-&gt;Checked )\n                  return true;\n\n         // Recursively check the children of the current child node.\n         if ( HasCheckedChildNodes( childNode ) )\n                  return true;\n      }\n\n      return false;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewShowCheckedNodes1#2\">    private void showCheckedNodesButton_Click(object sender, EventArgs e)\n    {\n        // Disable redrawing of treeView1 to prevent flickering \n        // while changes are made.\n        treeView1.BeginUpdate();\n\n        // Collapse all nodes of treeView1.\n        treeView1.CollapseAll();\n\n        // Add the checkForCheckedChildren event handler to the BeforeExpand event.\n        treeView1.BeforeExpand += checkForCheckedChildren;\n\n        // Expand all nodes of treeView1. Nodes without checked children are \n        // prevented from expanding by the checkForCheckedChildren event handler.\n        treeView1.ExpandAll();\n\n        // Remove the checkForCheckedChildren event handler from the BeforeExpand \n        // event so manual node expansion will work correctly.\n        treeView1.BeforeExpand -= checkForCheckedChildren;\n\n        // Enable redrawing of treeView1.\n        treeView1.EndUpdate();\n    }\n\n    // Prevent expansion of a node that does not have any checked child nodes.\n    private void CheckForCheckedChildrenHandler(object sender, \n        TreeViewCancelEventArgs e)\n    {\n        if (!HasCheckedChildNodes(e.Node)) e.Cancel = true;\n    }\n\n    // Returns a value indicating whether the specified \n    // TreeNode has checked child nodes.\n    private bool HasCheckedChildNodes(TreeNode node)\n    {\n        if (node.Nodes.Count == 0) return false;\n        foreach (TreeNode childNode in node.Nodes)\n        {\n            if (childNode.Checked) return true;\n            // Recursively check the children of the current child node.\n            if (HasCheckedChildNodes(childNode)) return true;\n        }\n        return false;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_CreateHandle\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_CreateHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateHandle()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a handle for the control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void CreateHandle ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by the public <code>Dispose</code> method and the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method. <code>Dispose</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is true, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> references. This method invokes the <code>Dispose</code> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_EndUpdate\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_EndUpdate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndUpdate()</div>        \r\n          </div>\r\n    \r\n            <p>Enables the redrawing of the tree view.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void EndUpdate ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To maintain performance while items are added one at a time to the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>, call the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeginUpdate_\" data-linktype=\"relative-path\">BeginUpdate</a> method. The <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeginUpdate_\" data-linktype=\"relative-path\">BeginUpdate</a> method prevents the control from painting until the EndUpdate method is called.  </p>\n<p> The preferred way to add items to a tree view control is to use the <a class=\"xref\" href=\"system.windows.forms.treenodecollection#System_Windows_Forms_TreeNodeCollection_AddRange_\" data-linktype=\"relative-path\">AddRange</a> method to add an array of tree node items to a tree view. However, if you want to add items one at a time, use the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeginUpdate_\" data-linktype=\"relative-path\">BeginUpdate</a> method to prevent the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control from painting during the add operations. To allow control the control to resume painting, call the EndUpdate method when all the tree nodes have been added to the tree view.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays customer information in a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control. The root tree nodes display customer names, and the child tree nodes display the order numbers assigned to each customer. In this example, 1,000 customers are displayed with 15 orders each. The repainting of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is suppressed by using the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeginUpdate_\" data-linktype=\"relative-path\">BeginUpdate</a> and EndUpdate methods, and a wait <a class=\"xref\" href=\"system.windows.forms.cursor\" data-linktype=\"relative-path\">Cursor</a> is displayed while the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> creates and paints the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects. This example requires that you have a <code>Customer</code> object that can hold a collection of <code>Order</code> objects. It also requires that you have a cursor file that is named <code>MyWait.cur</code> in the application directory and that you have created an instance of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control on a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeView#1\">      Public Class Customer\n         Inherits [Object]\n         Private custName As String = &quot;&quot;\n         Friend custOrders As New ArrayList()\n\n         Public Sub New(ByVal customername As String)\n            Me.custName = customername\n         End Sub\n\n         Public Property CustomerName() As String\n            Get\n               Return Me.custName\n            End Get\n            Set(ByVal Value As String)\n               Me.custName = Value\n            End Set\n         End Property\n\n         Public ReadOnly Property CustomerOrders() As ArrayList\n            Get\n               Return Me.custOrders\n            End Get\n         End Property\n      End Class &#39;End Customer class\n\n\n      Public Class Order\n         Inherits [Object]\n         Private ordID As String\n\n         Public Sub New(ByVal orderid As String)\n            Me.ordID = orderid\n         End Sub &#39;New\n\n         Public Property OrderID() As String\n            Get\n               Return Me.ordID\n            End Get\n            Set(ByVal Value As String)\n               Me.ordID = Value\n            End Set\n         End Property\n      End Class &#39; End Order class\n\n      &#39; Create a new ArrayList to hold the Customer objects.\n      Private customerArray As New ArrayList()\n\n      Private Sub FillMyTreeView()\n         &#39; Add customers to the ArrayList of Customer objects.\n         Dim x As Integer\n         For x = 0 To 999\n            customerArray.Add(New Customer(&quot;Customer&quot; + x.ToString()))\n         Next x\n\n         &#39; Add orders to each Customer object in the ArrayList.\n         Dim customer1 As Customer\n         For Each customer1 In customerArray\n            Dim y As Integer\n            For y = 0 To 14\n               customer1.CustomerOrders.Add(New Order(&quot;Order&quot; + y.ToString()))\n            Next y\n         Next customer1\n\n         &#39; Display a wait cursor while the TreeNodes are being created.\n         Cursor.Current = New Cursor(&quot;MyWait.cur&quot;)\n\n         &#39; Suppress repainting the TreeView until all the objects have been created.\n         treeView1.BeginUpdate()\n\n         &#39; Clear the TreeView each time the method is called.\n         treeView1.Nodes.Clear()\n\n         &#39; Add a root TreeNode for each Customer object in the ArrayList.\n         Dim customer2 As Customer\n         For Each customer2 In customerArray\n            treeView1.Nodes.Add(New TreeNode(customer2.CustomerName))\n\n            &#39; Add a child TreeNode for each Order object in the current Customer object.\n            Dim order1 As Order\n            For Each order1 In customer2.CustomerOrders\n               treeView1.Nodes(customerArray.IndexOf(customer2)).Nodes.Add( _\n          New TreeNode(customer2.CustomerName + &quot;.&quot; + order1.OrderID))\n            Next order1\n         Next customer2\n\n         &#39; Reset the cursor to the default for all controls.\n         Cursor.Current = System.Windows.Forms.Cursors.Default\n\n         &#39; Begin repainting the TreeView.\n         treeView1.EndUpdate()\n      End Sub &#39;FillMyTreeView\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeView#1\">\n// The basic Customer class.\npublic class Customer : System.Object\n{\n   private string custName = &quot;&quot;;\n   protected ArrayList custOrders = new ArrayList();\n\n   public Customer(string customername)\n   {\n      this.custName = customername;\n   }\n\n   public string CustomerName\n   {      \n      get{return this.custName;}\n      set{this.custName = value;}\n   }\n\n   public ArrayList CustomerOrders \n   {\n      get{return this.custOrders;}\n   }\n\n} // End Customer class \n\n\n// The basic customer Order class.\npublic class Order : System.Object\n{\n   private string ordID = &quot;&quot;;\n\n   public Order(string orderid)\n   {\n      this.ordID = orderid;\n   }\n\n   public string OrderID\n   {      \n      get{return this.ordID;}\n      set{this.ordID = value;}\n   }\n\n} // End Order class\n\n// Create a new ArrayList to hold the Customer objects.\nprivate ArrayList customerArray = new ArrayList(); \n\nprivate void FillMyTreeView()\n{\n   // Add customers to the ArrayList of Customer objects.\n   for(int x=0; x&lt;1000; x++)\n   {\n      customerArray.Add(new Customer(&quot;Customer&quot; + x.ToString()));\n   }\n\n   // Add orders to each Customer object in the ArrayList.\n   foreach(Customer customer1 in customerArray)\n   {\n      for(int y=0; y&lt;15; y++)\n      {\n         customer1.CustomerOrders.Add(new Order(&quot;Order&quot; + y.ToString()));    \n      }\n   }\n\n   // Display a wait cursor while the TreeNodes are being created.\n   Cursor.Current = new Cursor(&quot;MyWait.cur&quot;);\n        \n   // Suppress repainting the TreeView until all the objects have been created.\n   treeView1.BeginUpdate();\n\n   // Clear the TreeView each time the method is called.\n   treeView1.Nodes.Clear();\n\n   // Add a root TreeNode for each Customer object in the ArrayList.\n   foreach(Customer customer2 in customerArray)\n   {\n      treeView1.Nodes.Add(new TreeNode(customer2.CustomerName));\n          \n      // Add a child treenode for each Order object in the current Customer object.\n      foreach(Order order1 in customer2.CustomerOrders)\n      {\n         treeView1.Nodes[customerArray.IndexOf(customer2)].Nodes.Add(\n           new TreeNode(customer2.CustomerName + &quot;.&quot; + order1.OrderID));\n      }\n   }\n\n   // Reset the cursor to the default for all controls.\n   Cursor.Current = Cursors.Default;\n\n   // Begin repainting the TreeView.\n   treeView1.EndUpdate();\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeView#1\">      // The basic Customer class.\n      ref class Customer: public System::Object\n      {\n      private:\n         String^ custName;\n\n      protected:\n         ArrayList^ custOrders;\n\n      public:\n         Customer( String^ customername )\n         {\n            custName = &quot;&quot;;\n            custOrders = gcnew ArrayList;\n            this-&gt;custName = customername;\n         }\n\n\n         property String^ CustomerName \n         {\n            String^ get()\n            {\n               return this-&gt;custName;\n            }\n\n            void set( String^ value )\n            {\n               this-&gt;custName = value;\n            }\n\n         }\n\n         property ArrayList^ CustomerOrders \n         {\n            ArrayList^ get()\n            {\n               return this-&gt;custOrders;\n            }\n\n         }\n\n      };\n\n\n      // End Customer class\n      // The basic customer Order class.\n      ref class Order: public System::Object\n      {\n      private:\n         String^ ordID;\n\n      public:\n         Order( String^ orderid )\n         {\n            ordID = &quot;&quot;;\n            this-&gt;ordID = orderid;\n         }\n\n\n         property String^ OrderID \n         {\n            String^ get()\n            {\n               return this-&gt;ordID;\n            }\n\n            void set( String^ value )\n            {\n               this-&gt;ordID = value;\n            }\n\n         }\n\n      };\n      // End Order class\n\n\n\n      void FillMyTreeView()\n      {\n         // Add customers to the ArrayList of Customer objects.\n         for ( int x = 0; x &lt; 1000; x++ )\n         {\n            customerArray-&gt;Add( gcnew Customer( &quot;Customer &quot; + x ) );\n         }\n         \n         // Add orders to each Customer object in the ArrayList.\n         IEnumerator^ myEnum = customerArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Customer^ customer1 = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n            for ( int y = 0; y &lt; 15; y++ )\n            {\n               customer1-&gt;CustomerOrders-&gt;Add( gcnew Order( &quot;Order &quot; + y ) );\n            }\n         }\n\n         // Display a wait cursor while the TreeNodes are being created.\n         ::Cursor::Current = gcnew System::Windows::Forms::Cursor( &quot;MyWait.cur&quot; );\n         \n         // Suppress repainting the TreeView until all the objects have been created.\n         treeView1-&gt;BeginUpdate();\n         \n         // Clear the TreeView each time the method is called.\n         treeView1-&gt;Nodes-&gt;Clear();\n         \n         // Add a root TreeNode for each Customer object in the ArrayList.\n         myEnum = customerArray-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Customer^ customer2 = safe_cast&lt;Customer^&gt;(myEnum-&gt;Current);\n            treeView1-&gt;Nodes-&gt;Add( gcnew TreeNode( customer2-&gt;CustomerName ) );\n            \n            // Add a child treenode for each Order object in the current Customer object.\n            IEnumerator^ myEnum = customer2-&gt;CustomerOrders-&gt;GetEnumerator();\n            while ( myEnum-&gt;MoveNext() )\n            {\n               Order^ order1 = safe_cast&lt;Order^&gt;(myEnum-&gt;Current);\n               treeView1-&gt;Nodes[ customerArray-&gt;IndexOf( customer2 ) ]-&gt;Nodes-&gt;Add( gcnew TreeNode( customer2-&gt;CustomerName + &quot;.&quot; + order1-&gt;OrderID ) );\n            }\n         }\n         \n         // Reset the cursor to the default for all controls.\n         ::Cursor::Current = Cursors::Default;\n         \n         // Begin repainting the TreeView.\n         treeView1-&gt;EndUpdate();\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_ExpandAll\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_ExpandAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExpandAll()</div>        \r\n          </div>\r\n    \r\n            <p>Expands all the tree nodes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ExpandAll ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ExpandAll method expands all the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects, which includes all the child tree nodes, that are in the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The state of a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> persists. For example, suppose that you call the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_ExpandAll_\" data-linktype=\"relative-path\">ExpandAll</a> method, and then the individual root tree nodes are collapsed. The child tree nodes have not been collapsed, and will appear in their previously-expanded state when the root tree nodes are expanded again. Calling the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_CollapseAll_\" data-linktype=\"relative-path\">CollapseAll</a> method ensures that all the tree nodes appear in the collapsed state.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example expands all the tree nodes in a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control when a <a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked, and collapses the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_FirstNode_\" data-linktype=\"relative-path\">FirstNode</a> when the <a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is cleared. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a>, and a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that has several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects (preferably with three or more levels).  </p>\n<pre><code class=\"lang-cpp\" name=\"TreeNode_ForeColor#1\">   void myCheckBox_CheckedChanged( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      \n      // If the check box is checked, expand all the tree nodes.\n      if ( myCheckBox-&gt;Checked == true )\n      {\n         myTreeView-&gt;ExpandAll();\n      }\n      else\n      {\n         \n         // If the check box is not cheked, collapse the first tree node.\n         myTreeView-&gt;Nodes[ 0 ]-&gt;FirstNode-&gt;Collapse();\n         MessageBox::Show( &quot;The first and last  node of CutomerList root node is collapsed&quot; );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_ForeColor#1\">private void myCheckBox_CheckedChanged(object sender, System.EventArgs e)\n{\n   // If the check box is checked, expand all the tree nodes.\n   if (myCheckBox.Checked == true)\n   {\n      myTreeView.ExpandAll();\n   }\n   else\n   {\n      // If the check box is not cheked, collapse the first tree node.\n      myTreeView.Nodes[0].FirstNode.Collapse();\n      MessageBox.Show(&quot;The first and last  node of CutomerList root node is collapsed&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_ForeColor#1\">Private Sub myCheckBox_CheckedChanged(ByVal sender As Object, _\n   ByVal e As System.EventArgs) Handles myCheckBox.CheckedChanged\n   &#39; If the check box is checked, expand all the tree nodes.\n   If myCheckBox.Checked = True Then\n      myTreeView.ExpandAll()\n   Else\n      &#39; If the check box is not cheked, collapse the first tree node.\n      myTreeView.Nodes(0).FirstNode.Collapse()\n      MessageBox.Show(&quot;The first and last node of CutomerList root node is collapsed&quot;)\n   End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_GetItemRenderStyles_System_Windows_Forms_TreeNode_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_GetItemRenderStyles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetItemRenderStyles(TreeNode,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.windows.forms.ownerdrawpropertybag\" data-linktype=\"relative-path\">OwnerDrawPropertyBag</a> for the specified <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Windows.Forms.OwnerDrawPropertyBag GetItemRenderStyles (System.Windows.Forms.TreeNode node, int state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>node</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> for which to return an <a class=\"xref\" href=\"system.windows.forms.ownerdrawpropertybag\" data-linktype=\"relative-path\">OwnerDrawPropertyBag</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The visible state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.ownerdrawpropertybag\" data-linktype=\"relative-path\">OwnerDrawPropertyBag</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.ownerdrawpropertybag\" data-linktype=\"relative-path\">OwnerDrawPropertyBag</a> for the specified <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_GetNodeAt_System_Drawing_Point_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_GetNodeAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNodeAt(Point)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the tree node that is at the specified point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNode GetNodeAt (System.Drawing.Point pt);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> to evaluate and retrieve the node from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> at the specified point, in tree view (client) coordinates, or <code>null</code> if there is no node at that location.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can pass the <a class=\"xref\" href=\"system.windows.forms.mouseeventargs#System_Windows_Forms_MouseEventArgs_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.forms.mouseeventargs#System_Windows_Forms_MouseEventArgs_Y_\" data-linktype=\"relative-path\">Y</a> coordinates of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event as the <a class=\"xref\" href=\"system.drawing.point#System_Drawing_Point_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.drawing.point#System_Drawing_Point_Y_\" data-linktype=\"relative-path\">Y</a> values of a new <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_GetNodeAt_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_GetNodeAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNodeAt(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the tree node at the point with the specified coordinates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeNode GetNodeAt (int x, int y);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Point.X*</span> position to evaluate and retrieve the node from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Drawing.Point.Y*</span> position to evaluate and retrieve the node from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> at the specified location, in tree view (client) coordinates, or <code>null</code> if there is no node at that location.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can pass the <a class=\"xref\" href=\"system.windows.forms.mouseeventargs#System_Windows_Forms_MouseEventArgs_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.forms.mouseeventargs#System_Windows_Forms_MouseEventArgs_Y_\" data-linktype=\"relative-path\">Y</a> coordinates of the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event as the <code>x</code> and <code>y</code> parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lets the user edit nonroot tree nodes by using a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a>. When the user right clicks the mouse, the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> at that position is determined and stored in a variable named <code>mySelectedNode</code>. If a nonroot tree node was selected, it is put into an editable state, which allows the user to edit the node label. After the user stops editing the tree node label, the new label text is evaluated and saved. For this example, several characters are considered not valid in the label text. If one of the invalid characters is in the label string, or the string is empty, the user is notified of the error and the label is returned to its previous text.  </p>\n<pre><code class=\"lang-cpp\" name=\"classic treenode.beginedit example#1\">   /* Get the tree node under the mouse pointer and \n      save it in the mySelectedNode variable. */\nprivate:\n   void treeView1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      mySelectedNode = treeView1-&gt;GetNodeAt( e-&gt;X, e-&gt;Y );\n   }\n\n   void menuItem1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      if ( mySelectedNode != nullptr &amp;&amp; mySelectedNode-&gt;Parent != nullptr )\n      {\n         treeView1-&gt;SelectedNode = mySelectedNode;\n         treeView1-&gt;LabelEdit = true;\n         if (  !mySelectedNode-&gt;IsEditing )\n         {\n            mySelectedNode-&gt;BeginEdit();\n         }\n      }\n      else\n      {\n         MessageBox::Show( String::Concat( &quot;No tree node selected or selected node is a root node.<br>&quot;,\n            &quot;Editing of root nodes is not allowed.&quot; ), &quot;Invalid selection&quot; );\n      }\n   }\n\n   void treeView1_AfterLabelEdit( Object^ /*sender*/,\n      System::Windows::Forms::NodeLabelEditEventArgs^ e )\n   {\n      if ( e-&gt;Label != nullptr )\n      {\n         if ( e-&gt;Label-&gt;Length &gt; 0 )\n         {\n            array&lt;Char&gt;^ temp0 = {&#39;@&#39;,&#39;.&#39;,&#39;,&#39;,&#39;!&#39;};\n            if ( e-&gt;Label-&gt;IndexOfAny( temp0 ) == -1 )\n            {\n               \n               // Stop editing without canceling the label change.\n               e-&gt;Node-&gt;EndEdit( false );\n            }\n            else\n            {\n               /* Cancel the label edit action, inform the user, and \n                  place the node in edit mode again. */\n               e-&gt;CancelEdit = true;\n               MessageBox::Show( String::Concat( &quot;Invalid tree node label.<br>&quot;,\n                  &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot; ),\n                  &quot;Node Label Edit&quot; );\n               e-&gt;Node-&gt;BeginEdit();\n            }\n         }\n         else\n         {\n            /* Cancel the label edit action, inform the user, and \n               place the node in edit mode again. */\n            e-&gt;CancelEdit = true;\n            MessageBox::Show( &quot;Invalid tree node label.<br>The label cannot be blank&quot;,\n               &quot;Node Label Edit&quot; );\n            e-&gt;Node-&gt;BeginEdit();\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"classic treenode.beginedit example#1\">/* Get the tree node under the mouse pointer and \n   save it in the mySelectedNode variable. */\nprivate void treeView1_MouseDown(object sender, \n  System.Windows.Forms.MouseEventArgs e)\n{\n   mySelectedNode = treeView1.GetNodeAt(e.X, e.Y);\n}\n\nprivate void menuItem1_Click(object sender, System.EventArgs e)\n{\n   if (mySelectedNode != null &amp;&amp; mySelectedNode.Parent != null)\n   {\n      treeView1.SelectedNode = mySelectedNode;\n      treeView1.LabelEdit = true;\n      if(!mySelectedNode.IsEditing)\n      {\n         mySelectedNode.BeginEdit();\n      }\n   }\n   else\n   {\n      MessageBox.Show(&quot;No tree node selected or selected node is a root node.<br>&quot; + \n         &quot;Editing of root nodes is not allowed.&quot;, &quot;Invalid selection&quot;);\n   }\n}\n\nprivate void treeView1_AfterLabelEdit(object sender, \n         System.Windows.Forms.NodeLabelEditEventArgs e)\n{\n   if (e.Label != null)\n   {\n     if(e.Label.Length &gt; 0)\n     {\n        if (e.Label.IndexOfAny(new char[]{&#39;@&#39;, &#39;.&#39;, &#39;,&#39;, &#39;!&#39;}) == -1)\n        {\n           // Stop editing without canceling the label change.\n           e.Node.EndEdit(false);\n        }\n        else\n        {\n           /* Cancel the label edit action, inform the user, and \n              place the node in edit mode again. */\n           e.CancelEdit = true;\n           MessageBox.Show(&quot;Invalid tree node label.<br>&quot; + \n              &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot;, \n              &quot;Node Label Edit&quot;);\n           e.Node.BeginEdit();\n        }\n     }\n     else\n     {\n        /* Cancel the label edit action, inform the user, and \n           place the node in edit mode again. */\n        e.CancelEdit = true;\n        MessageBox.Show(&quot;Invalid tree node label.<br>The label cannot be blank&quot;, \n           &quot;Node Label Edit&quot;);\n        e.Node.BeginEdit();\n     }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"classic treenode.beginedit example#1\">&#39; Get the tree node under the mouse pointer and\n&#39; save it in the mySelectedNode variable. \nPrivate Sub treeView1_MouseDown(sender As Object, _\n  e As System.Windows.Forms.MouseEventArgs)\n        \n   mySelectedNode = treeView1.GetNodeAt(e.X, e.Y)\nEnd Sub    \n    \nPrivate Sub menuItem1_Click(sender As Object, e As System.EventArgs)\n   If Not (mySelectedNode Is Nothing) And _\n     Not (mySelectedNode.Parent Is Nothing) Then\n      treeView1.SelectedNode = mySelectedNode\n      treeView1.LabelEdit = True\n      If Not mySelectedNode.IsEditing Then\n         mySelectedNode.BeginEdit()\n      End If\n   Else\n      MessageBox.Show(&quot;No tree node selected or selected node is a root node.&quot; &amp; _\n        Microsoft.VisualBasic.ControlChars.Cr &amp; _\n        &quot;Editing of root nodes is not allowed.&quot;, &quot;Invalid selection&quot;)\n   End If\nEnd Sub    \n    \nPrivate Sub treeView1_AfterLabelEdit(sender As Object, _\n  e As System.Windows.Forms.NodeLabelEditEventArgs)\n   If Not (e.Label Is Nothing) Then\n      If e.Label.Length &gt; 0 Then\n         If e.Label.IndexOfAny(New Char() {&quot;@&quot;c, &quot;.&quot;c, &quot;,&quot;c, &quot;!&quot;c}) = -1 Then\n            &#39; Stop editing without canceling the label change.\n            e.Node.EndEdit(False)\n         Else\n            &#39; Cancel the label edit action, inform the user, and\n            &#39; place the node in edit mode again. \n            e.CancelEdit = True\n            MessageBox.Show(&quot;Invalid tree node label.&quot; &amp; _\n              Microsoft.VisualBasic.ControlChars.Cr &amp; _\n              &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot;, _\n              &quot;Node Label Edit&quot;)\n            e.Node.BeginEdit()\n         End If\n      Else\n         &#39; Cancel the label edit action, inform the user, and\n         &#39; place the node in edit mode again. \n         e.CancelEdit = True\n         MessageBox.Show(&quot;Invalid tree node label.&quot; &amp; _\n           Microsoft.VisualBasic.ControlChars.Cr &amp; _\n           &quot;The label cannot be blank&quot;, &quot;Node Label Edit&quot;)\n           e.Node.BeginEdit()\n      End If\n   End If\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_GetNodeCount_System_Boolean_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_GetNodeCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNodeCount(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of tree nodes, optionally including those in all subtrees, assigned to the tree view control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetNodeCount (bool includeSubTrees);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>includeSubTrees</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to count the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> items that the subtrees contain; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of tree nodes, optionally including those in all subtrees, assigned to the tree view control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>includeSubTrees</code> is <code>true</code>, the result is the number of all the tree nodes in the entire tree structure.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sets the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_PathSeparator_\" data-linktype=\"relative-path\">PathSeparator</a> property of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> and displays the number of child tree nodes that are contained in the <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> of the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_SelectedNode_\" data-linktype=\"relative-path\">SelectedNode</a>. The percentage of child tree node to total tree nodes in the tree view control is also displayed. This example requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a>, and a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control with a <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> that has several <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects (preferably with three or more levels).  </p>\n<pre><code class=\"lang-cpp\" name=\"TreeNode_ForeColor#2\">   void myButton_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      \n      // Set the tree view&#39;s PathSeparator property.\n      myTreeView-&gt;PathSeparator = &quot;.&quot;;\n      \n      // Get the count of the child tree nodes contained in the SelectedNode.\n      int myNodeCount = myTreeView-&gt;SelectedNode-&gt;GetNodeCount( true );\n      Decimal myChildPercentage = ((Decimal)myNodeCount / (Decimal)myTreeView-&gt;GetNodeCount( true )) * 100;\n      \n      // Display the tree node path and the number of child nodes it and the tree view have.\n      MessageBox::Show( String::Concat( &quot;The &#39;&quot;, myTreeView-&gt;SelectedNode-&gt;FullPath, &quot;&#39; node has &quot;, myNodeCount, &quot; child nodes.<br>That is &quot;, String::Format( &quot;{0:###.##}&quot;, myChildPercentage ), &quot;% of the total tree nodes in the tree view control.&quot; ) );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeNode_ForeColor#2\">private void myButton_Click(object sender, System.EventArgs e)\n{\n   // Set the tree view&#39;s PathSeparator property.\n   myTreeView.PathSeparator = &quot;.&quot;;\n\n   // Get the count of the child tree nodes contained in the SelectedNode.\n   int myNodeCount = myTreeView.SelectedNode.GetNodeCount(true);\n   decimal myChildPercentage = ((decimal)myNodeCount/\n     (decimal)myTreeView.GetNodeCount(true)) * 100;\n\n   // Display the tree node path and the number of child nodes it and the tree view have.\n   MessageBox.Show(&quot;The &#39;&quot; + myTreeView.SelectedNode.FullPath + &quot;&#39; node has &quot; \n     + myNodeCount.ToString() + &quot; child nodes.<br>That is &quot; \n     + string.Format(&quot;{0:###.##}&quot;, myChildPercentage) \n     + &quot;% of the total tree nodes in the tree view control.&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeNode_ForeColor#2\">Private Sub myButton_Click(ByVal sender As Object, _\n  ByVal e As System.EventArgs) Handles myButton.Click\n   &#39; Set the tree view&#39;s PathSeparator property.\n   myTreeView.PathSeparator = &quot;.&quot;\n\n   &#39; Get the count of the child tree nodes contained in the SelectedNode.\n   Dim myNodeCount As Integer = myTreeView.SelectedNode.GetNodeCount(True)\n   Dim myChildPercentage As Decimal = CDec(myNodeCount) / _\n      CDec(myTreeView.GetNodeCount(True)) * 100\n\n   &#39; Display the tree node path and the number of child nodes it and the tree view have.\n   MessageBox.Show((&quot;The &#39;&quot; + myTreeView.SelectedNode.FullPath + &quot;&#39; node has &quot; _\n      + myNodeCount.ToString() + &quot; child nodes.&quot; + Microsoft.VisualBasic.ControlChars.Lf _\n      + &quot;That is &quot; + String.Format(&quot;{0:###.##}&quot;, myChildPercentage) _\n      + &quot;% of the total tree nodes in the tree view control.&quot;))\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_HitTest_System_Drawing_Point_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_HitTest_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HitTest(Point)</div>        \r\n          </div>\r\n    \r\n            <p>Provides node information, given a point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeViewHitTestInfo HitTest (System.Drawing.Point pt);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> at which to retrieve node information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treeviewhittestinfo\" data-linktype=\"relative-path\">TreeViewHitTestInfo</a></div>\r\n                  </div>\r\n                  <p>The node information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to determine whether a point is located in a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> and where within the node the point is located, such as on the label or image area.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_HitTest_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_HitTest_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HitTest(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Provides node information, given x- and y-coordinates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TreeViewHitTestInfo HitTest (int x, int y);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The x-coordinate at which to retrieve node information</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The y-coordinate at which to retrieve node information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treeviewhittestinfo\" data-linktype=\"relative-path\">TreeViewHitTestInfo</a></div>\r\n                  </div>\r\n                  <p>The node information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to determine whether a set of x- and y-coordinates is located in a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> and where within the node the point is located, such as on the label or image area.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example code demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Level_\" data-linktype=\"relative-path\">Level</a>, <a class=\"xref\" href=\"system.windows.forms.treeviewhittestinfo#System_Windows_Forms_TreeViewHitTestInfo_Node_\" data-linktype=\"relative-path\">Node</a>, and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_HitTest_\" data-linktype=\"relative-path\">HitTest</a> members. To run this example, create a Windows Form that contains a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> named <code>treeView1</code> and populate it with several levels of nodes. Paste the following code into the form and associate the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event of <code>treeView1</code> with the <code>treeView1_MouseDown</code> method in this example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#3\">private:\n    void InitialTreeView_MouseDown(Object^ sender, MouseEventArgs^ e)\n    {\n        TreeViewHitTestInfo^ info = initialTreeView-&gt;HitTest(e-&gt;X, e-&gt;Y);\n        TreeNode^ hitNode;\n\n        if (info-&gt;Node != nullptr)\n        {\n            hitNode = info-&gt;Node;\n            MessageBox::Show(hitNode-&gt;Level.ToString());\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#3\">    void treeView1_MouseDown(object sender, MouseEventArgs e)\n    {\n        TreeViewHitTestInfo info = treeView1.HitTest(e.X, e.Y);\n        TreeNode hitNode;\n        if (info.Node != null) {\n            hitNode = info.Node;\n            MessageBox.Show(hitNode.Level.ToString());\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#3\">    Sub treeView1_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs) \n        Dim info As TreeViewHitTestInfo = treeView1.HitTest(e.X, e.Y)\n        Dim hitNode As TreeNode\n        If (info.Node IsNot Nothing) Then\n            hitNode = info.Node\n            MessageBox.Show(hitNode.Level.ToString())\n        End If\n    \n    End Sub &#39;treeView1_MouseDown\n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_IsInputKey_System_Windows_Forms_Keys_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_IsInputKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsInputKey(Keys)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override bool IsInputKey (System.Windows.Forms.Keys keyData);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyData</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keys\" data-linktype=\"relative-path\">Keys</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the Keys values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified key is a regular input key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the user is editing a tree node, the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control treats keys such as ENTER, ESC, HOME, and END as input keys.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnAfterCheck_System_Windows_Forms_TreeViewEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnAfterCheck_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnAfterCheck(TreeViewEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterCheck\" data-linktype=\"relative-path\">AfterCheck</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnAfterCheck (System.Windows.Forms.TreeViewEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treevieweventargs\" data-linktype=\"relative-path\">TreeViewEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treevieweventargs\" data-linktype=\"relative-path\">TreeViewEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnAfterCheck method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnAfterCollapse_System_Windows_Forms_TreeViewEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnAfterCollapse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnAfterCollapse(TreeViewEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterCollapse\" data-linktype=\"relative-path\">AfterCollapse</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnAfterCollapse (System.Windows.Forms.TreeViewEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treevieweventargs\" data-linktype=\"relative-path\">TreeViewEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treevieweventargs\" data-linktype=\"relative-path\">TreeViewEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnAfterCollapse method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnAfterExpand_System_Windows_Forms_TreeViewEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnAfterExpand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnAfterExpand(TreeViewEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterExpand\" data-linktype=\"relative-path\">AfterExpand</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnAfterExpand (System.Windows.Forms.TreeViewEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treevieweventargs\" data-linktype=\"relative-path\">TreeViewEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treevieweventargs\" data-linktype=\"relative-path\">TreeViewEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnAfterExpand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnAfterLabelEdit_System_Windows_Forms_NodeLabelEditEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnAfterLabelEdit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnAfterLabelEdit(NodeLabelEditEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterLabelEdit\" data-linktype=\"relative-path\">AfterLabelEdit</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnAfterLabelEdit (System.Windows.Forms.NodeLabelEditEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.nodelabelediteventargs\" data-linktype=\"relative-path\">NodeLabelEditEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.nodelabelediteventargs\" data-linktype=\"relative-path\">NodeLabelEditEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnAfterLabelEdit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnAfterSelect_System_Windows_Forms_TreeViewEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnAfterSelect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnAfterSelect(TreeViewEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterSelect\" data-linktype=\"relative-path\">AfterSelect</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnAfterSelect (System.Windows.Forms.TreeViewEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treevieweventargs\" data-linktype=\"relative-path\">TreeViewEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treevieweventargs\" data-linktype=\"relative-path\">TreeViewEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnAfterSelect method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnBeforeCheck_System_Windows_Forms_TreeViewCancelEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnBeforeCheck_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnBeforeCheck(TreeViewCancelEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCheck\" data-linktype=\"relative-path\">BeforeCheck</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnBeforeCheck (System.Windows.Forms.TreeViewCancelEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treeviewcanceleventargs\" data-linktype=\"relative-path\">TreeViewCancelEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treeviewcanceleventargs\" data-linktype=\"relative-path\">TreeViewCancelEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnBeforeCheck method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnBeforeCollapse_System_Windows_Forms_TreeViewCancelEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnBeforeCollapse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnBeforeCollapse(TreeViewCancelEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCollapse\" data-linktype=\"relative-path\">BeforeCollapse</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnBeforeCollapse (System.Windows.Forms.TreeViewCancelEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treeviewcanceleventargs\" data-linktype=\"relative-path\">TreeViewCancelEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treeviewcanceleventargs\" data-linktype=\"relative-path\">TreeViewCancelEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnBeforeCollapse method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnBeforeExpand_System_Windows_Forms_TreeViewCancelEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnBeforeExpand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnBeforeExpand(TreeViewCancelEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeExpand\" data-linktype=\"relative-path\">BeforeExpand</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnBeforeExpand (System.Windows.Forms.TreeViewCancelEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treeviewcanceleventargs\" data-linktype=\"relative-path\">TreeViewCancelEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treeviewcanceleventargs\" data-linktype=\"relative-path\">TreeViewCancelEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnBeforeExpand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnBeforeLabelEdit_System_Windows_Forms_NodeLabelEditEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnBeforeLabelEdit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnBeforeLabelEdit(NodeLabelEditEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeLabelEdit\" data-linktype=\"relative-path\">BeforeLabelEdit</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnBeforeLabelEdit (System.Windows.Forms.NodeLabelEditEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.nodelabelediteventargs\" data-linktype=\"relative-path\">NodeLabelEditEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.nodelabelediteventargs\" data-linktype=\"relative-path\">NodeLabelEditEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnBeforeLabelEdit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnBeforeSelect_System_Windows_Forms_TreeViewCancelEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnBeforeSelect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnBeforeSelect(TreeViewCancelEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeSelect\" data-linktype=\"relative-path\">BeforeSelect</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnBeforeSelect (System.Windows.Forms.TreeViewCancelEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treeviewcanceleventargs\" data-linktype=\"relative-path\">TreeViewCancelEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treeviewcanceleventargs\" data-linktype=\"relative-path\">TreeViewCancelEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnBeforeSelect method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnDrawNode_System_Windows_Forms_DrawTreeNodeEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnDrawNode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDrawNode(DrawTreeNodeEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnDrawNode (System.Windows.Forms.DrawTreeNodeEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs\" data-linktype=\"relative-path\">DrawTreeNodeEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs\" data-linktype=\"relative-path\">DrawTreeNodeEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnDrawNode method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnHandleCreated_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnHandleCreated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnHandleCreated(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Overrides <span class=\"xref\">stem.Windows.Forms.Control.OnHandleCreated*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void OnHandleCreated (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnHandleCreated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnHandleDestroyed_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnHandleDestroyed_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnHandleDestroyed(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Overrides <span class=\"xref\">stem.Windows.Forms.Control.OnHandleDestroyed*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void OnHandleDestroyed (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnHandleDestroyed method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnItemDrag_System_Windows_Forms_ItemDragEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnItemDrag_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnItemDrag(ItemDragEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_ItemDrag\" data-linktype=\"relative-path\">ItemDrag</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnItemDrag (System.Windows.Forms.ItemDragEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.itemdrageventargs\" data-linktype=\"relative-path\">ItemDragEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.windows.forms.itemdrageventargs\" data-linktype=\"relative-path\">ItemDragEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnItemDrag method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnKeyDown_System_Windows_Forms_KeyEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnKeyDown_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnKeyDown(KeyEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyDown\" data-linktype=\"relative-path\">KeyDown</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_CheckBoxes_\" data-linktype=\"relative-path\">CheckBoxes</a> property is set to <code>true</code> and the <a class=\"xref\" href=\"system.windows.forms.keyeventargs#System_Windows_Forms_KeyEventArgs_Handled_\" data-linktype=\"relative-path\">Handled</a> property is set to <code>false</code>, the OnKeyDown method switches between selecting and clearing the check box when the user presses the SPACEBAR.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnKeyDown method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnKeyPress_System_Windows_Forms_KeyPressEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnKeyPress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnKeyPress(KeyPressEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_KeyPress\" data-linktype=\"relative-path\">KeyPress</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keypresseventargs\" data-linktype=\"relative-path\">KeyPressEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.keypresseventargs\" data-linktype=\"relative-path\">KeyPressEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.forms.keypresseventargs#System_Windows_Forms_KeyPressEventArgs_Handled_\" data-linktype=\"relative-path\">Handled</a> property is set to <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control will select the first item that begins with the value of the <a class=\"xref\" href=\"system.windows.forms.keypresseventargs#System_Windows_Forms_KeyPressEventArgs_KeyChar_\" data-linktype=\"relative-path\">KeyChar</a> property of <code>e</code>.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnKeyPress method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnKeyUp_System_Windows_Forms_KeyEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnKeyUp_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnKeyUp(KeyEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Overrides <span class=\"xref\">stem.Windows.Forms.Control.OnKeyUp*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.keyeventargs\" data-linktype=\"relative-path\">KeyEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnKeyUp method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnMouseHover_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnMouseHover_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseHover(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void OnMouseHover (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The OnMouseHover method performs a hit test to see whether the mouse is located over a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>, and if it is, raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_NodeMouseHover\" data-linktype=\"relative-path\">NodeMouseHover</a> event.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMouseHover method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnMouseLeave_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnMouseLeave_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnMouseLeave(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseLeave\" data-linktype=\"relative-path\">MouseLeave</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void OnMouseLeave (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnMouseLeave method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnNodeMouseClick_System_Windows_Forms_TreeNodeMouseClickEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnNodeMouseClick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnNodeMouseClick(TreeNodeMouseClickEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_NodeMouseClick\" data-linktype=\"relative-path\">NodeMouseClick</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnNodeMouseClick (System.Windows.Forms.TreeNodeMouseClickEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenodemouseclickeventargs\" data-linktype=\"relative-path\">TreeNodeMouseClickEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treenodemouseclickeventargs\" data-linktype=\"relative-path\">TreeNodeMouseClickEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnNodeMouseClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnNodeMouseDoubleClick_System_Windows_Forms_TreeNodeMouseClickEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnNodeMouseDoubleClick_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnNodeMouseDoubleClick(TreeNodeMouseClickEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_NodeMouseDoubleClick\" data-linktype=\"relative-path\">NodeMouseDoubleClick</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnNodeMouseDoubleClick (System.Windows.Forms.TreeNodeMouseClickEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenodemouseclickeventargs\" data-linktype=\"relative-path\">TreeNodeMouseClickEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.treenodemouseclickeventargs\" data-linktype=\"relative-path\">TreeNodeMouseClickEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnNodeMouseDoubleClick method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnNodeMouseHover_System_Windows_Forms_TreeNodeMouseHoverEventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnNodeMouseHover_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnNodeMouseHover(TreeNodeMouseHoverEventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_NodeMouseHover\" data-linktype=\"relative-path\">NodeMouseHover</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnNodeMouseHover (System.Windows.Forms.TreeNodeMouseHoverEventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenodemousehovereventargs\" data-linktype=\"relative-path\">TreeNodeMouseHoverEventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.treenodemousehovereventargs\" data-linktype=\"relative-path\">TreeNodeMouseHoverEventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnNodeMouseHover method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_OnRightToLeftLayoutChanged_System_EventArgs_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_OnRightToLeftLayoutChanged_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRightToLeftLayoutChanged(EventArgs)</div>        \r\n          </div>\r\n    \r\n            <p>Raises the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_RightToLeftLayoutChanged\" data-linktype=\"relative-path\">RightToLeftLayoutChanged</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRightToLeftLayoutChanged (EventArgs e);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>e</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> The OnRightToLeftLayoutChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_Sort\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort()</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the items in <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Sort ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reapplies the default sort, which is alphabetical by node text, or a custom sort specified by the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_TreeViewNodeSorter_\" data-linktype=\"relative-path\">TreeViewNodeSorter</a> property. You can use this method if the text of existing nodes is changed or nodes are moved by the user, and you want to sort the items again.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The default sorter uses the <a class=\"xref\" href=\"system.globalization.compareinfo#System_Globalization_CompareInfo_Compare_\" data-linktype=\"relative-path\">Compare</a> method based on the <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> specified by the application. This means that <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects with equal value are kept in the order in which they were added to the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control. This behavior may be different if a custom sort is applied.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_ToString\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the name of the <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a>, if any. This method should not be overridden.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the name of the <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a>, if any, or <code>null</code> if the <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a> is unnamed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_WndProc_System_Windows_Forms_Message__\">\r\n    \r\n            <a id=\"System_Windows_Forms_TreeView_WndProc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WndProc(Message)</div>        \r\n          </div>\r\n    \r\n            <p>Overrides <span class=\"xref\">stem.Windows.Forms.Control.WndProc*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void WndProc (ref System.Windows.Forms.Message m);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>m</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Windows <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a> to process.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_AfterCheck\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AfterCheck</div>        \r\n          </div>\r\n    \r\n            <p>Occurs after the tree node check box is checked.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.TreeViewEventHandler AfterCheck;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Checked_\" data-linktype=\"relative-path\">Checked</a> property from within a <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCheck\" data-linktype=\"relative-path\">BeforeCheck</a> or AfterCheck event handler causes the event to be raised multiple times and can result in unexpected behavior. To prevent the event from being raised multiple times, add logic to your event handler that only executes your recursive code if the <a class=\"xref\" href=\"system.windows.forms.treevieweventargs#System_Windows_Forms_TreeViewEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> property of the <a class=\"xref\" href=\"system.windows.forms.treevieweventargs\" data-linktype=\"relative-path\">TreeViewEventArgs</a> is not set to <a class=\"xref\" href=\"system.windows.forms.treeviewaction\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewAction</a>.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example updates all the child tree nodes of a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> when the user changes its checked state. This code requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> that has <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects in its <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a>. The <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> should have tree nodes with child nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"TreeView.AfterCheck_BeforeCheck#1\">      // Updates all child tree nodes recursively.\n      void CheckAllChildNodes( TreeNode^ treeNode, bool nodeChecked )\n      {\n         IEnumerator^ myEnum = treeNode-&gt;Nodes-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            TreeNode^ node = safe_cast&lt;TreeNode^&gt;(myEnum-&gt;Current);\n            node-&gt;Checked = nodeChecked;\n            if ( node-&gt;Nodes-&gt;Count &gt; 0 )\n            {\n               \n               // If the current node has child nodes, call the CheckAllChildsNodes method recursively.\n               this-&gt;CheckAllChildNodes( node, nodeChecked );\n            }\n         }\n      }\n\n      // NOTE   This code can be added to the BeforeCheck event handler instead of the AfterCheck event.\n      // After a tree node&#39;s Checked property is changed, all its child nodes are updated to the same value.\n      void node_AfterCheck( Object^ /*sender*/, TreeViewEventArgs^ e )\n      {\n         // The code only executes if the user caused the checked state to change.\n         if ( e-&gt;Action != TreeViewAction::Unknown )\n         {\n            if ( e-&gt;Node-&gt;Nodes-&gt;Count &gt; 0 )\n            {\n               /* Calls the CheckAllChildNodes method, passing in the current\n                   Checked value of the TreeNode whose checked state changed. */\n               this-&gt;CheckAllChildNodes( e-&gt;Node, e-&gt;Node-&gt;Checked );\n            }\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeView.AfterCheck_BeforeCheck#1\">&#39; Updates all child tree nodes recursively.\nPrivate Sub CheckAllChildNodes(treeNode As TreeNode, nodeChecked As Boolean)\n   Dim node As TreeNode\n   For Each node In  treeNode.Nodes \n      node.Checked = nodeChecked\n      If node.Nodes.Count &gt; 0 Then\n         &#39; If the current node has child nodes, call the CheckAllChildsNodes method recursively.\n         Me.CheckAllChildNodes(node, nodeChecked)\n      End If\n   Next node\nEnd Sub\n      \n&#39; NOTE   This code can be added to the BeforeCheck event handler instead of the AfterCheck event.\n&#39; After a tree node&#39;s Checked property is changed, all its child nodes are updated to the same value.\nPrivate Sub node_AfterCheck(sender As Object, e As TreeViewEventArgs) Handles treeView1.AfterCheck\n   &#39; The code only executes if the user caused the checked state to change.\n   If e.Action &lt;&gt; TreeViewAction.Unknown Then \n      If e.Node.Nodes.Count &gt; 0 Then\n         &#39; Calls the CheckAllChildNodes method, passing in the current \n         &#39; Checked value of the TreeNode whose checked state changed. \n         Me.CheckAllChildNodes(e.Node, e.Node.Checked)\n      End If\n   End If\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"TreeView.AfterCheck_BeforeCheck#1\">// Updates all child tree nodes recursively.\nprivate void CheckAllChildNodes(TreeNode treeNode, bool nodeChecked)\n{\n   foreach(TreeNode node in treeNode.Nodes)\n   {\n      node.Checked = nodeChecked;\n      if(node.Nodes.Count &gt; 0)\n      {\n         // If the current node has child nodes, call the CheckAllChildsNodes method recursively.\n         this.CheckAllChildNodes(node, nodeChecked);\n      }\n   }\n}\n\n// NOTE   This code can be added to the BeforeCheck event handler instead of the AfterCheck event.\n// After a tree node&#39;s Checked property is changed, all its child nodes are updated to the same value.\nprivate void node_AfterCheck(object sender, TreeViewEventArgs e)\n{\n   // The code only executes if the user caused the checked state to change.\n   if(e.Action != TreeViewAction.Unknown)\n   {\n      if(e.Node.Nodes.Count &gt; 0)\n      {\n         /* Calls the CheckAllChildNodes method, passing in the current \n         Checked value of the TreeNode whose checked state changed. */\n         this.CheckAllChildNodes(e.Node, e.Node.Checked);\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_AfterCollapse\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AfterCollapse</div>        \r\n          </div>\r\n    \r\n            <p>Occurs after the tree node is collapsed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.TreeViewEventHandler AfterCollapse;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about how to handle events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example updates all the child tree nodes of a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> when the user changes its checked state. This code requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> that has <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects in its <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a>. The <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> should have tree nodes with child nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"TreeView.AfterCheck_BeforeCheck#1\">      // Updates all child tree nodes recursively.\n      void CheckAllChildNodes( TreeNode^ treeNode, bool nodeChecked )\n      {\n         IEnumerator^ myEnum = treeNode-&gt;Nodes-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            TreeNode^ node = safe_cast&lt;TreeNode^&gt;(myEnum-&gt;Current);\n            node-&gt;Checked = nodeChecked;\n            if ( node-&gt;Nodes-&gt;Count &gt; 0 )\n            {\n               \n               // If the current node has child nodes, call the CheckAllChildsNodes method recursively.\n               this-&gt;CheckAllChildNodes( node, nodeChecked );\n            }\n         }\n      }\n\n      // NOTE   This code can be added to the BeforeCheck event handler instead of the AfterCheck event.\n      // After a tree node&#39;s Checked property is changed, all its child nodes are updated to the same value.\n      void node_AfterCheck( Object^ /*sender*/, TreeViewEventArgs^ e )\n      {\n         // The code only executes if the user caused the checked state to change.\n         if ( e-&gt;Action != TreeViewAction::Unknown )\n         {\n            if ( e-&gt;Node-&gt;Nodes-&gt;Count &gt; 0 )\n            {\n               /* Calls the CheckAllChildNodes method, passing in the current\n                   Checked value of the TreeNode whose checked state changed. */\n               this-&gt;CheckAllChildNodes( e-&gt;Node, e-&gt;Node-&gt;Checked );\n            }\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeView.AfterCheck_BeforeCheck#1\">&#39; Updates all child tree nodes recursively.\nPrivate Sub CheckAllChildNodes(treeNode As TreeNode, nodeChecked As Boolean)\n   Dim node As TreeNode\n   For Each node In  treeNode.Nodes \n      node.Checked = nodeChecked\n      If node.Nodes.Count &gt; 0 Then\n         &#39; If the current node has child nodes, call the CheckAllChildsNodes method recursively.\n         Me.CheckAllChildNodes(node, nodeChecked)\n      End If\n   Next node\nEnd Sub\n      \n&#39; NOTE   This code can be added to the BeforeCheck event handler instead of the AfterCheck event.\n&#39; After a tree node&#39;s Checked property is changed, all its child nodes are updated to the same value.\nPrivate Sub node_AfterCheck(sender As Object, e As TreeViewEventArgs) Handles treeView1.AfterCheck\n   &#39; The code only executes if the user caused the checked state to change.\n   If e.Action &lt;&gt; TreeViewAction.Unknown Then \n      If e.Node.Nodes.Count &gt; 0 Then\n         &#39; Calls the CheckAllChildNodes method, passing in the current \n         &#39; Checked value of the TreeNode whose checked state changed. \n         Me.CheckAllChildNodes(e.Node, e.Node.Checked)\n      End If\n   End If\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"TreeView.AfterCheck_BeforeCheck#1\">// Updates all child tree nodes recursively.\nprivate void CheckAllChildNodes(TreeNode treeNode, bool nodeChecked)\n{\n   foreach(TreeNode node in treeNode.Nodes)\n   {\n      node.Checked = nodeChecked;\n      if(node.Nodes.Count &gt; 0)\n      {\n         // If the current node has child nodes, call the CheckAllChildsNodes method recursively.\n         this.CheckAllChildNodes(node, nodeChecked);\n      }\n   }\n}\n\n// NOTE   This code can be added to the BeforeCheck event handler instead of the AfterCheck event.\n// After a tree node&#39;s Checked property is changed, all its child nodes are updated to the same value.\nprivate void node_AfterCheck(object sender, TreeViewEventArgs e)\n{\n   // The code only executes if the user caused the checked state to change.\n   if(e.Action != TreeViewAction.Unknown)\n   {\n      if(e.Node.Nodes.Count &gt; 0)\n      {\n         /* Calls the CheckAllChildNodes method, passing in the current \n         Checked value of the TreeNode whose checked state changed. */\n         this.CheckAllChildNodes(e.Node, e.Node.Checked);\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_AfterExpand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AfterExpand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs after the tree node is expanded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.TreeViewEventHandler AfterExpand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about how to handle events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AfterExpand event. This report helps you learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> named <code>TreeView1</code>. Then ensure that the event handler is associated with the AfterExpand event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#631\">private void TreeView1_AfterExpand(Object sender, TreeViewEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Node&quot;, e.Node );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Action&quot;, e.Action );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;AfterExpand Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#631\">Private Sub TreeView1_AfterExpand(sender as Object, e as TreeViewEventArgs) _ \n     Handles TreeView1.AfterExpand\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Node&quot;, e.Node)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Action&quot;, e.Action)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;AfterExpand Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_AfterLabelEdit\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AfterLabelEdit</div>        \r\n          </div>\r\n    \r\n            <p>Occurs after the tree node label text is edited.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.NodeLabelEditEventHandler AfterLabelEdit;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about how to handle events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example lets the user edit nonroot tree nodes by using a <a class=\"xref\" href=\"system.windows.forms.contextmenu\" data-linktype=\"relative-path\">ContextMenu</a>. When the user right clicks the mouse, the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> at that position is determined and stored in a variable named <code>mySelectedNode</code>. If a nonroot tree node was selected, it is put into an editable state, which allows the user to edit the node label. After the user stops editing the tree node label, the new label text is evaluated and saved. For this example, several characters are considered not valid in the label text. If one of the invalid characters is in the label string, or the string is empty, the user is notified of the error and the label is returned to its previous text.  </p>\n<pre><code class=\"lang-cpp\" name=\"classic treenode.beginedit example#1\">   /* Get the tree node under the mouse pointer and \n      save it in the mySelectedNode variable. */\nprivate:\n   void treeView1_MouseDown( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      mySelectedNode = treeView1-&gt;GetNodeAt( e-&gt;X, e-&gt;Y );\n   }\n\n   void menuItem1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      if ( mySelectedNode != nullptr &amp;&amp; mySelectedNode-&gt;Parent != nullptr )\n      {\n         treeView1-&gt;SelectedNode = mySelectedNode;\n         treeView1-&gt;LabelEdit = true;\n         if (  !mySelectedNode-&gt;IsEditing )\n         {\n            mySelectedNode-&gt;BeginEdit();\n         }\n      }\n      else\n      {\n         MessageBox::Show( String::Concat( &quot;No tree node selected or selected node is a root node.<br>&quot;,\n            &quot;Editing of root nodes is not allowed.&quot; ), &quot;Invalid selection&quot; );\n      }\n   }\n\n   void treeView1_AfterLabelEdit( Object^ /*sender*/,\n      System::Windows::Forms::NodeLabelEditEventArgs^ e )\n   {\n      if ( e-&gt;Label != nullptr )\n      {\n         if ( e-&gt;Label-&gt;Length &gt; 0 )\n         {\n            array&lt;Char&gt;^ temp0 = {&#39;@&#39;,&#39;.&#39;,&#39;,&#39;,&#39;!&#39;};\n            if ( e-&gt;Label-&gt;IndexOfAny( temp0 ) == -1 )\n            {\n               \n               // Stop editing without canceling the label change.\n               e-&gt;Node-&gt;EndEdit( false );\n            }\n            else\n            {\n               /* Cancel the label edit action, inform the user, and \n                  place the node in edit mode again. */\n               e-&gt;CancelEdit = true;\n               MessageBox::Show( String::Concat( &quot;Invalid tree node label.<br>&quot;,\n                  &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot; ),\n                  &quot;Node Label Edit&quot; );\n               e-&gt;Node-&gt;BeginEdit();\n            }\n         }\n         else\n         {\n            /* Cancel the label edit action, inform the user, and \n               place the node in edit mode again. */\n            e-&gt;CancelEdit = true;\n            MessageBox::Show( &quot;Invalid tree node label.<br>The label cannot be blank&quot;,\n               &quot;Node Label Edit&quot; );\n            e-&gt;Node-&gt;BeginEdit();\n         }\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"classic treenode.beginedit example#1\">/* Get the tree node under the mouse pointer and \n   save it in the mySelectedNode variable. */\nprivate void treeView1_MouseDown(object sender, \n  System.Windows.Forms.MouseEventArgs e)\n{\n   mySelectedNode = treeView1.GetNodeAt(e.X, e.Y);\n}\n\nprivate void menuItem1_Click(object sender, System.EventArgs e)\n{\n   if (mySelectedNode != null &amp;&amp; mySelectedNode.Parent != null)\n   {\n      treeView1.SelectedNode = mySelectedNode;\n      treeView1.LabelEdit = true;\n      if(!mySelectedNode.IsEditing)\n      {\n         mySelectedNode.BeginEdit();\n      }\n   }\n   else\n   {\n      MessageBox.Show(&quot;No tree node selected or selected node is a root node.<br>&quot; + \n         &quot;Editing of root nodes is not allowed.&quot;, &quot;Invalid selection&quot;);\n   }\n}\n\nprivate void treeView1_AfterLabelEdit(object sender, \n         System.Windows.Forms.NodeLabelEditEventArgs e)\n{\n   if (e.Label != null)\n   {\n     if(e.Label.Length &gt; 0)\n     {\n        if (e.Label.IndexOfAny(new char[]{&#39;@&#39;, &#39;.&#39;, &#39;,&#39;, &#39;!&#39;}) == -1)\n        {\n           // Stop editing without canceling the label change.\n           e.Node.EndEdit(false);\n        }\n        else\n        {\n           /* Cancel the label edit action, inform the user, and \n              place the node in edit mode again. */\n           e.CancelEdit = true;\n           MessageBox.Show(&quot;Invalid tree node label.<br>&quot; + \n              &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot;, \n              &quot;Node Label Edit&quot;);\n           e.Node.BeginEdit();\n        }\n     }\n     else\n     {\n        /* Cancel the label edit action, inform the user, and \n           place the node in edit mode again. */\n        e.CancelEdit = true;\n        MessageBox.Show(&quot;Invalid tree node label.<br>The label cannot be blank&quot;, \n           &quot;Node Label Edit&quot;);\n        e.Node.BeginEdit();\n     }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"classic treenode.beginedit example#1\">&#39; Get the tree node under the mouse pointer and\n&#39; save it in the mySelectedNode variable. \nPrivate Sub treeView1_MouseDown(sender As Object, _\n  e As System.Windows.Forms.MouseEventArgs)\n        \n   mySelectedNode = treeView1.GetNodeAt(e.X, e.Y)\nEnd Sub    \n    \nPrivate Sub menuItem1_Click(sender As Object, e As System.EventArgs)\n   If Not (mySelectedNode Is Nothing) And _\n     Not (mySelectedNode.Parent Is Nothing) Then\n      treeView1.SelectedNode = mySelectedNode\n      treeView1.LabelEdit = True\n      If Not mySelectedNode.IsEditing Then\n         mySelectedNode.BeginEdit()\n      End If\n   Else\n      MessageBox.Show(&quot;No tree node selected or selected node is a root node.&quot; &amp; _\n        Microsoft.VisualBasic.ControlChars.Cr &amp; _\n        &quot;Editing of root nodes is not allowed.&quot;, &quot;Invalid selection&quot;)\n   End If\nEnd Sub    \n    \nPrivate Sub treeView1_AfterLabelEdit(sender As Object, _\n  e As System.Windows.Forms.NodeLabelEditEventArgs)\n   If Not (e.Label Is Nothing) Then\n      If e.Label.Length &gt; 0 Then\n         If e.Label.IndexOfAny(New Char() {&quot;@&quot;c, &quot;.&quot;c, &quot;,&quot;c, &quot;!&quot;c}) = -1 Then\n            &#39; Stop editing without canceling the label change.\n            e.Node.EndEdit(False)\n         Else\n            &#39; Cancel the label edit action, inform the user, and\n            &#39; place the node in edit mode again. \n            e.CancelEdit = True\n            MessageBox.Show(&quot;Invalid tree node label.&quot; &amp; _\n              Microsoft.VisualBasic.ControlChars.Cr &amp; _\n              &quot;The invalid characters are: &#39;@&#39;,&#39;.&#39;, &#39;,&#39;, &#39;!&#39;&quot;, _\n              &quot;Node Label Edit&quot;)\n            e.Node.BeginEdit()\n         End If\n      Else\n         &#39; Cancel the label edit action, inform the user, and\n         &#39; place the node in edit mode again. \n         e.CancelEdit = True\n         MessageBox.Show(&quot;Invalid tree node label.&quot; &amp; _\n           Microsoft.VisualBasic.ControlChars.Cr &amp; _\n           &quot;The label cannot be blank&quot;, &quot;Node Label Edit&quot;)\n           e.Node.BeginEdit()\n      End If\n   End If\nEnd Sub \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_AfterSelect\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AfterSelect</div>        \r\n          </div>\r\n    \r\n            <p>Occurs after the tree node is selected.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.TreeViewEventHandler AfterSelect;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event does not occur when the node is unselected. To detect whether the selection was cleared, you can test the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_IsSelected_\" data-linktype=\"relative-path\">IsSelected</a> property.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the <a class=\"xref\" href=\"system.windows.forms.treeviewaction\" data-linktype=\"relative-path\">TreeViewAction</a> enumeration. To run this example, paste the following code in a form that contains a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control named <code>TreeView1</code>. This example requires that <code>TreeView1</code> is populated with items and the AfterSelect event is connected to the event handler defined in the sample.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#2\">\t// Handle the After_Select event.\n\tprivate void TreeView1_AfterSelect(System.Object sender, \n\t\tSystem.Windows.Forms.TreeViewEventArgs e)\n\t{\n\n\t\t// Vary the response depending on which TreeViewAction\n\t\t// triggered the event. \n\t\tswitch((e.Action))\n\t\t{\n\t\t\tcase TreeViewAction.ByKeyboard:\n\t\t\t\tMessageBox.Show(&quot;You like the keyboard!&quot;);\n\t\t\t\tbreak;\n\t\t\tcase TreeViewAction.ByMouse:\n\t\t\t\tMessageBox.Show(&quot;You like the mouse!&quot;);\n\t\t\t\tbreak;\n\t\t}\n\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#2\">private:\n   // Handle the After_Select event.\n   void TreeView1_AfterSelect( System::Object^ /*sender*/, System::Windows::Forms::TreeViewEventArgs^ e )\n   {\n      \n      // Vary the response depending on which TreeViewAction\n      // triggered the event. \n      switch ( (e-&gt;Action) )\n      {\n         case TreeViewAction::ByKeyboard:\n            MessageBox::Show( &quot;You like the keyboard!&quot; );\n            break;\n\n         case TreeViewAction::ByMouse:\n            MessageBox::Show( &quot;You like the mouse!&quot; );\n            break;\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#2\">    &#39; Handle the After_Select event.\n    Private Sub TreeView1_AfterSelect(ByVal sender As System.Object, _\n        ByVal e As System.Windows.Forms.TreeViewEventArgs) _\n            Handles TreeView1.AfterSelect\n\n        &#39; Vary the response depending on which TreeViewAction\n        &#39; triggered the event. \n        Select Case (e.Action)\n            Case TreeViewAction.ByKeyboard\n                MessageBox.Show(&quot;You like the keyboard!&quot;)\n            Case TreeViewAction.ByMouse\n                MessageBox.Show(&quot;You like the mouse!&quot;)\n        End Select\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_BackgroundImageChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackgroundImageChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.TreeView.BackgroundImage*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler BackgroundImageChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_BackgroundImageLayoutChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackgroundImageLayoutChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.TreeView.BackgroundImageLayout*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler BackgroundImageLayoutChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_BeforeCheck\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeforeCheck</div>        \r\n          </div>\r\n    \r\n            <p>Occurs before the tree node check box is checked.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.TreeViewCancelEventHandler BeforeCheck;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Setting the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Checked_\" data-linktype=\"relative-path\">Checked</a> property from within the BeforeCheck or <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterCheck\" data-linktype=\"relative-path\">AfterCheck</a> event causes the event to be raised multiple times and can result in unexpected behavior. For example, you might set the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Checked_\" data-linktype=\"relative-path\">Checked</a> property in the event handler when you are recursively updating the child nodes, so that the user does not have to expand and check each one individually. To prevent the event from being raised multiple times, add logic to your event handler that only executes your recursive code if the <a class=\"xref\" href=\"system.windows.forms.treevieweventargs#System_Windows_Forms_TreeViewEventArgs_Action_\" data-linktype=\"relative-path\">Action</a> property of the <a class=\"xref\" href=\"system.windows.forms.treevieweventargs\" data-linktype=\"relative-path\">TreeViewEventArgs</a> is not set to <a class=\"xref\" href=\"system.windows.forms.treeviewaction\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewAction</a>.  </p>\n</div>\n<p> For more information about how to handle events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example updates all the child tree nodes of a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> when the user changes its checked state. This code requires that you have a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> with a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> that has <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> objects in its <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a>. The <a class=\"xref\" href=\"system.windows.forms.treenodecollection\" data-linktype=\"relative-path\">TreeNodeCollection</a> should have tree nodes with child nodes.  </p>\n<pre><code class=\"lang-cpp\" name=\"TreeView.AfterCheck_BeforeCheck#1\">      // Updates all child tree nodes recursively.\n      void CheckAllChildNodes( TreeNode^ treeNode, bool nodeChecked )\n      {\n         IEnumerator^ myEnum = treeNode-&gt;Nodes-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            TreeNode^ node = safe_cast&lt;TreeNode^&gt;(myEnum-&gt;Current);\n            node-&gt;Checked = nodeChecked;\n            if ( node-&gt;Nodes-&gt;Count &gt; 0 )\n            {\n               \n               // If the current node has child nodes, call the CheckAllChildsNodes method recursively.\n               this-&gt;CheckAllChildNodes( node, nodeChecked );\n            }\n         }\n      }\n\n      // NOTE   This code can be added to the BeforeCheck event handler instead of the AfterCheck event.\n      // After a tree node&#39;s Checked property is changed, all its child nodes are updated to the same value.\n      void node_AfterCheck( Object^ /*sender*/, TreeViewEventArgs^ e )\n      {\n         // The code only executes if the user caused the checked state to change.\n         if ( e-&gt;Action != TreeViewAction::Unknown )\n         {\n            if ( e-&gt;Node-&gt;Nodes-&gt;Count &gt; 0 )\n            {\n               /* Calls the CheckAllChildNodes method, passing in the current\n                   Checked value of the TreeNode whose checked state changed. */\n               this-&gt;CheckAllChildNodes( e-&gt;Node, e-&gt;Node-&gt;Checked );\n            }\n         }\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeView.AfterCheck_BeforeCheck#1\">&#39; Updates all child tree nodes recursively.\nPrivate Sub CheckAllChildNodes(treeNode As TreeNode, nodeChecked As Boolean)\n   Dim node As TreeNode\n   For Each node In  treeNode.Nodes \n      node.Checked = nodeChecked\n      If node.Nodes.Count &gt; 0 Then\n         &#39; If the current node has child nodes, call the CheckAllChildsNodes method recursively.\n         Me.CheckAllChildNodes(node, nodeChecked)\n      End If\n   Next node\nEnd Sub\n      \n&#39; NOTE   This code can be added to the BeforeCheck event handler instead of the AfterCheck event.\n&#39; After a tree node&#39;s Checked property is changed, all its child nodes are updated to the same value.\nPrivate Sub node_AfterCheck(sender As Object, e As TreeViewEventArgs) Handles treeView1.AfterCheck\n   &#39; The code only executes if the user caused the checked state to change.\n   If e.Action &lt;&gt; TreeViewAction.Unknown Then \n      If e.Node.Nodes.Count &gt; 0 Then\n         &#39; Calls the CheckAllChildNodes method, passing in the current \n         &#39; Checked value of the TreeNode whose checked state changed. \n         Me.CheckAllChildNodes(e.Node, e.Node.Checked)\n      End If\n   End If\nEnd Sub \n</code></pre><pre><code class=\"lang-cs\" name=\"TreeView.AfterCheck_BeforeCheck#1\">// Updates all child tree nodes recursively.\nprivate void CheckAllChildNodes(TreeNode treeNode, bool nodeChecked)\n{\n   foreach(TreeNode node in treeNode.Nodes)\n   {\n      node.Checked = nodeChecked;\n      if(node.Nodes.Count &gt; 0)\n      {\n         // If the current node has child nodes, call the CheckAllChildsNodes method recursively.\n         this.CheckAllChildNodes(node, nodeChecked);\n      }\n   }\n}\n\n// NOTE   This code can be added to the BeforeCheck event handler instead of the AfterCheck event.\n// After a tree node&#39;s Checked property is changed, all its child nodes are updated to the same value.\nprivate void node_AfterCheck(object sender, TreeViewEventArgs e)\n{\n   // The code only executes if the user caused the checked state to change.\n   if(e.Action != TreeViewAction.Unknown)\n   {\n      if(e.Node.Nodes.Count &gt; 0)\n      {\n         /* Calls the CheckAllChildNodes method, passing in the current \n         Checked value of the TreeNode whose checked state changed. */\n         this.CheckAllChildNodes(e.Node, e.Node.Checked);\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_BeforeCollapse\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeforeCollapse</div>        \r\n          </div>\r\n    \r\n            <p>Occurs before the tree node is collapsed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.TreeViewCancelEventHandler BeforeCollapse;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about how to handle events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to change the collapse state of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> so that all the checked nodes are visible. First, all the nodes are expanded, and a handler is added for the BeforeCollapse event. Next, all the nodes are collapsed. The BeforeCollapse event handler determines whether a given node has child nodes that are checked. If a node has checked children, the collapse is canceled for that node. In order to allow standard node collapse when the minus sign next to a node is clicked, the BeforeCollapse event handler is then removed.  </p>\n<p> This behavior can also be implemented by handling the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeExpand\" data-linktype=\"relative-path\">BeforeExpand</a> event, as illustrated in the example for that topic.  </p>\n<p> For the complete example, see the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView__ctor_\" data-linktype=\"relative-path\">TreeView</a> constructor reference topic.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeViewShowCheckedNodes2#2\">    private void showCheckedNodesButton_Click(object sender, EventArgs e)\n    {\n        // Disable redrawing of treeView1 to prevent flickering \n        // while changes are made.\n        treeView1.BeginUpdate();\n\n        // Collapse all nodes of treeView1.\n        treeView1.ExpandAll();\n\n        // Add the checkForCheckedChildren event handler to the BeforeExpand event.\n        treeView1.BeforeCollapse += checkForCheckedChildren;\n\n        // Expand all nodes of treeView1. Nodes without checked children are \n        // prevented from expanding by the checkForCheckedChildren event handler.\n        treeView1.CollapseAll();\n\n        // Remove the checkForCheckedChildren event handler from the BeforeExpand \n        // event so manual node expansion will work correctly.\n        treeView1.BeforeCollapse -= checkForCheckedChildren;\n\n        // Enable redrawing of treeView1.\n        treeView1.EndUpdate();\n    }\n\n    // Prevent collapse of a node that has checked child nodes.\n    private void CheckForCheckedChildrenHandler(object sender, \n        TreeViewCancelEventArgs e)\n    {\n        if (HasCheckedChildNodes(e.Node)) e.Cancel = true;\n    }\n\n    // Returns a value indicating whether the specified \n    // TreeNode has checked child nodes.\n    private bool HasCheckedChildNodes(TreeNode node)\n    {\n        if (node.Nodes.Count == 0) return false;\n        foreach (TreeNode childNode in node.Nodes)\n        {\n            if (childNode.Checked) return true;\n            // Recursively check the children of the current child node.\n            if (HasCheckedChildNodes(childNode)) return true;\n        }\n        return false;\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewShowCheckedNodes2#2\">private:\n   void showCheckedNodesButton_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      \n      // Disable redrawing of treeView1 to prevent flickering \n      // while changes are made.\n      treeView1-&gt;BeginUpdate();\n      \n      // Collapse all nodes of treeView1.\n      treeView1-&gt;ExpandAll();\n      \n      // Add the checkForCheckedChildren event handler to the BeforeExpand event.\n      treeView1-&gt;BeforeCollapse += checkForCheckedChildren;\n      \n      // Expand all nodes of treeView1. Nodes without checked children are \n      // prevented from expanding by the checkForCheckedChildren event handler.\n      treeView1-&gt;CollapseAll();\n      \n      // Remove the checkForCheckedChildren event handler from the BeforeExpand \n      // event so manual node expansion will work correctly.\n      treeView1-&gt;BeforeCollapse -= checkForCheckedChildren;\n      \n      // Enable redrawing of treeView1.\n      treeView1-&gt;EndUpdate();\n   }\n\n   // Prevent collapse of a node that has checked child nodes.\n   void CheckForCheckedChildrenHandler( Object^ /*sender*/, TreeViewCancelEventArgs^ e )\n   {\n      if ( HasCheckedChildNodes( e-&gt;Node ) )\n            e-&gt;Cancel = true;\n   }\n\n   // Returns a value indicating whether the specified \n   // TreeNode has checked child nodes.\n   bool HasCheckedChildNodes( TreeNode^ node )\n   {\n      if ( node-&gt;Nodes-&gt;Count == 0 )\n            return false;\n\n      System::Collections::IEnumerator^ myEnum = node-&gt;Nodes-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         TreeNode^ childNode = safe_cast&lt;TreeNode^&gt;(myEnum-&gt;Current);\n         if ( childNode-&gt;Checked )\n                  return true;\n\n         // Recursively check the children of the current child node.\n         if ( HasCheckedChildNodes( childNode ) )\n                  return true;\n      }\n\n      return false;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeViewShowCheckedNodes2#2\">    Private Sub showCheckedNodesButton_Click(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Disable redrawing of treeView1 to prevent flickering \n        &#39; while changes are made.\n        treeView1.BeginUpdate()\n\n        &#39; Collapse all nodes of treeView1.\n        treeView1.ExpandAll()\n\n        &#39; Add the CheckForCheckedChildren event handler to the BeforeExpand event.\n        AddHandler treeView1.BeforeCollapse, AddressOf CheckForCheckedChildren\n\n        &#39; Expand all nodes of treeView1. Nodes without checked children are \n        &#39; prevented from expanding by the checkForCheckedChildren event handler.\n        treeView1.CollapseAll()\n\n        &#39; Remove the checkForCheckedChildren event handler from the BeforeExpand \n        &#39; event so manual node expansion will work correctly.\n        RemoveHandler treeView1.BeforeCollapse, AddressOf CheckForCheckedChildren\n        &#39; Enable redrawing of treeView1.\n        treeView1.EndUpdate()\n    End Sub &#39;showCheckedNodesButton_Click\n\n\n    &#39; Prevent collapse of a node that has checked child nodes.\n    Private Sub CheckForCheckedChildren(ByVal sender As Object, ByVal e As TreeViewCancelEventArgs)\n        If HasCheckedChildNodes(e.Node) Then\n            e.Cancel = True\n        End If\n    End Sub &#39;CheckForCheckedChildren\n\n    &#39; Returns a value indicating whether the specified \n    &#39; TreeNode has checked child nodes.\n    Private Function HasCheckedChildNodes(ByVal node As TreeNode) As Boolean\n        If node.Nodes.Count = 0 Then\n            Return False\n        End If\n        Dim childNode As TreeNode\n        For Each childNode In node.Nodes\n            If childNode.Checked Then\n                Return True\n            End If\n            &#39; Recursively check the children of the current child node.\n            If HasCheckedChildNodes(childNode) Then\n                Return True\n            End If\n        Next childNode\n        Return False\n    End Function &#39;HasCheckedChildNodes\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_BeforeExpand\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeforeExpand</div>        \r\n          </div>\r\n    \r\n            <p>Occurs before the tree node is expanded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.TreeViewCancelEventHandler BeforeExpand;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about how to handle events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to change the collapse state of a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> so that all the checked nodes are visible. First, all the nodes are collapsed, and a handler is added for the BeforeExpand event. Next, all the nodes are expanded. The BeforeExpand event handler determines whether a given node has child nodes that are checked. If a node does not have checked children, the expansion is canceled for that node. In order to allow standard node expansion when the plus sign next to a node is clicked, the BeforeExpand event handler is then removed.  </p>\n<p> This behavior can also be implemented by handling the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_BeforeCollapse\" data-linktype=\"relative-path\">BeforeCollapse</a> event, as illustrated in the example for that topic.  </p>\n<p> For the complete example, see the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_CheckBoxes_\" data-linktype=\"relative-path\">CheckBoxes</a> reference topic.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewShowCheckedNodes1#2\">    Private Sub showCheckedNodesButton_Click(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Disable redrawing of treeView1 to prevent flickering \n        &#39; while changes are made.\n        treeView1.BeginUpdate()\n\n        &#39; Collapse all nodes of treeView1.\n        treeView1.CollapseAll()\n\n        &#39; Add the CheckForCheckedChildren event handler to the BeforeExpand event.\n        AddHandler treeView1.BeforeExpand, AddressOf CheckForCheckedChildren\n\n        &#39; Expand all nodes of treeView1. Nodes without checked children are \n        &#39; prevented from expanding by the checkForCheckedChildren event handler.\n        treeView1.ExpandAll()\n\n        &#39; Remove the checkForCheckedChildren event handler from the BeforeExpand \n        &#39; event so manual node expansion will work correctly.\n        RemoveHandler treeView1.BeforeExpand, AddressOf CheckForCheckedChildren\n\n        &#39; Enable redrawing of treeView1.\n        treeView1.EndUpdate()\n    End Sub &#39;showCheckedNodesButton_Click\n\n    &#39; Prevent expansion of a node that does not have any checked child nodes.\n    Private Sub CheckForCheckedChildren(ByVal sender As Object, ByVal e As TreeViewCancelEventArgs)\n        If Not HasCheckedChildNodes(e.Node) Then\n            e.Cancel = True\n        End If\n    End Sub &#39;CheckForCheckedChildren\n\n    &#39; Returns a value indicating whether the specified \n    &#39; TreeNode has checked child nodes.\n    Private Function HasCheckedChildNodes(ByVal node As TreeNode) As Boolean\n        If node.Nodes.Count = 0 Then\n            Return False\n        End If\n        Dim childNode As TreeNode\n        For Each childNode In node.Nodes\n            If childNode.Checked Then\n                Return True\n            End If\n            &#39; Recursively check the children of the current child node.\n            If HasCheckedChildNodes(childNode) Then\n                Return True\n            End If\n        Next childNode\n        Return False\n    End Function &#39;HasCheckedChildNodes\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewShowCheckedNodes1#2\">private:\n   void showCheckedNodesButton_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      // Disable redrawing of treeView1 to prevent flickering \n      // while changes are made.\n      treeView1-&gt;BeginUpdate();\n      \n      // Collapse all nodes of treeView1.\n      treeView1-&gt;CollapseAll();\n      \n      // Add the checkForCheckedChildren event handler to the BeforeExpand event.\n      treeView1-&gt;BeforeExpand += checkForCheckedChildren;\n      \n      // Expand all nodes of treeView1. Nodes without checked children are \n      // prevented from expanding by the checkForCheckedChildren event handler.\n      treeView1-&gt;ExpandAll();\n      \n      // Remove the checkForCheckedChildren event handler from the BeforeExpand \n      // event so manual node expansion will work correctly.\n      treeView1-&gt;BeforeExpand -= checkForCheckedChildren;\n      \n      // Enable redrawing of treeView1.\n      treeView1-&gt;EndUpdate();\n   }\n\n   // Prevent expansion of a node that does not have any checked child nodes.\n   void CheckForCheckedChildrenHandler( Object^ /*sender*/, TreeViewCancelEventArgs^ e )\n   {\n      if (  !HasCheckedChildNodes( e-&gt;Node ) )\n            e-&gt;Cancel = true;\n   }\n\n\n   // Returns a value indicating whether the specified \n   // TreeNode has checked child nodes.\n   bool HasCheckedChildNodes( TreeNode^ node )\n   {\n      if ( node-&gt;Nodes-&gt;Count == 0 )\n            return false;\n\n      System::Collections::IEnumerator^ myEnum = node-&gt;Nodes-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         TreeNode^ childNode = safe_cast&lt;TreeNode^&gt;(myEnum-&gt;Current);\n         if ( childNode-&gt;Checked )\n                  return true;\n\n         // Recursively check the children of the current child node.\n         if ( HasCheckedChildNodes( childNode ) )\n                  return true;\n      }\n\n      return false;\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewShowCheckedNodes1#2\">    private void showCheckedNodesButton_Click(object sender, EventArgs e)\n    {\n        // Disable redrawing of treeView1 to prevent flickering \n        // while changes are made.\n        treeView1.BeginUpdate();\n\n        // Collapse all nodes of treeView1.\n        treeView1.CollapseAll();\n\n        // Add the checkForCheckedChildren event handler to the BeforeExpand event.\n        treeView1.BeforeExpand += checkForCheckedChildren;\n\n        // Expand all nodes of treeView1. Nodes without checked children are \n        // prevented from expanding by the checkForCheckedChildren event handler.\n        treeView1.ExpandAll();\n\n        // Remove the checkForCheckedChildren event handler from the BeforeExpand \n        // event so manual node expansion will work correctly.\n        treeView1.BeforeExpand -= checkForCheckedChildren;\n\n        // Enable redrawing of treeView1.\n        treeView1.EndUpdate();\n    }\n\n    // Prevent expansion of a node that does not have any checked child nodes.\n    private void CheckForCheckedChildrenHandler(object sender, \n        TreeViewCancelEventArgs e)\n    {\n        if (!HasCheckedChildNodes(e.Node)) e.Cancel = true;\n    }\n\n    // Returns a value indicating whether the specified \n    // TreeNode has checked child nodes.\n    private bool HasCheckedChildNodes(TreeNode node)\n    {\n        if (node.Nodes.Count == 0) return false;\n        foreach (TreeNode childNode in node.Nodes)\n        {\n            if (childNode.Checked) return true;\n            // Recursively check the children of the current child node.\n            if (HasCheckedChildNodes(childNode)) return true;\n        }\n        return false;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_BeforeLabelEdit\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeforeLabelEdit</div>        \r\n          </div>\r\n    \r\n            <p>Occurs before the tree node label text is edited.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.NodeLabelEditEventHandler BeforeLabelEdit;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about how to handle events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the BeforeLabelEdit<a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_AfterSelect\" data-linktype=\"relative-path\">AfterSelect</a> and <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_TopNode_\" data-linktype=\"relative-path\">TopNode</a> members. To run this example, paste the following code in a form that contains a <code>TreeView</code> control that is named <code>TreeView1</code>. Call the <code>InitializeTreeView</code> method in the form&#39;s constructor or <code>Load</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#1\">\tprivate void InitializeTreeView()\n\t{\n\n\t\t// Construct the TreeView object.\n\t\tthis.TreeView1 = new System.Windows.Forms.TreeView();\n\n\t\t// Set dock, location, size name, and tab order\n\t\t// values for the TreeView object.\n\t\tTreeView1.Dock = System.Windows.Forms.DockStyle.Left;\n\t\tTreeView1.Location = new System.Drawing.Point(0, 0);\n\t\tTreeView1.Name = &quot;TreeView1&quot;;\n\t\tTreeView1.Size = new System.Drawing.Size(152, 266);\n\t\tTreeView1.TabIndex = 1;\n\t\t\n\t\t// Associate the event-handling methods with the\n\t\t// BeforeLabeEdit and the AfterSelect events.\n\t\tTreeView1.BeforeLabelEdit += \n\t\t\tnew NodeLabelEditEventHandler(TreeView1_BeforeLabelEdit);\n\t\tTreeView1.AfterSelect += \n\t\t\tnew TreeViewEventHandler(TreeView1_AfterSelect);\n\n\t\t// Set the LabelEdit property to true to allow the \n\t\t// user to edit the TreeNode text.\n\t\tthis.TreeView1.LabelEdit = true;\n\n\t\t// Declare and create objects needed to populate \n\t\t// the TreeView.\n\t\tstring[] files = new string[]{&quot;bigPresentation.ppt&quot;, \n\t\t\t&quot;myFinances.xls&quot;, &quot;myResume.doc&quot;};; \n\t\tstring filePath = &quot;c:\\\\myFiles&quot;;\n\t\tSystem.Collections.ArrayList nodes = \n\t\t\tnew System.Collections.ArrayList();\n\n\t\t// Create a node for each file, setting the Text property to the \n\t\t// file&#39;s name and the Tag property to file&#39;s fully-qualified name.\n\t\tforeach ( string file in files )\n\t\t{\n\t\t\tTreeNode node = new TreeNode(file);\n\t\t\tnode.Tag = filePath+&quot;\\\\&quot;+file;\n\t\t\tnodes.Add(node);\n\t\t}\n\n\t\tTreeNode[] treeNodes = new TreeNode[nodes.Count];\n\t\tnodes.CopyTo(treeNodes);\n\n\t\t// Create a new node named topNode and add the ArrayList of \n\t\t// nodes to topNode.\n\t\tTreeNode topNode = new TreeNode(&quot;myFiles&quot;,  treeNodes);\n\t\ttopNode.Tag = filePath;\n\n\t\t// Add topNode to the TreeView.\n\t\tTreeView1.Nodes.Add(topNode);\n\n\t\t// Add the TreeView to the form.\n\t\tthis.Controls.Add(TreeView1);\n\t}\n\n\tprivate void TreeView1_BeforeLabelEdit(object sender, \n\t\tNodeLabelEditEventArgs e)\n\t{\n\n\t\t// Determine whether the user has selected the top node. If so,\n\t\t// change the CancelEdit property to true to cancel the edit.  \n\t\tif (e.Node == TreeView1.TopNode)\n\n\t\t{\n\t\t\te.CancelEdit = true;\n\t\t\tMessageBox.Show(&quot;You are not allowed to edit the top node&quot;);\n\t\t}\n\t\t\n\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#1\">private:\n   void InitializeTreeView()\n   {\n      \n      // Construct the TreeView object.\n      this-&gt;TreeView1 = gcnew System::Windows::Forms::TreeView;\n      \n      // Set dock, location, size name, and tab order\n      // values for the TreeView object.\n      TreeView1-&gt;Dock = System::Windows::Forms::DockStyle::Left;\n      TreeView1-&gt;Location = System::Drawing::Point( 0, 0 );\n      TreeView1-&gt;Name = &quot;TreeView1&quot;;\n      TreeView1-&gt;Size = System::Drawing::Size( 152, 266 );\n      TreeView1-&gt;TabIndex = 1;\n      \n      // Associate the event-handling methods with the\n      // BeforeLabeEdit and the AfterSelect events.\n      TreeView1-&gt;BeforeLabelEdit += gcnew NodeLabelEditEventHandler( this, &amp;Form1::TreeView1_BeforeLabelEdit );\n      TreeView1-&gt;AfterSelect += gcnew TreeViewEventHandler( this, &amp;Form1::TreeView1_AfterSelect );\n      \n      // Set the LabelEdit property to true to allow the \n      // user to edit the TreeNode text.\n      this-&gt;TreeView1-&gt;LabelEdit = true;\n      \n      // Declare and create objects needed to populate \n      // the TreeView.\n      array&lt;String^&gt;^files = {&quot;bigPresentation.ppt&quot;,&quot;myFinances.xls&quot;,&quot;myResume.doc&quot;};\n      ;\n      String^ filePath = &quot;c:\\\\myFiles&quot;;\n      System::Collections::ArrayList^ nodes = gcnew System::Collections::ArrayList;\n      \n      // Create a node for each file, setting the Text property to the \n      // file&#39;s name and the Tag property to file&#39;s fully-qualified name.\n      System::Collections::IEnumerator^ myEnum = files-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         String^ file = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n         TreeNode^ node = gcnew TreeNode( file );\n         node-&gt;Tag = String::Concat( filePath, &quot;\\\\&quot;, file );\n         nodes-&gt;Add( node );\n      }\n\n      array&lt;TreeNode^&gt;^treeNodes = gcnew array&lt;TreeNode^&gt;(nodes-&gt;Count);\n      nodes-&gt;CopyTo( treeNodes );\n      \n      // Create a new node named topNode and add the ArrayList of \n      // nodes to topNode.\n      TreeNode^ topNode = gcnew TreeNode( &quot;myFiles&quot;,treeNodes );\n      topNode-&gt;Tag = filePath;\n      \n      // Add topNode to the TreeView.\n      TreeView1-&gt;Nodes-&gt;Add( topNode );\n      \n      // Add the TreeView to the form.\n      this-&gt;Controls-&gt;Add( TreeView1 );\n   }\n\n   void TreeView1_BeforeLabelEdit( Object^ /*sender*/, NodeLabelEditEventArgs^ e )\n   {\n      \n      // Determine whether the user has selected the top node. If so,\n      // change the CancelEdit property to true to cancel the edit.\n      if ( e-&gt;Node == TreeView1-&gt;TopNode )\n      {\n         e-&gt;CancelEdit = true;\n         MessageBox::Show( &quot;You are not allowed to edit the top node&quot; );\n      }\n\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#1\">    Private Sub InitializeTreeView()\n\n        &#39; Construct the TreeView object.\n        Me.TreeView1 = New System.Windows.Forms.TreeView\n\n        &#39; Set dock, location, size name, and tab order\n        &#39; values for the TreeView object.\n\n        With TreeView1\n            .Dock = System.Windows.Forms.DockStyle.Left\n            .Location = New System.Drawing.Point(0, 0)\n            .Name = &quot;TreeView1&quot;\n            .Size = New System.Drawing.Size(152, 266)\n            .TabIndex = 1\n        End With\n\n        &#39; Set the LabelEdit property to true to allow the \n        &#39; user to edit the TreeNode text.\n        Me.TreeView1.LabelEdit = True\n\n        &#39; Declare and create objects needed to populate \n        &#39; the TreeView.\n        Dim file, files(), filePath As String\n        files = New String() {&quot;bigPresentation.ppt&quot;, &quot;myFinances.xls&quot;, _\n            &quot;myResume.doc&quot;}\n        filePath = &quot;c:\\myFiles&quot;\n        Dim nodes As New System.Collections.ArrayList\n\n        &#39; Create a node for each file, setting the Text property to the \n        &#39; file&#39;s name and the Tag property to file&#39;s fully-qualified name.\n        For Each file In files\n            Dim node As New TreeNode(file)\n            node.Tag = filePath &amp; &quot;\\&quot; &amp; file\n            nodes.Add(node)\n        Next\n\n        &#39; Create a new node named topNode and add the ArrayList of \n        &#39; nodes to topNode.\n        Dim topNode As New TreeNode(&quot;myFiles&quot;, _\n            nodes.ToArray(GetType(TreeNode)))\n\n        topNode.Tag = filePath\n\n        &#39; Add topNode to the TreeView.\n        TreeView1.Nodes.Add(topNode)\n\n        &#39; Add the TreeView to the form.\n        Me.Controls.Add(TreeView1)\n    End Sub\n\n    Private Sub TreeView1_BeforeLabelEdit(ByVal sender As Object, _\n        ByVal e As NodeLabelEditEventArgs) Handles TreeView1.BeforeLabelEdit\n\n        &#39; Determine whether the user has selected the top node. If so,\n        &#39; change the CancelEdit property to true to cancel the edit.  \n        If (e.Node Is TreeView1.TopNode) Then\n\n            e.CancelEdit = True\n            MessageBox.Show(&quot;You are not allowed to edit the top node&quot;)\n        End If\n\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#2\">\t// Handle the After_Select event.\n\tprivate void TreeView1_AfterSelect(System.Object sender, \n\t\tSystem.Windows.Forms.TreeViewEventArgs e)\n\t{\n\n\t\t// Vary the response depending on which TreeViewAction\n\t\t// triggered the event. \n\t\tswitch((e.Action))\n\t\t{\n\t\t\tcase TreeViewAction.ByKeyboard:\n\t\t\t\tMessageBox.Show(&quot;You like the keyboard!&quot;);\n\t\t\t\tbreak;\n\t\t\tcase TreeViewAction.ByMouse:\n\t\t\t\tMessageBox.Show(&quot;You like the mouse!&quot;);\n\t\t\t\tbreak;\n\t\t}\n\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#2\">private:\n   // Handle the After_Select event.\n   void TreeView1_AfterSelect( System::Object^ /*sender*/, System::Windows::Forms::TreeViewEventArgs^ e )\n   {\n      \n      // Vary the response depending on which TreeViewAction\n      // triggered the event. \n      switch ( (e-&gt;Action) )\n      {\n         case TreeViewAction::ByKeyboard:\n            MessageBox::Show( &quot;You like the keyboard!&quot; );\n            break;\n\n         case TreeViewAction::ByMouse:\n            MessageBox::Show( &quot;You like the mouse!&quot; );\n            break;\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewAndPrintPreview#2\">    &#39; Handle the After_Select event.\n    Private Sub TreeView1_AfterSelect(ByVal sender As System.Object, _\n        ByVal e As System.Windows.Forms.TreeViewEventArgs) _\n            Handles TreeView1.AfterSelect\n\n        &#39; Vary the response depending on which TreeViewAction\n        &#39; triggered the event. \n        Select Case (e.Action)\n            Case TreeViewAction.ByKeyboard\n                MessageBox.Show(&quot;You like the keyboard!&quot;)\n            Case TreeViewAction.ByMouse\n                MessageBox.Show(&quot;You like the mouse!&quot;)\n        End Select\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_BeforeSelect\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeforeSelect</div>        \r\n          </div>\r\n    \r\n            <p>Occurs before the tree node is selected.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.TreeViewCancelEventHandler BeforeSelect;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about how to handle events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BeforeSelect event. This report helps you learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> named <code>TreeView1</code>. Then ensure that the event handler is associated with the BeforeSelect event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#635\">private void TreeView1_BeforeSelect(Object sender, TreeViewCancelEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Node&quot;, e.Node );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Action&quot;, e.Action );\nmessageBoxCS.AppendLine();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Cancel&quot;, e.Cancel );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;BeforeSelect Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#635\">Private Sub TreeView1_BeforeSelect(sender as Object, e as TreeViewCancelEventArgs) _ \n     Handles TreeView1.BeforeSelect\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Node&quot;, e.Node)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Action&quot;, e.Action)\n    messageBoxVB.AppendLine()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Cancel&quot;, e.Cancel)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;BeforeSelect Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_DrawNode\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DrawNode</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is drawn and the <span class=\"xref\">stem.Windows.Forms.TreeView.DrawMode*</span> property is set to a <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a> value other than <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.DrawTreeNodeEventHandler DrawNode;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this event to customize the appearance of nodes in a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control using owner drawing.  </p>\n<p> This event is raised only when the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property is set to <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a> values of <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a> or <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a>. The following table indicates how the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> can be customized when the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property is set to these values.  </p>\n<table>\n<thead>\n<tr>\n<th>DrawMode property value</th>\n<th>TreeNode customization</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a></td>\n<td>The <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> label area can be customized. All other <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> elements are drawn automatically.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a></td>\n<td>The appearance of the entire <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> can be customized. Icons, check boxes, plus and minus signs, and lines connecting the nodes must be drawn manually if they are desired.</td>\n</tr>\n</tbody>\n</table>\n<p> The region that the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Text_\" data-linktype=\"relative-path\">Text</a> value would occupy if it were drawn using the font specified by the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control&#39;s <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Font_\" data-linktype=\"relative-path\">Font</a> property is the region in which a node can be clicked to select it. This is called the hit test region. If you draw outside this region, you should provide your own code that selects a node when its visible area is clicked.  </p>\n<p> The hit test region corresponds to the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Bounds_\" data-linktype=\"relative-path\">Bounds</a> property when using <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a>. When using <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a>, however, the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Bounds_\" data-linktype=\"relative-path\">Bounds</a> property encompasses the entire width of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>. In this case, you can access the hit test region by getting the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Node_\" data-linktype=\"relative-path\">Node</a> value and accessing its <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Bounds_\" data-linktype=\"relative-path\">Bounds</a> property. You can then draw the hit test region of the node within these bounds, or you can provide your own hit test code. Note that setting the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_NodeFont_\" data-linktype=\"relative-path\">NodeFont</a> property does not change the size of the hit test region, which is calculated using the font specified for the entire <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a>.  </p>\n<p> For more information about how to handle events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to customize a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control using owner drawing. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control in the example displays optional node tags alongside the standard node labels. Node tags are specified by using the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control also uses custom colors, which include a custom highlight color.  </p>\n<p> You can customize most of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> colors by setting color properties, but the selection highlight color is not available as a property. Additionally, the default selection highlight rectangle extends only around a node label. Owner drawing must be used to draw the node tags and to draw a customized highlight rectangle large enough to include a node tag.  </p>\n<p> In the example, a handler for the DrawNode event draws the node tags and the custom selection highlight manually. Unselected nodes do not need customization. For these, the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault_\" data-linktype=\"relative-path\">DrawDefault</a> property is set to <code>true</code> so that they will be drawn by the operating system.  </p>\n<p> Additionally, a handler for the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event provides hit-testing. By default, a node can be selected only by clicking the region around its label. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event handler selects a node that is clicked anywhere within this region or within the region around a node tag, if present.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewOwnerDraw#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nPublic Class TreeViewOwnerDraw\n    Inherits Form\n\n    Private WithEvents myTreeView As TreeView\n    \n    &#39; Create a Font object for the node tags.\n    Private tagFont As New Font(&quot;Helvetica&quot;, 8, FontStyle.Bold)\n    \n    Public Sub New()\n\n        &#39; Create and initialize the TreeView control.\n        myTreeView = New TreeView()\n        myTreeView.Dock = DockStyle.Fill\n        myTreeView.BackColor = Color.Tan\n        myTreeView.CheckBoxes = True\n        \n        &#39; Add nodes to the TreeView control.\n        Dim node As TreeNode\n        Dim x As Integer\n        For x = 1 To 3\n\n            &#39; Add a root node to the TreeView control.\n            node = myTreeView.Nodes.Add(String.Format(&quot;Task {0}&quot;, x))\n            Dim y As Integer\n            For y = 1 To 3 \n\n                &#39; Add a child node to the root node.\n                node.Nodes.Add(String.Format(&quot;Subtask {0}&quot;, y))\n            Next y\n        Next x\n        myTreeView.ExpandAll()\n        \n        &#39; Add tags containing alert messages to a few nodes \n        &#39; and set the node background color to highlight them.\n        myTreeView.Nodes(1).Nodes(0).Tag = &quot;urgent!&quot;\n        myTreeView.Nodes(1).Nodes(0).BackColor = Color.Yellow\n        myTreeView.SelectedNode = myTreeView.Nodes(1).Nodes(0)\n        myTreeView.Nodes(2).Nodes(1).Tag = &quot;urgent!&quot;\n        myTreeView.Nodes(2).Nodes(1).BackColor = Color.Yellow\n        \n        &#39; Configure the TreeView control for owner-draw.\n        myTreeView.DrawMode = TreeViewDrawMode.OwnerDrawText\n\n        &#39; Add a handler for the MouseDown event so that a node can be \n        &#39; selected by clicking the tag text as well as the node text.\n        AddHandler myTreeView.MouseDown, AddressOf myTreeView_MouseDown\n        \n        &#39; Initialize the form and add the TreeView control to it.\n        Me.ClientSize = New Size(292, 273)\n        Me.Controls.Add(myTreeView)\n    End Sub &#39;New\n    \n    &lt;STAThreadAttribute()&gt; _\n    Shared Sub Main()\n        Application.Run(New TreeViewOwnerDraw())\n    End Sub &#39;Main\n    \n    &#39; Draws a node.\n    Private Sub myTreeView_DrawNode(ByVal sender As Object, _\n        ByVal e As DrawTreeNodeEventArgs) Handles myTreeView.DrawNode\n\n        &#39; Draw the background and node text for a selected node.\n        If (e.State And TreeNodeStates.Selected) &lt;&gt; 0 Then\n\n            &#39; Draw the background of the selected node. The NodeBounds\n            &#39; method makes the highlight rectangle large enough to\n            &#39; include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node))\n\n            &#39; Retrieve the node font. If the node font has not been set,\n            &#39; use the TreeView font.\n            Dim nodeFont As Font = e.Node.NodeFont\n            If nodeFont Is Nothing Then\n                nodeFont = CType(sender, TreeView).Font\n            End If\n\n            &#39; Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White, _\n                e.Bounds.Left - 2, e.Bounds.Top)\n\n        &#39; Use the default background and node text.\n        Else\n            e.DrawDefault = True\n        End If\n\n        &#39; If a node tag is present, draw its string representation \n        &#39; to the right of the label text.\n        If (e.Node.Tag IsNot Nothing) Then\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont, _\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top)\n        End If\n\n        &#39; If the node has focus, draw the focus rectangle large, making\n        &#39; it large enough to include the text of the node tag, if present.\n        If (e.State And TreeNodeStates.Focused) &lt;&gt; 0 Then\n            Dim focusPen As New Pen(Color.Black)\n            Try\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot\n                Dim focusBounds As Rectangle = NodeBounds(e.Node)\n                focusBounds.Size = New Size(focusBounds.Width - 1, _\n                    focusBounds.Height - 1)\n                e.Graphics.DrawRectangle(focusPen, focusBounds)\n            Finally\n                focusPen.Dispose()\n            End Try\n        End If\n\n    End Sub &#39;myTreeView_DrawNode\n\n    &#39; Selects a node that is clicked on its label or tag text.\n    Private Sub myTreeView_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)\n        Dim clickedNode As TreeNode = myTreeView.GetNodeAt(e.X, e.Y)\n        If NodeBounds(clickedNode).Contains(e.X, e.Y) Then\n            myTreeView.SelectedNode = clickedNode\n        End If\n    End Sub &#39;myTreeView_MouseDown\n\n    &#39; Returns the bounds of the specified node, including the region \n    &#39; occupied by the node label and any node tag displayed.\n    Private Function NodeBounds(ByVal node As TreeNode) As Rectangle\n\n        &#39; Set the return value to the normal node bounds.\n        Dim bounds As Rectangle = node.Bounds\n        If (node.Tag IsNot Nothing) Then\n\n            &#39; Retrieve a Graphics object from the TreeView handle\n            &#39; and use it to calculate the display width of the tag.\n            Dim g As Graphics = myTreeView.CreateGraphics()\n            Dim tagWidth As Integer = CInt(g.MeasureString( _\n                node.Tag.ToString(), tagFont).Width) + 6\n\n            &#39; Adjust the node bounds using the calculated value.\n            bounds.Offset(tagWidth \\ 2, 0)\n            bounds = Rectangle.Inflate(bounds, tagWidth \\ 2, 0)\n            g.Dispose()\n        End If\n        Return bounds\n    End Function &#39;NodeBounds\n\nEnd Class &#39;TreeViewOwnerDraw \n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewOwnerDraw#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\npublic ref class TreeViewOwnerDraw: public Form\n{\nprivate:\n   TreeView^ myTreeView;\n\n   // Create a Font object for the node tags.\n   System::Drawing::Font^ tagFont;\n\npublic:\n\n   TreeViewOwnerDraw()\n   {\n      tagFont = gcnew System::Drawing::Font( &quot;Helvetica&quot;,8,FontStyle::Bold );\n\n      // Create and initialize the TreeView control.\n      myTreeView = gcnew TreeView;\n      myTreeView-&gt;Dock = DockStyle::Fill;\n      myTreeView-&gt;BackColor = Color::Tan;\n      myTreeView-&gt;CheckBoxes = true;\n      \n      // Add nodes to the TreeView control.\n      TreeNode^ node;\n      for ( int x = 1; x &lt; 4; ++x )\n      {\n         // Add a root node to the TreeView control.\n         node = myTreeView-&gt;Nodes-&gt;Add( String::Format( &quot;Task {0}&quot;, x ) );\n         for ( int y = 1; y &lt; 4; ++y )\n         {\n            // Add a child node to the root node.\n            node-&gt;Nodes-&gt;Add( String::Format( &quot;Subtask {0}&quot;, y ) );\n         }\n      }\n      myTreeView-&gt;ExpandAll();\n      \n      // Add tags containing alert messages to a few nodes \n      // and set the node background color to highlight them.\n      myTreeView-&gt;Nodes[ 1 ]-&gt;Nodes[ 0 ]-&gt;Tag = &quot;urgent!&quot;;\n      myTreeView-&gt;Nodes[ 1 ]-&gt;Nodes[ 0 ]-&gt;BackColor = Color::Yellow;\n      myTreeView-&gt;SelectedNode = myTreeView-&gt;Nodes[ 1 ]-&gt;Nodes[ 0 ];\n      myTreeView-&gt;Nodes[ 2 ]-&gt;Nodes[ 1 ]-&gt;Tag = &quot;urgent!&quot;;\n      myTreeView-&gt;Nodes[ 2 ]-&gt;Nodes[ 1 ]-&gt;BackColor = Color::Yellow;\n      \n      // Configure the TreeView control for owner-draw and add\n      // a handler for the DrawNode event.\n      myTreeView-&gt;DrawMode = TreeViewDrawMode::OwnerDrawText;\n      myTreeView-&gt;DrawNode += gcnew DrawTreeNodeEventHandler( this, &amp;TreeViewOwnerDraw::myTreeView_DrawNode );\n      \n      // Add a handler for the MouseDown event so that a node can be \n      // selected by clicking the tag text as well as the node text.\n      myTreeView-&gt;MouseDown += gcnew MouseEventHandler( this, &amp;TreeViewOwnerDraw::myTreeView_MouseDown );\n      \n      // Initialize the form and add the TreeView control to it.\n      this-&gt;ClientSize = System::Drawing::Size( 292, 273 );\n      this-&gt;Controls-&gt;Add( myTreeView );\n   }\n\nprotected:\n   // Clean up any resources being used.        \n   ~TreeViewOwnerDraw()\n   {\n      if ( tagFont != nullptr )\n      {\n         delete tagFont;\n      }\n   }\n\n   // Draws a node.\nprivate:\n   void myTreeView_DrawNode( Object^ sender, DrawTreeNodeEventArgs^ e )\n   {\n      // Draw the background and node text for a selected node.\n      if ( (e-&gt;State &amp; TreeNodeStates::Selected) != (TreeNodeStates)0 )\n      {\n         // Draw the background of the selected node. The NodeBounds\n         // method makes the highlight rectangle large enough to\n         // include the text of a node tag, if one is present.\n         e-&gt;Graphics-&gt;FillRectangle( Brushes::Green, NodeBounds( e-&gt;Node ) );\n\n         // Retrieve the node font. If the node font has not been set,\n         // use the TreeView font.\n         System::Drawing::Font^ nodeFont = e-&gt;Node-&gt;NodeFont;\n         if ( nodeFont == nullptr )\n                  nodeFont = (dynamic_cast&lt;TreeView^&gt;(sender))-&gt;Font;\n\n         // Draw the node text.\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Text, nodeFont, Brushes::White, Rectangle::Inflate( e-&gt;Bounds, 2, 0 ) );\n      }\n      // Use the default background and node text.\n      else\n      {\n         e-&gt;DrawDefault = true;\n      }\n\n      // If a node tag is present, draw its string representation \n      // to the right of the label text.\n      if ( e-&gt;Node-&gt;Tag != nullptr )\n      {\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Tag-&gt;ToString(), tagFont, Brushes::Yellow, (float)e-&gt;Bounds.Right + 2, (float)e-&gt;Bounds.Top );\n      }\n\n      \n      // If the node has focus, draw the focus rectangle large, making\n      // it large enough to include the text of the node tag, if present.\n      if ( (e-&gt;State &amp; TreeNodeStates::Focused) != (TreeNodeStates)0 )\n      {\n         Pen^ focusPen = gcnew Pen( Color::Black );\n         try\n         {\n            focusPen-&gt;DashStyle = System::Drawing::Drawing2D::DashStyle::Dot;\n            Rectangle focusBounds = NodeBounds( e-&gt;Node );\n            focusBounds.Size = System::Drawing::Size( focusBounds.Width - 1, focusBounds.Height - 1 );\n            e-&gt;Graphics-&gt;DrawRectangle( focusPen, focusBounds );\n         }\n         finally\n         {\n            if ( focusPen )\n               delete safe_cast&lt;IDisposable^&gt;(focusPen);\n         }\n\n      }\n   }\n\n   // Selects a node that is clicked on its label or tag text.\n   void myTreeView_MouseDown( Object^ /*sender*/, MouseEventArgs^ e )\n   {\n      TreeNode^ clickedNode = myTreeView-&gt;GetNodeAt( e-&gt;X, e-&gt;Y );\n      if ( NodeBounds( clickedNode ).Contains( e-&gt;X, e-&gt;Y ) )\n      {\n         myTreeView-&gt;SelectedNode = clickedNode;\n      }\n   }\n\n   // Returns the bounds of the specified node, including the region \n   // occupied by the node label and any node tag displayed.\n   Rectangle NodeBounds( TreeNode^ node )\n   {\n      // Set the return value to the normal node bounds.\n      Rectangle bounds = node-&gt;Bounds;\n      if ( node-&gt;Tag != nullptr )\n      {\n         // Retrieve a Graphics object from the TreeView handle\n         // and use it to calculate the display width of the tag.\n         Graphics^ g = myTreeView-&gt;CreateGraphics();\n         int tagWidth = (int)g-&gt;MeasureString( node-&gt;Tag-&gt;ToString(), tagFont ).Width + 6;\n         \n         // Adjust the node bounds using the calculated value.\n         bounds.Offset( tagWidth / 2, 0 );\n         bounds = Rectangle::Inflate( bounds, tagWidth / 2, 0 );\n         g-&gt;~Graphics();\n      }\n\n      return bounds;\n   }\n};\n\n[STAThreadAttribute]\nint main()\n{\n   Application::Run( gcnew TreeViewOwnerDraw );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewOwnerDraw#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\npublic class TreeViewOwnerDraw : Form\n{\n    private TreeView myTreeView;\n\n    // Create a Font object for the node tags.\n    Font tagFont = new Font(&quot;Helvetica&quot;, 8, FontStyle.Bold);\n\n    public TreeViewOwnerDraw()\n    {\n        // Create and initialize the TreeView control.\n        myTreeView = new TreeView();\n        myTreeView.Dock = DockStyle.Fill;\n        myTreeView.BackColor = Color.Tan;\n        myTreeView.CheckBoxes = true;\n\n        // Add nodes to the TreeView control.\n        TreeNode node;\n        for (int x = 1; x &lt; 4; ++x)\n        {\n            // Add a root node to the TreeView control.\n            node = myTreeView.Nodes.Add(String.Format(&quot;Task {0}&quot;, x));\n            for (int y = 1; y &lt; 4; ++y)\n            {\n                // Add a child node to the root node.\n                node.Nodes.Add(String.Format(&quot;Subtask {0}&quot;, y));\n            }\n        }\n        myTreeView.ExpandAll();\n\n        // Add tags containing alert messages to a few nodes \n        // and set the node background color to highlight them.\n        myTreeView.Nodes[1].Nodes[0].Tag = &quot;urgent!&quot;;\n        myTreeView.Nodes[1].Nodes[0].BackColor = Color.Yellow;\n        myTreeView.SelectedNode = myTreeView.Nodes[1].Nodes[0];\n        myTreeView.Nodes[2].Nodes[1].Tag = &quot;urgent!&quot;;\n        myTreeView.Nodes[2].Nodes[1].BackColor = Color.Yellow;\n\n        // Configure the TreeView control for owner-draw and add\n        // a handler for the DrawNode event.\n        myTreeView.DrawMode = TreeViewDrawMode.OwnerDrawText;\n        myTreeView.DrawNode += \n            new DrawTreeNodeEventHandler(myTreeView_DrawNode);\n\n        // Add a handler for the MouseDown event so that a node can be \n        // selected by clicking the tag text as well as the node text.\n        myTreeView.MouseDown += new MouseEventHandler(myTreeView_MouseDown);\n\n        // Initialize the form and add the TreeView control to it.\n        this.ClientSize = new Size(292, 273);\n        this.Controls.Add(myTreeView);\n    }\n\n    // Clean up any resources being used.        \n    protected override void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            tagFont.Dispose();\n        }\n        base.Dispose(disposing);\n    }\n\n    [STAThreadAttribute()]\n    static void Main() \n    {\n        Application.Run(new TreeViewOwnerDraw());\n    }\n\n    // Draws a node.\n    private void myTreeView_DrawNode(\n        object sender, DrawTreeNodeEventArgs e)\n    {\n        // Draw the background and node text for a selected node.\n        if ((e.State &amp; TreeNodeStates.Selected) != 0)\n        {\n            // Draw the background of the selected node. The NodeBounds\n            // method makes the highlight rectangle large enough to\n            // include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node));\n\n            // Retrieve the node font. If the node font has not been set,\n            // use the TreeView font.\n            Font nodeFont = e.Node.NodeFont;\n            if (nodeFont == null) nodeFont = ((TreeView)sender).Font;\n\n            // Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White,\n                Rectangle.Inflate(e.Bounds, 2, 0));\n        }\n\n        // Use the default background and node text.\n        else \n        {\n            e.DrawDefault = true;\n        }\n\n        // If a node tag is present, draw its string representation \n        // to the right of the label text.\n        if (e.Node.Tag != null)\n        {\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont,\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top);\n        }\n\n        // If the node has focus, draw the focus rectangle large, making\n        // it large enough to include the text of the node tag, if present.\n        if ((e.State &amp; TreeNodeStates.Focused) != 0)\n        {\n            using (Pen focusPen = new Pen(Color.Black))\n            {\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;\n                Rectangle focusBounds = NodeBounds(e.Node);\n                focusBounds.Size = new Size(focusBounds.Width - 1, \n                focusBounds.Height - 1);\n                e.Graphics.DrawRectangle(focusPen, focusBounds);\n            }\n        }\n    }\n\n    // Selects a node that is clicked on its label or tag text.\n    private void myTreeView_MouseDown(object sender, MouseEventArgs e)\n    {\n        TreeNode clickedNode = myTreeView.GetNodeAt(e.X, e.Y);\n        if (NodeBounds(clickedNode).Contains(e.X, e.Y))\n        {\n            myTreeView.SelectedNode = clickedNode;\n        }\n    }\n\n    // Returns the bounds of the specified node, including the region \n    // occupied by the node label and any node tag displayed.\n    private Rectangle NodeBounds(TreeNode node)\n    {\n        // Set the return value to the normal node bounds.\n        Rectangle bounds = node.Bounds;\n        if (node.Tag != null)\n        {\n            // Retrieve a Graphics object from the TreeView handle\n            // and use it to calculate the display width of the tag.\n            Graphics g = myTreeView.CreateGraphics(); \n            int tagWidth = (int)g.MeasureString\n                (node.Tag.ToString(), tagFont).Width + 6;\n\n            // Adjust the node bounds using the calculated value.\n            bounds.Offset(tagWidth/2, 0);\n            bounds = Rectangle.Inflate(bounds, tagWidth/2, 0);\n            g.Dispose();\n         }\n        \n        return bounds;\n        \n    }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_ItemDrag\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ItemDrag</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user begins dragging a node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.ItemDragEventHandler ItemDrag;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to enable drag-and-drop operations within a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control. In this example, any node can be dragged to another node that is not a descendant of the dragged node. The dragged node, which includes all its descendant nodes, becomes a child of the destination node. When the left mouse button is used, the dragged node is moved to the destination node. When the right mouse button is used, the dragged node is copied to the destination node.  </p>\n<pre><code class=\"lang-cpp\" name=\"TreeViewDragDrop#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\npublic ref class Form1: public Form\n{\nprivate:\n   TreeView^ treeView1;\n\npublic:\n   Form1()\n   {\n      treeView1 = gcnew TreeView;\n      this-&gt;SuspendLayout();\n      \n      // Initialize treeView1.\n      treeView1-&gt;AllowDrop = true;\n      treeView1-&gt;Dock = DockStyle::Fill;\n      \n      // Add nodes to treeView1.\n      TreeNode^ node;\n      for ( int x = 0; x &lt; 3; ++x )\n      {\n         \n         // Add a root node to treeView1.\n         node = treeView1-&gt;Nodes-&gt;Add( String::Format( &quot;Node{0}&quot;, x * 4 ) );\n         for ( int y = 1; y &lt; 4; ++y )\n         {\n            \n            // Add a child node to the previously added node.\n            node = node-&gt;Nodes-&gt;Add( String::Format( &quot;Node{0}&quot;, x * 4 + y ) );\n\n         }\n      }\n      \n      // Add event handlers for the required drag events.\n      treeView1-&gt;ItemDrag += gcnew ItemDragEventHandler( this, &amp;Form1::treeView1_ItemDrag );\n      treeView1-&gt;DragEnter += gcnew DragEventHandler( this, &amp;Form1::treeView1_DragEnter );\n      treeView1-&gt;DragOver += gcnew DragEventHandler( this, &amp;Form1::treeView1_DragOver );\n      treeView1-&gt;DragDrop += gcnew DragEventHandler( this, &amp;Form1::treeView1_DragDrop );\n      \n      // Initialize the form.\n      this-&gt;ClientSize = System::Drawing::Size( 292, 273 );\n      this-&gt;Controls-&gt;Add( treeView1 );\n      this-&gt;ResumeLayout( false );\n   }\n\nprivate:\n   void treeView1_ItemDrag( Object^ /*sender*/, ItemDragEventArgs^ e )\n   {\n      \n      // Move the dragged node when the left mouse button is used.\n      if ( e-&gt;Button == ::MouseButtons::Left )\n      {\n         DoDragDrop( e-&gt;Item, DragDropEffects::Move );\n      }\n      // Copy the dragged node when the right mouse button is used.\n      else\n      \n      // Copy the dragged node when the right mouse button is used.\n      if ( e-&gt;Button == ::MouseButtons::Right )\n      {\n         DoDragDrop( e-&gt;Item, DragDropEffects::Copy );\n      }\n   }\n\n   // Set the target drop effect to the effect \n   // specified in the ItemDrag event handler.\n   void treeView1_DragEnter( Object^ /*sender*/, DragEventArgs^ e )\n   {\n      e-&gt;Effect = e-&gt;AllowedEffect;\n   }\n\n   // Select the node under the mouse pointer to indicate the \n   // expected drop location.\n   void treeView1_DragOver( Object^ /*sender*/, DragEventArgs^ e )\n   {\n      // Retrieve the client coordinates of the mouse position.\n      Point targetPoint = treeView1-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) );\n      \n      // Select the node at the mouse position.\n      treeView1-&gt;SelectedNode = treeView1-&gt;GetNodeAt( targetPoint );\n   }\n\n   void treeView1_DragDrop( Object^ /*sender*/, DragEventArgs^ e )\n   {\n      // Retrieve the client coordinates of the drop location.\n      Point targetPoint = treeView1-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) );\n      \n      // Retrieve the node at the drop location.\n      TreeNode^ targetNode = treeView1-&gt;GetNodeAt( targetPoint );\n      \n      // Retrieve the node that was dragged.\n      TreeNode^ draggedNode = dynamic_cast&lt;TreeNode^&gt;(e-&gt;Data-&gt;GetData( TreeNode::typeid ));\n      \n      // Confirm that the node at the drop location is not \n      // the dragged node or a descendant of the dragged node.\n      if (  !draggedNode-&gt;Equals( targetNode ) &amp;&amp;  !ContainsNode( draggedNode, targetNode ) )\n      {\n         \n         // If it is a move operation, remove the node from its current \n         // location and add it to the node at the drop location.\n         if ( e-&gt;Effect == DragDropEffects::Move )\n         {\n            draggedNode-&gt;Remove();\n            targetNode-&gt;Nodes-&gt;Add( draggedNode );\n         }\n         // If it is a copy operation, clone the dragged node \n         // and add it to the node at the drop location.\n         else\n         \n         // If it is a copy operation, clone the dragged node \n         // and add it to the node at the drop location.\n         if ( e-&gt;Effect == DragDropEffects::Copy )\n         {\n            targetNode-&gt;Nodes-&gt;Add( dynamic_cast&lt;TreeNode^&gt;(draggedNode-&gt;Clone()) );\n         }\n         \n         // Expand the node at the location \n         // to show the dropped node.\n         targetNode-&gt;Expand();\n      }\n   }\n\n   // Determine whether one node is a parent \n   // or ancestor of a second node.\n   bool ContainsNode( TreeNode^ node1, TreeNode^ node2 )\n   {\n      // Check the parent node of the second node.\n      if ( node2-&gt;Parent == nullptr )\n            return false;\n\n      if ( node2-&gt;Parent-&gt;Equals( node1 ) )\n            return true;\n      \n      // If the parent node is not null or equal to the first node, \n      // call the ContainsNode method recursively using the parent of \n      // the second node.\n      return ContainsNode( node1, node2-&gt;Parent );\n   }\n};\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewDragDrop#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\npublic class Form1 : Form\n{\n    private TreeView treeView1;\n\n    public Form1()\n    {\n        treeView1 = new TreeView();\n\n        this.SuspendLayout();\n\n        // Initialize treeView1.\n        treeView1.AllowDrop = true;\n        treeView1.Dock = DockStyle.Fill;\n\n        // Add nodes to treeView1.\n        TreeNode node;\n        for (int x = 0; x &lt; 3; ++x)\n        {\n            // Add a root node to treeView1.\n            node = treeView1.Nodes.Add(String.Format(&quot;Node{0}&quot;, x*4));\n            for (int y = 1; y &lt; 4; ++y)\n            {\n                // Add a child node to the previously added node.\n                node = node.Nodes.Add(String.Format(&quot;Node{0}&quot;, x*4 + y));\n            }\n        }\n\n        // Add event handlers for the required drag events.\n        treeView1.ItemDrag += new ItemDragEventHandler(treeView1_ItemDrag);\n        treeView1.DragEnter += new DragEventHandler(treeView1_DragEnter);\n        treeView1.DragOver += new DragEventHandler(treeView1_DragOver);\n        treeView1.DragDrop += new DragEventHandler(treeView1_DragDrop);\n\n        // Initialize the form.\n        this.ClientSize = new Size(292, 273);\n        this.Controls.Add(treeView1);\n\n        this.ResumeLayout(false);\n    }\n\n    [STAThread]\n    static void Main() \n    {\n        Application.Run(new Form1());\n    }\n\n    private void treeView1_ItemDrag(object sender, ItemDragEventArgs e)\n    {\n        // Move the dragged node when the left mouse button is used.\n        if (e.Button == MouseButtons.Left)\n        {\n            DoDragDrop(e.Item, DragDropEffects.Move);\n        }\n\n        // Copy the dragged node when the right mouse button is used.\n        else if (e.Button == MouseButtons.Right)\n        {\n            DoDragDrop(e.Item, DragDropEffects.Copy);\n        }\n    }\n\n    // Set the target drop effect to the effect \n    // specified in the ItemDrag event handler.\n    private void treeView1_DragEnter(object sender, DragEventArgs e)\n    {\n        e.Effect = e.AllowedEffect;\n    }\n\n    // Select the node under the mouse pointer to indicate the \n    // expected drop location.\n    private void treeView1_DragOver(object sender, DragEventArgs e)\n    {\n        // Retrieve the client coordinates of the mouse position.\n        Point targetPoint = treeView1.PointToClient(new Point(e.X, e.Y));\n\n        // Select the node at the mouse position.\n        treeView1.SelectedNode = treeView1.GetNodeAt(targetPoint);\n    }\n\n    private void treeView1_DragDrop(object sender, DragEventArgs e)\n    {\n        // Retrieve the client coordinates of the drop location.\n        Point targetPoint = treeView1.PointToClient(new Point(e.X, e.Y));\n\n        // Retrieve the node at the drop location.\n        TreeNode targetNode = treeView1.GetNodeAt(targetPoint);\n\n        // Retrieve the node that was dragged.\n        TreeNode draggedNode = (TreeNode)e.Data.GetData(typeof(TreeNode));\n\n        // Confirm that the node at the drop location is not \n        // the dragged node or a descendant of the dragged node.\n        if (!draggedNode.Equals(targetNode) &amp;&amp; !ContainsNode(draggedNode, targetNode))\n        {\n            // If it is a move operation, remove the node from its current \n            // location and add it to the node at the drop location.\n            if (e.Effect == DragDropEffects.Move)\n            {\n                draggedNode.Remove();\n                targetNode.Nodes.Add(draggedNode);\n            }\n\n            // If it is a copy operation, clone the dragged node \n            // and add it to the node at the drop location.\n            else if (e.Effect == DragDropEffects.Copy)\n            {\n                targetNode.Nodes.Add((TreeNode)draggedNode.Clone());\n            }\n\n            // Expand the node at the location \n            // to show the dropped node.\n            targetNode.Expand();\n        }\n    }\n\n    // Determine whether one node is a parent \n    // or ancestor of a second node.\n    private bool ContainsNode(TreeNode node1, TreeNode node2)\n    {\n        // Check the parent node of the second node.\n        if (node2.Parent == null) return false;\n        if (node2.Parent.Equals(node1)) return true;\n\n        // If the parent node is not null or equal to the first node, \n        // call the ContainsNode method recursively using the parent of \n        // the second node.\n        return ContainsNode(node1, node2.Parent);\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeViewDragDrop#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nPublic Class Form1\n    Inherits Form\n    Private treeView1 As TreeView\n\n    Public Sub New()\n        treeView1 = New TreeView()\n        \n        Me.SuspendLayout()\n        \n        &#39; Initialize treeView1.\n        treeView1.AllowDrop = True\n        treeView1.Dock = DockStyle.Fill\n        \n        &#39; Add nodes to treeView1.\n        Dim node As TreeNode\n        Dim x As Integer\n        For x = 0 To 3\n            &#39; Add a root node to treeView1.\n            node = treeView1.Nodes.Add(String.Format(&quot;Node{0}&quot;, x * 4))\n            Dim y As Integer\n            For y = 1 To 4\n                &#39; Add a child node to the previously added node.\n                node = node.Nodes.Add(String.Format(&quot;Node{0}&quot;, x * 4 + y))\n            Next y\n        Next x\n\n        &#39; Add event handlers for the required drag events.\n        AddHandler treeView1.ItemDrag, AddressOf treeView1_ItemDrag\n        AddHandler treeView1.DragEnter, AddressOf treeView1_DragEnter\n        AddHandler treeView1.DragOver, AddressOf treeView1_DragOver\n        AddHandler treeView1.DragDrop, AddressOf treeView1_DragDrop\n\n        &#39; Initialize the form.\n        Me.ClientSize = New Size(292, 273)\n        Me.Controls.Add(treeView1)\n\n        Me.ResumeLayout(False)\n    End Sub &#39;New\n\n    Shared Sub Main()\n        Application.Run(New Form1)\n    End Sub &#39;Main\n\n    Private Sub treeView1_ItemDrag(ByVal sender As Object, ByVal e As ItemDragEventArgs)\n\n        &#39; Move the dragged node when the left mouse button is used.\n        If e.Button = MouseButtons.Left Then\n            DoDragDrop(e.Item, DragDropEffects.Move)\n\n        &#39; Copy the dragged node when the right mouse button is used.\n        ElseIf e.Button = MouseButtons.Right Then\n            DoDragDrop(e.Item, DragDropEffects.Copy)\n        End If\n    End Sub &#39;treeView1_ItemDrag\n\n    &#39; Set the target drop effect to the effect \n    &#39; specified in the ItemDrag event handler.\n    Private Sub treeView1_DragEnter(ByVal sender As Object, ByVal e As DragEventArgs)\n        e.Effect = e.AllowedEffect\n    End Sub &#39;treeView1_DragEnter\n\n    &#39; Select the node under the mouse pointer to indicate the \n    &#39; expected drop location.\n    Private Sub treeView1_DragOver(ByVal sender As Object, ByVal e As DragEventArgs)\n        &#39; Retrieve the client coordinates of the mouse position.\n        Dim targetPoint As Point = treeView1.PointToClient(new Point(e.X, e.Y))\n\n        &#39; Select the node at the mouse position.\n        treeView1.SelectedNode = treeView1.GetNodeAt(targetPoint)\n    End Sub &#39;treeView1_DragOver\n\n    Private Sub treeView1_DragDrop(ByVal sender As Object, ByVal e As DragEventArgs)\n\n        &#39; Retrieve the client coordinates of the drop location.\n        Dim targetPoint As Point = treeView1.PointToClient(New Point(e.X, e.Y))\n\n        &#39; Retrieve the node at the drop location.\n        Dim targetNode As TreeNode = treeView1.GetNodeAt(targetPoint)\n\n        &#39; Retrieve the node that was dragged.\n        Dim draggedNode As TreeNode = CType(e.Data.GetData(GetType(TreeNode)), TreeNode)\n\n        &#39; Confirm that the node at the drop location is not \n        &#39; the dragged node or a descendant of the dragged node.\n        If Not draggedNode.Equals(targetNode) AndAlso Not ContainsNode(draggedNode, targetNode) Then\n\n            &#39; If it is a move operation, remove the node from its current \n            &#39; location and add it to the node at the drop location.\n            If e.Effect = DragDropEffects.Move Then\n                draggedNode.Remove()\n                targetNode.Nodes.Add(draggedNode)\n\n            &#39; If it is a copy operation, clone the dragged node \n            &#39; and add it to the node at the drop location.\n            ElseIf e.Effect = DragDropEffects.Copy Then\n                targetNode.Nodes.Add(CType(draggedNode.Clone(), TreeNode))\n            End If\n\n            &#39; Expand the node at the location \n            &#39; to show the dropped node.\n            targetNode.Expand()\n        End If\n    End Sub &#39;treeView1_DragDrop\n\n    &#39; Determine whether one node is a parent \n    &#39; or ancestor of a second node.\n    Private Function ContainsNode(ByVal node1 As TreeNode, ByVal node2 As TreeNode) As Boolean\n\n        &#39; Check the parent node of the second node.\n        If node2.Parent Is Nothing Then\n            Return False\n        End If\n        If node2.Parent.Equals(node1) Then\n            Return True\n        End If\n\n        &#39; If the parent node is not null or equal to the first node, \n        &#39; call the ContainsNode method recursively using the parent of \n        &#39; the second node.\n        Return ContainsNode(node1, node2.Parent)\n    End Function &#39;ContainsNode\n\nEnd Class &#39;Form1 \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_NodeMouseClick\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeMouseClick</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user clicks a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> with the mouse.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.TreeNodeMouseClickEventHandler NodeMouseClick;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event occurs when the user clicks any part of a tree node with the mouse, including the plus sign (<strong>+</strong>) or minus sign (<strong>-</strong>) that indicates whether the node is collapsed or expanded.  </p>\n<p> For more information about how to handle events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to handle the NodeMouseClick event.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#4\">private:\n    void InitialTreeView_NodeMouseClick(Object^ sender,\n        TreeNodeMouseClickEventArgs^ e)\n    {\n        displayNodes-&gt;Text = e-&gt;Node-&gt;Text;\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#4\">    void treeView1_NodeMouseClick(object sender,  \n        TreeNodeMouseClickEventArgs e)\n    {\n        textBox1.Text = e.Node.Text;\n    }\n    \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#4\">    Sub treeView1_NodeMouseClick(ByVal sender As Object, _\n        ByVal e As TreeNodeMouseClickEventArgs) _\n        Handles treeView1.NodeMouseClick\n\n        textBox1.Text = e.Node.Text\n\n    End Sub &#39;treeView1_NodeMouseClick\n    \n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_NodeMouseDoubleClick\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeMouseDoubleClick</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the user double-clicks a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> with the mouse.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.TreeNodeMouseClickEventHandler NodeMouseDoubleClick;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event occurs when the user double-clicks any part of a tree node with the mouse, including the plus sign (+) or minus sign (-) that indicates whether the node is collapsed or expanded.  </p>\n<p> For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to handle the NodeMouseDoubleClick event and how to use the <a class=\"xref\" href=\"system.windows.forms.treenodemouseclickeventargs\" data-linktype=\"relative-path\">TreeNodeMouseClickEventArgs</a>. To run this example, paste the code into a Windows Form that contains a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> named <code>treeView1</code>. Populate <code>treeView1</code> with the names of files located in the <code>c:\\</code> directory of the system the sample is running on, and associate the NodeMouseDoubleClick event of <code>treeView1</code> with the <code>treeView1_NodeMouseDoubleClick</code> method in this example.  This example requires that the user has administrator privileges on the machine running the example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#5\">    // If a node is double-clicked, open the file indicated by the TreeNode.\nprivate:\n    void InitialTreeView_NodeMouseDoubleClick(Object^ sender,\n        TreeNodeMouseClickEventArgs^ e)\n    {\n        try\n        {\n            // Look for a file extension.\n            if (e-&gt;Node-&gt;Text-&gt;Contains(&quot;.&quot;))\n            {\n                System::Diagnostics::Process::Start(&quot;c:\\\\&quot; + e-&gt;Node-&gt;Text);\n            }\n        }\n        // If the file is not found, handle the exception and inform the user.\n        catch (System::ComponentModel::Win32Exception^)\n        {\n            MessageBox::Show(&quot;File not found.&quot;);\n        }\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#5\">    // If a node is double-clicked, open the file indicated by the TreeNode.\n    void treeView1_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)\n    {\n        try\n        {\n            // Look for a file extension.\n            if (e.Node.Text.Contains(&quot;.&quot;))\n                System.Diagnostics.Process.Start(@&quot;c:\\&quot; + e.Node.Text);\n        }\n            // If the file is not found, handle the exception and inform the user.\n        catch (System.ComponentModel.Win32Exception)\n        {\n            MessageBox.Show(&quot;File not found.&quot;);\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.TreeViewWhidbeyMembers#5\">    &#39; If a node is double-clicked, open the file indicated by the TreeNode.\n    Sub treeView1_NodeMouseDoubleClick(ByVal sender As Object, _\n        ByVal e As TreeNodeMouseClickEventArgs) _\n        Handles treeView1.NodeMouseDoubleClick\n\n        Try\n            &#39; Look for a file extension, and open the file.\n            If e.Node.Text.Contains(&quot;.&quot;) Then\n                System.Diagnostics.Process.Start(&quot;c:\\&quot; + e.Node.Text)\n            End If\n            &#39; If the file is not found, handle the exception and inform the user.\n        Catch\n            MessageBox.Show(&quot;File not found.&quot;)\n        End Try\n\n    End Sub &#39;treeView1_NodeMouseDoubleClick\n    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_NodeMouseHover\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeMouseHover</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the mouse hovers over a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.TreeNodeMouseHoverEventHandler NodeMouseHover;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the mouse is located over a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>, the NodeMouseHover event will occur before the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseHover\" data-linktype=\"relative-path\">MouseHover</a> event.  </p>\n<p> For more information about how to handle events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the NodeMouseHover event. This report helps you learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> named <code>TreeView1</code>. Then ensure that the event handler is associated with the NodeMouseHover event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#634\">private void TreeView1_NodeMouseHover(Object sender, TreeNodeMouseHoverEventArgs e) {\n\nSystem.Text.StringBuilder messageBoxCS = new System.Text.StringBuilder();\nmessageBoxCS.AppendFormat(&quot;{0} = {1}&quot;, &quot;Node&quot;, e.Node );\nmessageBoxCS.AppendLine();\nMessageBox.Show(messageBoxCS.ToString(), &quot;NodeMouseHover Event&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#634\">Private Sub TreeView1_NodeMouseHover(sender as Object, e as TreeNodeMouseHoverEventArgs) _ \n     Handles TreeView1.NodeMouseHover\n\n    Dim messageBoxVB as New System.Text.StringBuilder()\n    messageBoxVB.AppendFormat(&quot;{0} = {1}&quot;, &quot;Node&quot;, e.Node)\n    messageBoxVB.AppendLine()\n    MessageBox.Show(messageBoxVB.ToString(),&quot;NodeMouseHover Event&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_PaddingChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PaddingChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.TreeView.Padding*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler PaddingChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_Paint\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Paint</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> is drawn.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Windows.Forms.PaintEventHandler Paint;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_RightToLeftLayoutChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RightToLeftLayoutChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the value of the <span class=\"xref\">stem.Windows.Forms.TreeView.RightToLeftLayout*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler RightToLeftLayoutChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about how to handle events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the RightToLeftLayoutChanged event. This report helps you learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <a class=\"xref\" href=\"system.windows.forms.messagebox#System_Windows_Forms_MessageBox_Show_\" data-linktype=\"relative-path\">Show</a> with <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> or appending the message to a multiline <a class=\"xref\" href=\"system.windows.forms.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> To run the example code, paste it into a project that contains an instance of type <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> named <code>TreeView1</code>. Then ensure that the event handler is associated with the RightToLeftLayoutChanged event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.EventExamples#639\">private void TreeView1_RightToLeftLayoutChanged(Object sender, EventArgs e) {\n\n   MessageBox.Show(&quot;You are in the TreeView.RightToLeftLayoutChanged event.&quot;);\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.EventExamples#639\">Private Sub TreeView1_RightToLeftLayoutChanged(sender as Object, e as EventArgs) _ \n     Handles TreeView1.RightToLeftLayoutChanged\n\n   MessageBox.Show(&quot;You are in the TreeView.RightToLeftLayoutChanged event.&quot;)\n\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TreeView_TextChanged\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextChanged</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <span class=\"xref\">stem.Windows.Forms.TreeView.Text*</span> property changes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event EventHandler TextChanged;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.TreeView.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.TreeView.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.AfterCheck\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_AfterCheck\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_AfterCheck\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.AfterCollapse\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_AfterCollapse\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_AfterCollapse\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.AfterExpand\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_AfterExpand\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_AfterExpand\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.AfterLabelEdit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_AfterLabelEdit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_AfterLabelEdit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.AfterSelect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_AfterSelect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_AfterSelect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.BackColor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.BackgroundImage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.BackgroundImageChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_BackgroundImageChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_BackgroundImageChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.BackgroundImageLayout\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.BackgroundImageLayoutChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_BackgroundImageLayoutChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_BackgroundImageLayoutChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.BeforeCheck\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_BeforeCheck\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_BeforeCheck\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.BeforeCollapse\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_BeforeCollapse\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_BeforeCollapse\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.BeforeExpand\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_BeforeExpand\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_BeforeExpand\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.BeforeLabelEdit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_BeforeLabelEdit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_BeforeLabelEdit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.BeforeSelect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_BeforeSelect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_BeforeSelect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.BeginUpdate\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.BorderStyle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.CheckBoxes\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.CollapseAll\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.CreateHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.CreateParams\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.DefaultSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.DoubleBuffered\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.DrawMode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.DrawNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_DrawNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_DrawNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.EndUpdate\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.ExpandAll\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.ForeColor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.FullRowSelect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.GetItemRenderStyles\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.GetNodeAt\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.GetNodeCount\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.HideSelection\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.HitTest\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.HotTracking\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.ImageIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.ImageKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.ImageList\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.Indent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.IsInputKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.ItemDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_ItemDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_ItemDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.ItemHeight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.LabelEdit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.LineColor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.NodeMouseClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_NodeMouseClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_NodeMouseClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.NodeMouseDoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_NodeMouseDoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_NodeMouseDoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.NodeMouseHover\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_NodeMouseHover\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_NodeMouseHover\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.Nodes\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnAfterCheck\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnAfterCollapse\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnAfterExpand\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnAfterLabelEdit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnAfterSelect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnBeforeCheck\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnBeforeCollapse\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnBeforeExpand\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnBeforeLabelEdit\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnBeforeSelect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnDrawNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnHandleCreated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnHandleDestroyed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnItemDrag\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnKeyDown\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnKeyPress\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnKeyUp\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnMouseHover\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnMouseLeave\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnNodeMouseClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnNodeMouseDoubleClick\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnNodeMouseHover\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.OnRightToLeftLayoutChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.Padding\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.PaddingChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_PaddingChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_PaddingChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.Paint\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_Paint\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_Paint\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.PathSeparator\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.RightToLeftLayout\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.RightToLeftLayoutChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_RightToLeftLayoutChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_RightToLeftLayoutChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.Scrollable\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.SelectedImageIndex\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.SelectedImageKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.SelectedNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.ShowLines\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.ShowNodeToolTips\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.ShowPlusMinus\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.ShowRootLines\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.Sort\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.Sorted\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.StateImageList\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.Text\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.TextChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.add_TextChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.remove_TextChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.TopNode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.ToString\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.TreeViewNodeSorter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.VisibleCount\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeView.WndProc\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7e77cc28-b3bb-0e67-a8fc-1d9d5ad380b5\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Displays a hierarchical collection of labeled items, each represented by a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.TreeView\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.TreeView.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.TreeView.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.TreeView","System.Windows.Forms.TreeView..ctor","System.Windows.Forms.TreeView.AfterCheck","System.Windows.Forms.TreeView.add_AfterCheck","System.Windows.Forms.TreeView.remove_AfterCheck","System.Windows.Forms.TreeView.AfterCollapse","System.Windows.Forms.TreeView.add_AfterCollapse","System.Windows.Forms.TreeView.remove_AfterCollapse","System.Windows.Forms.TreeView.AfterExpand","System.Windows.Forms.TreeView.add_AfterExpand","System.Windows.Forms.TreeView.remove_AfterExpand","System.Windows.Forms.TreeView.AfterLabelEdit","System.Windows.Forms.TreeView.add_AfterLabelEdit","System.Windows.Forms.TreeView.remove_AfterLabelEdit","System.Windows.Forms.TreeView.AfterSelect","System.Windows.Forms.TreeView.add_AfterSelect","System.Windows.Forms.TreeView.remove_AfterSelect","System.Windows.Forms.TreeView.BackColor","System.Windows.Forms.TreeView.BackgroundImage","System.Windows.Forms.TreeView.BackgroundImageChanged","System.Windows.Forms.TreeView.add_BackgroundImageChanged","System.Windows.Forms.TreeView.remove_BackgroundImageChanged","System.Windows.Forms.TreeView.BackgroundImageLayout","System.Windows.Forms.TreeView.BackgroundImageLayoutChanged","System.Windows.Forms.TreeView.add_BackgroundImageLayoutChanged","System.Windows.Forms.TreeView.remove_BackgroundImageLayoutChanged","System.Windows.Forms.TreeView.BeforeCheck","System.Windows.Forms.TreeView.add_BeforeCheck","System.Windows.Forms.TreeView.remove_BeforeCheck","System.Windows.Forms.TreeView.BeforeCollapse","System.Windows.Forms.TreeView.add_BeforeCollapse","System.Windows.Forms.TreeView.remove_BeforeCollapse","System.Windows.Forms.TreeView.BeforeExpand","System.Windows.Forms.TreeView.add_BeforeExpand","System.Windows.Forms.TreeView.remove_BeforeExpand","System.Windows.Forms.TreeView.BeforeLabelEdit","System.Windows.Forms.TreeView.add_BeforeLabelEdit","System.Windows.Forms.TreeView.remove_BeforeLabelEdit","System.Windows.Forms.TreeView.BeforeSelect","System.Windows.Forms.TreeView.add_BeforeSelect","System.Windows.Forms.TreeView.remove_BeforeSelect","System.Windows.Forms.TreeView.BeginUpdate","System.Windows.Forms.TreeView.BorderStyle","System.Windows.Forms.TreeView.CheckBoxes","System.Windows.Forms.TreeView.CollapseAll","System.Windows.Forms.TreeView.CreateHandle","System.Windows.Forms.TreeView.CreateParams","System.Windows.Forms.TreeView.DefaultSize","System.Windows.Forms.TreeView.Dispose","System.Windows.Forms.TreeView.DoubleBuffered","System.Windows.Forms.TreeView.DrawMode","System.Windows.Forms.TreeView.DrawNode","System.Windows.Forms.TreeView.add_DrawNode","System.Windows.Forms.TreeView.remove_DrawNode","System.Windows.Forms.TreeView.EndUpdate","System.Windows.Forms.TreeView.ExpandAll","System.Windows.Forms.TreeView.ForeColor","System.Windows.Forms.TreeView.FullRowSelect","System.Windows.Forms.TreeView.GetItemRenderStyles","System.Windows.Forms.TreeView.GetNodeAt","System.Windows.Forms.TreeView.GetNodeCount","System.Windows.Forms.TreeView.HideSelection","System.Windows.Forms.TreeView.HitTest","System.Windows.Forms.TreeView.HotTracking","System.Windows.Forms.TreeView.ImageIndex","System.Windows.Forms.TreeView.ImageKey","System.Windows.Forms.TreeView.ImageList","System.Windows.Forms.TreeView.Indent","System.Windows.Forms.TreeView.IsInputKey","System.Windows.Forms.TreeView.ItemDrag","System.Windows.Forms.TreeView.add_ItemDrag","System.Windows.Forms.TreeView.remove_ItemDrag","System.Windows.Forms.TreeView.ItemHeight","System.Windows.Forms.TreeView.LabelEdit","System.Windows.Forms.TreeView.LineColor","System.Windows.Forms.TreeView.NodeMouseClick","System.Windows.Forms.TreeView.add_NodeMouseClick","System.Windows.Forms.TreeView.remove_NodeMouseClick","System.Windows.Forms.TreeView.NodeMouseDoubleClick","System.Windows.Forms.TreeView.add_NodeMouseDoubleClick","System.Windows.Forms.TreeView.remove_NodeMouseDoubleClick","System.Windows.Forms.TreeView.NodeMouseHover","System.Windows.Forms.TreeView.add_NodeMouseHover","System.Windows.Forms.TreeView.remove_NodeMouseHover","System.Windows.Forms.TreeView.Nodes","System.Windows.Forms.TreeView.OnAfterCheck","System.Windows.Forms.TreeView.OnAfterCollapse","System.Windows.Forms.TreeView.OnAfterExpand","System.Windows.Forms.TreeView.OnAfterLabelEdit","System.Windows.Forms.TreeView.OnAfterSelect","System.Windows.Forms.TreeView.OnBeforeCheck","System.Windows.Forms.TreeView.OnBeforeCollapse","System.Windows.Forms.TreeView.OnBeforeExpand","System.Windows.Forms.TreeView.OnBeforeLabelEdit","System.Windows.Forms.TreeView.OnBeforeSelect","System.Windows.Forms.TreeView.OnDrawNode","System.Windows.Forms.TreeView.OnHandleCreated","System.Windows.Forms.TreeView.OnHandleDestroyed","System.Windows.Forms.TreeView.OnItemDrag","System.Windows.Forms.TreeView.OnKeyDown","System.Windows.Forms.TreeView.OnKeyPress","System.Windows.Forms.TreeView.OnKeyUp","System.Windows.Forms.TreeView.OnMouseHover","System.Windows.Forms.TreeView.OnMouseLeave","System.Windows.Forms.TreeView.OnNodeMouseClick","System.Windows.Forms.TreeView.OnNodeMouseDoubleClick","System.Windows.Forms.TreeView.OnNodeMouseHover","System.Windows.Forms.TreeView.OnRightToLeftLayoutChanged","System.Windows.Forms.TreeView.Padding","System.Windows.Forms.TreeView.PaddingChanged","System.Windows.Forms.TreeView.add_PaddingChanged","System.Windows.Forms.TreeView.remove_PaddingChanged","System.Windows.Forms.TreeView.Paint","System.Windows.Forms.TreeView.add_Paint","System.Windows.Forms.TreeView.remove_Paint","System.Windows.Forms.TreeView.PathSeparator","System.Windows.Forms.TreeView.RightToLeftLayout","System.Windows.Forms.TreeView.RightToLeftLayoutChanged","System.Windows.Forms.TreeView.add_RightToLeftLayoutChanged","System.Windows.Forms.TreeView.remove_RightToLeftLayoutChanged","System.Windows.Forms.TreeView.Scrollable","System.Windows.Forms.TreeView.SelectedImageIndex","System.Windows.Forms.TreeView.SelectedImageKey","System.Windows.Forms.TreeView.SelectedNode","System.Windows.Forms.TreeView.ShowLines","System.Windows.Forms.TreeView.ShowNodeToolTips","System.Windows.Forms.TreeView.ShowPlusMinus","System.Windows.Forms.TreeView.ShowRootLines","System.Windows.Forms.TreeView.Sort","System.Windows.Forms.TreeView.Sorted","System.Windows.Forms.TreeView.StateImageList","System.Windows.Forms.TreeView.Text","System.Windows.Forms.TreeView.TextChanged","System.Windows.Forms.TreeView.add_TextChanged","System.Windows.Forms.TreeView.remove_TextChanged","System.Windows.Forms.TreeView.TopNode","System.Windows.Forms.TreeView.ToString","System.Windows.Forms.TreeView.TreeViewNodeSorter","System.Windows.Forms.TreeView.VisibleCount","System.Windows.Forms.TreeView.WndProc"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.TreeView","System::Windows::Forms::TreeView","System.Windows.Forms.TreeView.#ctor","System::Windows::Forms::TreeView::#ctor","System.Windows.Forms.TreeView.AfterCheck","System::Windows::Forms::TreeView::AfterCheck","System.Windows.Forms.TreeView.AfterCollapse","System::Windows::Forms::TreeView::AfterCollapse","System.Windows.Forms.TreeView.AfterExpand","System::Windows::Forms::TreeView::AfterExpand","System.Windows.Forms.TreeView.AfterLabelEdit","System::Windows::Forms::TreeView::AfterLabelEdit","System.Windows.Forms.TreeView.AfterSelect","System::Windows::Forms::TreeView::AfterSelect","System.Windows.Forms.TreeView.BackColor","System::Windows::Forms::TreeView::BackColor","System.Windows.Forms.TreeView.BackgroundImage","System::Windows::Forms::TreeView::BackgroundImage","System.Windows.Forms.TreeView.BackgroundImageChanged","System::Windows::Forms::TreeView::BackgroundImageChanged","System.Windows.Forms.TreeView.BackgroundImageLayout","System::Windows::Forms::TreeView::BackgroundImageLayout","System.Windows.Forms.TreeView.BackgroundImageLayoutChanged","System::Windows::Forms::TreeView::BackgroundImageLayoutChanged","System.Windows.Forms.TreeView.BeforeCheck","System::Windows::Forms::TreeView::BeforeCheck","System.Windows.Forms.TreeView.BeforeCollapse","System::Windows::Forms::TreeView::BeforeCollapse","System.Windows.Forms.TreeView.BeforeExpand","System::Windows::Forms::TreeView::BeforeExpand","System.Windows.Forms.TreeView.BeforeLabelEdit","System::Windows::Forms::TreeView::BeforeLabelEdit","System.Windows.Forms.TreeView.BeforeSelect","System::Windows::Forms::TreeView::BeforeSelect","System.Windows.Forms.TreeView.BeginUpdate","System::Windows::Forms::TreeView::BeginUpdate","System.Windows.Forms.TreeView.BorderStyle","System::Windows::Forms::TreeView::BorderStyle","System.Windows.Forms.TreeView.CheckBoxes","System::Windows::Forms::TreeView::CheckBoxes","System.Windows.Forms.TreeView.CollapseAll","System::Windows::Forms::TreeView::CollapseAll","System.Windows.Forms.TreeView.CreateHandle","System::Windows::Forms::TreeView::CreateHandle","System.Windows.Forms.TreeView.CreateParams","System::Windows::Forms::TreeView::CreateParams","System.Windows.Forms.TreeView.DefaultSize","System::Windows::Forms::TreeView::DefaultSize","System.Windows.Forms.TreeView.Dispose","System::Windows::Forms::TreeView::Dispose","System.Windows.Forms.TreeView.DoubleBuffered","System::Windows::Forms::TreeView::DoubleBuffered","System.Windows.Forms.TreeView.DrawMode","System::Windows::Forms::TreeView::DrawMode","System.Windows.Forms.TreeView.DrawNode","System::Windows::Forms::TreeView::DrawNode","System.Windows.Forms.TreeView.EndUpdate","System::Windows::Forms::TreeView::EndUpdate","System.Windows.Forms.TreeView.ExpandAll","System::Windows::Forms::TreeView::ExpandAll","System.Windows.Forms.TreeView.ForeColor","System::Windows::Forms::TreeView::ForeColor","System.Windows.Forms.TreeView.FullRowSelect","System::Windows::Forms::TreeView::FullRowSelect","System.Windows.Forms.TreeView.GetItemRenderStyles","System::Windows::Forms::TreeView::GetItemRenderStyles","System.Windows.Forms.TreeView.GetNodeAt","System::Windows::Forms::TreeView::GetNodeAt","System.Windows.Forms.TreeView.GetNodeCount","System::Windows::Forms::TreeView::GetNodeCount","System.Windows.Forms.TreeView.HideSelection","System::Windows::Forms::TreeView::HideSelection","System.Windows.Forms.TreeView.HitTest","System::Windows::Forms::TreeView::HitTest","System.Windows.Forms.TreeView.HotTracking","System::Windows::Forms::TreeView::HotTracking","System.Windows.Forms.TreeView.ImageIndex","System::Windows::Forms::TreeView::ImageIndex","System.Windows.Forms.TreeView.ImageKey","System::Windows::Forms::TreeView::ImageKey","System.Windows.Forms.TreeView.ImageList","System::Windows::Forms::TreeView::ImageList","System.Windows.Forms.TreeView.Indent","System::Windows::Forms::TreeView::Indent","System.Windows.Forms.TreeView.IsInputKey","System::Windows::Forms::TreeView::IsInputKey","System.Windows.Forms.TreeView.ItemDrag","System::Windows::Forms::TreeView::ItemDrag","System.Windows.Forms.TreeView.ItemHeight","System::Windows::Forms::TreeView::ItemHeight","System.Windows.Forms.TreeView.LabelEdit","System::Windows::Forms::TreeView::LabelEdit","System.Windows.Forms.TreeView.LineColor","System::Windows::Forms::TreeView::LineColor","System.Windows.Forms.TreeView.NodeMouseClick","System::Windows::Forms::TreeView::NodeMouseClick","System.Windows.Forms.TreeView.NodeMouseDoubleClick","System::Windows::Forms::TreeView::NodeMouseDoubleClick","System.Windows.Forms.TreeView.NodeMouseHover","System::Windows::Forms::TreeView::NodeMouseHover","System.Windows.Forms.TreeView.Nodes","System::Windows::Forms::TreeView::Nodes","System.Windows.Forms.TreeView.OnAfterCheck","System::Windows::Forms::TreeView::OnAfterCheck","System.Windows.Forms.TreeView.OnAfterCollapse","System::Windows::Forms::TreeView::OnAfterCollapse","System.Windows.Forms.TreeView.OnAfterExpand","System::Windows::Forms::TreeView::OnAfterExpand","System.Windows.Forms.TreeView.OnAfterLabelEdit","System::Windows::Forms::TreeView::OnAfterLabelEdit","System.Windows.Forms.TreeView.OnAfterSelect","System::Windows::Forms::TreeView::OnAfterSelect","System.Windows.Forms.TreeView.OnBeforeCheck","System::Windows::Forms::TreeView::OnBeforeCheck","System.Windows.Forms.TreeView.OnBeforeCollapse","System::Windows::Forms::TreeView::OnBeforeCollapse","System.Windows.Forms.TreeView.OnBeforeExpand","System::Windows::Forms::TreeView::OnBeforeExpand","System.Windows.Forms.TreeView.OnBeforeLabelEdit","System::Windows::Forms::TreeView::OnBeforeLabelEdit","System.Windows.Forms.TreeView.OnBeforeSelect","System::Windows::Forms::TreeView::OnBeforeSelect","System.Windows.Forms.TreeView.OnDrawNode","System::Windows::Forms::TreeView::OnDrawNode","System.Windows.Forms.TreeView.OnHandleCreated","System::Windows::Forms::TreeView::OnHandleCreated","System.Windows.Forms.TreeView.OnHandleDestroyed","System::Windows::Forms::TreeView::OnHandleDestroyed","System.Windows.Forms.TreeView.OnItemDrag","System::Windows::Forms::TreeView::OnItemDrag","System.Windows.Forms.TreeView.OnKeyDown","System::Windows::Forms::TreeView::OnKeyDown","System.Windows.Forms.TreeView.OnKeyPress","System::Windows::Forms::TreeView::OnKeyPress","System.Windows.Forms.TreeView.OnKeyUp","System::Windows::Forms::TreeView::OnKeyUp","System.Windows.Forms.TreeView.OnMouseHover","System::Windows::Forms::TreeView::OnMouseHover","System.Windows.Forms.TreeView.OnMouseLeave","System::Windows::Forms::TreeView::OnMouseLeave","System.Windows.Forms.TreeView.OnNodeMouseClick","System::Windows::Forms::TreeView::OnNodeMouseClick","System.Windows.Forms.TreeView.OnNodeMouseDoubleClick","System::Windows::Forms::TreeView::OnNodeMouseDoubleClick","System.Windows.Forms.TreeView.OnNodeMouseHover","System::Windows::Forms::TreeView::OnNodeMouseHover","System.Windows.Forms.TreeView.OnRightToLeftLayoutChanged","System::Windows::Forms::TreeView::OnRightToLeftLayoutChanged","System.Windows.Forms.TreeView.Padding","System::Windows::Forms::TreeView::Padding","System.Windows.Forms.TreeView.PaddingChanged","System::Windows::Forms::TreeView::PaddingChanged","System.Windows.Forms.TreeView.Paint","System::Windows::Forms::TreeView::Paint","System.Windows.Forms.TreeView.PathSeparator","System::Windows::Forms::TreeView::PathSeparator","System.Windows.Forms.TreeView.RightToLeftLayout","System::Windows::Forms::TreeView::RightToLeftLayout","System.Windows.Forms.TreeView.RightToLeftLayoutChanged","System::Windows::Forms::TreeView::RightToLeftLayoutChanged","System.Windows.Forms.TreeView.Scrollable","System::Windows::Forms::TreeView::Scrollable","System.Windows.Forms.TreeView.SelectedImageIndex","System::Windows::Forms::TreeView::SelectedImageIndex","System.Windows.Forms.TreeView.SelectedImageKey","System::Windows::Forms::TreeView::SelectedImageKey","System.Windows.Forms.TreeView.SelectedNode","System::Windows::Forms::TreeView::SelectedNode","System.Windows.Forms.TreeView.ShowLines","System::Windows::Forms::TreeView::ShowLines","System.Windows.Forms.TreeView.ShowNodeToolTips","System::Windows::Forms::TreeView::ShowNodeToolTips","System.Windows.Forms.TreeView.ShowPlusMinus","System::Windows::Forms::TreeView::ShowPlusMinus","System.Windows.Forms.TreeView.ShowRootLines","System::Windows::Forms::TreeView::ShowRootLines","System.Windows.Forms.TreeView.Sort","System::Windows::Forms::TreeView::Sort","System.Windows.Forms.TreeView.Sorted","System::Windows::Forms::TreeView::Sorted","System.Windows.Forms.TreeView.StateImageList","System::Windows::Forms::TreeView::StateImageList","System.Windows.Forms.TreeView.Text","System::Windows::Forms::TreeView::Text","System.Windows.Forms.TreeView.TextChanged","System::Windows::Forms::TreeView::TextChanged","System.Windows.Forms.TreeView.TopNode","System::Windows::Forms::TreeView::TopNode","System.Windows.Forms.TreeView.ToString","System::Windows::Forms::TreeView::ToString","System.Windows.Forms.TreeView.TreeViewNodeSorter","System::Windows::Forms::TreeView::TreeViewNodeSorter","System.Windows.Forms.TreeView.VisibleCount","System::Windows::Forms::TreeView::VisibleCount","System.Windows.Forms.TreeView.WndProc","System::Windows::Forms::TreeView::WndProc"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7e77cc28-b3bb-0e67-a8fc-1d9d5ad380b5","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/TreeView.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TreeView class | Microsoft Docs","_op_ogTitle":"TreeView class","description":"Displays a hierarchical collection of labeled items, each represented by a .\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.TreeView","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.treeview","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.treeview","fileRelativePath":"System.Windows.Forms.TreeView.html"},"themesRelativePathToOutputRoot":"_themes/"}