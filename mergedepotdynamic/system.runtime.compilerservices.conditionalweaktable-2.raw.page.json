{"content":"    \r\n    <h1 id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2\">\r\n      <span class=\"lang-csharp\">ConditionalWeakTable&lt;TKey,TValue&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Enables compilers to dynamically attach object fields to managed objects.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(false)]\npublic sealed class ConditionalWeakTable&lt;TKey,TValue&gt; where TKey : class where TValue : class</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tTKey\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The reference type to which the field is attached.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tTValue\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The field&#39;s type. This must be a reference type.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ConditionalWeakTable&lt;TKey,TValue&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The ConditionalWeakTable(TKey, class enables language compilers to attach arbitrary properties to managed objects at run time. A ConditionalWeakTable(TKey, object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value. The object&#39;s keys are the individual instances of the <code>TKey</code> class to which the property is attached, and its values are the property values that are assigned to the corresponding objects.  </p>\n<p> Keys must be unique; in other words, the ConditionalWeakTable(TKey, class supports one attached value per managed object. Two keys are equal if passing them to the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method returns <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot control equality comparisons by overriding <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> to explicitly set the hash code for a key. The ConditionalWeakTable(TKey, class does not use the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> method to compute hash codes, and therefore does not invoke <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> overrides.  </p>\n</div>\n<p> Although the ConditionalWeakTable(TKey, class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object. The ConditionalWeakTable(TKey, class differs from a dictionary in several ways:  </p>\n<ul>\n<li><p>It does not persist keys. That is, a key is not kept alive only because it is a member of the collection.  </p>\n</li>\n<li><p>It does not include all the methods (such as <code>GetEnumerator</code> or <code>Contains</code>) that a dictionary typically has.  </p>\n</li>\n<li><p>It does not implement the <a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary&lt;TKey,TValue&gt;</a> interface.  </p>\n<p>The ConditionalWeakTable(TKey, class differs from other collection objects in its management of the object lifetime of keys stored in the collection. Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed. However, in the ConditionalWeakTable(TKey, class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A). Instead, ConditionalWeakTable(TKey, automatically removes the key/value entry as soon as no other references to a key exist outside the table. The example provides an illustration.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_CompilerServices_ConditionalWeakTable_2__ctor\" data-linktype=\"self-bookmark\">ConditionalWeakTable&lt;TKey,TValue&gt;()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Runtime.CompilerServices.ConditionalWeakTable`2</span> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_CompilerServices_ConditionalWeakTable_2_Add__0__1_\" data-linktype=\"self-bookmark\">Add(TKey,TValue)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a key to the table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_CompilerServices_ConditionalWeakTable_2_Finalize\" data-linktype=\"self-bookmark\">Finalize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <span class=\"xref\">stem.Runtime.CompilerServices.ConditionalWeakTable`2</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetOrCreateValue__0_\" data-linktype=\"self-bookmark\">GetOrCreateValue(TKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table&#39;s value to create a value that is bound to the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetValue__0_System_Runtime_CompilerServices_ConditionalWeakTable__0__1__CreateValueCallback_\" data-linktype=\"self-bookmark\">GetValue(TKey,ConditionalWeakTable&lt;TKey,TValue&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_CompilerServices_ConditionalWeakTable_2_Remove__0_\" data-linktype=\"self-bookmark\">Remove(TKey)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes a key and its value from the table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_CompilerServices_ConditionalWeakTable_2_TryGetValue__0__1__\" data-linktype=\"self-bookmark\">TryGetValue(TKey,TValue)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value of the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2__ctor\">\r\n    \r\n            <a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConditionalWeakTable&lt;TKey,TValue&gt;()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Runtime.CompilerServices.ConditionalWeakTable`2</span> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ConditionalWeakTable ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ConditionalWeakTable(TKey, constructor instantiates an empty <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;</a> table; that is, the table contains no key/value pairs. You can add key/value pairs by calling the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_Add_\" data-linktype=\"relative-path\">Add</a>, <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetValue_\" data-linktype=\"relative-path\">GetValue</a>, or <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetOrCreateValue_\" data-linktype=\"relative-path\">GetOrCreateValue</a> method.  </p>\n<p> Every key in a <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;</a> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method returns <code>true</code>).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_Add__0__1_\">\r\n    \r\n            <a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(TKey,TValue)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a key to the table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Add (TKey key, TValue value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to add. <code>key</code> represents the object to which the property is attached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TValue</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key&#39;s property value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> already exists.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every key in a <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;</a> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method returns <code>true</code>).  </p>\n<p> If the key is garbage-collected during the addition operation, the existing key/value pair is removed and the new key/value pair is added without an exception being thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>MainClass</code> class and a <code>MainInfo</code> class, which provides information about the <code>MainClass</code> instance. The example then calls the Add method to add a <code>MainClass</code> object and its attached <code>MainInfo</code> object to a <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;</a> table. The example also illustrates calls to the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetOrCreateValue_\" data-linktype=\"relative-path\">GetOrCreateValue</a> and <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetValue_\" data-linktype=\"relative-path\">GetValue</a> methods to add key/value pairs to the table, and to the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_TryGetValue_\" data-linktype=\"relative-path\">TryGetValue</a> method to retrieve the value of an existing key.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1\">Imports System.Reflection\nImports System.Runtime.CompilerServices\n\nPublic Class Example\n   Public Name As String\n   \n   Public Sub New(name As String)\n      Me.Name = name\n   End Sub\n   \n   Public Overrides Function ToString() As String\n      Return Me.Name\n   End Function\nEnd Class\n\n&#39; Define a class to contain information about each Example instance.\nPublic Class ExampleInfo\n   Public Name As String\n   Public Methods As Integer\n   Public Properties As Integer\n   \n   Public Overrides Function ToString() As String\n      Return String.Format(&quot;{0}: {1} Methods, {2} Properties&quot;, _\n                           Me.Name, Me.Methods, Me.Properties)\n   End Function\nEnd Class\n\nModule TestExample\n\n   Private flags As BindingFlags = BindingFlags.Public Or BindingFlags.Instance\n\n   Public Sub Main()\n      Dim ex1 As New Example(&quot;ex1&quot;)\n      Dim ex2 As New Example(&quot;ex2&quot;)\n      Dim ex3 As New Example(&quot;ex3&quot;)\n      \n      Dim exInfo1 As New ExampleInfo() \n      exInfo1.Name = ex1.ToString()\n      exInfo1.Methods = ex1.GetType().GetMethods(flags).Count\n      exInfo1.Properties = ex1.GetType().GetProperties(flags).Count\n      \n      Dim exInfo3 As New ExampleInfo() \n      exInfo3.Name = ex3.ToString()\n      exInfo3.Methods = ex3.GetType().GetMethods(flags).Count\n      exInfo3.Properties = ex3.GetType().GetProperties(flags).Count\n\n      Dim attached As New ConditionalWeakTable(Of Example, ExampleInfo)\n      Dim value As ExampleInfo = Nothing\n\n      &#39; Attach a property to ex1 using the Add method, then retrieve it.\n      attached.Add(ex1, exInfo1)\n      If attached.TryGetValue(ex1, value) Then\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex1, value)\n      Else\n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex1)\n      End If\n\n      &#39; Attempt to retrieve the value attached to ex2.\n      value = attached.GetValue(ex2, AddressOf TestExample.CreateAttachedValue)      \n      If attached.TryGetValue(ex2, value) Then\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex2, value)\n      Else \n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex2)\n      End If\n      \n      &#39; Atttempt to retrieve the value attached to ex3.\n      value = attached.GetOrCreateValue(ex3)\n      Console.WriteLine(&quot;{0}, {1}&quot;, ex3, value)\n   End Sub\n   \n   Public Function CreateAttachedValue(ex As Example) As ExampleInfo\n      Dim info As New ExampleInfo()\n      info.Name = ex.ToString()\n      info.Methods = ex.GetType().GetMethods(flags).Count\n      info.Properties = ex.GetType().GetProperties(flags).Count\n      Return info\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       ex1, ex1: 4 Methods, 0 Properties\n&#39;       ex2, ex2: 4 Methods, 0 Properties\n&#39;       ex3, : 0 Methods, 0 Properties\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1\">using System;\nusing System.Reflection;\nusing System.Runtime.CompilerServices;\n\npublic class Example\n{\n   string Name; \n   \n   public Example(string name)\n   {\n      this.Name = name;\n   }\n   \n   public override string ToString()\n   {\n      return this.Name;\n   }\n}\n\n// Define a class to contain information about each Example instance.\npublic class ExampleInfo\n{\n   public string Name;\n   public int Methods;\n   public int Properties;\n   \n   public override string ToString()\n   {\n      return String.Format(&quot;{0}: {1} Methods, {2} Properties&quot;, \n                           this.Name, this.Methods, this.Properties);\n   }\n}\n\npublic class ExampleTest\n{\n   private static BindingFlags flags = BindingFlags.Public | BindingFlags.Instance;\n\n   public static void Main()\n   {\n      Example ex1 = new Example(&quot;ex1&quot;);\n      Example ex2 = new Example(&quot;ex2&quot;);\n      Example ex3 = new Example(&quot;ex3&quot;);\n      \n      ExampleInfo exInfo1 = new ExampleInfo(); \n      exInfo1.Name = ex1.ToString();\n      exInfo1.Methods = ex1.GetType().GetMethods(flags).Length;\n      exInfo1.Properties = ex1.GetType().GetProperties(flags).Length;\n      \n      ExampleInfo exInfo3 = new ExampleInfo(); \n      exInfo3.Name = ex3.ToString();\n      exInfo3.Methods = ex3.GetType().GetMethods(flags).Length;\n      exInfo3.Properties = ex3.GetType().GetProperties(flags).Length;\n\n      var attached = new ConditionalWeakTable&lt;Example, ExampleInfo&gt;();\n      ExampleInfo value = null;\n\n      // Attach a property to ex1 using the Add method, then retrieve it.\n      attached.Add(ex1, exInfo1);\n      if (attached.TryGetValue(ex1, out value))\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex1, value);\n      else\n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex1);\n\n      // Attempt to retrieve the value attached to ex2.\n      value = attached.GetValue(ex2, ExampleTest.CreateAttachedValue);      \n      if (attached.TryGetValue(ex2, out value))\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex2, value);\n      else \n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex2);\n      \n      // Attempt to retrieve the value attached to ex3.\n      value = attached.GetOrCreateValue(ex3);\n      Console.WriteLine(&quot;{0}, {1}&quot;, ex3, value);\n   }\n\n   public static ExampleInfo CreateAttachedValue(Example ex)\n   {\n      ExampleInfo info = new ExampleInfo();\n      info.Name = ex.ToString();\n      info.Methods = ex.GetType().GetMethods(flags).Length;\n      info.Properties = ex.GetType().GetProperties(flags).Length;\n      return info;\n   }\n}\n// The example displays the following output:\n//       ex1, ex1: 4 Methods, 0 Properties\n//       ex2, ex2: 4 Methods, 0 Properties\n//       ex3, : 0 Methods, 0 Properties\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_Finalize\">\r\n    \r\n            <a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_Finalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Finalize()</div>        \r\n          </div>\r\n    \r\n            <p>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <span class=\"xref\">stem.Runtime.CompilerServices.ConditionalWeakTable`2</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">~ConditionalWeakTable`2 ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The garbage collector calls Finalize when the current object is ready to be finalized.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_GetOrCreateValue__0_\">\r\n    \r\n            <a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_GetOrCreateValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetOrCreateValue(TKey)</div>        \r\n          </div>\r\n    \r\n            <p>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table&#39;s value to create a value that is bound to the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TValue GetOrCreateValue (TKey key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to search for. <code>key</code> represents the object to which the property is attached.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TValue</span></div>\r\n                  </div>\r\n                  <p>The value that corresponds to <code>key</code>, if <code>key</code> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <code>TValue</code> generic type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.missingmemberexception\" data-linktype=\"relative-path\">MissingMemberException</a>, instead.<br>\n</div>  \n\n<p> The class that represents the table&#39;s value does not define a default constructor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>key</code> does not exist in the table, the method adds it, along with the object that is instantiated by calling the default constructor of the class defined by the <code>TValue</code> generic type parameter. If the <code>TValue</code> class has no default constructor, a <a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a> is thrown.  </p>\n<p> This is the recommended method of retrieving an existing value or adding a new value to the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;</a> table if the class of the table&#39;s value defines a default constructor. If it does not define a default constructor, you can instead call the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetValue_\" data-linktype=\"relative-path\">GetValue</a> method, which relies on a callback-provided method to instantiate the object representing the table&#39;s value  </p>\n<p> To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_TryGetValue_\" data-linktype=\"relative-path\">TryGetValue</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>MainClass</code> class and a <code>MainInfo</code> class, which provides information about the <code>MainClass</code> instance. The example calls the GetOrCreateValue method to add a <code>MainClass</code> object and its attached <code>MainInfo</code> object to a <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;</a> table. The example also illustrates calls to the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_Add_\" data-linktype=\"relative-path\">Add</a> and <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetValue_\" data-linktype=\"relative-path\">GetValue</a> methods to add key/value pairs to the table, and to the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_TryGetValue_\" data-linktype=\"relative-path\">TryGetValue</a> method to retrieve the value of an existing key.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1\">Imports System.Reflection\nImports System.Runtime.CompilerServices\n\nPublic Class Example\n   Public Name As String\n   \n   Public Sub New(name As String)\n      Me.Name = name\n   End Sub\n   \n   Public Overrides Function ToString() As String\n      Return Me.Name\n   End Function\nEnd Class\n\n&#39; Define a class to contain information about each Example instance.\nPublic Class ExampleInfo\n   Public Name As String\n   Public Methods As Integer\n   Public Properties As Integer\n   \n   Public Overrides Function ToString() As String\n      Return String.Format(&quot;{0}: {1} Methods, {2} Properties&quot;, _\n                           Me.Name, Me.Methods, Me.Properties)\n   End Function\nEnd Class\n\nModule TestExample\n\n   Private flags As BindingFlags = BindingFlags.Public Or BindingFlags.Instance\n\n   Public Sub Main()\n      Dim ex1 As New Example(&quot;ex1&quot;)\n      Dim ex2 As New Example(&quot;ex2&quot;)\n      Dim ex3 As New Example(&quot;ex3&quot;)\n      \n      Dim exInfo1 As New ExampleInfo() \n      exInfo1.Name = ex1.ToString()\n      exInfo1.Methods = ex1.GetType().GetMethods(flags).Count\n      exInfo1.Properties = ex1.GetType().GetProperties(flags).Count\n      \n      Dim exInfo3 As New ExampleInfo() \n      exInfo3.Name = ex3.ToString()\n      exInfo3.Methods = ex3.GetType().GetMethods(flags).Count\n      exInfo3.Properties = ex3.GetType().GetProperties(flags).Count\n\n      Dim attached As New ConditionalWeakTable(Of Example, ExampleInfo)\n      Dim value As ExampleInfo = Nothing\n\n      &#39; Attach a property to ex1 using the Add method, then retrieve it.\n      attached.Add(ex1, exInfo1)\n      If attached.TryGetValue(ex1, value) Then\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex1, value)\n      Else\n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex1)\n      End If\n\n      &#39; Attempt to retrieve the value attached to ex2.\n      value = attached.GetValue(ex2, AddressOf TestExample.CreateAttachedValue)      \n      If attached.TryGetValue(ex2, value) Then\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex2, value)\n      Else \n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex2)\n      End If\n      \n      &#39; Atttempt to retrieve the value attached to ex3.\n      value = attached.GetOrCreateValue(ex3)\n      Console.WriteLine(&quot;{0}, {1}&quot;, ex3, value)\n   End Sub\n   \n   Public Function CreateAttachedValue(ex As Example) As ExampleInfo\n      Dim info As New ExampleInfo()\n      info.Name = ex.ToString()\n      info.Methods = ex.GetType().GetMethods(flags).Count\n      info.Properties = ex.GetType().GetProperties(flags).Count\n      Return info\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       ex1, ex1: 4 Methods, 0 Properties\n&#39;       ex2, ex2: 4 Methods, 0 Properties\n&#39;       ex3, : 0 Methods, 0 Properties\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1\">using System;\nusing System.Reflection;\nusing System.Runtime.CompilerServices;\n\npublic class Example\n{\n   string Name; \n   \n   public Example(string name)\n   {\n      this.Name = name;\n   }\n   \n   public override string ToString()\n   {\n      return this.Name;\n   }\n}\n\n// Define a class to contain information about each Example instance.\npublic class ExampleInfo\n{\n   public string Name;\n   public int Methods;\n   public int Properties;\n   \n   public override string ToString()\n   {\n      return String.Format(&quot;{0}: {1} Methods, {2} Properties&quot;, \n                           this.Name, this.Methods, this.Properties);\n   }\n}\n\npublic class ExampleTest\n{\n   private static BindingFlags flags = BindingFlags.Public | BindingFlags.Instance;\n\n   public static void Main()\n   {\n      Example ex1 = new Example(&quot;ex1&quot;);\n      Example ex2 = new Example(&quot;ex2&quot;);\n      Example ex3 = new Example(&quot;ex3&quot;);\n      \n      ExampleInfo exInfo1 = new ExampleInfo(); \n      exInfo1.Name = ex1.ToString();\n      exInfo1.Methods = ex1.GetType().GetMethods(flags).Length;\n      exInfo1.Properties = ex1.GetType().GetProperties(flags).Length;\n      \n      ExampleInfo exInfo3 = new ExampleInfo(); \n      exInfo3.Name = ex3.ToString();\n      exInfo3.Methods = ex3.GetType().GetMethods(flags).Length;\n      exInfo3.Properties = ex3.GetType().GetProperties(flags).Length;\n\n      var attached = new ConditionalWeakTable&lt;Example, ExampleInfo&gt;();\n      ExampleInfo value = null;\n\n      // Attach a property to ex1 using the Add method, then retrieve it.\n      attached.Add(ex1, exInfo1);\n      if (attached.TryGetValue(ex1, out value))\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex1, value);\n      else\n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex1);\n\n      // Attempt to retrieve the value attached to ex2.\n      value = attached.GetValue(ex2, ExampleTest.CreateAttachedValue);      \n      if (attached.TryGetValue(ex2, out value))\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex2, value);\n      else \n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex2);\n      \n      // Attempt to retrieve the value attached to ex3.\n      value = attached.GetOrCreateValue(ex3);\n      Console.WriteLine(&quot;{0}, {1}&quot;, ex3, value);\n   }\n\n   public static ExampleInfo CreateAttachedValue(Example ex)\n   {\n      ExampleInfo info = new ExampleInfo();\n      info.Name = ex.ToString();\n      info.Methods = ex.GetType().GetMethods(flags).Length;\n      info.Properties = ex.GetType().GetProperties(flags).Length;\n      return info;\n   }\n}\n// The example displays the following output:\n//       ex1, ex1: 4 Methods, 0 Properties\n//       ex2, ex2: 4 Methods, 0 Properties\n//       ex3, : 0 Methods, 0 Properties\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_GetValue__0_System_Runtime_CompilerServices_ConditionalWeakTable__0__1__CreateValueCallback_\">\r\n    \r\n            <a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(TKey,ConditionalWeakTable&lt;TKey,TValue&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TValue GetValue (TKey key, System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.CreateValueCallback createValueCallback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to search for. <code>key</code> represents the object to which the property is attached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>createValueCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2.createvaluecallback\" data-linktype=\"relative-path\">ConditionalWeakTable<tkey,tvalue>+CreateValueCallback</tkey,tvalue></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A delegate to a method that can create a value for the given <code>key</code>. It has a single parameter of type <code>TKey</code>, and returns a value of type <code>TValue</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TValue</span></div>\r\n                  </div>\r\n                  <p>The value attached to <code>key</code>, if <code>key</code> already exists in the table; otherwise, the new value returned by the <code>createValueCallback</code> delegate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> or <code>createValueCallback</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>key</code> does not exist in the table, GetValue invokes the method that is defined by the <code>createValueCallback</code> parameter and passes it the key. A new value is bound to the key in the table and returned as a result.  </p>\n<p> Use this method only when the class that represents the table&#39;s value does not define a default constructor. If it does define a default constructor, use the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetOrCreateValue_\" data-linktype=\"relative-path\">GetOrCreateValue</a> method instead. To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_TryGetValue_\" data-linktype=\"relative-path\">TryGetValue</a> method.  </p>\n<p> If multiple threads try to create the same key, <code>createValueCallback</code> may be invoked multiple times with the same key. Only one of these calls will succeed, and its returned value will be added to the table. Which thread succeeds in creating the value is indeterminate. This rule permits the table to invoke <code>createValueCallback</code> outside the internal table lock to prevent deadlocks.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>MainClass</code> class and a <code>MainInfo</code> class, which provides information about the <code>MainClass</code> instance. It also defines a static (<code>Shared</code> in Visual Basic) <code>CreateAttachedValue</code> method that can be assigned to the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2.createvaluecallback\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback</a> delegate and passed to the GetValue method. The example calls the GetValue method to add a <code>MainClass</code> object and its attached <code>MainInfo</code> object to a <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;</a> table. The example also illustrates calls to the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_Add_\" data-linktype=\"relative-path\">Add</a> and <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetOrCreateValue_\" data-linktype=\"relative-path\">GetOrCreateValue</a> methods to add key/value pairs to the table, and to the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_TryGetValue_\" data-linktype=\"relative-path\">TryGetValue</a> method to retrieve the value of an existing key.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1\">Imports System.Reflection\nImports System.Runtime.CompilerServices\n\nPublic Class Example\n   Public Name As String\n   \n   Public Sub New(name As String)\n      Me.Name = name\n   End Sub\n   \n   Public Overrides Function ToString() As String\n      Return Me.Name\n   End Function\nEnd Class\n\n&#39; Define a class to contain information about each Example instance.\nPublic Class ExampleInfo\n   Public Name As String\n   Public Methods As Integer\n   Public Properties As Integer\n   \n   Public Overrides Function ToString() As String\n      Return String.Format(&quot;{0}: {1} Methods, {2} Properties&quot;, _\n                           Me.Name, Me.Methods, Me.Properties)\n   End Function\nEnd Class\n\nModule TestExample\n\n   Private flags As BindingFlags = BindingFlags.Public Or BindingFlags.Instance\n\n   Public Sub Main()\n      Dim ex1 As New Example(&quot;ex1&quot;)\n      Dim ex2 As New Example(&quot;ex2&quot;)\n      Dim ex3 As New Example(&quot;ex3&quot;)\n      \n      Dim exInfo1 As New ExampleInfo() \n      exInfo1.Name = ex1.ToString()\n      exInfo1.Methods = ex1.GetType().GetMethods(flags).Count\n      exInfo1.Properties = ex1.GetType().GetProperties(flags).Count\n      \n      Dim exInfo3 As New ExampleInfo() \n      exInfo3.Name = ex3.ToString()\n      exInfo3.Methods = ex3.GetType().GetMethods(flags).Count\n      exInfo3.Properties = ex3.GetType().GetProperties(flags).Count\n\n      Dim attached As New ConditionalWeakTable(Of Example, ExampleInfo)\n      Dim value As ExampleInfo = Nothing\n\n      &#39; Attach a property to ex1 using the Add method, then retrieve it.\n      attached.Add(ex1, exInfo1)\n      If attached.TryGetValue(ex1, value) Then\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex1, value)\n      Else\n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex1)\n      End If\n\n      &#39; Attempt to retrieve the value attached to ex2.\n      value = attached.GetValue(ex2, AddressOf TestExample.CreateAttachedValue)      \n      If attached.TryGetValue(ex2, value) Then\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex2, value)\n      Else \n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex2)\n      End If\n      \n      &#39; Atttempt to retrieve the value attached to ex3.\n      value = attached.GetOrCreateValue(ex3)\n      Console.WriteLine(&quot;{0}, {1}&quot;, ex3, value)\n   End Sub\n   \n   Public Function CreateAttachedValue(ex As Example) As ExampleInfo\n      Dim info As New ExampleInfo()\n      info.Name = ex.ToString()\n      info.Methods = ex.GetType().GetMethods(flags).Count\n      info.Properties = ex.GetType().GetProperties(flags).Count\n      Return info\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       ex1, ex1: 4 Methods, 0 Properties\n&#39;       ex2, ex2: 4 Methods, 0 Properties\n&#39;       ex3, : 0 Methods, 0 Properties\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1\">using System;\nusing System.Reflection;\nusing System.Runtime.CompilerServices;\n\npublic class Example\n{\n   string Name; \n   \n   public Example(string name)\n   {\n      this.Name = name;\n   }\n   \n   public override string ToString()\n   {\n      return this.Name;\n   }\n}\n\n// Define a class to contain information about each Example instance.\npublic class ExampleInfo\n{\n   public string Name;\n   public int Methods;\n   public int Properties;\n   \n   public override string ToString()\n   {\n      return String.Format(&quot;{0}: {1} Methods, {2} Properties&quot;, \n                           this.Name, this.Methods, this.Properties);\n   }\n}\n\npublic class ExampleTest\n{\n   private static BindingFlags flags = BindingFlags.Public | BindingFlags.Instance;\n\n   public static void Main()\n   {\n      Example ex1 = new Example(&quot;ex1&quot;);\n      Example ex2 = new Example(&quot;ex2&quot;);\n      Example ex3 = new Example(&quot;ex3&quot;);\n      \n      ExampleInfo exInfo1 = new ExampleInfo(); \n      exInfo1.Name = ex1.ToString();\n      exInfo1.Methods = ex1.GetType().GetMethods(flags).Length;\n      exInfo1.Properties = ex1.GetType().GetProperties(flags).Length;\n      \n      ExampleInfo exInfo3 = new ExampleInfo(); \n      exInfo3.Name = ex3.ToString();\n      exInfo3.Methods = ex3.GetType().GetMethods(flags).Length;\n      exInfo3.Properties = ex3.GetType().GetProperties(flags).Length;\n\n      var attached = new ConditionalWeakTable&lt;Example, ExampleInfo&gt;();\n      ExampleInfo value = null;\n\n      // Attach a property to ex1 using the Add method, then retrieve it.\n      attached.Add(ex1, exInfo1);\n      if (attached.TryGetValue(ex1, out value))\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex1, value);\n      else\n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex1);\n\n      // Attempt to retrieve the value attached to ex2.\n      value = attached.GetValue(ex2, ExampleTest.CreateAttachedValue);      \n      if (attached.TryGetValue(ex2, out value))\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex2, value);\n      else \n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex2);\n      \n      // Attempt to retrieve the value attached to ex3.\n      value = attached.GetOrCreateValue(ex3);\n      Console.WriteLine(&quot;{0}, {1}&quot;, ex3, value);\n   }\n\n   public static ExampleInfo CreateAttachedValue(Example ex)\n   {\n      ExampleInfo info = new ExampleInfo();\n      info.Name = ex.ToString();\n      info.Methods = ex.GetType().GetMethods(flags).Length;\n      info.Properties = ex.GetType().GetProperties(flags).Length;\n      return info;\n   }\n}\n// The example displays the following output:\n//       ex1, ex1: 4 Methods, 0 Properties\n//       ex2, ex2: 4 Methods, 0 Properties\n//       ex3, : 0 Methods, 0 Properties\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_Remove__0_\">\r\n    \r\n            <a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(TKey)</div>        \r\n          </div>\r\n    \r\n            <p>Removes a key and its value from the table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Remove (TKey key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the key is found and removed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the key is garbage-collected during this operation, the method does not raise an exception and the return value is undefined.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_TryGetValue__0__1__\">\r\n    \r\n            <a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_TryGetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryGetValue(TKey,TValue)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value of the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool TryGetValue (TKey key, out TValue value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key that represents an object with an attached property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TValue</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the attached property value. If <code>key</code> is not found, <code>value</code> contains the default value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>key</code> is found; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the key is garbage-collected during this operation, the method may return <code>false</code> and set <code>value</code> to the default value (as if the key were not present).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>MainClass</code> class and a <code>MainInfo</code> class, which provides information about the <code>MainClass</code> instance. The example calls the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_Add_\" data-linktype=\"relative-path\">Add</a>, <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetOrCreateValue_\" data-linktype=\"relative-path\">GetOrCreateValue</a>, and <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetValue_\" data-linktype=\"relative-path\">GetValue</a> methods to add key/value pairs to a <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;</a> table. In each case, the example calls the TryGetValue method to confirm that the key/value pair has been added to the table.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1\">Imports System.Reflection\nImports System.Runtime.CompilerServices\n\nPublic Class Example\n   Public Name As String\n   \n   Public Sub New(name As String)\n      Me.Name = name\n   End Sub\n   \n   Public Overrides Function ToString() As String\n      Return Me.Name\n   End Function\nEnd Class\n\n&#39; Define a class to contain information about each Example instance.\nPublic Class ExampleInfo\n   Public Name As String\n   Public Methods As Integer\n   Public Properties As Integer\n   \n   Public Overrides Function ToString() As String\n      Return String.Format(&quot;{0}: {1} Methods, {2} Properties&quot;, _\n                           Me.Name, Me.Methods, Me.Properties)\n   End Function\nEnd Class\n\nModule TestExample\n\n   Private flags As BindingFlags = BindingFlags.Public Or BindingFlags.Instance\n\n   Public Sub Main()\n      Dim ex1 As New Example(&quot;ex1&quot;)\n      Dim ex2 As New Example(&quot;ex2&quot;)\n      Dim ex3 As New Example(&quot;ex3&quot;)\n      \n      Dim exInfo1 As New ExampleInfo() \n      exInfo1.Name = ex1.ToString()\n      exInfo1.Methods = ex1.GetType().GetMethods(flags).Count\n      exInfo1.Properties = ex1.GetType().GetProperties(flags).Count\n      \n      Dim exInfo3 As New ExampleInfo() \n      exInfo3.Name = ex3.ToString()\n      exInfo3.Methods = ex3.GetType().GetMethods(flags).Count\n      exInfo3.Properties = ex3.GetType().GetProperties(flags).Count\n\n      Dim attached As New ConditionalWeakTable(Of Example, ExampleInfo)\n      Dim value As ExampleInfo = Nothing\n\n      &#39; Attach a property to ex1 using the Add method, then retrieve it.\n      attached.Add(ex1, exInfo1)\n      If attached.TryGetValue(ex1, value) Then\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex1, value)\n      Else\n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex1)\n      End If\n\n      &#39; Attempt to retrieve the value attached to ex2.\n      value = attached.GetValue(ex2, AddressOf TestExample.CreateAttachedValue)      \n      If attached.TryGetValue(ex2, value) Then\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex2, value)\n      Else \n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex2)\n      End If\n      \n      &#39; Atttempt to retrieve the value attached to ex3.\n      value = attached.GetOrCreateValue(ex3)\n      Console.WriteLine(&quot;{0}, {1}&quot;, ex3, value)\n   End Sub\n   \n   Public Function CreateAttachedValue(ex As Example) As ExampleInfo\n      Dim info As New ExampleInfo()\n      info.Name = ex.ToString()\n      info.Methods = ex.GetType().GetMethods(flags).Count\n      info.Properties = ex.GetType().GetProperties(flags).Count\n      Return info\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       ex1, ex1: 4 Methods, 0 Properties\n&#39;       ex2, ex2: 4 Methods, 0 Properties\n&#39;       ex3, : 0 Methods, 0 Properties\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1\">using System;\nusing System.Reflection;\nusing System.Runtime.CompilerServices;\n\npublic class Example\n{\n   string Name; \n   \n   public Example(string name)\n   {\n      this.Name = name;\n   }\n   \n   public override string ToString()\n   {\n      return this.Name;\n   }\n}\n\n// Define a class to contain information about each Example instance.\npublic class ExampleInfo\n{\n   public string Name;\n   public int Methods;\n   public int Properties;\n   \n   public override string ToString()\n   {\n      return String.Format(&quot;{0}: {1} Methods, {2} Properties&quot;, \n                           this.Name, this.Methods, this.Properties);\n   }\n}\n\npublic class ExampleTest\n{\n   private static BindingFlags flags = BindingFlags.Public | BindingFlags.Instance;\n\n   public static void Main()\n   {\n      Example ex1 = new Example(&quot;ex1&quot;);\n      Example ex2 = new Example(&quot;ex2&quot;);\n      Example ex3 = new Example(&quot;ex3&quot;);\n      \n      ExampleInfo exInfo1 = new ExampleInfo(); \n      exInfo1.Name = ex1.ToString();\n      exInfo1.Methods = ex1.GetType().GetMethods(flags).Length;\n      exInfo1.Properties = ex1.GetType().GetProperties(flags).Length;\n      \n      ExampleInfo exInfo3 = new ExampleInfo(); \n      exInfo3.Name = ex3.ToString();\n      exInfo3.Methods = ex3.GetType().GetMethods(flags).Length;\n      exInfo3.Properties = ex3.GetType().GetProperties(flags).Length;\n\n      var attached = new ConditionalWeakTable&lt;Example, ExampleInfo&gt;();\n      ExampleInfo value = null;\n\n      // Attach a property to ex1 using the Add method, then retrieve it.\n      attached.Add(ex1, exInfo1);\n      if (attached.TryGetValue(ex1, out value))\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex1, value);\n      else\n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex1);\n\n      // Attempt to retrieve the value attached to ex2.\n      value = attached.GetValue(ex2, ExampleTest.CreateAttachedValue);      \n      if (attached.TryGetValue(ex2, out value))\n         Console.WriteLine(&quot;{0}, {1}&quot;, ex2, value);\n      else \n         Console.WriteLine(&quot;{0} does not have an attached property.&quot;, ex2);\n      \n      // Attempt to retrieve the value attached to ex3.\n      value = attached.GetOrCreateValue(ex3);\n      Console.WriteLine(&quot;{0}, {1}&quot;, ex3, value);\n   }\n\n   public static ExampleInfo CreateAttachedValue(Example ex)\n   {\n      ExampleInfo info = new ExampleInfo();\n      info.Name = ex.ToString();\n      info.Methods = ex.GetType().GetMethods(flags).Length;\n      info.Properties = ex.GetType().GetProperties(flags).Length;\n      return info;\n   }\n}\n// The example displays the following output:\n//       ex1, ex1: 4 Methods, 0 Properties\n//       ex2, ex2: 4 Methods, 0 Properties\n//       ex3, : 0 Methods, 0 Properties\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.CompilerServices.ConditionalWeakTable-2.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.CompilerServices.ConditionalWeakTable-2.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.Add\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.Finalize\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.GetOrCreateValue\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.GetValue\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.Remove\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.TryGetValue\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"ac501867-f9f1-ee10-6d78-3763a0cf7edc\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Runtime.CompilerServices\\ConditionalWeakTable`2.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Enables compilers to dynamically attach object fields to managed objects.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.CompilerServices/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.CompilerServices.ConditionalWeakTable-2.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.CompilerServices.ConditionalWeakTable-2.yml","open_to_public_contributors":true,"api_name":["System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>..ctor","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.Add","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.Finalize","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.GetOrCreateValue","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.GetValue","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.Remove","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.TryGetValue"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.CompilerServices.ConditionalWeakTable`2","System::Runtime::CompilerServices::ConditionalWeakTable`2","System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor","System::Runtime::CompilerServices::ConditionalWeakTable`2::#ctor","System.Runtime.CompilerServices.ConditionalWeakTable`2.Add","System::Runtime::CompilerServices::ConditionalWeakTable`2::Add","System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize","System::Runtime::CompilerServices::ConditionalWeakTable`2::Finalize","System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue","System::Runtime::CompilerServices::ConditionalWeakTable`2::GetOrCreateValue","System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue","System::Runtime::CompilerServices::ConditionalWeakTable`2::GetValue","System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove","System::Runtime::CompilerServices::ConditionalWeakTable`2::Remove","System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue","System::Runtime::CompilerServices::ConditionalWeakTable`2::TryGetValue"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"ac501867-f9f1-ee10-6d78-3763a0cf7edc","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Runtime.CompilerServices\\ConditionalWeakTable`2.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ConditionalWeakTable<TKey,TValue> class | Microsoft Docs","_op_ogTitle":"ConditionalWeakTable<TKey,TValue> class","description":"Enables compilers to dynamically attach object fields to managed objects.\n","toc_asset_id":"_splitted/System.Runtime.CompilerServices/toc.json","toc_rel":"_splitted/System.Runtime.CompilerServices/toc.json","source_url":"","ms.assetid":"System.Runtime.CompilerServices.ConditionalWeakTable`2","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.compilerservices.conditionalweaktable-2","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.compilerservices.conditionalweaktable-2","fileRelativePath":"System.Runtime.CompilerServices.ConditionalWeakTable-2.html"},"themesRelativePathToOutputRoot":"_themes/"}