{"content":"    \r\n    <h1 id=\"System_Transactions_TransactionScope\">\r\n      <span class=\"lang-csharp\">TransactionScope</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Makes a code block transactional. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class TransactionScope : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TransactionScope</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <a class=\"xref\" href=\"system.transactions\" data-linktype=\"relative-path\">System.Transactions</a> infrastructure provides both an explicit programming model based on the <a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a> class, as well as an implicit programming model using the TransactionScope class, in which transactions are automatically managed by the infrastructure.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> It is recommended that you create implicit transactions using the TransactionScope class, so that the ambient transaction context is automatically managed for you. You should also use the TransactionScope and <a class=\"xref\" href=\"system.transactions.dependenttransaction\" data-linktype=\"relative-path\">DependentTransaction</a> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls. For more information on this model, see the <a href=\"http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199\" data-linktype=\"external\">Implementing An Implicit Transaction Using Transaction Scope</a> topic. For more information on writing a transactional application, see <a href=\"http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8\" data-linktype=\"external\">Writing A Transactional Application</a>.  </p>\n</div>\n<p> Upon instantiating a TransactionScope by the <code>new</code> statement, the transaction manager determines which transaction to participate in. Once determined, the scope always participates in that transaction. The decision is based on two factors: whether an ambient transaction is present and the value of the <code>TransactionScopeOption</code> parameter in the constructor.  The ambient transaction is the transaction your code executes in. You can obtain a reference to the ambient transaction by calling the static <a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_Current_\" data-linktype=\"relative-path\">Current</a> property of the <a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a> class. For more information on how this parameter is used, please see the &quot;Transaction Flow Management&quot; section of the <a href=\"http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199\" data-linktype=\"external\">Implementing An Implicit Transaction Using Transaction Scope</a> topic.  </p>\n<p> If no exception occurs within the transaction scope (that is, between the initialization of the TransactionScope object and the calling of its <a class=\"xref\" href=\"system.transactions.transactionscope#System_Transactions_TransactionScope_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method), then the transaction in which the scope participates is allowed to proceed. If an exception does occur within the transaction scope, the transaction in which it participates will be rolled back.  </p>\n<p> When your application completes all work it wants to perform in a transaction, you should call the <a class=\"xref\" href=\"system.transactions.transactionscope#System_Transactions_TransactionScope_Complete_\" data-linktype=\"relative-path\">Complete</a> method only once to inform that transaction manager that it is acceptable to commit the transaction. Failing to call this method aborts the transaction.  </p>\n<p> A call to the <a class=\"xref\" href=\"system.transactions.transactionscope#System_Transactions_TransactionScope_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method marks the end of the transaction scope. Exceptions that occur after calling this method may not affect the transaction.  </p>\n<p> If you modify the value of <a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_Current_\" data-linktype=\"relative-path\">Current</a> inside a scope, an exception is thrown when <a class=\"xref\" href=\"system.transactions.transactionscope#System_Transactions_TransactionScope_Dispose_\" data-linktype=\"relative-path\">Dispose</a> is called. However, at the end of the scope, the previous value is restored. In addition, if you call <a class=\"xref\" href=\"system.transactions.transactionscope#System_Transactions_TransactionScope_Dispose_\" data-linktype=\"relative-path\">Dispose</a> on <a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_Current_\" data-linktype=\"relative-path\">Current</a> inside a transaction scope that created the transaction, the transaction aborts at the end of the scope.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor\" data-linktype=\"self-bookmark\">TransactionScope()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_Transaction_\" data-linktype=\"self-bookmark\">TransactionScope(Transaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeAsyncFlowOption_\" data-linktype=\"self-bookmark\">TransactionScope(TransactionScopeAsyncFlowOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified asynchronous flow option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_\" data-linktype=\"self-bookmark\">TransactionScope(TransactionScopeOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified requirements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_Transaction_System_TimeSpan_\" data-linktype=\"self-bookmark\">TransactionScope(Transaction,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_Transaction_System_Transactions_TransactionScopeAsyncFlowOption_\" data-linktype=\"self-bookmark\">TransactionScope(Transaction,TransactionScopeAsyncFlowOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_System_TimeSpan_\" data-linktype=\"self-bookmark\">TransactionScope(TransactionScopeOption,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified timeout value and requirements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_System_Transactions_TransactionOptions_\" data-linktype=\"self-bookmark\">TransactionScope(TransactionScopeOption,TransactionOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified requirements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_System_Transactions_TransactionScopeAsyncFlowOption_\" data-linktype=\"self-bookmark\">TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified requirements and asynchronous flow option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_Transaction_System_TimeSpan_System_Transactions_EnterpriseServicesInteropOption_\" data-linktype=\"self-bookmark\">TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified timeout value and COM+ interoperability requirements, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_Transaction_System_TimeSpan_System_Transactions_TransactionScopeAsyncFlowOption_\" data-linktype=\"self-bookmark\">TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_System_TimeSpan_System_Transactions_TransactionScopeAsyncFlowOption_\" data-linktype=\"self-bookmark\">TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified timeout value, requirements, and asynchronous flow option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_System_Transactions_TransactionOptions_System_Transactions_EnterpriseServicesInteropOption_\" data-linktype=\"self-bookmark\">TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified scope and COM+ interoperability requirements, and transaction options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_System_Transactions_TransactionOptions_System_Transactions_TransactionScopeAsyncFlowOption_\" data-linktype=\"self-bookmark\">TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified requirements and asynchronous flow option.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope_Complete\" data-linktype=\"self-bookmark\">Complete()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates that all operations within the scope are completed successfully.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Transactions_TransactionScope_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends the transaction scope.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates a new transaction scope with the transaction scope option equal to <a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a>. This means that a transaction is required by the new scope and the ambient transaction is used if one already exists. Otherwise, it creates a new transaction before entering the scope.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_Transaction_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(Transaction)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.Transaction transactionToUse);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionToUse</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeAsyncFlowOption_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(TransactionScopeAsyncFlowOption)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified asynchronous flow option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncFlowOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeasyncflowoption\" data-linktype=\"relative-path\">TransactionScopeAsyncFlowOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeasyncflowoption\" data-linktype=\"relative-path\">TransactionScopeAsyncFlowOption</a> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(TransactionScopeOption)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified requirements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.TransactionScopeOption scopeOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a> enumeration that describes the transaction requirements associated with this transaction scope.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_Transaction_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(Transaction,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionToUse</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> after which the transaction scope times out and aborts the transaction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_Transaction_System_Transactions_TransactionScopeAsyncFlowOption_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(Transaction,TransactionScopeAsyncFlowOption)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.Transaction transactionToUse, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionToUse</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncFlowOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeasyncflowoption\" data-linktype=\"relative-path\">TransactionScopeAsyncFlowOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeasyncflowoption\" data-linktype=\"relative-path\">TransactionScopeAsyncFlowOption</a> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(TransactionScopeOption,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified timeout value and requirements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a> enumeration that describes the transaction requirements associated with this transaction scope.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> after which the transaction scope times out and aborts the transaction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_System_Transactions_TransactionOptions_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(TransactionScopeOption,TransactionOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified requirements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a> enumeration that describes the transaction requirements associated with this transaction scope.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionoptions\" data-linktype=\"relative-path\">TransactionOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.transactions.transactionoptions\" data-linktype=\"relative-path\">TransactionOptions</a> structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you use the <code>transactionOptions</code> parameter to specify an <a class=\"xref\" href=\"system.transactions.isolationlevel\" data-linktype=\"relative-path\">IsolationLevel</a>, and the scope creates a transaction later, the new transaction is associated with the specified isolation level. If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_System_Transactions_TransactionScopeAsyncFlowOption_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified requirements and asynchronous flow option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a> enumeration that describes the transaction requirements associated with this transaction scope.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncFlowOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeasyncflowoption\" data-linktype=\"relative-path\">TransactionScopeAsyncFlowOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeasyncflowoption\" data-linktype=\"relative-path\">TransactionScopeAsyncFlowOption</a> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_Transaction_System_TimeSpan_System_Transactions_EnterpriseServicesInteropOption_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified timeout value and COM+ interoperability requirements, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.EnterpriseServicesInteropOption interopOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionToUse</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> after which the transaction scope times out and aborts the transaction.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>interopOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.enterpriseservicesinteropoption\" data-linktype=\"relative-path\">EnterpriseServicesInteropOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.enterpriseservicesinteropoption\" data-linktype=\"relative-path\">EnterpriseServicesInteropOption</a> enumeration that describes how the associated transaction interacts with COM+ transactions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><strong>Note</strong> This method uses <a class=\"xref\" href=\"system.security.permissions.securityaction\" data-linktype=\"relative-path\">SecurityAction</a> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the <code>FullTrust</code> permission set.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_Transaction_System_TimeSpan_System_Transactions_TransactionScopeAsyncFlowOption_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionToUse</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> after which the transaction scope times out and aborts the transaction.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncFlowOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeasyncflowoption\" data-linktype=\"relative-path\">TransactionScopeAsyncFlowOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeasyncflowoption\" data-linktype=\"relative-path\">TransactionScopeAsyncFlowOption</a> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_System_TimeSpan_System_Transactions_TransactionScopeAsyncFlowOption_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified timeout value, requirements, and asynchronous flow option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a> enumeration that describes the transaction requirements associated with this transaction scope.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeTimeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> after which the transaction scope times out and aborts the transaction.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncFlowOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeasyncflowoption\" data-linktype=\"relative-path\">TransactionScopeAsyncFlowOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeasyncflowoption\" data-linktype=\"relative-path\">TransactionScopeAsyncFlowOption</a> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_System_Transactions_TransactionOptions_System_Transactions_EnterpriseServicesInteropOption_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified scope and COM+ interoperability requirements, and transaction options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.EnterpriseServicesInteropOption interopOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a> enumeration that describes the transaction requirements associated with this transaction scope.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionoptions\" data-linktype=\"relative-path\">TransactionOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.transactions.transactionoptions\" data-linktype=\"relative-path\">TransactionOptions</a> structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>interopOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.enterpriseservicesinteropoption\" data-linktype=\"relative-path\">EnterpriseServicesInteropOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.enterpriseservicesinteropoption\" data-linktype=\"relative-path\">EnterpriseServicesInteropOption</a> enumeration that describes how the associated transaction interacts with COM+ transactions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you use the <code>transactionOptions</code> parameter to specify an <a class=\"xref\" href=\"system.transactions.isolationlevel\" data-linktype=\"relative-path\">IsolationLevel</a>, and the scope creates a transaction later, the new transaction is associated with the specified isolation level. If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.  </p>\n<p> <strong>Note</strong> This method uses <a class=\"xref\" href=\"system.security.permissions.securityaction\" data-linktype=\"relative-path\">SecurityAction</a> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the <code>FullTrust</code> permission set.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope__ctor_System_Transactions_TransactionScopeOption_System_Transactions_TransactionOptions_System_Transactions_TransactionScopeAsyncFlowOption_\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Initializes a new instance of the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class with the specified requirements and asynchronous flow option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scopeOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeoption\" data-linktype=\"relative-path\">TransactionScopeOption</a> enumeration that describes the transaction requirements associated with this transaction scope.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionoptions\" data-linktype=\"relative-path\">TransactionOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.transactions.transactionoptions\" data-linktype=\"relative-path\">TransactionOptions</a> structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncFlowOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionscopeasyncflowoption\" data-linktype=\"relative-path\">TransactionScopeAsyncFlowOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of the <a class=\"xref\" href=\"system.transactions.transactionscopeasyncflowoption\" data-linktype=\"relative-path\">TransactionScopeAsyncFlowOption</a> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope_Complete\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope_Complete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Complete()</div>        \r\n          </div>\r\n    \r\n            <p>Indicates that all operations within the scope are completed successfully.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Complete ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method has already been called once.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you are satisfied that all operations within the scope are completed successfully, you should call this method only once to inform that transaction manager that the state across all resources is consistent, and the transaction can be committed. It is very good practice to put the call as the last statement in the <code>using</code> block.  </p>\n<p> For more information on how this method is used, see the <a href=\"http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199\" data-linktype=\"external\">Implementing An Implicit Transaction Using Transaction Scope</a> topic.  </p>\n<p> Failing to call this method aborts the transaction, because the transaction manager interprets this as a system failure, or exceptions thrown within the scope of transaction. However, you should also note that calling this method does not guarantee a commit of the transaction. It is merely a way of informing the transaction manager of your status. After calling this method, you can no longer access the ambient transaction via the <a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_Current_\" data-linktype=\"relative-path\">Current</a> property, and trying to do so results in an exception being thrown.  </p>\n<p> The actual work of commit between the resources manager happens at the <code>End Using</code> statement if the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> object created the transaction. If it did not create the transaction, the commit occurs whenever <a class=\"xref\" href=\"system.transactions.committabletransaction#System_Transactions_CommittableTransaction_Commit_\" data-linktype=\"relative-path\">Commit</a> is called by the owner of the <a class=\"xref\" href=\"system.transactions.committabletransaction\" data-linktype=\"relative-path\">CommittableTransaction</a> object. At that point the Transaction Manager calls the resource managers and informs them to either commit or rollback, based on whether this method was called on the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class to define a block of code to participate in a transaction.  </p>\n<pre><code class=\"lang-vb\" name=\"TransactionScope#1\">    &#39;  This function takes arguments for 2 connection strings and commands to create a transaction \n    &#39;  involving two SQL Servers. It returns a value &gt; 0 if the transaction is committed, 0 if the \n    &#39;  transaction is rolled back. To test this code, you can connect to two different databases \n    &#39;  on the same server by altering the connection string, or to another 3rd party RDBMS  \n    &#39;  by altering the code in the connection2 code block.\n    Public Function CreateTransactionScope( _\n      ByVal connectString1 As String, ByVal connectString2 As String, _\n      ByVal commandText1 As String, ByVal commandText2 As String) As Integer\n\n        &#39; Initialize the return value to zero and create a StringWriter to display results.\n        Dim returnValue As Integer = 0\n        Dim writer As System.IO.StringWriter = New System.IO.StringWriter\n\n        Try\n        &#39; Create the TransactionScope to execute the commands, guaranteeing\n        &#39;  that both commands can commit or roll back as a single unit of work.\n            Using scope As New TransactionScope()\n                Using connection1 As New SqlConnection(connectString1)\n                    &#39; Opening the connection automatically enlists it in the \n                    &#39; TransactionScope as a lightweight transaction.\n                    connection1.Open()\n\n                    &#39; Create the SqlCommand object and execute the first command.\n                    Dim command1 As SqlCommand = New SqlCommand(commandText1, connection1)\n                    returnValue = command1.ExecuteNonQuery()\n                    writer.WriteLine(&quot;Rows to be affected by command1: {0}&quot;, returnValue)\n\n                    &#39; If you get here, this means that command1 succeeded. By nesting\n                    &#39; the using block for connection2 inside that of connection1, you\n                    &#39; conserve server and network resources as connection2 is opened\n                    &#39; only when there is a chance that the transaction can commit.   \n                    Using connection2 As New SqlConnection(connectString2)\n                        &#39; The transaction is escalated to a full distributed\n                        &#39; transaction when connection2 is opened.\n                        connection2.Open()\n\n                        &#39; Execute the second command in the second database.\n                        returnValue = 0\n                        Dim command2 As SqlCommand = New SqlCommand(commandText2, connection2)\n                        returnValue = command2.ExecuteNonQuery()\n                        writer.WriteLine(&quot;Rows to be affected by command2: {0}&quot;, returnValue)\n                    End Using\n                End Using\n\n            &#39; The Complete method commits the transaction. If an exception has been thrown,\n            &#39; Complete is called and the transaction is rolled back.\n            scope.Complete()\n            End Using\n        Catch ex As TransactionAbortedException\n            writer.WriteLine(&quot;TransactionAbortedException Message: {0}&quot;, ex.Message)\n        Catch ex As ApplicationException\n            writer.WriteLine(&quot;ApplicationException Message: {0}&quot;, ex.Message)\n        End Try\n\n        &#39; Display messages.\n        Console.WriteLine(writer.ToString())\n\n        Return returnValue\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"TransactionScope#1\">    // This function takes arguments for 2 connection strings and commands to create a transaction \n    // involving two SQL Servers. It returns a value &gt; 0 if the transaction is committed, 0 if the \n    // transaction is rolled back. To test this code, you can connect to two different databases \n    // on the same server by altering the connection string, or to another 3rd party RDBMS by \n    // altering the code in the connection2 code block.\n    static public int CreateTransactionScope(\n        string connectString1, string connectString2,\n        string commandText1, string commandText2)\n    {\n        // Initialize the return value to zero and create a StringWriter to display results.\n        int returnValue = 0;\n        System.IO.StringWriter writer = new System.IO.StringWriter();\n\n        try\n        {\n            // Create the TransactionScope to execute the commands, guaranteeing\n            // that both commands can commit or roll back as a single unit of work.\n            using (TransactionScope scope = new TransactionScope())\n            {\n                using (SqlConnection connection1 = new SqlConnection(connectString1))\n                {\n                    // Opening the connection automatically enlists it in the \n                    // TransactionScope as a lightweight transaction.\n                    connection1.Open();\n\n                    // Create the SqlCommand object and execute the first command.\n                    SqlCommand command1 = new SqlCommand(commandText1, connection1);\n                    returnValue = command1.ExecuteNonQuery();\n                    writer.WriteLine(&quot;Rows to be affected by command1: {0}&quot;, returnValue);\n\n                    // If you get here, this means that command1 succeeded. By nesting\n                    // the using block for connection2 inside that of connection1, you\n                    // conserve server and network resources as connection2 is opened\n                    // only when there is a chance that the transaction can commit.   \n                    using (SqlConnection connection2 = new SqlConnection(connectString2))\n                    {\n                        // The transaction is escalated to a full distributed\n                        // transaction when connection2 is opened.\n                        connection2.Open();\n\n                        // Execute the second command in the second database.\n                        returnValue = 0;\n                        SqlCommand command2 = new SqlCommand(commandText2, connection2);\n                        returnValue = command2.ExecuteNonQuery();\n                        writer.WriteLine(&quot;Rows to be affected by command2: {0}&quot;, returnValue);\n                    }\n                }\n\n                // The Complete method commits the transaction. If an exception has been thrown,\n                // Complete is not  called and the transaction is rolled back.\n                scope.Complete();\n\n            }\n           \n        }\n        catch (TransactionAbortedException ex)\n        {\n            writer.WriteLine(&quot;TransactionAbortedException Message: {0}&quot;, ex.Message);\n        }\n        catch (ApplicationException ex)\n        {\n            writer.WriteLine(&quot;ApplicationException Message: {0}&quot;, ex.Message);\n        }\n\n        // Display messages.\n        Console.WriteLine(writer.ToString());\n\n        return returnValue;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Transactions_TransactionScope_Dispose\">\r\n    \r\n            <a id=\"System_Transactions_TransactionScope_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Ends the transaction scope.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method marks the end of the transaction scope. If the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> object created the transaction and <a class=\"xref\" href=\"system.transactions.transactionscope#System_Transactions_TransactionScope_Complete_\" data-linktype=\"relative-path\">Complete</a> was called on the scope, the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> object attempts to commit the transaction when this method is called.  </p>\n<p> The use of the C# <code>using</code> construction ensures that this method is called even if an exception occurs. Exceptions that occur after calling this method may not affect the transaction. This method also restores the ambient transaction to it original state. A <a class=\"xref\" href=\"system.transactions.transactionabortedexception\" data-linktype=\"relative-path\">TransactionAbortedException</a> is thrown if the transaction is not actually committed.  </p>\n<p> This method is synchronous and blocks until the transaction has been committed or aborted. Because of this, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur. If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen. This is because the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method is synchronous and blocks the worker thread until the UI thread finishes its job. However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction. The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish. You should use <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_BeginInvoke_\" data-linktype=\"relative-path\">BeginInvoke</a> rather than <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Invoke_\" data-linktype=\"relative-path\">Invoke</a> wherever possible, because it is asynchronous and thus less prone to deadlock.  </p>\n<p> For more information on how this method is used, see the <a href=\"http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199\" data-linktype=\"external\">Implementing An Implicit Transaction Using Transaction Scope</a> topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the <a class=\"xref\" href=\"system.transactions.transactionscope\" data-linktype=\"relative-path\">TransactionScope</a> class to define a block of code to participate in a transaction.  </p>\n<pre><code class=\"lang-vb\" name=\"TransactionScope#1\">    &#39;  This function takes arguments for 2 connection strings and commands to create a transaction \n    &#39;  involving two SQL Servers. It returns a value &gt; 0 if the transaction is committed, 0 if the \n    &#39;  transaction is rolled back. To test this code, you can connect to two different databases \n    &#39;  on the same server by altering the connection string, or to another 3rd party RDBMS  \n    &#39;  by altering the code in the connection2 code block.\n    Public Function CreateTransactionScope( _\n      ByVal connectString1 As String, ByVal connectString2 As String, _\n      ByVal commandText1 As String, ByVal commandText2 As String) As Integer\n\n        &#39; Initialize the return value to zero and create a StringWriter to display results.\n        Dim returnValue As Integer = 0\n        Dim writer As System.IO.StringWriter = New System.IO.StringWriter\n\n        Try\n        &#39; Create the TransactionScope to execute the commands, guaranteeing\n        &#39;  that both commands can commit or roll back as a single unit of work.\n            Using scope As New TransactionScope()\n                Using connection1 As New SqlConnection(connectString1)\n                    &#39; Opening the connection automatically enlists it in the \n                    &#39; TransactionScope as a lightweight transaction.\n                    connection1.Open()\n\n                    &#39; Create the SqlCommand object and execute the first command.\n                    Dim command1 As SqlCommand = New SqlCommand(commandText1, connection1)\n                    returnValue = command1.ExecuteNonQuery()\n                    writer.WriteLine(&quot;Rows to be affected by command1: {0}&quot;, returnValue)\n\n                    &#39; If you get here, this means that command1 succeeded. By nesting\n                    &#39; the using block for connection2 inside that of connection1, you\n                    &#39; conserve server and network resources as connection2 is opened\n                    &#39; only when there is a chance that the transaction can commit.   \n                    Using connection2 As New SqlConnection(connectString2)\n                        &#39; The transaction is escalated to a full distributed\n                        &#39; transaction when connection2 is opened.\n                        connection2.Open()\n\n                        &#39; Execute the second command in the second database.\n                        returnValue = 0\n                        Dim command2 As SqlCommand = New SqlCommand(commandText2, connection2)\n                        returnValue = command2.ExecuteNonQuery()\n                        writer.WriteLine(&quot;Rows to be affected by command2: {0}&quot;, returnValue)\n                    End Using\n                End Using\n\n            &#39; The Complete method commits the transaction. If an exception has been thrown,\n            &#39; Complete is called and the transaction is rolled back.\n            scope.Complete()\n            End Using\n        Catch ex As TransactionAbortedException\n            writer.WriteLine(&quot;TransactionAbortedException Message: {0}&quot;, ex.Message)\n        Catch ex As ApplicationException\n            writer.WriteLine(&quot;ApplicationException Message: {0}&quot;, ex.Message)\n        End Try\n\n        &#39; Display messages.\n        Console.WriteLine(writer.ToString())\n\n        Return returnValue\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"TransactionScope#1\">    // This function takes arguments for 2 connection strings and commands to create a transaction \n    // involving two SQL Servers. It returns a value &gt; 0 if the transaction is committed, 0 if the \n    // transaction is rolled back. To test this code, you can connect to two different databases \n    // on the same server by altering the connection string, or to another 3rd party RDBMS by \n    // altering the code in the connection2 code block.\n    static public int CreateTransactionScope(\n        string connectString1, string connectString2,\n        string commandText1, string commandText2)\n    {\n        // Initialize the return value to zero and create a StringWriter to display results.\n        int returnValue = 0;\n        System.IO.StringWriter writer = new System.IO.StringWriter();\n\n        try\n        {\n            // Create the TransactionScope to execute the commands, guaranteeing\n            // that both commands can commit or roll back as a single unit of work.\n            using (TransactionScope scope = new TransactionScope())\n            {\n                using (SqlConnection connection1 = new SqlConnection(connectString1))\n                {\n                    // Opening the connection automatically enlists it in the \n                    // TransactionScope as a lightweight transaction.\n                    connection1.Open();\n\n                    // Create the SqlCommand object and execute the first command.\n                    SqlCommand command1 = new SqlCommand(commandText1, connection1);\n                    returnValue = command1.ExecuteNonQuery();\n                    writer.WriteLine(&quot;Rows to be affected by command1: {0}&quot;, returnValue);\n\n                    // If you get here, this means that command1 succeeded. By nesting\n                    // the using block for connection2 inside that of connection1, you\n                    // conserve server and network resources as connection2 is opened\n                    // only when there is a chance that the transaction can commit.   \n                    using (SqlConnection connection2 = new SqlConnection(connectString2))\n                    {\n                        // The transaction is escalated to a full distributed\n                        // transaction when connection2 is opened.\n                        connection2.Open();\n\n                        // Execute the second command in the second database.\n                        returnValue = 0;\n                        SqlCommand command2 = new SqlCommand(commandText2, connection2);\n                        returnValue = command2.ExecuteNonQuery();\n                        writer.WriteLine(&quot;Rows to be affected by command2: {0}&quot;, returnValue);\n                    }\n                }\n\n                // The Complete method commits the transaction. If an exception has been thrown,\n                // Complete is not  called and the transaction is rolled back.\n                scope.Complete();\n\n            }\n           \n        }\n        catch (TransactionAbortedException ex)\n        {\n            writer.WriteLine(&quot;TransactionAbortedException Message: {0}&quot;, ex.Message);\n        }\n        catch (ApplicationException ex)\n        {\n            writer.WriteLine(&quot;ApplicationException Message: {0}&quot;, ex.Message);\n        }\n\n        // Display messages.\n        Console.WriteLine(writer.ToString());\n\n        return returnValue;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Transactions.TransactionScope.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Transactions.TransactionScope.yml\">\r\n<meta name=\"APIName\" content=\"System.Transactions.TransactionScope\">\r\n<meta name=\"APIName\" content=\"System.Transactions.TransactionScope..ctor\">\r\n<meta name=\"APIName\" content=\"System.Transactions.TransactionScope.Complete\">\r\n<meta name=\"APIName\" content=\"System.Transactions.TransactionScope.Dispose\">\r\n<meta name=\"APILocation\" content=\"System.Transactions.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7b4d1b47-07fa-a4cd-f90f-599402f433fe\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Transactions\\TransactionScope.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Makes a code block transactional. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Transactions/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Transactions.TransactionScope\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Transactions.TransactionScope.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Transactions.TransactionScope.yml","open_to_public_contributors":true,"api_name":["System.Transactions.TransactionScope","System.Transactions.TransactionScope..ctor","System.Transactions.TransactionScope.Complete","System.Transactions.TransactionScope.Dispose"],"api_location":["System.Transactions.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Transactions.TransactionScope","System::Transactions::TransactionScope","System.Transactions.TransactionScope.#ctor","System::Transactions::TransactionScope::#ctor","System.Transactions.TransactionScope.Complete","System::Transactions::TransactionScope::Complete","System.Transactions.TransactionScope.Dispose","System::Transactions::TransactionScope::Dispose"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7b4d1b47-07fa-a4cd-f90f-599402f433fe","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Transactions\\TransactionScope.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Transactions/TransactionScope.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TransactionScope class | Microsoft Docs","_op_ogTitle":"TransactionScope class","description":"Makes a code block transactional. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Transactions/toc.json","toc_rel":"_splitted/System.Transactions/toc.json","source_url":"","ms.assetid":"System.Transactions.TransactionScope","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.transactions.transactionscope","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.transactions.transactionscope","fileRelativePath":"System.Transactions.TransactionScope.html"},"themesRelativePathToOutputRoot":"_themes/"}