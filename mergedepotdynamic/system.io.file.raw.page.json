{"content":"    \r\n    <h1 id=\"System_IO_File\">\r\n      <span class=\"lang-csharp\">File</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> objects.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/io/file.cs#1c7421e464f67b7e\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic static class File</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">File</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/io/file.cs#1c7421e464f67b7e\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> Use the File class for typical operations such as copying, moving, renaming, creating, opening, deleting, and appending to a single file at a time. You can also use the File class to get and set file attributes or <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> information related to the creation, access, and writing of a file. If you want to perform operations on multiple files, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> or <a class=\"xref\" href=\"system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>.  </p>\n<p> Many of the File methods return other I/O types when you create or open files. You can use these other types to further manipulate a file. For more information, see specific File members such as <a class=\"xref\" href=\"system.io.file#System_IO_File_OpenText_\" data-linktype=\"relative-path\">OpenText</a>, <a class=\"xref\" href=\"system.io.file#System_IO_File_CreateText_\" data-linktype=\"relative-path\">CreateText</a>, or <a class=\"xref\" href=\"system.io.file#System_IO_File_Create_\" data-linktype=\"relative-path\">Create</a>.  </p>\n<p> Because all File methods are static, it might be more efficient to use a File method rather than a corresponding <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> instance method if you want to perform only one action. All File methods require the path to the file that you are manipulating.  </p>\n<p> The static methods of the File class perform security checks on all methods. If you are going to reuse an object several times, consider using the corresponding instance method of <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> instead, because the security check will not always be necessary.  </p>\n<p> By default, full read/write access to new files is granted to all users.  </p>\n<p> The following table describes the enumerations that are used to customize the behavior of various File methods.  </p>\n<table>\n<thead>\n<tr>\n<th>Enumeration</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></td>\n<td>Specifies read and write access to a file.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a></td>\n<td>Specifies the level of access permitted for a file that is already in use.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a></td>\n<td>Specifies whether the contents of an existing file are preserved or overwritten, and whether requests to create an existing file cause an exception.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, &quot;c:\\temp c:\\windows&quot; also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  </p>\n</div>\n<p> In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  </p>\n<ul>\n<li><p>&quot;c:\\\\MyDir\\\\MyFile.txt&quot; in C#, or &quot;c:\\MyDir\\MyFile.txt&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;c:\\\\MyDir&quot; in C#, or &quot;c:\\MyDir&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;MyDir\\\\MySubdir&quot; in C#, or &quot;MyDir\\MySubDir&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;\\\\\\\\MyServer\\\\MyShare&quot; in C#, or &quot;\\\\MyServer\\MyShare&quot; in Visual Basic.  </p>\n<p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_AppendAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__\" data-linktype=\"self-bookmark\">AppendAllLines(String,IEnumerable&lt;String&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_AppendAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__System_Text_Encoding_\" data-linktype=\"self-bookmark\">AppendAllLines(String,IEnumerable&lt;String&gt;,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_AppendAllText_System_String_System_String_\" data-linktype=\"self-bookmark\">AppendAllText(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_AppendAllText_System_String_System_String_System_Text_Encoding_\" data-linktype=\"self-bookmark\">AppendAllText(String,String,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends the specified string to the file, creating the file if it does not already exist.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_AppendText_System_String_\" data-linktype=\"self-bookmark\">AppendText(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Copy_System_String_System_String_\" data-linktype=\"self-bookmark\">Copy(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Copy_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">Copy(String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies an existing file to a new file. Overwriting a file of the same name is allowed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Create_System_String_\" data-linktype=\"self-bookmark\">Create(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates or overwrites a file in the specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Create_System_String_System_Int32_\" data-linktype=\"self-bookmark\">Create(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates or overwrites the specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Create_System_String_System_Int32_System_IO_FileOptions_\" data-linktype=\"self-bookmark\">Create(String,Int32,FileOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates or overwrites the specified file, specifying a buffer size and a <a class=\"xref\" href=\"system.io.fileoptions\" data-linktype=\"relative-path\">FileOptions</a> value that describes how to create or overwrite the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Create_System_String_System_Int32_System_IO_FileOptions_System_Security_AccessControl_FileSecurity_\" data-linktype=\"self-bookmark\">Create(String,Int32,FileOptions,FileSecurity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates or overwrites the specified file with the specified buffer size, file options, and file security.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_CreateText_System_String_\" data-linktype=\"self-bookmark\">CreateText(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates or opens a file for writing UTF-8 encoded text.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Decrypt_System_String_\" data-linktype=\"self-bookmark\">Decrypt(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decrypts a file that was encrypted by the current account using the <span class=\"xref\">stem.IO.File.Encrypt*</span> method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Delete_System_String_\" data-linktype=\"self-bookmark\">Delete(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes the specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Encrypt_System_String_\" data-linktype=\"self-bookmark\">Encrypt(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Encrypts a file so that only the account used to encrypt the file can decrypt it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Exists_System_String_\" data-linktype=\"self-bookmark\">Exists(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified file exists.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_GetAccessControl_System_String_\" data-linktype=\"self-bookmark\">GetAccessControl(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that encapsulates the access control list (ACL) entries for a specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_GetAccessControl_System_String_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"self-bookmark\">GetAccessControl(String,AccessControlSections)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that encapsulates the specified type of access control list (ACL) entries for a particular file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_GetAttributes_System_String_\" data-linktype=\"self-bookmark\">GetAttributes(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a> of the file on the path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_GetCreationTime_System_String_\" data-linktype=\"self-bookmark\">GetCreationTime(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the creation date and time of the specified file or directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_GetCreationTimeUtc_System_String_\" data-linktype=\"self-bookmark\">GetCreationTimeUtc(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_GetLastAccessTime_System_String_\" data-linktype=\"self-bookmark\">GetLastAccessTime(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the date and time the specified file or directory was last accessed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_GetLastAccessTimeUtc_System_String_\" data-linktype=\"self-bookmark\">GetLastAccessTimeUtc(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_GetLastWriteTime_System_String_\" data-linktype=\"self-bookmark\">GetLastWriteTime(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the date and time the specified file or directory was last written to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_GetLastWriteTimeUtc_System_String_\" data-linktype=\"self-bookmark\">GetLastWriteTimeUtc(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Move_System_String_System_String_\" data-linktype=\"self-bookmark\">Move(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves a specified file to a new location, providing the option to specify a new file name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Open_System_String_System_IO_FileMode_\" data-linktype=\"self-bookmark\">Open(String,FileMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> on the specified path with read/write access.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Open_System_String_System_IO_FileMode_System_IO_FileAccess_\" data-linktype=\"self-bookmark\">Open(String,FileMode,FileAccess)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> on the specified path, with the specified mode and access.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Open_System_String_System_IO_FileMode_System_IO_FileAccess_System_IO_FileShare_\" data-linktype=\"self-bookmark\">Open(String,FileMode,FileAccess,FileShare)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_OpenRead_System_String_\" data-linktype=\"self-bookmark\">OpenRead(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens an existing file for reading.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_OpenText_System_String_\" data-linktype=\"self-bookmark\">OpenText(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens an existing UTF-8 encoded text file for reading.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_OpenWrite_System_String_\" data-linktype=\"self-bookmark\">OpenWrite(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens an existing file or creates a new file for writing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_ReadAllBytes_System_String_\" data-linktype=\"self-bookmark\">ReadAllBytes(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_ReadAllLines_System_String_\" data-linktype=\"self-bookmark\">ReadAllLines(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a text file, reads all lines of the file, and then closes the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_ReadAllLines_System_String_System_Text_Encoding_\" data-linktype=\"self-bookmark\">ReadAllLines(String,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_ReadAllText_System_String_\" data-linktype=\"self-bookmark\">ReadAllText(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a text file, reads all lines of the file, and then closes the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_ReadAllText_System_String_System_Text_Encoding_\" data-linktype=\"self-bookmark\">ReadAllText(String,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_ReadLines_System_String_\" data-linktype=\"self-bookmark\">ReadLines(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the lines of a file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_ReadLines_System_String_System_Text_Encoding_\" data-linktype=\"self-bookmark\">ReadLines(String,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Read the lines of a file that has a specified encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Replace_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">Replace(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_Replace_System_String_System_String_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">Replace(String,String,String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_SetAccessControl_System_String_System_Security_AccessControl_FileSecurity_\" data-linktype=\"self-bookmark\">SetAccessControl(String,FileSecurity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies access control list (ACL) entries described by a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object to the specified file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_SetAttributes_System_String_System_IO_FileAttributes_\" data-linktype=\"self-bookmark\">SetAttributes(String,FileAttributes)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the specified <a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a> of the file on the specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_SetCreationTime_System_String_System_DateTime_\" data-linktype=\"self-bookmark\">SetCreationTime(String,DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the date and time the file was created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_SetCreationTimeUtc_System_String_System_DateTime_\" data-linktype=\"self-bookmark\">SetCreationTimeUtc(String,DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the date and time, in coordinated universal time (UTC), that the file was created.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_SetLastAccessTime_System_String_System_DateTime_\" data-linktype=\"self-bookmark\">SetLastAccessTime(String,DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the date and time the specified file was last accessed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_SetLastAccessTimeUtc_System_String_System_DateTime_\" data-linktype=\"self-bookmark\">SetLastAccessTimeUtc(String,DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_SetLastWriteTime_System_String_System_DateTime_\" data-linktype=\"self-bookmark\">SetLastWriteTime(String,DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the date and time that the specified file was last written to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_SetLastWriteTimeUtc_System_String_System_DateTime_\" data-linktype=\"self-bookmark\">SetLastWriteTimeUtc(String,DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_WriteAllBytes_System_String_System_Byte___\" data-linktype=\"self-bookmark\">WriteAllBytes(String,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_WriteAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__\" data-linktype=\"self-bookmark\">WriteAllLines(String,IEnumerable&lt;String&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new file, writes a collection of strings to the file, and then closes the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_WriteAllLines_System_String_System_String___\" data-linktype=\"self-bookmark\">WriteAllLines(String,String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new file, write the specified string array to the file, and then closes the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_WriteAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__System_Text_Encoding_\" data-linktype=\"self-bookmark\">WriteAllLines(String,IEnumerable&lt;String&gt;,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_WriteAllLines_System_String_System_String___System_Text_Encoding_\" data-linktype=\"self-bookmark\">WriteAllLines(String,String[],Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_WriteAllText_System_String_System_String_\" data-linktype=\"self-bookmark\">WriteAllText(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_File_WriteAllText_System_String_System_String_System_Text_Encoding_\" data-linktype=\"self-bookmark\">WriteAllText(String,String,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_AppendAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__\">\r\n    \r\n            <a id=\"System_IO_File_AppendAllLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendAllLines(String,IEnumerable&lt;String&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void AppendAllLines (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to append the lines to. The file is created if it doesn&#39;t already exist.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>contents</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The lines to append to the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Either<code> path </code>or <code>contents</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified by <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have permission to write to the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specifies a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> is a directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method creates the file if it doesn’t exist, but it doesn&#39;t create new directories. Therefore, the value of the <code>path</code> parameter must contain existing directories.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes selected lines from a sample data file to a file, and then appends more lines. The directory named <code>temp</code> on drive C must exist for the example to complete successfully.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.File.WriteAllAppendAll#1\">using System;\nusing System.IO;\nusing System.Linq;\n\nclass Program\n{\n\tstatic string dataPath = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;imestamps.txt&quot;;\n\n\tstatic void Main(string[] args)\n\t{\n\t\tCreateSampleFile();\n\n\t\tvar JulyWeekends = from line in File.ReadLines(dataPath)\n\t\t\t\t\t\t   where (line.StartsWith(&quot;Saturday&quot;) || \n\t\t\t\t\t\t   line.StartsWith(&quot;Sunday&quot;)) &amp; \n\t\t\t\t\t\t   line.Contains(&quot;July&quot;)\n\t\t\t\t\t\t   select line;\n\n\t\tFile.WriteAllLines(@&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\selectedDays.txt&quot;, JulyWeekends);\n\n\t\tvar MarchMondays = from line in File.ReadLines(dataPath)\n\t\t\t\t\t\t   where line.StartsWith(&quot;Monday&quot;) &amp;&amp; \n\t\t\t\t\t\t   line.Contains(&quot;March&quot;)\n\t\t\t\t\t\t   select line;\n\n\t\tFile.AppendAllLines(@&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\selectedDays.txt&quot;, MarchMondays);\n\t}\n\n\tstatic void CreateSampleFile()\n\t{\n\t\tDateTime TimeStamp = new DateTime(1700, 1, 1);\n\n\t\tusing (StreamWriter sw = new StreamWriter(dataPath))\n\t\t{\n\t\t\tfor (int i = 0; i &lt; 500; i++)\n\t\t\t{\n\t\t\t\tDateTime TS1 = TimeStamp.AddYears(i);\n\t\t\t\tDateTime TS2 = TS1.AddMonths(i);\n\t\t\t\tDateTime TS3 = TS2.AddDays(i);\n\t\t\t\tsw.WriteLine(TS3.ToLongDateString());\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.File.WriteAllAppendAll#1\">Imports System\nImports System.IO\nImports System.Linq\n\nClass Program\n    Shared dataPath As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;imestamps.txt&quot;\n\n    Public Shared Sub Main(ByVal args As String())\n        CreateSampleFile()\n\n        Dim JulyWeekends = From line In File.ReadLines(dataPath) _\n            Where (line.StartsWith(&quot;Saturday&quot;) OrElse _\n            line.StartsWith(&quot;Sunday&quot;)) And line.Contains(&quot;July&quot;) _\n            Select line\n\n        File.WriteAllLines(&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\selectedDays.txt&quot;, JulyWeekends)\n\n        Dim MarchMondays = From line In File.ReadLines(dataPath) _\n            Where line.StartsWith(&quot;Monday&quot;) AndAlso line.Contains(&quot;March&quot;) _\n            Select line\n\n        File.AppendAllLines(&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\selectedDays.txt&quot;, MarchMondays)\n    End Sub\n\n    Private Shared Sub CreateSampleFile()\n        Dim TimeStamp As New DateTime(1700, 1, 1)\n\n        Using sw As New StreamWriter(dataPath)\n            For i As Integer = 0 To 499\n                Dim TS1 As DateTime = TimeStamp.AddYears(i)\n                Dim TS2 As DateTime = TS1.AddMonths(i)\n                Dim TS3 As DateTime = TS2.AddDays(i)\n\n                sw.WriteLine(TS3.ToLongDateString())\n            Next\n        End Using\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_AppendAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_IO_File_AppendAllLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendAllLines(String,IEnumerable&lt;String&gt;,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void AppendAllLines (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Text.Encoding encoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to append the lines to. The file is created if it doesn&#39;t already exist.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>contents</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The lines to append to the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character encoding to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Either<code> path</code>, <code>contents</code>, or <code>encoding</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified by <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specifies a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> is a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method creates the file if it doesn’t exist, but it doesn&#39;t create new directories. Therefore, the value of the <code>path</code> parameter must contain existing directories.  </p>\n<p> You can use this method to create a file that contains the following:  </p>\n<ul>\n<li><p>The results of a <a href=\"../Topic/LINQ%20to%20Objects.md\" data-linktype=\"relative-path\">LINQ to Objects</a> query on the lines of a file, as obtained by using the <a class=\"xref\" href=\"system.io.file#System_IO_File_ReadLines_\" data-linktype=\"relative-path\">ReadLines</a> method.  </p>\n</li>\n<li><p>The contents of a collection that implements an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of strings.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_AppendAllText_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_AppendAllText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendAllText(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void AppendAllText (string path, string contents);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to append the specified string to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>contents</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to append to the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Given a string and a file path, this method opens the specified file, appends the string to the end of the file, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised.  </p>\n<p> The method creates the file if it doesn’t exist, but it doesn&#39;t create new directories. Therefore, the value of the <code>path</code> parameter must contain existing directories.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the AppendAllText method to add extra text to the end of a file. In this example, a file is created if it doesn&#39;t already exist, and text is added to it. However, the directory named <code>temp</code> on drive C must exist for the example to complete successfully.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.File.AllText#00\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n        &#39; This text is added only once to the file.\n        If File.Exists(path) = False Then\n\n            &#39; Create a file to write to.\n            Dim createText As String = &quot;Hello and Welcome&quot; + Environment.NewLine\n            File.WriteAllText(path, createText)\n        End If\n\n        &#39; This text is always added, making the file longer over time\n        &#39; if it is not deleted.\n        Dim appendText As String = &quot;This is extra text&quot; + Environment.NewLine\n        File.AppendAllText(path, appendText)\n\n        &#39; Open the file to read from.\n        Dim readText As String = File.ReadAllText(path)\n        Console.WriteLine(readText)\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.File.AllText#00\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test\n{\n    public static void Main()\n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // This text is added only once to the file.\n        if (!File.Exists(path))\n        {\n            // Create a file to write to.\n            string createText = &quot;Hello and Welcome&quot; + Environment.NewLine;\n            File.WriteAllText(path, createText);\n        }\n\n        // This text is always added, making the file longer over time\n        // if it is not deleted.\n        string appendText = &quot;This is extra text&quot; + Environment.NewLine;\n        File.AppendAllText(path, appendText);\n\n        // Open the file to read from.\n        string readText = File.ReadAllText(path);\n        Console.WriteLine(readText);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_AppendAllText_System_String_System_String_System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_IO_File_AppendAllText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendAllText(String,String,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Appends the specified string to the file, creating the file if it does not already exist.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void AppendAllText (string path, string contents, System.Text.Encoding encoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to append the specified string to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>contents</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to append to the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character encoding to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Given a string and a file path, this method opens the specified file, appends the string to the end of the file using the specified encoding, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised.  </p>\n<p> The method creates the file if it doesn’t exist, but it doesn&#39;t create new directories. Therefore, the value of the <code>path</code> parameter must contain existing directories.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the AppendAllText method to add extra text to the end of a file. In this example, a file is created if it doesn&#39;t already exist, and text is added to it. However, the directory named <code>temp</code> on drive C must exist for the example to complete successfully.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.File.AllText_Encoding#00\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test\n{\n    public static void Main()\n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // This text is added only once to the file.\n        if (!File.Exists(path))\n        {\n            // Create a file to write to.\n            string createText = &quot;Hello and Welcome&quot; + Environment.NewLine;\n            File.WriteAllText(path, createText, Encoding.UTF8);\n        }\n\n        // This text is always added, making the file longer over time\n        // if it is not deleted.\n        string appendText = &quot;This is extra text&quot; + Environment.NewLine;\n        File.AppendAllText(path, appendText, Encoding.UTF8);\n\n        // Open the file to read from.\n        string readText = File.ReadAllText(path);\n        Console.WriteLine(readText);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.File.AllText_Encoding#00\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim sw As StreamWriter\n\n        &#39; This text is added only once to the file.\n        If File.Exists(path) = False Then\n\n            &#39; Create a file to write to.\n            Dim createText As String = &quot;Hello and Welcome&quot; + Environment.NewLine\n            File.WriteAllText(path, createText, Encoding.UTF8)\n        End If\n\n        &#39; This text is always added, making the file longer over time\n        &#39; if it is not deleted.\n        Dim appendText As String = &quot;This is extra text&quot; + Environment.NewLine\n        File.AppendAllText(path, appendText, Encoding.UTF8)\n\n        &#39; Open the file to read from.\n        Dim readText As String = File.ReadAllText(path)\n        Console.WriteLine(readText)\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_AppendText_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_AppendText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendText(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.StreamWriter AppendText (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to the file to append to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a></div>\r\n                  </div>\r\n                  <p>A stream writer that appends UTF-8 encoded text to the specified file or to a new file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is equivalent to the <a class=\"xref\" href=\"system.io.streamwriter#System_IO_StreamWriter__ctor_System_String_System_Boolean_\" data-linktype=\"relative-path\">StreamWriter(String,Boolean)</a> constructor overload. If the file specified by <code>path</code> does not exist, it is created. If the file does exist, write operations to the <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> append text to the file. Additional threads are permitted to read the file while it is open.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example appends text to a file. The method creates a new file if the file doesn’t exist. However, the directory named <code>temp</code> on drive C must exist for the example to complete successfully.  </p>\n<pre><code class=\"lang-cpp\" name=\"File_AppendText#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n   \n   // This text is added only once to the file.\n   if (  !File::Exists( path ) )\n   {\n      // Create a file to write to.\n      StreamWriter^ sw = File::CreateText( path );\n      try\n      {\n         sw-&gt;WriteLine( &quot;Hello&quot; );\n         sw-&gt;WriteLine( &quot;And&quot; );\n         sw-&gt;WriteLine( &quot;Welcome&quot; );\n      }\n      finally\n      {\n         if ( sw )\n            delete (IDisposable^)sw;\n      }\n   }\n   \n   // This text is always added, making the file longer over time\n   // if it is not deleted.\n   StreamWriter^ sw = File::AppendText( path );\n   try\n   {\n      sw-&gt;WriteLine( &quot;This&quot; );\n      sw-&gt;WriteLine( &quot;is Extra&quot; );\n      sw-&gt;WriteLine( &quot;Text&quot; );\n   }\n   finally\n   {\n      if ( sw )\n         delete (IDisposable^)sw;\n   }\n   \n   // Open the file to read from.\n   StreamReader^ sr = File::OpenText( path );\n   try\n   {\n      String^ s = &quot;&quot;;\n      while ( s = sr-&gt;ReadLine() )\n      {\n         Console::WriteLine( s );\n      }\n   }\n   finally\n   {\n      if ( sr )\n         delete (IDisposable^)sr;\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"File_AppendText#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n        // This text is added only once to the file.\n        if (!File.Exists(path)) \n        {\n            // Create a file to write to.\n            using (StreamWriter sw = File.CreateText(path)) \n            {\n                sw.WriteLine(&quot;Hello&quot;);\n                sw.WriteLine(&quot;And&quot;);\n                sw.WriteLine(&quot;Welcome&quot;);\n            }\t\n        }\n\n        // This text is always added, making the file longer over time\n        // if it is not deleted.\n        using (StreamWriter sw = File.AppendText(path)) \n        {\n            sw.WriteLine(&quot;This&quot;);\n            sw.WriteLine(&quot;is Extra&quot;);\n            sw.WriteLine(&quot;Text&quot;);\n        }\t\n\n        // Open the file to read from.\n        using (StreamReader sr = File.OpenText(path)) \n        {\n            string s = &quot;&quot;;\n            while ((s = sr.ReadLine()) != null) \n            {\n                Console.WriteLine(s);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"File_AppendText#1\">Imports System\nImports System.IO\n\nPublic Class Test\n  Public Shared Sub Main()\n    Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n    &#39; This text is added only once to the file. \n    If Not File.Exists(path) Then\n      &#39; Create a file to write to.\n      Using sw As StreamWriter = File.CreateText(path)\n        sw.WriteLine(&quot;Hello&quot;)\n        sw.WriteLine(&quot;And&quot;)\n        sw.WriteLine(&quot;Welcome&quot;)\n      End Using\n    End If\n\n    &#39; This text is always added, making the file longer over time \n    &#39; if it is not deleted.\n    Using sw As StreamWriter = File.AppendText(path)\n      sw.WriteLine(&quot;This&quot;)\n      sw.WriteLine(&quot;is Extra&quot;)\n      sw.WriteLine(&quot;Text&quot;)\n    End Using\n\n    &#39; Open the file to read from. \n    Using sr As StreamReader = File.OpenText(path)\n      Do While sr.Peek() &gt;= 0\n        Console.WriteLine(sr.ReadLine())\n      Loop\n    End Using\n\n  End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Copy_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (string sourceFileName, string destFileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to copy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the destination file. This cannot be a directory or an existing file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>sourceFileName</code> or <code>destFileName</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.  </p>\n<p> -or-  </p>\n<p> <code>sourceFileName</code> or <code>destFileName</code> specifies a directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sourceFileName</code> or <code>destFileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path specified in <code>sourceFileName</code> or <code>destFileName</code> is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>sourceFileName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>destFileName</code> exists.  </p>\n<p> -or-  </p>\n<p> An I/O error has occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>sourceFileName</code> or <code>destFileName</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is equivalent to the <a class=\"xref\" href=\"system.io.file#System_IO_File_Copy_System_String_System_String_System_Boolean_\" data-linktype=\"relative-path\">Copy(String,String,Boolean)</a> method overload with the <code>overwrite</code> parameter set to <code>false</code>.  </p>\n<p> The <code>sourceFileName</code> and <code>destFileName</code> parameters can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> method. This method does not support wildcard characters in the parameters.  </p>\n<p> The attributes of the original file are retained in the copied file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies files to the C:\\archives\\2008 backup folder. It uses the two overloads of the <a class=\"xref\" href=\"system.io.file#System_IO_File_Copy_\" data-linktype=\"relative-path\">Copy</a> method as follows:  </p>\n<ul>\n<li><p>It first uses the Copymethod overload to copy text (.txt) files. The code demonstrates that this overload does not allow overwriting files that were already copied.  </p>\n</li>\n<li><p>It then uses the <a class=\"xref\" href=\"system.io.file#System_IO_File_Copy_System_String_System_String_System_Boolean_\" data-linktype=\"relative-path\">System.IO.File.Copy(String,String,Boolean)</a> method overload to copy pictures (.jpg files). The code demonstrates that this overload does allow overwriting files that were already copied.  </p>\n<pre><code class=\"lang-cs\" name=\"FileCopyDelete#1\">string sourceDir = @&quot;c:\\current&quot;;\nstring backupDir = @&quot;c:\\archives\\2008&quot;;\n\ntry\n{\n    string[] picList = Directory.GetFiles(sourceDir, &quot;*.jpg&quot;);\n    string[] txtList = Directory.GetFiles(sourceDir, &quot;*.txt&quot;);\n\n    // Copy picture files.\n    foreach (string f in picList)\n    {\n        // Remove path from the file name.\n        string fName = f.Substring(sourceDir.Length + 1);\n\n        // Use the Path.Combine method to safely append the file name to the path.\n        // Will overwrite if the destination file already exists.\n        File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName), true);\n    }\n\n    // Copy text files.\n    foreach (string f in txtList)\n    {\n\n        // Remove path from the file name.\n        string fName = f.Substring(sourceDir.Length + 1);\n\n        try\n        {\n            // Will not overwrite if the destination file already exists.\n            File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName));\n        }\n\n        // Catch exception if the file was already copied.\n        catch (IOException copyError)\n        {\n            Console.WriteLine(copyError.Message);\n        }\n    }\n\n    // Delete source files that were copied.\n    foreach (string f in txtList)\n    {\n        File.Delete(f);\n    }\n    foreach (string f in picList)\n    {\n        File.Delete(f);\n    }\n}\n\ncatch (DirectoryNotFoundException dirNotFound)\n{\n    Console.WriteLine(dirNotFound.Message);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FileCopyDelete#1\">Dim sourceDir As String = &quot;c:\\current&quot;\nDim backupDir As String = &quot;c:\\archives\\2008&quot;\n\nTry\n    Dim picList As String() = Directory.GetFiles(sourceDir, &quot;*.jpg&quot;)\n    Dim txtList As String() = Directory.GetFiles(sourceDir, &quot;*.txt&quot;)\n\n    &#39; Copy picture files.\n    For Each f As String In picList\n        &#39;Remove path from the file name.\n        Dim fName As String = f.Substring(sourceDir.Length + 1)\n\n        &#39; Use the Path.Combine method to safely append the file name to the path.\n        &#39; Will overwrite if the destination file already exists.\n        File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName), True)\n    Next\n\n    &#39; Copy text files.\n    For Each f As String In txtList\n\n        &#39;Remove path from the file name.\n        Dim fName As String = f.Substring(sourceDir.Length + 1)\n\n        Try\n            &#39; Will not overwrite if the destination file already exists.\n            File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName))\n\n            &#39; Catch exception if the file was already copied.\n        Catch copyError As IOException\n            Console.WriteLine(copyError.Message)\n        End Try\n    Next\n\n    For Each f As String In txtList\n        File.Delete(f)\n    Next\n\n    For Each f As String In picList\n        File.Delete(f)\n    Next\n\nCatch dirNotFound As DirectoryNotFoundException\n    Console.WriteLine(dirNotFound.Message)\nEnd Try\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Copy_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_File_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Copies an existing file to a new file. Overwriting a file of the same name is allowed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (string sourceFileName, string destFileName, bool overwrite);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to copy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the destination file. This cannot be a directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>overwrite</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if the destination file can be overwritten; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.  </p>\n<p> -or-  </p>\n<p> <code>destFileName</code> is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>sourceFileName</code> or <code>destFileName</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.  </p>\n<p> -or-  </p>\n<p> <code>sourceFileName</code> or <code>destFileName</code> specifies a directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sourceFileName</code> or <code>destFileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path specified in <code>sourceFileName</code> or <code>destFileName</code> is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>sourceFileName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>destFileName</code> exists and <code>overwrite</code> is <code>false</code>.  </p>\n<p> -or-  </p>\n<p> An I/O error has occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>sourceFileName</code> or <code>destFileName</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>sourceFileName</code> and <code>destFileName</code> parameters can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. This method does not support wildcard characters in the parameters.  </p>\n<p> The attributes of the original file are retained in the copied file.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies files to the C:\\archives\\2008 backup folder. It uses the two overloads of the <a class=\"xref\" href=\"system.io.file#System_IO_File_Copy_\" data-linktype=\"relative-path\">Copy</a> method as follows:  </p>\n<ul>\n<li><p>It first uses the <a class=\"xref\" href=\"system.io.file#System_IO_File_Copy_System_String_System_String_\" data-linktype=\"relative-path\">System.IO.File.Copy(String,String)</a> method overload to copy text (.txt) files. The code demonstrates that this overload does not allow overwriting files that were already copied.  </p>\n<p>It then uses the Copy method overload to copy pictures (.jpg files). The code demonstrates that this overload does allow overwriting files that were already copied.  </p>\n<pre><code class=\"lang-cs\" name=\"FileCopyDelete#1\">string sourceDir = @&quot;c:\\current&quot;;\nstring backupDir = @&quot;c:\\archives\\2008&quot;;\n\ntry\n{\n    string[] picList = Directory.GetFiles(sourceDir, &quot;*.jpg&quot;);\n    string[] txtList = Directory.GetFiles(sourceDir, &quot;*.txt&quot;);\n\n    // Copy picture files.\n    foreach (string f in picList)\n    {\n        // Remove path from the file name.\n        string fName = f.Substring(sourceDir.Length + 1);\n\n        // Use the Path.Combine method to safely append the file name to the path.\n        // Will overwrite if the destination file already exists.\n        File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName), true);\n    }\n\n    // Copy text files.\n    foreach (string f in txtList)\n    {\n\n        // Remove path from the file name.\n        string fName = f.Substring(sourceDir.Length + 1);\n\n        try\n        {\n            // Will not overwrite if the destination file already exists.\n            File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName));\n        }\n\n        // Catch exception if the file was already copied.\n        catch (IOException copyError)\n        {\n            Console.WriteLine(copyError.Message);\n        }\n    }\n\n    // Delete source files that were copied.\n    foreach (string f in txtList)\n    {\n        File.Delete(f);\n    }\n    foreach (string f in picList)\n    {\n        File.Delete(f);\n    }\n}\n\ncatch (DirectoryNotFoundException dirNotFound)\n{\n    Console.WriteLine(dirNotFound.Message);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FileCopyDelete#1\">Dim sourceDir As String = &quot;c:\\current&quot;\nDim backupDir As String = &quot;c:\\archives\\2008&quot;\n\nTry\n    Dim picList As String() = Directory.GetFiles(sourceDir, &quot;*.jpg&quot;)\n    Dim txtList As String() = Directory.GetFiles(sourceDir, &quot;*.txt&quot;)\n\n    &#39; Copy picture files.\n    For Each f As String In picList\n        &#39;Remove path from the file name.\n        Dim fName As String = f.Substring(sourceDir.Length + 1)\n\n        &#39; Use the Path.Combine method to safely append the file name to the path.\n        &#39; Will overwrite if the destination file already exists.\n        File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName), True)\n    Next\n\n    &#39; Copy text files.\n    For Each f As String In txtList\n\n        &#39;Remove path from the file name.\n        Dim fName As String = f.Substring(sourceDir.Length + 1)\n\n        Try\n            &#39; Will not overwrite if the destination file already exists.\n            File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName))\n\n            &#39; Catch exception if the file was already copied.\n        Catch copyError As IOException\n            Console.WriteLine(copyError.Message)\n        End Try\n    Next\n\n    For Each f As String In txtList\n        File.Delete(f)\n    Next\n\n    For Each f As String In picList\n        File.Delete(f)\n    Next\n\nCatch dirNotFound As DirectoryNotFoundException\n    Console.WriteLine(dirNotFound.Message)\nEnd Try\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Create_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates or overwrites a file in the specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.FileStream Create (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path and name of the file to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> that provides read/write access to the file specified in <code>path</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a file that is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while creating the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object created by this method has a default <a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a> value of <a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a>; no other process or code can access the created file until the original file handle is closed.  </p>\n<p> This method is equivalent to the <a class=\"xref\" href=\"system.io.file#System_IO_File_Create_System_String_System_Int32_\" data-linktype=\"relative-path\">Create(String,Int32)</a> method overload using the default buffer size.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> If the specified file does not exist, it is created; if it does exist and it is not read-only, the contents are overwritten.  </p>\n<p> By default, full read/write access to new files is granted to all users. The file is opened with read/write access and must be closed before it can be opened by another application.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a file in the specified path, writes some information to the file, and reads from the file.  </p>\n<pre><code class=\"lang-cs\" name=\"File Create1#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test\n{\n    public static void Main()\n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        try\n        {\n\n            // Delete the file if it exists.\n            if (File.Exists(path))\n            {\n                // Note that no lock is put on the\n                // file and the possibility exists\n                // that another process could do\n                // something with it between\n                // the calls to Exists and Delete.\n                File.Delete(path);\n            }\n\n            // Create the file.\n            using (FileStream fs = File.Create(path))\n            {\n                Byte[] info = new UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;);\n                // Add some information to the file.\n                fs.Write(info, 0, info.Length);\n            }\n\n            // Open the stream and read it back.\n            using (StreamReader sr = File.OpenText(path))\n            {\n                string s = &quot;&quot;;\n                while ((s = sr.ReadLine()) != null)\n                {\n                    Console.WriteLine(s);\n                }\n            }\n        }\n\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"File Create1#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nint main()\n{\n   String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n   \n   // Delete the file if it exists.\n   if ( File::Exists( path ) )\n   {\n      File::Delete( path );\n   }\n\n   // Create the file.\n   FileStream^ fs = File::Create( path );\n   try\n   {\n      array&lt;Byte&gt;^info = (gcnew UTF8Encoding( true ))-&gt;GetBytes( &quot;This is some text in the file.&quot; );\n      \n      // Add some information to the file.\n      fs-&gt;Write( info, 0, info-&gt;Length );\n   }\n   finally\n   {\n      if ( fs )\n            delete (IDisposable^)fs;\n   }\n\n   // Open the stream and read it back.\n   StreamReader^ sr = File::OpenText( path );\n   try\n   {\n      String^ s = &quot;&quot;;\n      while ( s = sr-&gt;ReadLine() )\n      {\n         Console::WriteLine( s );\n      }\n   }\n   finally\n   {\n      if ( sr )\n            delete (IDisposable^)sr;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"File Create1#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n  Public Shared Sub Main()\n    Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n    Try\n\n      &#39; Delete the file if it exists. \n      If File.Exists(path) Then\n        &#39; Note that no lock is put on the file and the possibility exists \n        &#39; that another process could do something with it between \n        &#39; the calls to Exists and Delete.\n        File.Delete(path)\n      End If\n\n      &#39; Create the file. \n      Using fs As FileStream = File.Create(path)\n        Dim info As Byte() = New UTF8Encoding(True).GetBytes(&quot;This is some text in the file.&quot;)\n\n        &#39; Add some information to the file.\n        fs.Write(info, 0, info.Length)\n      End Using\n\n      &#39; Open the stream and read it back. \n      Using sr As StreamReader = File.OpenText(path)\n        Do While sr.Peek() &gt;= 0\n          Console.WriteLine(sr.ReadLine())\n        Loop\n      End Using\n\n    Catch ex As Exception\n      Console.WriteLine(ex.ToString())\n    End Try\n\n  End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Create_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_File_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Creates or overwrites the specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.FileStream Create (string path, int bufferSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bufferSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes buffered for reads and writes to the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> with the specified buffer size that provides read/write access to the file specified in <code>path</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a file that is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while creating the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object created by this method has a default <a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a> value of <a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a>; no other process or code can access the created file until the original file handle is closed.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> This method is equivalent to the <a class=\"xref\" href=\"system.io.filestream#System_IO_FileStream__ctor_System_String_System_IO_FileMode_System_IO_FileAccess_System_IO_FileShare_System_Int32_\" data-linktype=\"relative-path\">FileStream(String,FileMode,FileAccess,FileShare,Int32)</a> constructor overload. If the specified file does not exist, it is created; if it does exist and it is not read-only, the contents are overwritten.  </p>\n<p> By default, full read/write access to new files is granted to all users. The file is opened with read/write access and must be closed before it can be opened by another application.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a file with the specified buffer size.  </p>\n<pre><code class=\"lang-cs\" name=\"File Create2#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // Delete the file if it exists.\n        if (File.Exists(path)) \n        {\n            File.Delete(path);\n        }\n\n        // Create the file.\n        using (FileStream fs = File.Create(path, 1024)) \n        {\n            Byte[] info = new UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;);\n            // Add some information to the file.\n            fs.Write(info, 0, info.Length);\n        }\n\n        // Open the stream and read it back.\n        using (StreamReader sr = File.OpenText(path)) \n        {\n            string s = &quot;&quot;;\n            while ((s = sr.ReadLine()) != null) \n            {\n                Console.WriteLine(s);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"File Create2#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n  Public Shared Sub Main()\n    Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n    Try\n\n      &#39; Delete the file if it exists. \n      If File.Exists(path) Then\n        &#39; Note that no lock is put on the file and the possibility exists \n        &#39; that another process could do something with it between \n        &#39; the calls to Exists and Delete.\n        File.Delete(path)\n      End If\n\n      &#39; Create the file. \n      Using fs As FileStream = File.Create(path, 1024)\n        Dim info As Byte() = New UTF8Encoding(True).GetBytes(&quot;This is some text in the file.&quot;)\n\n        &#39; Add some information to the file.\n        fs.Write(info, 0, info.Length)\n      End Using\n\n      &#39; Open the stream and read it back. \n      Using sr As StreamReader = File.OpenText(path)\n        Do While sr.Peek() &gt;= 0\n          Console.WriteLine(sr.ReadLine())\n        Loop\n      End Using\n\n    Catch ex As Exception\n      Console.WriteLine(ex.ToString())\n    End Try\n\n  End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"File Create2#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nint main()\n{\n   String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n   \n   // Delete the file if it exists.\n   if ( File::Exists( path ) )\n   {\n      File::Delete( path );\n   }\n   \n   // Create the file.\n   FileStream^ fs = File::Create( path, 1024 );\n   try\n   {\n      array&lt;Byte&gt;^info = (gcnew UTF8Encoding( true ))-&gt;GetBytes( &quot;This is some text in the file.&quot; );\n      \n      // Add some information to the file.\n      fs-&gt;Write( info, 0, info-&gt;Length );\n   }\n   finally\n   {\n      if ( fs )\n            delete (IDisposable^)fs;\n   }\n\n   // Open the stream and read it back.\n   StreamReader^ sr = File::OpenText( path );\n   try\n   {\n      String^ s = &quot;&quot;;\n      while ( s = sr-&gt;ReadLine() )\n      {\n         Console::WriteLine( s );\n      }\n   }\n   finally\n   {\n      if ( sr )\n            delete (IDisposable^)sr;\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Create_System_String_System_Int32_System_IO_FileOptions_\">\r\n    \r\n            <a id=\"System_IO_File_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String,Int32,FileOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates or overwrites the specified file, specifying a buffer size and a <a class=\"xref\" href=\"system.io.fileoptions\" data-linktype=\"relative-path\">FileOptions</a> value that describes how to create or overwrite the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.FileStream Create (string path, int bufferSize, System.IO.FileOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bufferSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes buffered for reads and writes to the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileoptions\" data-linktype=\"relative-path\">FileOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.io.fileoptions\" data-linktype=\"relative-path\">FileOptions</a> values that describes how to create or overwrite the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A new file with the specified buffer size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a file that is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while creating the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> This method is equivalent to the <a class=\"xref\" href=\"system.io.filestream#System_IO_FileStream__ctor_System_String_System_IO_FileMode_System_IO_FileAccess_System_IO_FileShare_System_Int32_\" data-linktype=\"relative-path\">FileStream(String,FileMode,FileAccess,FileShare,Int32)</a> constructor overload. If the specified file does not exist, it is created; if it does exist and it is not read-only, the contents are overwritten.  </p>\n<p> By default, full read/write access to new files is granted to all users. The file is opened with read/write access and must be closed before it can be opened by another application.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Create_System_String_System_Int32_System_IO_FileOptions_System_Security_AccessControl_FileSecurity_\">\r\n    \r\n            <a id=\"System_IO_File_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String,Int32,FileOptions,FileSecurity)</div>        \r\n          </div>\r\n    \r\n            <p>Creates or overwrites the specified file with the specified buffer size, file options, and file security.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.FileStream Create (string path, int bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bufferSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes buffered for reads and writes to the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileoptions\" data-linktype=\"relative-path\">FileOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.io.fileoptions\" data-linktype=\"relative-path\">FileOptions</a> values that describes how to create or overwrite the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileSecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> values that determines the access control and audit security for the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A new file with the specified buffer size, file options, and file security.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a file that is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while creating the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> This method is equivalent to the <a class=\"xref\" href=\"system.io.filestream#System_IO_FileStream__ctor_System_String_System_IO_FileMode_System_IO_FileAccess_System_IO_FileShare_System_Int32_\" data-linktype=\"relative-path\">FileStream(String,FileMode,FileAccess,FileShare,Int32)</a> constructor overload. If the specified file does not exist, it is created; if it does exist and it is not read-only, the contents are overwritten.  </p>\n<p> By default, full read/write access to new files is granted to all users. The file is opened with read/write access and must be closed before it can be opened by another application.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_CreateText_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_CreateText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateText(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates or opens a file for writing UTF-8 encoded text.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.StreamWriter CreateText (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to be opened for writing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> that writes to the specified file using UTF-8 encoding.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is equivalent to the <a class=\"xref\" href=\"system.io.streamwriter#System_IO_StreamWriter__ctor_System_String_System_Boolean_\" data-linktype=\"relative-path\">StreamWriter(String,Boolean)</a> constructor overload with the <code>append</code> parameter set to <code>false</code>. If the file specified by <code>path</code> does not exist, it is created. If the file does exist, its contents are overwritten. Additional threads are permitted to read the file while it is open.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a file for text writing and reading.  </p>\n<pre><code class=\"lang-cs\" name=\"File CreateText#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n        if (!File.Exists(path)) \n        {\n            // Create a file to write to.\n            using (StreamWriter sw = File.CreateText(path)) \n            {\n                sw.WriteLine(&quot;Hello&quot;);\n                sw.WriteLine(&quot;And&quot;);\n                sw.WriteLine(&quot;Welcome&quot;);\n            }\t\n        }\n\n        // Open the file to read from.\n        using (StreamReader sr = File.OpenText(path)) \n        {\n            string s = &quot;&quot;;\n            while ((s = sr.ReadLine()) != null) \n            {\n                Console.WriteLine(s);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"File CreateText#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n  Public Shared Sub Main()\n    Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n    If Not File.Exists(path) Then\n      &#39; Create a file to write to. \n      Using sw As StreamWriter = File.CreateText(path)\n        sw.WriteLine(&quot;Hello&quot;)\n        sw.WriteLine(&quot;And&quot;)\n        sw.WriteLine(&quot;Welcome&quot;)\n      End Using\n    End If\n\n    &#39; Open the file to read from. \n    Using sr As StreamReader = File.OpenText(path)\n      Do While sr.Peek() &gt;= 0\n        Console.WriteLine(sr.ReadLine())\n      Loop\n    End Using\n\n  End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"File CreateText#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n   if ( !File::Exists( path ) )\n   {\n      \n      // Create a file to write to.\n      StreamWriter^ sw = File::CreateText( path );\n      try\n      {\n         sw-&gt;WriteLine( &quot;Hello&quot; );\n         sw-&gt;WriteLine( &quot;And&quot; );\n         sw-&gt;WriteLine( &quot;Welcome&quot; );\n      }\n      finally\n      {\n         if ( sw )\n                  delete (IDisposable^)sw;\n      }\n   }\n   \n   // Open the file to read from.\n   StreamReader^ sr = File::OpenText( path );\n   try\n   {\n      String^ s = &quot;&quot;;\n      while ( s = sr-&gt;ReadLine() )\n      {\n         Console::WriteLine( s );\n      }\n   }\n   finally\n   {\n      if ( sr )\n            delete (IDisposable^)sr;\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Decrypt_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_Decrypt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decrypt(String)</div>        \r\n          </div>\r\n    \r\n            <p>Decrypts a file that was encrypted by the current account using the <span class=\"xref\">stem.IO.File.Encrypt*</span> method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Decrypt (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A path that describes a file to decrypt.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.drivenotfoundexception\" data-linktype=\"relative-path\">DriveNotFoundException</a></div>\r\n                  </div>\r\n                  <p>An invalid drive was specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file described by the <code>path</code> parameter could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file. For example, the encrypted file is already open.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Windows NT or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The file system is not NTFS.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The <code>path</code> parameter specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Decrypt method allows you to decrypt a file that was encrypted using the <a class=\"xref\" href=\"system.io.file#System_IO_File_Encrypt_\" data-linktype=\"relative-path\">Encrypt</a> method.  The Decrypt method can decrypt only files that were encrypted using the current user account.  </p>\n<p> The Decrypt method requires exclusive access to the file being decrypted, and will raise an exception if another process is using the file. If the file is not encrypted, Decrypt will return a nonzero value, which indicates success.  </p>\n<p> Both the <a class=\"xref\" href=\"system.io.file#System_IO_File_Encrypt_\" data-linktype=\"relative-path\">Encrypt</a> method and the Decrypt method use the cryptographic service provider (CSP) installed on the computer and the file encryption keys of the process calling the method.  </p>\n<p> The current file system must be formatted as NTFS and the current operating system must be Windows NT or later.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.io.file#System_IO_File_Encrypt_\" data-linktype=\"relative-path\">Encrypt</a> method and the Decrypt method to encrypt and then decrypt a file. The file must exist for the example to work.  </p>\n<pre><code class=\"lang-cs\" name=\"IO.File.Encrypt-Decrypt#1\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string FileName = &quot;test.xml&quot;;\n\n                Console.WriteLine(&quot;Encrypt &quot; + FileName);\n\n                // Encrypt the file.\n                AddEncryption(FileName);\n\n                Console.WriteLine(&quot;Decrypt &quot; + FileName);\n\n                // Decrypt the file.\n                RemoveEncryption(FileName);\n\n                Console.WriteLine(&quot;Done&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n\n            Console.ReadLine();\n        }\n\n\n        // Encrypt a file.\n        public static void AddEncryption(string FileName)\n        {\n\n            File.Encrypt(FileName);\n\n        }\n\n        // Decrypt a file.\n        public static void RemoveEncryption(string FileName)\n        {\n            File.Decrypt(FileName);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"IO.File.Encrypt-Decrypt#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n    String^ fileName = &quot;test.xml&quot;;\n    if (!File::Exists(fileName))\n    {\n        Console::WriteLine(&quot;The file &quot; + fileName\n            + &quot; does not exist.&quot;);\n        return 0;\n    }\n    try\n    {\n        Console::WriteLine(&quot;Encrypt &quot; + fileName);\n\n        // Encrypt the file.\n        File::Encrypt(fileName);\n\n        Console::WriteLine(&quot;Decrypt &quot; + fileName);\n\n        // Decrypt the file.\n        File::Decrypt(fileName);\n\n        Console::WriteLine(&quot;Done&quot;);\n    }\n    catch (IOException^ ex)\n    {\n        Console::WriteLine(&quot;There was an IO problem.&quot;);\n        Console::WriteLine(ex-&gt;Message);\n    }\n    catch (PlatformNotSupportedException^)\n    {\n        Console::WriteLine(&quot;Encryption is not supported on &quot; +\n            &quot;this system.&quot;);\n    }\n    catch (NotSupportedException^)\n    {\n        Console::WriteLine(&quot;Encryption is not supported on &quot; +\n            &quot;this system.&quot;);\n    }\n    catch (UnauthorizedAccessException^)\n    {\n        Console::WriteLine(&quot;The operation could not be &quot;\n            + &quot;carried out.&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.File.Encrypt-Decrypt#1\">Imports System\nImports System.IO\nImports System.Security.AccessControl\n\n\n\nModule FileExample\n\n    Sub Main()\n        Try\n            Dim FileName As String = &quot;test.xml&quot;\n\n            Console.WriteLine(&quot;Encrypt &quot; + FileName)\n\n            &#39; Encrypt the file.\n            AddEncryption(FileName)\n\n            Console.WriteLine(&quot;Decrypt &quot; + FileName)\n\n            &#39; Decrypt the file.\n            RemoveEncryption(FileName)\n\n            Console.WriteLine(&quot;Done&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\n\n\n    &#39; Encrypt a file.\n    Sub AddEncryption(ByVal FileName As String)\n\n        File.Encrypt(FileName)\n\n    End Sub\n\n\n    &#39; Decrypt the file.\n    Sub RemoveEncryption(ByVal FileName As String)\n\n        File.Decrypt(FileName)\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Delete_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_Delete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delete(String)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes the specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Delete (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file to be deleted. Wildcard characters are not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The specified file is in use.  </p>\n<p> -or-  </p>\n<p> There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see <a href=\"../Topic/How%20to:%20Enumerate%20Directories%20and%20Files.md\" data-linktype=\"relative-path\">How to: Enumerate Directories and Files</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.  </p>\n<p> -or-  </p>\n<p> The file is an executable file that is in use.  </p>\n<p> -or-  </p>\n<p> <code>path</code> is a directory.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a read-only file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Specify a file name with any relative or absolute path information for the <code>path</code> parameter. Wildcard characters cannot be included. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> If the file to be deleted does not exist, no exception is thrown.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example copies groups of files to the C:\\archives\\2008 backup folder and then deletes them from the source folder.  </p>\n<pre><code class=\"lang-cs\" name=\"FileCopyDelete#1\">string sourceDir = @&quot;c:\\current&quot;;\nstring backupDir = @&quot;c:\\archives\\2008&quot;;\n\ntry\n{\n    string[] picList = Directory.GetFiles(sourceDir, &quot;*.jpg&quot;);\n    string[] txtList = Directory.GetFiles(sourceDir, &quot;*.txt&quot;);\n\n    // Copy picture files.\n    foreach (string f in picList)\n    {\n        // Remove path from the file name.\n        string fName = f.Substring(sourceDir.Length + 1);\n\n        // Use the Path.Combine method to safely append the file name to the path.\n        // Will overwrite if the destination file already exists.\n        File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName), true);\n    }\n\n    // Copy text files.\n    foreach (string f in txtList)\n    {\n\n        // Remove path from the file name.\n        string fName = f.Substring(sourceDir.Length + 1);\n\n        try\n        {\n            // Will not overwrite if the destination file already exists.\n            File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName));\n        }\n\n        // Catch exception if the file was already copied.\n        catch (IOException copyError)\n        {\n            Console.WriteLine(copyError.Message);\n        }\n    }\n\n    // Delete source files that were copied.\n    foreach (string f in txtList)\n    {\n        File.Delete(f);\n    }\n    foreach (string f in picList)\n    {\n        File.Delete(f);\n    }\n}\n\ncatch (DirectoryNotFoundException dirNotFound)\n{\n    Console.WriteLine(dirNotFound.Message);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FileCopyDelete#1\">Dim sourceDir As String = &quot;c:\\current&quot;\nDim backupDir As String = &quot;c:\\archives\\2008&quot;\n\nTry\n    Dim picList As String() = Directory.GetFiles(sourceDir, &quot;*.jpg&quot;)\n    Dim txtList As String() = Directory.GetFiles(sourceDir, &quot;*.txt&quot;)\n\n    &#39; Copy picture files.\n    For Each f As String In picList\n        &#39;Remove path from the file name.\n        Dim fName As String = f.Substring(sourceDir.Length + 1)\n\n        &#39; Use the Path.Combine method to safely append the file name to the path.\n        &#39; Will overwrite if the destination file already exists.\n        File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName), True)\n    Next\n\n    &#39; Copy text files.\n    For Each f As String In txtList\n\n        &#39;Remove path from the file name.\n        Dim fName As String = f.Substring(sourceDir.Length + 1)\n\n        Try\n            &#39; Will not overwrite if the destination file already exists.\n            File.Copy(Path.Combine(sourceDir, fName), Path.Combine(backupDir, fName))\n\n            &#39; Catch exception if the file was already copied.\n        Catch copyError As IOException\n            Console.WriteLine(copyError.Message)\n        End Try\n    Next\n\n    For Each f As String In txtList\n        File.Delete(f)\n    Next\n\n    For Each f As String In picList\n        File.Delete(f)\n    Next\n\nCatch dirNotFound As DirectoryNotFoundException\n    Console.WriteLine(dirNotFound.Message)\nEnd Try\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Encrypt_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_Encrypt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encrypt(String)</div>        \r\n          </div>\r\n    \r\n            <p>Encrypts a file so that only the account used to encrypt the file can decrypt it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Encrypt (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A path that describes a file to encrypt.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.drivenotfoundexception\" data-linktype=\"relative-path\">DriveNotFoundException</a></div>\r\n                  </div>\r\n                  <p>An invalid drive was specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file described by the <code>path</code> parameter could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Windows NT or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The file system is not NTFS.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The <code>path</code> parameter specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Encrypt method allows you to encrypt a file so that only the account used to call this method can decrypt it. Use the <a class=\"xref\" href=\"system.io.file#System_IO_File_Decrypt_\" data-linktype=\"relative-path\">Decrypt</a> method to decrypt a file encrypted by the Encrypt method.  </p>\n<p> The Encrypt method requires exclusive access to the file being encrypted, and will fail if another process is using the file.  </p>\n<p> Both the Encrypt method and the <a class=\"xref\" href=\"system.io.file#System_IO_File_Decrypt_\" data-linktype=\"relative-path\">Decrypt</a> method use the cryptographic service provider (CSP) installed on the computer and the file encryption keys of the process calling the method.  </p>\n<p> This method is not available on all versions of Windows. For example, it is not available on Home editions.  </p>\n<p> The current file system must be formatted as NTFS.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Encrypt method and the <a class=\"xref\" href=\"system.io.file#System_IO_File_Decrypt_\" data-linktype=\"relative-path\">Decrypt</a> method to encrypt and then decrypt a file. The file must exist for the example to work.  </p>\n<pre><code class=\"lang-cs\" name=\"IO.File.Encrypt-Decrypt#1\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string FileName = &quot;test.xml&quot;;\n\n                Console.WriteLine(&quot;Encrypt &quot; + FileName);\n\n                // Encrypt the file.\n                AddEncryption(FileName);\n\n                Console.WriteLine(&quot;Decrypt &quot; + FileName);\n\n                // Decrypt the file.\n                RemoveEncryption(FileName);\n\n                Console.WriteLine(&quot;Done&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n\n            Console.ReadLine();\n        }\n\n\n        // Encrypt a file.\n        public static void AddEncryption(string FileName)\n        {\n\n            File.Encrypt(FileName);\n\n        }\n\n        // Decrypt a file.\n        public static void RemoveEncryption(string FileName)\n        {\n            File.Decrypt(FileName);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"IO.File.Encrypt-Decrypt#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n    String^ fileName = &quot;test.xml&quot;;\n    if (!File::Exists(fileName))\n    {\n        Console::WriteLine(&quot;The file &quot; + fileName\n            + &quot; does not exist.&quot;);\n        return 0;\n    }\n    try\n    {\n        Console::WriteLine(&quot;Encrypt &quot; + fileName);\n\n        // Encrypt the file.\n        File::Encrypt(fileName);\n\n        Console::WriteLine(&quot;Decrypt &quot; + fileName);\n\n        // Decrypt the file.\n        File::Decrypt(fileName);\n\n        Console::WriteLine(&quot;Done&quot;);\n    }\n    catch (IOException^ ex)\n    {\n        Console::WriteLine(&quot;There was an IO problem.&quot;);\n        Console::WriteLine(ex-&gt;Message);\n    }\n    catch (PlatformNotSupportedException^)\n    {\n        Console::WriteLine(&quot;Encryption is not supported on &quot; +\n            &quot;this system.&quot;);\n    }\n    catch (NotSupportedException^)\n    {\n        Console::WriteLine(&quot;Encryption is not supported on &quot; +\n            &quot;this system.&quot;);\n    }\n    catch (UnauthorizedAccessException^)\n    {\n        Console::WriteLine(&quot;The operation could not be &quot;\n            + &quot;carried out.&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.File.Encrypt-Decrypt#1\">Imports System\nImports System.IO\nImports System.Security.AccessControl\n\n\n\nModule FileExample\n\n    Sub Main()\n        Try\n            Dim FileName As String = &quot;test.xml&quot;\n\n            Console.WriteLine(&quot;Encrypt &quot; + FileName)\n\n            &#39; Encrypt the file.\n            AddEncryption(FileName)\n\n            Console.WriteLine(&quot;Decrypt &quot; + FileName)\n\n            &#39; Decrypt the file.\n            RemoveEncryption(FileName)\n\n            Console.WriteLine(&quot;Done&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\n\n\n    &#39; Encrypt a file.\n    Sub AddEncryption(ByVal FileName As String)\n\n        File.Encrypt(FileName)\n\n    End Sub\n\n\n    &#39; Decrypt the file.\n    Sub RemoveEncryption(ByVal FileName As String)\n\n        File.Decrypt(FileName)\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Exists_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_Exists_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exists(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified file exists.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Exists (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the caller has the required permissions and <code>path</code> contains the name of an existing file; otherwise, <code>false</code>. This method also returns <code>false</code> if <code>path</code> is <code>null</code>, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <code>false</code> regardless of the existence of <code>path</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Exists method should not be used for path validation, this method merely checks if the file specified in <code>path</code> exists. Passing an invalid path to Exists returns <code>false</code>. To check whether the path contains any invalid characters, you can call the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method to retrieve the characters that are invalid for the file system. You can also create a regular expression to test the whether the path is valid for your environment. For examples of acceptable paths, see <a class=\"xref\" href=\"system.io.file\" data-linktype=\"relative-path\">File</a>.  </p>\n<p> To check if a directory exists, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_Exists_\" data-linktype=\"relative-path\">Exists</a>.  </p>\n<p> Be aware that another process can potentially do something with the file in between the time you call the Exists method and perform another operation on the file, such as <a class=\"xref\" href=\"system.io.file#System_IO_File_Delete_\" data-linktype=\"relative-path\">Delete</a>.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> If <code>path</code> describes a directory, this method returns <code>false</code>. Trailing spaces are removed from the <code>path</code> parameter before determining if the file exists.  </p>\n<p> The Exists method returns <code>false</code> if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines if a file exists.  </p>\n<pre><code class=\"lang-vb\" name=\"File Exists#1\">Dim curFile As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;est.txt&quot;\nConsole.WriteLine(If(File.Exists(curFile), &quot;File exists.&quot;, &quot;File does not exist.&quot;))\n</code></pre><pre><code class=\"lang-cs\" name=\"File Exists#1\">string curFile = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;est.txt&quot;;\nConsole.WriteLine(File.Exists(curFile) ? &quot;File exists.&quot; : &quot;File does not exist.&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_GetAccessControl_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_GetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessControl(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that encapsulates the access control list (ACL) entries for a specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.AccessControl.FileSecurity GetAccessControl (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to a file containing a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that describes the file&#39;s access control list (ACL) information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that encapsulates the access control rules for the file described by the <code>path</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.sehexception\" data-linktype=\"relative-path\">SEHException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>The file could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The <code>path</code> parameter specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the GetAccessControl method to retrieve the access control list (ACL) entries for a file.  </p>\n<p> An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see <a href=\"../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md\" data-linktype=\"relative-path\">How to: Add or Remove Access Control List Entries</a>.  </p>\n<p> In NTFS environments, <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> are granted to the user if the user has <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> rights on the parent folder. To deny <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a>, deny <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> on the parent directory.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.io.file#System_IO_File_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> and the <a class=\"xref\" href=\"system.io.file#System_IO_File_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> methods to add and then remove an access control list (ACL) entry from a file.  You must supply a valid user or group account to run this example.  </p>\n<pre><code class=\"lang-cs\" name=\"IO.File.GetAccessControl-SetAccessControl#1\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string fileName = &quot;test.xml&quot;;\n\n                Console.WriteLine(&quot;Adding access control entry for &quot;\n                    + fileName);\n\n                // Add the access control entry to the file.\n                AddFileSecurity(fileName, @&quot;DomainName\\AccountName&quot;,\n                    FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Removing access control entry from &quot;\n                    + fileName);\n\n                // Remove the access control entry from the file.\n                RemoveFileSecurity(fileName, @&quot;DomainName\\AccountName&quot;,\n                    FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Done.&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n        }\n\n        // Adds an ACL entry on the specified file for the specified account.\n        public static void AddFileSecurity(string fileName, string account,\n            FileSystemRights rights, AccessControlType controlType)\n        {\n\n\n            // Get a FileSecurity object that represents the\n            // current security settings.\n            FileSecurity fSecurity = File.GetAccessControl(fileName);\n\n            // Add the FileSystemAccessRule to the security settings.\n            fSecurity.AddAccessRule(new FileSystemAccessRule(account,\n                rights, controlType));\n\n            // Set the new access settings.\n            File.SetAccessControl(fileName, fSecurity);\n\n        }\n\n        // Removes an ACL entry on the specified file for the specified account.\n        public static void RemoveFileSecurity(string fileName, string account,\n            FileSystemRights rights, AccessControlType controlType)\n        {\n\n            // Get a FileSecurity object that represents the\n            // current security settings.\n            FileSecurity fSecurity = File.GetAccessControl(fileName);\n\n            // Remove the FileSystemAccessRule from the security settings.\n            fSecurity.RemoveAccessRule(new FileSystemAccessRule(account,\n                rights, controlType));\n\n            // Set the new access settings.\n            File.SetAccessControl(fileName, fSecurity);\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.File.GetAccessControl-SetAccessControl#1\">Imports System\nImports System.IO\nImports System.Security.AccessControl\n\n\n\nModule FileExample\n\n    Sub Main()\n        Try\n            Dim fileName As String = &quot;test.xml&quot;\n\n            Console.WriteLine(&quot;Adding access control entry for &quot; &amp; fileName)\n\n            &#39; Add the access control entry to the file.\n            AddFileSecurity(fileName, &quot;DomainName\\AccountName&quot;, _\n                FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Removing access control entry from &quot; &amp; fileName)\n\n            &#39; Remove the access control entry from the file.\n            RemoveFileSecurity(fileName, &quot;DomainName\\AccountName&quot;, _\n                FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Done.&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n    End Sub\n\n\n    &#39; Adds an ACL entry on the specified file for the specified account.\n    Sub AddFileSecurity(ByVal fileName As String, ByVal account As String, _\n        ByVal rights As FileSystemRights, ByVal controlType As AccessControlType)\n  \n        &#39; Get a FileSecurity object that represents the \n        &#39; current security settings.\n        Dim fSecurity As FileSecurity = File.GetAccessControl(fileName)\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        Dim accessRule As FileSystemAccessRule = _\n            New FileSystemAccessRule(account, rights, controlType)\n\n        fSecurity.AddAccessRule(accessRule)\n\n        &#39; Set the new access settings.\n        File.SetAccessControl(fileName, fSecurity)\n\n    End Sub\n\n\n    &#39; Removes an ACL entry on the specified file for the specified account.\n    Sub RemoveFileSecurity(ByVal fileName As String, ByVal account As String, _\n        ByVal rights As FileSystemRights, ByVal controlType As AccessControlType)\n\n        &#39; Get a FileSecurity object that represents the \n        &#39; current security settings.\n        Dim fSecurity As FileSecurity = File.GetAccessControl(fileName)\n\n        &#39; Remove the FileSystemAccessRule from the security settings. \n        fSecurity.RemoveAccessRule(New FileSystemAccessRule(account, _\n            rights, controlType))\n\n        &#39; Set the new access settings.\n        File.SetAccessControl(fileName, fSecurity)\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"IO.File.GetAccessControl-SetAccessControl#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Security::AccessControl;\n\n// Adds an ACL entry on the specified file for the specified account.\n\nvoid AddFileSecurity(String^ fileName, String^ account, \n                        FileSystemRights rights, AccessControlType controlType)\n{\n    // Get a FileSecurity object that represents the \n    // current security settings.\n    FileSecurity^ fSecurity = File::GetAccessControl(fileName);\n\n    // Add the FileSystemAccessRule to the security settings. \n    fSecurity-&gt;AddAccessRule(gcnew FileSystemAccessRule\n                                   (account,rights, controlType));\n\n    // Set the new access settings.\n    File::SetAccessControl(fileName, fSecurity);\n}\n\n// Removes an ACL entry on the specified file for the specified account.\n\nvoid RemoveFileSecurity(String^ fileName, String^ account, \n                        FileSystemRights rights, AccessControlType controlType)\n{\n\n    // Get a FileSecurity object that represents the \n    // current security settings.\n    FileSecurity^ fSecurity = File::GetAccessControl(fileName);\n\n    // Remove the FileSystemAccessRule from the security settings. \n    fSecurity-&gt;RemoveAccessRule(gcnew FileSystemAccessRule\n                                      (account,rights, controlType));\n\n    // Set the new access settings.\n    File::SetAccessControl(fileName, fSecurity);\n}\n\nint main()\n{\n    try\n    {\n        String^ fileName = &quot;test.xml&quot;;\n\n        Console::WriteLine(&quot;Adding access control entry for &quot; + fileName);\n\n        // Add the access control entry to the file.\n        AddFileSecurity(fileName, &quot;MYDOMAIN\\\\MyAccount&quot;, \n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Removing access control entry from &quot; + fileName);\n\n        // Remove the access control entry from the file.\n        RemoveFileSecurity(fileName, &quot;MYDOMAIN\\\\MyAccount&quot;, \n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Done.&quot;);\n    }\n    catch (Exception^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_GetAccessControl_System_String_System_Security_AccessControl_AccessControlSections_\">\r\n    \r\n            <a id=\"System_IO_File_GetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessControl(String,AccessControlSections)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that encapsulates the specified type of access control list (ACL) entries for a particular file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.AccessControl.FileSecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to a file containing a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that describes the file&#39;s access control list (ACL) information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>includeSections</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">AccessControlSections</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">AccessControlSections</a> values that specifies the type of access control list (ACL) information to receive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that encapsulates the access control rules for the file described by the <code>path</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.sehexception\" data-linktype=\"relative-path\">SEHException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>The file could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The <code>path</code> parameter specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the GetAccessControl method to retrieve the access control list (ACL) entries for a file.  </p>\n<p> An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see <a href=\"../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md\" data-linktype=\"relative-path\">How to: Add or Remove Access Control List Entries</a>.  </p>\n<p> In NTFS environments, <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> are granted to the user if the user has <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> rights on the parent folder. To deny <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a>, deny <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> on the parent directory.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_GetAttributes_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_GetAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAttributes(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a> of the file on the path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.FileAttributes GetAttributes (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a> of the file on the path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is empty, contains only white spaces, or contains invalid characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> represents a directory and is invalid, such as being on an unmapped drive, or the directory cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>This file is being used by another process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <code>GetAttributes</code> and <code>SetAttributes</code> methods by applying the <code>Archive</code> and <code>Hidden</code> attributes to a file.  </p>\n<pre><code class=\"lang-cs\" name=\"File GetAttributes#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // Create the file if it does not exist.\n        if (!File.Exists(path)) \n        {\n            File.Create(path);\n        }\n\n        FileAttributes attributes = File.GetAttributes(path);\n\n        if ((attributes &amp; FileAttributes.Hidden) == FileAttributes.Hidden)\n        {\n            // Show the file.\n            attributes = RemoveAttribute(attributes, FileAttributes.Hidden);\n            File.SetAttributes(path, attributes);\n            Console.WriteLine(&quot;The {0} file is no longer hidden.&quot;, path);\n        } \n        else \n        {\n            // Hide the file.\n            File.SetAttributes(path, File.GetAttributes(path) | FileAttributes.Hidden);\n            Console.WriteLine(&quot;The {0} file is now hidden.&quot;, path);\n        }\n    }\n\n    private static FileAttributes RemoveAttribute(FileAttributes attributes, FileAttributes attributesToRemove)\n    {\n        return attributes &amp; ~attributesToRemove;\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"File GetAttributes#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nint main()\n{\n   String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n   \n   // Create the file if it does not exist.\n   if (  !File::Exists( path ) )\n   {\n      File::Create( path );\n   }\n\n   if ( (File::GetAttributes( path ) &amp; FileAttributes::Hidden) == FileAttributes::Hidden )\n   {\n      \n      // Show the file.\n      File::SetAttributes(path, File::GetAttributes( path ) &amp; ~FileAttributes::Hidden);\n      Console::WriteLine( &quot;The {0} file is no longer hidden.&quot;, path );\n   }\n   else\n   {\n      \n      // Hide the file.\n      File::SetAttributes( path, static_cast&lt;FileAttributes&gt;(File::GetAttributes( path ) | FileAttributes::Hidden) );\n      Console::WriteLine( &quot;The {0} file is now hidden.&quot;, path );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"File GetAttributes#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n        &#39; Create the file if it does not exist.\n        If File.Exists(path) = False Then\n            File.Create(path)\n        End If\n\n        Dim attributes As FileAttributes\n        attributes = File.GetAttributes(path)\n\n        If (attributes And FileAttributes.Hidden) = FileAttributes.Hidden Then\n            &#39; Show the file.\n            attributes = RemoveAttribute(attributes, FileAttributes.Hidden)\n            File.SetAttributes(path, attributes)\n            Console.WriteLine(&quot;The {0} file is no longer hidden.&quot;, path)\n        Else\n            &#39; Hide the file.\n            File.SetAttributes(path, File.GetAttributes(path) Or FileAttributes.Hidden)\n            Console.WriteLine(&quot;The {0} file is now hidden.&quot;, path)\n        End If\n    End Sub\n\n    Public Shared Function RemoveAttribute(ByVal attributes As FileAttributes, ByVal attributesToRemove As FileAttributes) As FileAttributes\n        Return attributes And (Not attributesToRemove)\n    End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_GetCreationTime_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_GetCreationTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCreationTime(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the creation date and time of the specified file or directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime GetCreationTime (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to obtain creation date and time information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  </p>\n</div>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> If the file described in the <code>path</code> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.  </p>\n<p> NTFS-formatted drives may cache information about a file, such as file creation time, for a short period of time. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates <code>GetCreationTime</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.File.GetCreationTime#1\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim fileCreatedDate As DateTime = File.GetCreationTime(&quot;C:\\Example\\MyTest.txt&quot;)\n        Console.WriteLine(&quot;file created: &quot; + fileCreatedDate)\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_GetCreationTimeUtc_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_GetCreationTimeUtc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCreationTimeUtc(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime GetCreationTimeUtc (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to obtain creation date and time information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  </p>\n</div>\n<p> If the file described in the <code>path</code> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).  </p>\n<p> NTFS-formatted drives may cache information about a file, such as file creation time, for a short period of time. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the GetCreationTimeUtc method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.File.GetCreationTime#2\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim fileCreatedDate As DateTime = File.GetCreationTimeUtc(&quot;C:\\Example\\MyTest.txt&quot;)\n        Console.WriteLine(&quot;file created: &quot; + fileCreatedDate)\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_GetLastAccessTime_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_GetLastAccessTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLastAccessTime(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the date and time the specified file or directory was last accessed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime GetLastAccessTime (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to obtain access date and time information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  </p>\n</div>\n<p> If the file described in the <code>path</code> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates <code>GetLastAccessTime</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"File GetLastAccess#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n            If File.Exists(path) = False Then\n                File.Create(path)\n            End If\n            File.SetLastAccessTime(path, New DateTime(1985, 5, 4))\n\n            &#39; Get the creation time of a well-known directory.\n            Dim dt As DateTime = File.GetLastAccessTime(path)\n\n            Console.WriteLine(&quot;The last access time for this file was {0}.&quot;, dt)\n\n            &#39; Update the last access time.\n            File.SetLastAccessTime(path, DateTime.Now)\n            dt = File.GetLastAccessTime(path)\n            Console.WriteLine(&quot;The last access time for this file was {0}.&quot;, dt)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"File GetLastAccess#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n            if (!File.Exists(path)) \n            {\n                File.Create(path);\n            }\n            File.SetLastAccessTime(path, new DateTime(1985,5,4));\n\n            // Get the creation time of a well-known directory.\n            DateTime dt = File.GetLastAccessTime(path);\n            Console.WriteLine(&quot;The last access time for this file was {0}.&quot;, dt);\n\t\t\t\n            // Update the last access time.\n            File.SetLastAccessTime(path, DateTime.Now);\n            dt = File.GetLastAccessTime(path);\n            Console.WriteLine(&quot;The last access time for this file was {0}.&quot;, dt);\n        } \n\n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"File GetLastAccess#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n      if (  !File::Exists( path ) )\n      {\n         File::Create( path );\n      }\n      File::SetLastAccessTime( path, DateTime(1985,5,4) );\n      \n      // Get the creation time of a well-known directory.\n      DateTime dt = File::GetLastAccessTime( path );\n      Console::WriteLine( &quot;The last access time for this file was {0}.&quot;, dt );\n      \n      // Update the last access time.\n      File::SetLastAccessTime( path, DateTime::Now );\n      dt = File::GetLastAccessTime( path );\n      Console::WriteLine( &quot;The last access time for this file was {0}.&quot;, dt );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_GetLastAccessTimeUtc_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_GetLastAccessTimeUtc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLastAccessTimeUtc(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime GetLastAccessTimeUtc (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to obtain access date and time information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  </p>\n</div>\n<p> If the file described in the <code>path</code> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_GetLastWriteTime_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_GetLastWriteTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLastWriteTime(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the date and time the specified file or directory was last written to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime GetLastWriteTime (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to obtain write date and time information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system. Each operating system manages the last write time according to its own rules. To improve performance, an operating system might not set the last write time value to the exact time of the last write operation, but might set it to a close approximation instead.  </p>\n</div>\n<p> If the file described in the <code>path</code> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates <code>GetLastWriteTime</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"File GetLastWrite#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n      if (  !File::Exists( path ) )\n      {\n         File::Create( path );\n      }\n      else\n      {\n         \n         // Take an action that will affect the write time.\n         File::SetLastWriteTime( path, DateTime(1985,4,3) );\n      }\n      \n      // Get the creation time of a well-known directory.\n      DateTime dt = File::GetLastWriteTime( path );\n      Console::WriteLine( &quot;The last write time for this file was {0}.&quot;, dt );\n      \n      // Update the last write time.\n      File::SetLastWriteTime( path, DateTime::Now );\n      dt = File::GetLastWriteTime( path );\n      Console::WriteLine( &quot;The last write time for this file was {0}.&quot;, dt );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"File GetLastWrite#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n            If File.Exists(path) = False Then\n                File.Create(path)\n            Else\n                &#39; Take some action that will affect the write time.\n                File.SetLastWriteTime(path, New DateTime(1985, 4, 3))\n            End If\n\n            &#39;Get the creation time of a well-known directory.\n            Dim dt As DateTime = File.GetLastWriteTime(path)\n            Console.WriteLine(&quot;The last write time for this file was {0}.&quot;, dt)\n\n            &#39;Update the last write time.\n            File.SetLastWriteTime(path, DateTime.Now)\n            dt = File.GetLastWriteTime(path)\n            Console.WriteLine(&quot;The last write time for this file was {0}.&quot;, dt)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"File GetLastWrite#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n            if (!File.Exists(path)) \n            {\n                File.Create(path);\n            } \n            else \n            {\n                // Take an action that will affect the write time.\n                File.SetLastWriteTime(path, new DateTime(1985,4,3));\n            }\n\n            // Get the creation time of a well-known directory.\n            DateTime dt = File.GetLastWriteTime(path);\n            Console.WriteLine(&quot;The last write time for this file was {0}.&quot;, dt);\n\t\t\t\n            // Update the last write time.\n            File.SetLastWriteTime(path, DateTime.Now);\n            dt = File.GetLastWriteTime(path);\n            Console.WriteLine(&quot;The last write time for this file was {0}.&quot;, dt);\n\n        } \n\n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_GetLastWriteTimeUtc_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_GetLastWriteTimeUtc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLastWriteTimeUtc(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime GetLastWriteTimeUtc (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to obtain write date and time information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> structure set to the date and time that the specified file or directory was last written to. This value is expressed in UTC time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system. Each operating system manages the last write time according to its own rules. To improve performance, an operating system might not set the last write time value to the exact time of the last write operation, but might set it to a close approximation instead.  </p>\n</div>\n<p> If the file described in the <code>path</code> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Move_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_Move_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Move(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Moves a specified file to a new location, providing the option to specify a new file name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Move (string sourceFileName, string destFileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file to move. Can include a relative or absolute path.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new path and name for the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The destination file already exists.  </p>\n<p> -or-  </p>\n<p> <code>sourceFileName</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sourceFileName</code> or <code>destFileName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>sourceFileName</code> or <code>destFileName</code> is a zero-length string, contains only white space, or contains invalid characters as defined in <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path specified in <code>sourceFileName</code> or <code>destFileName</code> is invalid, (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>sourceFileName</code> or <code>destFileName</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method works across disk volumes, and it does not throw an exception if the source and destination are the same. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a>. You cannot use the Move method to overwrite an existing file.  </p>\n<p> The <code>sourceFileName</code> and <code>destFileName</code> arguments can include relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> If you try to move a file across disk volumes and that file is in use, the file is copied to the destination, but it is not deleted from the source.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example moves a file.  </p>\n<pre><code class=\"lang-cpp\" name=\"File Move#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n   String^ path2 = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp2\\\\MyTest.txt&quot;;\n   try\n   {\n      if (  !File::Exists( path ) )\n      {\n         \n         // This statement ensures that the file is created,\n         // but the handle is not kept.\n         FileStream^ fs = File::Create( path );\n         if ( fs )\n                  delete (IDisposable^)fs;\n      }\n      \n      // Ensure that the target does not exist.\n      if ( File::Exists( path2 ) )\n            File::Delete( path2 );\n      \n      // Move the file.\n      File::Move( path, path2 );\n      Console::WriteLine( &quot;{0} was moved to {1}.&quot;, path, path2 );\n      \n      // See if the original exists now.\n      if ( File::Exists( path ) )\n      {\n         Console::WriteLine( &quot;The original file still exists, which is unexpected.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The original file no longer exists, which is expected.&quot; );\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"File Move#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n        string path2 = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp2\\MyTest.txt&quot;;\n        try \n        {\n            if (!File.Exists(path)) \n            {\n                // This statement ensures that the file is created,\n                // but the handle is not kept.\n                using (FileStream fs = File.Create(path)) {}\n            }\n\n            // Ensure that the target does not exist.\n            if (File.Exists(path2))\t\n            File.Delete(path2);\n\n            // Move the file.\n            File.Move(path, path2);\n            Console.WriteLine(&quot;{0} was moved to {1}.&quot;, path, path2);\n\n            // See if the original exists now.\n            if (File.Exists(path)) \n            {\n                Console.WriteLine(&quot;The original file still exists, which is unexpected.&quot;);\n            } \n            else \n            {\n                Console.WriteLine(&quot;The original file no longer exists, which is expected.&quot;);\n            }\t\t\t\n\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"File Move#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim path2 As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp2\\MyTest.txt&quot;\n\n        Try\n            If File.Exists(path) = False Then\n                &#39; This statement ensures that the file is created,\n                &#39; but the handle is not kept.\n                Dim fs As FileStream = File.Create(path)\n                fs.Close()\n            End If\n\n            &#39; Ensure that the target does not exist.\n            If File.Exists(path2) Then\n                File.Delete(path2)\n            End If\n\n            &#39; Move the file.\n            File.Move(path, path2)\n            Console.WriteLine(&quot;{0} moved to {1}&quot;, path, path2)\n\n            &#39; See if the original file exists now.\n            If File.Exists(path) Then\n                Console.WriteLine(&quot;The original file still exists, which is unexpected.&quot;)\n            Else\n                Console.WriteLine(&quot;The original file no longer exists, which is expected.&quot;)\n            End If\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Open_System_String_System_IO_FileMode_\">\r\n    \r\n            <a id=\"System_IO_File_Open_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Open(String,FileMode)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> on the specified path with read/write access.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.FileStream Open (string path, System.IO.FileMode mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to open.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> opened in the specified mode and path, with read/write access and not shared.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.  </p>\n<p> -or-  </p>\n<p> <code>mode</code> is <a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a> and the specified file is a hidden file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>mode</code> specified an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified in <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a temporary file and writes some text to it. The example then opens the file, using T:System.IO.FileMode.Open; that is, if the file did not already exist, it would not be created.  </p>\n<pre><code class=\"lang-cpp\" name=\"File Open1#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nint main()\n{\n   // Create a temporary file, and put some data into it.\n   String^ path = Path::GetTempFileName();\n   FileStream^ fs = File::Open( path, FileMode::Open, FileAccess::Write, FileShare::None );\n   try\n   {\n      array&lt;Byte&gt;^info = (gcnew UTF8Encoding( true ))-&gt;GetBytes( &quot;This is some text in the file.&quot; );\n      \n      // Add some information to the file.\n      fs-&gt;Write( info, 0, info-&gt;Length );\n   }\n   finally\n   {\n      if ( fs )\n            delete (IDisposable^)fs;\n   }\n\n   // Open the stream and read it back.\n   fs = File::Open( path, FileMode::Open );\n   try\n   {\n      array&lt;Byte&gt;^b = gcnew array&lt;Byte&gt;(1024);\n      UTF8Encoding^ temp = gcnew UTF8Encoding( true );\n      while ( fs-&gt;Read( b, 0, b-&gt;Length ) &gt; 0 )\n      {\n         Console::WriteLine( temp-&gt;GetString( b ) );\n      }\n   }\n   finally\n   {\n      if ( fs )\n            delete (IDisposable^)fs;\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"File Open1#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n    public static void Main() \n    {\n        // Create a temporary file, and put some data into it.\n        string path = Path.GetTempFileName();\n        using (FileStream fs = File.Open(path, FileMode.Open, FileAccess.Write, FileShare.None)) \n        {\n            Byte[] info = new UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;);\n            // Add some information to the file.\n            fs.Write(info, 0, info.Length);\n        }\n        \n\n        // Open the stream and read it back.\n        using (FileStream fs = File.Open(path, FileMode.Open)) \n        {\n            byte[] b = new byte[1024];\n            UTF8Encoding temp = new UTF8Encoding(true);\n\n            while (fs.Read(b,0,b.Length) &gt; 0) \n            {\n                Console.WriteLine(temp.GetString(b));\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"File Open1#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n  Public Shared Sub Main()\n  \n    &#39; Create a temporary file, and put some data into it. \n    Dim path1 As String = Path.GetTempFileName()\n    Using fs As FileStream = File.Open(path1, FileMode.Open, FileAccess.Write, FileShare.None)\n      Dim info As Byte() = New UTF8Encoding(True).GetBytes(&quot;This is some text in the file.&quot;)\n      &#39; Add some information to the file.\n      fs.Write(info, 0, info.Length)\n    End Using\n\n    &#39; Open the stream and read it back. \n    Using fs As FileStream = File.Open(path1, FileMode.Open)\n      Dim b(1024) As Byte\n      Dim temp As UTF8Encoding = New UTF8Encoding(True)\n      Do While fs.Read(b, 0, b.Length) &gt; 0\n        Console.WriteLine(temp.GetString(b))\n      Loop\n    End Using\n\n  End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Open_System_String_System_IO_FileMode_System_IO_FileAccess_\">\r\n    \r\n            <a id=\"System_IO_File_Open_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Open(String,FileMode,FileAccess)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> on the specified path, with the specified mode and access.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.FileStream Open (string path, System.IO.FileMode mode, System.IO.FileAccess access);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to open.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a> value that specifies the operations that can be performed on the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>An unshared <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> that provides access to the specified file, with the specified mode and access.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.  </p>\n<p> -or-  </p>\n<p> <code>access</code> specified <code>Read</code> and <code>mode</code> specified <code>Create</code>, <code>CreateNew</code>, <code>Truncate</code>, or <code>Append</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only and <code>access</code> is not <code>Read</code>.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.  </p>\n<p> -or-  </p>\n<p> <code>mode</code> is <a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a> and the specified file is a hidden file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>mode</code> or <code>access</code> specified an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified in <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example opens a file with read-only access.  </p>\n<pre><code class=\"lang-cs\" name=\"file open2#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n    public static void Main() \n    {\n        // This sample assumes that you have a folder named &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot; on your computer.\n        string filePath = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // Delete the file if it exists.\n        if (File.Exists(filePath)) \n        {\n            File.Delete(filePath);\n        }\n        \n        // Create the file.\n        using (FileStream fs = File.Create(filePath)) \n        {\n            Byte[] info = new UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;);\n            // Add some information to the file.\n            fs.Write(info, 0, info.Length);\n        }\n\n        // Open the stream and read it back.\n        using (FileStream fs = File.Open(filePath, FileMode.Open, FileAccess.Read)) \n        {\n            byte[] b = new byte[1024];\n            UTF8Encoding temp = new UTF8Encoding(true);\n\n            while (fs.Read(b,0,b.Length) &gt; 0) \n            {\n                Console.WriteLine(temp.GetString(b));\n            }\n\n            try \n            {\n                // Try to write to the file.\n                fs.Write(b,0,b.Length);\n            } \n            catch (Exception e) \n            {\n                Console.WriteLine(&quot;Writing was disallowed, as expected: {0}&quot;, e.ToString());\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"file open2#1\">\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nint main()\n{\n    // This sample assumes that you have a folder named &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot; on your computer.\n    String^ filePath = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n    // Delete the file if it exists.\n    if (File::Exists( filePath ))\n    {\n        File::Delete( filePath );\n    }\n    // Create the file.\n    FileStream^ fs = File::Create( filePath );\n    try\n    {\n        array&lt;Byte&gt;^ info = ( gcnew UTF8Encoding( true ))-&gt;GetBytes( &quot;This is some text in the file.&quot; );\n        \n        // Add some information to the file.\n        fs-&gt;Write( info, 0, info-&gt;Length );\n    }\n    finally\n    {\n        if ( fs )\n            delete (IDisposable^)fs;\n    }\n\n    // Open the stream and read it back.\n    fs = File::Open( filePath, FileMode::Open, FileAccess::Read );\n    try\n    {\n        array&lt;Byte&gt;^ b = gcnew array&lt;Byte&gt;(1024);\n        UTF8Encoding^ temp = gcnew UTF8Encoding( true );\n        while ( fs-&gt;Read( b, 0, b-&gt;Length ) &gt; 0 )\n        {\n            Console::WriteLine( temp-&gt;GetString( b ) );\n        }\n        try\n        {\n            // Try to write to the file.\n            fs-&gt;Write( b, 0, b-&gt;Length );\n        }\n        catch ( Exception^ e ) \n        {\n            Console::WriteLine( &quot;Writing was disallowed, as expected: {0}&quot;, e-&gt;ToString() );\n        }\n    }\n    finally\n    {\n        if ( fs )\n            delete (IDisposable^)fs;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"file open2#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n  Public Shared Sub Main()\n    &#39; This sample assumes that you have a folder named &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot; on your computer. \n    Dim filePath As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n    &#39; Delete the file if it exists. \n    If File.Exists(filePath) Then\n      File.Delete(filePath)\n    End If\n\n    &#39; Create the file.\n    Using fs As FileStream = File.Create(filePath)\n      Dim info As Byte() = New UTF8Encoding(True).GetBytes(&quot;This is some text in the file.&quot;)\n\n      &#39; Add some information to the file.\n      fs.Write(info, 0, info.Length)\n    End Using\n\n    &#39; Open the stream and read it back.\n    Using fs As FileStream = File.Open(filePath, FileMode.Open, FileAccess.Read)\n      Dim b(1024) As Byte\n      Dim temp As UTF8Encoding = New UTF8Encoding(True)\n\n      &#39; Display the information on the console. \n      Do While fs.Read(b, 0, b.Length) &gt; 0\n        Console.WriteLine(temp.GetString(b))\n      Loop\n\n      Try\n        &#39; Try to write to the file\n        fs.Write(b, 0, b.Length)\n      Catch e As Exception\n        Console.WriteLine(&quot;Writing was disallowed, as expected: &quot; &amp; e.ToString())\n      End Try\n\n    End Using\n\n  End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Open_System_String_System_IO_FileMode_System_IO_FileAccess_System_IO_FileShare_\">\r\n    \r\n            <a id=\"System_IO_File_Open_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Open(String,FileMode,FileAccess,FileShare)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.FileStream Open (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to open.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>access</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a> value that specifies the operations that can be performed on the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>share</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a> value specifying the type of access other threads have to the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.  </p>\n<p> -or-  </p>\n<p> <code>access</code> specified <code>Read</code> and <code>mode</code> specified <code>Create</code>, <code>CreateNew</code>, <code>Truncate</code>, or <code>Append</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only and <code>access</code> is not <code>Read</code>.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.  </p>\n<p> -or-  </p>\n<p> <code>mode</code> is <a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a> and the specified file is a hidden file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>mode</code>, <code>access</code>, or <code>share</code> specified an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified in <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example opens a file with read-only access and with file sharing disallowed.  </p>\n<pre><code class=\"lang-cs\" name=\"file open3#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // Create the file if it does not exist.\n        if (!File.Exists(path)) \n        {\n            // Create the file.\n            using (FileStream fs = File.Create(path)) \n            {\n                Byte[] info = new UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;);\n\n                // Add some information to the file.\n                fs.Write(info, 0, info.Length);\n            }\n        }\n\n        // Open the stream and read it back.\n        using (FileStream fs = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.None)) \n        {\n            byte[] b = new byte[1024];\n            UTF8Encoding temp = new UTF8Encoding(true);\n\n            while (fs.Read(b,0,b.Length) &gt; 0) \n            {\n                Console.WriteLine(temp.GetString(b));\n            }\n\n            try \n            {\n                // Try to get another handle to the same file.\n                using (FileStream fs2 = File.Open(path, FileMode.Open)) \n                {\n                    // Do some task here.\n                }\n            } \n            catch (Exception e) \n            {\n                Console.Write(&quot;Opening the file twice is disallowed.&quot;);\n                Console.WriteLine(&quot;, as expected: {0}&quot;, e.ToString());\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"file open3#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nint main()\n{\n   String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n   \n   // Create the file if it does not exist.\n   if (  !File::Exists( path ) )\n   {\n      // Create the file.\n      FileStream^ fs = File::Create( path );\n      try\n      {\n         array&lt;Byte&gt;^info = (gcnew UTF8Encoding( true ))-&gt;GetBytes( &quot;This is some text in the file.&quot; );\n         \n         // Add some information to the file.\n         fs-&gt;Write( info, 0, info-&gt;Length );\n      }\n      finally\n      {\n         if ( fs )\n                  delete (IDisposable^)fs;\n      }\n   }\n   \n   // Open the stream and read it back.\n   FileStream^ fs = File::Open( path, FileMode::Open, FileAccess::Read, FileShare::None );\n   try\n   {\n      array&lt;Byte&gt;^b = gcnew array&lt;Byte&gt;(1024);\n      UTF8Encoding^ temp = gcnew UTF8Encoding( true );\n      while ( fs-&gt;Read( b, 0, b-&gt;Length ) &gt; 0 )\n      {\n         Console::WriteLine( temp-&gt;GetString( b ) );\n      }\n      try\n      {\n         // Try to get another handle to the same file.\n         FileStream^ fs2 = File::Open( path, FileMode::Open );\n         try\n         {\n            // Do some task here.\n         }\n         finally\n         {\n            if ( fs2 )\n                        delete (IDisposable^)fs2;\n         }\n      }\n      catch ( Exception^ e ) \n      {\n         Console::Write( &quot;Opening the file twice is disallowed.&quot; );\n         Console::WriteLine( &quot;, as expected: {0}&quot;, e );\n      }\n   }\n   finally\n   {\n      if ( fs )\n            delete (IDisposable^)fs;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"file open3#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n  Public Shared Sub Main()\n    Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n    &#39; Create the file if it does not exist. \n    If Not File.Exists(path) Then\n      &#39; Create the file.\n      Using fs As FileStream = File.Create(path)\n        Dim info As Byte() = New UTF8Encoding(True).GetBytes(&quot;This is some text in the file.&quot;)\n\n        &#39; Add some information to the file.\n        fs.Write(info, 0, info.Length)\n      End Using\n    End If\n\n    &#39; Open the stream and read it back.\n    Using fs As FileStream = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.None)\n      Dim b(1024) As Byte\n      Dim temp As UTF8Encoding = New UTF8Encoding(True)\n\n      Do While fs.Read(b, 0, b.Length) &gt; 0\n        Console.WriteLine(temp.GetString(b))\n      Loop\n\n      Try\n        &#39; Try to get another handle to the same file. \n        Using fs2 As FileStream = File.Open(path, FileMode.Open)\n          &#39; Do some task here.\n        End Using\n      Catch e As Exception\n        Console.Write(&quot;Opening the file twice is disallowed.&quot;)\n        Console.WriteLine(&quot;, as expected: {0}&quot;, e.ToString())\n      End Try\n\n    End Using\n\n  End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_OpenRead_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_OpenRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenRead(String)</div>        \r\n          </div>\r\n    \r\n            <p>Opens an existing file for reading.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.FileStream OpenRead (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to be opened for reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>A read-only <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> on the specified path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified in <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is equivalent to the <a class=\"xref\" href=\"system.io.filestream#System_IO_FileStream__ctor_System_String_System_IO_FileMode_System_IO_FileAccess_System_IO_FileShare_\" data-linktype=\"relative-path\">FileStream(String,FileMode,FileAccess,FileShare)</a> constructor overload with a <a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a> value of <a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a>, a <a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a> value of <a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a> and a <a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a> value of <a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a>.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example opens a file for reading.  </p>\n<pre><code class=\"lang-cs\" name=\"file openread#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        if (!File.Exists(path)) \n        {\n            // Create the file.\n            using (FileStream fs = File.Create(path)) \n            {\n                Byte[] info = new UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;);\n\n                // Add some information to the file.\n                fs.Write(info, 0, info.Length);\n            }\n        }\n\n        // Open the stream and read it back.\n        using (FileStream fs = File.OpenRead(path)) \n        {\n            byte[] b = new byte[1024];\n            UTF8Encoding temp = new UTF8Encoding(true);\n\n            while (fs.Read(b,0,b.Length) &gt; 0) \n            {\n                Console.WriteLine(temp.GetString(b));\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"file openread#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n  Public Shared Sub Main()\n    Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n    If Not File.Exists(path) Then\n      &#39; Create the file.\n      Using fs As FileStream = File.Create(path)\n        Dim info As Byte() = New UTF8Encoding(True).GetBytes(&quot;This is some text in the file.&quot;)\n\n        &#39; Add some information to the file.\n        fs.Write(info, 0, info.Length)\n      End Using\n    End If\n\n    &#39; Open the stream and read it back.\n    Using fs As FileStream = File.OpenRead(path)\n      Dim b(1024) As Byte\n      Dim temp As UTF8Encoding = New UTF8Encoding(True)\n\n      Do While fs.Read(b, 0, b.Length) &gt; 0\n        Console.WriteLine(temp.GetString(b))\n      Loop\n    End Using\n\n  End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"file openread#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nint main()\n{\n   String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n   \n   if (  !File::Exists( path ) )\n   {\n      // Create the file.\n      FileStream^ fs = File::Create( path );\n      try\n      {\n         array&lt;Byte&gt;^info = (gcnew UTF8Encoding( true ))-&gt;GetBytes( &quot;This is some text in the file.&quot; );\n         \n         // Add some information to the file.\n         fs-&gt;Write( info, 0, info-&gt;Length );\n      }\n      finally\n      {\n         if ( fs )\n            delete (IDisposable^)fs;\n      }\n   }\n   \n   // Open the stream and read it back.\n   FileStream^ fs = File::OpenRead( path );\n   try\n   {\n      array&lt;Byte&gt;^b = gcnew array&lt;Byte&gt;(1024);\n      UTF8Encoding^ temp = gcnew UTF8Encoding( true );\n      while ( fs-&gt;Read( b, 0, b-&gt;Length ) &gt; 0 )\n      {\n         Console::WriteLine( temp-&gt;GetString( b ) );\n      }\n   }\n   finally\n   {\n      if ( fs )\n         delete (IDisposable^)fs;\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_OpenText_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_OpenText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenText(String)</div>        \r\n          </div>\r\n    \r\n            <p>Opens an existing UTF-8 encoded text file for reading.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.StreamReader OpenText (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to be opened for reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> on the specified path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified in <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is equivalent to the <a class=\"xref\" href=\"system.io.streamreader#System_IO_StreamReader__ctor_System_String_\" data-linktype=\"relative-path\">StreamReader(String)</a> constructor overload.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example opens a text file for reading.  </p>\n<pre><code class=\"lang-vb\" name=\"file opentext#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n  Public Shared Sub Main()\n    Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n    If Not File.Exists(path) Then\n      &#39; Create the file.\n      Using fs As FileStream = File.Create(path)\n        Dim info As Byte() = _\n         New UTF8Encoding(True).GetBytes(&quot;This is some text in the file.&quot;)\n\n        &#39; Add some information to the file.\n        fs.Write(info, 0, info.Length)\n      End Using\n    End If\n\n    &#39; Open the stream and read it back. \n    Using sr As StreamReader = File.OpenText(path)\n      Do While sr.Peek() &gt;= 0\n        Console.WriteLine(sr.ReadLine())\n      Loop\n    End Using\n\n  End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"file opentext#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        if (!File.Exists(path)) \n        {\n            // Create the file.\n            using (FileStream fs = File.Create(path)) \n            {\n                Byte[] info = \n                    new UTF8Encoding(true).GetBytes(&quot;This is some text in the file.&quot;);\n\n                // Add some information to the file.\n                fs.Write(info, 0, info.Length);\n            }\n        }\n\n        // Open the stream and read it back.\n        using (StreamReader sr = File.OpenText(path)) \n        {\n            string s = &quot;&quot;;\n            while ((s = sr.ReadLine()) != null) \n            {\n                Console.WriteLine(s);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"file opentext#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nint main()\n{\n   String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n   \n   if ( !File::Exists( path ) )\n   {\n      // Create the file.\n      FileStream^ fs = File::Create( path );\n      try\n      {\n         array&lt;Byte&gt;^info = (gcnew UTF8Encoding( true ))-&gt;GetBytes( &quot;This is some text in the file.&quot; );\n         \n         // Add some information to the file.\n         fs-&gt;Write( info, 0, info-&gt;Length );\n      }\n      finally\n      {\n         if ( fs )\n            delete (IDisposable^)fs;\n      }\n   }\n   \n   // Open the stream and read it back.\n   StreamReader^ sr = File::OpenText( path );\n   try\n   {\n      String^ s = &quot;&quot;;\n      while ( s = sr-&gt;ReadLine() )\n      {\n         Console::WriteLine( s );\n      }\n   }\n   finally\n   {\n      if ( sr )\n         delete (IDisposable^)sr;\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_OpenWrite_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_OpenWrite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenWrite(String)</div>        \r\n          </div>\r\n    \r\n            <p>Opens an existing file or creates a new file for writing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.FileStream OpenWrite (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to be opened for writing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a></div>\r\n                  </div>\r\n                  <p>An unshared <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object on the specified path with <a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a> access.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a read-only file or directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is equivalent to the <a class=\"xref\" href=\"system.io.filestream#System_IO_FileStream__ctor_System_String_System_IO_FileMode_System_IO_FileAccess_System_IO_FileShare_\" data-linktype=\"relative-path\">FileStream(String,FileMode,FileAccess,FileShare)</a> constructor overload with file mode set to <a class=\"xref\" href=\"system.io.filemode\" data-linktype=\"relative-path\">FileMode</a>, the access set to <a class=\"xref\" href=\"system.io.fileaccess\" data-linktype=\"relative-path\">FileAccess</a>, and the share mode set to <a class=\"xref\" href=\"system.io.fileshare\" data-linktype=\"relative-path\">FileShare</a>.  </p>\n<p> The OpenWrite method opens a file if one already exists for the file path, or creates a new file if one does not exist. For an existing file, it does not append the new text to the existing text. Instead, it overwrites the existing characters with the new characters. If you overwrite a longer string (such as “This is a test of the OpenWrite method”) with a shorter string (such as “Second run”), the file will contain a mix of the strings (“Second runtest of the OpenWrite method”).  </p>\n<p> The <code>path</code> parameter may specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, use the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> method.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example opens a file for reading and writing.  </p>\n<pre><code class=\"lang-cpp\" name=\"file openwrite#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\n\nint main()\n{\n   String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n\n   // Open the stream and write to it.\n   {\n      FileStream^ fs = File::OpenWrite( path );\n      try\n      {\n         array&lt;Byte&gt;^info = (gcnew UTF8Encoding( true ))-&gt;\n            GetBytes( &quot;This is to test the OpenWrite method.&quot; );\n\n         // Add some information to the file.\n         fs-&gt;Write( info, 0, info-&gt;Length );\n      }\n      finally\n      {\n         if ( fs )\n            delete (IDisposable^)fs;\n      }\n   }\n\n   // Open the stream and read it back.\n   {\n      FileStream^ fs = File::OpenRead( path );\n      try\n      {\n         array&lt;Byte&gt;^b = gcnew array&lt;Byte&gt;(1024);\n         UTF8Encoding^ temp = gcnew UTF8Encoding( true );\n         while ( fs-&gt;Read( b, 0, b-&gt;Length ) &gt; 0 )\n         {\n            Console::WriteLine( temp-&gt;GetString( b ) );\n         }\n      }\n      finally\n      {\n         if ( fs )\n            delete(IDisposable^)fs;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"file openwrite#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // Open the stream and write to it.\n        using (FileStream fs = File.OpenWrite(path)) \n        {\n            Byte[] info = \n                new UTF8Encoding(true).GetBytes(&quot;This is to test the OpenWrite method.&quot;);\n\n            // Add some information to the file.\n            fs.Write(info, 0, info.Length);\n        }\n\n        // Open the stream and read it back.\n        using (FileStream fs = File.OpenRead(path)) \n        {\n            byte[] b = new byte[1024];\n            UTF8Encoding temp = new UTF8Encoding(true);\n\n            while (fs.Read(b,0,b.Length) &gt; 0) \n            {\n                Console.WriteLine(temp.GetString(b));\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"file openwrite#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n  Public Shared Sub Main()\n    Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n    &#39; Open the stream and write to it.\n    Using fs As FileStream = File.OpenWrite(path)\n      Dim info As Byte() = _\n       New UTF8Encoding(True).GetBytes(&quot;This is to test the OpenWrite method.&quot;)\n\n      &#39; Add some information to the file.\n      fs.Write(info, 0, info.Length)\n    End Using\n\n    &#39;Open the stream and read it back.\n    Using fs As FileStream = File.OpenRead(path)\n      Dim b(1024) As Byte\n      Dim temp As UTF8Encoding = New UTF8Encoding(True)\n\n      Do While fs.Read(b, 0, b.Length) &gt; 0\n        Console.WriteLine(temp.GetString(b))\n      Loop\n    End Using\n\n  End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_ReadAllBytes_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_ReadAllBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAllBytes(String)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte[] ReadAllBytes (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to open for reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array containing the contents of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified in <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Given a file path, this method opens the file, reads the contents of the file into a byte array, and then closes the file.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_ReadAllLines_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_ReadAllLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAllLines(String)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a text file, reads all lines of the file, and then closes the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] ReadAllLines (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to open for reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A string array containing all lines of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified in <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method opens a file, reads each line of the file, then adds each line as an element of a string array. It then closes the file. A line is defined as a sequence of characters followed by a carriage return (&#39;\\r&#39;), a line feed (&#39;\\n&#39;), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.  </p>\n<p> This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the ReadAllLines method to display the contents of a file. In this example a file is created, if it doesn&#39;t already exist, and text is added to it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.File.AllLines#00\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim sw As StreamWriter\n\n        &#39; This text is added only once to the file.\n        If File.Exists(path) = False Then\n\n            &#39; Create a file to write to.\n            Dim createText() As String = {&quot;Hello&quot;, &quot;And&quot;, &quot;Welcome&quot;}\n            File.WriteAllLines(path, createText)\n        End If\n\n        &#39; This text is always added, making the file longer over time\n        &#39; if it is not deleted.\n        Dim appendText As String = &quot;This is extra text&quot; + Environment.NewLine\n        File.AppendAllText(path, appendText)\n\n        &#39; Open the file to read from.\n        Dim readText() As String = File.ReadAllLines(path)\n        Dim s As String\n        For Each s In readText\n            Console.WriteLine(s)\n        Next\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.File.AllLines#00\">using System;\nusing System.IO;\nclass Test\n{\n    public static void Main()\n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // This text is added only once to the file.\n        if (!File.Exists(path))\n        {\n            // Create a file to write to.\n            string[] createText = { &quot;Hello&quot;, &quot;And&quot;, &quot;Welcome&quot; };\n            File.WriteAllLines(path, createText);\n        }\n\n        // This text is always added, making the file longer over time\n        // if it is not deleted.\n        string appendText = &quot;This is extra text&quot; + Environment.NewLine;\n        File.AppendAllText(path, appendText);\n\n        // Open the file to read from.\n        string[] readText = File.ReadAllLines(path);\n        foreach (string s in readText)\n        {\n            Console.WriteLine(s);\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_ReadAllLines_System_String_System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_IO_File_ReadAllLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAllLines(String,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] ReadAllLines (string path, System.Text.Encoding encoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to open for reading.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encoding applied to the contents of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>A string array containing all lines of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified in <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method opens a file, reads each line of the file, and then adds each line as an element of a string array. It then closes the file. A line is defined as a sequence of characters followed by a carriage return (&#39;\\r&#39;), a line feed (&#39;\\n&#39;), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.  </p>\n<p> This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the ReadAllLines method to display the contents of a file. In this example a file is created, if it doesn&#39;t already exist, and text is added to it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.File.AllLines_Encoding#00\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim sw As StreamWriter\n\n        &#39; This text is added only once to the file.\n        If File.Exists(path) = False Then\n\n            &#39; Create a file to write to.\n            Dim createText() As String = {&quot;Hello&quot;, &quot;And&quot;, &quot;Welcome&quot;}\n            File.WriteAllLines(path, createText, Encoding.UTF8)\n        End If\n\n        &#39; This text is always added, making the file longer over time\n        &#39; if it is not deleted.\n        Dim appendText As String = &quot;This is extra text&quot; + Environment.NewLine\n        File.AppendAllText(path, appendText, Encoding.UTF8)\n\n        &#39; Open the file to read from.\n        Dim readText() As String = File.ReadAllLines(path, Encoding.UTF8)\n        Dim s As String\n        For Each s In readText\n            Console.WriteLine(s)\n        Next\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.File.AllLines_Encoding#00\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test\n{\n    public static void Main()\n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // This text is added only once to the file.\n        if (!File.Exists(path))\n        {\n            // Create a file to write to.\n            string[] createText = { &quot;Hello&quot;, &quot;And&quot;, &quot;Welcome&quot; };\n            File.WriteAllLines(path, createText, Encoding.UTF8);\n        }\n\n        // This text is always added, making the file longer over time\n        // if it is not deleted.\n        string appendText = &quot;This is extra text&quot; + Environment.NewLine;\n        File.AppendAllText(path, appendText, Encoding.UTF8);\n\n        // Open the file to read from.\n        string[] readText = File.ReadAllLines(path, Encoding.UTF8);\n        foreach (string s in readText)\n        {\n            Console.WriteLine(s);\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_ReadAllText_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_ReadAllText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAllText(String)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a text file, reads all lines of the file, and then closes the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ReadAllText (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to open for reading.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing all lines of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified in <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method opens a file, reads each line of the file, and then adds each line as an element of a string. It then closes the file. A line is defined as a sequence of characters followed by a carriage return (&#39;\\r&#39;), a line feed (&#39;\\n&#39;), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.  </p>\n<p> This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected.  </p>\n<p> Use the <a class=\"xref\" href=\"system.io.file#System_IO_File_ReadAllText_System_String_System_Text_Encoding_\" data-linktype=\"relative-path\">ReadAllText(String,Encoding)</a> method overload when reading files that might contain imported text, because unrecognized characters may not be read correctly.  </p>\n<p> The file handle is guaranteed to be closed by this method, even if exceptions are raised.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the ReadAllText method to display the contents of a file. In this example a file is created, if it doesn&#39;t already exist, and text is added to it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.File.AllText#00\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n        &#39; This text is added only once to the file.\n        If File.Exists(path) = False Then\n\n            &#39; Create a file to write to.\n            Dim createText As String = &quot;Hello and Welcome&quot; + Environment.NewLine\n            File.WriteAllText(path, createText)\n        End If\n\n        &#39; This text is always added, making the file longer over time\n        &#39; if it is not deleted.\n        Dim appendText As String = &quot;This is extra text&quot; + Environment.NewLine\n        File.AppendAllText(path, appendText)\n\n        &#39; Open the file to read from.\n        Dim readText As String = File.ReadAllText(path)\n        Console.WriteLine(readText)\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.File.AllText#00\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test\n{\n    public static void Main()\n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // This text is added only once to the file.\n        if (!File.Exists(path))\n        {\n            // Create a file to write to.\n            string createText = &quot;Hello and Welcome&quot; + Environment.NewLine;\n            File.WriteAllText(path, createText);\n        }\n\n        // This text is always added, making the file longer over time\n        // if it is not deleted.\n        string appendText = &quot;This is extra text&quot; + Environment.NewLine;\n        File.AppendAllText(path, appendText);\n\n        // Open the file to read from.\n        string readText = File.ReadAllText(path);\n        Console.WriteLine(readText);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_ReadAllText_System_String_System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_IO_File_ReadAllText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadAllText(String,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ReadAllText (string path, System.Text.Encoding encoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to open for reading.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encoding applied to the contents of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing all lines of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified in <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method opens a file, reads each line of the file, and then adds each line as an element of a string. It then closes the file. A line is defined as a sequence of characters followed by a carriage return (&#39;\\r&#39;), a line feed (&#39;\\n&#39;), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.  </p>\n<p> This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected.  </p>\n<p> The file handle is guaranteed to be closed by this method, even if exceptions are raised.  </p>\n<p> To use the encoding settings as configured for your operating system, specify the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Default_\" data-linktype=\"relative-path\">Default</a> property for the <code>encoding</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the ReadAllText method to display the contents of a file. In this example a file is created, if it doesn&#39;t already exist, and text is added to it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.File.AllText_Encoding#00\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test\n{\n    public static void Main()\n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // This text is added only once to the file.\n        if (!File.Exists(path))\n        {\n            // Create a file to write to.\n            string createText = &quot;Hello and Welcome&quot; + Environment.NewLine;\n            File.WriteAllText(path, createText, Encoding.UTF8);\n        }\n\n        // This text is always added, making the file longer over time\n        // if it is not deleted.\n        string appendText = &quot;This is extra text&quot; + Environment.NewLine;\n        File.AppendAllText(path, appendText, Encoding.UTF8);\n\n        // Open the file to read from.\n        string readText = File.ReadAllText(path);\n        Console.WriteLine(readText);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.File.AllText_Encoding#00\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim sw As StreamWriter\n\n        &#39; This text is added only once to the file.\n        If File.Exists(path) = False Then\n\n            &#39; Create a file to write to.\n            Dim createText As String = &quot;Hello and Welcome&quot; + Environment.NewLine\n            File.WriteAllText(path, createText, Encoding.UTF8)\n        End If\n\n        &#39; This text is always added, making the file longer over time\n        &#39; if it is not deleted.\n        Dim appendText As String = &quot;This is extra text&quot; + Environment.NewLine\n        File.AppendAllText(path, appendText, Encoding.UTF8)\n\n        &#39; Open the file to read from.\n        Dim readText As String = File.ReadAllText(path)\n        Console.WriteLine(readText)\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_ReadLines_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_ReadLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadLines(String)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the lines of a file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;string&gt; ReadLines (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>All the lines of the file, or the lines that are the result of a query.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified by <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specifies a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> is a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReadLines and <a class=\"xref\" href=\"system.io.file#System_IO_File_ReadAllLines_\" data-linktype=\"relative-path\">ReadAllLines</a> methods differ as follows: When you use ReadLines, you can start enumerating the collection of strings before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.file#System_IO_File_ReadAllLines_\" data-linktype=\"relative-path\">ReadAllLines</a>, you must wait for the whole array of strings be returned before you can access the array. Therefore, when you are working with very large files, ReadLines can be more efficient.  </p>\n<p> You can use the ReadLines method to do the following:  </p>\n<ul>\n<li><p>Perform <a href=\"../Topic/LINQ%20to%20Objects.md\" data-linktype=\"relative-path\">LINQ to Objects</a> queries on a file to obtain a filtered set of its lines.  </p>\n</li>\n<li><p>Write the returned collection of lines to a file with the <a class=\"xref\" href=\"system.io.file#System_IO_File_WriteAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__\" data-linktype=\"relative-path\">System.IO.File.WriteAllLines(String,IEnumerable&lt;String&gt;)</a> method, or append them to an existing file with the <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__\" data-linktype=\"relative-path\">System.IO.File.AppendAllLines(String,IEnumerable&lt;String&gt;)</a> method.  </p>\n</li>\n<li><p>Create an immediately populated instance of a collection that takes an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> collection of strings for its constructor, such as a <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> or a <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>.  </p>\n<p>This method uses <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF8_\" data-linktype=\"relative-path\">UTF8</a> for the encoding value.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example reads the lines of a file to find lines that contain specified strings.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.File.ReadLines#1\">For Each line As String In File.ReadLines(&quot;d:\\data\\episodes.txt&quot;)\n    If line.Contains(&quot;episode&quot;) And line.Contains(&quot;2006&quot;) Then\n        Console.WriteLine(line)\n    End If\nNext line\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.File.ReadLines#1\">foreach (string line in File.ReadLines(@&quot;d:\\data\\episodes.txt&quot;))\n{\n    if (line.Contains(&quot;episode&quot;) &amp; line.Contains(&quot;2006&quot;))\n    {\n        Console.WriteLine(line);\n    }\n}\n</code></pre><p> The following example uses the ReadLines method in a LINQ query that enumerates all directories for files that have a .txt extension, reads each line of the file, and displays the line if it contains the string &quot;Microsoft&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory.EnumerateFiles#1\">using System;\nusing System.IO;\nusing System.Linq;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        try\n        {\n            var files = from file in Directory.EnumerateFiles(@&quot;c:\\&quot;, &quot;*.txt&quot;, SearchOption.AllDirectories)\n                        from line in File.ReadLines(file)\n                        where line.Contains(&quot;Microsoft&quot;)\n                        select new\n                        {\n                            File = file,\n                            Line = line\n                        };\n\n            foreach (var f in files)\n            {\n                Console.WriteLine(&quot;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, f.File, f.Line);\n            }\n\t\t\tConsole.WriteLine(&quot;{0} files found.&quot;, files.Count().ToString());\n        }\n        catch (UnauthorizedAccessException UAEx)\n        {\n            Console.WriteLine(UAEx.Message);\n        }\n        catch (PathTooLongException PathEx)\n        {\n            Console.WriteLine(PathEx.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory.EnumerateFiles#1\">Imports System.IO\nImports System.Xml.Linq\nModule Module1\n\n    Sub Main()\n        Try\n            Dim files = From chkFile In Directory.EnumerateFiles(&quot;c:\\&quot;, &quot;*.txt&quot;, SearchOption.AllDirectories)\n                        From line In File.ReadLines(chkFile)\n                        Where line.Contains(&quot;Microsoft&quot;)\n                        Select New With {.curFile = chkFile, .curLine = line}\n\n            For Each f In files\n                Console.WriteLine(&quot;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, f.curFile, f.curLine)\n            Next\n            Console.WriteLine(&quot;{0} files found.&quot;, files.Count.ToString())\n        Catch UAEx As UnauthorizedAccessException\n            Console.WriteLine(UAEx.Message)\n        Catch PathEx As PathTooLongException\n            Console.WriteLine(PathEx.Message)\n        End Try\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_ReadLines_System_String_System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_IO_File_ReadLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadLines(String,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Read the lines of a file that has a specified encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;string&gt; ReadLines (string path, System.Text.Encoding encoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encoding that is applied to the contents of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>All the lines of the file, or the lines that are the result of a query.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file specified by <code>path</code> was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specifies a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> is a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to specify an encoding to use read the file.  </p>\n<p> The ReadLines and <a class=\"xref\" href=\"system.io.file#System_IO_File_ReadAllLines_\" data-linktype=\"relative-path\">ReadAllLines</a> methods differ as follows: When you use ReadLines, you can start enumerating the collection of strings before the whole collection is returned. When you use <a class=\"xref\" href=\"system.io.file#System_IO_File_ReadAllLines_\" data-linktype=\"relative-path\">ReadAllLines</a>, you must wait for the whole array of strings be returned before you can access the array. Therefore, when you are working with very large files, ReadLines can be more efficient.  </p>\n<p> You can use the ReadLines method to do the following:  </p>\n<ul>\n<li><p>Perform <a href=\"../Topic/LINQ%20to%20Objects.md\" data-linktype=\"relative-path\">LINQ to Objects</a> queries on a file to obtain a filtered set of its lines.  </p>\n</li>\n<li><p>Write the returned collection of lines to a file with the <a class=\"xref\" href=\"system.io.file#System_IO_File_WriteAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__System_Text_Encoding_\" data-linktype=\"relative-path\">System.IO.File.WriteAllLines(String,IEnumerable&lt;String&gt;,Encoding)</a> method, or append them to an existing file with the <a class=\"xref\" href=\"system.io.file#System_IO_File_AppendAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__System_Text_Encoding_\" data-linktype=\"relative-path\">System.IO.File.AppendAllLines(String,IEnumerable&lt;String&gt;,Encoding)</a> method.  </p>\n</li>\n<li><p>Create an immediately populated instance of a collection that takes an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> collection of strings for its constructor, such as a <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> or a <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Replace_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_Replace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Replace(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Replace (string sourceFileName, string destinationFileName, string destinationBackupFileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a file that replaces the file specified by <code>destinationFileName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file being replaced.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationBackupFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the backup file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The path described by the <code>destinationFileName</code> parameter was not of a legal form.  </p>\n<p> -or-  </p>\n<p> The path described by the <code>destinationBackupFileName</code> parameter was not of a legal form.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>destinationFileName</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.drivenotfoundexception\" data-linktype=\"relative-path\">DriveNotFoundException</a></div>\r\n                  </div>\r\n                  <p>An invalid drive was specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object could not be found.  </p>\n<p> -or-  </p>\n<p> The file described by the <code>destinationBackupFileName</code> parameter could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.  </p>\n<p> - or -  </p>\n<p> The <code>sourceFileName</code> and <code>destinationFileName</code> parameters specify the same file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <code>sourceFileName</code> or <code>destinationFileName</code> parameter specifies a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> Source or destination parameters specify a directory instead of a file.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Replace method replaces the contents of a specified file with the contents of another file.  It also creates a backup of the file that was replaced.  </p>\n<p> If the <code>sourceFileName</code> and <code>destinationFileName</code> are on different volumes, this method will raise an exception. If the <code>destinationBackupFileName</code> is on a different volume from the source file, the backup file will be deleted.  </p>\n<p> Pass <code>null</code> to the <code>destinationBackupFileName</code> parameter if you do not want to create a backup of the file being replaced.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.io.file#System_IO_File_Replace_\" data-linktype=\"relative-path\">Replace</a> method to replace a file with another file and create a backup of the replaced file.  </p>\n<pre><code class=\"lang-vb\" name=\"IO.File.Replace#1\">Imports System\nImports System.IO\n\nModule FileExample\n\n    Sub Main()\n        Try\n            Dim OriginalFile As String = &quot;test.xml&quot;\n            Dim FileToReplace As String = &quot;test2.xml&quot;\n            Dim BackUpOfFileToReplace As String = &quot;test2.xml.bac&quot;\n\n            Console.WriteLine(&quot;Move the contents of &quot; + OriginalFile + &quot; into &quot; + FileToReplace + &quot;, delete &quot; + OriginalFile + &quot;, and create a backup of &quot; + FileToReplace + &quot;.&quot;)\n\n            &#39; Replace the file.\n            ReplaceFile(OriginalFile, FileToReplace, BackUpOfFileToReplace)\n\n            Console.WriteLine(&quot;Done&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\n\n    &#39; Move a file into another file, delete the original, and create a backup of the replaced file.\n    Sub ReplaceFile(ByVal FileToMoveAndDelete As String, ByVal FileToReplace As String, ByVal BackupOfFileToReplace As String)\n\n        &#39; Replace the file.\n        File.Replace(FileToMoveAndDelete, FileToReplace, BackupOfFileToReplace, False)\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"IO.File.Replace#1\">using System;\nusing System.IO;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string OriginalFile = &quot;test.xml&quot;;\n                string FileToReplace = &quot;test2.xml&quot;;\n                string BackUpOfFileToReplace = &quot;test2.xml.bac&quot;;\n\n                Console.WriteLine(&quot;Move the contents of &quot; + OriginalFile + &quot; into &quot; + FileToReplace + &quot;, delete &quot; + OriginalFile +\n                                   &quot;, and create a backup of &quot; + FileToReplace + &quot;.&quot;);\n\n                // Replace the file.\n                ReplaceFile(OriginalFile, FileToReplace, BackUpOfFileToReplace);\n\n                Console.WriteLine(&quot;Done&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n\n            Console.ReadLine();\n        }\n\n        // Move a file into another file, delete the original, and create a backup of the replaced file.\n        public static void ReplaceFile(string FileToMoveAndDelete, string FileToReplace, string BackupOfFileToReplace)\n        {\n            File.Replace(FileToMoveAndDelete, FileToReplace, BackupOfFileToReplace, false);\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"IO.File.Replace#1\">using namespace System;\nusing namespace System::IO;\n\n\n// Move a file into another file, delete the original,\n// and create a backup of the replaced file.\n\nvoid ReplaceFile(String^ fileToMoveAndDelete,\n                 String^ fileToReplace, String^ backupOfFileToReplace)\n{\n    File::Replace(fileToMoveAndDelete, fileToReplace,\n        backupOfFileToReplace, false);\n}\t\n\n\nint main()\n{\n    try\n    {\n        String^ originalFile = &quot;test.xml&quot;;\n        String^ fileToReplace = &quot;test2.xml&quot;;\n        String^ backUpOfFileToReplace = &quot;test2.xml.bac&quot;;\n\n        Console::WriteLine(&quot;Move the contents of &quot; + originalFile + &quot; into &quot; \n            + fileToReplace + &quot;, delete &quot; + originalFile\n            + &quot;, and create a backup of &quot; + fileToReplace + &quot;.&quot;);\n\n        // Replace the file.\n        ReplaceFile(originalFile, fileToReplace, backUpOfFileToReplace);\n\n        Console::WriteLine(&quot;Done&quot;);\n    }\n    catch (IOException^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n    } \n};\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_Replace_System_String_System_String_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_File_Replace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Replace(String,String,String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Replace (string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of a file that replaces the file specified by <code>destinationFileName</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the file being replaced.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationBackupFileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the backup file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ignoreMetadataErrors</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The path described by the <code>destinationFileName</code> parameter was not of a legal form.  </p>\n<p> -or-  </p>\n<p> The path described by the <code>destinationBackupFileName</code> parameter was not of a legal form.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>destinationFileName</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.drivenotfoundexception\" data-linktype=\"relative-path\">DriveNotFoundException</a></div>\r\n                  </div>\r\n                  <p>An invalid drive was specified.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file described by the current <a class=\"xref\" href=\"system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object could not be found.  </p>\n<p> -or-  </p>\n<p> The file described by the <code>destinationBackupFileName</code> parameter could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.  </p>\n<p> - or -  </p>\n<p> The <code>sourceFileName</code> and <code>destinationFileName</code> parameters specify the same file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <code>sourceFileName</code> or <code>destinationFileName</code> parameter specifies a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> Source or destination parameters specify a directory instead of a file.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Replace method replaces the contents of a specified file with the contents of another file.  It also creates a backup of the file that was replaced.  </p>\n<p> If the <code>sourceFileName</code> and <code>destinationFileName</code> are on different volumes, this method will raise an exception. If the <code>destinationBackupFileName</code> is on a different volume from the source file, the backup file will be deleted.  </p>\n<p> Pass <code>null</code> to the <code>destinationBackupFileName</code> parameter if you do not want to create a backup of the file being replaced.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Replace method to replace a file with another file and create a backup of the replaced file.  </p>\n<pre><code class=\"lang-vb\" name=\"IO.File.Replace#1\">Imports System\nImports System.IO\n\nModule FileExample\n\n    Sub Main()\n        Try\n            Dim OriginalFile As String = &quot;test.xml&quot;\n            Dim FileToReplace As String = &quot;test2.xml&quot;\n            Dim BackUpOfFileToReplace As String = &quot;test2.xml.bac&quot;\n\n            Console.WriteLine(&quot;Move the contents of &quot; + OriginalFile + &quot; into &quot; + FileToReplace + &quot;, delete &quot; + OriginalFile + &quot;, and create a backup of &quot; + FileToReplace + &quot;.&quot;)\n\n            &#39; Replace the file.\n            ReplaceFile(OriginalFile, FileToReplace, BackUpOfFileToReplace)\n\n            Console.WriteLine(&quot;Done&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\n\n    &#39; Move a file into another file, delete the original, and create a backup of the replaced file.\n    Sub ReplaceFile(ByVal FileToMoveAndDelete As String, ByVal FileToReplace As String, ByVal BackupOfFileToReplace As String)\n\n        &#39; Replace the file.\n        File.Replace(FileToMoveAndDelete, FileToReplace, BackupOfFileToReplace, False)\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"IO.File.Replace#1\">using System;\nusing System.IO;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string OriginalFile = &quot;test.xml&quot;;\n                string FileToReplace = &quot;test2.xml&quot;;\n                string BackUpOfFileToReplace = &quot;test2.xml.bac&quot;;\n\n                Console.WriteLine(&quot;Move the contents of &quot; + OriginalFile + &quot; into &quot; + FileToReplace + &quot;, delete &quot; + OriginalFile +\n                                   &quot;, and create a backup of &quot; + FileToReplace + &quot;.&quot;);\n\n                // Replace the file.\n                ReplaceFile(OriginalFile, FileToReplace, BackUpOfFileToReplace);\n\n                Console.WriteLine(&quot;Done&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n\n            Console.ReadLine();\n        }\n\n        // Move a file into another file, delete the original, and create a backup of the replaced file.\n        public static void ReplaceFile(string FileToMoveAndDelete, string FileToReplace, string BackupOfFileToReplace)\n        {\n            File.Replace(FileToMoveAndDelete, FileToReplace, BackupOfFileToReplace, false);\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"IO.File.Replace#1\">using namespace System;\nusing namespace System::IO;\n\n\n// Move a file into another file, delete the original,\n// and create a backup of the replaced file.\n\nvoid ReplaceFile(String^ fileToMoveAndDelete,\n                 String^ fileToReplace, String^ backupOfFileToReplace)\n{\n    File::Replace(fileToMoveAndDelete, fileToReplace,\n        backupOfFileToReplace, false);\n}\t\n\n\nint main()\n{\n    try\n    {\n        String^ originalFile = &quot;test.xml&quot;;\n        String^ fileToReplace = &quot;test2.xml&quot;;\n        String^ backUpOfFileToReplace = &quot;test2.xml.bac&quot;;\n\n        Console::WriteLine(&quot;Move the contents of &quot; + originalFile + &quot; into &quot; \n            + fileToReplace + &quot;, delete &quot; + originalFile\n            + &quot;, and create a backup of &quot; + fileToReplace + &quot;.&quot;);\n\n        // Replace the file.\n        ReplaceFile(originalFile, fileToReplace, backUpOfFileToReplace);\n\n        Console::WriteLine(&quot;Done&quot;);\n    }\n    catch (IOException^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n    } \n};\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_SetAccessControl_System_String_System_Security_AccessControl_FileSecurity_\">\r\n    \r\n            <a id=\"System_IO_File_SetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAccessControl(String,FileSecurity)</div>        \r\n          </div>\r\n    \r\n            <p>Applies access control list (ACL) entries described by a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object to the specified file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetAccessControl (string path, System.Security.AccessControl.FileSecurity fileSecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A file to add or remove access control list (ACL) entries from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileSecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object that describes an ACL entry to apply to the file described by the <code>path</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.sehexception\" data-linktype=\"relative-path\">SEHException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>The file could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The <code>path</code> parameter specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>fileSecurity</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SetAccessControl method applies access control list (ACL) entries to a file that represents the noninherited ACL list.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The ACL specified for the <code>fileSecurity</code> parameter replaces the existing ACL for the file. To add permissions for a new user, use the <a class=\"xref\" href=\"system.io.file#System_IO_File_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to obtain the existing ACL, modify it, and then use SetAccessControl to apply it back to the file.  </p>\n</div>\n<p> An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see <a href=\"../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md\" data-linktype=\"relative-path\">How to: Add or Remove Access Control List Entries</a>.  </p>\n<p> The SetAccessControl method persists only <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> objects that have been modified after object creation.  If a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object from one file and reapply the same object to another file.  </p>\n<p> To copy ACL information from one file to another:  </p>\n<ol>\n<li><p>Use the <a class=\"xref\" href=\"system.io.file#System_IO_File_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to retrieve the <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object from the source file.  </p>\n</li>\n<li><p>Create a new <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object for the destination file.  </p>\n</li>\n<li><p>Use the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorBinaryForm_\" data-linktype=\"relative-path\">GetSecurityDescriptorBinaryForm</a> or <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorSddlForm_\" data-linktype=\"relative-path\">GetSecurityDescriptorSddlForm</a> method of the source <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object to retrieve the ACL information.  </p>\n</li>\n<li><p>Use the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorBinaryForm_\" data-linktype=\"relative-path\">SetSecurityDescriptorBinaryForm</a> or <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorSddlForm_\" data-linktype=\"relative-path\">SetSecurityDescriptorSddlForm</a> method to copy the information retrieved in step 3 to the destination <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object.  </p>\n</li>\n<li><p>Set the destination <a class=\"xref\" href=\"system.security.accesscontrol.filesecurity\" data-linktype=\"relative-path\">FileSecurity</a> object to the destination file using the SetAccessControl method.  </p>\n<p>In NTFS environments, <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> are granted to the user if the user has <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> rights on the parent folder. To deny <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a>, deny <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> on the parent directory.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.io.file#System_IO_File_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> and SetAccessControl methods to add and then remove an access control list (ACL) entry from a file.  You must supply a valid user or group account to run this example.  </p>\n<pre><code class=\"lang-cs\" name=\"IO.File.GetAccessControl-SetAccessControl#1\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace FileSystemExample\n{\n    class FileExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string fileName = &quot;test.xml&quot;;\n\n                Console.WriteLine(&quot;Adding access control entry for &quot;\n                    + fileName);\n\n                // Add the access control entry to the file.\n                AddFileSecurity(fileName, @&quot;DomainName\\AccountName&quot;,\n                    FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Removing access control entry from &quot;\n                    + fileName);\n\n                // Remove the access control entry from the file.\n                RemoveFileSecurity(fileName, @&quot;DomainName\\AccountName&quot;,\n                    FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Done.&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n        }\n\n        // Adds an ACL entry on the specified file for the specified account.\n        public static void AddFileSecurity(string fileName, string account,\n            FileSystemRights rights, AccessControlType controlType)\n        {\n\n\n            // Get a FileSecurity object that represents the\n            // current security settings.\n            FileSecurity fSecurity = File.GetAccessControl(fileName);\n\n            // Add the FileSystemAccessRule to the security settings.\n            fSecurity.AddAccessRule(new FileSystemAccessRule(account,\n                rights, controlType));\n\n            // Set the new access settings.\n            File.SetAccessControl(fileName, fSecurity);\n\n        }\n\n        // Removes an ACL entry on the specified file for the specified account.\n        public static void RemoveFileSecurity(string fileName, string account,\n            FileSystemRights rights, AccessControlType controlType)\n        {\n\n            // Get a FileSecurity object that represents the\n            // current security settings.\n            FileSecurity fSecurity = File.GetAccessControl(fileName);\n\n            // Remove the FileSystemAccessRule from the security settings.\n            fSecurity.RemoveAccessRule(new FileSystemAccessRule(account,\n                rights, controlType));\n\n            // Set the new access settings.\n            File.SetAccessControl(fileName, fSecurity);\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.File.GetAccessControl-SetAccessControl#1\">Imports System\nImports System.IO\nImports System.Security.AccessControl\n\n\n\nModule FileExample\n\n    Sub Main()\n        Try\n            Dim fileName As String = &quot;test.xml&quot;\n\n            Console.WriteLine(&quot;Adding access control entry for &quot; &amp; fileName)\n\n            &#39; Add the access control entry to the file.\n            AddFileSecurity(fileName, &quot;DomainName\\AccountName&quot;, _\n                FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Removing access control entry from &quot; &amp; fileName)\n\n            &#39; Remove the access control entry from the file.\n            RemoveFileSecurity(fileName, &quot;DomainName\\AccountName&quot;, _\n                FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Done.&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n    End Sub\n\n\n    &#39; Adds an ACL entry on the specified file for the specified account.\n    Sub AddFileSecurity(ByVal fileName As String, ByVal account As String, _\n        ByVal rights As FileSystemRights, ByVal controlType As AccessControlType)\n  \n        &#39; Get a FileSecurity object that represents the \n        &#39; current security settings.\n        Dim fSecurity As FileSecurity = File.GetAccessControl(fileName)\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        Dim accessRule As FileSystemAccessRule = _\n            New FileSystemAccessRule(account, rights, controlType)\n\n        fSecurity.AddAccessRule(accessRule)\n\n        &#39; Set the new access settings.\n        File.SetAccessControl(fileName, fSecurity)\n\n    End Sub\n\n\n    &#39; Removes an ACL entry on the specified file for the specified account.\n    Sub RemoveFileSecurity(ByVal fileName As String, ByVal account As String, _\n        ByVal rights As FileSystemRights, ByVal controlType As AccessControlType)\n\n        &#39; Get a FileSecurity object that represents the \n        &#39; current security settings.\n        Dim fSecurity As FileSecurity = File.GetAccessControl(fileName)\n\n        &#39; Remove the FileSystemAccessRule from the security settings. \n        fSecurity.RemoveAccessRule(New FileSystemAccessRule(account, _\n            rights, controlType))\n\n        &#39; Set the new access settings.\n        File.SetAccessControl(fileName, fSecurity)\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"IO.File.GetAccessControl-SetAccessControl#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Security::AccessControl;\n\n// Adds an ACL entry on the specified file for the specified account.\n\nvoid AddFileSecurity(String^ fileName, String^ account, \n                        FileSystemRights rights, AccessControlType controlType)\n{\n    // Get a FileSecurity object that represents the \n    // current security settings.\n    FileSecurity^ fSecurity = File::GetAccessControl(fileName);\n\n    // Add the FileSystemAccessRule to the security settings. \n    fSecurity-&gt;AddAccessRule(gcnew FileSystemAccessRule\n                                   (account,rights, controlType));\n\n    // Set the new access settings.\n    File::SetAccessControl(fileName, fSecurity);\n}\n\n// Removes an ACL entry on the specified file for the specified account.\n\nvoid RemoveFileSecurity(String^ fileName, String^ account, \n                        FileSystemRights rights, AccessControlType controlType)\n{\n\n    // Get a FileSecurity object that represents the \n    // current security settings.\n    FileSecurity^ fSecurity = File::GetAccessControl(fileName);\n\n    // Remove the FileSystemAccessRule from the security settings. \n    fSecurity-&gt;RemoveAccessRule(gcnew FileSystemAccessRule\n                                      (account,rights, controlType));\n\n    // Set the new access settings.\n    File::SetAccessControl(fileName, fSecurity);\n}\n\nint main()\n{\n    try\n    {\n        String^ fileName = &quot;test.xml&quot;;\n\n        Console::WriteLine(&quot;Adding access control entry for &quot; + fileName);\n\n        // Add the access control entry to the file.\n        AddFileSecurity(fileName, &quot;MYDOMAIN\\\\MyAccount&quot;, \n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Removing access control entry from &quot; + fileName);\n\n        // Remove the access control entry from the file.\n        RemoveFileSecurity(fileName, &quot;MYDOMAIN\\\\MyAccount&quot;, \n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Done.&quot;);\n    }\n    catch (Exception^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_SetAttributes_System_String_System_IO_FileAttributes_\">\r\n    \r\n            <a id=\"System_IO_File_SetAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAttributes(String,FileAttributes)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the specified <a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a> of the file on the specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetAttributes (string path, System.IO.FileAttributes fileAttributes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileAttributes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the enumeration values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid, (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The file cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> Certain file attributes, such as <a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a> and <a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a>, can be combined. Other attributes, such as <a class=\"xref\" href=\"system.io.fileattributes\" data-linktype=\"relative-path\">FileAttributes</a>, must be used alone.  </p>\n<p> It is not possible to change the compression status of a <a class=\"xref\" href=\"system.io.file\" data-linktype=\"relative-path\">File</a> object using the SetAttributes method.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <code>GetAttributes</code> and <code>SetAttributes</code> methods by applying the <code>Archive</code> and <code>Hidden</code> attributes to a file.  </p>\n<pre><code class=\"lang-cs\" name=\"File GetAttributes#1\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test \n{\n    public static void Main() \n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // Create the file if it does not exist.\n        if (!File.Exists(path)) \n        {\n            File.Create(path);\n        }\n\n        FileAttributes attributes = File.GetAttributes(path);\n\n        if ((attributes &amp; FileAttributes.Hidden) == FileAttributes.Hidden)\n        {\n            // Show the file.\n            attributes = RemoveAttribute(attributes, FileAttributes.Hidden);\n            File.SetAttributes(path, attributes);\n            Console.WriteLine(&quot;The {0} file is no longer hidden.&quot;, path);\n        } \n        else \n        {\n            // Hide the file.\n            File.SetAttributes(path, File.GetAttributes(path) | FileAttributes.Hidden);\n            Console.WriteLine(&quot;The {0} file is now hidden.&quot;, path);\n        }\n    }\n\n    private static FileAttributes RemoveAttribute(FileAttributes attributes, FileAttributes attributesToRemove)\n    {\n        return attributes &amp; ~attributesToRemove;\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"File GetAttributes#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nint main()\n{\n   String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n   \n   // Create the file if it does not exist.\n   if (  !File::Exists( path ) )\n   {\n      File::Create( path );\n   }\n\n   if ( (File::GetAttributes( path ) &amp; FileAttributes::Hidden) == FileAttributes::Hidden )\n   {\n      \n      // Show the file.\n      File::SetAttributes(path, File::GetAttributes( path ) &amp; ~FileAttributes::Hidden);\n      Console::WriteLine( &quot;The {0} file is no longer hidden.&quot;, path );\n   }\n   else\n   {\n      \n      // Hide the file.\n      File::SetAttributes( path, static_cast&lt;FileAttributes&gt;(File::GetAttributes( path ) | FileAttributes::Hidden) );\n      Console::WriteLine( &quot;The {0} file is now hidden.&quot;, path );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"File GetAttributes#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n        &#39; Create the file if it does not exist.\n        If File.Exists(path) = False Then\n            File.Create(path)\n        End If\n\n        Dim attributes As FileAttributes\n        attributes = File.GetAttributes(path)\n\n        If (attributes And FileAttributes.Hidden) = FileAttributes.Hidden Then\n            &#39; Show the file.\n            attributes = RemoveAttribute(attributes, FileAttributes.Hidden)\n            File.SetAttributes(path, attributes)\n            Console.WriteLine(&quot;The {0} file is no longer hidden.&quot;, path)\n        Else\n            &#39; Hide the file.\n            File.SetAttributes(path, File.GetAttributes(path) Or FileAttributes.Hidden)\n            Console.WriteLine(&quot;The {0} file is now hidden.&quot;, path)\n        End If\n    End Sub\n\n    Public Shared Function RemoveAttribute(ByVal attributes As FileAttributes, ByVal attributesToRemove As FileAttributes) As FileAttributes\n        Return attributes And (Not attributesToRemove)\n    End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_SetCreationTime_System_String_System_DateTime_\">\r\n    \r\n            <a id=\"System_IO_File_SetCreationTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCreationTime(String,DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the date and time the file was created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetCreationTime (string path, DateTime creationTime);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file for which to set the creation date and time information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>creationTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> containing the value to set for the creation date and time of <code>path</code>. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while performing the operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>creationTime</code> specifies a value outside the range of dates, times, or both permitted for this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_SetCreationTimeUtc_System_String_System_DateTime_\">\r\n    \r\n            <a id=\"System_IO_File_SetCreationTimeUtc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCreationTimeUtc(String,DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the date and time, in coordinated universal time (UTC), that the file was created.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file for which to set the creation date and time information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>creationTimeUtc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> containing the value to set for the creation date and time of <code>path</code>. This value is expressed in UTC time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while performing the operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>creationTime</code> specifies a value outside the range of dates, times, or both permitted for this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_SetLastAccessTime_System_String_System_DateTime_\">\r\n    \r\n            <a id=\"System_IO_File_SetLastAccessTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLastAccessTime(String,DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the date and time the specified file was last accessed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetLastAccessTime (string path, DateTime lastAccessTime);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file for which to set the access date and time information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lastAccessTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> containing the value to set for the last access date and time of <code>path</code>. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>lastAccessTime</code> specifies a value outside the range of dates or times permitted for this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks the file system for the specified file, creating it if necessary, and then sets and gets the last access time.  </p>\n<pre><code class=\"lang-cpp\" name=\"file setlastaccess#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n      if (  !File::Exists( path ) )\n      {\n         File::Create( path );\n         \n         // Update the last access time.    \n      }\n      File::SetLastAccessTime( path, DateTime(1985,5,4) );\n      \n      // Get the creation time of a well-known directory.\n      DateTime dt = File::GetLastAccessTime( path );\n      Console::WriteLine( &quot;The last access time for this file was {0}.&quot;, dt );\n      \n      // Update the last access time.\n      File::SetLastAccessTime( path, DateTime::Now );\n      dt = File::GetLastAccessTime( path );\n      Console::WriteLine( &quot;The last access time for this file was {0}.&quot;, dt );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"file setlastaccess#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n            If File.Exists(path) = False Then\n                File.Create(path)\n            End If\n            File.SetLastAccessTime(path, New DateTime(1985, 5, 4))\n\n            &#39; Get the creation time of a well-known directory.\n            Dim dt As DateTime = File.GetLastAccessTime(path)\n            Console.WriteLine(&quot;The last access time for this file was {0}.&quot;, dt)\n\n            &#39; Update the last access time.\n            File.SetLastAccessTime(path, DateTime.Now)\n            dt = File.GetLastAccessTime(path)\n            Console.WriteLine(&quot;The last access time for this file was {0}.&quot;, dt)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"file setlastaccess#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n            if (!File.Exists(path)) \n            {\n                File.Create(path);\n                // Update the last access time.\t\n            }\n            File.SetLastAccessTime(path, new DateTime(1985,5,4));\n\n            // Get the creation time of a well-known directory.\n            DateTime dt = File.GetLastAccessTime(path);\n            Console.WriteLine(&quot;The last access time for this file was {0}.&quot;, dt);\n\t\t\t\n            // Update the last access time.\n            File.SetLastAccessTime(path, DateTime.Now);\n            dt = File.GetLastAccessTime(path);\n            Console.WriteLine(&quot;The last access time for this file was {0}.&quot;, dt);\n\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_SetLastAccessTimeUtc_System_String_System_DateTime_\">\r\n    \r\n            <a id=\"System_IO_File_SetLastAccessTimeUtc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLastAccessTimeUtc(String,DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file for which to set the access date and time information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lastAccessTimeUtc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> containing the value to set for the last access date and time of <code>path</code>. This value is expressed in UTC time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>lastAccessTimeUtc</code> specifies a value outside the range of dates or times permitted for this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_SetLastWriteTime_System_String_System_DateTime_\">\r\n    \r\n            <a id=\"System_IO_File_SetLastWriteTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLastWriteTime(String,DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the date and time that the specified file was last written to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetLastWriteTime (string path, DateTime lastWriteTime);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file for which to set the date and time information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lastWriteTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> containing the value to set for the last write date and time of <code>path</code>. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>lastWriteTime</code> specifies a value outside the range of dates or times permitted for this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks the file system for the specified file, creating the file if necessary, and then sets and gets the last write time of the file.  </p>\n<pre><code class=\"lang-cs\" name=\"file setlastwrite#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n            if (!File.Exists(path)) \n            {\n                File.Create(path);\n            } \n            else \n            {\n                // Take an action that will affect the write time.\n                File.SetLastWriteTime(path, new DateTime(1985,4,3));\n            }\n\n            // Get the creation time of a well-known directory.\n            DateTime dt = File.GetLastWriteTime(path);\n            Console.WriteLine(&quot;The last write time for this file was {0}.&quot;, dt);\n\t\t\t\n            // Update the last write time.\n            File.SetLastWriteTime(path, DateTime.Now);\n            dt = File.GetLastWriteTime(path);\n            Console.WriteLine(&quot;The last write time for this file was {0}.&quot;, dt);\n\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"file setlastwrite#1\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n            If File.Exists(path) = False Then\n                File.Create(path)\n            Else\n                &#39; Take an action that will affect the write time.\n                File.SetLastWriteTime(path, New DateTime(1985, 4, 3))\n            End If\n\n            &#39; Get the creation time of a well-known directory.\n            Dim dt As DateTime = File.GetLastWriteTime(path)\n            Console.WriteLine(&quot;The last write time for this file was {0}.&quot;, dt)\n\n            &#39; Update the last write time.\n            File.SetLastWriteTime(path, DateTime.Now)\n            dt = File.GetLastWriteTime(path)\n            Console.WriteLine(&quot;The last write time for this file was {0}.&quot;, dt)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"file setlastwrite#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      String^ path = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\MyTest.txt&quot;;\n      if (  !File::Exists( path ) )\n      {\n         File::Create( path );\n      }\n      else\n      {\n         \n         // Take an action that will affect the write time.\n         File::SetLastWriteTime( path, DateTime(1985,4,3) );\n      }\n      \n      // Get the creation time of a well-known directory.\n      DateTime dt = File::GetLastWriteTime( path );\n      Console::WriteLine( &quot;The last write time for this file was {0}.&quot;, dt );\n      \n      // Update the last write time.\n      File::SetLastWriteTime( path, DateTime::Now );\n      dt = File::GetLastWriteTime( path );\n      Console::WriteLine( &quot;The last write time for this file was {0}.&quot;, dt );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_SetLastWriteTimeUtc_System_String_System_DateTime_\">\r\n    \r\n            <a id=\"System_IO_File_SetLastWriteTimeUtc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLastWriteTimeUtc(String,DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file for which to set the date and time information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lastWriteTimeUtc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> containing the value to set for the last write date and time of <code>path</code>. This value is expressed in UTC time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>lastWriteTimeUtc</code> specifies a value outside the range of dates or times permitted for this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_WriteAllBytes_System_String_System_Byte___\">\r\n    \r\n            <a id=\"System_IO_File_WriteAllBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAllBytes(String,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteAllBytes (string path, byte[] bytes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The bytes to write to the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code> or the byte array is empty.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Given a byte array and a file path, this method opens the specified file, writes the contents of the byte array to the file, and then closes the file.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_WriteAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__\">\r\n    \r\n            <a id=\"System_IO_File_WriteAllLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAllLines(String,IEnumerable&lt;String&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new file, writes a collection of strings to the file, and then closes the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteAllLines (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>contents</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The lines to write to the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Either<code> path </code>or <code>contents</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specifies a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> is a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default behavior of the WriteAllLines method is to write out data by using UTF-8 encoding without a byte order mark (BOM). If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <a class=\"xref\" href=\"system.io.file#System_IO_File_WriteAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__System_Text_Encoding_\" data-linktype=\"relative-path\">WriteAllLines(String,IEnumerable&lt;String&gt;,Encoding)</a> method overload with <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF8_\" data-linktype=\"relative-path\">UTF8</a> encoding.  </p>\n<p> If the target file already exists, it is overwritten.  </p>\n<p> You can use this method to create the contents for a collection class that takes an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> in its constructor, such as a <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1__ctor_\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1__ctor_\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a>, or a <a class=\"xref\" href=\"system.collections.generic.sortedset-1#System_Collections_Generic_SortedSet_1__ctor_\" data-linktype=\"relative-path\">SortedSet&lt;T&gt;</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes selected lines from a sample data file to a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.File.WriteAllAppendAll#1\">using System;\nusing System.IO;\nusing System.Linq;\n\nclass Program\n{\n\tstatic string dataPath = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;imestamps.txt&quot;;\n\n\tstatic void Main(string[] args)\n\t{\n\t\tCreateSampleFile();\n\n\t\tvar JulyWeekends = from line in File.ReadLines(dataPath)\n\t\t\t\t\t\t   where (line.StartsWith(&quot;Saturday&quot;) || \n\t\t\t\t\t\t   line.StartsWith(&quot;Sunday&quot;)) &amp; \n\t\t\t\t\t\t   line.Contains(&quot;July&quot;)\n\t\t\t\t\t\t   select line;\n\n\t\tFile.WriteAllLines(@&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\selectedDays.txt&quot;, JulyWeekends);\n\n\t\tvar MarchMondays = from line in File.ReadLines(dataPath)\n\t\t\t\t\t\t   where line.StartsWith(&quot;Monday&quot;) &amp;&amp; \n\t\t\t\t\t\t   line.Contains(&quot;March&quot;)\n\t\t\t\t\t\t   select line;\n\n\t\tFile.AppendAllLines(@&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\selectedDays.txt&quot;, MarchMondays);\n\t}\n\n\tstatic void CreateSampleFile()\n\t{\n\t\tDateTime TimeStamp = new DateTime(1700, 1, 1);\n\n\t\tusing (StreamWriter sw = new StreamWriter(dataPath))\n\t\t{\n\t\t\tfor (int i = 0; i &lt; 500; i++)\n\t\t\t{\n\t\t\t\tDateTime TS1 = TimeStamp.AddYears(i);\n\t\t\t\tDateTime TS2 = TS1.AddMonths(i);\n\t\t\t\tDateTime TS3 = TS2.AddDays(i);\n\t\t\t\tsw.WriteLine(TS3.ToLongDateString());\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.File.WriteAllAppendAll#1\">Imports System\nImports System.IO\nImports System.Linq\n\nClass Program\n    Shared dataPath As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;imestamps.txt&quot;\n\n    Public Shared Sub Main(ByVal args As String())\n        CreateSampleFile()\n\n        Dim JulyWeekends = From line In File.ReadLines(dataPath) _\n            Where (line.StartsWith(&quot;Saturday&quot;) OrElse _\n            line.StartsWith(&quot;Sunday&quot;)) And line.Contains(&quot;July&quot;) _\n            Select line\n\n        File.WriteAllLines(&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\selectedDays.txt&quot;, JulyWeekends)\n\n        Dim MarchMondays = From line In File.ReadLines(dataPath) _\n            Where line.StartsWith(&quot;Monday&quot;) AndAlso line.Contains(&quot;March&quot;) _\n            Select line\n\n        File.AppendAllLines(&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\selectedDays.txt&quot;, MarchMondays)\n    End Sub\n\n    Private Shared Sub CreateSampleFile()\n        Dim TimeStamp As New DateTime(1700, 1, 1)\n\n        Using sw As New StreamWriter(dataPath)\n            For i As Integer = 0 To 499\n                Dim TS1 As DateTime = TimeStamp.AddYears(i)\n                Dim TS2 As DateTime = TS1.AddMonths(i)\n                Dim TS3 As DateTime = TS2.AddDays(i)\n\n                sw.WriteLine(TS3.ToLongDateString())\n            Next\n        End Using\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_WriteAllLines_System_String_System_String___\">\r\n    \r\n            <a id=\"System_IO_File_WriteAllLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAllLines(String,String[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new file, write the specified string array to the file, and then closes the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteAllLines (string path, string[] contents);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>contents</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string array to write to the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Either <code>path</code> or <code>contents</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the target file already exists, it is overwritten.  </p>\n<p> The default behavior of the WriteAllLines method is to write out data using UTF-8 encoding without a byte order mark (BOM). If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the [WriteAllLines(String, String&lt;xref:System.IO.File.WriteAllLines%28System.String%2CSystem.String%5B%5D%2CSystem.Text.Encoding%29&gt; method overload with <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF8_\" data-linktype=\"relative-path\">UTF8</a> encoding.  </p>\n<p> Given a string array and a file path, this method opens the specified file, writes the string array to the file, and then closes the file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the WriteAllLines method to write text to a file. In this example a file is created, if it doesn&#39;t already exist, and text is added to it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.File.AllLines#00\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim sw As StreamWriter\n\n        &#39; This text is added only once to the file.\n        If File.Exists(path) = False Then\n\n            &#39; Create a file to write to.\n            Dim createText() As String = {&quot;Hello&quot;, &quot;And&quot;, &quot;Welcome&quot;}\n            File.WriteAllLines(path, createText)\n        End If\n\n        &#39; This text is always added, making the file longer over time\n        &#39; if it is not deleted.\n        Dim appendText As String = &quot;This is extra text&quot; + Environment.NewLine\n        File.AppendAllText(path, appendText)\n\n        &#39; Open the file to read from.\n        Dim readText() As String = File.ReadAllLines(path)\n        Dim s As String\n        For Each s In readText\n            Console.WriteLine(s)\n        Next\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.File.AllLines#00\">using System;\nusing System.IO;\nclass Test\n{\n    public static void Main()\n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // This text is added only once to the file.\n        if (!File.Exists(path))\n        {\n            // Create a file to write to.\n            string[] createText = { &quot;Hello&quot;, &quot;And&quot;, &quot;Welcome&quot; };\n            File.WriteAllLines(path, createText);\n        }\n\n        // This text is always added, making the file longer over time\n        // if it is not deleted.\n        string appendText = &quot;This is extra text&quot; + Environment.NewLine;\n        File.AppendAllText(path, appendText);\n\n        // Open the file to read from.\n        string[] readText = File.ReadAllLines(path);\n        foreach (string s in readText)\n        {\n            Console.WriteLine(s);\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_WriteAllLines_System_String_System_Collections_Generic_IEnumerable_System_String__System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_IO_File_WriteAllLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAllLines(String,IEnumerable&lt;String&gt;,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteAllLines (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Text.Encoding encoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>contents</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The lines to write to the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character encoding to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Either<code> path</code>,<code> contents</code>, or <code>encoding</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specifies a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> is a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the target file already exists, it is overwritten.  </p>\n<p> You can use this method to create a file that contains the following:  </p>\n<ul>\n<li><p>The results of a <a href=\"../Topic/LINQ%20to%20Objects.md\" data-linktype=\"relative-path\">LINQ to Objects</a> query on the lines of a file, as obtained by using the <a class=\"xref\" href=\"system.io.file#System_IO_File_ReadLines_\" data-linktype=\"relative-path\">ReadLines</a> method.  </p>\n</li>\n<li><p>The contents of a collection that implements an <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of strings.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_WriteAllLines_System_String_System_String___System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_IO_File_WriteAllLines_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAllLines(String,String[],Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteAllLines (string path, string[] contents, System.Text.Encoding encoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>contents</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string array to write to the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object that represents the character encoding applied to the string array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Either <code>path</code> or <code>contents</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the target file already exists, it is overwritten.  </p>\n<p> Given a string array and a file path, this method opens the specified file, writes the string array to the file using the specified encoding, and then closes the file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the WriteAllLines method to write text to a file. In this example a file is created, if it doesn&#39;t already exist, and text is added to it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.File.AllLines_Encoding#00\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim sw As StreamWriter\n\n        &#39; This text is added only once to the file.\n        If File.Exists(path) = False Then\n\n            &#39; Create a file to write to.\n            Dim createText() As String = {&quot;Hello&quot;, &quot;And&quot;, &quot;Welcome&quot;}\n            File.WriteAllLines(path, createText, Encoding.UTF8)\n        End If\n\n        &#39; This text is always added, making the file longer over time\n        &#39; if it is not deleted.\n        Dim appendText As String = &quot;This is extra text&quot; + Environment.NewLine\n        File.AppendAllText(path, appendText, Encoding.UTF8)\n\n        &#39; Open the file to read from.\n        Dim readText() As String = File.ReadAllLines(path, Encoding.UTF8)\n        Dim s As String\n        For Each s In readText\n            Console.WriteLine(s)\n        Next\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.File.AllLines_Encoding#00\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test\n{\n    public static void Main()\n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // This text is added only once to the file.\n        if (!File.Exists(path))\n        {\n            // Create a file to write to.\n            string[] createText = { &quot;Hello&quot;, &quot;And&quot;, &quot;Welcome&quot; };\n            File.WriteAllLines(path, createText, Encoding.UTF8);\n        }\n\n        // This text is always added, making the file longer over time\n        // if it is not deleted.\n        string appendText = &quot;This is extra text&quot; + Environment.NewLine;\n        File.AppendAllText(path, appendText, Encoding.UTF8);\n\n        // Open the file to read from.\n        string[] readText = File.ReadAllLines(path, Encoding.UTF8);\n        foreach (string s in readText)\n        {\n            Console.WriteLine(s);\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_WriteAllText_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_File_WriteAllText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAllText(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteAllText (string path, string contents);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>contents</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to write to the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code> or <code>contents</code> is empty.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses UTF-8 encoding without a Byte-Order Mark (BOM), so using the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetPreamble_\" data-linktype=\"relative-path\">GetPreamble</a> method will return an empty byte array. If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <a class=\"xref\" href=\"system.io.file#System_IO_File_WriteAllText_System_String_System_String_System_Text_Encoding_\" data-linktype=\"relative-path\">WriteAllText(String,String,Encoding)</a> method overload with <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF8_\" data-linktype=\"relative-path\">UTF8</a> encoding.  </p>\n<p> Given a string and a file path, this method opens the specified file, writes the string to the file, and then closes the file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the WriteAllText method to write text to a file. In this example a file is created, if it doesn&#39;t already exist, and text is added to it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.File.AllText#00\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n\n        &#39; This text is added only once to the file.\n        If File.Exists(path) = False Then\n\n            &#39; Create a file to write to.\n            Dim createText As String = &quot;Hello and Welcome&quot; + Environment.NewLine\n            File.WriteAllText(path, createText)\n        End If\n\n        &#39; This text is always added, making the file longer over time\n        &#39; if it is not deleted.\n        Dim appendText As String = &quot;This is extra text&quot; + Environment.NewLine\n        File.AppendAllText(path, appendText)\n\n        &#39; Open the file to read from.\n        Dim readText As String = File.ReadAllText(path)\n        Console.WriteLine(readText)\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.File.AllText#00\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test\n{\n    public static void Main()\n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // This text is added only once to the file.\n        if (!File.Exists(path))\n        {\n            // Create a file to write to.\n            string createText = &quot;Hello and Welcome&quot; + Environment.NewLine;\n            File.WriteAllText(path, createText);\n        }\n\n        // This text is always added, making the file longer over time\n        // if it is not deleted.\n        string appendText = &quot;This is extra text&quot; + Environment.NewLine;\n        File.AppendAllText(path, appendText);\n\n        // Open the file to read from.\n        string readText = File.ReadAllText(path);\n        Console.WriteLine(readText);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_File_WriteAllText_System_String_System_String_System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_IO_File_WriteAllText_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteAllText(String,String,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteAllText (string path, string contents, System.Text.Encoding encoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file to write to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>contents</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string to write to the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encoding to apply to the string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code> or <code>contents</code> is empty.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> specified a file that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> <code>path</code> specified a directory.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is in an invalid format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Given a string and a file path, this method opens the specified file, writes the string to the file using the specified encoding, and then closes the file. The file handle is guaranteed to be closed by this method, even if exceptions are raised.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the WriteAllText method to write text to a file. In this example a file is created, if it doesn&#39;t already exist, and text is added to it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.File.AllText_Encoding#00\">using System;\nusing System.IO;\nusing System.Text;\n\nclass Test\n{\n    public static void Main()\n    {\n        string path = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;;\n\n        // This text is added only once to the file.\n        if (!File.Exists(path))\n        {\n            // Create a file to write to.\n            string createText = &quot;Hello and Welcome&quot; + Environment.NewLine;\n            File.WriteAllText(path, createText, Encoding.UTF8);\n        }\n\n        // This text is always added, making the file longer over time\n        // if it is not deleted.\n        string appendText = &quot;This is extra text&quot; + Environment.NewLine;\n        File.AppendAllText(path, appendText, Encoding.UTF8);\n\n        // Open the file to read from.\n        string readText = File.ReadAllText(path);\n        Console.WriteLine(readText);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.File.AllText_Encoding#00\">Imports System\nImports System.IO\nImports System.Text\n\nPublic Class Test\n    Public Shared Sub Main()\n        Dim path As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\MyTest.txt&quot;\n        Dim sw As StreamWriter\n\n        &#39; This text is added only once to the file.\n        If File.Exists(path) = False Then\n\n            &#39; Create a file to write to.\n            Dim createText As String = &quot;Hello and Welcome&quot; + Environment.NewLine\n            File.WriteAllText(path, createText, Encoding.UTF8)\n        End If\n\n        &#39; This text is always added, making the file longer over time\n        &#39; if it is not deleted.\n        Dim appendText As String = &quot;This is extra text&quot; + Environment.NewLine\n        File.AppendAllText(path, appendText, Encoding.UTF8)\n\n        &#39; Open the file to read from.\n        Dim readText As String = File.ReadAllText(path)\n        Console.WriteLine(readText)\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.File.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.File.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.File\">\r\n<meta name=\"APIName\" content=\"System.IO.File.AppendAllLines\">\r\n<meta name=\"APIName\" content=\"System.IO.File.AppendAllText\">\r\n<meta name=\"APIName\" content=\"System.IO.File.AppendText\">\r\n<meta name=\"APIName\" content=\"System.IO.File.Copy\">\r\n<meta name=\"APIName\" content=\"System.IO.File.Create\">\r\n<meta name=\"APIName\" content=\"System.IO.File.CreateText\">\r\n<meta name=\"APIName\" content=\"System.IO.File.Decrypt\">\r\n<meta name=\"APIName\" content=\"System.IO.File.Delete\">\r\n<meta name=\"APIName\" content=\"System.IO.File.Encrypt\">\r\n<meta name=\"APIName\" content=\"System.IO.File.Exists\">\r\n<meta name=\"APIName\" content=\"System.IO.File.GetAccessControl\">\r\n<meta name=\"APIName\" content=\"System.IO.File.GetAttributes\">\r\n<meta name=\"APIName\" content=\"System.IO.File.GetCreationTime\">\r\n<meta name=\"APIName\" content=\"System.IO.File.GetCreationTimeUtc\">\r\n<meta name=\"APIName\" content=\"System.IO.File.GetLastAccessTime\">\r\n<meta name=\"APIName\" content=\"System.IO.File.GetLastAccessTimeUtc\">\r\n<meta name=\"APIName\" content=\"System.IO.File.GetLastWriteTime\">\r\n<meta name=\"APIName\" content=\"System.IO.File.GetLastWriteTimeUtc\">\r\n<meta name=\"APIName\" content=\"System.IO.File.Move\">\r\n<meta name=\"APIName\" content=\"System.IO.File.Open\">\r\n<meta name=\"APIName\" content=\"System.IO.File.OpenRead\">\r\n<meta name=\"APIName\" content=\"System.IO.File.OpenText\">\r\n<meta name=\"APIName\" content=\"System.IO.File.OpenWrite\">\r\n<meta name=\"APIName\" content=\"System.IO.File.ReadAllBytes\">\r\n<meta name=\"APIName\" content=\"System.IO.File.ReadAllLines\">\r\n<meta name=\"APIName\" content=\"System.IO.File.ReadAllText\">\r\n<meta name=\"APIName\" content=\"System.IO.File.ReadLines\">\r\n<meta name=\"APIName\" content=\"System.IO.File.Replace\">\r\n<meta name=\"APIName\" content=\"System.IO.File.SetAccessControl\">\r\n<meta name=\"APIName\" content=\"System.IO.File.SetAttributes\">\r\n<meta name=\"APIName\" content=\"System.IO.File.SetCreationTime\">\r\n<meta name=\"APIName\" content=\"System.IO.File.SetCreationTimeUtc\">\r\n<meta name=\"APIName\" content=\"System.IO.File.SetLastAccessTime\">\r\n<meta name=\"APIName\" content=\"System.IO.File.SetLastAccessTimeUtc\">\r\n<meta name=\"APIName\" content=\"System.IO.File.SetLastWriteTime\">\r\n<meta name=\"APIName\" content=\"System.IO.File.SetLastWriteTimeUtc\">\r\n<meta name=\"APIName\" content=\"System.IO.File.WriteAllBytes\">\r\n<meta name=\"APIName\" content=\"System.IO.File.WriteAllLines\">\r\n<meta name=\"APIName\" content=\"System.IO.File.WriteAllText\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a018d800-275e-49a1-412f-568ba72ec4c5\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of  objects.  \n To browse the .NET Framework source code for this type, see…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.File\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.File.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.File.yml","open_to_public_contributors":true,"api_name":["System.IO.File","System.IO.File.AppendAllLines","System.IO.File.AppendAllText","System.IO.File.AppendText","System.IO.File.Copy","System.IO.File.Create","System.IO.File.CreateText","System.IO.File.Decrypt","System.IO.File.Delete","System.IO.File.Encrypt","System.IO.File.Exists","System.IO.File.GetAccessControl","System.IO.File.GetAttributes","System.IO.File.GetCreationTime","System.IO.File.GetCreationTimeUtc","System.IO.File.GetLastAccessTime","System.IO.File.GetLastAccessTimeUtc","System.IO.File.GetLastWriteTime","System.IO.File.GetLastWriteTimeUtc","System.IO.File.Move","System.IO.File.Open","System.IO.File.OpenRead","System.IO.File.OpenText","System.IO.File.OpenWrite","System.IO.File.ReadAllBytes","System.IO.File.ReadAllLines","System.IO.File.ReadAllText","System.IO.File.ReadLines","System.IO.File.Replace","System.IO.File.SetAccessControl","System.IO.File.SetAttributes","System.IO.File.SetCreationTime","System.IO.File.SetCreationTimeUtc","System.IO.File.SetLastAccessTime","System.IO.File.SetLastAccessTimeUtc","System.IO.File.SetLastWriteTime","System.IO.File.SetLastWriteTimeUtc","System.IO.File.WriteAllBytes","System.IO.File.WriteAllLines","System.IO.File.WriteAllText"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.File","System::IO::File","System.IO.File.AppendAllLines","System::IO::File::AppendAllLines","System.IO.File.AppendAllText","System::IO::File::AppendAllText","System.IO.File.AppendText","System::IO::File::AppendText","System.IO.File.Copy","System::IO::File::Copy","System.IO.File.Create","System::IO::File::Create","System.IO.File.CreateText","System::IO::File::CreateText","System.IO.File.Decrypt","System::IO::File::Decrypt","System.IO.File.Delete","System::IO::File::Delete","System.IO.File.Encrypt","System::IO::File::Encrypt","System.IO.File.Exists","System::IO::File::Exists","System.IO.File.GetAccessControl","System::IO::File::GetAccessControl","System.IO.File.GetAttributes","System::IO::File::GetAttributes","System.IO.File.GetCreationTime","System::IO::File::GetCreationTime","System.IO.File.GetCreationTimeUtc","System::IO::File::GetCreationTimeUtc","System.IO.File.GetLastAccessTime","System::IO::File::GetLastAccessTime","System.IO.File.GetLastAccessTimeUtc","System::IO::File::GetLastAccessTimeUtc","System.IO.File.GetLastWriteTime","System::IO::File::GetLastWriteTime","System.IO.File.GetLastWriteTimeUtc","System::IO::File::GetLastWriteTimeUtc","System.IO.File.Move","System::IO::File::Move","System.IO.File.Open","System::IO::File::Open","System.IO.File.OpenRead","System::IO::File::OpenRead","System.IO.File.OpenText","System::IO::File::OpenText","System.IO.File.OpenWrite","System::IO::File::OpenWrite","System.IO.File.ReadAllBytes","System::IO::File::ReadAllBytes","System.IO.File.ReadAllLines","System::IO::File::ReadAllLines","System.IO.File.ReadAllText","System::IO::File::ReadAllText","System.IO.File.ReadLines","System::IO::File::ReadLines","System.IO.File.Replace","System::IO::File::Replace","System.IO.File.SetAccessControl","System::IO::File::SetAccessControl","System.IO.File.SetAttributes","System::IO::File::SetAttributes","System.IO.File.SetCreationTime","System::IO::File::SetCreationTime","System.IO.File.SetCreationTimeUtc","System::IO::File::SetCreationTimeUtc","System.IO.File.SetLastAccessTime","System::IO::File::SetLastAccessTime","System.IO.File.SetLastAccessTimeUtc","System::IO::File::SetLastAccessTimeUtc","System.IO.File.SetLastWriteTime","System::IO::File::SetLastWriteTime","System.IO.File.SetLastWriteTimeUtc","System::IO::File::SetLastWriteTimeUtc","System.IO.File.WriteAllBytes","System::IO::File::WriteAllBytes","System.IO.File.WriteAllLines","System::IO::File::WriteAllLines","System.IO.File.WriteAllText","System::IO::File::WriteAllText"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a018d800-275e-49a1-412f-568ba72ec4c5","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO/File.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"File class | Microsoft Docs","_op_ogTitle":"File class","description":"Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of  objects.  \n To browse the .NET Framework source code for this type, see…","toc_asset_id":"_splitted/System.IO/toc.json","toc_rel":"_splitted/System.IO/toc.json","source_url":"","ms.assetid":"System.IO.File","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.file","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.file","fileRelativePath":"System.IO.File.html"},"themesRelativePathToOutputRoot":"_themes/"}