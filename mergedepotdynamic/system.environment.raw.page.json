{"content":"    \r\n    <h1 id=\"System_Environment\">\r\n      <span class=\"lang-csharp\">Environment</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic static class Environment</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Environment</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use the Environment class to retrieve information such as command-line arguments, the exit code, environment variable settings, contents of the call stack, time since last system boot, and the version of the common language runtime.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_CommandLine\" data-linktype=\"self-bookmark\">CommandLine</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the command line for this process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_CurrentDirectory\" data-linktype=\"self-bookmark\">CurrentDirectory</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the fully qualified path of the current working directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_CurrentManagedThreadId\" data-linktype=\"self-bookmark\">CurrentManagedThreadId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a unique identifier for the current managed thread.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_ExitCode\" data-linktype=\"self-bookmark\">ExitCode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the exit code of the process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_HasShutdownStarted\" data-linktype=\"self-bookmark\">HasShutdownStarted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the current application domain is being unloaded or the common language runtime (CLR) is shutting down.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_Is64BitOperatingSystem\" data-linktype=\"self-bookmark\">Is64BitOperatingSystem</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current operating system is a 64-bit operating system.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_Is64BitProcess\" data-linktype=\"self-bookmark\">Is64BitProcess</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current process is a 64-bit process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_MachineName\" data-linktype=\"self-bookmark\">MachineName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the NetBIOS name of this local computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_NewLine\" data-linktype=\"self-bookmark\">NewLine</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the newline string defined for this environment.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_OSVersion\" data-linktype=\"self-bookmark\">OSVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.operatingsystem\" data-linktype=\"relative-path\">OperatingSystem</a> object that contains the current platform identifier and version number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_ProcessorCount\" data-linktype=\"self-bookmark\">ProcessorCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of processors on the current machine.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_StackTrace\" data-linktype=\"self-bookmark\">StackTrace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets current stack trace information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_SystemDirectory\" data-linktype=\"self-bookmark\">SystemDirectory</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the fully qualified path of the system directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_SystemPageSize\" data-linktype=\"self-bookmark\">SystemPageSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of bytes in the operating system&#39;s memory page.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_TickCount\" data-linktype=\"self-bookmark\">TickCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of milliseconds elapsed since the system started.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_UserDomainName\" data-linktype=\"self-bookmark\">UserDomainName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the network domain name associated with the current user.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_UserInteractive\" data-linktype=\"self-bookmark\">UserInteractive</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current process is running in user interactive mode.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_UserName\" data-linktype=\"self-bookmark\">UserName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the user name of the person who is currently logged on to the Windows operating system.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_Version\" data-linktype=\"self-bookmark\">Version</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object that describes the major, minor, build, and revision numbers of the common language runtime.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_WorkingSet\" data-linktype=\"self-bookmark\">WorkingSet</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the amount of physical memory mapped to the process context.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_Exit_System_Int32_\" data-linktype=\"self-bookmark\">Exit(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Terminates this process and returns an exit code to the operating system.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_ExpandEnvironmentVariables_System_String_\" data-linktype=\"self-bookmark\">ExpandEnvironmentVariables(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the name of each environment variable embedded in the specified string with the string equivalent of the value of the variable, then returns the resulting string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_FailFast_System_String_\" data-linktype=\"self-bookmark\">FailFast(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message in error reporting to Microsoft.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_FailFast_System_String_System_Exception_\" data-linktype=\"self-bookmark\">FailFast(String,Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and exception information in error reporting to Microsoft.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_GetCommandLineArgs\" data-linktype=\"self-bookmark\">GetCommandLineArgs()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string array containing the command-line arguments for the current process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_GetEnvironmentVariable_System_String_\" data-linktype=\"self-bookmark\">GetEnvironmentVariable(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the value of an environment variable from the current process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_GetEnvironmentVariable_System_String_System_EnvironmentVariableTarget_\" data-linktype=\"self-bookmark\">GetEnvironmentVariable(String,EnvironmentVariableTarget)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the value of an environment variable from the current process or from the Windows operating system registry key for the current user or local machine.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_GetEnvironmentVariables\" data-linktype=\"self-bookmark\">GetEnvironmentVariables()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves all environment variable names and their values from the current process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_GetEnvironmentVariables_System_EnvironmentVariableTarget_\" data-linktype=\"self-bookmark\">GetEnvironmentVariables(EnvironmentVariableTarget)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves all environment variable names and their values from the current process, or from the Windows operating system registry key for the current user or local machine.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_GetFolderPath_System_Environment_SpecialFolder_\" data-linktype=\"self-bookmark\">GetFolderPath(Environment+SpecialFolder)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the path to the system special folder that is identified by the specified enumeration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_GetFolderPath_System_Environment_SpecialFolder_System_Environment_SpecialFolderOption_\" data-linktype=\"self-bookmark\">GetFolderPath(Environment+SpecialFolder,Environment+SpecialFolderOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the path to the system special folder that is identified by the specified enumeration, and uses a specified option for accessing special folders.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_GetLogicalDrives\" data-linktype=\"self-bookmark\">GetLogicalDrives()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of string containing the names of the logical drives on the current computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_SetEnvironmentVariable_System_String_System_String_\" data-linktype=\"self-bookmark\">SetEnvironmentVariable(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates, modifies, or deletes an environment variable stored in the current process.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Environment_SetEnvironmentVariable_System_String_System_String_System_EnvironmentVariableTarget_\" data-linktype=\"self-bookmark\">SetEnvironmentVariable(String,String,EnvironmentVariableTarget)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates, modifies, or deletes an environment variable stored in the current process or in the Windows operating system registry key reserved for the current user or local machine.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_CommandLine\">\r\n    \r\n            <a id=\"System_Environment_CommandLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CommandLine</div>        \r\n          </div>\r\n    \r\n            <p>Gets the command line for this process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string CommandLine { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing command-line arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property provides access to the program name and any arguments specified on the command line when the current process was started.  </p>\n<p> The program name can  include path information, but is not required to do so. Use the <a class=\"xref\" href=\"system.environment#System_Environment_GetCommandLineArgs_\" data-linktype=\"relative-path\">GetCommandLineArgs</a> method to retrieve the command-line information parsed and stored in an array of strings.  </p>\n<p> The maximum size of the command-line buffer is not set to a specific number of characters; it varies depending on the Windows operating system that is running on the computer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays its own command line.  </p>\n<pre><code class=\"lang-cpp\" name=\"environment.commandline#1\">using namespace System;\n\nint main()\n{\n   Console::WriteLine();\n   \n   //  Invoke this sample with an arbitrary set of command line arguments.\n   Console::WriteLine( &quot;CommandLine: {0}&quot;, Environment::CommandLine );\n}\n/*\nThe example displays output like the following:\n\nC:\\&gt;env0 ARBITRARY TEXT\n\nCommandLine: env0 ARBITRARY TEXT\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"environment.commandline#1\">using System;\n\nclass Example\n{\n    public static void Main() \n    {\n       Console.WriteLine();\n       //  Invoke this sample with an arbitrary set of command line arguments.\n       Console.WriteLine(&quot;CommandLine: {0}&quot;, Environment.CommandLine);\n    }\n}\n// The example displays output like the following:\n//       C:\\&gt;env0 ARBITRARY TEXT\n//       \n//       CommandLine: env0 ARBITRARY TEXT\n</code></pre><pre><code class=\"lang-vb\" name=\"environment.commandline#1\">Class Example\n   Public Shared Sub Main()\n      Console.WriteLine()\n      &#39;  Invoke this sample with an arbitrary set of command line arguments.\n      Console.WriteLine(&quot;CommandLine: {0}&quot;, Environment.CommandLine)\n   End Sub \nEnd Class \n&#39; The example displays output like the following:\n&#39;       C:\\&gt;CommandLine ARBITRARY TEXT\n&#39;       \n&#39;       CommandLine: CommandLine ARBITRARY TEXT\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_CurrentDirectory\">\r\n    \r\n            <a id=\"System_Environment_CurrentDirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentDirectory</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the fully qualified path of the current working directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string CurrentDirectory { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing a directory path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Attempted to set to an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>Attempted to set to <code>null.</code></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>Attempted to set a local path that cannot be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the appropriate permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By definition, if this process starts in the root directory of a local or network drive, the value of this property is the drive name followed by a trailing slash (for example, &quot;C:\\&quot;). If this process starts in a subdirectory, the value of this property is the drive and subdirectory path, without a trailing slash (for example, &quot;C:\\mySubDirectory&quot;).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates setting the CurrentDirectory property.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Environment#4\">using namespace System;\nusing namespace System::IO;\n\nvoid main()\n{\n      // Change the directory to %WINDIR%\n      Environment::CurrentDirectory = Environment::GetEnvironmentVariable( &quot;windir&quot; );\n      DirectoryInfo^ info = gcnew DirectoryInfo( &quot;.&quot; );\n\n      Console::WriteLine(&quot;Directory Info:   {0}&quot;, info-&gt;FullName);\n}\n// The example displays output like the following:\n//        Directory Info:   C:\\windows\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Environment#4\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Change the directory to %WINDIR%\n      Environment.CurrentDirectory = Environment.GetEnvironmentVariable(&quot;windir&quot;);\n      DirectoryInfo info = new DirectoryInfo(&quot;.&quot;);\n\n      Console.WriteLine(&quot;Directory Info:   &quot; + info.FullName);\n   }\n}\n// The example displays output like the following:\n//        Directory Info:   C:\\windows\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Environment#4\">Imports System.IO\n\nModule Example\n   Public Sub Main()\n        &#39; Change the directory to %WINDIR%\n        Environment.CurrentDirectory = Environment.GetEnvironmentVariable(&quot;windir&quot;)\n        Dim info As New DirectoryInfo(&quot;.&quot;)\n        Console.WriteLine(&quot;Directory Info:   &quot; + info.FullName)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;        Directory Info:   C:\\windows\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_CurrentManagedThreadId\">\r\n    \r\n            <a id=\"System_Environment_CurrentManagedThreadId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CurrentManagedThreadId</div>        \r\n          </div>\r\n    \r\n            <p>Gets a unique identifier for the current managed thread.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int CurrentManagedThreadId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that represents a unique identifier for this managed thread.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_ExitCode\">\r\n    \r\n            <a id=\"System_Environment_ExitCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExitCode</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the exit code of the process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ExitCode { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer containing the exit code. The default value is 0 (zero), which indicates that the process completed successfully.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>Main</code> method returns <code>void</code>, you can use this property to set the exit code that will be returned to the calling environment. If <code>Main</code> does not return <code>void</code>, this property is ignored. The initial value of this property is zero.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> The ExitCode property is a signed 32-bit integer. To prevent the property from returning a negative exit code, you should not use values greater than or equal to 0x80000000.  </p>\n</div>\n<p> Use a non-zero number to indicate an error. In your application, you can define your own error codes in an enumeration, and return the appropriate error code based on the scenario. For example, return a value of 1 to indicate that the required file is not present and a value of 2 to indicate that the file is in the wrong format. For a list of exit codes used by the Windows operating system, see <a href=\"http://msdn.microsoft.com/library/ms681381(v=vs.85)\" data-linktype=\"external\">System Error Codes</a> in the Windows documentation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following is a simple app named Double.exe that doubles an integer value passed to it as a command-line argument. The value assigns error codes to the ExitCode property to indicate error conditions. Note that you must add a reference to the System.Numerics.dll assembly to successfully compile the example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Environment.ExitCode#1\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   private const int ERROR_BAD_ARGUMENTS = 0xA0;\n   private const int ERROR_ARITHMETIC_OVERFLOW = 0x216;\n   private const int ERROR_INVALID_COMMAND_LINE = 0x667;\n\n   public static void Main()\n   {\n      string[] args = Environment.GetCommandLineArgs();\n      if (args.Length == 1) {\n         Environment.ExitCode = ERROR_INVALID_COMMAND_LINE;  \n      }\n      else {\n         BigInteger value = 0;\n         if (BigInteger.TryParse(args[1], out value))\n            if (value &lt;= Int32.MinValue || value &gt;= Int32.MaxValue)\n               Environment.ExitCode = ERROR_ARITHMETIC_OVERFLOW;\n            else\n               Console.WriteLine(&quot;Result: {0}&quot;, value * 2);\n\n         else\n            Environment.ExitCode = ERROR_BAD_ARGUMENTS;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Environment.ExitCode#1\">Imports System.Numerics\n\nModule Example\n   Private Const ERROR_BAD_ARGUMENTS As Integer = &amp;hA0\n   Private Const ERROR_ARITHMETIC_OVERFLOW As Integer = &amp;h216\n   Private Const ERROR_INVALID_COMMAND_LINE As Integer = &amp;h667\n    \n   Public Sub Main()\n      Dim args() As String = Environment.GetCommandLineArgs()\n      If args.Length = 1 Then\n         Environment.ExitCode = ERROR_INVALID_COMMAND_LINE  \n      Else\n         Dim value As BigInteger = 0\n         If BigInteger.TryParse(args(1), value) Then\n            If value &lt;= Int32.MinValue Or value &gt;= Int32.MaxValue\n               Environment.ExitCode = ERROR_ARITHMETIC_OVERFLOW\n            Else\n               Console.WriteLine(&quot;Result: {0}&quot;, value * 2)\n            End If\n         Else\n            Environment.ExitCode = ERROR_BAD_ARGUMENTS\n         End If     \n      End If\n   End Sub\nEnd Module\n</code></pre><p> The example can then be invoked from a batch file such as the following, which makes its error codes accessible by using the <code>ERRORLEVEL</code> command.  </p>\n<pre><code>\necho off  \nDouble.exe %1  \nIf errorlevel 1639 goto NoArg   \nif errorlevel 534 goto Overflow  \nif errorlevel 160 goto BadArg  \nif errorlevel 0 echo Completed Successfully   \ngoto :EOF  \n\n:NoArg  \necho Missing argument  \ngoto :EOF  \n\n: Overflow  \necho Arithmetic overflow  \ngoto :EOF  \n\n:BadArg  \necho Invalid argument  \ngoto :EOF\n</code></pre><p> The following shows some sample output produced by invoking the batch file.  </p>\n<pre><code class=\"lang-Output\">\n&gt;getdouble 123&gt;echo offResult: 246Completed Successfully&gt;getdouble 5912323109093&gt;echo offArithmetic overflow&gt;getdouble&gt;echo offMissing argument&gt;getdouble &quot;a string&quot;&gt;echo offInvalid argument\n</code></pre><p> Note that code for Double.exe is identical in function to the following example, except that the former defines an entry point named <code>Main</code> that has no return value, whereas this example defines an entry point named <code>Main</code> that returns an integer.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Environment.ExitCode#2\">using System;\nusing System.Numerics;\n\npublic class Example\n{\n   private const int ERROR_SUCCESS = 0;\n   private const int ERROR_BAD_ARGUMENTS = 0xA0;\n   private const int ERROR_ARITHMETIC_OVERFLOW = 0x216;\n   private const int ERROR_INVALID_COMMAND_LINE = 0x667;\n\n   public static int Main()\n   {\n      string[] args = Environment.GetCommandLineArgs();\n      if (args.Length == 1) {\n         return ERROR_INVALID_COMMAND_LINE;  \n      }\n      else {\n         BigInteger value = 0;\n         if (BigInteger.TryParse(args[1], out value))\n            if (value &lt;= Int32.MinValue || value &gt;= Int32.MaxValue)\n               return ERROR_ARITHMETIC_OVERFLOW;\n            else\n               Console.WriteLine(&quot;Result: {0}&quot;, value * 2);\n\n         else\n            return ERROR_BAD_ARGUMENTS;\n      }\n      return ERROR_SUCCESS;\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Environment.ExitCode#2\">Imports System.Numerics\n\nModule Example\n   Private Const ERROR_SUCCESS As Integer = 0\n   Private Const ERROR_BAD_ARGUMENTS As Integer = &amp;hA0\n   Private Const ERROR_ARITHMETIC_OVERFLOW As Integer = &amp;h216\n   Private Const ERROR_INVALID_COMMAND_LINE As Integer = &amp;h667\n    \n   Public Function Main() As Integer\n      Dim args() As String = Environment.GetCommandLineArgs()\n      If args.Length = 1 Then\n         Return ERROR_INVALID_COMMAND_LINE  \n      Else\n         Dim value As BigInteger = 0\n         If BigInteger.TryParse(args(1), value) Then\n            If value &lt;= Int32.MinValue Or value &gt;= Int32.MaxValue\n               Return ERROR_ARITHMETIC_OVERFLOW\n            Else\n               Console.WriteLine(&quot;Result: {0}&quot;, value * 2)\n            End If\n         Else\n            Return ERROR_BAD_ARGUMENTS\n         End If     \n      End If\n      Return ERROR_SUCCESS\n   End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_HasShutdownStarted\">\r\n    \r\n            <a id=\"System_Environment_HasShutdownStarted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasShutdownStarted</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the current application domain is being unloaded or the common language runtime (CLR) is shutting down.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool HasShutdownStarted { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current application domain is being unloaded or the CLR is shutting down; otherwise, <code>false.</code></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the CLR unloads an application domain, it runs the finalizers on all objects that have a finalizer method in that application domain. When the CLR shuts down, it starts the finalizer thread on all objects that have a finalizer method. The HasShutdownStarted property returns <code>true</code> only after the finalizer thread has been started. When the property returns <code>true</code>, you can determine whether an application domain is being unloaded or the CLR itself is shutting down by calling the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_IsFinalizingForUnload_\" data-linktype=\"relative-path\">IsFinalizingForUnload</a> method. This method returns <code>true</code> if finalizers are called because the application domain is unloading or <code>false</code> if the CLR is shutting down.  </p>\n<p> The HasShutdownStarted property returns <code>false</code> if the finalizer thread has not been started.  </p>\n<p> By using this property, you can determine whether to access static variables in your finalization code. If either an application domain or the CLR is shutting down, you cannot reliably access any object that has a finalization method and that is referenced by a static field. This is because these objects may have already been finalized.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_Is64BitOperatingSystem\">\r\n    \r\n            <a id=\"System_Environment_Is64BitOperatingSystem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Is64BitOperatingSystem</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current operating system is a 64-bit operating system.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Is64BitOperatingSystem { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the operating system is 64-bit; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_Is64BitProcess\">\r\n    \r\n            <a id=\"System_Environment_Is64BitProcess_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Is64BitProcess</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current process is a 64-bit process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Is64BitProcess { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the process is 64-bit; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_MachineName\">\r\n    \r\n            <a id=\"System_Environment_MachineName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MachineName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the NetBIOS name of this local computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string MachineName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing the name of this computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The name of this computer cannot be obtained.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The name of this computer is established at system startup when the name is read from the registry. If this computer is a node in a cluster, the name of the node is returned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the name of the computer that runs the code example. (The machine name is omitted from the example output for security reasons.)  </p>\n<pre><code class=\"lang-cpp\" name=\"environment.machinename#1\">// Sample for the Environment::MachineName property\nusing namespace System;\nint main()\n{\n   Console::WriteLine();\n   \n   //  &lt;-- Keep this information secure! --&gt;\n   Console::WriteLine( &quot;MachineName: {0}&quot;, Environment::MachineName );\n}\n\n/*\nThis example produces the following results:\n(Any result that is lengthy, specific to the machine on which this sample was tested, or reveals information that should remain secure, has been omitted and marked S&quot;!---OMITTED---!&quot;.)\n\nMachineName: !---OMITTED---!\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"environment.machinename#1\">&#39; Sample for the Environment.MachineName property\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine()\n      &#39;  &lt;-- Keep this information secure! --&gt;\n      Console.WriteLine(&quot;MachineName: {0}&quot;, Environment.MachineName)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;(Any result that is lengthy, specific to the machine on which this sample was tested, \n&#39;or reveals information that should remain secure, has been omitted \n&#39;and marked &quot;!---OMITTED---!&quot;.)\n&#39;\n&#39;MachineName: !---OMITTED---!\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"environment.machinename#1\">// Sample for the Environment.MachineName property\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine();\n//  &lt;-- Keep this information secure! --&gt;\n    Console.WriteLine(&quot;MachineName: {0}&quot;, Environment.MachineName);\n    }\n}\n/*\nThis example produces the following results:\n(Any result that is lengthy, specific to the machine on which this sample was tested, or reveals information that should remain secure, has been omitted and marked &quot;!---OMITTED---!&quot;.)\n\nMachineName: !---OMITTED---!\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_NewLine\">\r\n    \r\n            <a id=\"System_Environment_NewLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NewLine</div>        \r\n          </div>\r\n    \r\n            <p>Gets the newline string defined for this environment.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string NewLine { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing &quot;\\r\\n&quot; for non-Unix platforms, or a string containing &quot;\\n&quot; for Unix platforms.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The property value of NewLine is a constant customized specifically for the current platform and implementation of the .NET Framework. For more information about the escape characters in the property value, see <a href=\"../Topic/Character%20Escapes%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Character Escapes</a>.  </p>\n<p> The functionality provided by NewLine is often what is meant by the terms newline, line feed, line break, carriage return, CRLF, and end of line.  </p>\n<p> NewLine can be used in conjunction with language-specific newline support such as the escape characters &#39;\\r&#39; and &#39;\\n&#39; in Microsoft C# and C/C++, or <code>vbCrLf</code> in Microsoft Visual Basic.  </p>\n<p> NewLine is automatically appended to text processed by the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> and <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendLine_\" data-linktype=\"relative-path\">AppendLine</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays three lines separated by newlines.  </p>\n<pre><code class=\"lang-cpp\" name=\"environment.newline#1\">// Sample for the Environment::NewLine property\nusing namespace System;\nint main()\n{\n   Console::WriteLine();\n   Console::WriteLine( &quot;NewLine: {0}  first line {0}  second line {0}  third line&quot;, Environment::NewLine );\n}\n\n/*\nThis example produces the following results:\n\nNewLine:\nfirst line\nsecond line\nthird line\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"environment.newline#1\">// Sample for the Environment.NewLine property\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine();\n    Console.WriteLine(&quot;NewLine: {0}  first line{0}  second line{0}  third line&quot;,\n                          Environment.NewLine);\n    }\n}\n/*\nThis example produces the following results:\n\nNewLine:\n  first line\n  second line\n  third line\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"environment.newline#1\">&#39; Sample for the Environment.NewLine property\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine()\n      Console.WriteLine(&quot;NewLine: {0}  first line{0}  second line{0}  third line&quot;, _\n                             Environment.NewLine)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;NewLine:\n&#39;  first line\n&#39;  second line\n&#39;  third line\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_OSVersion\">\r\n    \r\n            <a id=\"System_Environment_OSVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OSVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.operatingsystem\" data-linktype=\"relative-path\">OperatingSystem</a> object that contains the current platform identifier and version number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static OperatingSystem OSVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.operatingsystem\" data-linktype=\"relative-path\">OperatingSystem</a></div>\r\n                  </div>\r\n                  <p>An object that contains the platform identifier and version number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This property was unable to obtain the system version.  </p>\n<p> -or-  </p>\n<p> The obtained platform identifier is not a member of <a class=\"xref\" href=\"system.platformid\" data-linktype=\"relative-path\">PlatformID</a></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with Windows 8, the  OSVersion property returns the same major and minor version numbers for all Windows platforms. Therefore, we do not recommend that you retrieve the value of this property to determine the operating system version.  </p>\n</div>\n<p> Typically, the OSVersion property is used to ensure that an app is running on some base version of an operating system in which a particular feature was introduced. When this is the case, you should perform a version check by testing whether the current operating system version returned by the OSVersion property is the same as, or greater than, the base operating system version. For more information, see the <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> class topic.  </p>\n<p> Through Windows 8, the OSVersion property returns the version reported by the Windows <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms724451(v=vs.85).aspx\" data-linktype=\"external\">GetVersionEx</a> function. For a list of Windows desktop operating system versions and their corresponding version numbers, see <a href=\"https://msdn.microsoft.com/library/windows/desktop/ms724832.aspx\" data-linktype=\"external\">Operating System Version</a> in the Windows Dev Center.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The OSVersion property reports the same version number (6.2.0.0) for both <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-md.md&quot; -->Windows 8<!--END INCLUDE --> and <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win81-md.md&quot; -->Windows 8.1<!--END INCLUDE --> and the same major and minor version number for Windows 10.  </p>\n</div>\n<p> In some cases, the OSVersion property may not return the operating system version that matches the version specified for the Windows Program Compatibility mode feature.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the platform identifier and version number of the computer that runs the code example.  </p>\n<pre><code class=\"lang-cs\" name=\"environment.osversion#1\">// Sample for the Environment.OSVersion property\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine();\n    Console.WriteLine(&quot;OSVersion: {0}&quot;, Environment.OSVersion.ToString());\n    }\n}\n/*\nThis example produces the following results:\n\nOSVersion: Microsoft Windows NT 5.1.2600.0\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"environment.osversion#1\">// Sample for the Environment::OSVersion property\nusing namespace System;\nint main()\n{\n   Console::WriteLine();\n   Console::WriteLine( &quot;OSVersion: {0}&quot;, Environment::OSVersion );\n}\n\n/*\nThis example produces the following results:\n\nOSVersion: Microsoft Windows NT 5.1.2600.0\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"environment.osversion#1\">&#39; Sample for the Environment.OSVersion property\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine()\n      Console.WriteLine(&quot;OSVersion: {0}&quot;, Environment.OSVersion.ToString())\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;OSVersion: Microsoft Windows NT 5.1.2600.0\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_ProcessorCount\">\r\n    \r\n            <a id=\"System_Environment_ProcessorCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProcessorCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of processors on the current machine.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ProcessorCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The 32-bit signed integer that specifies the number of processors on the current machine. There is no default. If the current machine contains multiple processor groups, this property returns the number of logical processors that are available for use by the common language runtime (CLR).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about processor groups and logical processors, see <a href=\"http://msdn.microsoft.com/library/windows/desktop/dd405503.aspx\" data-linktype=\"external\">Processor Groups</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the ProcessorCount property.  </p>\n<pre><code class=\"lang-cpp\" name=\"environment.processorcount#1\">// This example demonstrates the \n//     Environment.ProcessorCount property.\nusing namespace System;\nint main()\n{\n   Console::WriteLine( &quot;The number of processors on this computer is {0}.&quot;, Environment::ProcessorCount );\n}\n\n/*\nThis example produces the following results:\n\nThe number of processors on this computer is 1.\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"environment.processorcount#1\">// This example demonstrates the \n//     Environment.ProcessorCount property.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine(&quot;The number of processors &quot; +\n        &quot;on this computer is {0}.&quot;, \n        Environment.ProcessorCount);\n    }\n}\n/*\nThis example produces the following results:\n\nThe number of processors on this computer is 1.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"environment.processorcount#1\">&#39; This example demonstrates the \n&#39;     Environment.ProcessorCount property.\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine(&quot;The number of processors &quot; &amp; _\n                        &quot;on this computer is {0}.&quot;, _\n                        Environment.ProcessorCount)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The number of processors on this computer is 1.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_StackTrace\">\r\n    \r\n            <a id=\"System_Environment_StackTrace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackTrace</div>        \r\n          </div>\r\n    \r\n            <p>Gets current stack trace information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string StackTrace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing stack trace information. This value can be <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The StackTrace property lists method calls in reverse chronological order, that is, the most recent method call is described first, and one line of stack trace information is listed for each method call on the stack. However, the StackTrace property might not report as many method calls as expected due to code transformations that occur during optimization.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For a hierarchical view of the stack trace information by class, use the <a class=\"xref\" href=\"system.diagnostics.stacktrace\" data-linktype=\"relative-path\">StackTrace</a> class.  </p>\n</div>\n<p> The StackTrace property formats the stack trace information for each method call as follows:  </p>\n<p> &quot;at <code>FullClassName</code>.<code>MethodName</code>(<code>MethodParams</code>) in <code>FileName</code> :line <code>LineNumber</code> &quot;  </p>\n<p> The literal &quot;at&quot; is preceded by three spaces, and the entire substring starting with &quot;in&quot; is omitted if debug symbols are not available. The placeholders, <code>FullClassName</code>, <code>MethodName</code>, <code>MethodParams</code>, <code>FileName</code>, and <code>LineNumber</code>, are replaced by actual values, and are defined as follows:  </p>\n<p> FullClassName<br> The full name of the class, including the namespace.  </p>\n<p> <code>MethodName</code><br> The name of the method.  </p>\n<p> <code>MethodParams</code><br> The list of parameter type/name pairs. Each pair is separated by a comma (&quot;,&quot;). This information is omitted if <code>MethodName</code> takes no parameters.  </p>\n<p> <code>FileName</code><br> The name of the source file where the <code>MethodName</code> method is declared. This information is omitted if debug symbols are not available.  </p>\n<p> <code>LineNumber</code><br> The number of the line in <code>FileName</code> that contains the source code from <code>MethodName</code> for the instruction that is on the call stack. This information is omitted if debug symbols are not available.  </p>\n<p> The <a class=\"xref\" href=\"system.environment#System_Environment_NewLine_\" data-linktype=\"relative-path\">NewLine</a> string terminates each line of the stack trace.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the StackTrace property.  </p>\n<pre><code class=\"lang-vb\" name=\"environment.stacktrace#1\">&#39; Sample for the Environment.StackTrace property\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine()\n      Console.WriteLine(&quot;StackTrace: &#39;{0}&#39;&quot;, Environment.StackTrace)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;StackTrace: &#39;   at System.Environment.GetStackTrace(Exception e)\n&#39;   at System.Environment.GetStackTrace(Exception e)\n&#39;   at System.Environment.get_StackTrace()\n&#39;   at Sample.Main()&#39;\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"environment.stacktrace#1\">// Sample for the Environment::StackTrace property\nusing namespace System;\nint main()\n{\n   Console::WriteLine();\n   Console::WriteLine( &quot;StackTrace: &#39; {0}&#39;&quot;, Environment::StackTrace );\n}\n\n/*\nThis example produces the following results:\n\nStackTrace: &#39;   at System::Environment::GetStackTrace(Exception e)\nat System::Environment::GetStackTrace(Exception e)\nat System::Environment::get_StackTrace()\nat Sample::Main()&#39;\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"environment.stacktrace#1\">// Sample for the Environment.StackTrace property\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine();\n    Console.WriteLine(&quot;StackTrace: &#39;{0}&#39;&quot;, Environment.StackTrace);\n    }\n}\n/*\nThis example produces the following results:\n\nStackTrace: &#39;   at System.Environment.GetStackTrace(Exception e)\n   at System.Environment.GetStackTrace(Exception e)\n   at System.Environment.get_StackTrace()\n   at Sample.Main()&#39;\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_SystemDirectory\">\r\n    \r\n            <a id=\"System_Environment_SystemDirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SystemDirectory</div>        \r\n          </div>\r\n    \r\n            <p>Gets the fully qualified path of the system directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string SystemDirectory { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string containing a directory path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An example of the value returned is the string &quot;C:\\WinNT\\System32&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the system directory of the computer that runs the code example. (The system directory is omitted from the example output for security reasons.)  </p>\n<pre><code class=\"lang-cs\" name=\"environment.systemdirectory#1\">// Sample for the Environment.SystemDirectory property\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine();\n//  &lt;-- Keep this information secure! --&gt;\n    Console.WriteLine(&quot;SystemDirectory: {0}&quot;, Environment.SystemDirectory);\n    }\n}\n/*\nThis example produces the following results:\n\nSystemDirectory: C:\\WINNT\\System32\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"environment.systemdirectory#1\">&#39; Sample for the Environment.SystemDirectory property\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine()\n      &#39;  &lt;-- Keep this information secure! --&gt;\n      Console.WriteLine(&quot;SystemDirectory: {0}&quot;, Environment.SystemDirectory)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;SystemDirectory: C:\\WINNT\\System32\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"environment.systemdirectory#1\">// Sample for the Environment::SystemDirectory property\nusing namespace System;\nint main()\n{\n   Console::WriteLine();\n   \n   //  &lt;-- Keep this information secure! --&gt;\n   Console::WriteLine( &quot;SystemDirectory: {0}&quot;, Environment::SystemDirectory );\n}\n\n/*\nThis example produces the following results:\n\nSystemDirectory: C:\\WINNT\\System32\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_SystemPageSize\">\r\n    \r\n            <a id=\"System_Environment_SystemPageSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SystemPageSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of bytes in the operating system&#39;s memory page.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int SystemPageSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes in the system memory page.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This information can be useful when determining whether to use the <a class=\"xref\" href=\"system.io.memorymappedfiles.memorymappedfileoptions\" data-linktype=\"relative-path\">System.IO.MemoryMappedFiles.MemoryMappedFileOptions</a> option when you work with memory-mapped files.  </p>\n<p> In Windows, this value is the <code>dwPageSize</code> member in the <code>SYSTEM_INFO</code> structure.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_TickCount\">\r\n    \r\n            <a id=\"System_Environment_TickCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TickCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of milliseconds elapsed since the system started.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int TickCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this property is derived from the system timer and is stored as a 32-bit signed integer. Note that, because it is derived from the system timer, the resolution of the TickCount property is limited to the resolution of the system timer, which is typically in the range of 10 to 16 milliseconds.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Because the value of the TickCount property value is a 32-bit signed integer, if the system runs continuously, TickCount will increment from zero to <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">System.Int32</a> for approximately 24.9 days, then jump to <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">System.Int32</a>, which is a negative number, then increment back to zero during the next 24.9 days. You can work around this issue by calling the Windows <a href=\"https://msdn.microsoft.com/library/windows/desktop/ms724408.aspx\" data-linktype=\"external\">GetTickCount</a> function, which resets to zero after approximately 49.7 days, or by calling the <a href=\"https://msdn.microsoft.com/library/windows/desktop/ms724411.aspx\" data-linktype=\"external\">GetTickCount64</a> function.  </p>\n</div>\n<p> TickCount is different from the <a class=\"xref\" href=\"system.datetime#System_DateTime_Ticks_\" data-linktype=\"relative-path\">Ticks</a> property, which is the number of 100-nanosecond intervals that have elapsed since 1/1/0001, 12:00am.  </p>\n<p> Use the <a class=\"xref\" href=\"system.datetime#System_DateTime_Now_\" data-linktype=\"relative-path\">Now</a> property to obtain the current local date and time on this computer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to retrieve the positive range of values returned by the TickCount property. The TickCount property cycles between <a class=\"xref\" href=\"system.int32#System_Int32_MinValue\" data-linktype=\"relative-path\">System.Int32.MinValue</a>, which is a negative number, and <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a> once every 49.8 days. This code sample removes the sign bit to yield a nonnegative number that cycles between zero and <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> once every 24.9 days.  </p>\n<pre><code class=\"lang-cpp\" name=\"environment.tickcount#1\">// Sample for the Environment::TickCount property\n// TickCount cycles between Int32::MinValue, which is a negative \n// number, and Int32::MaxValue once every 49.8 days. This sample\n// removes the sign bit to yield a nonnegative number that cycles \n// between zero and Int32::MaxValue once every 24.9 days.\nusing namespace System;\nint main()\n{\n   int result = Environment::TickCount &amp; Int32::MaxValue;\n   Console::WriteLine( &quot;TickCount: {0}&quot;, result );\n}\n\n/*\nThis example produces the following results:\n\nTickCount: 101931139\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"environment.tickcount#1\">\n&#39; Sample for the Environment.TickCount property.\n&#39; TickCount cycles between Int32.MinValue, which is a negative \n&#39; number, and Int32.MaxValue once every 49.8 days. This sample\n&#39; removes the sign bit to yield a nonnegative number that cycles \n&#39; between zero and Int32.MaxValue once every 24.9 days.\n\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim result As Integer = Environment.TickCount And Int32.MaxValue\n\n      Console.WriteLine(&quot;TickCount: {0}&quot;, result)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;TickCount: 101931139\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"environment.tickcount#1\">// Sample for the Environment.TickCount property.\n\n// TickCount cycles between Int32.MinValue, which is a negative \n// number, and Int32.MaxValue once every 49.8 days. This sample\n// removes the sign bit to yield a nonnegative number that cycles \n// between zero and Int32.MaxValue once every 24.9 days.\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    int result = Environment.TickCount &amp; Int32.MaxValue;\n    Console.WriteLine(&quot;TickCount: {0}&quot;, result);\n    }\n}\n/*\nThis example produces the following results:\n\nTickCount: 101931139\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_UserDomainName\">\r\n    \r\n            <a id=\"System_Environment_UserDomainName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserDomainName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the network domain name associated with the current user.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string UserDomainName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The network domain name associated with the current user.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The operating system does not support retrieving the network domain name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The network domain name cannot be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The domain account credentials for a user are formatted as the user&#39;s domain name, the &#39;\\&#39; character, and user name. Use the UserDomainName property to obtain the user&#39;s domain name without the user name, and the <a class=\"xref\" href=\"system.environment#System_Environment_UserName_\" data-linktype=\"relative-path\">UserName</a> property to obtain the user name without the domain name.  For example, if a user&#39;s domain name and user name are CORPORATENETWORK\\john, the UserDomainName property returns &quot;CORPORATENETWORK&quot;.  </p>\n<p> The UserDomainName property first attempts to get the domain name component of the Windows account name for the current user. If that attempt fails, this property attempts to get the domain name associated with the user name provided by the <a class=\"xref\" href=\"system.environment#System_Environment_UserName_\" data-linktype=\"relative-path\">UserName</a> property. If that attempt fails because the host computer is not joined to a domain, then the host computer name is returned.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_UserInteractive\">\r\n    \r\n            <a id=\"System_Environment_UserInteractive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserInteractive</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current process is running in user interactive mode.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool UserInteractive { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current process is running in user interactive mode; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The UserInteractive property reports <code>false</code> for a Windows process or a service like IIS that runs without a user interface. If this property is <code>false</code>, do not display modal dialogs or message boxes because there is no graphical user interface for the user to interact with.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays whether the current process is running in user interactive mode.  </p>\n<pre><code class=\"lang-cpp\" name=\"Environment.UserInteractive#1\">// Sample for the Environment::UserInteractive property\nusing namespace System;\nint main()\n{\n   Console::WriteLine();\n   Console::WriteLine( &quot;UserInteractive: {0}&quot;, Environment::UserInteractive );\n}\n\n/*\nThis example produces the following results:\n\nUserInteractive: True\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Environment.UserInteractive#1\">&#39; Sample for the Environment.UserInteractive property\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine()\n      Console.WriteLine(&quot;UserInteractive: {0}&quot;, Environment.UserInteractive)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;UserInteractive: True\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"Environment.UserInteractive#1\">// Sample for the Environment.UserInteractive property\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine();\n    Console.WriteLine(&quot;UserInteractive: {0}&quot;, Environment.UserInteractive);\n    }\n}\n/*\nThis example produces the following results:\n\nUserInteractive: True\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_UserName\">\r\n    \r\n            <a id=\"System_Environment_UserName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UserName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the user name of the person who is currently logged on to the Windows operating system.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string UserName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The user name of the person who is logged on to Windows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the UserName property to identify the user on the current thread, to the system and application for security or access purposes. It can also be used to customize a particular application for each user.  </p>\n<p> The UserName property wraps a call to the Windows <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms724432.aspx\" data-linktype=\"external\">GetUserName</a> function. The domain account credentials for a user are formatted as the user&#39;s domain name, the &#39;\\&#39; character, and user name. Use the <a class=\"xref\" href=\"system.environment#System_Environment_UserDomainName_\" data-linktype=\"relative-path\">UserDomainName</a> property to obtain the user&#39;s domain name and the UserName property to obtain the user name.  </p>\n<p> If an ASP.NET application runs in a development environment, the UserName property returns the name of the current user. In a published ASP.NET application, this property returns the name of the application pool account (such as Default AppPool).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the user name of the person who started the current thread.  </p>\n<pre><code class=\"lang-cpp\" name=\"Environment.UserName#1\">// Sample for the Environment::UserName property\nusing namespace System;\nint main()\n{\n   Console::WriteLine();\n\n   //  &lt;-- Keep this information secure! --&gt;\n   Console::WriteLine( &quot;UserName: {0}&quot;, Environment::UserName );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Environment.UserName#1\">// Sample for the Environment.UserName property\nusing System;\n\nclass Sample\n{\n    public static void Main()\n    {\n    Console.WriteLine();\n//  &lt;-- Keep this information secure! --&gt;\n    Console.WriteLine(&quot;UserName: {0}&quot;, Environment.UserName);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Environment.UserName#1\">&#39; Sample for the Environment.UserName property\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine()\n      &#39;  &lt;-- Keep this information secure! --&gt;\n      Console.WriteLine(&quot;UserName: {0}&quot;, Environment.UserName)\n   End Sub &#39;Main\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_Version\">\r\n    \r\n            <a id=\"System_Environment_Version_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Version</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object that describes the major, minor, build, and revision numbers of the common language runtime.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Version Version { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </div>\r\n                  <p>An object that displays the version of the common language runtime.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For the .NET Framework Versions 4, 4.5, 4.5.1, and 4.5.2, the Version property returns a <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object whose string representation has the form <code>4.0.30319.xxxxx</code>. For the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v46-md.md&quot; -->.NET Framework 4.6<!--END INCLUDE -->, it has the form <code>4.0.30319.42000</code>.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> For the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE --> and later, we do not recommend using the Version property to detect the version of the runtime; instead, you can determine the version of the common language runtime by querying the registry. For more information, see <a href=\"../Topic/How%20to:%20Determine%20Which%20.NET%20Framework%20Versions%20Are%20Installed.md\" data-linktype=\"relative-path\">How to: Determine Which .NET Framework Versions Are Installed</a>.  </p>\n</div>\n<p> For more information about the version of the common language runtime that is installed with each version of the .NET Framework, see <a href=\"../Topic/.NET%20Framework%20Versions%20and%20Dependencies.md\" data-linktype=\"relative-path\">Versions and Dependencies</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the version of the common language runtime. (The version is omitted from the example output for security reasons.)  </p>\n<pre><code class=\"lang-cs\" name=\"Environment.Version#1\">// Sample for the Environment.Version property\nusing System;\n\nclass Sample\n{\n    public static void Main()\n    {\n    Console.WriteLine();\n    Console.WriteLine(&quot;Version: {0}&quot;, Environment.Version.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Environment.Version#1\">// Sample for the Environment::Version property\nusing namespace System;\nint main()\n{\n   Console::WriteLine();\n   Console::WriteLine( &quot;Version: {0}&quot;, Environment::Version );\n}\n\n/*\nThis example produces the following results:\n(Any result that is lengthy, specific to the machine on which this sample was tested, or reveals information that should remain secure, has been omitted and marked S&quot;!---OMITTED---!&quot;.)\n\nVersion: !---OMITTED---!\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Environment.Version#1\">&#39; Sample for the Environment.Version property\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine()\n      Console.WriteLine(&quot;Version: {0}&quot;, Environment.Version.ToString())\n   End Sub &#39;Main\nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_WorkingSet\">\r\n    \r\n            <a id=\"System_Environment_WorkingSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WorkingSet</div>        \r\n          </div>\r\n    \r\n            <p>Gets the amount of physical memory mapped to the process context.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long WorkingSet { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer containing the number of bytes of physical memory mapped to the process context.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the size of the working set of the computer that runs the code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"Environment.WorkingSet#1\">// Sample for the Environment::WorkingSet property\nusing namespace System;\nint main()\n{\n   Console::WriteLine( &quot;WorkingSet: {0}&quot;, Environment::WorkingSet );\n}\n\n/*\nThis example produces the following results:\n\nWorkingSet: 5038080\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Environment.WorkingSet#1\">&#39; Sample for the Environment.WorkingSet property\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine(&quot;WorkingSet: {0}&quot;, Environment.WorkingSet)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;WorkingSet: 5038080\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"Environment.WorkingSet#1\">// Sample for the Environment.WorkingSet property\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine(&quot;WorkingSet: {0}&quot;, Environment.WorkingSet);\n    }\n}\n/*\nThis example produces the following results:\n\nWorkingSet: 5038080\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_Exit_System_Int32_\">\r\n    \r\n            <a id=\"System_Environment_Exit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exit(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Terminates this process and returns an exit code to the operating system.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Exit (int exitCode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>exitCode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exit code to return to the operating system. Use 0 (zero) to indicate that the process completed successfully.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have sufficient security permission to perform this function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For the <code>exitCode</code> parameter, use a non-zero number to indicate an error. In your application, you can define your own error codes in an enumeration, and return the appropriate error code based on the scenario. For example, return a value of 1 to indicate that the required file is not present, and a value of 2 to indicate that the file is in the wrong format. For a list of exit codes used by the Windows operating system, see <a href=\"http://msdn.microsoft.com/library/ms681381.aspx\" data-linktype=\"external\">System Error Codes</a> in the Windows documentation.  </p>\n<p> Calling the Exit method differs from using your programming language&#39;s <code>return</code> statement in the following ways:  </p>\n<ul>\n<li><p>Exit always terminates an application. Using the <code>return</code> statement may terminate an application only if it is used in the application entry point, such as in the <code>Main</code> method.  </p>\n</li>\n<li><p>Exit terminates an application immediately, even if other threads are running. If the <code>return</code> statement is called in the application entry point, it causes an application to terminate only after all foreground threads have terminated.  </p>\n</li>\n<li><p>Exit requires the caller to have permission to call unmanaged code. The <code>return</code> statement does not.  </p>\n</li>\n<li><p>If Exit is called from a <code>try</code> or <code>catch</code> block, the code in any <code>finally</code> block does not execute. If the <code>return</code> statement is used, the code in the <code>finally</code> block does execute.  </p>\n</li>\n<li><p>If Exit is called when code in a <a href=\"../Topic/Constrained%20Execution%20Regions.md\" data-linktype=\"relative-path\">constrained execution region</a> (CER) is running, the CER will not complete execution. If the <code>return</code> statement is used, the CER completes execution.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_ExpandEnvironmentVariables_System_String_\">\r\n    \r\n            <a id=\"System_Environment_ExpandEnvironmentVariables_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExpandEnvironmentVariables(String)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the name of each environment variable embedded in the specified string with the string equivalent of the value of the variable, then returns the resulting string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ExpandEnvironmentVariables (string name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string containing the names of zero or more environment variables. Each environment variable is quoted with the percent sign character (%).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string with each environment variable replaced by its value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>COM interop is used to retrieve the environment variables from the operating system. If the environment variables cannot be retrieved due to a COM error, the HRESULT that explains the cause of the failure is used to generate one of several possible exceptions; that is, the exception depends on the HRESULT. For more information about how the HRESULT is processed, see the Remarks section of the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_\" data-linktype=\"relative-path\">ThrowExceptionForHR</a> method.  </p>\n<p> Replacement only occurs for environment variables that are set. For example, suppose <code>name</code> is &quot;MyENV = %MyENV%&quot;. If the environment variable, MyENV, is set to 42, this method returns &quot;MyENV = 42&quot;. If MyENV is not set, no change occurs; this method returns &quot;MyENV = %MyENV%&quot;.  </p>\n<p> The size of the return value is limited to 32K.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain the system drive and system root variables.  </p>\n<pre><code class=\"lang-cs\" name=\"Environment.ExpandEnvironmentVariables#1\">// Sample for the Environment.ExpandEnvironmentVariables method\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    String str;\n    String nl = Environment.NewLine;\n\n    Console.WriteLine();\n//  &lt;-- Keep this information secure! --&gt;\n    String query = &quot;My system drive is %SystemDrive% and my system root is %SystemRoot%&quot;;\n    str = Environment.ExpandEnvironmentVariables(query);\n    Console.WriteLine(&quot;ExpandEnvironmentVariables: {0}  {1}&quot;, nl, str);\n    }\n}\n/*\nThis example produces the following results:\n\nExpandEnvironmentVariables:\n  My system drive is C: and my system root is C:\\WINNT\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"Environment.ExpandEnvironmentVariables#1\">// Sample for the Environment::ExpandEnvironmentVariables method\nusing namespace System;\nint main()\n{\n   String^ str;\n   String^ nl = Environment::NewLine;\n   Console::WriteLine();\n   \n   //  &lt;-- Keep this information secure! --&gt;\n   String^ query = &quot;My system drive is %SystemDrive% and my system root is %SystemRoot%&quot;;\n   str = Environment::ExpandEnvironmentVariables( query );\n   Console::WriteLine( &quot;ExpandEnvironmentVariables: {0} {1}&quot;, nl, str );\n}\n\n/*\nThis example produces the following results:\n\nExpandEnvironmentVariables:\nMy system drive is C: and my system root is C:\\WINNT\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Environment.ExpandEnvironmentVariables#1\">&#39; Sample for the Environment.ExpandEnvironmentVariables method\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim str As [String]\n      Dim nl As [String] = Environment.NewLine\n      \n      Console.WriteLine()\n      &#39;  &lt;-- Keep this information secure! --&gt;\n      Dim query As [String] = &quot;My system drive is %SystemDrive% and&quot; &amp; _ \n                              &quot;my system root is %SystemRoot%&quot;\n      str = Environment.ExpandEnvironmentVariables(query)\n      Console.WriteLine(&quot;ExpandEnvironmentVariables: {0}  {1}&quot;, nl, str)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;ExpandEnvironmentVariables:\n&#39;  My system drive is C: and my system root is C:\\WINNT\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_FailFast_System_String_\">\r\n    \r\n            <a id=\"System_Environment_FailFast_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FailFast(String)</div>        \r\n          </div>\r\n    \r\n            <p>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message in error reporting to Microsoft.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void FailFast (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message that explains why the process was terminated, or <code>null</code> if no explanation is provided.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method terminates a process without running any active <code>try</code>/<code>finally</code> blocks or finalizers.  </p>\n<p> The FailFast method writes the <code>message</code> string to the Windows Application event log, creates a dump of your application, and then terminates the current process. The <code>message</code> string is also included in error reporting to Microsoft.  </p>\n<p> Use the FailFast method instead of the <a class=\"xref\" href=\"system.environment#System_Environment_Exit_\" data-linktype=\"relative-path\">Exit</a> method to terminate your application if the state of your application is damaged beyond repair, and executing your application&#39;s <code>try</code>/<code>finally</code> blocks and finalizers will corrupt program resources.  </p>\n<p> Information is reported to Microsoft by using Windows Error Reporting. For more information, see <a href=\"http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx\" data-linktype=\"external\">Windows Error Reporting: Getting Started</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example writes a log entry to the Windows Application event log and terminates the current process.  </p>\n<pre><code class=\"lang-cs\" name=\"environment.FailFast#1\">using System;\n\nclass Example\n{\n    public static void Main() \n    {\n       string causeOfFailure = &quot;A catastrophic failure has occured.&quot;;\n\n       // Assume your application has failed catastrophically and must\n       // terminate immediately. The try-finally block is not executed\n       // and is included only to demonstrate that instructions within\n       // try-catch blocks and finalizers are not performed.\n       try {\n           Environment.FailFast(causeOfFailure);\n       }\n       finally {\n           Console.WriteLine(&quot;This finally block will not be executed.&quot;);\n       }\n   }\n}\n/*\nThe example produces no output because the application is terminated.\nHowever, an entry is made in the Windows Application event log, and\nthe log entry contains the text from the causeOfFailure variable.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"environment.FailFast#1\">Module Example\n    Public Sub Main()\n        Dim causeOfFailure As String = &quot;A catastrophic failure has occured.&quot;\n        &#39; Assume your application has failed catastrophically and must\n        &#39; terminate immediately. The try-finally block is not executed \n        &#39; and is included only to demonstrate that instructions within \n        &#39; try-catch blocks and finalizers are not performed.\n\n        Try\n            Environment.FailFast(causeOfFailure)\n        Finally\n            Console.WriteLine(&quot;This finally block will not be executed.&quot;)\n        End Try\n    End Sub\nEnd Module\n&#39;\n&#39; The code example displays no output because the application is\n&#39; terminated. However, an entry is made in the Windows Application event\n&#39; log, and the log entry contains the text from the causeOfFailure variable.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_FailFast_System_String_System_Exception_\">\r\n    \r\n            <a id=\"System_Environment_FailFast_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FailFast(String,Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and exception information in error reporting to Microsoft.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void FailFast (string message, Exception exception);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message that explains why the process was terminated, or <code>null</code> if no explanation is provided.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>exception</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An exception that represents the error that caused the termination. This is typically the exception in a <code>catch</code> block.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method terminates the process without running any active <code>try</code>/<code>finally</code> blocks or finalizers.  </p>\n<p> The FailFast method writes the <code>message</code> string to the Windows Application event log, creates a dump of your application, and then terminates the current process.  </p>\n<p> Information is reported to Microsoft by using Windows Error Reporting. For more information, see <a href=\"http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx\" data-linktype=\"external\">Windows Error Reporting: Getting Started</a>. Error reporting to Microsoft includes <code>message</code> and <code>exception</code> information, which provides details used to classify the error. Although <code>exception</code> is not handled because the process is terminated, the contextual information that raised the exception is still obtained.  </p>\n<p> If <code>exception</code> is <code>null</code>, or if <code>exception</code> is not thrown, this method operates the same as the <a class=\"xref\" href=\"system.environment#System_Environment_FailFast_System_String_\" data-linktype=\"relative-path\">FailFast(String)</a> method overload.  </p>\n<p> Use the FailFast method instead of the <a class=\"xref\" href=\"system.environment#System_Environment_Exit_\" data-linktype=\"relative-path\">Exit</a> method to terminate your application if the state of your application is damaged beyond repair, and executing your application&#39;s <code>try</code>/<code>finally</code> blocks and finalizers will corrupt program resources.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_GetCommandLineArgs\">\r\n    \r\n            <a id=\"System_Environment_GetCommandLineArgs_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCommandLineArgs()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string array containing the command-line arguments for the current process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetCommandLineArgs ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of string where each element contains a command-line argument. The first element is the executable file name, and the following zero or more elements contain the remaining command-line arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The system does not support command-line arguments.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The first element in the array contains the file name of the executing program. If the file name is not available, the first element is equal to <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>. The remaining elements contain any additional tokens entered on the command line.  </p>\n<p> The program file name can, but is not required to, include path information.  </p>\n<p> Command line arguments are delimited by spaces. You can use double quotation marks (&quot;) to include spaces within an argument. The single quotation mark (&#39;), however, does not provide this functionality.  </p>\n<p> If a double quotation mark follows two or an even number of backslashes, each proceeding backslash pair is replaced with one backslash and the double quotation mark is removed. If a double quotation mark follows an odd number of backslashes, including just one, each preceding pair is replaced with one backslash and the remaining backslash is removed; however, in this case the double quotation mark is not removed.  </p>\n<p> The following table shows how command line arguments can be delimited, and assumes <code>MyApp</code> as the current executing application.  </p>\n<table>\n<thead>\n<tr>\n<th>Input at the command line</th>\n<th>Resulting command line arguments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>MyApp alpha beta</code></td>\n<td><code>MyApp, alpha, beta</code></td>\n</tr>\n<tr>\n<td><code>MyApp &quot;alpha with spaces&quot; &quot;beta with spaces&quot;</code></td>\n<td><code>MyApp, alpha with spaces, beta with spaces</code></td>\n</tr>\n<tr>\n<td><code>MyApp &#39;alpha with spaces&#39; beta</code></td>\n<td><code>MyApp, &#39;alpha, with, spaces&#39;, beta</code></td>\n</tr>\n<tr>\n<td><code>MyApp \\\\\\alpha \\\\\\\\&quot;beta</code></td>\n<td><code>MyApp, \\\\\\alpha, \\\\beta</code></td>\n</tr>\n<tr>\n<td><code>MyApp \\\\\\\\\\&quot;alpha \\&quot;beta</code></td>\n<td><code>MyApp, \\\\&quot;alpha, &quot;beta</code></td>\n</tr>\n</tbody>\n</table>\n<p> To obtain the command line as a single string, use the <a class=\"xref\" href=\"system.environment#System_Environment_CommandLine_\" data-linktype=\"relative-path\">CommandLine</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the application&#39;s command line arguments.  </p>\n<pre><code class=\"lang-cs\" name=\"Environment.GetCommandLineArgs#1\">using System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine();\n    //  Invoke this sample with an arbitrary set of command line arguments.\n    String[] arguments = Environment.GetCommandLineArgs();\n    Console.WriteLine(&quot;GetCommandLineArgs: {0}&quot;, String.Join(&quot;, &quot;, arguments));\n    }\n}\n/*\nThis example produces output like the following:\n    \n    C:\\&gt;GetCommandLineArgs ARBITRARY TEXT\n    \n      GetCommandLineArgs: GetCommandLineArgs, ARBITRARY, TEXT\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"Environment.GetCommandLineArgs#1\">using namespace System;\n\nint main()\n{\n   Console::WriteLine();\n   \n   //  Invoke this sample with an arbitrary set of command line arguments.\n   array&lt;String^&gt;^ arguments = Environment::GetCommandLineArgs();\n   Console::WriteLine( &quot;GetCommandLineArgs: {0}&quot;, String::Join( &quot;, &quot;, arguments ) );\n}\n/*\nThis example produces output like the following:\n    \n    C:\\&gt;GetCommandLineArgs ARBITRARY TEXT\n    \n      GetCommandLineArgs: GetCommandLineArgs, ARBITRARY, TEXT\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Environment.GetCommandLineArgs#1\">Class Sample\n   Public Shared Sub Main()\n      Console.WriteLine()\n      &#39;  Invoke this sample with an arbitrary set of command line arguments.\n      Dim arguments As String() = Environment.GetCommandLineArgs()\n      Console.WriteLine(&quot;GetCommandLineArgs: {0}&quot;, String.Join(&quot;, &quot;, arguments))\n   End Sub\nEnd Class\n&#39;This example produces output like the following:\n&#39;    \n&#39;    C:\\&gt;GetCommandLineArgs ARBITRARY TEXT\n&#39;    \n&#39;      GetCommandLineArgs: GetCommandLineArgs, ARBITRARY, TEXT\n&#39;    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_GetEnvironmentVariable_System_String_\">\r\n    \r\n            <a id=\"System_Environment_GetEnvironmentVariable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnvironmentVariable(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the value of an environment variable from the current process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetEnvironmentVariable (string variable);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>variable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the environment variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the environment variable specified by <code>variable</code>, or <code>null</code> if the environment variable is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>variable</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission to perform this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetEnvironmentVariable method retrieves an environment variable from the environment block of the current process only. It is equivalent to calling the <a class=\"xref\" href=\"system.environment#System_Environment_GetEnvironmentVariable_System_String_System_EnvironmentVariableTarget_\" data-linktype=\"relative-path\">GetEnvironmentVariable(String,EnvironmentVariableTarget)</a> method with a <code>target</code> value of <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">System.EnvironmentVariableTarget</a>. The environment block of the current process includes the following environment variables:  </p>\n<ul>\n<li><p>All per-machine environment variables that are defined at the time the process is created, along with their values.  </p>\n</li>\n<li><p>All per-user environment variables that are defined at the time the process is created, along with their values.  </p>\n</li>\n<li><p>Any variables added to the process block while the process is running by calling either the <a class=\"xref\" href=\"system.environment#System_Environment_SetEnvironmentVariable_System_String_System_String_\" data-linktype=\"relative-path\">SetEnvironmentVariable(String,String)</a> method or the <a class=\"xref\" href=\"system.environment#System_Environment_SetEnvironmentVariable_System_String_System_String_System_EnvironmentVariableTarget_\" data-linktype=\"relative-path\">SetEnvironmentVariable(String,String,EnvironmentVariableTarget)</a> method with a <code>target</code> value of <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">System.EnvironmentVariableTarget</a>.  </p>\n<p>If environment variables are created after the process has started, you can use this method to retrieve only those variables that were created by calling the <a class=\"xref\" href=\"system.environment#System_Environment_SetEnvironmentVariable_System_String_System_String_\" data-linktype=\"relative-path\">SetEnvironmentVariable(String,String)</a> method or the <a class=\"xref\" href=\"system.environment#System_Environment_SetEnvironmentVariable_System_String_System_String_System_EnvironmentVariableTarget_\" data-linktype=\"relative-path\">SetEnvironmentVariable(String,String,EnvironmentVariableTarget)</a> method with a <code>target</code> value of .<a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">System.EnvironmentVariableTarget</a>.  </p>\n<p>To retrieve all environment variables along with their values, call the <a class=\"xref\" href=\"system.environment#System_Environment_GetEnvironmentVariables_\" data-linktype=\"relative-path\">GetEnvironmentVariables</a> method.  </p>\n<p>Environment variable names are not case-sensitive.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetEnvironmentVariable method to retrieve the <code>windir</code> environment variable, which contains the path of the Windows directory.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Environment#4\">using namespace System;\nusing namespace System::IO;\n\nvoid main()\n{\n      // Change the directory to %WINDIR%\n      Environment::CurrentDirectory = Environment::GetEnvironmentVariable( &quot;windir&quot; );\n      DirectoryInfo^ info = gcnew DirectoryInfo( &quot;.&quot; );\n\n      Console::WriteLine(&quot;Directory Info:   {0}&quot;, info-&gt;FullName);\n}\n// The example displays output like the following:\n//        Directory Info:   C:\\windows\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Environment#4\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Change the directory to %WINDIR%\n      Environment.CurrentDirectory = Environment.GetEnvironmentVariable(&quot;windir&quot;);\n      DirectoryInfo info = new DirectoryInfo(&quot;.&quot;);\n\n      Console.WriteLine(&quot;Directory Info:   &quot; + info.FullName);\n   }\n}\n// The example displays output like the following:\n//        Directory Info:   C:\\windows\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Environment#4\">Imports System.IO\n\nModule Example\n   Public Sub Main()\n        &#39; Change the directory to %WINDIR%\n        Environment.CurrentDirectory = Environment.GetEnvironmentVariable(&quot;windir&quot;)\n        Dim info As New DirectoryInfo(&quot;.&quot;)\n        Console.WriteLine(&quot;Directory Info:   &quot; + info.FullName)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;        Directory Info:   C:\\windows\n</code></pre><p> The following example attempts to retrieve the value of an environment variable named <code>Test1</code> from the process environment block. If the variable doesn&#39;t exist, the example creates its and retrieves its value. The example displays the value of the variable. If the example created the variable, it also calls the <a class=\"xref\" href=\"system.environment#System_Environment_GetEnvironmentVariables_System_EnvironmentVariableTarget_\" data-linktype=\"relative-path\">GetEnvironmentVariables(EnvironmentVariableTarget)</a> method with each member of the <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a> enumeration to establish that the variable can be retrieved only from the current process environment block. Finally, if the example created the variable, it deletes it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Environment.GetEnvironmentVariable#2\">Module Example\n   Public Sub Main()\n      Dim value As String \n      Dim toDelete As Boolean = False\n      \n      &#39; Check whether the environment variable exists.\n      value = Environment.GetEnvironmentVariable(&quot;Test1&quot;)\n      &#39; If necessary, create it.\n      If value Is Nothing Then\n         Environment.SetEnvironmentVariable(&quot;Test1&quot;, &quot;Value1&quot;)\n         toDelete = True\n         \n         &#39; Now retrieve it.\n         value = Environment.GetEnvironmentVariable(&quot;Test1&quot;)\n      End If\n      &#39; Display the value.\n      Console.WriteLine(&quot;Test1: {0}&quot;, value)\n      Console.WriteLine()\n      \n      &#39; Confirm that the value can only be retrieved from the process\n      &#39; environment block.\n      Console.WriteLine(&quot;Attempting to retrieve Test1 from:&quot;)\n      For Each enumValue As EnvironmentVariableTarget In \n                         [Enum].GetValues(GetType(EnvironmentVariableTarget))\n         value = Environment.GetEnvironmentVariable(&quot;Test1&quot;, enumValue)\n         Console.WriteLine(&quot;   {0}: {1}&quot;, enumValue, \n                           If(value IsNot Nothing, value, &quot;not found&quot;))\n      Next\n      Console.WriteLine()\n      \n      &#39; If we&#39;ve created it, now delete it.\n      If toDelete Then \n         Environment.SetEnvironmentVariable(&quot;Test1&quot;, Nothing)\n         &#39; Confirm the deletion.\n         If Environment.GetEnvironmentVariable(&quot;Test1&quot;) = Nothing Then\n            Console.WriteLine(&quot;Test1 has been deleted.&quot;)\n         End If\n      End If         \n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Test1: Value1\n&#39;       \n&#39;       Attempting to retrieve Test1 from:\n&#39;          Process: Value1\n&#39;          User: not found\n&#39;          Machine: not found\n&#39;       \n&#39;       Test1 has been deleted.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Environment.GetEnvironmentVariable#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string value;\n      bool toDelete = false;\n      \n      // Check whether the environment variable exists.\n      value = Environment.GetEnvironmentVariable(&quot;Test1&quot;);\n      // If necessary, create it.\n      if (value == null) {\n         Environment.SetEnvironmentVariable(&quot;Test1&quot;, &quot;Value1&quot;);\n         toDelete = true;\n         \n         // Now retrieve it.\n         value = Environment.GetEnvironmentVariable(&quot;Test1&quot;);\n      }\n      // Display the value.\n      Console.WriteLine(&quot;Test1: {0}<br>&quot;, value);\n      \n      // Confirm that the value can only be retrieved from the process\n      // environment block.\n      Console.WriteLine(&quot;Attempting to retrieve Test1 from:&quot;);\n      foreach (EnvironmentVariableTarget enumValue in \n                         Enum.GetValues(typeof(EnvironmentVariableTarget))) {\n         value = Environment.GetEnvironmentVariable(&quot;Test1&quot;, enumValue);\n         Console.WriteLine(&quot;   {0}: {1}&quot;, enumValue, \n                           value != null ? value : &quot;not found&quot;);\n      }\n      Console.WriteLine();\n      \n      // If we&#39;ve created it, now delete it.\n      if (toDelete) { \n         Environment.SetEnvironmentVariable(&quot;Test1&quot;, null);\n         // Confirm the deletion.\n         if (Environment.GetEnvironmentVariable(&quot;Test1&quot;) == null)\n            Console.WriteLine(&quot;Test1 has been deleted.&quot;);\n      }         \n   }\n}\n// The example displays the following output:\n//       Test1: Value1\n//       \n//       Attempting to retrieve Test1 from:\n//          Process: Value1\n//          User: not found\n//          Machine: not found\n//       \n//       Test1 has been deleted.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_GetEnvironmentVariable_System_String_System_EnvironmentVariableTarget_\">\r\n    \r\n            <a id=\"System_Environment_GetEnvironmentVariable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnvironmentVariable(String,EnvironmentVariableTarget)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the value of an environment variable from the current process or from the Windows operating system registry key for the current user or local machine.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetEnvironmentVariable (string variable, EnvironmentVariableTarget target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>variable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of an environment variable.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The value of the environment variable specified by the <code>variable</code> and <code>target</code> parameters, or <code>null</code> if the environment variable is not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>variable</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> is not a valid <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission to perform this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>target</code> parameter specifies whether the environment variable is retrieved from the current process or from the Windows operating system registry key for the current user or local machine. All per-user and per-machine environment variables are automatically copied into the environment block of the current process. However, environment variables added only to the environment block of the current process  persist only for the duration of the process.  </p>\n<p> To retrieve all environment variables along with their values, call the <a class=\"xref\" href=\"system.environment#System_Environment_GetEnvironmentVariables_\" data-linktype=\"relative-path\">GetEnvironmentVariables</a> method.  </p>\n<p> Environment variable names are not case-sensitive.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates environment variables for the Process, User, and Machine targets, checks whether the operating system registry contains the User and Machine environment variables, then deletes the environment variables.  </p>\n<pre><code class=\"lang-cpp\" name=\"environment.getsetenvar#1\">// This example demonstrates the\n//     Environment.GetEnvironmentVariable,\n//     Environment.SetEnvironmentVariable, and\n//     Environment.GetEnvironmentVariables overloaded methods.\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace Microsoft::Win32;\n\nnamespace EnvironmentVariablesSample\n{\n    public ref class TestEnvironmentVariables sealed\n    {\n    public:\n        // DoTest: Test get/set environment variables\n        static void DoTest()\n        {     \n            // Environment variable values\n            String^ existsA = &quot;exists in the default target&quot;\n                &quot; (Process)&quot;;\n            String^ existsB = &quot;exists in Process&quot;;\n            String^ existsC = &quot;exists in User&quot;;\n            String^ existsD = &quot;exists in Machine&quot;;     \n            // Messages:\n            String^ messageStep1 = &quot;Step 1:<br>&quot;\n                &quot;  Check whether the environment variables already&quot;\n                &quot; exist in <br>&quot;\n                &quot;  the various targets...<br>&quot;;\n            String^ messageStep2 = &quot;Step 2:<br>&quot;\n                &quot;  Set the environment variable for each&quot;\n                &quot; target...<br>&quot;;\n            String^ messageStep3Part1 = &quot;Step 3, part 1:<br>&quot;\n                &quot;  Display the environment variables in each&quot;\n                &quot; target...<br>&quot;;\n            String^ messageStep3Part2 = &quot;Step 3, part 2:<br>&quot;\n                &quot;  Check whether the User and Machine &quot;\n                &quot; environment variables <br>&quot;\n                &quot;  were created in the Windows operating&quot;\n                &quot; system registry...<br>&quot;;\n            String^ messageStep4Part1 = &quot;Step 4, part 1:<br>&quot;\n                &quot;  Delete the environment variables created &quot;\n                &quot;for this sample...<br>&quot;;\n            String^ messageStep4Part2 = &quot;Step 4, part 2:<br>&quot;\n                &quot;  Check whether the environment variables were &quot;\n                &quot;deleted <br>&quot;\n                &quot;  in each target...<br>&quot;;\n            String^ messageStep4Part3 = &quot;Step 4, part 3:<br>&quot;\n                &quot;  Check whether the User and Machine environment &quot;\n                &quot;variables <br>&quot;\n                &quot;  were deleted from the Windows operating system &quot;\n                &quot;registry...<br>&quot;;\n            String^ step2Format = &quot;  {0,9}: Set {1} = \\&quot;{2}\\&quot;&quot;;  \n\n            // Step 1:\n            // Check whether the sample environment variables already\n            // exist.\n            // WARNING: These variables will be deleted at the end of\n            // this sample.\n            Console::WriteLine(messageStep1);\n            CheckVariables();\n            Console::WriteLine();   \n\n            // Step 2:\n            // Set the environment variable for each target.\n            // This section demonstrates\n            // Environment.SetEnvironmentVariable.\n            Console::WriteLine(messageStep2);     \n\n            // Set the environment variable for the default target\n            // (the current process).\n            Console::WriteLine(step2Format, &quot;(default)&quot;, VariableA,\n                existsA);\n            Environment::SetEnvironmentVariable(VariableA, existsA);  \n\n            // Set the environment variable for the current process.\n            Console::WriteLine(step2Format, &quot;Process&quot;, VariableB,\n                existsB);\n            Environment::SetEnvironmentVariable(VariableB, existsB,\n                EnvironmentVariableTarget::Process);\n\n            // Set the environment variable for the current user.\n            Console::WriteLine(step2Format, &quot;User&quot;, VariableC,\n                existsC);\n            Environment::SetEnvironmentVariable(VariableC, existsC,\n                EnvironmentVariableTarget::User);\n\n            // Set the environment variable for the local machine.\n            Console::WriteLine(step2Format, &quot;Machine&quot;, VariableD,\n                existsD);\n            Environment::SetEnvironmentVariable(VariableD, existsD,\n                EnvironmentVariableTarget::Machine);\n            Console::WriteLine();      \n\n            // Step 3, part 1:\n            // Display the environment variables in each target.\n            Console::WriteLine(messageStep3Part1);\n            PrintVariables();\n            Console::WriteLine();     \n\n            // Step 3, part 2:\n            // Check whether the User and Machine environment\n            // variables were created in the Windows operating system\n            // registry.\n            Console::WriteLine(messageStep3Part2);\n            CheckRegistryVariables();\n            Console::WriteLine();\n\n            // Step 4, part 1:\n            // Delete the environment variables created for this\n            // sample. This section demonstrates using \n            // Environment.SetEnvironmentVariable to delete an \n            // environment variable.\n            Console::WriteLine(messageStep4Part1);\n            Environment::SetEnvironmentVariable(VariableA, nullptr);\n            Environment::SetEnvironmentVariable(VariableB, nullptr,\n                EnvironmentVariableTarget::Process);\n            Environment::SetEnvironmentVariable(VariableC, nullptr,\n                EnvironmentVariableTarget::User);\n            Environment::SetEnvironmentVariable(VariableD, nullptr,\n                EnvironmentVariableTarget::Machine);     \n\n            // Step 4, part 2:\n            // Check whether the environment variables were deleted \n            // in each target.\n            Console::WriteLine(messageStep4Part2);\n            CheckVariables();\n\n            // Step 4, part 3:\n            // Check whether the User and Machine environment\n            // variables were deleted from the Windows operating\n            // system registry.\n            Console::WriteLine(messageStep4Part3);\n            CheckRegistryVariables();\n        }\n\n    protected:\n        // Globals:\n        literal String^ NameValueFormat = &quot;  {0} {1}.&quot;;\n        literal String^ VariableSuffix = &quot;_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Four relatively unique environment variable names.\n        // default process\n\n        literal String^ VariableA = &quot;A_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Current Process\n        literal String^ VariableB = &quot;B_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Current User\n        literal String^ VariableC = &quot;C_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Local Machine\n        literal String^ VariableD = &quot;D_GETSET_ENVAR_SAMPLE&quot;;\n\n    private:\n        // CheckVariablesInTarget:\n        // Test whether a specific environment variable exists\n        // in a target. This section demonstrates\n        // Environment.GetEnvironmentVariable.\n        static void CheckVariablesInTarget(String^ variable,\n            EnvironmentVariableTarget target)\n        {\n            String^ variableName;\n\n            // Zero means use the default target.\n            if (target == (EnvironmentVariableTarget) 0)\n            {\n                variableName =\n                    Environment::GetEnvironmentVariable(variable);\n            }\n            else\n            {\n                variableName = Environment::GetEnvironmentVariable(\n                    variable, target);\n            }\n            Console::WriteLine(NameValueFormat, variable,\n                (String::IsNullOrEmpty(variableName) ?\n                &quot;doesn&#39;t exist&quot; : variableName));\n        }\n\n        // CheckVariable:\n        // Uses CheckVariablesInTarget to test whether each\n        // environment variable exists in a target.\n        static void CheckVariables()\n        {\n            Console::WriteLine(&quot;Process:&quot;);\n\n            // Check the default target(current process)\n            CheckVariablesInTarget(VariableA,\n                (EnvironmentVariableTarget) 0);\n            CheckVariablesInTarget(VariableB,\n                EnvironmentVariableTarget::Process);\n            CheckVariablesInTarget(VariableC,\n                EnvironmentVariableTarget::Process);\n            CheckVariablesInTarget(VariableD,\n                EnvironmentVariableTarget::Process);\n            Console::WriteLine();\n\n            Console::WriteLine(&quot;User:&quot;);\n            CheckVariablesInTarget(VariableA,\n                EnvironmentVariableTarget::User);\n            CheckVariablesInTarget(VariableB,\n                EnvironmentVariableTarget::User);\n            CheckVariablesInTarget(VariableC,\n                EnvironmentVariableTarget::User);\n            CheckVariablesInTarget(VariableD,\n                EnvironmentVariableTarget::User);\n            Console::WriteLine();\n\n            Console::WriteLine(&quot;Machine:&quot;);\n            CheckVariablesInTarget(VariableA,\n                EnvironmentVariableTarget::Machine);\n            CheckVariablesInTarget(VariableB,\n                EnvironmentVariableTarget::Machine);\n            CheckVariablesInTarget(VariableC,\n                EnvironmentVariableTarget::Machine);\n            CheckVariablesInTarget(VariableD,\n                EnvironmentVariableTarget::Machine);\n            Console::WriteLine();\n        }\n\n        // PrintVariablesFromTarget: PrintVariables helper function.\n        // This section demonstrates\n        // Environment.GetEnvironmentVariables.\n        static void PrintVariablesFromTarget(\n            EnvironmentVariableTarget target)\n        {\n            String^ valueString;\n            String^ keyString;\n\n            for each (DictionaryEntry^ dictionary in\n                Environment::GetEnvironmentVariables(target))\n            {\n                keyString = safe_cast&lt;String^&gt; (dictionary-&gt;Key);\n                valueString = safe_cast&lt;String^&gt; (dictionary-&gt;Value);\n                if (keyString-&gt;Contains(VariableSuffix))\n                    Console::WriteLine(NameValueFormat, keyString,\n                    valueString);\n            }\n            Console::WriteLine();\n        }\n\n        // PrintVariables:\n        // Uses PrintVariablesFromTarget to test whether\n        // each environment variable exists in a target.\n        static void PrintVariables()\n        {\n            Console::WriteLine(&quot;Process:&quot;);\n            PrintVariablesFromTarget(EnvironmentVariableTarget::Process);\n\n            Console::WriteLine(&quot;User:&quot;);\n            PrintVariablesFromTarget(EnvironmentVariableTarget::User);\n\n            Console::WriteLine(&quot;Machine:&quot;);\n            PrintVariablesFromTarget(EnvironmentVariableTarget::Machine);\n        }\n\n        // CheckRegistryVariablesForKey: CheckRegistryVariables\n        // helper function. This function filters out irrelevant\n        // environment variables.\n        static void CheckRegistryVariablesForKey(RegistryKey^ targetKey)\n        {\n            bool exists = false;            \n\n            for each (\n                String^ variableName in targetKey-&gt;GetValueNames())\n            {\n                if (variableName-&gt;Contains(VariableSuffix))\n                {\n                    String^ variableValue =\n                        safe_cast&lt;String^&gt;\n                        (targetKey-&gt;GetValue(variableName));\n                    Console::WriteLine(NameValueFormat, variableName,\n                        variableValue);\n                    exists = true;\n                }\n            }\n            if (!exists)\n            {\n                Console::WriteLine(\n                    &quot;  Environment variable doesn&#39;t exist.&quot;);\n            }\n            Console::WriteLine();\n        }\n\n        // CheckRegistryVariables:\n        // Uses CheckRegistryVariables to display the User and\n        // Machine environment variables in the registry.\n        static void CheckRegistryVariables()\n        {\n            String^ subkeyUser = &quot;Environment&quot;;\n            String^ subkeyMachine = &quot;System\\\\CurrentControlSet\\\\&quot;\n                &quot;Control\\\\Session Manager\\\\Environment&quot;;\n            String^ subkeyFormat = &quot;\\&quot;{0}\\&quot; key:&quot;;\n\n            Console::WriteLine(subkeyFormat, subkeyUser);\n            CheckRegistryVariablesForKey(\n                Registry::CurrentUser-&gt;OpenSubKey(subkeyUser));\n\n            Console::WriteLine(subkeyFormat, subkeyMachine);\n            CheckRegistryVariablesForKey(\n                Registry::LocalMachine-&gt;OpenSubKey(subkeyMachine));\n        }\n    };\n};\n\nusing namespace EnvironmentVariablesSample;\n\nint main()\n{\n    TestEnvironmentVariables::DoTest();\n}\n\n/*\nThis example produces the following results:\n\nStep 1:\nCheck whether the environment variables already exist in\nthe various targets...\n\nProcess:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\n\nStep 2:\nSet the environment variable for each target...\n\n(default): Set A_GETSET_ENVAR_SAMPLE = &quot;exists in the default target (Process)&quot;\nProcess: Set B_GETSET_ENVAR_SAMPLE = &quot;exists in Process&quot;\nUser: Set C_GETSET_ENVAR_SAMPLE = &quot;exists in User&quot;\nMachine: Set D_GETSET_ENVAR_SAMPLE = &quot;exists in Machine&quot;\n\nStep 3, part 1:\nDisplay the environment variables in each target...\n\nProcess:\nB_GETSET_ENVAR_SAMPLE exists in Process.\nA_GETSET_ENVAR_SAMPLE exists in the default target (Process).\n\nUser:\nC_GETSET_ENVAR_SAMPLE exists in User.\n\nMachine:\nD_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 3, part 2:\nCheck whether the User and Machine environment variables\nwere created in the Windows operating system registry...\n\n&quot;Environment&quot; key:\nC_GETSET_ENVAR_SAMPLE exists in User.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\nD_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 4, part 1:\nDelete the environment variables created for this sample...\n\nStep 4, part 2:\nCheck whether the environment variables were deleted\nin each target...\n\nProcess:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nStep 4, part 3:\nCheck whether the User and Machine environment variables\nwere deleted from the Windows operating system registry...\n\n&quot;Environment&quot; key:\nEnvironment variable doesn&#39;t exist.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\nEnvironment variable doesn&#39;t exist.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"environment.getsetenvar#1\">&#39; This example demonstrates the \n&#39;     Environment.GetEnvironmentVariable,\n&#39;     Environment.SetEnvironmentVariable, and \n&#39;     Environment.GetEnvironmentVariables overloaded methods.\nImports System\nImports System.Collections\nImports Microsoft.Win32\nImports Microsoft.VisualBasic\n\nClass Sample\n   &#39;-------------------------------------------------------------------------------------\n   &#39; Globals: \n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared fmtNameValue As String = &quot;  {0} {1}.&quot;\n   Protected Shared myVarSuffix As String = &quot;_GETSET_ENVAR_SAMPLE&quot;\n   \n   &#39; Four relatively unique environment variable names.\n   Protected Shared myVarA As String = &quot;A&quot; &amp; myVarSuffix &#39; default process\n   Protected Shared myVarB As String = &quot;B&quot; &amp; myVarSuffix &#39; Current Process\n   Protected Shared myVarC As String = &quot;C&quot; &amp; myVarSuffix &#39; Current User\n   Protected Shared myVarD As String = &quot;D&quot; &amp; myVarSuffix &#39; Local Machine\n   &#39;=====================================================================================\n   &#39; EachVariable: \n   &#39; Test whether a specific environment variable exists in a target.\n   &#39; This section demonstrates Environment.GetEnvironmentVariable.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub EachVariable(var As String, tgt As EnvironmentVariableTarget)\n      Dim str As String\n      &#39;\n      If 0 = tgt Then &#39; Zero means use the default target.\n         str = Environment.GetEnvironmentVariable(var)\n      Else\n         str = Environment.GetEnvironmentVariable(var, tgt)\n      End If\n      Console.WriteLine(fmtNameValue, var, IIf(String.IsNullOrEmpty(str), _\n                                              &quot;doesn&#39;t exist&quot;, str))\n   End Sub &#39;EachVariable\n   \n   &#39;-------------------------------------------------------------------------------------\n   &#39; CheckEachVariable: \n   &#39; Uses EachVariable to test whether each environment variable exists in a target.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub CheckEachVariable()\n      Console.WriteLine(&quot;Process:&quot;)\n      EachVariable(myVarA, 0) &#39; Check the default target (current process)\n      EachVariable(myVarB, EnvironmentVariableTarget.Process)\n      EachVariable(myVarC, EnvironmentVariableTarget.Process)\n      EachVariable(myVarD, EnvironmentVariableTarget.Process)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;User:&quot;)\n      EachVariable(myVarA, EnvironmentVariableTarget.User)\n      EachVariable(myVarB, EnvironmentVariableTarget.User)\n      EachVariable(myVarC, EnvironmentVariableTarget.User)\n      EachVariable(myVarD, EnvironmentVariableTarget.User)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Machine:&quot;)\n      EachVariable(myVarA, EnvironmentVariableTarget.Machine)\n      EachVariable(myVarB, EnvironmentVariableTarget.Machine)\n      EachVariable(myVarC, EnvironmentVariableTarget.Machine)\n      EachVariable(myVarD, EnvironmentVariableTarget.Machine)\n      Console.WriteLine()\n   End Sub &#39;CheckEachVariable\n   \n   &#39;=====================================================================================\n   &#39; AllVariables: CheckAllVariables helper function.\n   &#39; This section demonstrates Environment.GetEnvironmentVariables.\n   &#39;-------------------------------------------------------------------------------------\n   Private Shared Sub AllVariables(tgt As EnvironmentVariableTarget)\n      Dim value As String\n      Dim key As String\n      \n      Dim de As DictionaryEntry\n      For Each de In Environment.GetEnvironmentVariables(tgt)\n         key = CStr(de.Key)\n         value = CStr(de.Value)\n         If key.Contains(myVarSuffix) Then\n            Console.WriteLine(fmtNameValue, key, value)\n         End If\n      Next de\n      Console.WriteLine()\n   End Sub &#39;AllVariables\n   \n   &#39;=====================================================================================\n   &#39; CheckAllVariables: \n   &#39; Uses AllVariables to test whether each environment variable exists in a target.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub CheckAllVariables()\n      Console.WriteLine(&quot;Process:&quot;)\n      AllVariables(EnvironmentVariableTarget.Process)\n      \n      Console.WriteLine(&quot;User:&quot;)\n      AllVariables(EnvironmentVariableTarget.User)\n      \n      Console.WriteLine(&quot;Machine:&quot;)\n      AllVariables(EnvironmentVariableTarget.Machine)\n   End Sub &#39;CheckAllVariables\n   \n   &#39;=====================================================================================\n   &#39; ChkReg: CheckRegistry helper function.\n   &#39; This function filters out irrelevant environment variables. \n   &#39;-------------------------------------------------------------------------------------\n   Private Shared Sub ChkReg(rk As RegistryKey)\n      Dim exists As Boolean = False\n      Dim registryNone As String = &quot;  Environment variable doesn&#39;t exist.&quot;\n      \n      Dim s As String\n      For Each s In rk.GetValueNames()\n         If s.Contains(myVarSuffix) Then\n            Console.WriteLine(fmtNameValue, s, CStr(rk.GetValue(s)))\n            exists = True\n         End If\n      Next s\n      If exists = False Then\n         Console.WriteLine(registryNone)\n      End If\n      Console.WriteLine()\n   End Sub &#39;ChkReg\n   \n   &#39;-------------------------------------------------------------------------------------\n   &#39; CheckRegistry: \n   &#39; Uses ChkReg to display the User and Machine environment variables in the registry.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub CheckRegistry()\n      Dim subkeyU As String = &quot;Environment&quot;\n      Dim subkeyM As String = &quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot;\n      Dim fmtSubkey As String = &quot;&quot;&quot;{0}&quot;&quot; key:&quot;\n      \n      Console.WriteLine(fmtSubkey, subkeyU)\n      ChkReg(Registry.CurrentUser.OpenSubKey(subkeyU))\n      \n      Console.WriteLine(fmtSubkey, subkeyM)\n      ChkReg(Registry.LocalMachine.OpenSubKey(subkeyM))\n   End Sub &#39;CheckRegistry\n   \n   &#39;=====================================================================================\n   &#39; Main:\n   &#39;-------------------------------------------------------------------------------------\n   Public Shared Sub Main()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Environment variable values\n      &#39;-------------------------------------------------------------------------------------\n      Dim existsA As String = &quot;exists in the default target (Process)&quot;\n      Dim existsB As String = &quot;exists in Process&quot;\n      Dim existsC As String = &quot;exists in User&quot;\n      Dim existsD As String = &quot;exists in Machine&quot;\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Messages:\n      &#39;-------------------------------------------------------------------------------------\n      Dim msg1  As String = &quot;Step 1:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the environment variables already exist in &quot; _\n                 &amp; vbCrLf &amp; &quot;  the various targets...&quot; &amp; vbCrLf\n      Dim msg2  As String = &quot;Step 2:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Set the environment variable for each target...&quot; &amp; vbCrLf\n      Dim msg31 As String = &quot;Step 3, part 1:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Display the environment variables in each target...&quot; &amp; vbCrLf\n      Dim msg32 As String = &quot;Step 3, part 2:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the User and Machine environment variables &quot; _\n                 &amp; vbCrLf &amp; &quot;  were created in the Windows operating system registry...&quot; _\n                 &amp; vbCrLf\n      Dim msg41 As String = &quot;Step 4, part 1:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Delete the environment variables created for this sample...&quot; _\n                 &amp; vbCrLf\n      Dim msg42 As String = &quot;Step 4, part 2:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the environment variables were deleted &quot; _\n                 &amp; vbCrLf &amp; &quot;  in each target...&quot; &amp; vbCrLf\n      Dim msg43 As String = &quot;Step 4, part 3:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the User and Machine environment variables &quot; _\n                 &amp; vbCrLf &amp; &quot;  were deleted from the Windows operating system registry...&quot; _\n                 &amp; vbCrLf\n      Dim fmt2x As String = &quot;  {0,9}: Set {1} = &quot;&quot;{2}&quot;&quot;&quot;\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 1:\n      &#39; Check whether the sample environment variables already exist.\n      &#39; WARNING: These variables will be deleted at the end of this sample.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg1)\n      CheckEachVariable()\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 2:\n      &#39; Set the environment variable for each target.\n      &#39; This section demonstrates Environment.SetEnvironmentVariable.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg2)\n      &#39; Set the environment variable for the default target (the current process).\n      Console.WriteLine(fmt2x, &quot;(default)&quot;, myVarA, existsA)\n      Environment.SetEnvironmentVariable(myVarA, existsA)\n      \n      &#39; Set the environment variable for the current process.\n      Console.WriteLine(fmt2x, &quot;Process&quot;, myVarB, existsB)\n      Environment.SetEnvironmentVariable(myVarB, existsB, EnvironmentVariableTarget.Process)\n      \n      &#39; Set the environment variable for the current user.\n      Console.WriteLine(fmt2x, &quot;User&quot;, myVarC, existsC)\n      Environment.SetEnvironmentVariable(myVarC, existsC, EnvironmentVariableTarget.User)\n      \n      &#39; Set the environment variable for the local machine.\n      Console.WriteLine(fmt2x, &quot;Machine&quot;, myVarD, existsD)\n      Environment.SetEnvironmentVariable(myVarD, existsD, EnvironmentVariableTarget.Machine)\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 3, part 1:\n      &#39; Display the environment variables in each target.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg31)\n      CheckAllVariables()\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 3, part 2:\n      &#39; Check whether the User and Machine environment variables were created in the Windows \n      &#39; operating system registry.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg32)\n      CheckRegistry()\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 4, part 1:\n      &#39; Delete the environment variables created for this sample.\n      &#39; This section demonstrates using Environment.SetEnvironmentVariable to delete an \n      &#39; environment variable.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg41)\n      Environment.SetEnvironmentVariable(myVarA, Nothing)\n      Environment.SetEnvironmentVariable(myVarB, Nothing, EnvironmentVariableTarget.Process)\n      Environment.SetEnvironmentVariable(myVarC, Nothing, EnvironmentVariableTarget.User)\n      Environment.SetEnvironmentVariable(myVarD, Nothing, EnvironmentVariableTarget.Machine)\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 4, part 2:\n      &#39; Check whether the environment variables were deleted in each target.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg42)\n      CheckEachVariable()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 4, part 3:\n      &#39; Check whether the User and Machine environment variables were deleted from the \n      &#39; Windows operating system registry.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg43)\n      CheckRegistry()\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Step 1:\n&#39;  Check whether the environment variables already exist in\n&#39;  the various targets...\n&#39;\n&#39;Process:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;User:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;Machine:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;\n&#39;Step 2:\n&#39;  Set the environment variable for each target...\n&#39;\n&#39;  (default): Set A_GETSET_ENVAR_SAMPLE = &quot;exists in the default target (Process)&quot;\n&#39;    Process: Set B_GETSET_ENVAR_SAMPLE = &quot;exists in Process&quot;\n&#39;       User: Set C_GETSET_ENVAR_SAMPLE = &quot;exists in User&quot;\n&#39;    Machine: Set D_GETSET_ENVAR_SAMPLE = &quot;exists in Machine&quot;\n&#39;\n&#39;Step 3, part 1:\n&#39;  Display the environment variables in each target...\n&#39;\n&#39;Process:\n&#39;  B_GETSET_ENVAR_SAMPLE exists in Process.\n&#39;  A_GETSET_ENVAR_SAMPLE exists in the default target (Process).\n&#39;\n&#39;User:\n&#39;  C_GETSET_ENVAR_SAMPLE exists in User.\n&#39;\n&#39;Machine:\n&#39;  D_GETSET_ENVAR_SAMPLE exists in Machine.\n&#39;\n&#39;\n&#39;Step 3, part 2:\n&#39;  Check whether the User and Machine environment variables\n&#39;  were created in the Windows operating system registry...\n&#39;\n&#39;&quot;Environment&quot; key:\n&#39;  C_GETSET_ENVAR_SAMPLE exists in User.\n&#39;\n&#39;&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n&#39;  D_GETSET_ENVAR_SAMPLE exists in Machine.\n&#39;\n&#39;\n&#39;Step 4, part 1:\n&#39;  Delete the environment variables created for this sample...\n&#39;\n&#39;Step 4, part 2:\n&#39;  Check whether the environment variables were deleted\n&#39;  in each target...\n&#39;\n&#39;Process:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;User:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;Machine:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;Step 4, part 3:\n&#39;  Check whether the User and Machine environment variables\n&#39;  were deleted from the Windows operating system registry...\n&#39;\n&#39;&quot;Environment&quot; key:\n&#39;  Environment variable doesn&#39;t exist.\n&#39;\n&#39;&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n&#39;  Environment variable doesn&#39;t exist.\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"environment.getsetenvar#1\">// This example demonstrates the \n//     Environment.GetEnvironmentVariable,\n//     Environment.SetEnvironmentVariable, and \n//     Environment.GetEnvironmentVariables overloaded methods.\n\nusing System;\nusing System.Collections;\nusing Microsoft.Win32;\n\nclass Sample \n{\n//-------------------------------------------------------------------------------------\n// Globals: \n//-------------------------------------------------------------------------------------\n    protected static string fmtNameValue = &quot;  {0} {1}.&quot;;\n    protected static string myVarSuffix = &quot;_GETSET_ENVAR_SAMPLE&quot;;\n\n// Four relatively unique environment variable names.\n    protected static string myVarA = &quot;A&quot; + myVarSuffix; // default process\n    protected static string myVarB = &quot;B&quot; + myVarSuffix; // Current Process\n    protected static string myVarC = &quot;C&quot; + myVarSuffix; // Current User\n    protected static string myVarD = &quot;D&quot; + myVarSuffix; // Local Machine\n//=====================================================================================\n// EachVariable: \n// Test whether a specific environment variable exists in a target.\n// This section demonstrates Environment.GetEnvironmentVariable.\n//-------------------------------------------------------------------------------------\n    protected static void EachVariable(string var, EnvironmentVariableTarget tgt)\n    {\n    string str;\n    //\n    if (0 == tgt)          // Zero means use the default target.\n        str = Environment.GetEnvironmentVariable(var);\n    else\n        str = Environment.GetEnvironmentVariable(var, tgt);\n    Console.WriteLine(fmtNameValue, \n                      var, (String.IsNullOrEmpty(str) ? &quot;doesn&#39;t exist&quot; : str));\n    }\n//-------------------------------------------------------------------------------------\n// CheckEachVariable: \n// Uses EachVariable to test whether each environment variable exists in a target.\n//-------------------------------------------------------------------------------------\n    protected static void CheckEachVariable()\n    {\n    Console.WriteLine(&quot;Process:&quot;);\n    EachVariable(myVarA, 0);  // Check the default target (current process)\n    EachVariable(myVarB, EnvironmentVariableTarget.Process);\n    EachVariable(myVarC, EnvironmentVariableTarget.Process);\n    EachVariable(myVarD, EnvironmentVariableTarget.Process);\n    Console.WriteLine();\n\n    Console.WriteLine(&quot;User:&quot;);\n    EachVariable(myVarA, EnvironmentVariableTarget.User);\n    EachVariable(myVarB, EnvironmentVariableTarget.User);\n    EachVariable(myVarC, EnvironmentVariableTarget.User);\n    EachVariable(myVarD, EnvironmentVariableTarget.User);\n    Console.WriteLine();\n\n    Console.WriteLine(&quot;Machine:&quot;);\n    EachVariable(myVarA, EnvironmentVariableTarget.Machine);\n    EachVariable(myVarB, EnvironmentVariableTarget.Machine);\n    EachVariable(myVarC, EnvironmentVariableTarget.Machine);\n    EachVariable(myVarD, EnvironmentVariableTarget.Machine);\n    Console.WriteLine();\n    }\n//=====================================================================================\n// AllVariables: CheckAllVariables helper function.\n// This section demonstrates Environment.GetEnvironmentVariables.\n//-------------------------------------------------------------------------------------\n    private static void AllVariables(EnvironmentVariableTarget tgt)\n    {\n    string value;\n    string key;\n\n    foreach(DictionaryEntry de in Environment.GetEnvironmentVariables(tgt))\n        {\n        key   = (string)de.Key;\n        value = (string)de.Value;\n        if (key.Contains(myVarSuffix))\n            Console.WriteLine(fmtNameValue, key, value);\n        }\n    Console.WriteLine();\n    }\n//=====================================================================================\n// CheckAllVariables: \n// Uses AllVariables to test whether each environment variable exists in a target.\n//-------------------------------------------------------------------------------------\n    protected static void CheckAllVariables()\n    {\n    Console.WriteLine(&quot;Process:&quot;);\n    AllVariables(EnvironmentVariableTarget.Process);\n\n    Console.WriteLine(&quot;User:&quot;);\n    AllVariables(EnvironmentVariableTarget.User);\n\n    Console.WriteLine(&quot;Machine:&quot;);\n    AllVariables(EnvironmentVariableTarget.Machine);\n    }\n//=====================================================================================\n// ChkReg: CheckRegistry helper function.\n// This function filters out irrelevant environment variables. \n//-------------------------------------------------------------------------------------\n    private static void ChkReg(RegistryKey rk)\n    {\n    bool exists = false;\n    string registryNone = &quot;  Environment variable doesn&#39;t exist.&quot;;\n\n    foreach (string s in rk.GetValueNames())\n        {\n        if (s.Contains(myVarSuffix))\n            {\n            Console.WriteLine(fmtNameValue, s, (string)rk.GetValue(s));\n            exists = true;\n            }\n        }\n    if (exists == false)\n        Console.WriteLine(registryNone);\n    Console.WriteLine();\n    }\n//-------------------------------------------------------------------------------------\n// CheckRegistry: \n// Uses ChkReg to display the User and Machine environment variables in the registry.\n//-------------------------------------------------------------------------------------\n    protected static void CheckRegistry()\n    {\n    string subkeyU = @&quot;Environment&quot;;\n    string subkeyM = @&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot;;\n    string fmtSubkey = &quot;\\&quot;{0}\\&quot; key:&quot;;\n\n    Console.WriteLine(fmtSubkey, subkeyU);\n    ChkReg(Registry.CurrentUser.OpenSubKey(subkeyU));\n\n    Console.WriteLine(fmtSubkey, subkeyM);\n    ChkReg(Registry.LocalMachine.OpenSubKey(subkeyM));\n    }\n//=====================================================================================\n// Main:\n//-------------------------------------------------------------------------------------\n    public static void Main() \n    {\n//-------------------------------------------------------------------------------------\n// Environment variable values\n//-------------------------------------------------------------------------------------\n    string existsA = &quot;exists in the default target (Process)&quot;;\n    string existsB = &quot;exists in Process&quot;;\n    string existsC = &quot;exists in User&quot;;\n    string existsD = &quot;exists in Machine&quot;;\n//-------------------------------------------------------------------------------------\n// Messages:\n//-------------------------------------------------------------------------------------\n    string msg1  = &quot;Step 1:<br>&quot; +\n                       &quot;  Check whether the environment variables already exist in <br>&quot; + \n                       &quot;  the various targets...<br>&quot;;\n    string msg2  = &quot;Step 2:<br>&quot; +\n                       &quot;  Set the environment variable for each target...<br>&quot;;\n    string msg31 = &quot;Step 3, part 1:<br>&quot; + \n                       &quot;  Display the environment variables in each target...<br>&quot;;\n    string msg32 = &quot;Step 3, part 2:<br>&quot; +\n                       &quot;  Check whether the User and Machine environment variables <br>&quot; +\n                       &quot;  were created in the Windows operating system registry...<br>&quot;;\n    string msg41 = &quot;Step 4, part 1:<br>&quot; +\n                       &quot;  Delete the environment variables created for this sample...<br>&quot;;\n    string msg42 = &quot;Step 4, part 2:<br>&quot; +\n                       &quot;  Check whether the environment variables were deleted <br>&quot; +\n                       &quot;  in each target...<br>&quot;;\n    string msg43 = &quot;Step 4, part 3:<br>&quot; + \n                       &quot;  Check whether the User and Machine environment variables <br>&quot; +\n                       &quot;  were deleted from the Windows operating system registry...<br>&quot;;\n    string fmt2x   = &quot;  {0,9}: Set {1} = \\&quot;{2}\\&quot;&quot;;\n//-------------------------------------------------------------------------------------\n// Step 1:\n// Check whether the sample environment variables already exist.\n// WARNING: These variables will be deleted at the end of this sample.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg1);\n    CheckEachVariable();\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 2:\n// Set the environment variable for each target.\n// This section demonstrates Environment.SetEnvironmentVariable.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg2);\n// Set the environment variable for the default target (the current process).\n    Console.WriteLine(fmt2x, &quot;(default)&quot;, myVarA, existsA);\n    Environment.SetEnvironmentVariable(myVarA, existsA);\n\n// Set the environment variable for the current process.\n    Console.WriteLine(fmt2x, &quot;Process&quot;, myVarB, existsB);\n    Environment.SetEnvironmentVariable(myVarB, existsB, \n        EnvironmentVariableTarget.Process);\n\n// Set the environment variable for the current user.\n    Console.WriteLine(fmt2x, &quot;User&quot;, myVarC, existsC);\n    Environment.SetEnvironmentVariable(myVarC, existsC, \n        EnvironmentVariableTarget.User);\n\n// Set the environment variable for the local machine.\n    Console.WriteLine(fmt2x, &quot;Machine&quot;, myVarD, existsD);\n    Environment.SetEnvironmentVariable(myVarD, existsD, \n        EnvironmentVariableTarget.Machine);\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 3, part 1:\n// Display the environment variables in each target.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg31);\n    CheckAllVariables();\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 3, part 2:\n// Check whether the User and Machine environment variables were created in the Windows \n// operating system registry.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg32);\n    CheckRegistry();\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 4, part 1:\n// Delete the environment variables created for this sample.\n// This section demonstrates using Environment.SetEnvironmentVariable to delete an \n// environment variable.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg41);\n    Environment.SetEnvironmentVariable(myVarA, null);\n    Environment.SetEnvironmentVariable(myVarB, null, EnvironmentVariableTarget.Process);\n    Environment.SetEnvironmentVariable(myVarC, null, EnvironmentVariableTarget.User);\n    Environment.SetEnvironmentVariable(myVarD, null, EnvironmentVariableTarget.Machine);\n//-------------------------------------------------------------------------------------\n// Step 4, part 2:\n// Check whether the environment variables were deleted in each target.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg42);\n    CheckEachVariable();\n//-------------------------------------------------------------------------------------\n// Step 4, part 3:\n// Check whether the User and Machine environment variables were deleted from the \n// Windows operating system registry.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg43);\n    CheckRegistry();\n    }\n}\n/*\nThis example produces the following results:\n\nStep 1:\n  Check whether the environment variables already exist in\n  the various targets...\n\nProcess:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\n\nStep 2:\n  Set the environment variable for each target...\n\n  (default): Set A_GETSET_ENVAR_SAMPLE = &quot;exists in the default target (Process)&quot;\n    Process: Set B_GETSET_ENVAR_SAMPLE = &quot;exists in Process&quot;\n       User: Set C_GETSET_ENVAR_SAMPLE = &quot;exists in User&quot;\n    Machine: Set D_GETSET_ENVAR_SAMPLE = &quot;exists in Machine&quot;\n\nStep 3, part 1:\n  Display the environment variables in each target...\n\nProcess:\n  B_GETSET_ENVAR_SAMPLE exists in Process.\n  A_GETSET_ENVAR_SAMPLE exists in the default target (Process).\n\nUser:\n  C_GETSET_ENVAR_SAMPLE exists in User.\n\nMachine:\n  D_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 3, part 2:\n  Check whether the User and Machine environment variables\n  were created in the Windows operating system registry...\n\n&quot;Environment&quot; key:\n  C_GETSET_ENVAR_SAMPLE exists in User.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n  D_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 4, part 1:\n  Delete the environment variables created for this sample...\n\nStep 4, part 2:\n  Check whether the environment variables were deleted\n  in each target...\n\nProcess:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nStep 4, part 3:\n  Check whether the User and Machine environment variables\n  were deleted from the Windows operating system registry...\n\n&quot;Environment&quot; key:\n  Environment variable doesn&#39;t exist.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n  Environment variable doesn&#39;t exist.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_GetEnvironmentVariables\">\r\n    \r\n            <a id=\"System_Environment_GetEnvironmentVariables_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnvironmentVariables()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves all environment variable names and their values from the current process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.IDictionary GetEnvironmentVariables ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </div>\r\n                  <p>A dictionary that contains all environment variable names and their values; otherwise, an empty dictionary if no environment variables are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission to perform this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>The buffer is out of memory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The names and values for the environment variables are stored as key-value pairs in the returned <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the GetEnvironmentVariables method.  </p>\n<pre><code class=\"lang-cs\" name=\"Environment.GetEnvironmentVariables#1\">// Sample for the Environment.GetEnvironmentVariables method\nusing System;\nusing System.Collections;\n\nclass Sample \n{\n    public static void Main() \n    {\n       Console.WriteLine();\n       Console.WriteLine(&quot;GetEnvironmentVariables: &quot;);\n       foreach (DictionaryEntry de in Environment.GetEnvironmentVariables()) \n           Console.WriteLine(&quot;  {0} = {1}&quot;, de.Key, de.Value);\n    }\n}\n// Output from the example is not shown, since it is:\n//    Lengthy.\n//    Specific to the machine on which the example is run.\n//    May reveal information that should remain secure.\n</code></pre><pre><code class=\"lang-cpp\" name=\"Environment.GetEnvironmentVariables#1\">using namespace System;\nusing namespace System::Collections;\n\nint main()\n{\n   Console::WriteLine( &quot;GetEnvironmentVariables: &quot; );\n   for each (DictionaryEntry^ de in Environment::GetEnvironmentVariables())\n      Console::WriteLine( &quot; {0} = {1}&quot;, de-&gt;Key, de-&gt;Value );\n}\n// Output from the example is not shown, since it is:\n//    Lengthy.\n//    Specific to the machine on which the example is run.\n//    May reveal information that should remain secure.\n</code></pre><pre><code class=\"lang-vb\" name=\"Environment.GetEnvironmentVariables#1\">&#39; Sample for the Environment.GetEnvironmentVariables method\nImports System\nImports System.Collections\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine(&quot;GetEnvironmentVariables: &quot;)\n      For Each de As DictionaryEntry In Environment.GetEnvironmentVariables()\n         Console.WriteLine(&quot;  {0} = {1}&quot;, de.Key, de.Value)\n      Next \n   End Sub \nEnd Class \n&#39; Output from the example is not shown, since it is:\n&#39;    Lengthy.\n&#39;    Specific to the machine on which the example is run.\n&#39;    May reveal information that should remain secure.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_GetEnvironmentVariables_System_EnvironmentVariableTarget_\">\r\n    \r\n            <a id=\"System_Environment_GetEnvironmentVariables_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnvironmentVariables(EnvironmentVariableTarget)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves all environment variable names and their values from the current process, or from the Windows operating system registry key for the current user or local machine.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.IDictionary GetEnvironmentVariables (EnvironmentVariableTarget target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </div>\r\n                  <p>A dictionary that contains all environment variable names and their values from the source specified by the <code>target</code> parameter; otherwise, an empty dictionary if no environment variables are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission to perform this operation for the specified value of <code>target</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>target</code> contains an illegal value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>target</code> parameter specifies whether the source is the current process, the registry key for the current user, or the registry key for the local machine.  </p>\n<p> The names and values of the environment variables are stored as key/value pairs in the returned <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates environment variables for the Process, User, and Machine targets, checks whether the operating system registry contains the User and Machine environment variables, then deletes the environment variables.  </p>\n<pre><code class=\"lang-cpp\" name=\"environment.getsetenvar#1\">// This example demonstrates the\n//     Environment.GetEnvironmentVariable,\n//     Environment.SetEnvironmentVariable, and\n//     Environment.GetEnvironmentVariables overloaded methods.\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace Microsoft::Win32;\n\nnamespace EnvironmentVariablesSample\n{\n    public ref class TestEnvironmentVariables sealed\n    {\n    public:\n        // DoTest: Test get/set environment variables\n        static void DoTest()\n        {     \n            // Environment variable values\n            String^ existsA = &quot;exists in the default target&quot;\n                &quot; (Process)&quot;;\n            String^ existsB = &quot;exists in Process&quot;;\n            String^ existsC = &quot;exists in User&quot;;\n            String^ existsD = &quot;exists in Machine&quot;;     \n            // Messages:\n            String^ messageStep1 = &quot;Step 1:<br>&quot;\n                &quot;  Check whether the environment variables already&quot;\n                &quot; exist in <br>&quot;\n                &quot;  the various targets...<br>&quot;;\n            String^ messageStep2 = &quot;Step 2:<br>&quot;\n                &quot;  Set the environment variable for each&quot;\n                &quot; target...<br>&quot;;\n            String^ messageStep3Part1 = &quot;Step 3, part 1:<br>&quot;\n                &quot;  Display the environment variables in each&quot;\n                &quot; target...<br>&quot;;\n            String^ messageStep3Part2 = &quot;Step 3, part 2:<br>&quot;\n                &quot;  Check whether the User and Machine &quot;\n                &quot; environment variables <br>&quot;\n                &quot;  were created in the Windows operating&quot;\n                &quot; system registry...<br>&quot;;\n            String^ messageStep4Part1 = &quot;Step 4, part 1:<br>&quot;\n                &quot;  Delete the environment variables created &quot;\n                &quot;for this sample...<br>&quot;;\n            String^ messageStep4Part2 = &quot;Step 4, part 2:<br>&quot;\n                &quot;  Check whether the environment variables were &quot;\n                &quot;deleted <br>&quot;\n                &quot;  in each target...<br>&quot;;\n            String^ messageStep4Part3 = &quot;Step 4, part 3:<br>&quot;\n                &quot;  Check whether the User and Machine environment &quot;\n                &quot;variables <br>&quot;\n                &quot;  were deleted from the Windows operating system &quot;\n                &quot;registry...<br>&quot;;\n            String^ step2Format = &quot;  {0,9}: Set {1} = \\&quot;{2}\\&quot;&quot;;  \n\n            // Step 1:\n            // Check whether the sample environment variables already\n            // exist.\n            // WARNING: These variables will be deleted at the end of\n            // this sample.\n            Console::WriteLine(messageStep1);\n            CheckVariables();\n            Console::WriteLine();   \n\n            // Step 2:\n            // Set the environment variable for each target.\n            // This section demonstrates\n            // Environment.SetEnvironmentVariable.\n            Console::WriteLine(messageStep2);     \n\n            // Set the environment variable for the default target\n            // (the current process).\n            Console::WriteLine(step2Format, &quot;(default)&quot;, VariableA,\n                existsA);\n            Environment::SetEnvironmentVariable(VariableA, existsA);  \n\n            // Set the environment variable for the current process.\n            Console::WriteLine(step2Format, &quot;Process&quot;, VariableB,\n                existsB);\n            Environment::SetEnvironmentVariable(VariableB, existsB,\n                EnvironmentVariableTarget::Process);\n\n            // Set the environment variable for the current user.\n            Console::WriteLine(step2Format, &quot;User&quot;, VariableC,\n                existsC);\n            Environment::SetEnvironmentVariable(VariableC, existsC,\n                EnvironmentVariableTarget::User);\n\n            // Set the environment variable for the local machine.\n            Console::WriteLine(step2Format, &quot;Machine&quot;, VariableD,\n                existsD);\n            Environment::SetEnvironmentVariable(VariableD, existsD,\n                EnvironmentVariableTarget::Machine);\n            Console::WriteLine();      \n\n            // Step 3, part 1:\n            // Display the environment variables in each target.\n            Console::WriteLine(messageStep3Part1);\n            PrintVariables();\n            Console::WriteLine();     \n\n            // Step 3, part 2:\n            // Check whether the User and Machine environment\n            // variables were created in the Windows operating system\n            // registry.\n            Console::WriteLine(messageStep3Part2);\n            CheckRegistryVariables();\n            Console::WriteLine();\n\n            // Step 4, part 1:\n            // Delete the environment variables created for this\n            // sample. This section demonstrates using \n            // Environment.SetEnvironmentVariable to delete an \n            // environment variable.\n            Console::WriteLine(messageStep4Part1);\n            Environment::SetEnvironmentVariable(VariableA, nullptr);\n            Environment::SetEnvironmentVariable(VariableB, nullptr,\n                EnvironmentVariableTarget::Process);\n            Environment::SetEnvironmentVariable(VariableC, nullptr,\n                EnvironmentVariableTarget::User);\n            Environment::SetEnvironmentVariable(VariableD, nullptr,\n                EnvironmentVariableTarget::Machine);     \n\n            // Step 4, part 2:\n            // Check whether the environment variables were deleted \n            // in each target.\n            Console::WriteLine(messageStep4Part2);\n            CheckVariables();\n\n            // Step 4, part 3:\n            // Check whether the User and Machine environment\n            // variables were deleted from the Windows operating\n            // system registry.\n            Console::WriteLine(messageStep4Part3);\n            CheckRegistryVariables();\n        }\n\n    protected:\n        // Globals:\n        literal String^ NameValueFormat = &quot;  {0} {1}.&quot;;\n        literal String^ VariableSuffix = &quot;_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Four relatively unique environment variable names.\n        // default process\n\n        literal String^ VariableA = &quot;A_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Current Process\n        literal String^ VariableB = &quot;B_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Current User\n        literal String^ VariableC = &quot;C_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Local Machine\n        literal String^ VariableD = &quot;D_GETSET_ENVAR_SAMPLE&quot;;\n\n    private:\n        // CheckVariablesInTarget:\n        // Test whether a specific environment variable exists\n        // in a target. This section demonstrates\n        // Environment.GetEnvironmentVariable.\n        static void CheckVariablesInTarget(String^ variable,\n            EnvironmentVariableTarget target)\n        {\n            String^ variableName;\n\n            // Zero means use the default target.\n            if (target == (EnvironmentVariableTarget) 0)\n            {\n                variableName =\n                    Environment::GetEnvironmentVariable(variable);\n            }\n            else\n            {\n                variableName = Environment::GetEnvironmentVariable(\n                    variable, target);\n            }\n            Console::WriteLine(NameValueFormat, variable,\n                (String::IsNullOrEmpty(variableName) ?\n                &quot;doesn&#39;t exist&quot; : variableName));\n        }\n\n        // CheckVariable:\n        // Uses CheckVariablesInTarget to test whether each\n        // environment variable exists in a target.\n        static void CheckVariables()\n        {\n            Console::WriteLine(&quot;Process:&quot;);\n\n            // Check the default target(current process)\n            CheckVariablesInTarget(VariableA,\n                (EnvironmentVariableTarget) 0);\n            CheckVariablesInTarget(VariableB,\n                EnvironmentVariableTarget::Process);\n            CheckVariablesInTarget(VariableC,\n                EnvironmentVariableTarget::Process);\n            CheckVariablesInTarget(VariableD,\n                EnvironmentVariableTarget::Process);\n            Console::WriteLine();\n\n            Console::WriteLine(&quot;User:&quot;);\n            CheckVariablesInTarget(VariableA,\n                EnvironmentVariableTarget::User);\n            CheckVariablesInTarget(VariableB,\n                EnvironmentVariableTarget::User);\n            CheckVariablesInTarget(VariableC,\n                EnvironmentVariableTarget::User);\n            CheckVariablesInTarget(VariableD,\n                EnvironmentVariableTarget::User);\n            Console::WriteLine();\n\n            Console::WriteLine(&quot;Machine:&quot;);\n            CheckVariablesInTarget(VariableA,\n                EnvironmentVariableTarget::Machine);\n            CheckVariablesInTarget(VariableB,\n                EnvironmentVariableTarget::Machine);\n            CheckVariablesInTarget(VariableC,\n                EnvironmentVariableTarget::Machine);\n            CheckVariablesInTarget(VariableD,\n                EnvironmentVariableTarget::Machine);\n            Console::WriteLine();\n        }\n\n        // PrintVariablesFromTarget: PrintVariables helper function.\n        // This section demonstrates\n        // Environment.GetEnvironmentVariables.\n        static void PrintVariablesFromTarget(\n            EnvironmentVariableTarget target)\n        {\n            String^ valueString;\n            String^ keyString;\n\n            for each (DictionaryEntry^ dictionary in\n                Environment::GetEnvironmentVariables(target))\n            {\n                keyString = safe_cast&lt;String^&gt; (dictionary-&gt;Key);\n                valueString = safe_cast&lt;String^&gt; (dictionary-&gt;Value);\n                if (keyString-&gt;Contains(VariableSuffix))\n                    Console::WriteLine(NameValueFormat, keyString,\n                    valueString);\n            }\n            Console::WriteLine();\n        }\n\n        // PrintVariables:\n        // Uses PrintVariablesFromTarget to test whether\n        // each environment variable exists in a target.\n        static void PrintVariables()\n        {\n            Console::WriteLine(&quot;Process:&quot;);\n            PrintVariablesFromTarget(EnvironmentVariableTarget::Process);\n\n            Console::WriteLine(&quot;User:&quot;);\n            PrintVariablesFromTarget(EnvironmentVariableTarget::User);\n\n            Console::WriteLine(&quot;Machine:&quot;);\n            PrintVariablesFromTarget(EnvironmentVariableTarget::Machine);\n        }\n\n        // CheckRegistryVariablesForKey: CheckRegistryVariables\n        // helper function. This function filters out irrelevant\n        // environment variables.\n        static void CheckRegistryVariablesForKey(RegistryKey^ targetKey)\n        {\n            bool exists = false;            \n\n            for each (\n                String^ variableName in targetKey-&gt;GetValueNames())\n            {\n                if (variableName-&gt;Contains(VariableSuffix))\n                {\n                    String^ variableValue =\n                        safe_cast&lt;String^&gt;\n                        (targetKey-&gt;GetValue(variableName));\n                    Console::WriteLine(NameValueFormat, variableName,\n                        variableValue);\n                    exists = true;\n                }\n            }\n            if (!exists)\n            {\n                Console::WriteLine(\n                    &quot;  Environment variable doesn&#39;t exist.&quot;);\n            }\n            Console::WriteLine();\n        }\n\n        // CheckRegistryVariables:\n        // Uses CheckRegistryVariables to display the User and\n        // Machine environment variables in the registry.\n        static void CheckRegistryVariables()\n        {\n            String^ subkeyUser = &quot;Environment&quot;;\n            String^ subkeyMachine = &quot;System\\\\CurrentControlSet\\\\&quot;\n                &quot;Control\\\\Session Manager\\\\Environment&quot;;\n            String^ subkeyFormat = &quot;\\&quot;{0}\\&quot; key:&quot;;\n\n            Console::WriteLine(subkeyFormat, subkeyUser);\n            CheckRegistryVariablesForKey(\n                Registry::CurrentUser-&gt;OpenSubKey(subkeyUser));\n\n            Console::WriteLine(subkeyFormat, subkeyMachine);\n            CheckRegistryVariablesForKey(\n                Registry::LocalMachine-&gt;OpenSubKey(subkeyMachine));\n        }\n    };\n};\n\nusing namespace EnvironmentVariablesSample;\n\nint main()\n{\n    TestEnvironmentVariables::DoTest();\n}\n\n/*\nThis example produces the following results:\n\nStep 1:\nCheck whether the environment variables already exist in\nthe various targets...\n\nProcess:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\n\nStep 2:\nSet the environment variable for each target...\n\n(default): Set A_GETSET_ENVAR_SAMPLE = &quot;exists in the default target (Process)&quot;\nProcess: Set B_GETSET_ENVAR_SAMPLE = &quot;exists in Process&quot;\nUser: Set C_GETSET_ENVAR_SAMPLE = &quot;exists in User&quot;\nMachine: Set D_GETSET_ENVAR_SAMPLE = &quot;exists in Machine&quot;\n\nStep 3, part 1:\nDisplay the environment variables in each target...\n\nProcess:\nB_GETSET_ENVAR_SAMPLE exists in Process.\nA_GETSET_ENVAR_SAMPLE exists in the default target (Process).\n\nUser:\nC_GETSET_ENVAR_SAMPLE exists in User.\n\nMachine:\nD_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 3, part 2:\nCheck whether the User and Machine environment variables\nwere created in the Windows operating system registry...\n\n&quot;Environment&quot; key:\nC_GETSET_ENVAR_SAMPLE exists in User.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\nD_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 4, part 1:\nDelete the environment variables created for this sample...\n\nStep 4, part 2:\nCheck whether the environment variables were deleted\nin each target...\n\nProcess:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nStep 4, part 3:\nCheck whether the User and Machine environment variables\nwere deleted from the Windows operating system registry...\n\n&quot;Environment&quot; key:\nEnvironment variable doesn&#39;t exist.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\nEnvironment variable doesn&#39;t exist.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"environment.getsetenvar#1\">&#39; This example demonstrates the \n&#39;     Environment.GetEnvironmentVariable,\n&#39;     Environment.SetEnvironmentVariable, and \n&#39;     Environment.GetEnvironmentVariables overloaded methods.\nImports System\nImports System.Collections\nImports Microsoft.Win32\nImports Microsoft.VisualBasic\n\nClass Sample\n   &#39;-------------------------------------------------------------------------------------\n   &#39; Globals: \n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared fmtNameValue As String = &quot;  {0} {1}.&quot;\n   Protected Shared myVarSuffix As String = &quot;_GETSET_ENVAR_SAMPLE&quot;\n   \n   &#39; Four relatively unique environment variable names.\n   Protected Shared myVarA As String = &quot;A&quot; &amp; myVarSuffix &#39; default process\n   Protected Shared myVarB As String = &quot;B&quot; &amp; myVarSuffix &#39; Current Process\n   Protected Shared myVarC As String = &quot;C&quot; &amp; myVarSuffix &#39; Current User\n   Protected Shared myVarD As String = &quot;D&quot; &amp; myVarSuffix &#39; Local Machine\n   &#39;=====================================================================================\n   &#39; EachVariable: \n   &#39; Test whether a specific environment variable exists in a target.\n   &#39; This section demonstrates Environment.GetEnvironmentVariable.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub EachVariable(var As String, tgt As EnvironmentVariableTarget)\n      Dim str As String\n      &#39;\n      If 0 = tgt Then &#39; Zero means use the default target.\n         str = Environment.GetEnvironmentVariable(var)\n      Else\n         str = Environment.GetEnvironmentVariable(var, tgt)\n      End If\n      Console.WriteLine(fmtNameValue, var, IIf(String.IsNullOrEmpty(str), _\n                                              &quot;doesn&#39;t exist&quot;, str))\n   End Sub &#39;EachVariable\n   \n   &#39;-------------------------------------------------------------------------------------\n   &#39; CheckEachVariable: \n   &#39; Uses EachVariable to test whether each environment variable exists in a target.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub CheckEachVariable()\n      Console.WriteLine(&quot;Process:&quot;)\n      EachVariable(myVarA, 0) &#39; Check the default target (current process)\n      EachVariable(myVarB, EnvironmentVariableTarget.Process)\n      EachVariable(myVarC, EnvironmentVariableTarget.Process)\n      EachVariable(myVarD, EnvironmentVariableTarget.Process)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;User:&quot;)\n      EachVariable(myVarA, EnvironmentVariableTarget.User)\n      EachVariable(myVarB, EnvironmentVariableTarget.User)\n      EachVariable(myVarC, EnvironmentVariableTarget.User)\n      EachVariable(myVarD, EnvironmentVariableTarget.User)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Machine:&quot;)\n      EachVariable(myVarA, EnvironmentVariableTarget.Machine)\n      EachVariable(myVarB, EnvironmentVariableTarget.Machine)\n      EachVariable(myVarC, EnvironmentVariableTarget.Machine)\n      EachVariable(myVarD, EnvironmentVariableTarget.Machine)\n      Console.WriteLine()\n   End Sub &#39;CheckEachVariable\n   \n   &#39;=====================================================================================\n   &#39; AllVariables: CheckAllVariables helper function.\n   &#39; This section demonstrates Environment.GetEnvironmentVariables.\n   &#39;-------------------------------------------------------------------------------------\n   Private Shared Sub AllVariables(tgt As EnvironmentVariableTarget)\n      Dim value As String\n      Dim key As String\n      \n      Dim de As DictionaryEntry\n      For Each de In Environment.GetEnvironmentVariables(tgt)\n         key = CStr(de.Key)\n         value = CStr(de.Value)\n         If key.Contains(myVarSuffix) Then\n            Console.WriteLine(fmtNameValue, key, value)\n         End If\n      Next de\n      Console.WriteLine()\n   End Sub &#39;AllVariables\n   \n   &#39;=====================================================================================\n   &#39; CheckAllVariables: \n   &#39; Uses AllVariables to test whether each environment variable exists in a target.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub CheckAllVariables()\n      Console.WriteLine(&quot;Process:&quot;)\n      AllVariables(EnvironmentVariableTarget.Process)\n      \n      Console.WriteLine(&quot;User:&quot;)\n      AllVariables(EnvironmentVariableTarget.User)\n      \n      Console.WriteLine(&quot;Machine:&quot;)\n      AllVariables(EnvironmentVariableTarget.Machine)\n   End Sub &#39;CheckAllVariables\n   \n   &#39;=====================================================================================\n   &#39; ChkReg: CheckRegistry helper function.\n   &#39; This function filters out irrelevant environment variables. \n   &#39;-------------------------------------------------------------------------------------\n   Private Shared Sub ChkReg(rk As RegistryKey)\n      Dim exists As Boolean = False\n      Dim registryNone As String = &quot;  Environment variable doesn&#39;t exist.&quot;\n      \n      Dim s As String\n      For Each s In rk.GetValueNames()\n         If s.Contains(myVarSuffix) Then\n            Console.WriteLine(fmtNameValue, s, CStr(rk.GetValue(s)))\n            exists = True\n         End If\n      Next s\n      If exists = False Then\n         Console.WriteLine(registryNone)\n      End If\n      Console.WriteLine()\n   End Sub &#39;ChkReg\n   \n   &#39;-------------------------------------------------------------------------------------\n   &#39; CheckRegistry: \n   &#39; Uses ChkReg to display the User and Machine environment variables in the registry.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub CheckRegistry()\n      Dim subkeyU As String = &quot;Environment&quot;\n      Dim subkeyM As String = &quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot;\n      Dim fmtSubkey As String = &quot;&quot;&quot;{0}&quot;&quot; key:&quot;\n      \n      Console.WriteLine(fmtSubkey, subkeyU)\n      ChkReg(Registry.CurrentUser.OpenSubKey(subkeyU))\n      \n      Console.WriteLine(fmtSubkey, subkeyM)\n      ChkReg(Registry.LocalMachine.OpenSubKey(subkeyM))\n   End Sub &#39;CheckRegistry\n   \n   &#39;=====================================================================================\n   &#39; Main:\n   &#39;-------------------------------------------------------------------------------------\n   Public Shared Sub Main()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Environment variable values\n      &#39;-------------------------------------------------------------------------------------\n      Dim existsA As String = &quot;exists in the default target (Process)&quot;\n      Dim existsB As String = &quot;exists in Process&quot;\n      Dim existsC As String = &quot;exists in User&quot;\n      Dim existsD As String = &quot;exists in Machine&quot;\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Messages:\n      &#39;-------------------------------------------------------------------------------------\n      Dim msg1  As String = &quot;Step 1:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the environment variables already exist in &quot; _\n                 &amp; vbCrLf &amp; &quot;  the various targets...&quot; &amp; vbCrLf\n      Dim msg2  As String = &quot;Step 2:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Set the environment variable for each target...&quot; &amp; vbCrLf\n      Dim msg31 As String = &quot;Step 3, part 1:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Display the environment variables in each target...&quot; &amp; vbCrLf\n      Dim msg32 As String = &quot;Step 3, part 2:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the User and Machine environment variables &quot; _\n                 &amp; vbCrLf &amp; &quot;  were created in the Windows operating system registry...&quot; _\n                 &amp; vbCrLf\n      Dim msg41 As String = &quot;Step 4, part 1:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Delete the environment variables created for this sample...&quot; _\n                 &amp; vbCrLf\n      Dim msg42 As String = &quot;Step 4, part 2:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the environment variables were deleted &quot; _\n                 &amp; vbCrLf &amp; &quot;  in each target...&quot; &amp; vbCrLf\n      Dim msg43 As String = &quot;Step 4, part 3:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the User and Machine environment variables &quot; _\n                 &amp; vbCrLf &amp; &quot;  were deleted from the Windows operating system registry...&quot; _\n                 &amp; vbCrLf\n      Dim fmt2x As String = &quot;  {0,9}: Set {1} = &quot;&quot;{2}&quot;&quot;&quot;\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 1:\n      &#39; Check whether the sample environment variables already exist.\n      &#39; WARNING: These variables will be deleted at the end of this sample.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg1)\n      CheckEachVariable()\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 2:\n      &#39; Set the environment variable for each target.\n      &#39; This section demonstrates Environment.SetEnvironmentVariable.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg2)\n      &#39; Set the environment variable for the default target (the current process).\n      Console.WriteLine(fmt2x, &quot;(default)&quot;, myVarA, existsA)\n      Environment.SetEnvironmentVariable(myVarA, existsA)\n      \n      &#39; Set the environment variable for the current process.\n      Console.WriteLine(fmt2x, &quot;Process&quot;, myVarB, existsB)\n      Environment.SetEnvironmentVariable(myVarB, existsB, EnvironmentVariableTarget.Process)\n      \n      &#39; Set the environment variable for the current user.\n      Console.WriteLine(fmt2x, &quot;User&quot;, myVarC, existsC)\n      Environment.SetEnvironmentVariable(myVarC, existsC, EnvironmentVariableTarget.User)\n      \n      &#39; Set the environment variable for the local machine.\n      Console.WriteLine(fmt2x, &quot;Machine&quot;, myVarD, existsD)\n      Environment.SetEnvironmentVariable(myVarD, existsD, EnvironmentVariableTarget.Machine)\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 3, part 1:\n      &#39; Display the environment variables in each target.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg31)\n      CheckAllVariables()\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 3, part 2:\n      &#39; Check whether the User and Machine environment variables were created in the Windows \n      &#39; operating system registry.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg32)\n      CheckRegistry()\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 4, part 1:\n      &#39; Delete the environment variables created for this sample.\n      &#39; This section demonstrates using Environment.SetEnvironmentVariable to delete an \n      &#39; environment variable.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg41)\n      Environment.SetEnvironmentVariable(myVarA, Nothing)\n      Environment.SetEnvironmentVariable(myVarB, Nothing, EnvironmentVariableTarget.Process)\n      Environment.SetEnvironmentVariable(myVarC, Nothing, EnvironmentVariableTarget.User)\n      Environment.SetEnvironmentVariable(myVarD, Nothing, EnvironmentVariableTarget.Machine)\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 4, part 2:\n      &#39; Check whether the environment variables were deleted in each target.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg42)\n      CheckEachVariable()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 4, part 3:\n      &#39; Check whether the User and Machine environment variables were deleted from the \n      &#39; Windows operating system registry.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg43)\n      CheckRegistry()\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Step 1:\n&#39;  Check whether the environment variables already exist in\n&#39;  the various targets...\n&#39;\n&#39;Process:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;User:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;Machine:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;\n&#39;Step 2:\n&#39;  Set the environment variable for each target...\n&#39;\n&#39;  (default): Set A_GETSET_ENVAR_SAMPLE = &quot;exists in the default target (Process)&quot;\n&#39;    Process: Set B_GETSET_ENVAR_SAMPLE = &quot;exists in Process&quot;\n&#39;       User: Set C_GETSET_ENVAR_SAMPLE = &quot;exists in User&quot;\n&#39;    Machine: Set D_GETSET_ENVAR_SAMPLE = &quot;exists in Machine&quot;\n&#39;\n&#39;Step 3, part 1:\n&#39;  Display the environment variables in each target...\n&#39;\n&#39;Process:\n&#39;  B_GETSET_ENVAR_SAMPLE exists in Process.\n&#39;  A_GETSET_ENVAR_SAMPLE exists in the default target (Process).\n&#39;\n&#39;User:\n&#39;  C_GETSET_ENVAR_SAMPLE exists in User.\n&#39;\n&#39;Machine:\n&#39;  D_GETSET_ENVAR_SAMPLE exists in Machine.\n&#39;\n&#39;\n&#39;Step 3, part 2:\n&#39;  Check whether the User and Machine environment variables\n&#39;  were created in the Windows operating system registry...\n&#39;\n&#39;&quot;Environment&quot; key:\n&#39;  C_GETSET_ENVAR_SAMPLE exists in User.\n&#39;\n&#39;&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n&#39;  D_GETSET_ENVAR_SAMPLE exists in Machine.\n&#39;\n&#39;\n&#39;Step 4, part 1:\n&#39;  Delete the environment variables created for this sample...\n&#39;\n&#39;Step 4, part 2:\n&#39;  Check whether the environment variables were deleted\n&#39;  in each target...\n&#39;\n&#39;Process:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;User:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;Machine:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;Step 4, part 3:\n&#39;  Check whether the User and Machine environment variables\n&#39;  were deleted from the Windows operating system registry...\n&#39;\n&#39;&quot;Environment&quot; key:\n&#39;  Environment variable doesn&#39;t exist.\n&#39;\n&#39;&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n&#39;  Environment variable doesn&#39;t exist.\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"environment.getsetenvar#1\">// This example demonstrates the \n//     Environment.GetEnvironmentVariable,\n//     Environment.SetEnvironmentVariable, and \n//     Environment.GetEnvironmentVariables overloaded methods.\n\nusing System;\nusing System.Collections;\nusing Microsoft.Win32;\n\nclass Sample \n{\n//-------------------------------------------------------------------------------------\n// Globals: \n//-------------------------------------------------------------------------------------\n    protected static string fmtNameValue = &quot;  {0} {1}.&quot;;\n    protected static string myVarSuffix = &quot;_GETSET_ENVAR_SAMPLE&quot;;\n\n// Four relatively unique environment variable names.\n    protected static string myVarA = &quot;A&quot; + myVarSuffix; // default process\n    protected static string myVarB = &quot;B&quot; + myVarSuffix; // Current Process\n    protected static string myVarC = &quot;C&quot; + myVarSuffix; // Current User\n    protected static string myVarD = &quot;D&quot; + myVarSuffix; // Local Machine\n//=====================================================================================\n// EachVariable: \n// Test whether a specific environment variable exists in a target.\n// This section demonstrates Environment.GetEnvironmentVariable.\n//-------------------------------------------------------------------------------------\n    protected static void EachVariable(string var, EnvironmentVariableTarget tgt)\n    {\n    string str;\n    //\n    if (0 == tgt)          // Zero means use the default target.\n        str = Environment.GetEnvironmentVariable(var);\n    else\n        str = Environment.GetEnvironmentVariable(var, tgt);\n    Console.WriteLine(fmtNameValue, \n                      var, (String.IsNullOrEmpty(str) ? &quot;doesn&#39;t exist&quot; : str));\n    }\n//-------------------------------------------------------------------------------------\n// CheckEachVariable: \n// Uses EachVariable to test whether each environment variable exists in a target.\n//-------------------------------------------------------------------------------------\n    protected static void CheckEachVariable()\n    {\n    Console.WriteLine(&quot;Process:&quot;);\n    EachVariable(myVarA, 0);  // Check the default target (current process)\n    EachVariable(myVarB, EnvironmentVariableTarget.Process);\n    EachVariable(myVarC, EnvironmentVariableTarget.Process);\n    EachVariable(myVarD, EnvironmentVariableTarget.Process);\n    Console.WriteLine();\n\n    Console.WriteLine(&quot;User:&quot;);\n    EachVariable(myVarA, EnvironmentVariableTarget.User);\n    EachVariable(myVarB, EnvironmentVariableTarget.User);\n    EachVariable(myVarC, EnvironmentVariableTarget.User);\n    EachVariable(myVarD, EnvironmentVariableTarget.User);\n    Console.WriteLine();\n\n    Console.WriteLine(&quot;Machine:&quot;);\n    EachVariable(myVarA, EnvironmentVariableTarget.Machine);\n    EachVariable(myVarB, EnvironmentVariableTarget.Machine);\n    EachVariable(myVarC, EnvironmentVariableTarget.Machine);\n    EachVariable(myVarD, EnvironmentVariableTarget.Machine);\n    Console.WriteLine();\n    }\n//=====================================================================================\n// AllVariables: CheckAllVariables helper function.\n// This section demonstrates Environment.GetEnvironmentVariables.\n//-------------------------------------------------------------------------------------\n    private static void AllVariables(EnvironmentVariableTarget tgt)\n    {\n    string value;\n    string key;\n\n    foreach(DictionaryEntry de in Environment.GetEnvironmentVariables(tgt))\n        {\n        key   = (string)de.Key;\n        value = (string)de.Value;\n        if (key.Contains(myVarSuffix))\n            Console.WriteLine(fmtNameValue, key, value);\n        }\n    Console.WriteLine();\n    }\n//=====================================================================================\n// CheckAllVariables: \n// Uses AllVariables to test whether each environment variable exists in a target.\n//-------------------------------------------------------------------------------------\n    protected static void CheckAllVariables()\n    {\n    Console.WriteLine(&quot;Process:&quot;);\n    AllVariables(EnvironmentVariableTarget.Process);\n\n    Console.WriteLine(&quot;User:&quot;);\n    AllVariables(EnvironmentVariableTarget.User);\n\n    Console.WriteLine(&quot;Machine:&quot;);\n    AllVariables(EnvironmentVariableTarget.Machine);\n    }\n//=====================================================================================\n// ChkReg: CheckRegistry helper function.\n// This function filters out irrelevant environment variables. \n//-------------------------------------------------------------------------------------\n    private static void ChkReg(RegistryKey rk)\n    {\n    bool exists = false;\n    string registryNone = &quot;  Environment variable doesn&#39;t exist.&quot;;\n\n    foreach (string s in rk.GetValueNames())\n        {\n        if (s.Contains(myVarSuffix))\n            {\n            Console.WriteLine(fmtNameValue, s, (string)rk.GetValue(s));\n            exists = true;\n            }\n        }\n    if (exists == false)\n        Console.WriteLine(registryNone);\n    Console.WriteLine();\n    }\n//-------------------------------------------------------------------------------------\n// CheckRegistry: \n// Uses ChkReg to display the User and Machine environment variables in the registry.\n//-------------------------------------------------------------------------------------\n    protected static void CheckRegistry()\n    {\n    string subkeyU = @&quot;Environment&quot;;\n    string subkeyM = @&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot;;\n    string fmtSubkey = &quot;\\&quot;{0}\\&quot; key:&quot;;\n\n    Console.WriteLine(fmtSubkey, subkeyU);\n    ChkReg(Registry.CurrentUser.OpenSubKey(subkeyU));\n\n    Console.WriteLine(fmtSubkey, subkeyM);\n    ChkReg(Registry.LocalMachine.OpenSubKey(subkeyM));\n    }\n//=====================================================================================\n// Main:\n//-------------------------------------------------------------------------------------\n    public static void Main() \n    {\n//-------------------------------------------------------------------------------------\n// Environment variable values\n//-------------------------------------------------------------------------------------\n    string existsA = &quot;exists in the default target (Process)&quot;;\n    string existsB = &quot;exists in Process&quot;;\n    string existsC = &quot;exists in User&quot;;\n    string existsD = &quot;exists in Machine&quot;;\n//-------------------------------------------------------------------------------------\n// Messages:\n//-------------------------------------------------------------------------------------\n    string msg1  = &quot;Step 1:<br>&quot; +\n                       &quot;  Check whether the environment variables already exist in <br>&quot; + \n                       &quot;  the various targets...<br>&quot;;\n    string msg2  = &quot;Step 2:<br>&quot; +\n                       &quot;  Set the environment variable for each target...<br>&quot;;\n    string msg31 = &quot;Step 3, part 1:<br>&quot; + \n                       &quot;  Display the environment variables in each target...<br>&quot;;\n    string msg32 = &quot;Step 3, part 2:<br>&quot; +\n                       &quot;  Check whether the User and Machine environment variables <br>&quot; +\n                       &quot;  were created in the Windows operating system registry...<br>&quot;;\n    string msg41 = &quot;Step 4, part 1:<br>&quot; +\n                       &quot;  Delete the environment variables created for this sample...<br>&quot;;\n    string msg42 = &quot;Step 4, part 2:<br>&quot; +\n                       &quot;  Check whether the environment variables were deleted <br>&quot; +\n                       &quot;  in each target...<br>&quot;;\n    string msg43 = &quot;Step 4, part 3:<br>&quot; + \n                       &quot;  Check whether the User and Machine environment variables <br>&quot; +\n                       &quot;  were deleted from the Windows operating system registry...<br>&quot;;\n    string fmt2x   = &quot;  {0,9}: Set {1} = \\&quot;{2}\\&quot;&quot;;\n//-------------------------------------------------------------------------------------\n// Step 1:\n// Check whether the sample environment variables already exist.\n// WARNING: These variables will be deleted at the end of this sample.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg1);\n    CheckEachVariable();\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 2:\n// Set the environment variable for each target.\n// This section demonstrates Environment.SetEnvironmentVariable.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg2);\n// Set the environment variable for the default target (the current process).\n    Console.WriteLine(fmt2x, &quot;(default)&quot;, myVarA, existsA);\n    Environment.SetEnvironmentVariable(myVarA, existsA);\n\n// Set the environment variable for the current process.\n    Console.WriteLine(fmt2x, &quot;Process&quot;, myVarB, existsB);\n    Environment.SetEnvironmentVariable(myVarB, existsB, \n        EnvironmentVariableTarget.Process);\n\n// Set the environment variable for the current user.\n    Console.WriteLine(fmt2x, &quot;User&quot;, myVarC, existsC);\n    Environment.SetEnvironmentVariable(myVarC, existsC, \n        EnvironmentVariableTarget.User);\n\n// Set the environment variable for the local machine.\n    Console.WriteLine(fmt2x, &quot;Machine&quot;, myVarD, existsD);\n    Environment.SetEnvironmentVariable(myVarD, existsD, \n        EnvironmentVariableTarget.Machine);\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 3, part 1:\n// Display the environment variables in each target.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg31);\n    CheckAllVariables();\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 3, part 2:\n// Check whether the User and Machine environment variables were created in the Windows \n// operating system registry.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg32);\n    CheckRegistry();\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 4, part 1:\n// Delete the environment variables created for this sample.\n// This section demonstrates using Environment.SetEnvironmentVariable to delete an \n// environment variable.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg41);\n    Environment.SetEnvironmentVariable(myVarA, null);\n    Environment.SetEnvironmentVariable(myVarB, null, EnvironmentVariableTarget.Process);\n    Environment.SetEnvironmentVariable(myVarC, null, EnvironmentVariableTarget.User);\n    Environment.SetEnvironmentVariable(myVarD, null, EnvironmentVariableTarget.Machine);\n//-------------------------------------------------------------------------------------\n// Step 4, part 2:\n// Check whether the environment variables were deleted in each target.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg42);\n    CheckEachVariable();\n//-------------------------------------------------------------------------------------\n// Step 4, part 3:\n// Check whether the User and Machine environment variables were deleted from the \n// Windows operating system registry.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg43);\n    CheckRegistry();\n    }\n}\n/*\nThis example produces the following results:\n\nStep 1:\n  Check whether the environment variables already exist in\n  the various targets...\n\nProcess:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\n\nStep 2:\n  Set the environment variable for each target...\n\n  (default): Set A_GETSET_ENVAR_SAMPLE = &quot;exists in the default target (Process)&quot;\n    Process: Set B_GETSET_ENVAR_SAMPLE = &quot;exists in Process&quot;\n       User: Set C_GETSET_ENVAR_SAMPLE = &quot;exists in User&quot;\n    Machine: Set D_GETSET_ENVAR_SAMPLE = &quot;exists in Machine&quot;\n\nStep 3, part 1:\n  Display the environment variables in each target...\n\nProcess:\n  B_GETSET_ENVAR_SAMPLE exists in Process.\n  A_GETSET_ENVAR_SAMPLE exists in the default target (Process).\n\nUser:\n  C_GETSET_ENVAR_SAMPLE exists in User.\n\nMachine:\n  D_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 3, part 2:\n  Check whether the User and Machine environment variables\n  were created in the Windows operating system registry...\n\n&quot;Environment&quot; key:\n  C_GETSET_ENVAR_SAMPLE exists in User.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n  D_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 4, part 1:\n  Delete the environment variables created for this sample...\n\nStep 4, part 2:\n  Check whether the environment variables were deleted\n  in each target...\n\nProcess:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nStep 4, part 3:\n  Check whether the User and Machine environment variables\n  were deleted from the Windows operating system registry...\n\n&quot;Environment&quot; key:\n  Environment variable doesn&#39;t exist.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n  Environment variable doesn&#39;t exist.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_GetFolderPath_System_Environment_SpecialFolder_\">\r\n    \r\n            <a id=\"System_Environment_GetFolderPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFolderPath(Environment+SpecialFolder)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the path to the system special folder that is identified by the specified enumeration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetFolderPath (Environment.SpecialFolder folder);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>folder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.environment.specialfolder\" data-linktype=\"relative-path\">Environment+SpecialFolder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerated constant that identifies a system special folder.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, an empty string (&quot;&quot;).  </p>\n<p> A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>folder</code> is not a member of <a class=\"xref\" href=\"system.environment.specialfolder\" data-linktype=\"relative-path\">Environment+SpecialFolder</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current platform is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method retrieves the path to a system special folder, such as Program Files, Programs, System, or Startup, which can be used to access common information. Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.  </p>\n<p> The <code>folder</code> parameter designates the special folder to retrieve and must be one of the values in the <a class=\"xref\" href=\"system.environment.specialfolder\" data-linktype=\"relative-path\">Environment+SpecialFolder</a> enumeration; any other value throws an exception.  </p>\n<p> For more information about special folders, see the <a href=\"http://go.microsoft.com/fwlink/?LinkId=116664\" data-linktype=\"external\">CSIDL</a> values topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the GetFolderPath method to return and display the path associated with the <code>folder</code> parameter.  </p>\n<pre><code class=\"lang-cpp\" name=\"Environment.GetFolderPath#1\">// Sample for the Environment::GetFolderPath method\nusing namespace System;\nint main()\n{\n   Console::WriteLine();\n   Console::WriteLine( &quot;GetFolderPath: {0}&quot;, Environment::GetFolderPath( Environment::SpecialFolder::System ) );\n}\n\n/*\nThis example produces the following results:\n\nGetFolderPath: C:\\WINNT\\System32\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Environment.GetFolderPath#1\">&#39; Sample for the Environment.GetFolderPath method\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine()\n      Console.WriteLine(&quot;GetFolderPath: {0}&quot;, Environment.GetFolderPath(Environment.SpecialFolder.System))\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;GetFolderPath: C:\\WINNT\\System32\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"Environment.GetFolderPath#1\">// Sample for the Environment.GetFolderPath method\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine();\n    Console.WriteLine(&quot;GetFolderPath: {0}&quot;, \n                 Environment.GetFolderPath(Environment.SpecialFolder.System));\n    }\n}\n/*\nThis example produces the following results:\n\nGetFolderPath: C:\\WINNT\\System32\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_GetFolderPath_System_Environment_SpecialFolder_System_Environment_SpecialFolderOption_\">\r\n    \r\n            <a id=\"System_Environment_GetFolderPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFolderPath(Environment+SpecialFolder,Environment+SpecialFolderOption)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the path to the system special folder that is identified by the specified enumeration, and uses a specified option for accessing special folders.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetFolderPath (Environment.SpecialFolder folder, Environment.SpecialFolderOption option);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>folder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.environment.specialfolder\" data-linktype=\"relative-path\">Environment+SpecialFolder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerated constant that identifies a system special folder.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>option</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.environment.specialfolderoption\" data-linktype=\"relative-path\">Environment+SpecialFolderOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies options to use for accessing a special folder.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, an empty string (&quot;&quot;).  </p>\n<p> A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>folder</code> is not a member of <a class=\"xref\" href=\"system.environment.specialfolder\" data-linktype=\"relative-path\">Environment+SpecialFolder</a></p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a>\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method retrieves the path to a system special folder, such as Program Files, Programs, System, or Startup, which can be used to access common information. Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.  </p>\n<p> The <code>folder</code> parameter designates the special folder to retrieve and must be one of the values in the <a class=\"xref\" href=\"system.environment.specialfolder\" data-linktype=\"relative-path\">Environment+SpecialFolder</a> enumeration; any other value throws an exception.  </p>\n<p> For more information about special folders, see the <a href=\"http://go.microsoft.com/fwlink/?LinkId=116664\" data-linktype=\"external\">CSIDL</a> values topic.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_GetLogicalDrives\">\r\n    \r\n            <a id=\"System_Environment_GetLogicalDrives_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLogicalDrives()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of string containing the names of the logical drives on the current computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetLogicalDrives ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of strings where each element contains the name of a logical drive. For example, if the computer&#39;s hard drive is the first logical drive, the first element returned is &quot;C:\\&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permissions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to display the logical drives of the current computer using the GetLogicalDrives method.  </p>\n<pre><code class=\"lang-cpp\" name=\"Environment.GetLogicalDrives#1\">// Sample for the Environment::GetLogicalDrives method\nusing namespace System;\nint main()\n{\n   Console::WriteLine();\n   array&lt;String^&gt;^drives = Environment::GetLogicalDrives();\n   Console::WriteLine( &quot;GetLogicalDrives: {0}&quot;, String::Join( &quot;, &quot;, drives ) );\n}\n\n/*\nThis example produces the following results:\n\nGetLogicalDrives: A:\\, C:\\, D:\\\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Environment.GetLogicalDrives#1\">&#39; Sample for the Environment.GetLogicalDrives method\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine()\n      Dim drives As [String]() = Environment.GetLogicalDrives()\n      Console.WriteLine(&quot;GetLogicalDrives: {0}&quot;, [String].Join(&quot;, &quot;, drives))\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;GetLogicalDrives: A:\\, C:\\, D:\\\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"Environment.GetLogicalDrives#1\">// Sample for the Environment.GetLogicalDrives method\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine();\n    String[] drives = Environment.GetLogicalDrives();\n    Console.WriteLine(&quot;GetLogicalDrives: {0}&quot;, String.Join(&quot;, &quot;, drives));\n    }\n}\n/*\nThis example produces the following results:\n\nGetLogicalDrives: A:\\, C:\\, D:\\\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_SetEnvironmentVariable_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Environment_SetEnvironmentVariable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetEnvironmentVariable(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates, modifies, or deletes an environment variable stored in the current process.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetEnvironmentVariable (string variable, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>variable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of an environment variable.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value to assign to <code>variable</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>variable</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>variable</code> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign (&quot;=&quot;).  </p>\n<p> -or-  </p>\n<p> The length of <code>variable</code> or <code>value</code> is greater than or equal to 32,767 characters.  </p>\n<p> -or-  </p>\n<p> An error occurred during the execution of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission to perform this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method is equivalent to calling the <a class=\"xref\" href=\"system.environment#System_Environment_SetEnvironmentVariable_System_String_System_String_System_EnvironmentVariableTarget_\" data-linktype=\"relative-path\">SetEnvironmentVariable(String,String,EnvironmentVariableTarget)</a> overload with a value of <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">System.EnvironmentVariableTarget</a> for the <code>target</code> argument.  </p>\n<p> If the <code>value</code> argument is not empty (see the discussion of deleting an environment variable later in this section for the definition of an empty value) and the environment variable named by the <code>variable</code> parameter does not exist, the environment variable is created and assigned the contents of <code>value</code>. If it does exist, its value is modified. Because the environment variable is defined in the environment block of the current process only, it does not persist after the process has ended.  </p>\n<p> If <code>variable</code> contains a non-initial hexadecimal zero character, the characters before the zero character are considered the environment variable name and all subsequent characters are ignored.  </p>\n<p> If <code>value</code> contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable and all subsequent characters are ignored.  </p>\n<p> If <code>value</code> is empty and the environment variable named by <code>variable</code> exists, the environment variable is deleted. If <code>variable</code> does not exist, no error occurs even though the operation cannot be performed. <code>value</code> is considered empty under any of the following conditions:  </p>\n<ul>\n<li><p>It is <code>null</code>.  </p>\n</li>\n<li><p>It is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n</li>\n<li><p>It consists of a single character whose value is U+0000.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example tests whether an environment variable named <code>APPDOMAIN</code> exists in the current process. If it does not, it creates it and sets its value to &quot;True&quot;. If the value of the <code>APPDOMAIN</code> environment variable is &quot;True&quot;, it calls the <code>Message.Display</code> method in a new application domain. Otherwise, it executes the <code>Message.Display</code> method in the current application domain.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Environment.SetEnvironmentVariable#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String envName = &quot;AppDomain&quot;;\n      String envValue = &quot;True&quot;;\n      \n      // Determine whether the environment variable exists.\n      if (Environment.GetEnvironmentVariable(envName) == null)\n         // If it doesn&#39;t exist, create it.\n         Environment.SetEnvironmentVariable(envName, envValue);\n      \n      bool createAppDomain;\n      Message msg;\n      if (Boolean.TryParse(Environment.GetEnvironmentVariable(envName),\n                          out createAppDomain) &amp;&amp; createAppDomain) {\n         AppDomain domain = AppDomain.CreateDomain(&quot;Domain2&quot;);\n         msg = (Message) domain.CreateInstanceAndUnwrap(typeof(Example).Assembly.FullName, \n                                                        &quot;Message&quot;);\n         msg.Display();                                             \n      }                                  \n      else {\n         msg = new Message();\n         msg.Display();   \n      }     \n   }\n}\n\npublic class Message : MarshalByRefObject\n{\n   public void Display()\n   {\n      Console.WriteLine(&quot;Executing in domain {0}&quot;, \n                        AppDomain.CurrentDomain.FriendlyName);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Environment.SetEnvironmentVariable#1\">Module Example\n   Public Sub Main()\n      Dim envName As String = &quot;AppDomain&quot;\n      Dim envValue As String = &quot;True&quot;\n      \n      &#39; Determine whether the environment variable exists.\n      If Environment.GetEnvironmentVariable(envName) Is Nothing Then\n         &#39; If it doesn&#39;t exist, create it.\n         Environment.SetEnvironmentVariable(envName, envValue)\n      End If\n      \n      Dim createAppDomain As Boolean\n      Dim msg As Message\n      If Boolean.TryParse(Environment.GetEnvironmentVariable(envName),\n                          createAppDomain) AndAlso createAppDomain Then\n         Dim domain As AppDomain = AppDomain.CreateDomain(&quot;Domain2&quot;)\n         msg = CType(domain.CreateInstanceAndUnwrap(GetType(Example).Assembly.FullName, \n                                                    &quot;Message&quot;), Message)\n         msg.Display()                                                                            \n      Else\n         msg = New Message()\n         msg.Display()   \n      End If     \n   End Sub\nEnd Module\n\nPublic Class Message : Inherits MarshalByRefObject\n   Public Sub Display()\n      Console.WriteLine(&quot;Executing in domain {0}&quot;, \n                        AppDomain.CurrentDomain.FriendlyName)\n   End Sub\nEnd Class\n</code></pre><p> If you run the example for the first time, the message &quot;Executing in domain Domain2&quot; displays to the console. If you set the environment variable from the command line by using the command:  </p>\n<p> <code>Set AppDomain=False</code>  </p>\n<p> the example displays the message &quot;Executing in domain <em>exeName</em>.exe&quot;, where <em>exeName</em> is the name of the executable.  </p>\n<p> The following example attempts to retrieve the value of an environment variable named <code>Test1</code> from the process environment block. If the variable doesn&#39;t exist, the example creates the variable and retrieves its value. The example displays the value of the variable. If the example created the variable, it also calls the <a class=\"xref\" href=\"system.environment#System_Environment_GetEnvironmentVariables_System_EnvironmentVariableTarget_\" data-linktype=\"relative-path\">GetEnvironmentVariables(EnvironmentVariableTarget)</a> method with each member of the <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a> enumeration to establish that the variable can be retrieved only from the current process environment block. Finally, if the example created the variable, it deletes it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Environment.GetEnvironmentVariable#2\">Module Example\n   Public Sub Main()\n      Dim value As String \n      Dim toDelete As Boolean = False\n      \n      &#39; Check whether the environment variable exists.\n      value = Environment.GetEnvironmentVariable(&quot;Test1&quot;)\n      &#39; If necessary, create it.\n      If value Is Nothing Then\n         Environment.SetEnvironmentVariable(&quot;Test1&quot;, &quot;Value1&quot;)\n         toDelete = True\n         \n         &#39; Now retrieve it.\n         value = Environment.GetEnvironmentVariable(&quot;Test1&quot;)\n      End If\n      &#39; Display the value.\n      Console.WriteLine(&quot;Test1: {0}&quot;, value)\n      Console.WriteLine()\n      \n      &#39; Confirm that the value can only be retrieved from the process\n      &#39; environment block.\n      Console.WriteLine(&quot;Attempting to retrieve Test1 from:&quot;)\n      For Each enumValue As EnvironmentVariableTarget In \n                         [Enum].GetValues(GetType(EnvironmentVariableTarget))\n         value = Environment.GetEnvironmentVariable(&quot;Test1&quot;, enumValue)\n         Console.WriteLine(&quot;   {0}: {1}&quot;, enumValue, \n                           If(value IsNot Nothing, value, &quot;not found&quot;))\n      Next\n      Console.WriteLine()\n      \n      &#39; If we&#39;ve created it, now delete it.\n      If toDelete Then \n         Environment.SetEnvironmentVariable(&quot;Test1&quot;, Nothing)\n         &#39; Confirm the deletion.\n         If Environment.GetEnvironmentVariable(&quot;Test1&quot;) = Nothing Then\n            Console.WriteLine(&quot;Test1 has been deleted.&quot;)\n         End If\n      End If         \n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Test1: Value1\n&#39;       \n&#39;       Attempting to retrieve Test1 from:\n&#39;          Process: Value1\n&#39;          User: not found\n&#39;          Machine: not found\n&#39;       \n&#39;       Test1 has been deleted.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Environment.GetEnvironmentVariable#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string value;\n      bool toDelete = false;\n      \n      // Check whether the environment variable exists.\n      value = Environment.GetEnvironmentVariable(&quot;Test1&quot;);\n      // If necessary, create it.\n      if (value == null) {\n         Environment.SetEnvironmentVariable(&quot;Test1&quot;, &quot;Value1&quot;);\n         toDelete = true;\n         \n         // Now retrieve it.\n         value = Environment.GetEnvironmentVariable(&quot;Test1&quot;);\n      }\n      // Display the value.\n      Console.WriteLine(&quot;Test1: {0}<br>&quot;, value);\n      \n      // Confirm that the value can only be retrieved from the process\n      // environment block.\n      Console.WriteLine(&quot;Attempting to retrieve Test1 from:&quot;);\n      foreach (EnvironmentVariableTarget enumValue in \n                         Enum.GetValues(typeof(EnvironmentVariableTarget))) {\n         value = Environment.GetEnvironmentVariable(&quot;Test1&quot;, enumValue);\n         Console.WriteLine(&quot;   {0}: {1}&quot;, enumValue, \n                           value != null ? value : &quot;not found&quot;);\n      }\n      Console.WriteLine();\n      \n      // If we&#39;ve created it, now delete it.\n      if (toDelete) { \n         Environment.SetEnvironmentVariable(&quot;Test1&quot;, null);\n         // Confirm the deletion.\n         if (Environment.GetEnvironmentVariable(&quot;Test1&quot;) == null)\n            Console.WriteLine(&quot;Test1 has been deleted.&quot;);\n      }         \n   }\n}\n// The example displays the following output:\n//       Test1: Value1\n//       \n//       Attempting to retrieve Test1 from:\n//          Process: Value1\n//          User: not found\n//          Machine: not found\n//       \n//       Test1 has been deleted.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Environment_SetEnvironmentVariable_System_String_System_String_System_EnvironmentVariableTarget_\">\r\n    \r\n            <a id=\"System_Environment_SetEnvironmentVariable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetEnvironmentVariable(String,String,EnvironmentVariableTarget)</div>        \r\n          </div>\r\n    \r\n            <p>Creates, modifies, or deletes an environment variable stored in the current process or in the Windows operating system registry key reserved for the current user or local machine.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetEnvironmentVariable (string variable, string value, EnvironmentVariableTarget target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>variable</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of an environment variable.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value to assign to <code>variable</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies the location of the environment variable.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>variable</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>variable</code> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign (&quot;=&quot;).  </p>\n<p> -or-  </p>\n<p> The length of <code>variable</code> is greater than or equal to 32,767 characters.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is not a member of the <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a> enumeration.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a> or <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a>, and the length of <code>variable</code> is greater than or equal to 255.  </p>\n<p> -or-  </p>\n<p> <code>target</code> is <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a> and the length of <code>value</code> is greater than or equal to 32,767 characters.  </p>\n<p> -or-  </p>\n<p> An error occurred during the execution of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission to perform this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SetEnvironmentVariable method lets you define an environment variable that is available to all processes that run on a machine (the <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">System.EnvironmentVariableTarget</a> value), to all processes run by a user (the <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">System.EnvironmentVariableTarget</a> value), or to the current process (the <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a> value). Per-machine and per-user environment variables are copied into the environment block of the current process. However, environment variables that are unique to the current process environment block persist only until the process ends.  </p>\n<p> If the <code>value</code> argument is not empty (see the discussion of deleting an environment variable later in this section for the definition of an empty value) and the environment variable named by the <code>variable</code> parameter does not exist, the environment variable is created and assigned the contents of <code>value</code>.  If it does exist, its value is modified.  </p>\n<p> If <code>variable</code> contains a non-initial hexadecimal zero character, the characters before the zero character are considered the environment variable name and all subsequent characters are ignored.  </p>\n<p> If <code>value</code> contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable and all subsequent characters are ignored.  </p>\n<p> If <code>value</code> is empty and the environment variable named by <code>variable</code> exists, the environment variable is deleted. <code>value</code> is considered empty under any of the following conditions:  </p>\n<ul>\n<li><p>It is <code>null</code>.  </p>\n</li>\n<li><p>It is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n</li>\n<li><p>It consists of a single character whose value is U+0000.  </p>\n<p>If <code>variable</code> does not exist, no error occurs although the operation cannot be performed. Be careful when <code>target</code> is <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a>, because you can accidentally delete an environment variable that affects your entire local machine, not just the current process or user.  </p>\n<p>If <code>target</code> is <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a>, the environment variable is stored in the HKEY_CURRENT_USER\\Environment key of the local computer&#39;s registry. It is also copied to instances of File Explorer that are running as the current user. The environment variable is then inherited by any new processes that the user launches from File Explorer.  </p>\n<p>Similarly, if <code>target</code> is <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">System.EnvironmentVariableTarget</a>, the environment variable is stored in the HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Session Manager\\Environment key of the local computer&#39;s registry. It is also copied to all instances of File Explorer. The environment variable is then inherited by any new processes that are launched from File Explorer.  </p>\n<p>If <code>target</code> is <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a> or <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a>, other applications are notified of the set operation by a Windows <code>WM_SETTINGCHANGE</code> message.  </p>\n<p>If <code>target</code> is <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">System.EnvironmentVariableTarget</a> or <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">System.EnvironmentVariableTarget</a>, we recommend that the length of <code>value</code> be less than 2048 characters.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates environment variables for the <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">System.EnvironmentVariableTarget</a>, <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">System.EnvironmentVariableTarget</a>, and <a class=\"xref\" href=\"system.environmentvariabletarget\" data-linktype=\"relative-path\">EnvironmentVariableTarget</a> targets, checks whether the operating system registry contains the user and machine environment variables, then deletes the environment variables.  </p>\n<pre><code class=\"lang-cpp\" name=\"environment.getsetenvar#1\">// This example demonstrates the\n//     Environment.GetEnvironmentVariable,\n//     Environment.SetEnvironmentVariable, and\n//     Environment.GetEnvironmentVariables overloaded methods.\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace Microsoft::Win32;\n\nnamespace EnvironmentVariablesSample\n{\n    public ref class TestEnvironmentVariables sealed\n    {\n    public:\n        // DoTest: Test get/set environment variables\n        static void DoTest()\n        {     \n            // Environment variable values\n            String^ existsA = &quot;exists in the default target&quot;\n                &quot; (Process)&quot;;\n            String^ existsB = &quot;exists in Process&quot;;\n            String^ existsC = &quot;exists in User&quot;;\n            String^ existsD = &quot;exists in Machine&quot;;     \n            // Messages:\n            String^ messageStep1 = &quot;Step 1:<br>&quot;\n                &quot;  Check whether the environment variables already&quot;\n                &quot; exist in <br>&quot;\n                &quot;  the various targets...<br>&quot;;\n            String^ messageStep2 = &quot;Step 2:<br>&quot;\n                &quot;  Set the environment variable for each&quot;\n                &quot; target...<br>&quot;;\n            String^ messageStep3Part1 = &quot;Step 3, part 1:<br>&quot;\n                &quot;  Display the environment variables in each&quot;\n                &quot; target...<br>&quot;;\n            String^ messageStep3Part2 = &quot;Step 3, part 2:<br>&quot;\n                &quot;  Check whether the User and Machine &quot;\n                &quot; environment variables <br>&quot;\n                &quot;  were created in the Windows operating&quot;\n                &quot; system registry...<br>&quot;;\n            String^ messageStep4Part1 = &quot;Step 4, part 1:<br>&quot;\n                &quot;  Delete the environment variables created &quot;\n                &quot;for this sample...<br>&quot;;\n            String^ messageStep4Part2 = &quot;Step 4, part 2:<br>&quot;\n                &quot;  Check whether the environment variables were &quot;\n                &quot;deleted <br>&quot;\n                &quot;  in each target...<br>&quot;;\n            String^ messageStep4Part3 = &quot;Step 4, part 3:<br>&quot;\n                &quot;  Check whether the User and Machine environment &quot;\n                &quot;variables <br>&quot;\n                &quot;  were deleted from the Windows operating system &quot;\n                &quot;registry...<br>&quot;;\n            String^ step2Format = &quot;  {0,9}: Set {1} = \\&quot;{2}\\&quot;&quot;;  \n\n            // Step 1:\n            // Check whether the sample environment variables already\n            // exist.\n            // WARNING: These variables will be deleted at the end of\n            // this sample.\n            Console::WriteLine(messageStep1);\n            CheckVariables();\n            Console::WriteLine();   \n\n            // Step 2:\n            // Set the environment variable for each target.\n            // This section demonstrates\n            // Environment.SetEnvironmentVariable.\n            Console::WriteLine(messageStep2);     \n\n            // Set the environment variable for the default target\n            // (the current process).\n            Console::WriteLine(step2Format, &quot;(default)&quot;, VariableA,\n                existsA);\n            Environment::SetEnvironmentVariable(VariableA, existsA);  \n\n            // Set the environment variable for the current process.\n            Console::WriteLine(step2Format, &quot;Process&quot;, VariableB,\n                existsB);\n            Environment::SetEnvironmentVariable(VariableB, existsB,\n                EnvironmentVariableTarget::Process);\n\n            // Set the environment variable for the current user.\n            Console::WriteLine(step2Format, &quot;User&quot;, VariableC,\n                existsC);\n            Environment::SetEnvironmentVariable(VariableC, existsC,\n                EnvironmentVariableTarget::User);\n\n            // Set the environment variable for the local machine.\n            Console::WriteLine(step2Format, &quot;Machine&quot;, VariableD,\n                existsD);\n            Environment::SetEnvironmentVariable(VariableD, existsD,\n                EnvironmentVariableTarget::Machine);\n            Console::WriteLine();      \n\n            // Step 3, part 1:\n            // Display the environment variables in each target.\n            Console::WriteLine(messageStep3Part1);\n            PrintVariables();\n            Console::WriteLine();     \n\n            // Step 3, part 2:\n            // Check whether the User and Machine environment\n            // variables were created in the Windows operating system\n            // registry.\n            Console::WriteLine(messageStep3Part2);\n            CheckRegistryVariables();\n            Console::WriteLine();\n\n            // Step 4, part 1:\n            // Delete the environment variables created for this\n            // sample. This section demonstrates using \n            // Environment.SetEnvironmentVariable to delete an \n            // environment variable.\n            Console::WriteLine(messageStep4Part1);\n            Environment::SetEnvironmentVariable(VariableA, nullptr);\n            Environment::SetEnvironmentVariable(VariableB, nullptr,\n                EnvironmentVariableTarget::Process);\n            Environment::SetEnvironmentVariable(VariableC, nullptr,\n                EnvironmentVariableTarget::User);\n            Environment::SetEnvironmentVariable(VariableD, nullptr,\n                EnvironmentVariableTarget::Machine);     \n\n            // Step 4, part 2:\n            // Check whether the environment variables were deleted \n            // in each target.\n            Console::WriteLine(messageStep4Part2);\n            CheckVariables();\n\n            // Step 4, part 3:\n            // Check whether the User and Machine environment\n            // variables were deleted from the Windows operating\n            // system registry.\n            Console::WriteLine(messageStep4Part3);\n            CheckRegistryVariables();\n        }\n\n    protected:\n        // Globals:\n        literal String^ NameValueFormat = &quot;  {0} {1}.&quot;;\n        literal String^ VariableSuffix = &quot;_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Four relatively unique environment variable names.\n        // default process\n\n        literal String^ VariableA = &quot;A_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Current Process\n        literal String^ VariableB = &quot;B_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Current User\n        literal String^ VariableC = &quot;C_GETSET_ENVAR_SAMPLE&quot;;\n\n        // Local Machine\n        literal String^ VariableD = &quot;D_GETSET_ENVAR_SAMPLE&quot;;\n\n    private:\n        // CheckVariablesInTarget:\n        // Test whether a specific environment variable exists\n        // in a target. This section demonstrates\n        // Environment.GetEnvironmentVariable.\n        static void CheckVariablesInTarget(String^ variable,\n            EnvironmentVariableTarget target)\n        {\n            String^ variableName;\n\n            // Zero means use the default target.\n            if (target == (EnvironmentVariableTarget) 0)\n            {\n                variableName =\n                    Environment::GetEnvironmentVariable(variable);\n            }\n            else\n            {\n                variableName = Environment::GetEnvironmentVariable(\n                    variable, target);\n            }\n            Console::WriteLine(NameValueFormat, variable,\n                (String::IsNullOrEmpty(variableName) ?\n                &quot;doesn&#39;t exist&quot; : variableName));\n        }\n\n        // CheckVariable:\n        // Uses CheckVariablesInTarget to test whether each\n        // environment variable exists in a target.\n        static void CheckVariables()\n        {\n            Console::WriteLine(&quot;Process:&quot;);\n\n            // Check the default target(current process)\n            CheckVariablesInTarget(VariableA,\n                (EnvironmentVariableTarget) 0);\n            CheckVariablesInTarget(VariableB,\n                EnvironmentVariableTarget::Process);\n            CheckVariablesInTarget(VariableC,\n                EnvironmentVariableTarget::Process);\n            CheckVariablesInTarget(VariableD,\n                EnvironmentVariableTarget::Process);\n            Console::WriteLine();\n\n            Console::WriteLine(&quot;User:&quot;);\n            CheckVariablesInTarget(VariableA,\n                EnvironmentVariableTarget::User);\n            CheckVariablesInTarget(VariableB,\n                EnvironmentVariableTarget::User);\n            CheckVariablesInTarget(VariableC,\n                EnvironmentVariableTarget::User);\n            CheckVariablesInTarget(VariableD,\n                EnvironmentVariableTarget::User);\n            Console::WriteLine();\n\n            Console::WriteLine(&quot;Machine:&quot;);\n            CheckVariablesInTarget(VariableA,\n                EnvironmentVariableTarget::Machine);\n            CheckVariablesInTarget(VariableB,\n                EnvironmentVariableTarget::Machine);\n            CheckVariablesInTarget(VariableC,\n                EnvironmentVariableTarget::Machine);\n            CheckVariablesInTarget(VariableD,\n                EnvironmentVariableTarget::Machine);\n            Console::WriteLine();\n        }\n\n        // PrintVariablesFromTarget: PrintVariables helper function.\n        // This section demonstrates\n        // Environment.GetEnvironmentVariables.\n        static void PrintVariablesFromTarget(\n            EnvironmentVariableTarget target)\n        {\n            String^ valueString;\n            String^ keyString;\n\n            for each (DictionaryEntry^ dictionary in\n                Environment::GetEnvironmentVariables(target))\n            {\n                keyString = safe_cast&lt;String^&gt; (dictionary-&gt;Key);\n                valueString = safe_cast&lt;String^&gt; (dictionary-&gt;Value);\n                if (keyString-&gt;Contains(VariableSuffix))\n                    Console::WriteLine(NameValueFormat, keyString,\n                    valueString);\n            }\n            Console::WriteLine();\n        }\n\n        // PrintVariables:\n        // Uses PrintVariablesFromTarget to test whether\n        // each environment variable exists in a target.\n        static void PrintVariables()\n        {\n            Console::WriteLine(&quot;Process:&quot;);\n            PrintVariablesFromTarget(EnvironmentVariableTarget::Process);\n\n            Console::WriteLine(&quot;User:&quot;);\n            PrintVariablesFromTarget(EnvironmentVariableTarget::User);\n\n            Console::WriteLine(&quot;Machine:&quot;);\n            PrintVariablesFromTarget(EnvironmentVariableTarget::Machine);\n        }\n\n        // CheckRegistryVariablesForKey: CheckRegistryVariables\n        // helper function. This function filters out irrelevant\n        // environment variables.\n        static void CheckRegistryVariablesForKey(RegistryKey^ targetKey)\n        {\n            bool exists = false;            \n\n            for each (\n                String^ variableName in targetKey-&gt;GetValueNames())\n            {\n                if (variableName-&gt;Contains(VariableSuffix))\n                {\n                    String^ variableValue =\n                        safe_cast&lt;String^&gt;\n                        (targetKey-&gt;GetValue(variableName));\n                    Console::WriteLine(NameValueFormat, variableName,\n                        variableValue);\n                    exists = true;\n                }\n            }\n            if (!exists)\n            {\n                Console::WriteLine(\n                    &quot;  Environment variable doesn&#39;t exist.&quot;);\n            }\n            Console::WriteLine();\n        }\n\n        // CheckRegistryVariables:\n        // Uses CheckRegistryVariables to display the User and\n        // Machine environment variables in the registry.\n        static void CheckRegistryVariables()\n        {\n            String^ subkeyUser = &quot;Environment&quot;;\n            String^ subkeyMachine = &quot;System\\\\CurrentControlSet\\\\&quot;\n                &quot;Control\\\\Session Manager\\\\Environment&quot;;\n            String^ subkeyFormat = &quot;\\&quot;{0}\\&quot; key:&quot;;\n\n            Console::WriteLine(subkeyFormat, subkeyUser);\n            CheckRegistryVariablesForKey(\n                Registry::CurrentUser-&gt;OpenSubKey(subkeyUser));\n\n            Console::WriteLine(subkeyFormat, subkeyMachine);\n            CheckRegistryVariablesForKey(\n                Registry::LocalMachine-&gt;OpenSubKey(subkeyMachine));\n        }\n    };\n};\n\nusing namespace EnvironmentVariablesSample;\n\nint main()\n{\n    TestEnvironmentVariables::DoTest();\n}\n\n/*\nThis example produces the following results:\n\nStep 1:\nCheck whether the environment variables already exist in\nthe various targets...\n\nProcess:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\n\nStep 2:\nSet the environment variable for each target...\n\n(default): Set A_GETSET_ENVAR_SAMPLE = &quot;exists in the default target (Process)&quot;\nProcess: Set B_GETSET_ENVAR_SAMPLE = &quot;exists in Process&quot;\nUser: Set C_GETSET_ENVAR_SAMPLE = &quot;exists in User&quot;\nMachine: Set D_GETSET_ENVAR_SAMPLE = &quot;exists in Machine&quot;\n\nStep 3, part 1:\nDisplay the environment variables in each target...\n\nProcess:\nB_GETSET_ENVAR_SAMPLE exists in Process.\nA_GETSET_ENVAR_SAMPLE exists in the default target (Process).\n\nUser:\nC_GETSET_ENVAR_SAMPLE exists in User.\n\nMachine:\nD_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 3, part 2:\nCheck whether the User and Machine environment variables\nwere created in the Windows operating system registry...\n\n&quot;Environment&quot; key:\nC_GETSET_ENVAR_SAMPLE exists in User.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\nD_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 4, part 1:\nDelete the environment variables created for this sample...\n\nStep 4, part 2:\nCheck whether the environment variables were deleted\nin each target...\n\nProcess:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\nA_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nB_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nC_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\nD_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nStep 4, part 3:\nCheck whether the User and Machine environment variables\nwere deleted from the Windows operating system registry...\n\n&quot;Environment&quot; key:\nEnvironment variable doesn&#39;t exist.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\nEnvironment variable doesn&#39;t exist.\n*/\n\n</code></pre><pre><code class=\"lang-vb\" name=\"environment.getsetenvar#1\">&#39; This example demonstrates the \n&#39;     Environment.GetEnvironmentVariable,\n&#39;     Environment.SetEnvironmentVariable, and \n&#39;     Environment.GetEnvironmentVariables overloaded methods.\nImports System\nImports System.Collections\nImports Microsoft.Win32\nImports Microsoft.VisualBasic\n\nClass Sample\n   &#39;-------------------------------------------------------------------------------------\n   &#39; Globals: \n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared fmtNameValue As String = &quot;  {0} {1}.&quot;\n   Protected Shared myVarSuffix As String = &quot;_GETSET_ENVAR_SAMPLE&quot;\n   \n   &#39; Four relatively unique environment variable names.\n   Protected Shared myVarA As String = &quot;A&quot; &amp; myVarSuffix &#39; default process\n   Protected Shared myVarB As String = &quot;B&quot; &amp; myVarSuffix &#39; Current Process\n   Protected Shared myVarC As String = &quot;C&quot; &amp; myVarSuffix &#39; Current User\n   Protected Shared myVarD As String = &quot;D&quot; &amp; myVarSuffix &#39; Local Machine\n   &#39;=====================================================================================\n   &#39; EachVariable: \n   &#39; Test whether a specific environment variable exists in a target.\n   &#39; This section demonstrates Environment.GetEnvironmentVariable.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub EachVariable(var As String, tgt As EnvironmentVariableTarget)\n      Dim str As String\n      &#39;\n      If 0 = tgt Then &#39; Zero means use the default target.\n         str = Environment.GetEnvironmentVariable(var)\n      Else\n         str = Environment.GetEnvironmentVariable(var, tgt)\n      End If\n      Console.WriteLine(fmtNameValue, var, IIf(String.IsNullOrEmpty(str), _\n                                              &quot;doesn&#39;t exist&quot;, str))\n   End Sub &#39;EachVariable\n   \n   &#39;-------------------------------------------------------------------------------------\n   &#39; CheckEachVariable: \n   &#39; Uses EachVariable to test whether each environment variable exists in a target.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub CheckEachVariable()\n      Console.WriteLine(&quot;Process:&quot;)\n      EachVariable(myVarA, 0) &#39; Check the default target (current process)\n      EachVariable(myVarB, EnvironmentVariableTarget.Process)\n      EachVariable(myVarC, EnvironmentVariableTarget.Process)\n      EachVariable(myVarD, EnvironmentVariableTarget.Process)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;User:&quot;)\n      EachVariable(myVarA, EnvironmentVariableTarget.User)\n      EachVariable(myVarB, EnvironmentVariableTarget.User)\n      EachVariable(myVarC, EnvironmentVariableTarget.User)\n      EachVariable(myVarD, EnvironmentVariableTarget.User)\n      Console.WriteLine()\n      \n      Console.WriteLine(&quot;Machine:&quot;)\n      EachVariable(myVarA, EnvironmentVariableTarget.Machine)\n      EachVariable(myVarB, EnvironmentVariableTarget.Machine)\n      EachVariable(myVarC, EnvironmentVariableTarget.Machine)\n      EachVariable(myVarD, EnvironmentVariableTarget.Machine)\n      Console.WriteLine()\n   End Sub &#39;CheckEachVariable\n   \n   &#39;=====================================================================================\n   &#39; AllVariables: CheckAllVariables helper function.\n   &#39; This section demonstrates Environment.GetEnvironmentVariables.\n   &#39;-------------------------------------------------------------------------------------\n   Private Shared Sub AllVariables(tgt As EnvironmentVariableTarget)\n      Dim value As String\n      Dim key As String\n      \n      Dim de As DictionaryEntry\n      For Each de In Environment.GetEnvironmentVariables(tgt)\n         key = CStr(de.Key)\n         value = CStr(de.Value)\n         If key.Contains(myVarSuffix) Then\n            Console.WriteLine(fmtNameValue, key, value)\n         End If\n      Next de\n      Console.WriteLine()\n   End Sub &#39;AllVariables\n   \n   &#39;=====================================================================================\n   &#39; CheckAllVariables: \n   &#39; Uses AllVariables to test whether each environment variable exists in a target.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub CheckAllVariables()\n      Console.WriteLine(&quot;Process:&quot;)\n      AllVariables(EnvironmentVariableTarget.Process)\n      \n      Console.WriteLine(&quot;User:&quot;)\n      AllVariables(EnvironmentVariableTarget.User)\n      \n      Console.WriteLine(&quot;Machine:&quot;)\n      AllVariables(EnvironmentVariableTarget.Machine)\n   End Sub &#39;CheckAllVariables\n   \n   &#39;=====================================================================================\n   &#39; ChkReg: CheckRegistry helper function.\n   &#39; This function filters out irrelevant environment variables. \n   &#39;-------------------------------------------------------------------------------------\n   Private Shared Sub ChkReg(rk As RegistryKey)\n      Dim exists As Boolean = False\n      Dim registryNone As String = &quot;  Environment variable doesn&#39;t exist.&quot;\n      \n      Dim s As String\n      For Each s In rk.GetValueNames()\n         If s.Contains(myVarSuffix) Then\n            Console.WriteLine(fmtNameValue, s, CStr(rk.GetValue(s)))\n            exists = True\n         End If\n      Next s\n      If exists = False Then\n         Console.WriteLine(registryNone)\n      End If\n      Console.WriteLine()\n   End Sub &#39;ChkReg\n   \n   &#39;-------------------------------------------------------------------------------------\n   &#39; CheckRegistry: \n   &#39; Uses ChkReg to display the User and Machine environment variables in the registry.\n   &#39;-------------------------------------------------------------------------------------\n   Protected Shared Sub CheckRegistry()\n      Dim subkeyU As String = &quot;Environment&quot;\n      Dim subkeyM As String = &quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot;\n      Dim fmtSubkey As String = &quot;&quot;&quot;{0}&quot;&quot; key:&quot;\n      \n      Console.WriteLine(fmtSubkey, subkeyU)\n      ChkReg(Registry.CurrentUser.OpenSubKey(subkeyU))\n      \n      Console.WriteLine(fmtSubkey, subkeyM)\n      ChkReg(Registry.LocalMachine.OpenSubKey(subkeyM))\n   End Sub &#39;CheckRegistry\n   \n   &#39;=====================================================================================\n   &#39; Main:\n   &#39;-------------------------------------------------------------------------------------\n   Public Shared Sub Main()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Environment variable values\n      &#39;-------------------------------------------------------------------------------------\n      Dim existsA As String = &quot;exists in the default target (Process)&quot;\n      Dim existsB As String = &quot;exists in Process&quot;\n      Dim existsC As String = &quot;exists in User&quot;\n      Dim existsD As String = &quot;exists in Machine&quot;\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Messages:\n      &#39;-------------------------------------------------------------------------------------\n      Dim msg1  As String = &quot;Step 1:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the environment variables already exist in &quot; _\n                 &amp; vbCrLf &amp; &quot;  the various targets...&quot; &amp; vbCrLf\n      Dim msg2  As String = &quot;Step 2:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Set the environment variable for each target...&quot; &amp; vbCrLf\n      Dim msg31 As String = &quot;Step 3, part 1:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Display the environment variables in each target...&quot; &amp; vbCrLf\n      Dim msg32 As String = &quot;Step 3, part 2:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the User and Machine environment variables &quot; _\n                 &amp; vbCrLf &amp; &quot;  were created in the Windows operating system registry...&quot; _\n                 &amp; vbCrLf\n      Dim msg41 As String = &quot;Step 4, part 1:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Delete the environment variables created for this sample...&quot; _\n                 &amp; vbCrLf\n      Dim msg42 As String = &quot;Step 4, part 2:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the environment variables were deleted &quot; _\n                 &amp; vbCrLf &amp; &quot;  in each target...&quot; &amp; vbCrLf\n      Dim msg43 As String = &quot;Step 4, part 3:&quot; &amp; vbCrLf &amp; _\n                            &quot;  Check whether the User and Machine environment variables &quot; _\n                 &amp; vbCrLf &amp; &quot;  were deleted from the Windows operating system registry...&quot; _\n                 &amp; vbCrLf\n      Dim fmt2x As String = &quot;  {0,9}: Set {1} = &quot;&quot;{2}&quot;&quot;&quot;\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 1:\n      &#39; Check whether the sample environment variables already exist.\n      &#39; WARNING: These variables will be deleted at the end of this sample.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg1)\n      CheckEachVariable()\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 2:\n      &#39; Set the environment variable for each target.\n      &#39; This section demonstrates Environment.SetEnvironmentVariable.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg2)\n      &#39; Set the environment variable for the default target (the current process).\n      Console.WriteLine(fmt2x, &quot;(default)&quot;, myVarA, existsA)\n      Environment.SetEnvironmentVariable(myVarA, existsA)\n      \n      &#39; Set the environment variable for the current process.\n      Console.WriteLine(fmt2x, &quot;Process&quot;, myVarB, existsB)\n      Environment.SetEnvironmentVariable(myVarB, existsB, EnvironmentVariableTarget.Process)\n      \n      &#39; Set the environment variable for the current user.\n      Console.WriteLine(fmt2x, &quot;User&quot;, myVarC, existsC)\n      Environment.SetEnvironmentVariable(myVarC, existsC, EnvironmentVariableTarget.User)\n      \n      &#39; Set the environment variable for the local machine.\n      Console.WriteLine(fmt2x, &quot;Machine&quot;, myVarD, existsD)\n      Environment.SetEnvironmentVariable(myVarD, existsD, EnvironmentVariableTarget.Machine)\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 3, part 1:\n      &#39; Display the environment variables in each target.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg31)\n      CheckAllVariables()\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 3, part 2:\n      &#39; Check whether the User and Machine environment variables were created in the Windows \n      &#39; operating system registry.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg32)\n      CheckRegistry()\n      Console.WriteLine()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 4, part 1:\n      &#39; Delete the environment variables created for this sample.\n      &#39; This section demonstrates using Environment.SetEnvironmentVariable to delete an \n      &#39; environment variable.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg41)\n      Environment.SetEnvironmentVariable(myVarA, Nothing)\n      Environment.SetEnvironmentVariable(myVarB, Nothing, EnvironmentVariableTarget.Process)\n      Environment.SetEnvironmentVariable(myVarC, Nothing, EnvironmentVariableTarget.User)\n      Environment.SetEnvironmentVariable(myVarD, Nothing, EnvironmentVariableTarget.Machine)\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 4, part 2:\n      &#39; Check whether the environment variables were deleted in each target.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg42)\n      CheckEachVariable()\n      &#39;-------------------------------------------------------------------------------------\n      &#39; Step 4, part 3:\n      &#39; Check whether the User and Machine environment variables were deleted from the \n      &#39; Windows operating system registry.\n      &#39;-------------------------------------------------------------------------------------\n      Console.WriteLine(msg43)\n      CheckRegistry()\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Step 1:\n&#39;  Check whether the environment variables already exist in\n&#39;  the various targets...\n&#39;\n&#39;Process:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;User:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;Machine:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;\n&#39;Step 2:\n&#39;  Set the environment variable for each target...\n&#39;\n&#39;  (default): Set A_GETSET_ENVAR_SAMPLE = &quot;exists in the default target (Process)&quot;\n&#39;    Process: Set B_GETSET_ENVAR_SAMPLE = &quot;exists in Process&quot;\n&#39;       User: Set C_GETSET_ENVAR_SAMPLE = &quot;exists in User&quot;\n&#39;    Machine: Set D_GETSET_ENVAR_SAMPLE = &quot;exists in Machine&quot;\n&#39;\n&#39;Step 3, part 1:\n&#39;  Display the environment variables in each target...\n&#39;\n&#39;Process:\n&#39;  B_GETSET_ENVAR_SAMPLE exists in Process.\n&#39;  A_GETSET_ENVAR_SAMPLE exists in the default target (Process).\n&#39;\n&#39;User:\n&#39;  C_GETSET_ENVAR_SAMPLE exists in User.\n&#39;\n&#39;Machine:\n&#39;  D_GETSET_ENVAR_SAMPLE exists in Machine.\n&#39;\n&#39;\n&#39;Step 3, part 2:\n&#39;  Check whether the User and Machine environment variables\n&#39;  were created in the Windows operating system registry...\n&#39;\n&#39;&quot;Environment&quot; key:\n&#39;  C_GETSET_ENVAR_SAMPLE exists in User.\n&#39;\n&#39;&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n&#39;  D_GETSET_ENVAR_SAMPLE exists in Machine.\n&#39;\n&#39;\n&#39;Step 4, part 1:\n&#39;  Delete the environment variables created for this sample...\n&#39;\n&#39;Step 4, part 2:\n&#39;  Check whether the environment variables were deleted\n&#39;  in each target...\n&#39;\n&#39;Process:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;User:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;Machine:\n&#39;  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n&#39;\n&#39;Step 4, part 3:\n&#39;  Check whether the User and Machine environment variables\n&#39;  were deleted from the Windows operating system registry...\n&#39;\n&#39;&quot;Environment&quot; key:\n&#39;  Environment variable doesn&#39;t exist.\n&#39;\n&#39;&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n&#39;  Environment variable doesn&#39;t exist.\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"environment.getsetenvar#1\">// This example demonstrates the \n//     Environment.GetEnvironmentVariable,\n//     Environment.SetEnvironmentVariable, and \n//     Environment.GetEnvironmentVariables overloaded methods.\n\nusing System;\nusing System.Collections;\nusing Microsoft.Win32;\n\nclass Sample \n{\n//-------------------------------------------------------------------------------------\n// Globals: \n//-------------------------------------------------------------------------------------\n    protected static string fmtNameValue = &quot;  {0} {1}.&quot;;\n    protected static string myVarSuffix = &quot;_GETSET_ENVAR_SAMPLE&quot;;\n\n// Four relatively unique environment variable names.\n    protected static string myVarA = &quot;A&quot; + myVarSuffix; // default process\n    protected static string myVarB = &quot;B&quot; + myVarSuffix; // Current Process\n    protected static string myVarC = &quot;C&quot; + myVarSuffix; // Current User\n    protected static string myVarD = &quot;D&quot; + myVarSuffix; // Local Machine\n//=====================================================================================\n// EachVariable: \n// Test whether a specific environment variable exists in a target.\n// This section demonstrates Environment.GetEnvironmentVariable.\n//-------------------------------------------------------------------------------------\n    protected static void EachVariable(string var, EnvironmentVariableTarget tgt)\n    {\n    string str;\n    //\n    if (0 == tgt)          // Zero means use the default target.\n        str = Environment.GetEnvironmentVariable(var);\n    else\n        str = Environment.GetEnvironmentVariable(var, tgt);\n    Console.WriteLine(fmtNameValue, \n                      var, (String.IsNullOrEmpty(str) ? &quot;doesn&#39;t exist&quot; : str));\n    }\n//-------------------------------------------------------------------------------------\n// CheckEachVariable: \n// Uses EachVariable to test whether each environment variable exists in a target.\n//-------------------------------------------------------------------------------------\n    protected static void CheckEachVariable()\n    {\n    Console.WriteLine(&quot;Process:&quot;);\n    EachVariable(myVarA, 0);  // Check the default target (current process)\n    EachVariable(myVarB, EnvironmentVariableTarget.Process);\n    EachVariable(myVarC, EnvironmentVariableTarget.Process);\n    EachVariable(myVarD, EnvironmentVariableTarget.Process);\n    Console.WriteLine();\n\n    Console.WriteLine(&quot;User:&quot;);\n    EachVariable(myVarA, EnvironmentVariableTarget.User);\n    EachVariable(myVarB, EnvironmentVariableTarget.User);\n    EachVariable(myVarC, EnvironmentVariableTarget.User);\n    EachVariable(myVarD, EnvironmentVariableTarget.User);\n    Console.WriteLine();\n\n    Console.WriteLine(&quot;Machine:&quot;);\n    EachVariable(myVarA, EnvironmentVariableTarget.Machine);\n    EachVariable(myVarB, EnvironmentVariableTarget.Machine);\n    EachVariable(myVarC, EnvironmentVariableTarget.Machine);\n    EachVariable(myVarD, EnvironmentVariableTarget.Machine);\n    Console.WriteLine();\n    }\n//=====================================================================================\n// AllVariables: CheckAllVariables helper function.\n// This section demonstrates Environment.GetEnvironmentVariables.\n//-------------------------------------------------------------------------------------\n    private static void AllVariables(EnvironmentVariableTarget tgt)\n    {\n    string value;\n    string key;\n\n    foreach(DictionaryEntry de in Environment.GetEnvironmentVariables(tgt))\n        {\n        key   = (string)de.Key;\n        value = (string)de.Value;\n        if (key.Contains(myVarSuffix))\n            Console.WriteLine(fmtNameValue, key, value);\n        }\n    Console.WriteLine();\n    }\n//=====================================================================================\n// CheckAllVariables: \n// Uses AllVariables to test whether each environment variable exists in a target.\n//-------------------------------------------------------------------------------------\n    protected static void CheckAllVariables()\n    {\n    Console.WriteLine(&quot;Process:&quot;);\n    AllVariables(EnvironmentVariableTarget.Process);\n\n    Console.WriteLine(&quot;User:&quot;);\n    AllVariables(EnvironmentVariableTarget.User);\n\n    Console.WriteLine(&quot;Machine:&quot;);\n    AllVariables(EnvironmentVariableTarget.Machine);\n    }\n//=====================================================================================\n// ChkReg: CheckRegistry helper function.\n// This function filters out irrelevant environment variables. \n//-------------------------------------------------------------------------------------\n    private static void ChkReg(RegistryKey rk)\n    {\n    bool exists = false;\n    string registryNone = &quot;  Environment variable doesn&#39;t exist.&quot;;\n\n    foreach (string s in rk.GetValueNames())\n        {\n        if (s.Contains(myVarSuffix))\n            {\n            Console.WriteLine(fmtNameValue, s, (string)rk.GetValue(s));\n            exists = true;\n            }\n        }\n    if (exists == false)\n        Console.WriteLine(registryNone);\n    Console.WriteLine();\n    }\n//-------------------------------------------------------------------------------------\n// CheckRegistry: \n// Uses ChkReg to display the User and Machine environment variables in the registry.\n//-------------------------------------------------------------------------------------\n    protected static void CheckRegistry()\n    {\n    string subkeyU = @&quot;Environment&quot;;\n    string subkeyM = @&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot;;\n    string fmtSubkey = &quot;\\&quot;{0}\\&quot; key:&quot;;\n\n    Console.WriteLine(fmtSubkey, subkeyU);\n    ChkReg(Registry.CurrentUser.OpenSubKey(subkeyU));\n\n    Console.WriteLine(fmtSubkey, subkeyM);\n    ChkReg(Registry.LocalMachine.OpenSubKey(subkeyM));\n    }\n//=====================================================================================\n// Main:\n//-------------------------------------------------------------------------------------\n    public static void Main() \n    {\n//-------------------------------------------------------------------------------------\n// Environment variable values\n//-------------------------------------------------------------------------------------\n    string existsA = &quot;exists in the default target (Process)&quot;;\n    string existsB = &quot;exists in Process&quot;;\n    string existsC = &quot;exists in User&quot;;\n    string existsD = &quot;exists in Machine&quot;;\n//-------------------------------------------------------------------------------------\n// Messages:\n//-------------------------------------------------------------------------------------\n    string msg1  = &quot;Step 1:<br>&quot; +\n                       &quot;  Check whether the environment variables already exist in <br>&quot; + \n                       &quot;  the various targets...<br>&quot;;\n    string msg2  = &quot;Step 2:<br>&quot; +\n                       &quot;  Set the environment variable for each target...<br>&quot;;\n    string msg31 = &quot;Step 3, part 1:<br>&quot; + \n                       &quot;  Display the environment variables in each target...<br>&quot;;\n    string msg32 = &quot;Step 3, part 2:<br>&quot; +\n                       &quot;  Check whether the User and Machine environment variables <br>&quot; +\n                       &quot;  were created in the Windows operating system registry...<br>&quot;;\n    string msg41 = &quot;Step 4, part 1:<br>&quot; +\n                       &quot;  Delete the environment variables created for this sample...<br>&quot;;\n    string msg42 = &quot;Step 4, part 2:<br>&quot; +\n                       &quot;  Check whether the environment variables were deleted <br>&quot; +\n                       &quot;  in each target...<br>&quot;;\n    string msg43 = &quot;Step 4, part 3:<br>&quot; + \n                       &quot;  Check whether the User and Machine environment variables <br>&quot; +\n                       &quot;  were deleted from the Windows operating system registry...<br>&quot;;\n    string fmt2x   = &quot;  {0,9}: Set {1} = \\&quot;{2}\\&quot;&quot;;\n//-------------------------------------------------------------------------------------\n// Step 1:\n// Check whether the sample environment variables already exist.\n// WARNING: These variables will be deleted at the end of this sample.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg1);\n    CheckEachVariable();\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 2:\n// Set the environment variable for each target.\n// This section demonstrates Environment.SetEnvironmentVariable.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg2);\n// Set the environment variable for the default target (the current process).\n    Console.WriteLine(fmt2x, &quot;(default)&quot;, myVarA, existsA);\n    Environment.SetEnvironmentVariable(myVarA, existsA);\n\n// Set the environment variable for the current process.\n    Console.WriteLine(fmt2x, &quot;Process&quot;, myVarB, existsB);\n    Environment.SetEnvironmentVariable(myVarB, existsB, \n        EnvironmentVariableTarget.Process);\n\n// Set the environment variable for the current user.\n    Console.WriteLine(fmt2x, &quot;User&quot;, myVarC, existsC);\n    Environment.SetEnvironmentVariable(myVarC, existsC, \n        EnvironmentVariableTarget.User);\n\n// Set the environment variable for the local machine.\n    Console.WriteLine(fmt2x, &quot;Machine&quot;, myVarD, existsD);\n    Environment.SetEnvironmentVariable(myVarD, existsD, \n        EnvironmentVariableTarget.Machine);\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 3, part 1:\n// Display the environment variables in each target.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg31);\n    CheckAllVariables();\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 3, part 2:\n// Check whether the User and Machine environment variables were created in the Windows \n// operating system registry.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg32);\n    CheckRegistry();\n    Console.WriteLine();\n//-------------------------------------------------------------------------------------\n// Step 4, part 1:\n// Delete the environment variables created for this sample.\n// This section demonstrates using Environment.SetEnvironmentVariable to delete an \n// environment variable.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg41);\n    Environment.SetEnvironmentVariable(myVarA, null);\n    Environment.SetEnvironmentVariable(myVarB, null, EnvironmentVariableTarget.Process);\n    Environment.SetEnvironmentVariable(myVarC, null, EnvironmentVariableTarget.User);\n    Environment.SetEnvironmentVariable(myVarD, null, EnvironmentVariableTarget.Machine);\n//-------------------------------------------------------------------------------------\n// Step 4, part 2:\n// Check whether the environment variables were deleted in each target.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg42);\n    CheckEachVariable();\n//-------------------------------------------------------------------------------------\n// Step 4, part 3:\n// Check whether the User and Machine environment variables were deleted from the \n// Windows operating system registry.\n//-------------------------------------------------------------------------------------\n    Console.WriteLine(msg43);\n    CheckRegistry();\n    }\n}\n/*\nThis example produces the following results:\n\nStep 1:\n  Check whether the environment variables already exist in\n  the various targets...\n\nProcess:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\n\nStep 2:\n  Set the environment variable for each target...\n\n  (default): Set A_GETSET_ENVAR_SAMPLE = &quot;exists in the default target (Process)&quot;\n    Process: Set B_GETSET_ENVAR_SAMPLE = &quot;exists in Process&quot;\n       User: Set C_GETSET_ENVAR_SAMPLE = &quot;exists in User&quot;\n    Machine: Set D_GETSET_ENVAR_SAMPLE = &quot;exists in Machine&quot;\n\nStep 3, part 1:\n  Display the environment variables in each target...\n\nProcess:\n  B_GETSET_ENVAR_SAMPLE exists in Process.\n  A_GETSET_ENVAR_SAMPLE exists in the default target (Process).\n\nUser:\n  C_GETSET_ENVAR_SAMPLE exists in User.\n\nMachine:\n  D_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 3, part 2:\n  Check whether the User and Machine environment variables\n  were created in the Windows operating system registry...\n\n&quot;Environment&quot; key:\n  C_GETSET_ENVAR_SAMPLE exists in User.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n  D_GETSET_ENVAR_SAMPLE exists in Machine.\n\n\nStep 4, part 1:\n  Delete the environment variables created for this sample...\n\nStep 4, part 2:\n  Check whether the environment variables were deleted\n  in each target...\n\nProcess:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nUser:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nMachine:\n  A_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  B_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  C_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n  D_GETSET_ENVAR_SAMPLE doesn&#39;t exist.\n\nStep 4, part 3:\n  Check whether the User and Machine environment variables\n  were deleted from the Windows operating system registry...\n\n&quot;Environment&quot; key:\n  Environment variable doesn&#39;t exist.\n\n&quot;System\\CurrentControlSet\\Control\\Session Manager\\Environment&quot; key:\n  Environment variable doesn&#39;t exist.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Environment.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Environment.yml\">\r\n<meta name=\"APIName\" content=\"System.Environment\">\r\n<meta name=\"APIName\" content=\"System.Environment.CommandLine\">\r\n<meta name=\"APIName\" content=\"System.Environment.CurrentDirectory\">\r\n<meta name=\"APIName\" content=\"System.Environment.CurrentManagedThreadId\">\r\n<meta name=\"APIName\" content=\"System.Environment.Exit\">\r\n<meta name=\"APIName\" content=\"System.Environment.ExitCode\">\r\n<meta name=\"APIName\" content=\"System.Environment.ExpandEnvironmentVariables\">\r\n<meta name=\"APIName\" content=\"System.Environment.FailFast\">\r\n<meta name=\"APIName\" content=\"System.Environment.GetCommandLineArgs\">\r\n<meta name=\"APIName\" content=\"System.Environment.GetEnvironmentVariable\">\r\n<meta name=\"APIName\" content=\"System.Environment.GetEnvironmentVariables\">\r\n<meta name=\"APIName\" content=\"System.Environment.GetFolderPath\">\r\n<meta name=\"APIName\" content=\"System.Environment.GetLogicalDrives\">\r\n<meta name=\"APIName\" content=\"System.Environment.HasShutdownStarted\">\r\n<meta name=\"APIName\" content=\"System.Environment.Is64BitOperatingSystem\">\r\n<meta name=\"APIName\" content=\"System.Environment.Is64BitProcess\">\r\n<meta name=\"APIName\" content=\"System.Environment.MachineName\">\r\n<meta name=\"APIName\" content=\"System.Environment.NewLine\">\r\n<meta name=\"APIName\" content=\"System.Environment.OSVersion\">\r\n<meta name=\"APIName\" content=\"System.Environment.ProcessorCount\">\r\n<meta name=\"APIName\" content=\"System.Environment.SetEnvironmentVariable\">\r\n<meta name=\"APIName\" content=\"System.Environment.StackTrace\">\r\n<meta name=\"APIName\" content=\"System.Environment.SystemDirectory\">\r\n<meta name=\"APIName\" content=\"System.Environment.SystemPageSize\">\r\n<meta name=\"APIName\" content=\"System.Environment.TickCount\">\r\n<meta name=\"APIName\" content=\"System.Environment.UserDomainName\">\r\n<meta name=\"APIName\" content=\"System.Environment.UserInteractive\">\r\n<meta name=\"APIName\" content=\"System.Environment.UserName\">\r\n<meta name=\"APIName\" content=\"System.Environment.Version\">\r\n<meta name=\"APIName\" content=\"System.Environment.WorkingSet\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d41abfe0-f6f0-f043-c69e-b5652d9f7c1f\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\Environment.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Environment\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Environment.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Environment.yml","open_to_public_contributors":true,"api_name":["System.Environment","System.Environment.CommandLine","System.Environment.CurrentDirectory","System.Environment.CurrentManagedThreadId","System.Environment.Exit","System.Environment.ExitCode","System.Environment.ExpandEnvironmentVariables","System.Environment.FailFast","System.Environment.GetCommandLineArgs","System.Environment.GetEnvironmentVariable","System.Environment.GetEnvironmentVariables","System.Environment.GetFolderPath","System.Environment.GetLogicalDrives","System.Environment.HasShutdownStarted","System.Environment.Is64BitOperatingSystem","System.Environment.Is64BitProcess","System.Environment.MachineName","System.Environment.NewLine","System.Environment.OSVersion","System.Environment.ProcessorCount","System.Environment.SetEnvironmentVariable","System.Environment.StackTrace","System.Environment.SystemDirectory","System.Environment.SystemPageSize","System.Environment.TickCount","System.Environment.UserDomainName","System.Environment.UserInteractive","System.Environment.UserName","System.Environment.Version","System.Environment.WorkingSet"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Environment","System::Environment","System.Environment.CommandLine","System::Environment::CommandLine","System.Environment.CurrentDirectory","System::Environment::CurrentDirectory","System.Environment.CurrentManagedThreadId","System::Environment::CurrentManagedThreadId","System.Environment.Exit","System::Environment::Exit","System.Environment.ExitCode","System::Environment::ExitCode","System.Environment.ExpandEnvironmentVariables","System::Environment::ExpandEnvironmentVariables","System.Environment.FailFast","System::Environment::FailFast","System.Environment.GetCommandLineArgs","System::Environment::GetCommandLineArgs","System.Environment.GetEnvironmentVariable","System::Environment::GetEnvironmentVariable","System.Environment.GetEnvironmentVariables","System::Environment::GetEnvironmentVariables","System.Environment.GetFolderPath","System::Environment::GetFolderPath","System.Environment.GetLogicalDrives","System::Environment::GetLogicalDrives","System.Environment.HasShutdownStarted","System::Environment::HasShutdownStarted","System.Environment.Is64BitOperatingSystem","System::Environment::Is64BitOperatingSystem","System.Environment.Is64BitProcess","System::Environment::Is64BitProcess","System.Environment.MachineName","System::Environment::MachineName","System.Environment.NewLine","System::Environment::NewLine","System.Environment.OSVersion","System::Environment::OSVersion","System.Environment.ProcessorCount","System::Environment::ProcessorCount","System.Environment.SetEnvironmentVariable","System::Environment::SetEnvironmentVariable","System.Environment.StackTrace","System::Environment::StackTrace","System.Environment.SystemDirectory","System::Environment::SystemDirectory","System.Environment.SystemPageSize","System::Environment::SystemPageSize","System.Environment.TickCount","System::Environment::TickCount","System.Environment.UserDomainName","System::Environment::UserDomainName","System.Environment.UserInteractive","System::Environment::UserInteractive","System.Environment.UserName","System::Environment::UserName","System.Environment.Version","System::Environment::Version","System.Environment.WorkingSet","System::Environment::WorkingSet"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d41abfe0-f6f0-f043-c69e-b5652d9f7c1f","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\Environment.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Environment.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Environment class | Microsoft Docs","_op_ogTitle":"Environment class","description":"Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Environment","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.environment","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.environment","fileRelativePath":"System.Environment.html"},"themesRelativePathToOutputRoot":"_themes/"}