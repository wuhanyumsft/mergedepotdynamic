{"content":"    \r\n    <h1 id=\"System_Console\">\r\n      <span class=\"lang-csharp\">Console</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the standard input, output, and error streams for console applications. This class cannot be inherited.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class Console</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Console</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the computer terminal. For example, in the Windows operating system, the console is called the Command Prompt window and accepts MS-DOS commands. The Console class provides basic support for applications that read characters from, and write characters to, the console.  </p>\n<p> For information about developing with the Console class, see the following sections:  </p>\n<ul>\n<li><p><a href=\"#Streams\" data-linktype=\"self-bookmark\">Console I/O Streams</a>  </p>\n</li>\n<li><p><a href=\"#Buffer\" data-linktype=\"self-bookmark\">Screen Buffer and Console Window</a>  </p>\n</li>\n<li><p><a href=\"#Unicode\" data-linktype=\"self-bookmark\">Unicode Support for the Console</a>  </p>\n</li>\n<li><p><a href=\"#Operations\" data-linktype=\"self-bookmark\">Common Operations</a>  </p>\n</li>\n<li><p><a href=\"#Core\" data-linktype=\"self-bookmark\">.NET Core Notes</a>  </p>\n</li>\n</ul>\n<p><a name=\"Streams\"></a>   </p>\n<h2 id=\"console-io-streams\">Console I/O Streams</h2>\n<p> When a console application starts, the operating system automatically associates three I/O streams with the console: standard input stream, standard output stream, and standard error output stream. Your application can read user input from the standard input stream; write normal data to the standard output stream; and write error data to the standard error output stream. These streams are presented to your application as the values of the <a class=\"xref\" href=\"system.console#System_Console_In_\" data-linktype=\"relative-path\">In</a>, <a class=\"xref\" href=\"system.console#System_Console_Out_\" data-linktype=\"relative-path\">Out</a>, and <a class=\"xref\" href=\"system.console#System_Console_Error_\" data-linktype=\"relative-path\">Error</a> properties.  </p>\n<p> By default, the value of the <a class=\"xref\" href=\"system.console#System_Console_In_\" data-linktype=\"relative-path\">In</a> property is a <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">System.IO.TextReader</a> object that represents the keyboard, and the values of the <a class=\"xref\" href=\"system.console#System_Console_Out_\" data-linktype=\"relative-path\">Out</a> and <a class=\"xref\" href=\"system.console#System_Console_Error_\" data-linktype=\"relative-path\">Error</a> properties are <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">System.IO.TextWriter</a> objects that represent a console window. However, you can set these properties to streams that do not represent the console window or keyboard; for example, you can set these properties to streams that represent files. To redirect the standard input, standard output, or standard error stream, call the <a class=\"xref\" href=\"system.console#System_Console_SetIn_\" data-linktype=\"relative-path\">SetIn</a>, <a class=\"xref\" href=\"system.console#System_Console_SetOut_\" data-linktype=\"relative-path\">SetOut</a>, or <a class=\"xref\" href=\"system.console#System_Console_SetError_\" data-linktype=\"relative-path\">SetError</a> method, respectively. I/O operations that use these streams are synchronized, which means that multiple threads can read from, or write to, the streams. This means that methods that are ordinarily asynchronous, such as <a class=\"xref\" href=\"system.io.textreader#System_IO_TextReader_ReadLineAsync_\" data-linktype=\"relative-path\">ReadLineAsync</a>, execute synchronously if the object represents a console stream.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not use the Console class to display output in unattended applications, such as server applications. Calls to methods such as <a class=\"xref\" href=\"system.console#System_Console_Write_\" data-linktype=\"relative-path\">Write</a> and <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> have no effect in GUI applications.  </p>\n</div>\n<p> Console class members that work normally when the underlying stream is directed to a console might throw an exception if the stream is redirected, for example, to a file. Program your application to catch <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">System.IO.IOException</a> exceptions if you redirect a standard stream. You can also use the <a class=\"xref\" href=\"system.console#System_Console_IsOutputRedirected_\" data-linktype=\"relative-path\">IsOutputRedirected</a>, <a class=\"xref\" href=\"system.console#System_Console_IsInputRedirected_\" data-linktype=\"relative-path\">IsInputRedirected</a>, and <a class=\"xref\" href=\"system.console#System_Console_IsErrorRedirected_\" data-linktype=\"relative-path\">IsErrorRedirected</a> properties to determine whether a standard stream is redirected before performing an operation that throws an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">System.IO.IOException</a> exception.  </p>\n<p> It is sometimes useful to explicitly call the members of the stream objects represented by the <a class=\"xref\" href=\"system.console#System_Console_In_\" data-linktype=\"relative-path\">In</a>, <a class=\"xref\" href=\"system.console#System_Console_Out_\" data-linktype=\"relative-path\">Out</a>, and <a class=\"xref\" href=\"system.console#System_Console_Error_\" data-linktype=\"relative-path\">Error</a> properties. For example, by default, the <a class=\"xref\" href=\"system.console#System_Console_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> method reads input from the standard input stream. Similarly, the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method writes data to the standard output stream, and the data is followed by the default line termination string, which is  a carriage return and line feed (&quot;\\r\\n&quot;). However, the Console class does not provide a corresponding method to write data to the standard error output stream, or a property to change the line termination string for data written to that stream.  </p>\n<p> You can solve this problem by setting the <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_NewLine_\" data-linktype=\"relative-path\">NewLine</a> property of the <a class=\"xref\" href=\"system.console#System_Console_Out_\" data-linktype=\"relative-path\">Out</a> or <a class=\"xref\" href=\"system.console#System_Console_Error_\" data-linktype=\"relative-path\">Error</a> property to another line termination string. For example, the following C# statement sets the line termination string for the standard error output stream to two carriage return and line feed sequences:  </p>\n<p> <code>Console.Error.NewLine = &quot;\\r\\n\\r\\n&quot;;</code>  </p>\n<p> You can then explicitly call the <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method of the error output stream object, as in the following C# statement:  </p>\n<p> <code>Console.Error.WriteLine();</code>  </p>\n<p><a name=\"Buffer\"></a>   </p>\n<h2 id=\"screen-buffer-and-console-window\">Screen Buffer and Console Window</h2>\n<p> Two closely related features of the console are the screen buffer and the console window. Text is actually read from or written to streams owned by the console, but appear to be read from or written to an area owned by the console called the screen buffer. The screen buffer is an attribute of the console, and is organized as a rectangular grid of rows and columns where each grid intersection, or character cell, can contain a character. Each character has its own foreground color, and each character cell has its own background color.  </p>\n<p> The screen buffer is viewed through a rectangular region called the console window. The console window is another attribute of the console; it is not the console itself, which is an operating system window. The console window is arranged in rows and columns, is less than or equal to the size of the screen buffer, and can be moved to view different areas of the underlying screen buffer. If the screen buffer is larger than the console window, the console automatically displays scroll bars so the console window can be repositioned over the screen buffer area.  </p>\n<p> A cursor indicates the screen buffer position where text is currently read or written. The cursor can be hidden or made visible, and its height can be changed. If the cursor is visible, the console window position is moved automatically so the cursor is always in view.  </p>\n<p> The origin for character cell coordinates in the screen buffer is the upper left corner, and the positions of the cursor and the console window are measured relative to that origin. Use zero-based indexes to specify positions; that is, specify the topmost row as row 0, and the leftmost column as column 0. The maximum value for the row and column indexes is <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">System.Int16.MaxValue</a>.  </p>\n<p><a name=\"Unicode\"></a>   </p>\n<h2 id=\"unicode-support-for-the-console\">Unicode Support for the Console</h2>\n<p> In general, the console reads input and writes output by using the current console code page, which the system locale defines by default. A code page can handle only a subset of available Unicode characters, so if you try to display characters that are not mapped by a particular code page, the console won&#39;t be able to display all characters or represent them accurately. The following example illustrates this problem. It tries to display the characters of the Cyrillic alphabet from U+0410 to U+044F to the console. If you run the example on a system that uses console code page 437, each character is replaced by a question mark (?), because Cyrillic characters do not map to the characters in code page 437.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.Class#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Create a Char array for the modern Cyrillic alphabet, \n      // from U+0410 to U+044F.\n      int nChars = 0x044F - 0x0410 + 1;\n      char[] chars = new char[nChars];\n      ushort codePoint = 0x0410;\n      for (int ctr = 0; ctr &lt; chars.Length; ctr++) {\n        chars[ctr] = Convert.ToChar(codePoint);\n        codePoint++;\n      }   \n         \n      Console.WriteLine(&quot;Current code page: {0}\\n&quot;, \n                        Console.OutputEncoding.CodePage);\n      // Display the characters.\n      foreach (var ch in chars) {\n         Console.Write(&quot;{0}  &quot;, ch);\n         if (Console.CursorLeft &gt;= 70) \n            Console.WriteLine();\n      }\n   }\n}\n// The example displays the following output:\n//    Current code page: 437\n//    \n//    ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?\n//    ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?\n//    ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.Class#1\">Module Example\n   Public Sub Main()\n      &#39; Create a Char array for the modern Cyrillic alphabet, \n      &#39; from U+0410 to U+044F.\n      Dim nChars As Integer = &amp;h44F - &amp;h0410\n      Dim chars(nChars) As Char\n      Dim codePoint As UInt16 = &amp;h0410\n      For ctr As Integer = 0 To chars.Length - 1\n        chars(ctr) = ChrW(codePoint)\n        codePoint += CType(1, UShort)\n      Next   \n         \n      Console.WriteLine(&quot;Current code page: {0}&quot;, \n                        Console.OutputEncoding.CodePage)\n      Console.WriteLine()\n      &#39; Display the characters.\n      For Each ch In chars\n         Console.Write(&quot;{0}  &quot;, ch)\n         If Console.CursorLeft &gt;= 70 Then Console.WriteLine()\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Current code page: 437\n&#39;       \n&#39;       ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?\n&#39;       ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?\n&#39;       ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?\n</code></pre><p> In addition to supporting code pages, the Console class supports UTF-8 encoding with the <a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a> class. Beginning with the .NET Framework 4.5, the Console class also supports UTF-16 encoding with the <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> class. To display Unicode characters to the console. you set the <a class=\"xref\" href=\"system.console#System_Console_OutputEncoding_\" data-linktype=\"relative-path\">OutputEncoding</a> property to either <a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a> or  <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a>.  </p>\n<p> Support for Unicode characters requires the encoder to recognize a particular Unicode character, and also requires a font that has the glyphs needed to render that character. To successfully display Unicode characters to the console, the console font must be set to a non-raster or TrueType font such as Consolas or Lucida Console. The following example shows how you can programmatically change the font from a raster font to Lucida Console.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.Class.Unsafe#3\">using System;\nusing System.Runtime.InteropServices;\n\npublic class Example\n{\n   [DllImport(&quot;kernel32.dll&quot;, SetLastError = true)]\n   static extern IntPtr GetStdHandle(int nStdHandle);\n\n   [DllImport(&quot;kernel32.dll&quot;, CharSet = CharSet.Unicode, SetLastError = true)]\n   static extern bool GetCurrentConsoleFontEx(\n          IntPtr consoleOutput, \n          bool maximumWindow,\n          ref CONSOLE_FONT_INFO_EX lpConsoleCurrentFontEx);\n          \n   [DllImport(&quot;kernel32.dll&quot;, SetLastError = true)]\n   static extern bool SetCurrentConsoleFontEx(\n          IntPtr consoleOutput, \n          bool maximumWindow,\n          CONSOLE_FONT_INFO_EX consoleCurrentFontEx);\n   \n   private const int STD_OUTPUT_HANDLE = -11;\n   private const int TMPF_TRUETYPE = 4;\n   private const int LF_FACESIZE = 32;\n   private static IntPtr INVALID_HANDLE_VALUE = new IntPtr(-1);\n   \n   public static unsafe void Main()\n   {\n      string fontName = &quot;Lucida Console&quot;;\n      IntPtr hnd = GetStdHandle(STD_OUTPUT_HANDLE);\n      if (hnd != INVALID_HANDLE_VALUE) {\n         CONSOLE_FONT_INFO_EX info = new CONSOLE_FONT_INFO_EX();\n         info.cbSize = (uint) Marshal.SizeOf(info);\n         bool tt = false;\n         // First determine whether there&#39;s already a TrueType font.\n         if (GetCurrentConsoleFontEx(hnd, false, ref info)) {\n            tt = (info.FontFamily &amp; TMPF_TRUETYPE) == TMPF_TRUETYPE;\n            if (tt) {\n               Console.WriteLine(&quot;The console already is using a TrueType font.&quot;);\n               return;\n            }\n            // Set console font to Lucida Console.\n            CONSOLE_FONT_INFO_EX newInfo = new CONSOLE_FONT_INFO_EX();\n            newInfo.cbSize = (uint) Marshal.SizeOf(newInfo);          \n            newInfo.FontFamily = TMPF_TRUETYPE;\n            IntPtr ptr = new IntPtr(newInfo.FaceName);\n            Marshal.Copy(fontName.ToCharArray(), 0, ptr, fontName.Length);\n            // Get some settings from current font.\n            newInfo.dwFontSize = new COORD(info.dwFontSize.X, info.dwFontSize.Y);\n            newInfo.FontWeight = info.FontWeight;\n            SetCurrentConsoleFontEx(hnd, false, newInfo);\n         }\n      }    \n    }\n \n   [StructLayout(LayoutKind.Sequential)]\n   internal struct COORD\n   {\n      internal short X;\n      internal short Y;\n      \n      internal COORD(short x, short y)\n      {\n         X = x;\n         Y = y;\n      }\n   }\n \n   [StructLayout(LayoutKind.Sequential)]\n   internal unsafe struct CONSOLE_FONT_INFO_EX \n   {\n      internal uint cbSize;\n      internal uint nFont;\n      internal COORD dwFontSize;\n      internal int FontFamily;\n      internal int FontWeight;\n      internal fixed char FaceName[LF_FACESIZE];\n   } \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.Class.Unsafe#3\">Imports System.Runtime.InteropServices\n\nPublic Module Example\n   &#39; &lt;DllImport(&quot;kernel32.dll&quot;, SetLastError = true)&gt;\n   Private Declare Function GetStdHandle Lib &quot;Kernel32&quot; (\n                   nStdHandle As Integer) As IntPtr\n\n   &#39; [DllImport(&quot;kernel32.dll&quot;, CharSet = CharSet.Unicode, SetLastError = true)]\n   Private Declare Function GetCurrentConsoleFontEx Lib &quot;Kernel32&quot; ( \n                   consoleOutput As IntPtr, \n                   maximumWindow As Boolean,\n                   ByRef lpConsoleCurrentFontEx As CONSOLE_FONT_INFO_EX) As Boolean\n          \n   &#39; [DllImport(&quot;kernel32.dll&quot;, SetLastError = true)]\n   Private Declare Function SetCurrentConsoleFontEx Lib &quot;Kernel32&quot;(\n                   consoleOutput As IntPtr, \n                   maximumWindow As Boolean,\n                   consoleCurrentFontEx As CONSOLE_FONT_INFO_EX) As Boolean\n   \n   Private Const STD_OUTPUT_HANDLE As Integer = -11\n   Private Const TMPF_TRUETYPE As Integer = 4\n   Private Const LF_FACESIZE As Integer= 32\n   Private INVALID_HANDLE_VALUE As IntPtr = New IntPtr(-1)\n   \n   Public Sub Main()\n      Dim fontName As String = &quot;Lucida Console&quot;\n      Dim hnd As IntPtr = GetStdHandle(STD_OUTPUT_HANDLE)\n      If hnd &lt;&gt; INVALID_HANDLE_VALUE Then\n         Dim info AS CONSOLE_FONT_INFO_EX = New CONSOLE_FONT_INFO_EX()\n         info.cbSize = CUInt(Marshal.SizeOf(info))\n         Dim tt As Boolean = False\n         &#39; First determine whether there&#39;s already a TrueType font.\n         If GetCurrentConsoleFontEx(hnd, False, info) Then\n            tt = (info.FontFamily And TMPF_TRUETYPE) = TMPF_TRUETYPE\n            If tt Then\n               Console.WriteLine(&quot;The console already is using a TrueType font.&quot;)\n               Return\n            End If\n            &#39; Set console font to Lucida Console.\n            Dim newInfo As CONSOLE_FONT_INFO_EX = New CONSOLE_FONT_INFO_EX()\n            newInfo.cbSize = CUInt(Marshal.SizeOf(newInfo))          \n            newInfo.FontFamily = TMPF_TRUETYPE\n            newInfo.FaceName = fontName\n            &#39; Get some settings from current font.\n            newInfo.dwFontSize = New COORD(info.dwFontSize.X, info.dwFontSize.Y)\n            newInfo.FontWeight = info.FontWeight\n            SetCurrentConsoleFontEx(hnd, False, newInfo)\n         End If\n      End If    \n   End Sub\n \n   &lt;StructLayout(LayoutKind.Sequential)&gt; Friend Structure COORD\n      Friend X As Short\n      Friend Y As Short\n      \n      Friend Sub New(x As Short, y As Short)\n         Me.X = x\n         Me.Y = y\n      End Sub\n   End Structure\n \n   &lt;StructLayout(LayoutKind.Sequential, CharSet := CharSet.Unicode)&gt; Friend Structure CONSOLE_FONT_INFO_EX \n      Friend cbSize As UInteger\n      Friend nFont As UInteger\n      Friend dwFontSize As COORD\n      Friend FontFamily As Integer\n      Friend FontWeight As Integer\n      &lt;MarshalAs(UnmanagedType.ByValTStr, SizeConst := 32)&gt; Friend FaceName As String\n   End Structure \nEnd Module\n</code></pre><p> However, TrueType fonts can display only a subset of glyphs. For example, the Lucida Console font displays only 643 of the approximately 64,000 available characters from U+0021 to U+FB02. To see which characters a particular font supports, open the <strong>Fonts</strong> applet in Control Panel, choose the <strong>Find a character</strong> option, and choose the font whose character set you&#39;d like to examine in the <strong>Font</strong> list of the <strong>Character Map</strong> window.  </p>\n<p> Windows uses font linking to display glyphs that are not available in a particular font. For information about font linking to display additional character sets, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=229111\" data-linktype=\"external\">Globalization Step-by-Step: Fonts</a>. Linked fonts are defined in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink subkey of the registry. Each entry associated with this subkey corresponds to the name of a base font, and its value is a string array that defines the font files and the fonts that are linked to the base font. Each member of the array defines a linked font and takes the form <em>font-file-name</em>,<em>font-name</em>. The following example illustrates how you can programmatically define a linked font named SimSun found in a font file named simsun.ttc that displays Simplified Han characters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.Class#2\">using Microsoft.Win32;\nusing System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string valueName = &quot;Lucida Console&quot;;\n      string newFont = &quot;simsun.ttc,SimSun&quot;;\n      string[] fonts = null;\n      RegistryValueKind kind = 0; \n      bool toAdd;\n      \n      RegistryKey key = Registry.LocalMachine.OpenSubKey( \n                 @&quot;Software\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink&quot;, \n                 true);\n      if (key == null) {\n         Console.WriteLine(&quot;Font linking is not enabled.&quot;);\n      }\n      else {\n         // Determine if the font is a base font.\n         string[] names = key.GetValueNames();\n         if (Array.Exists(names, s =&gt; s.Equals(valueName, \n                                      StringComparison.OrdinalIgnoreCase))) {\n            // Get the value&#39;s type.\n            kind = key.GetValueKind(valueName);\n\n            // Type should be RegistryValueKind.MultiString, but we can&#39;t be sure.\n            switch (kind) {\n               case RegistryValueKind.String:\n                  fonts = new string[] { (string) key.GetValue(valueName) };\n                  break;   \n               case RegistryValueKind.MultiString:\n                  fonts = (string[]) key.GetValue(valueName);\n                  break;\n               case RegistryValueKind.None:\n                  // Do nothing.\n                  fonts = new string[] { };\n                  break;\n            } \n            // Determine whether SimSun is a linked font.\n            if (Array.FindIndex(fonts, s =&gt;s.IndexOf(&quot;SimSun&quot;, \n                                       StringComparison.OrdinalIgnoreCase) &gt;=0) &gt;= 0) {\n               Console.WriteLine(&quot;Font is already linked.&quot;);\n               toAdd = false;\n            }\n            else {\n               // Font is not a linked font.\n               toAdd = true;\n            }\n         }\n         else {\n            // Font is not a base font.\n            toAdd = true;\n            fonts = new string[] { };\n         }\n\n         if (toAdd) {  \n            Array.Resize(ref fonts, fonts.Length + 1);\n            fonts[fonts.GetUpperBound(0)] = newFont;\n            // Change REG_SZ to REG_MULTI_SZ.\n            if (kind == RegistryValueKind.String)\n               key.DeleteValue(valueName, false);\n\n            key.SetValue(valueName, fonts, RegistryValueKind.MultiString);\n            Console.WriteLine(&quot;SimSun added to the list of linked fonts.&quot;);\n         }                     \n      }\n      \n      if (key != null) key.Close();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.Class#2\">Imports Microsoft.Win32\n\nModule Example\n   Public Sub Main()\n      Dim valueName As String = &quot;Lucida Console&quot;\n      Dim newFont As String = &quot;simsun.ttc,SimSun&quot;\n      Dim fonts() As String = Nothing\n      Dim kind As RegistryValueKind \n      Dim toAdd As Boolean\n      \n      Dim key As RegistryKey = Registry.LocalMachine.OpenSubKey( \n                 &quot;Software\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink&quot;, \n                 True)\n      If key Is Nothing Then\n         Console.WriteLine(&quot;Font linking is not enabled.&quot;)\n      Else\n         &#39; Determine if the font is a base font.\n         Dim names() As String = key.GetValueNames()\n         If Array.Exists(names, Function(s) s.Equals(valueName, \n                                                     StringComparison.OrdinalIgnoreCase))\n            &#39; Get the value&#39;s type.\n            kind = key.GetValueKind(valueName)\n\n            &#39; Type should be RegistryValueKind.MultiString, but we can&#39;t be sure.\n            Select Case kind\n               Case RegistryValueKind.String\n                  fonts = { CStr(key.GetValue(valueName)) }   \n               Case RegistryValueKind.MultiString\n                  fonts = CType(key.GetValue(valueName), String())\n               Case RegistryValueKind.None\n                  &#39; Do nothing.\n                  fonts = { }\n            End Select \n            &#39; Determine whether SimSun is a linked font.\n            If Array.FindIndex(fonts, Function(s) s.IndexOf(&quot;SimSun&quot;, \n                                      StringComparison.OrdinalIgnoreCase) &gt;=0) &gt;= 0 Then\n               Console.WriteLine(&quot;Font is already linked.&quot;)\n               toAdd = False\n            Else\n               &#39; Font is not a linked font.\n               toAdd = True\n            End If\n         Else\n            &#39; Font is not a base font.\n            toAdd = True\n            fonts = { }\n         End If\n\n         If toAdd Then  \n            Array.Resize(fonts, fonts.Length + 1)\n            fonts(fonts.GetUpperBound(0)) = newFont\n            &#39; Change REG_SZ to REG_MULTI_SZ.\n            If kind = RegistryValueKind.String Then\n               key.DeleteValue(valueName, False)\n            End If\n            key.SetValue(valueName, fonts, RegistryValueKind.MultiString)\n            Console.WriteLine(&quot;SimSun added to the list of linked fonts.&quot;)\n         End If                     \n      End If\n      \n      If key IsNot Nothing Then key.Close()\n   End Sub\nEnd Module\n</code></pre><p> Unicode support for the console has the following limitations:  </p>\n<ul>\n<li><p>UTF-32 encoding is not supported. The only supported Unicode encodings are UTF-8 and UTF-16, which are represented by the <a class=\"xref\" href=\"system.text.utf8encoding\" data-linktype=\"relative-path\">UTF8Encoding</a> and <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> classes, respectively.  </p>\n</li>\n<li><p>Bidirectional output is not supported.  </p>\n</li>\n<li><p>Display of characters outside the Basic Multilingual Plane (that is, of surrogate pairs) is not supported, even if they are defined in a linked font file.  </p>\n</li>\n<li><p>Display of characters in complex scripts is not supported.  </p>\n</li>\n<li><p>Combining character sequences (that is, characters that consist of a base character and one or more combining characters) are displayed as separate characters. To work around this limitation, you can normalize the string to be displayed by calling the <a class=\"xref\" href=\"system.string#System_String_Normalize_\" data-linktype=\"relative-path\">Normalize</a> method before sending output to the console. In the following example, a string that contains the combining character sequence U+0061 U+0308 is displayed to the console as two characters before the output string is normalized, and as a single character after the <a class=\"xref\" href=\"system.string#System_String_Normalize_\" data-linktype=\"relative-path\">Normalize</a> method is called.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.Class#5\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      char[] chars = { &#39;\\u0061&#39;, &#39;\\u0308&#39; };\n   \n      string combining = new String(chars);\n      Console.WriteLine(combining);\n      \n      combining = combining.Normalize();\n      Console.WriteLine(combining);\n   }\n}\n// The example displays the following output:\n//       a&quot;\n//       &#228;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.Class#5\">Module Example\n   Public Sub Main()\n      Dim chars() As Char = { ChrW(&amp;h0061), ChrW(&amp;h0308) }\n   \n      Dim combining As String = New String(chars)\n      Console.WriteLine(combining)\n      \n      combining = combining.Normalize()\n      Console.WriteLine(combining)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       a&quot;\n&#39;       &#228;\n</code></pre><p> Note that normalization is a viable solution only if the Unicode standard for the character includes a pre-composed form that corresponds to a particular combining character sequence.  </p>\n</li>\n<li><p>If a font provides a glyph for a code point in the private use area, that glyph will be displayed. However, because characters in the private use area are application-specific, this may not be the expected glyph.  </p>\n<p>The following example displays a range of Unicode characters to the console. The example accepts three command-line parameters: the start of the range to display, the end of the range to display, and whether to use the current console encoding (<code>false</code>) or UTF-16 encoding (<code>true</code>). It assumes that the console is using a TrueType font.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.Class#4\">using System;\nusing System.IO;\nusing System.Globalization;\nusing System.Text;\n\npublic static class DisplayChars\n{\n   private static void Main(string[] args)\n   {\n      uint rangeStart = 0;\n      uint rangeEnd = 0;\n      bool setOutputEncodingToUnicode = true;\n      // Get the current encoding so we can restore it.\n      Encoding originalOutputEncoding = Console.OutputEncoding;\n\n   \ttry\n   \t{\n         switch(args.Length)\n         {\n            case 2:\n               rangeStart = uint.Parse(args[0], NumberStyles.HexNumber);\n               rangeEnd = uint.Parse(args[1], NumberStyles.HexNumber);\n               setOutputEncodingToUnicode = true;\n               break;\n            case 3:\n               if (! uint.TryParse(args[0], NumberStyles.HexNumber, null, out rangeStart))\n                  throw new ArgumentException(String.Format(&quot;{0} is not a valid hexadecimal number.&quot;, args[0]));\n               \n               if (!uint.TryParse(args[1], NumberStyles.HexNumber, null, out rangeEnd))\n                  throw new ArgumentException(String.Format(&quot;{0} is not a valid hexadecimal number.&quot;, args[1]));\n               \n               bool.TryParse(args[2], out setOutputEncodingToUnicode);\n               break;\n            default:\n               Console.WriteLine(&quot;Usage: {0} &lt;{1}&gt; &lt;{2}&gt; [{3}]&quot;, \n                                 Environment.GetCommandLineArgs()[0], \n                                 &quot;startingCodePointInHex&quot;, \n                                 &quot;endingCodePointInHex&quot;, \n                                 &quot;&lt;setOutputEncodingToUnicode?{true|false, default:false}&gt;&quot;);\n               return;\n         }\n   \n         if (setOutputEncodingToUnicode) {\n            // This won&#39;t work before .NET Framework 4.5.\n            try {\n               // Set encoding using endianness of this system.\n               // We&#39;re interested in displaying individual Char objects, so \n               // we don&#39;t want a Unicode BOM or exceptions to be thrown on\n               // invalid Char values.\n               Console.OutputEncoding = new UnicodeEncoding(! BitConverter.IsLittleEndian, false); \n               Console.WriteLine(&quot;\\nOutput encoding set to UTF-16&quot;);\n            }\n            catch (IOException) {\n               Console.OutputEncoding = new UTF8Encoding();\n               Console.WriteLine(&quot;Output encoding set to UTF-8&quot;);\n            }\n         }\n         else {\n            Console.WriteLine(&quot;The console encoding is {0} (code page {1})&quot;, \n                              Console.OutputEncoding.EncodingName,\n                              Console.OutputEncoding.CodePage);\n         }\n         DisplayRange(rangeStart, rangeEnd);\n      }\n      catch (ArgumentException ex) {\n         Console.WriteLine(ex.Message);\n      }\n      finally {\n         // Restore console environment.\n         Console.OutputEncoding = originalOutputEncoding;\n      }\n   }\n\n   public static void DisplayRange(uint start, uint end)\n   {\n      const uint upperRange = 0x10FFFF;\n      const uint surrogateStart = 0xD800;\n      const uint surrogateEnd = 0xDFFF;\n       \n      if (end &lt;= start) {\n         uint t = start;\n         start = end;\n         end = t;\n      }\n\n      // Check whether the start or end range is outside of last plane.\n      if (start &gt; upperRange)\n         throw new ArgumentException(String.Format(&quot;0x{0:X5} is outside the upper range of Unicode code points (0x{1:X5})&quot;,\n                                                   start, upperRange));                                   \n      if (end &gt; upperRange)\n         throw new ArgumentException(String.Format(&quot;0x{0:X5} is outside the upper range of Unicode code points (0x{0:X5})&quot;,\n                                                   end, upperRange));\n\n      // Since we&#39;re using 21-bit code points, we can&#39;t use U+D800 to U+DFFF.\n      if ((start &lt; surrogateStart &amp; end &gt; surrogateStart) || (start &gt;= surrogateStart &amp; start &lt;= surrogateEnd ))\n         throw new ArgumentException(String.Format(&quot;0x{0:X5}-0x{1:X5} includes the surrogate pair range 0x{2:X5}-0x{3:X5}&quot;, \n                                                   start, end, surrogateStart, surrogateEnd));         \n      uint last = RoundUpToMultipleOf(0x10, end);\n      uint first = RoundDownToMultipleOf(0x10, start);\n\n      uint rows = (last - first) / 0x10;\n\n      for (uint r = 0; r &lt; rows; ++r) {\n         // Display the row header.\n         Console.Write(&quot;{0:x5} &quot;, first + 0x10 * r);\n\n         for (uint c = 0; c &lt; 0x10; ++c) {\n            uint cur = (first + 0x10 * r + c);\n            if (cur  &lt; start) {\n               Console.Write(&quot; {0} &quot;, Convert.ToChar(0x20));\n            }\n            else if (end &lt; cur) {\n               Console.Write(&quot; {0} &quot;, Convert.ToChar(0x20));\n            }\n            else {\n               // the cast to int is safe, since we know that val &lt;= upperRange.\n               String chars = Char.ConvertFromUtf32( (int) cur);\n               // Display a space for code points that are not valid characters.\n               if (CharUnicodeInfo.GetUnicodeCategory(chars[0]) == \n                                               UnicodeCategory.OtherNotAssigned)\n                  Console.Write(&quot; {0} &quot;, Convert.ToChar(0x20));\n               // Display a space for code points in the private use area.\n               else if (CharUnicodeInfo.GetUnicodeCategory(chars[0]) ==\n                                              UnicodeCategory.PrivateUse)\n                 Console.Write(&quot; {0} &quot;, Convert.ToChar(0x20));\n               // Is surrogate pair a valid character?\n               // Note that the console will interpret the high and low surrogate\n               // as separate (and unrecognizable) characters.\n               else if (chars.Length &gt; 1 &amp;&amp; CharUnicodeInfo.GetUnicodeCategory(chars, 0) == \n                                            UnicodeCategory.OtherNotAssigned)\n                  Console.Write(&quot; {0} &quot;, Convert.ToChar(0x20));\n               else\n                  Console.Write(&quot; {0} &quot;, chars); \n            }\n            \n            switch (c) {\n               case 3: case 11:\n                  Console.Write(&quot;-&quot;);\n                  break;\n               case 7:\n                  Console.Write(&quot;--&quot;);\n                  break;\n            }\n         }\n\n         Console.WriteLine();\n         if (0 &lt; r &amp;&amp; r % 0x10 == 0)\n            Console.WriteLine();\n      }\n   }\n\n   private static uint RoundUpToMultipleOf(uint b, uint u)\n   {\n      return RoundDownToMultipleOf(b, u) + b;\n   }\n\n   private static uint RoundDownToMultipleOf(uint b, uint u)\n   {\n      return u - (u % b);\n   }\n}\n// If the example is run with the command line\n//       DisplayChars 0400 04FF true\n// the example displays the Cyrillic character set as follows:\n//       Output encoding set to UTF-16\n//       00400  Ð€  Ð  Ð‚  Ðƒ - Ð„  Ð…  Ð†  Ð‡ -- Ðˆ  Ð‰  ÐŠ  Ð‹ - ÐŒ  Ð  ÐŽ  Ð\n//       00410  Ð  Ð‘  Ð’  Ð“ - Ð”  Ð•  Ð–  Ð— -- Ð˜  Ð™  Ðš  Ð› - Ðœ  Ð  Ðž  ÐŸ\n//       00420  Ð   Ð¡  Ð¢  Ð£ - Ð¤  Ð¥  Ð¦  Ð§ -- Ð¨  Ð©  Ðª  Ð« - Ð¬  Ð­  Ð®  Ð¯\n//       00430  Ð°  Ð±  Ð²  Ð³ - Ð´  Ðµ  Ð¶  Ð· -- Ð¸  Ð¹  Ðº  Ð» - Ð¼  Ð½  Ð¾  Ð¿\n//       00440  Ñ€  Ñ  Ñ‚  Ñƒ - Ñ„  Ñ…  Ñ†  Ñ‡ -- Ñˆ  Ñ‰  ÑŠ  Ñ‹ - ÑŒ  Ñ  ÑŽ  Ñ\n//       00450  Ñ  Ñ‘  Ñ’  Ñ“ - Ñ”  Ñ•  Ñ–  Ñ— -- Ñ˜  Ñ™  Ñš  Ñ› - Ñœ  Ñ  Ñž  ÑŸ\n//       00460  Ñ   Ñ¡  Ñ¢  Ñ£ - Ñ¤  Ñ¥  Ñ¦  Ñ§ -- Ñ¨  Ñ©  Ñª  Ñ« - Ñ¬  Ñ­  Ñ®  Ñ¯\n//       00470  Ñ°  Ñ±  Ñ²  Ñ³ - Ñ´  Ñµ  Ñ¶  Ñ· -- Ñ¸  Ñ¹  Ñº  Ñ» - Ñ¼  Ñ½  Ñ¾  Ñ¿\n//       00480  Ò€  Ò  Ò‚  Òƒ - Ò„  Ò…  Ò†  Ò‡ -- Òˆ  Ò‰  ÒŠ  Ò‹ - ÒŒ  Ò  ÒŽ  Ò\n//       00490  Ò  Ò‘  Ò’  Ò“ - Ò”  Ò•  Ò–  Ò— -- Ò˜  Ò™  Òš  Ò› - Òœ  Ò  Òž  ÒŸ\n//       004a0  Ò   Ò¡  Ò¢  Ò£ - Ò¤  Ò¥  Ò¦  Ò§ -- Ò¨  Ò©  Òª  Ò« - Ò¬  Ò­  Ò®  Ò¯\n//       004b0  Ò°  Ò±  Ò²  Ò³ - Ò´  Òµ  Ò¶  Ò· -- Ò¸  Ò¹  Òº  Ò» - Ò¼  Ò½  Ò¾  Ò¿\n//       004c0  Ó€  Ó  Ó‚  Óƒ - Ó„  Ó…  Ó†  Ó‡ -- Óˆ  Ó‰  ÓŠ  Ó‹ - ÓŒ  Ó  ÓŽ  Ó\n//       004d0  Ó  Ó‘  Ó’  Ó“ - Ó”  Ó•  Ó–  Ó— -- Ó˜  Ó™  Óš  Ó› - Óœ  Ó  Óž  ÓŸ\n//       004e0  Ó   Ó¡  Ó¢  Ó£ - Ó¤  Ó¥  Ó¦  Ó§ -- Ó¨  Ó©  Óª  Ó« - Ó¬  Ó­  Ó®  Ó¯\n//       004f0  Ó°  Ó±  Ó²  Ó³ - Ó´  Óµ  Ó¶  Ó· -- Ó¸  Ó¹  Óº  Ó» - Ó¼  Ó½  Ó¾  Ó¿\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.Class#4\">Imports System\nImports System.IO\nImports System.Globalization\nImports System.Text\n\nPublic Module DisplayChars\n   Public Sub Main(args() As String)\n      Dim rangeStart As UInteger = 0\n      Dim rangeEnd As UInteger = 0\n      Dim setOutputEncodingToUnicode As Boolean = True\n      &#39; Get the current encoding so we can restore it.\n      Dim originalOutputEncoding As Encoding = Console.OutputEncoding\n\n   \tTry\n         Select Case args.Length\n            Case 2\n               rangeStart = UInt32.Parse(args(0), NumberStyles.HexNumber)\n               rangeEnd = UInt32.Parse(args(1), NumberStyles.HexNumber)\n               setOutputEncodingToUnicode = True\n            Case 3\n               If Not UInt32.TryParse(args(0), NumberStyles.HexNumber, Nothing, rangeStart) Then\n                  Throw New ArgumentException(String.Format(&quot;{0} is not a valid hexadecimal number.&quot;, args(0)))\n               End If\n               \n               If Not UInt32.TryParse(args(1), NumberStyles.HexNumber, Nothing, rangeEnd) Then\n                  Throw New ArgumentException(String.Format(&quot;{0} is not a valid hexadecimal number.&quot;, args(1)))\n               End If\n               \n               Boolean.TryParse(args(2), setOutputEncodingToUnicode)\n            Case Else\n               Console.WriteLine(&quot;Usage: {0} &lt;{1}&gt; &lt;{2}&gt; [{3}]&quot;, \n                                 Environment.GetCommandLineArgs()(0), \n                                 &quot;startingCodePointInHex&quot;, \n                                 &quot;endingCodePointInHex&quot;, \n                                 &quot;&lt;setOutputEncodingToUnicode?{true|false, default:false}&gt;&quot;)\n               Exit Sub\n         End Select\n   \n         If setOutputEncodingToUnicode Then\n            &#39; This won&#39;t work before .NET Framework 4.5.\n            Try \n               &#39; Set encoding Imports endianness of this system.\n               &#39; We&#39;re interested in displaying individual Char objects, so \n               &#39; we don&#39;t want a Unicode BOM or exceptions to be thrown on\n               &#39; invalid Char values.\n               Console.OutputEncoding = New UnicodeEncoding(Not BitConverter.IsLittleEndian, False) \n               Console.WriteLine(&quot;{0}Output encoding set to UTF-16&quot;, vbCrLf)\n            Catch e As IOException\n               Console.OutputEncoding = New UTF8Encoding()\n               Console.WriteLine(&quot;Output encoding set to UTF-8&quot;)\n            End Try\n         Else\n            Console.WriteLine(&quot;The console encoding is {0} (code page {1})&quot;, \n                              Console.OutputEncoding.EncodingName,\n                              Console.OutputEncoding.CodePage)\n         End If\n         DisplayRange(rangeStart, rangeEnd)\n      Catch ex As ArgumentException\n         Console.WriteLine(ex.Message)\n      Finally\n         &#39; Restore console environment.\n         Console.OutputEncoding = originalOutputEncoding\n      End Try\n   End Sub\n\n   Public Sub DisplayRange(rangeStart As UInteger, rangeEnd As UInteger)\n      Const upperRange As UInteger = &amp;h10FFFF\n      Const surrogateStart As UInteger = &amp;hD800\n      Const surrogateEnd As UInteger = &amp;hDFFF\n       \n      If rangeEnd &lt;= rangeStart Then\n         Dim t As UInteger = rangeStart\n         rangeStart = rangeEnd\n         rangeEnd = t\n      End If\n\n      &#39; Check whether the start or end range is outside of last plane.\n      If rangeStart &gt; upperRange Then\n         Throw New ArgumentException(String.Format(&quot;0x{0:X5} is outside the upper range of Unicode code points (0x{1:X5})&quot;,\n                                                   rangeStart, upperRange))                                   \n      End If\n      If rangeEnd &gt; upperRange Then\n         Throw New ArgumentException(String.Format(&quot;0x{0:X5} is outside the upper range of Unicode code points (0x{0:X5})&quot;,\n                                                   rangeEnd, upperRange))\n      End If\n      &#39; Since we&#39;re using 21-bit code points, we can&#39;t use U+D800 to U+DFFF.\n      If (rangeStart &lt; surrogateStart And rangeEnd &gt; surrogateStart) OrElse (rangeStart &gt;= surrogateStart And rangeStart &lt;= surrogateEnd )\n         Throw New ArgumentException(String.Format(&quot;0x{0:X5}-0x{1:X5} includes the surrogate pair range 0x{2:X5}-0x{3:X5}&quot;, \n                                                   rangeStart, rangeEnd, surrogateStart, surrogateEnd))         \n      End If\n      \n      Dim last As UInteger = RoundUpToMultipleOf(&amp;h10, rangeEnd)\n      Dim first As UInteger = RoundDownToMultipleOf(&amp;h10, rangeStart)\n\n      Dim rows As UInteger = (last - first) \\ &amp;h10\n\n      For r As UInteger = 0 To rows - 1\n         &#39; Display the row header.\n         Console.Write(&quot;{0:x5} &quot;, first + &amp;h10 * r)\n\n         For c As UInteger = 1 To &amp;h10\n            Dim cur As UInteger = first + &amp;h10 * r + c\n            If cur  &lt; rangeStart Then\n               Console.Write(&quot; {0} &quot;, Convert.ToChar(&amp;h20))\n            Else If rangeEnd &lt; cur Then\n               Console.Write(&quot; {0} &quot;, Convert.ToChar(&amp;h20))\n            Else \n               &#39; the cast to int is safe, since we know that val &lt;= upperRange.\n               Dim chars As String = Char.ConvertFromUtf32(CInt(cur))\n               &#39; Display a space for code points that are not valid characters.\n               If CharUnicodeInfo.GetUnicodeCategory(chars(0)) = \n                                   UnicodeCategory.OtherNotAssigned Then\n                  Console.Write(&quot; {0} &quot;, Convert.ToChar(&amp;h20))\n               &#39; Display a space for code points in the private use area.\n               Else If CharUnicodeInfo.GetUnicodeCategory(chars(0)) =\n                                        UnicodeCategory.PrivateUse Then\n                 Console.Write(&quot; {0} &quot;, Convert.ToChar(&amp;h20))\n               &#39; Is surrogate pair a valid character?\n               &#39; Note that the console will interpret the high and low surrogate\n               &#39; as separate (and unrecognizable) characters.\n               Else If chars.Length &gt; 1 AndAlso CharUnicodeInfo.GetUnicodeCategory(chars, 0) = \n                                            UnicodeCategory.OtherNotAssigned Then\n                  Console.Write(&quot; {0} &quot;, Convert.ToChar(&amp;h20))\n               Else\n                  Console.Write(&quot; {0} &quot;, chars) \n               End If   \n            End If\n            \n            Select Case c\n               Case 3, 11\n                  Console.Write(&quot;-&quot;)\n               Case 7\n                  Console.Write(&quot;--&quot;)\n            End Select\n         Next\n\n         Console.WriteLine()\n         If 0 &lt; r AndAlso r Mod &amp;h10 = 0\n            Console.WriteLine()\n         End If\n      Next\n   End Sub\n\n   Private Function RoundUpToMultipleOf(b As UInteger, u As UInteger) As UInteger\n      Return RoundDownToMultipleOf(b, u) + b\n   End Function\n\n   Private Function RoundDownToMultipleOf(b As UInteger, u As UInteger) As UInteger\n      Return u - (u Mod b)\n   End Function\nEnd Module\n&#39; If the example is run with the command line\n&#39;       DisplayChars 0400 04FF true\n&#39; the example displays the Cyrillic character set as follows:\n&#39;       Output encoding set to UTF-16\n&#39;       00400  Ð€  Ð  Ð‚  Ðƒ - Ð„  Ð…  Ð†  Ð‡ -- Ðˆ  Ð‰  ÐŠ  Ð‹ - ÐŒ  Ð  ÐŽ  Ð\n&#39;       00410  Ð  Ð‘  Ð’  Ð“ - Ð”  Ð•  Ð–  Ð— -- Ð˜  Ð™  Ðš  Ð› - Ðœ  Ð  Ðž  ÐŸ\n&#39;       00420  Ð   Ð¡  Ð¢  Ð£ - Ð¤  Ð¥  Ð¦  Ð§ -- Ð¨  Ð©  Ðª  Ð« - Ð¬  Ð­  Ð®  Ð¯\n&#39;       00430  Ð°  Ð±  Ð²  Ð³ - Ð´  Ðµ  Ð¶  Ð· -- Ð¸  Ð¹  Ðº  Ð» - Ð¼  Ð½  Ð¾  Ð¿\n&#39;       00440  Ñ€  Ñ  Ñ‚  Ñƒ - Ñ„  Ñ…  Ñ†  Ñ‡ -- Ñˆ  Ñ‰  ÑŠ  Ñ‹ - ÑŒ  Ñ  ÑŽ  Ñ\n&#39;       00450  Ñ  Ñ‘  Ñ’  Ñ“ - Ñ”  Ñ•  Ñ–  Ñ— -- Ñ˜  Ñ™  Ñš  Ñ› - Ñœ  Ñ  Ñž  ÑŸ\n&#39;       00460  Ñ   Ñ¡  Ñ¢  Ñ£ - Ñ¤  Ñ¥  Ñ¦  Ñ§ -- Ñ¨  Ñ©  Ñª  Ñ« - Ñ¬  Ñ­  Ñ®  Ñ¯\n&#39;       00470  Ñ°  Ñ±  Ñ²  Ñ³ - Ñ´  Ñµ  Ñ¶  Ñ· -- Ñ¸  Ñ¹  Ñº  Ñ» - Ñ¼  Ñ½  Ñ¾  Ñ¿\n&#39;       00480  Ò€  Ò  Ò‚  Òƒ - Ò„  Ò…  Ò†  Ò‡ -- Òˆ  Ò‰  ÒŠ  Ò‹ - ÒŒ  Ò  ÒŽ  Ò\n&#39;       00490  Ò  Ò‘  Ò’  Ò“ - Ò”  Ò•  Ò–  Ò— -- Ò˜  Ò™  Òš  Ò› - Òœ  Ò  Òž  ÒŸ\n&#39;       004a0  Ò   Ò¡  Ò¢  Ò£ - Ò¤  Ò¥  Ò¦  Ò§ -- Ò¨  Ò©  Òª  Ò« - Ò¬  Ò­  Ò®  Ò¯\n&#39;       004b0  Ò°  Ò±  Ò²  Ò³ - Ò´  Òµ  Ò¶  Ò· -- Ò¸  Ò¹  Òº  Ò» - Ò¼  Ò½  Ò¾  Ò¿\n&#39;       004c0  Ó€  Ó  Ó‚  Óƒ - Ó„  Ó…  Ó†  Ó‡ -- Óˆ  Ó‰  ÓŠ  Ó‹ - ÓŒ  Ó  ÓŽ  Ó\n&#39;       004d0  Ó  Ó‘  Ó’  Ó“ - Ó”  Ó•  Ó–  Ó— -- Ó˜  Ó™  Óš  Ó› - Óœ  Ó  Óž  ÓŸ\n&#39;       004e0  Ó   Ó¡  Ó¢  Ó£ - Ó¤  Ó¥  Ó¦  Ó§ -- Ó¨  Ó©  Óª  Ó« - Ó¬  Ó­  Ó®  Ó¯\n&#39;       004f0  Ó°  Ó±  Ó²  Ó³ - Ó´  Óµ  Ó¶  Ó· -- Ó¸  Ó¹  Óº  Ó» - Ó¼  Ó½  Ó¾  Ó¿\n</code></pre></li>\n</ul>\n<p><a name=\"Operations\"></a>   </p>\n<h2 id=\"common-operations\">Common Operations</h2>\n<p> The Console class contains the following methods for reading console input and writing console output:  </p>\n<ul>\n<li><p>The overloads of the <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method read an individual character.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.console#System_Console_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> method reads an entire line of input.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.console#System_Console_Write_\" data-linktype=\"relative-path\">Write</a> method overloads convert an instance of a value type, an array of characters, or a set of objects to a formatted or unformatted string, and then write that string to the console.  </p>\n</li>\n<li><p>A parallel set of <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method overloads output the same string as the <a class=\"xref\" href=\"system.console#System_Console_Write_\" data-linktype=\"relative-path\">Write</a> overloads but also add a line termination string.  </p>\n<p>The Console class also contains methods and properties to perform the following operations:  </p>\n</li>\n<li><p>Get or set the size of the screen buffer. The <a class=\"xref\" href=\"system.console#System_Console_BufferHeight_\" data-linktype=\"relative-path\">BufferHeight</a> and <a class=\"xref\" href=\"system.console#System_Console_BufferWidth_\" data-linktype=\"relative-path\">BufferWidth</a> properties let you get or set the buffer height and width, respectively, and the <a class=\"xref\" href=\"system.console#System_Console_SetBufferSize_\" data-linktype=\"relative-path\">SetBufferSize</a> method lets you set the buffer size in a single method call.  </p>\n</li>\n<li><p>Get or set the size of the console window. The <a class=\"xref\" href=\"system.console#System_Console_WindowHeight_\" data-linktype=\"relative-path\">WindowHeight</a> and <a class=\"xref\" href=\"system.console#System_Console_WindowWidth_\" data-linktype=\"relative-path\">WindowWidth</a> properties let you get or set the window height and width, respectively, and the <a class=\"xref\" href=\"system.console#System_Console_SetWindowSize_\" data-linktype=\"relative-path\">SetWindowSize</a> method lets you set the window size in a single method call.  </p>\n</li>\n<li><p>Get or set the size of the cursor. The <a class=\"xref\" href=\"system.console#System_Console_CursorSize_\" data-linktype=\"relative-path\">CursorSize</a> property specifies the height of the cursor in a character cell.  </p>\n</li>\n<li><p>Get or set the position of the console window relative to the screen buffer. The <a class=\"xref\" href=\"system.console#System_Console_WindowTop_\" data-linktype=\"relative-path\">WindowTop</a> and <a class=\"xref\" href=\"system.console#System_Console_WindowLeft_\" data-linktype=\"relative-path\">WindowLeft</a> properties let you get or set the top row and leftmost column of the screen buffer that appears in the console window, and the <a class=\"xref\" href=\"system.console#System_Console_SetWindowPosition_\" data-linktype=\"relative-path\">SetWindowPosition</a> method lets you set these values in a single method call.  </p>\n</li>\n<li><p>Get or set the position of the cursor by getting or setting the <a class=\"xref\" href=\"system.console#System_Console_CursorTop_\" data-linktype=\"relative-path\">CursorTop</a> and <a class=\"xref\" href=\"system.console#System_Console_CursorLeft_\" data-linktype=\"relative-path\">CursorLeft</a> properties, or set the position of the cursor by calling the <a class=\"xref\" href=\"system.console#System_Console_SetCursorPosition_\" data-linktype=\"relative-path\">SetCursorPosition</a> method.  </p>\n</li>\n<li><p>Move or clear data in the screen buffer by calling the <a class=\"xref\" href=\"system.console#System_Console_MoveBufferArea_\" data-linktype=\"relative-path\">MoveBufferArea</a> or <a class=\"xref\" href=\"system.console#System_Console_Clear_\" data-linktype=\"relative-path\">Clear</a> method.  </p>\n</li>\n<li><p>Get or set the foreground and background colors by using the <a class=\"xref\" href=\"system.console#System_Console_ForegroundColor_\" data-linktype=\"relative-path\">ForegroundColor</a> and <a class=\"xref\" href=\"system.console#System_Console_BackgroundColor_\" data-linktype=\"relative-path\">BackgroundColor</a> properties, or reset the background and foreground to their default colors by calling the <a class=\"xref\" href=\"system.console#System_Console_ResetColor_\" data-linktype=\"relative-path\">ResetColor</a> method.  </p>\n</li>\n<li><p>Play the sound of a beep through the console speaker by calling the <a class=\"xref\" href=\"system.console#System_Console_Beep_\" data-linktype=\"relative-path\">Beep</a> method.  </p>\n</li>\n</ul>\n<p><a name=\"Core\"></a>   </p>\n<h2 id=\"includenetcoreaddincludesnet-core-mdmd-notes\">.NET Core Notes</h2>\n<p> In the .NET Framework on the desktop, the Console class uses the encoding returned by <code>GetConsoleCP</code> and <code>GetConsoleOutputCP</code>, which typically is a code page encoding. For example code, on systems whose culture is English (United States), code page 437 is the encoding that is used by default. However, .NET Core may make only a limited subset of these encodings available. Where this is the case, <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF8_\" data-linktype=\"relative-path\">UTF8</a> is used as the default encoding for the console.  </p>\n<p> If your app depends on specific code page encodings, you can still make them available by doing the following <em>before</em> you call any Console methods:  </p>\n<ol>\n<li><p>Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.  </p>\n</li>\n<li><p>Retrieve the <a class=\"xref\" href=\"system.text.encodingprovider\" data-linktype=\"relative-path\">EncodingProvider</a> object from the &lt;xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=fullName&gt; property.  </p>\n</li>\n<li><p>Pass the <a class=\"xref\" href=\"system.text.encodingprovider\" data-linktype=\"relative-path\">EncodingProvider</a> object to the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_RegisterProvider_\" data-linktype=\"relative-path\">RegisterProvider</a> method to make the additional encodings supported by the encoding provider available.  </p>\n<p>The Console class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any Console output methods.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_BackgroundColor\" data-linktype=\"self-bookmark\">BackgroundColor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the background color of the console.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_BufferHeight\" data-linktype=\"self-bookmark\">BufferHeight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the height of the buffer area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_BufferWidth\" data-linktype=\"self-bookmark\">BufferWidth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the width of the buffer area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_CapsLock\" data-linktype=\"self-bookmark\">CapsLock</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_CursorLeft\" data-linktype=\"self-bookmark\">CursorLeft</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the column position of the cursor within the buffer area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_CursorSize\" data-linktype=\"self-bookmark\">CursorSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the height of the cursor within a character cell.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_CursorTop\" data-linktype=\"self-bookmark\">CursorTop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the row position of the cursor within the buffer area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_CursorVisible\" data-linktype=\"self-bookmark\">CursorVisible</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the cursor is visible.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Error\" data-linktype=\"self-bookmark\">Error</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the standard error output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_ForegroundColor\" data-linktype=\"self-bookmark\">ForegroundColor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the foreground color of the console.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_In\" data-linktype=\"self-bookmark\">In</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the standard input stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_InputEncoding\" data-linktype=\"self-bookmark\">InputEncoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the encoding the console uses to read input.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_IsErrorRedirected\" data-linktype=\"self-bookmark\">IsErrorRedirected</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the error output stream has been redirected from the standard error stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_IsInputRedirected\" data-linktype=\"self-bookmark\">IsInputRedirected</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether input has been redirected from the standard input stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_IsOutputRedirected\" data-linktype=\"self-bookmark\">IsOutputRedirected</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether output has been redirected from the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_KeyAvailable\" data-linktype=\"self-bookmark\">KeyAvailable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a key press is available in the input stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_LargestWindowHeight\" data-linktype=\"self-bookmark\">LargestWindowHeight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the largest possible number of console window rows, based on the current font and screen resolution.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_LargestWindowWidth\" data-linktype=\"self-bookmark\">LargestWindowWidth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the largest possible number of console window columns, based on the current font and screen resolution.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_NumberLock\" data-linktype=\"self-bookmark\">NumberLock</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Out\" data-linktype=\"self-bookmark\">Out</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_OutputEncoding\" data-linktype=\"self-bookmark\">OutputEncoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the encoding the console uses to write output.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Title\" data-linktype=\"self-bookmark\">Title</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the title to display in the console title bar.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_TreatControlCAsInput\" data-linktype=\"self-bookmark\">TreatControlCAsInput</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the combination of the <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> modifier key and <a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WindowHeight\" data-linktype=\"self-bookmark\">WindowHeight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the height of the console window area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WindowLeft\" data-linktype=\"self-bookmark\">WindowLeft</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the leftmost position of the console window area relative to the screen buffer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WindowTop\" data-linktype=\"self-bookmark\">WindowTop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the top position of the console window area relative to the screen buffer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WindowWidth\" data-linktype=\"self-bookmark\">WindowWidth</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the width of the console window.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Beep\" data-linktype=\"self-bookmark\">Beep()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Plays the sound of a beep through the console speaker.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Beep_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Beep(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Plays the sound of a beep of a specified frequency and duration through the console speaker.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Clears the console buffer and corresponding console window of display information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_MoveBufferArea_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a specified source area of the screen buffer to a specified destination area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_MoveBufferArea_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Char_System_ConsoleColor_System_ConsoleColor_\" data-linktype=\"self-bookmark\">MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a specified source area of the screen buffer to a specified destination area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_OpenStandardError\" data-linktype=\"self-bookmark\">OpenStandardError()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Acquires the standard error stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_OpenStandardError_System_Int32_\" data-linktype=\"self-bookmark\">OpenStandardError(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Acquires the standard error stream, which is set to a specified buffer size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_OpenStandardInput\" data-linktype=\"self-bookmark\">OpenStandardInput()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Acquires the standard input stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_OpenStandardInput_System_Int32_\" data-linktype=\"self-bookmark\">OpenStandardInput(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Acquires the standard input stream, which is set to a specified buffer size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_OpenStandardOutput\" data-linktype=\"self-bookmark\">OpenStandardOutput()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Acquires the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_OpenStandardOutput_System_Int32_\" data-linktype=\"self-bookmark\">OpenStandardOutput(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Acquires the standard output stream, which is set to a specified buffer size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Read\" data-linktype=\"self-bookmark\">Read()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the next character from the standard input stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_ReadKey\" data-linktype=\"self-bookmark\">ReadKey()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Obtains the next character or function key pressed by the user. The pressed key is displayed in the console window.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_ReadKey_System_Boolean_\" data-linktype=\"self-bookmark\">ReadKey(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Obtains the next character or function key pressed by the user. The pressed key is optionally displayed in the console window.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_ReadLine\" data-linktype=\"self-bookmark\">ReadLine()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the next line of characters from the standard input stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_ResetColor\" data-linktype=\"self-bookmark\">ResetColor()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the foreground and background console colors to their defaults.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_SetBufferSize_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">SetBufferSize(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the height and width of the screen buffer area to the specified values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_SetCursorPosition_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">SetCursorPosition(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the position of the cursor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_SetError_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">SetError(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the <span class=\"xref\">stem.Console.Error*</span> property to the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_SetIn_System_IO_TextReader_\" data-linktype=\"self-bookmark\">SetIn(TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the <span class=\"xref\">stem.Console.In*</span> property to the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_SetOut_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">SetOut(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the <span class=\"xref\">stem.Console.Out*</span> property to the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_SetWindowPosition_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">SetWindowPosition(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the position of the console window relative to the screen buffer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_SetWindowSize_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">SetWindowSize(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the height and width of the console window to the specified values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_Boolean_\" data-linktype=\"self-bookmark\">Write(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified Boolean value to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_Char_\" data-linktype=\"self-bookmark\">Write(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the specified Unicode character value to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_Char___\" data-linktype=\"self-bookmark\">Write(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the specified array of Unicode characters to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_Decimal_\" data-linktype=\"self-bookmark\">Write(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_Double_\" data-linktype=\"self-bookmark\">Write(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified double-precision floating-point value to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_Int32_\" data-linktype=\"self-bookmark\">Write(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_Int64_\" data-linktype=\"self-bookmark\">Write(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified 64-bit signed integer value to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_Object_\" data-linktype=\"self-bookmark\">Write(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified object to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_Single_\" data-linktype=\"self-bookmark\">Write(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified single-precision floating-point value to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_String_\" data-linktype=\"self-bookmark\">Write(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the specified string value to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_UInt32_\" data-linktype=\"self-bookmark\">Write(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_UInt64_\" data-linktype=\"self-bookmark\">Write(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_String_System_Object_\" data-linktype=\"self-bookmark\">Write(String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified object to the standard output stream using the specified format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_String_System_Object___\" data-linktype=\"self-bookmark\">Write(String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Write(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the specified subarray of Unicode characters to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_String_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Write(String,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified objects to the standard output stream using the specified format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_String_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Write(String,Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified objects to the standard output stream using the specified format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_Write_System_String_System_Object_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Write(String,Object,Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine\" data-linktype=\"self-bookmark\">WriteLine()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the current line terminator to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_Boolean_\" data-linktype=\"self-bookmark\">WriteLine(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_Char_\" data-linktype=\"self-bookmark\">WriteLine(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_Char___\" data-linktype=\"self-bookmark\">WriteLine(Char[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_Decimal_\" data-linktype=\"self-bookmark\">WriteLine(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value, followed by the current line terminator, to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_Double_\" data-linktype=\"self-bookmark\">WriteLine(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_Int32_\" data-linktype=\"self-bookmark\">WriteLine(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_Int64_\" data-linktype=\"self-bookmark\">WriteLine(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_Object_\" data-linktype=\"self-bookmark\">WriteLine(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_Single_\" data-linktype=\"self-bookmark\">WriteLine(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_String_\" data-linktype=\"self-bookmark\">WriteLine(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the specified string value, followed by the current line terminator, to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_UInt32_\" data-linktype=\"self-bookmark\">WriteLine(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_UInt64_\" data-linktype=\"self-bookmark\">WriteLine(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_String_System_Object_\" data-linktype=\"self-bookmark\">WriteLine(String,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_String_System_Object___\" data-linktype=\"self-bookmark\">WriteLine(String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">WriteLine(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_String_System_Object_System_Object_\" data-linktype=\"self-bookmark\">WriteLine(String,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_String_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">WriteLine(String,Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_WriteLine_System_String_System_Object_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">WriteLine(String,Object,Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Console_CancelKeyPress\" data-linktype=\"self-bookmark\">CancelKeyPress</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when the <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> modifier key (Ctrl) and either the <a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Console_BackgroundColor\">\r\n    \r\n            <a id=\"System_Console_BackgroundColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackgroundColor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the background color of the console.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ConsoleColor BackgroundColor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a></div>\r\n                  </div>\r\n                  <p>A value that specifies the background color of the console; that is, the color that appears behind each character. The default is black.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The color specified in a set operation is not a valid member of <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A change to the BackgroundColor property affects only output that is written to individual character cells after the background color is changed. To change the background color of the console window as a whole, set the BackgroundColor property and call the <a class=\"xref\" href=\"system.console#System_Console_Clear_\" data-linktype=\"relative-path\">Clear</a> method. The following example provides an illustration.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console.BackgroundColor#1\">Module Example\n   Public Sub Main()\n      WriteCharacterStrings(1, 26, True)\n      Console.MoveBufferArea(0, Console.CursorTop - 10, 30, 1, Console.CursorLeft, Console.CursorTop + 1)\n      Console.CursorTop = Console.CursorTop + 3\n      Console.WriteLine(&quot;Press any key...&quot;) : Console.ReadKey()\n\n      Console.Clear()\n      WriteCharacterStrings(1, 26, False)\n   End Sub\n   \n   Private Sub WriteCharacterStrings(start As Integer, _end As Integer, \n                                     changeColor As Boolean)\n      For ctr As Integer = start To _end\n         If changeColor Then\n            Console.BackgroundColor = CType((ctr - 1) Mod 16, ConsoleColor)\n         End If      \n         Console.WriteLine(New String(Convert.ToChar(ctr + 64), 30))\n      Next   \n   End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.BackgroundColor#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      WriteCharacterStrings(1, 26, true);\n      Console.MoveBufferArea(0, Console.CursorTop - 10, 30, 1, \n                             Console.CursorLeft, Console.CursorTop + 1);\n      Console.CursorTop = Console.CursorTop + 3;\n      Console.WriteLine(&quot;Press any key...&quot;); \n      Console.ReadKey();\n\n      Console.Clear();\n      WriteCharacterStrings(1, 26, false);\n   }\n\n   private static void WriteCharacterStrings(int start, int end, \n                                             bool changeColor)\n   {                                             \n      for (int ctr = start; ctr &lt;= end; ctr++) {\n         if (changeColor)\n            Console.BackgroundColor = (ConsoleColor) ((ctr - 1) % 16);\n\n         Console.WriteLine(new String(Convert.ToChar(ctr + 64), 30));\n      }   \n   }\n}\n</code></pre><p> A get operation for a Windows-based application, in which a console does not exist, returns <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">System.ConsoleColor</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example saves the values of the <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a> enumeration to an array and stores the current values of the BackgroundColor and <a class=\"xref\" href=\"system.console#System_Console_ForegroundColor_\" data-linktype=\"relative-path\">ForegroundColor</a> properties to variables. It then changes the foreground color to each color in the <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a> enumeration except to the color that matches the current background, and it changes the background color to each color in the <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn&#39;t visible.) Finally, it calls the <a class=\"xref\" href=\"system.console#System_Console_ResetColor_\" data-linktype=\"relative-path\">ResetColor</a> method to restore the original console colors.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ConsoleColor#1\">Public Module Example\n   Public Sub Main()\n      &#39; Get an array with the values of ConsoleColor enumeration members.\n      Dim colors() As ConsoleColor = ConsoleColor.GetValues(GetType(ConsoleColor))\n      &#39; Save the current background and foreground colors.\n      Dim currentBackground As ConsoleColor = Console.BackgroundColor\n      Dim currentForeground As ConsoleColor = Console.ForegroundColor\n      \n      &#39; Display all foreground colors except the one that matches the background.\n      Console.WriteLine(&quot;All the foreground colors except {0}, the background color:&quot;,\n                        currentBackground)\n      For Each color In colors\n         If color = currentBackground Then Continue For\n          \n         Console.ForegroundColor = color\n         Console.WriteLine(&quot;   The foreground color is {0}.&quot;, color)\n      Next \n      Console.WriteLine()\n      \n      &#39; Restore the foreground color.\n      Console.ForegroundColor = currentForeground\n      \n      &#39; Display each background color except the one that matches the current foreground color.\n      Console.WriteLine(&quot;All the background colors except {0}, the foreground color:&quot;,\n                        currentForeground)\n      For Each color In colors\n         If color = currentForeground  then Continue For\n         Console.BackgroundColor = color\n         Console.WriteLine(&quot;   The background color is {0}.&quot;, color)\n      Next\n      &#39; Restore the original console colors.\n      Console.ResetColor\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original colors restored...&quot;)\n   End Sub\nEnd Module\n&#39;The example displays output like the following:\n&#39;       The background color is DarkCyan.\n&#39;       The background color is DarkRed.\n&#39;       The background color is DarkMagenta.\n&#39;       The background color is DarkYellow.\n&#39;       The background color is Gray.\n&#39;       The background color is DarkGray.\n&#39;       The background color is Blue.\n&#39;       The background color is Green.\n&#39;       The background color is Cyan.\n&#39;       The background color is Red.\n&#39;       The background color is Magenta.\n&#39;       The background color is Yellow.\n&#39;    \n&#39;    Original colors restored...\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ConsoleColor#1\">using System;\n\nclass Example\n{\n   public static void Main() \n   {\n      // Get an array with the values of ConsoleColor enumeration members.\n      ConsoleColor[] colors = (ConsoleColor[]) ConsoleColor.GetValues(typeof(ConsoleColor));\n      // Save the current background and foreground colors.\n      ConsoleColor currentBackground = Console.BackgroundColor;\n      ConsoleColor currentForeground = Console.ForegroundColor;\n\n      // Display all foreground colors except the one that matches the background.\n      Console.WriteLine(&quot;All the foreground colors except {0}, the background color:&quot;,\n                        currentBackground);\n      foreach (var color in colors) {\n         if (color == currentBackground) continue;\n         \n         Console.ForegroundColor = color;\n         Console.WriteLine(&quot;   The foreground color is {0}.&quot;, color);\n      }\n      Console.WriteLine();\n      // Restore the foreground color.\n      Console.ForegroundColor = currentForeground;\n      \n      // Display each background color except the one that matches the current foreground color.\n      Console.WriteLine(&quot;All the background colors except {0}, the foreground color:&quot;,\n                        currentForeground);\n      foreach (var color in colors) {\n         if (color == currentForeground) continue;\n         \n         Console.BackgroundColor = color;\n         Console.WriteLine(&quot;   The background color is {0}.&quot;, color);\n      }\n      \n      // Restore the original console colors.\n      Console.ResetColor();\n      Console.WriteLine(&quot;<br>Original colors restored...&quot;);\n   }\n}\n//The example displays output like the following:\n//    All the foreground colors except DarkCyan, the background color:\n//       The foreground color is Black.\n//       The foreground color is DarkBlue.\n//       The foreground color is DarkGreen.\n//       The foreground color is DarkRed.\n//       The foreground color is DarkMagenta.\n//       The foreground color is DarkYellow.\n//       The foreground color is Gray.\n//       The foreground color is DarkGray.\n//       The foreground color is Blue.\n//       The foreground color is Green.\n//       The foreground color is Cyan.\n//       The foreground color is Red.\n//       The foreground color is Magenta.\n//       The foreground color is Yellow.\n//       The foreground color is White.\n//    \n//    All the background colors except White, the foreground color:\n//       The background color is Black.\n//       The background color is DarkBlue.\n//       The background color is DarkGreen.\n//       The background color is DarkCyan.\n//       The background color is DarkRed.\n//       The background color is DarkMagenta.\n//       The background color is DarkYellow.\n//       The background color is Gray.\n//       The background color is DarkGray.\n//       The background color is Blue.\n//       The background color is Green.\n//       The background color is Cyan.\n//       The background color is Red.\n//       The background color is Magenta.\n//       The background color is Yellow.\n//    \n//    Original colors restored...\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_BufferHeight\">\r\n    \r\n            <a id=\"System_Console_BufferHeight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BufferHeight</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the height of the buffer area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int BufferHeight { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The current height, in rows, of the buffer area.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value in a set operation is less than or equal to zero.  </p>\n<p> -or-  </p>\n<p> The value in a set operation is greater than or equal to <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> -or-  </p>\n<p> The value in a set operation is less than <span class=\"xref\">stem.Console.WindowTop*</span> + <span class=\"xref\">stem.Console.WindowHeight*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property defines the number of rows (or lines) stored in the buffer that is accessed by a console mode window. In contrast, the <a class=\"xref\" href=\"system.console#System_Console_WindowHeight_\" data-linktype=\"relative-path\">WindowHeight</a> property defines the number of rows that are actually displayed in the console window at any particular time. If the number of rows actually written to the buffer exceeds the number of rows defined by the <a class=\"xref\" href=\"system.console#System_Console_WindowHeight_\" data-linktype=\"relative-path\">WindowHeight</a> property, the window can be scrolled vertically so that it displays a contiguous number of rows that are equal to the <a class=\"xref\" href=\"system.console#System_Console_WindowHeight_\" data-linktype=\"relative-path\">WindowHeight</a> property and are located anywhere in the buffer.  </p>\n<p> If a set operation decreases the value of the BufferHeight property, the uppermost lines are removed. For example, if the number of lines is reduced from 300 to 250, lines 0 through 49 are removed, and the existing lines 50 through 299 become lines 0 through 249.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the BufferHeight and <a class=\"xref\" href=\"system.console#System_Console_BufferWidth_\" data-linktype=\"relative-path\">BufferWidth</a> properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  </p>\n<pre><code class=\"lang-cs\" name=\"console.bufferHW#1\">// This example demonstrates the Console.BufferHeight and \n//                               Console.BufferWidth properties.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine(&quot;The current buffer height is {0} rows.&quot;,\n                      Console.BufferHeight);\n    Console.WriteLine(&quot;The current buffer width is {0} columns.&quot;,\n                      Console.BufferWidth);\n    }\n}\n/*\nThis example produces the following results:\n\nThe current buffer height is 300 rows.\nThe current buffer width is 85 columns.\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.bufferHW#1\">// This example demonstrates the Console.BufferHeight and \n//                               Console.BufferWidth properties.\nusing namespace System;\nint main()\n{\n   Console::WriteLine( &quot;The current buffer height is {0} rows.&quot;, Console::BufferHeight );\n   Console::WriteLine( &quot;The current buffer width is {0} columns.&quot;, Console::BufferWidth );\n}\n\n/*\nThis example produces the following results:\n\nThe current buffer height is 300 rows.\nThe current buffer width is 85 columns.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.bufferHW#1\">&#39; This example demonstrates the Console.BufferHeight and \n&#39;                               Console.BufferWidth properties.\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine(&quot;The current buffer height is {0} rows.&quot;, _\n                        Console.BufferHeight)\n      Console.WriteLine(&quot;The current buffer width is {0} columns.&quot;, _\n                        Console.BufferWidth)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The current buffer height is 300 rows.\n&#39;The current buffer width is 85 columns.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_BufferWidth\">\r\n    \r\n            <a id=\"System_Console_BufferWidth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BufferWidth</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the width of the buffer area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int BufferWidth { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The current width, in columns, of the buffer area.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value in a set operation is less than or equal to zero.  </p>\n<p> -or-  </p>\n<p> The value in a set operation is greater than or equal to <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> -or-  </p>\n<p> The value in a set operation is less than <span class=\"xref\">stem.Console.WindowLeft*</span> + <span class=\"xref\">stem.Console.WindowWidth*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a set operation decreases the value of the BufferWidth property, the rightmost columns are removed. For example, if the number of columns is reduced from 80 to 60, columns 60 through 79 of each row are removed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the <a class=\"xref\" href=\"system.console#System_Console_BufferHeight_\" data-linktype=\"relative-path\">BufferHeight</a> and BufferWidth properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  </p>\n<pre><code class=\"lang-cs\" name=\"console.bufferHW#1\">// This example demonstrates the Console.BufferHeight and \n//                               Console.BufferWidth properties.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine(&quot;The current buffer height is {0} rows.&quot;,\n                      Console.BufferHeight);\n    Console.WriteLine(&quot;The current buffer width is {0} columns.&quot;,\n                      Console.BufferWidth);\n    }\n}\n/*\nThis example produces the following results:\n\nThe current buffer height is 300 rows.\nThe current buffer width is 85 columns.\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.bufferHW#1\">// This example demonstrates the Console.BufferHeight and \n//                               Console.BufferWidth properties.\nusing namespace System;\nint main()\n{\n   Console::WriteLine( &quot;The current buffer height is {0} rows.&quot;, Console::BufferHeight );\n   Console::WriteLine( &quot;The current buffer width is {0} columns.&quot;, Console::BufferWidth );\n}\n\n/*\nThis example produces the following results:\n\nThe current buffer height is 300 rows.\nThe current buffer width is 85 columns.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.bufferHW#1\">&#39; This example demonstrates the Console.BufferHeight and \n&#39;                               Console.BufferWidth properties.\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine(&quot;The current buffer height is {0} rows.&quot;, _\n                        Console.BufferHeight)\n      Console.WriteLine(&quot;The current buffer width is {0} columns.&quot;, _\n                        Console.BufferWidth)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The current buffer height is 300 rows.\n&#39;The current buffer width is 85 columns.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_CapsLock\">\r\n    \r\n            <a id=\"System_Console_CapsLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CapsLock</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool CapsLock { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if CAPS LOCK is turned on; <code>false</code> if CAPS LOCK is turned off.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_CursorLeft\">\r\n    \r\n            <a id=\"System_Console_CursorLeft_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CursorLeft</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the column position of the cursor within the buffer area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int CursorLeft { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The current position, in columns, of the cursor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value in a set operation is less than zero.  </p>\n<p> -or-  </p>\n<p> The value in a set operation is greater than or equal to <span class=\"xref\">stem.Console.BufferWidth*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the CursorLeft and <a class=\"xref\" href=\"system.console#System_Console_CursorTop_\" data-linktype=\"relative-path\">CursorTop</a> properties, and the <a class=\"xref\" href=\"system.console#System_Console_SetCursorPosition_\" data-linktype=\"relative-path\">SetCursorPosition</a> and <a class=\"xref\" href=\"system.console#System_Console_Clear_\" data-linktype=\"relative-path\">Clear</a> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of &quot;+&quot;, &quot;&#124;&quot;, and &quot;-&quot; strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  </p>\n<pre><code class=\"lang-cs\" name=\"console.cursorLTS#1\">// This example demonstrates the \n//     Console.CursorLeft and \n//     Console.CursorTop properties, and the\n//     Console.SetCursorPosition and \n//     Console.Clear methods.\nusing System;\n\nclass Sample \n{\n    protected static int origRow;\n    protected static int origCol;\n\n    protected static void WriteAt(string s, int x, int y)\n    {\n    try\n        {\n        Console.SetCursorPosition(origCol+x, origRow+y);\n        Console.Write(s);\n        }\n    catch (ArgumentOutOfRangeException e)\n        {\n        Console.Clear();\n        Console.WriteLine(e.Message);\n        }\n    }\n\n    public static void Main() \n    {\n// Clear the screen, then save the top and left coordinates.\n    Console.Clear();\n    origRow = Console.CursorTop;\n    origCol = Console.CursorLeft;\n\n// Draw the left side of a 5x5 rectangle, from top to bottom.\n    WriteAt(&quot;+&quot;, 0, 0);\n    WriteAt(&quot;|&quot;, 0, 1);\n    WriteAt(&quot;|&quot;, 0, 2);\n    WriteAt(&quot;|&quot;, 0, 3);\n    WriteAt(&quot;+&quot;, 0, 4);\n\n// Draw the bottom side, from left to right.\n    WriteAt(&quot;-&quot;, 1, 4); // shortcut: WriteAt(&quot;---&quot;, 1, 4)\n    WriteAt(&quot;-&quot;, 2, 4); // ...\n    WriteAt(&quot;-&quot;, 3, 4); // ...\n    WriteAt(&quot;+&quot;, 4, 4);\n\n// Draw the right side, from bottom to top.\n    WriteAt(&quot;|&quot;, 4, 3);\n    WriteAt(&quot;|&quot;, 4, 2);\n    WriteAt(&quot;|&quot;, 4, 1);\n    WriteAt(&quot;+&quot;, 4, 0);\n\n// Draw the top side, from right to left.\n    WriteAt(&quot;-&quot;, 3, 0); // shortcut: WriteAt(&quot;---&quot;, 1, 0)\n    WriteAt(&quot;-&quot;, 2, 0); // ...\n    WriteAt(&quot;-&quot;, 1, 0); // ...\n//\n    WriteAt(&quot;All done!&quot;, 0, 6);\n    Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\n+---+\n|   |\n|   |\n|   |\n+---+\n\nAll done!\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.cursorLTS#1\">// This example demonstrates the \n//     Console.CursorLeft and \n//     Console.CursorTop properties, and the\n//     Console.SetCursorPosition and \n//     Console.Clear methods.\nusing namespace System;\nint origRow;\nint origCol;\nvoid WriteAt( String^ s, int x, int y )\n{\n   try\n   {\n      Console::SetCursorPosition( origCol + x, origRow + y );\n      Console::Write( s );\n   }\n   catch ( ArgumentOutOfRangeException^ e ) \n   {\n      Console::Clear();\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nint main()\n{\n   \n   // Clear the screen, then save the top and left coordinates.\n   Console::Clear();\n   origRow = Console::CursorTop;\n   origCol = Console::CursorLeft;\n   \n   // Draw the left side of a 5x5 rectangle, from top to bottom.\n   WriteAt( &quot;+&quot;, 0, 0 );\n   WriteAt( &quot;|&quot;, 0, 1 );\n   WriteAt( &quot;|&quot;, 0, 2 );\n   WriteAt( &quot;|&quot;, 0, 3 );\n   WriteAt( &quot;+&quot;, 0, 4 );\n   \n   // Draw the bottom side, from left to right.\n   WriteAt( &quot;-&quot;, 1, 4 ); // shortcut: WriteAt(&quot;---&quot;, 1, 4)\n   WriteAt( &quot;-&quot;, 2, 4 ); // ...\n   WriteAt( &quot;-&quot;, 3, 4 ); // ...\n   WriteAt( &quot;+&quot;, 4, 4 );\n   \n   // Draw the right side, from bottom to top.\n   WriteAt( &quot;|&quot;, 4, 3 );\n   WriteAt( &quot;|&quot;, 4, 2 );\n   WriteAt( &quot;|&quot;, 4, 1 );\n   WriteAt( &quot;+&quot;, 4, 0 );\n   \n   // Draw the top side, from right to left.\n   WriteAt( &quot;-&quot;, 3, 0 ); // shortcut: WriteAt(&quot;---&quot;, 1, 0)\n   WriteAt( &quot;-&quot;, 2, 0 ); // ...\n   WriteAt( &quot;-&quot;, 1, 0 ); // ...\n   \n   //\n   WriteAt( &quot;All done!&quot;, 0, 6 );\n   Console::WriteLine();\n}\n\n/*\nThis example produces the following results:\n\n+---+\n|   |\n|   |\n|   |\n+---+\n\nAll done!\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.cursorLTS#1\">&#39; This example demonstrates the \n&#39;     Console.CursorLeft and \n&#39;     Console.CursorTop properties, and the\n&#39;     Console.SetCursorPosition and \n&#39;     Console.Clear methods.\nImports System\n\nClass Sample\n   Protected Shared origRow As Integer\n   Protected Shared origCol As Integer\n   \n   Protected Shared Sub WriteAt(s As String, x As Integer, y As Integer)\n      Try\n         Console.SetCursorPosition(origCol + x, origRow + y)\n         Console.Write(s)\n      Catch e As ArgumentOutOfRangeException\n         Console.Clear()\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;WriteAt\n   \n   Public Shared Sub Main()\n      &#39; Clear the screen, then save the top and left coordinates.\n      Console.Clear()\n      origRow = Console.CursorTop\n      origCol = Console.CursorLeft\n      \n      &#39; Draw the left side of a 5x5 rectangle, from top to bottom.\n      WriteAt(&quot;+&quot;, 0, 0)\n      WriteAt(&quot;|&quot;, 0, 1)\n      WriteAt(&quot;|&quot;, 0, 2)\n      WriteAt(&quot;|&quot;, 0, 3)\n      WriteAt(&quot;+&quot;, 0, 4)\n      \n      &#39; Draw the bottom side, from left to right.\n      WriteAt(&quot;-&quot;, 1, 4) &#39; shortcut: WriteAt(&quot;---&quot;, 1, 4)\n      WriteAt(&quot;-&quot;, 2, 4) &#39; ...\n      WriteAt(&quot;-&quot;, 3, 4) &#39; ...\n      WriteAt(&quot;+&quot;, 4, 4)\n      \n      &#39; Draw the right side, from bottom to top.\n      WriteAt(&quot;|&quot;, 4, 3)\n      WriteAt(&quot;|&quot;, 4, 2)\n      WriteAt(&quot;|&quot;, 4, 1)\n      WriteAt(&quot;+&quot;, 4, 0)\n      \n      &#39; Draw the top side, from right to left.\n      WriteAt(&quot;-&quot;, 3, 0) &#39; shortcut: WriteAt(&quot;---&quot;, 1, 0)\n      WriteAt(&quot;-&quot;, 2, 0) &#39; ...\n      WriteAt(&quot;-&quot;, 1, 0) &#39; ...\n      &#39;\n      WriteAt(&quot;All done!&quot;, 0, 6)\n      Console.WriteLine()\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;+---+\n&#39;|   |\n&#39;|   |\n&#39;|   |\n&#39;+---+\n&#39;\n&#39;All done!\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_CursorSize\">\r\n    \r\n            <a id=\"System_Console_CursorSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CursorSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the height of the cursor within a character cell.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int CursorSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The size of the cursor expressed as a percentage of the height of a character cell. The property value ranges from 1 to 100.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified in a set operation is less than 1 or greater than 100.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The cursor appearance varies, ranging from a horizontal line at the bottom of the cell when the property value is 1, to completely filling the cell when the property value is 100.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the CursorSize property. The example increases the size of the cursor each time any console key is pressed, then restores the cursor to its original size before terminating.  </p>\n<pre><code class=\"lang-cs\" name=\"console.cursorsize#1\">// This example demonstrates the Console.CursorSize property.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string m0 = &quot;This example increments the cursor size from 1% to 100%:<br>&quot;;\n    string m1 = &quot;Cursor size = {0}%. (Press any key to continue...)&quot;;\n    int[] sizes = {1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100};\n    int saveCursorSize;\n//\n    saveCursorSize = Console.CursorSize;\n    Console.WriteLine(m0);\n    foreach (int size in sizes)\n        {\n        Console.CursorSize = size;\n        Console.WriteLine(m1, size);\n        Console.ReadKey();\n        }\n    Console.CursorSize = saveCursorSize;\n    }\n}\n/*\nThis example produces the following results:\n\nThis example increments the cursor size from 1% to 100%:\n\nCursor size = 1%. (Press any key to continue...)\nCursor size = 10%. (Press any key to continue...)\nCursor size = 20%. (Press any key to continue...)\nCursor size = 30%. (Press any key to continue...)\nCursor size = 40%. (Press any key to continue...)\nCursor size = 50%. (Press any key to continue...)\nCursor size = 60%. (Press any key to continue...)\nCursor size = 70%. (Press any key to continue...)\nCursor size = 80%. (Press any key to continue...)\nCursor size = 90%. (Press any key to continue...)\nCursor size = 100%. (Press any key to continue...)\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.cursorsize#1\">// This example demonstrates the Console.CursorSize property.\nusing namespace System;\nint main()\n{\n   String^ m0 = &quot;This example increments the cursor size from 1% to 100%:<br>&quot;;\n   String^ m1 = &quot;Cursor size = {0}%. (Press any key to continue...)&quot;;\n   array&lt;Int32&gt;^sizes = {1,10,20,30,40,50,60,70,80,90,100};\n   int saveCursorSize;\n   \n   //\n   saveCursorSize = Console::CursorSize;\n   Console::WriteLine( m0 );\n   System::Collections::IEnumerator^ myEnum = sizes-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      int size =  *safe_cast&lt;Int32^&gt;(myEnum-&gt;Current);\n      Console::CursorSize = size;\n      Console::WriteLine( m1, size );\n      Console::ReadKey();\n   }\n\n   Console::CursorSize = saveCursorSize;\n}\n\n/*\nThis example produces the following results:\n\nThis example increments the cursor size from 1% to 100%:\n\nCursor size = 1%. (Press any key to continue...)\nCursor size = 10%. (Press any key to continue...)\nCursor size = 20%. (Press any key to continue...)\nCursor size = 30%. (Press any key to continue...)\nCursor size = 40%. (Press any key to continue...)\nCursor size = 50%. (Press any key to continue...)\nCursor size = 60%. (Press any key to continue...)\nCursor size = 70%. (Press any key to continue...)\nCursor size = 80%. (Press any key to continue...)\nCursor size = 90%. (Press any key to continue...)\nCursor size = 100%. (Press any key to continue...)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.cursorsize#1\">&#39; This example demonstrates the Console.CursorSize property.\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      Dim m0 As String = &quot;This example increments the cursor size from &quot; &amp; _\n                         &quot;1% to 100%:&quot; &amp; vbCrLf\n      Dim m1 As String = &quot;Cursor size = {0}%. (Press any key to continue...)&quot;\n      Dim sizes As Integer() =  {1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100}\n      Dim saveCursorSize As Integer\n      &#39;\n      saveCursorSize = Console.CursorSize\n      Console.WriteLine(m0)\n      Dim size As Integer\n      For Each size In  sizes\n         Console.CursorSize = size\n         Console.WriteLine(m1, size)\n         Console.ReadKey()\n      Next size\n      Console.CursorSize = saveCursorSize\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;This example increments the cursor size from 1% to 100%:\n&#39;\n&#39;Cursor size = 1%. (Press any key to continue...)\n&#39;Cursor size = 10%. (Press any key to continue...)\n&#39;Cursor size = 20%. (Press any key to continue...)\n&#39;Cursor size = 30%. (Press any key to continue...)\n&#39;Cursor size = 40%. (Press any key to continue...)\n&#39;Cursor size = 50%. (Press any key to continue...)\n&#39;Cursor size = 60%. (Press any key to continue...)\n&#39;Cursor size = 70%. (Press any key to continue...)\n&#39;Cursor size = 80%. (Press any key to continue...)\n&#39;Cursor size = 90%. (Press any key to continue...)\n&#39;Cursor size = 100%. (Press any key to continue...)\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_CursorTop\">\r\n    \r\n            <a id=\"System_Console_CursorTop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CursorTop</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the row position of the cursor within the buffer area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int CursorTop { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The current position, in rows, of the cursor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value in a set operation is less than zero.  </p>\n<p> -or-  </p>\n<p> The value in a set operation is greater than or equal to <span class=\"xref\">stem.Console.BufferHeight*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the <a class=\"xref\" href=\"system.console#System_Console_CursorLeft_\" data-linktype=\"relative-path\">CursorLeft</a> and CursorTop properties, and the <a class=\"xref\" href=\"system.console#System_Console_SetCursorPosition_\" data-linktype=\"relative-path\">SetCursorPosition</a> and <a class=\"xref\" href=\"system.console#System_Console_Clear_\" data-linktype=\"relative-path\">Clear</a> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of &quot;+&quot;, &quot;&#124;&quot;, and &quot;-&quot; strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  </p>\n<pre><code class=\"lang-cs\" name=\"console.cursorLTS#1\">// This example demonstrates the \n//     Console.CursorLeft and \n//     Console.CursorTop properties, and the\n//     Console.SetCursorPosition and \n//     Console.Clear methods.\nusing System;\n\nclass Sample \n{\n    protected static int origRow;\n    protected static int origCol;\n\n    protected static void WriteAt(string s, int x, int y)\n    {\n    try\n        {\n        Console.SetCursorPosition(origCol+x, origRow+y);\n        Console.Write(s);\n        }\n    catch (ArgumentOutOfRangeException e)\n        {\n        Console.Clear();\n        Console.WriteLine(e.Message);\n        }\n    }\n\n    public static void Main() \n    {\n// Clear the screen, then save the top and left coordinates.\n    Console.Clear();\n    origRow = Console.CursorTop;\n    origCol = Console.CursorLeft;\n\n// Draw the left side of a 5x5 rectangle, from top to bottom.\n    WriteAt(&quot;+&quot;, 0, 0);\n    WriteAt(&quot;|&quot;, 0, 1);\n    WriteAt(&quot;|&quot;, 0, 2);\n    WriteAt(&quot;|&quot;, 0, 3);\n    WriteAt(&quot;+&quot;, 0, 4);\n\n// Draw the bottom side, from left to right.\n    WriteAt(&quot;-&quot;, 1, 4); // shortcut: WriteAt(&quot;---&quot;, 1, 4)\n    WriteAt(&quot;-&quot;, 2, 4); // ...\n    WriteAt(&quot;-&quot;, 3, 4); // ...\n    WriteAt(&quot;+&quot;, 4, 4);\n\n// Draw the right side, from bottom to top.\n    WriteAt(&quot;|&quot;, 4, 3);\n    WriteAt(&quot;|&quot;, 4, 2);\n    WriteAt(&quot;|&quot;, 4, 1);\n    WriteAt(&quot;+&quot;, 4, 0);\n\n// Draw the top side, from right to left.\n    WriteAt(&quot;-&quot;, 3, 0); // shortcut: WriteAt(&quot;---&quot;, 1, 0)\n    WriteAt(&quot;-&quot;, 2, 0); // ...\n    WriteAt(&quot;-&quot;, 1, 0); // ...\n//\n    WriteAt(&quot;All done!&quot;, 0, 6);\n    Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\n+---+\n|   |\n|   |\n|   |\n+---+\n\nAll done!\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.cursorLTS#1\">// This example demonstrates the \n//     Console.CursorLeft and \n//     Console.CursorTop properties, and the\n//     Console.SetCursorPosition and \n//     Console.Clear methods.\nusing namespace System;\nint origRow;\nint origCol;\nvoid WriteAt( String^ s, int x, int y )\n{\n   try\n   {\n      Console::SetCursorPosition( origCol + x, origRow + y );\n      Console::Write( s );\n   }\n   catch ( ArgumentOutOfRangeException^ e ) \n   {\n      Console::Clear();\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nint main()\n{\n   \n   // Clear the screen, then save the top and left coordinates.\n   Console::Clear();\n   origRow = Console::CursorTop;\n   origCol = Console::CursorLeft;\n   \n   // Draw the left side of a 5x5 rectangle, from top to bottom.\n   WriteAt( &quot;+&quot;, 0, 0 );\n   WriteAt( &quot;|&quot;, 0, 1 );\n   WriteAt( &quot;|&quot;, 0, 2 );\n   WriteAt( &quot;|&quot;, 0, 3 );\n   WriteAt( &quot;+&quot;, 0, 4 );\n   \n   // Draw the bottom side, from left to right.\n   WriteAt( &quot;-&quot;, 1, 4 ); // shortcut: WriteAt(&quot;---&quot;, 1, 4)\n   WriteAt( &quot;-&quot;, 2, 4 ); // ...\n   WriteAt( &quot;-&quot;, 3, 4 ); // ...\n   WriteAt( &quot;+&quot;, 4, 4 );\n   \n   // Draw the right side, from bottom to top.\n   WriteAt( &quot;|&quot;, 4, 3 );\n   WriteAt( &quot;|&quot;, 4, 2 );\n   WriteAt( &quot;|&quot;, 4, 1 );\n   WriteAt( &quot;+&quot;, 4, 0 );\n   \n   // Draw the top side, from right to left.\n   WriteAt( &quot;-&quot;, 3, 0 ); // shortcut: WriteAt(&quot;---&quot;, 1, 0)\n   WriteAt( &quot;-&quot;, 2, 0 ); // ...\n   WriteAt( &quot;-&quot;, 1, 0 ); // ...\n   \n   //\n   WriteAt( &quot;All done!&quot;, 0, 6 );\n   Console::WriteLine();\n}\n\n/*\nThis example produces the following results:\n\n+---+\n|   |\n|   |\n|   |\n+---+\n\nAll done!\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.cursorLTS#1\">&#39; This example demonstrates the \n&#39;     Console.CursorLeft and \n&#39;     Console.CursorTop properties, and the\n&#39;     Console.SetCursorPosition and \n&#39;     Console.Clear methods.\nImports System\n\nClass Sample\n   Protected Shared origRow As Integer\n   Protected Shared origCol As Integer\n   \n   Protected Shared Sub WriteAt(s As String, x As Integer, y As Integer)\n      Try\n         Console.SetCursorPosition(origCol + x, origRow + y)\n         Console.Write(s)\n      Catch e As ArgumentOutOfRangeException\n         Console.Clear()\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;WriteAt\n   \n   Public Shared Sub Main()\n      &#39; Clear the screen, then save the top and left coordinates.\n      Console.Clear()\n      origRow = Console.CursorTop\n      origCol = Console.CursorLeft\n      \n      &#39; Draw the left side of a 5x5 rectangle, from top to bottom.\n      WriteAt(&quot;+&quot;, 0, 0)\n      WriteAt(&quot;|&quot;, 0, 1)\n      WriteAt(&quot;|&quot;, 0, 2)\n      WriteAt(&quot;|&quot;, 0, 3)\n      WriteAt(&quot;+&quot;, 0, 4)\n      \n      &#39; Draw the bottom side, from left to right.\n      WriteAt(&quot;-&quot;, 1, 4) &#39; shortcut: WriteAt(&quot;---&quot;, 1, 4)\n      WriteAt(&quot;-&quot;, 2, 4) &#39; ...\n      WriteAt(&quot;-&quot;, 3, 4) &#39; ...\n      WriteAt(&quot;+&quot;, 4, 4)\n      \n      &#39; Draw the right side, from bottom to top.\n      WriteAt(&quot;|&quot;, 4, 3)\n      WriteAt(&quot;|&quot;, 4, 2)\n      WriteAt(&quot;|&quot;, 4, 1)\n      WriteAt(&quot;+&quot;, 4, 0)\n      \n      &#39; Draw the top side, from right to left.\n      WriteAt(&quot;-&quot;, 3, 0) &#39; shortcut: WriteAt(&quot;---&quot;, 1, 0)\n      WriteAt(&quot;-&quot;, 2, 0) &#39; ...\n      WriteAt(&quot;-&quot;, 1, 0) &#39; ...\n      &#39;\n      WriteAt(&quot;All done!&quot;, 0, 6)\n      Console.WriteLine()\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;+---+\n&#39;|   |\n&#39;|   |\n&#39;|   |\n&#39;+---+\n&#39;\n&#39;All done!\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_CursorVisible\">\r\n    \r\n            <a id=\"System_Console_CursorVisible_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CursorVisible</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the cursor is visible.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool CursorVisible { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the cursor is visible; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the CursorVisible property. The example makes the cursor visible if the first column of input is a &#39;+&#39; character or invisible if the input is a &#39;-&#39; character.  </p>\n<pre><code class=\"lang-cs\" name=\"console.cursorvis#1\">// This example demonstrates the Console.CursorVisible property.\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string m1 = &quot;<br>The cursor is {0}.<br>Type any text then press Enter. &quot; +\n                &quot;Type &#39;+&#39; in the first column to show <br>&quot; +\n                &quot;the cursor, &#39;-&#39; to hide the cursor, &quot; +\n                &quot;or lowercase &#39;x&#39; to quit:&quot;;\n    string s;\n    bool saveCursorVisibile;\n    int  saveCursorSize;\n//\n    Console.CursorVisible = true; // Initialize the cursor to visible.\n    saveCursorVisibile = Console.CursorVisible;\n    saveCursorSize  = Console.CursorSize;\n    Console.CursorSize = 100;     // Emphasize the cursor.\n\n    while(true) \n        {\n        Console.WriteLine(m1, \n                         ((Console.CursorVisible == true) ? \n                           &quot;VISIBLE&quot; : &quot;HIDDEN&quot;));\n        s = Console.ReadLine();\n        if (String.IsNullOrEmpty(s) == false) \n            if (s[0] == &#39;+&#39;)\n                Console.CursorVisible = true;\n            else if (s[0] == &#39;-&#39;)\n                Console.CursorVisible = false;\n            else if (s[0] == &#39;x&#39;)\n                break;\n        }\n    Console.CursorVisible = saveCursorVisibile;\n    Console.CursorSize    = saveCursorSize;\n    }\n\n}\n/*\nThis example produces the following results. Note that these results\ncannot depict cursor visibility. You must run the example to see the \ncursor behavior:\n\nThe cursor is VISIBLE.\nType any text then press Enter. Type &#39;+&#39; in the first column to show\nthe cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\nThe quick brown fox\n\nThe cursor is VISIBLE.\nType any text then press Enter. Type &#39;+&#39; in the first column to show\nthe cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\n-\n\nThe cursor is HIDDEN.\nType any text then press Enter. Type &#39;+&#39; in the first column to show\nthe cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\njumps over\n\nThe cursor is HIDDEN.\nType any text then press Enter. Type &#39;+&#39; in the first column to show\nthe cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\n+\n\nThe cursor is VISIBLE.\nType any text then press Enter. Type &#39;+&#39; in the first column to show\nthe cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\nthe lazy dog.\n\nThe cursor is VISIBLE.\nType any text then press Enter. Type &#39;+&#39; in the first column to show\nthe cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\nx\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.cursorvis#1\">&#39; This example demonstrates the Console.CursorVisible property.\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      Dim m1 As String = vbCrLf &amp; &quot;The cursor is {0}.&quot; &amp; _\n                         vbCrLf &amp; &quot;Type any text then press Enter. &quot; &amp; _\n                         &quot;Type &#39;+&#39; in the first column to show &quot; &amp; _\n                         vbCrLf &amp; &quot;the cursor, &#39;-&#39; to hide the cursor, &quot; &amp; _\n                         &quot;or lowercase &#39;x&#39; to quit:&quot;\n      Dim s As String\n      Dim saveCursorVisibile As Boolean\n      Dim saveCursorSize As Integer\n      &#39;\n      Console.CursorVisible = True &#39; Initialize the cursor to visible.\n      saveCursorVisibile = Console.CursorVisible\n      saveCursorSize = Console.CursorSize\n      Console.CursorSize = 100 &#39; Emphasize the cursor.\n      While True\n         Console.WriteLine(m1, _\n            IIf(Console.CursorVisible = True, &quot;VISIBLE&quot;, &quot;HIDDEN&quot;))\n         s = Console.ReadLine()\n         If String.IsNullOrEmpty(s) = False Then\n            If s(0) = &quot;+&quot;c Then\n               Console.CursorVisible = True\n            ElseIf s(0) = &quot;-&quot;c Then\n               Console.CursorVisible = False\n            ElseIf s(0) = &quot;x&quot;c Then\n               Exit While\n            End If\n         End If\n      End While\n      Console.CursorVisible = saveCursorVisibile\n      Console.CursorSize = saveCursorSize\n   End Sub &#39;Main\nEnd Class &#39;Sample \n&#39;\n&#39;This example produces the following results. Note that these results\n&#39;cannot depict cursor visibility. You must run the example to see the \n&#39;cursor behavior:\n&#39;\n&#39;The cursor is VISIBLE.\n&#39;Type any text then press Enter. Type &#39;+&#39; in the first column to show\n&#39;the cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\n&#39;The quick brown fox\n&#39;\n&#39;The cursor is VISIBLE.\n&#39;Type any text then press Enter. Type &#39;+&#39; in the first column to show\n&#39;the cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\n&#39;-\n&#39;\n&#39;The cursor is HIDDEN.\n&#39;Type any text then press Enter. Type &#39;+&#39; in the first column to show\n&#39;the cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\n&#39;jumps over\n&#39;\n&#39;The cursor is HIDDEN.\n&#39;Type any text then press Enter. Type &#39;+&#39; in the first column to show\n&#39;the cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\n&#39;+\n&#39;\n&#39;The cursor is VISIBLE.\n&#39;Type any text then press Enter. Type &#39;+&#39; in the first column to show\n&#39;the cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\n&#39;the lazy dog.\n&#39;\n&#39;The cursor is VISIBLE.\n&#39;Type any text then press Enter. Type &#39;+&#39; in the first column to show\n&#39;the cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\n&#39;x\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.cursorvis#1\">// This example demonstrates the Console.CursorVisible property.\nusing namespace System;\n\nint main()\n{\n   String^ m1 = &quot;<br>The cursor is {0}.<br>Type any text then press Enter. &quot;\n   &quot;Type &#39;+&#39; in the first column to show <br>&quot;\n   &quot;the cursor, &#39;-&#39; to hide the cursor, &quot;\n   &quot;or lowercase &#39;x&#39; to quit:&quot;;\n   String^ s;\n   bool saveCursorVisibile;\n   int saveCursorSize;\n   \n   //\n   Console::CursorVisible = true; // Initialize the cursor to visible.\n   saveCursorVisibile = Console::CursorVisible;\n   saveCursorSize = Console::CursorSize;\n   Console::CursorSize = 100; // Emphasize the cursor.\n   for ( ; ;  )\n   {\n      Console::WriteLine( m1, ((Console::CursorVisible == true) ? (String^)&quot;VISIBLE&quot; : &quot;HIDDEN&quot;) );\n      s = Console::ReadLine();\n      if ( String::IsNullOrEmpty( s ) == false )\n            if ( s[ 0 ] == &#39;+&#39; )\n            Console::CursorVisible = true;\n      else\n      if ( s[ 0 ] == &#39;-&#39; )\n            Console::CursorVisible = false;\n      else\n      if ( s[ 0 ] == &#39;x&#39; )\n            break;\n\n   }\n   Console::CursorVisible = saveCursorVisibile;\n   Console::CursorSize = saveCursorSize;\n}\n\n/*\nThis example produces the following results. Note that these results\ncannot depict cursor visibility. You must run the example to see the \ncursor behavior:\n\nThe cursor is VISIBLE.\nType any text then press Enter. Type &#39;+&#39; in the first column to show\nthe cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\nThe quick brown fox\n\nThe cursor is VISIBLE.\nType any text then press Enter. Type &#39;+&#39; in the first column to show\nthe cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\n-\n\nThe cursor is HIDDEN.\nType any text then press Enter. Type &#39;+&#39; in the first column to show\nthe cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\njumps over\n\nThe cursor is HIDDEN.\nType any text then press Enter. Type &#39;+&#39; in the first column to show\nthe cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\n+\n\nThe cursor is VISIBLE.\nType any text then press Enter. Type &#39;+&#39; in the first column to show\nthe cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\nthe lazy dog.\n\nThe cursor is VISIBLE.\nType any text then press Enter. Type &#39;+&#39; in the first column to show\nthe cursor, &#39;-&#39; to hide the cursor, or lowercase &#39;x&#39; to quit:\nx\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Error\">\r\n    \r\n            <a id=\"System_Console_Error_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Error</div>        \r\n          </div>\r\n    \r\n            <p>Gets the standard error output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.TextWriter Error { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> that represents the standard error output stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This standard error stream is set to the console by default. It can be set to another stream with the <a class=\"xref\" href=\"system.console#System_Console_SetError_\" data-linktype=\"relative-path\">SetError</a> method. After the standard error stream is redirected, it can be reacquired by calling the <a class=\"xref\" href=\"system.console#System_Console_OpenStandardError_\" data-linktype=\"relative-path\">OpenStandardError</a> method.  </p>\n<p> In console applications whose informational output is often redirected to a file, the standard error stream available through the Error property can be used to display information to the console even if output is redirected. The following example displays product tables for 10 numbers at a time starting with 1. After every set of 10 numbers, the Error property is used to ask the user whether to display the next set. If the standard output is redirected to a file, the user is still asked whether the routine should generate the next set of products.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.Error#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int increment = 0;\n      bool exitFlag = false;\n\n      while (! exitFlag) {\n         if (Console.IsOutputRedirected)\n            Console.Error.WriteLine(&quot;Generating multiples of numbers from {0} to {1}&quot;,\n                                    increment + 1, increment + 10);\n\n         Console.WriteLine(&quot;Generating multiples of numbers from {0} to {1}&quot;,\n                           increment + 1, increment + 10);\n         for (int ctr = increment + 1; ctr &lt;= increment + 10; ctr++) {\n            Console.Write(&quot;Multiples of {0}: &quot;, ctr);\n            for (int ctr2 = 1; ctr2 &lt;= 10; ctr2++)\n               Console.Write(&quot;{0}{1}&quot;, ctr * ctr2, ctr2 == 10 ? &quot;&quot; : &quot;, &quot;);\n\n            Console.WriteLine();\n         }\n         Console.WriteLine();\n\n         increment += 10;\n         Console.Error.Write(&quot;Display multiples of {0} through {1} (y/n)? &quot;,\n                             increment + 1, increment + 10);\n         Char response = Console.ReadKey(true).KeyChar;\n         Console.Error.WriteLine(response);\n         if (! Console.IsOutputRedirected)\n            Console.CursorTop--;\n\n         if (Char.ToUpperInvariant(response) == &#39;N&#39;)\n            exitFlag = true;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.Error#1\">Module Example\n   Public Sub Main()\n      Dim increment As Integer = 0\n      Dim exitFlag As Boolean = False\n      \n      Do While Not exitFlag\n         If Console.IsOutputRedirected Then\n            Console.Error.WriteLine(&quot;Generating multiples of numbers from {0} to {1}&quot;,\n                                    increment + 1, increment + 10)\n         End If\n         Console.WriteLine(&quot;Generating multiples of numbers from {0} to {1}&quot;,\n                           increment + 1, increment + 10)\n         For ctr As Integer = increment + 1 To increment + 10\n            Console.Write(&quot;Multiples of {0}: &quot;, ctr)\n            For ctr2 As Integer = 1 To 10\n               Console.Write(&quot;{0}{1}&quot;, ctr * ctr2, If(ctr2 = 10, &quot;&quot;, &quot;, &quot;))\n            Next\n            Console.WriteLine()\n         Next\n         Console.WriteLine()\n         \n         increment += 10\n         Console.Error.Write(&quot;Display multiples of {0} through {1} (y/n)? &quot;,\n                             increment + 1, increment + 10)\n         Dim response As Char = Console.ReadKey(True).KeyChar\n         Console.Error.WriteLine(response)\n         If Not Console.IsOutputRedirected Then\n            Console.CursorTop = Console.CursorTop - 1\n         End If\n         If Char.ToUpperInvariant(response) = &quot;N&quot; Then exitFlag = True\n      Loop\n   End Sub\nEnd Module\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a command line utility named ExpandTabs that replaces tab characters in a text file with four spaces, the value defined by the <code>tabSize</code> variable. It redirects the standard input and output streams to files, but uses the Error property to write the standard error stream to the console. It can be launched from the command line by supplying the name of the file that contains tab characters and the name of the output file.  </p>\n<pre><code class=\"lang-cpp\" name=\"Console-EXPANDTABSEX#1\">using namespace System;\nusing namespace System::IO;\n\nvoid main()\n{\n   const int tabSize = 4;\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   String^ usageText = &quot;Usage: EXPANDTABSEX inputfile.txt outputfile.txt&quot;;\n   StreamWriter^ writer = nullptr;\n   \n   if ( args-&gt;Length &lt; 3 )\n   {\n      Console::WriteLine( usageText );\n      return;\n   }\n\n   try\n   {\n      writer = gcnew StreamWriter( args[ 2 ] );\n      Console::SetOut( writer );\n      Console::SetIn( gcnew StreamReader( args[ 1 ] ) );\n   }\n   catch ( IOException^ e ) \n   {\n      TextWriter^ errorWriter = Console::Error;\n      errorWriter-&gt;WriteLine( e-&gt;Message );\n      errorWriter-&gt;WriteLine( usageText );\n      return;\n   }\n\n   int i;\n   while ( (i = Console::Read()) != -1 )\n   {\n      Char c = (Char)i;\n      if ( c == &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39; )\n            Console::Write( ((String^)&quot;&quot;)-&gt;PadRight( tabSize, &#39; &#39; ) );\n      else\n            Console::Write( c );\n   }\n\n   writer-&gt;Close();\n   \n   // Recover the standard output stream so that a \n   // completion message can be displayed.\n   StreamWriter^ standardOutput = gcnew StreamWriter(Console::OpenStandardOutput());\n   standardOutput-&gt;AutoFlush = true;\n   Console::SetOut(standardOutput);\n   Console::WriteLine( &quot;EXPANDTABSEX has completed the processing of {0}.&quot;, args[ 0 ] );\n   return;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Console-EXPANDTABSEX#1\">using System;\nusing System.IO;\n\npublic class ExpandTabs\n{\n    private const int tabSize = 4;\n    private const string usageText = &quot;Usage: EXPANDTABSEX inputfile.txt outputfile.txt&quot;;\n\n    public static void Main(string[] args)\n    {\n        StreamWriter writer = null;\n\n        if (args.Length &lt; 2) {\n            Console.WriteLine(usageText);\n            return;\n        }\n\n        try {\n            writer = new StreamWriter(args[1]);\n            Console.SetOut(writer);\n            Console.SetIn(new StreamReader(args[0]));\n        }\n        catch(IOException e) {\n            TextWriter errorWriter = Console.Error;\n            errorWriter.WriteLine(e.Message);\n            errorWriter.WriteLine(usageText);\n            return;\n        }\n        int i;\n        while ((i = Console.Read()) != -1) {\n            char c = (char)i;\n            if (c == &#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;)\n                Console.Write((&quot;&quot;).PadRight(tabSize, &#39; &#39;));\n            else\n                Console.Write(c);\n        }\n        writer.Close();\n        // Recover the standard output stream so that a \n        // completion message can be displayed.\n        StreamWriter standardOutput = new StreamWriter(Console.OpenStandardOutput());\n        standardOutput.AutoFlush = true;\n        Console.SetOut(standardOutput);\n        Console.WriteLine(&quot;EXPANDTABSEX has completed the processing of {0}.&quot;, args[0]);\n        return;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Console-EXPANDTABSEX#1\">Imports System.IO\n\nPublic Class ExpandTabs\n   Private Const tabSize As Integer = 4\n   Private Const usageText As String = &quot;Usage: EXPANDTABSEX inputfile.txt outputfile.txt&quot;\n   \n   Public Shared Sub Main(args() As String)\n      Dim writer As StreamWriter = Nothing\n\n      If args.Length &lt; 2 Then\n         Console.WriteLine(usageText)\n         Exit Sub\n      End If\n      \n      Try\n         writer = New StreamWriter(args(1))\n         Console.SetOut(writer)\n         Console.SetIn(New StreamReader(args(0)))\n      Catch e As IOException\n         Console.Error.WriteLine(e.Message)\n         Console.Error.WriteLine(usageText)\n         Exit Sub\n      End Try\n      \n      Dim i As Integer = Console.Read()\n      While i &lt;&gt; -1 \n         Dim c As Char = Convert.ToChar(i)\n         If c = ControlChars.Tab Then\n            Console.Write(&quot;&quot;.PadRight(tabSize, &quot; &quot;c))\n         Else\n            Console.Write(c)\n         End If\n         i = Console.Read()\n      End While\n      writer.Close()\n      \n      &#39; Reacquire the standard output stream so that a\n      &#39; completion message can be displayed.\n      Dim standardOutput As New StreamWriter(Console.OpenStandardOutput)\n      standardOutput.AutoFlush = True\n      Console.SetOut(standardOutput)\n      Console.WriteLine(&quot;EXPANDTABSEX has completed the processing of {0}.&quot;, args(0))\n   End Sub\nEnd Class\n</code></pre><p> The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <a class=\"xref\" href=\"system.console#System_Console_SetError_\" data-linktype=\"relative-path\">SetError</a> method to redirect error information to a file, calls the <a class=\"xref\" href=\"system.console#System_Console_OpenStandardError_\" data-linktype=\"relative-path\">OpenStandardError</a> method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.OpenStandardError#1\">using System;\nusing System.IO;\n\npublic class ViewTextFile\n{\n   public static void Main()\n   {\n      String[] args = Environment.GetCommandLineArgs();\n      String errorOutput = &quot;&quot;;\n      // Make sure that there is at least one command line argument.\n      if (args.Length &lt;= 1)\n         errorOutput += &quot;You must include a filename on the command line.<br>&quot;;\n\n      for (int ctr = 1; ctr &lt;= args.GetUpperBound(0); ctr++)  {\n         // Check whether the file exists.\n         if (! File.Exists(args[ctr])) {\n            errorOutput += String.Format(&quot;&#39;{0}&#39; does not exist.<br>&quot;, args[ctr]);\n         }\n         else {\n            // Display the contents of the file.\n            StreamReader sr = new StreamReader(args[ctr]);\n            String contents = sr.ReadToEnd();\n            sr.Close();\n            Console.WriteLine(&quot;*****Contents of file &#39;{0}&#39;:<br><br>&quot;,\n                              args[ctr]);\n            Console.WriteLine(contents);\n            Console.WriteLine(&quot;*****<br>&quot;);\n         }\n      }\n\n      // Check for error conditions.\n      if (! String.IsNullOrEmpty(errorOutput)) {\n         // Write error information to a file.\n         Console.SetError(new StreamWriter(@&quot;.\\ViewTextFile.Err.txt&quot;));\n         Console.Error.WriteLine(errorOutput);\n         Console.Error.Close();\n         // Reacquire the standard error stream.\n         var standardError = new StreamWriter(Console.OpenStandardError());\n         standardError.AutoFlush = true;\n         Console.SetError(standardError);\n         Console.Error.WriteLine(&quot;<br>Error information written to ViewTextFile.Err.txt&quot;);\n      }\n   }\n}\n// If the example is compiled and run with the following command line:\n//     ViewTextFile file1.txt file2.txt\n// and neither file1.txt nor file2.txt exist, it displays the\n// following output:\n//     Error information written to ViewTextFile.Err.txt\n// and writes the following text to ViewFileText.Err.txt:\n//     &#39;file1.txt&#39; does not exist.\n//     &#39;file2.txt&#39; does not exist.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.OpenStandardError#1\">Imports System.IO\n\nModule ViewTextFile\n   Public Sub Main()\n      Dim args() As String = Environment.GetCommandLineArgs()\n      Dim errorOutput As String = &quot;&quot;\n      &#39; Make sure that there is at least one command line argument.\n      If args.Length &lt;= 1 Then\n         errorOutput += &quot;You must include a filename on the command line.&quot; +\n                        vbCrLf\n      End If\n      \n      For ctr As Integer = 1 To args.GetUpperBound(0)\n         &#39; Check whether the file exists.\n         If Not File.Exists(args(ctr)) Then\n            errorOutput += String.Format(&quot;&#39;{0}&#39; does not exist.{1}&quot;,\n                                         args(ctr), vbCrLf)\n         Else\n            &#39; Display the contents of the file.\n            Dim sr As New StreamReader(args(ctr))\n            Dim contents As String = sr.ReadToEnd()\n            sr.Close()\n            Console.WriteLine(&quot;***** Contents of file &#39;{0}&#39;:{1}{1}&quot;,\n                              args(ctr), vbCrLf)\n            Console.WriteLine(contents)\n            Console.WriteLine(&quot;*****{0}&quot;, vbCrLf)\n         End If\n      Next\n\n      &#39; Check for error conditions.\n      If Not String.IsNullOrEmpty(errorOutput) Then\n         &#39; Write error information to a file.\n         Console.SetError(New StreamWriter(&quot;.\\ViewTextFile.Err.txt&quot;))\n         Console.Error.WriteLine(errorOutput)\n         Console.Error.Close()\n         &#39; Reacquire the standard error stream.\n         Dim standardError As New StreamWriter(Console.OpenStandardError())\n         standardError.AutoFlush = True\n         Console.SetError(standardError)\n         Console.Error.WriteLine(&quot;{0}Error information written to ViewTextFile.Err.txt&quot;,\n                                 vbCrLf)\n      End If\n   End Sub\nEnd Module\n&#39; If the example is compiled and run with the following command line:\n&#39;     ViewTextFile file1.txt file2.txt\n&#39; and neither file1.txt nor file2.txt exist, it displays the\n&#39; following output:\n&#39;     Error information written to ViewTextFile.Err.txt\n&#39; and writes the following text to ViewFileText.Err.txt:\n&#39;     &#39;file1.txt&#39; does not exist.\n&#39;     &#39;file2.txt&#39; does not exist.\n</code></pre><p> Note that the <a class=\"xref\" href=\"system.io.streamwriter#System_IO_StreamWriter_AutoFlush_\" data-linktype=\"relative-path\">AutoFlush</a> property is set to <code>true</code> before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_ForegroundColor\">\r\n    \r\n            <a id=\"System_Console_ForegroundColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForegroundColor</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the foreground color of the console.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ConsoleColor ForegroundColor { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a> that specifies the foreground color of the console; that is, the color of each character that is displayed. The default is gray.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The color specified in a set operation is not a valid member of <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A get operation for a Windows-based application, in which a console does not exist, returns <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks whether the console&#39;s background color is black and, if it is, it changes the background color to red and the foreground color to black.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ConsoleColor#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      if (Console.BackgroundColor == ConsoleColor.Black) {\n         Console.BackgroundColor = ConsoleColor.Red;\n         Console.ForegroundColor = ConsoleColor.Black;\n         Console.Clear();\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ConsoleColor#2\">Module Example\n   Public Sub Main()\n      If Console.BackgroundColor = ConsoleColor.Black Then\n         Console.BackgroundColor = ConsoleColor.Red\n         Console.ForegroundColor = ConsoleColor.Black\n         Console.Clear()\n      End If\n   End Sub\nEnd Module\n</code></pre><p> The following example saves the values of the <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a> enumeration to an array and stores the current values of the <a class=\"xref\" href=\"system.console#System_Console_BackgroundColor_\" data-linktype=\"relative-path\">BackgroundColor</a> and ForegroundColor properties to variables. It then changes the foreground color to each color in the <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a> enumeration except to the color that matches the current background, and it changes the background color to each color in the <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn&#39;t visible.) Finally, it calls the <a class=\"xref\" href=\"system.console#System_Console_ResetColor_\" data-linktype=\"relative-path\">ResetColor</a> method to restore the original console colors.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ConsoleColor#1\">Public Module Example\n   Public Sub Main()\n      &#39; Get an array with the values of ConsoleColor enumeration members.\n      Dim colors() As ConsoleColor = ConsoleColor.GetValues(GetType(ConsoleColor))\n      &#39; Save the current background and foreground colors.\n      Dim currentBackground As ConsoleColor = Console.BackgroundColor\n      Dim currentForeground As ConsoleColor = Console.ForegroundColor\n      \n      &#39; Display all foreground colors except the one that matches the background.\n      Console.WriteLine(&quot;All the foreground colors except {0}, the background color:&quot;,\n                        currentBackground)\n      For Each color In colors\n         If color = currentBackground Then Continue For\n          \n         Console.ForegroundColor = color\n         Console.WriteLine(&quot;   The foreground color is {0}.&quot;, color)\n      Next \n      Console.WriteLine()\n      \n      &#39; Restore the foreground color.\n      Console.ForegroundColor = currentForeground\n      \n      &#39; Display each background color except the one that matches the current foreground color.\n      Console.WriteLine(&quot;All the background colors except {0}, the foreground color:&quot;,\n                        currentForeground)\n      For Each color In colors\n         If color = currentForeground  then Continue For\n         Console.BackgroundColor = color\n         Console.WriteLine(&quot;   The background color is {0}.&quot;, color)\n      Next\n      &#39; Restore the original console colors.\n      Console.ResetColor\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original colors restored...&quot;)\n   End Sub\nEnd Module\n&#39;The example displays output like the following:\n&#39;       The background color is DarkCyan.\n&#39;       The background color is DarkRed.\n&#39;       The background color is DarkMagenta.\n&#39;       The background color is DarkYellow.\n&#39;       The background color is Gray.\n&#39;       The background color is DarkGray.\n&#39;       The background color is Blue.\n&#39;       The background color is Green.\n&#39;       The background color is Cyan.\n&#39;       The background color is Red.\n&#39;       The background color is Magenta.\n&#39;       The background color is Yellow.\n&#39;    \n&#39;    Original colors restored...\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ConsoleColor#1\">using System;\n\nclass Example\n{\n   public static void Main() \n   {\n      // Get an array with the values of ConsoleColor enumeration members.\n      ConsoleColor[] colors = (ConsoleColor[]) ConsoleColor.GetValues(typeof(ConsoleColor));\n      // Save the current background and foreground colors.\n      ConsoleColor currentBackground = Console.BackgroundColor;\n      ConsoleColor currentForeground = Console.ForegroundColor;\n\n      // Display all foreground colors except the one that matches the background.\n      Console.WriteLine(&quot;All the foreground colors except {0}, the background color:&quot;,\n                        currentBackground);\n      foreach (var color in colors) {\n         if (color == currentBackground) continue;\n         \n         Console.ForegroundColor = color;\n         Console.WriteLine(&quot;   The foreground color is {0}.&quot;, color);\n      }\n      Console.WriteLine();\n      // Restore the foreground color.\n      Console.ForegroundColor = currentForeground;\n      \n      // Display each background color except the one that matches the current foreground color.\n      Console.WriteLine(&quot;All the background colors except {0}, the foreground color:&quot;,\n                        currentForeground);\n      foreach (var color in colors) {\n         if (color == currentForeground) continue;\n         \n         Console.BackgroundColor = color;\n         Console.WriteLine(&quot;   The background color is {0}.&quot;, color);\n      }\n      \n      // Restore the original console colors.\n      Console.ResetColor();\n      Console.WriteLine(&quot;<br>Original colors restored...&quot;);\n   }\n}\n//The example displays output like the following:\n//    All the foreground colors except DarkCyan, the background color:\n//       The foreground color is Black.\n//       The foreground color is DarkBlue.\n//       The foreground color is DarkGreen.\n//       The foreground color is DarkRed.\n//       The foreground color is DarkMagenta.\n//       The foreground color is DarkYellow.\n//       The foreground color is Gray.\n//       The foreground color is DarkGray.\n//       The foreground color is Blue.\n//       The foreground color is Green.\n//       The foreground color is Cyan.\n//       The foreground color is Red.\n//       The foreground color is Magenta.\n//       The foreground color is Yellow.\n//       The foreground color is White.\n//    \n//    All the background colors except White, the foreground color:\n//       The background color is Black.\n//       The background color is DarkBlue.\n//       The background color is DarkGreen.\n//       The background color is DarkCyan.\n//       The background color is DarkRed.\n//       The background color is DarkMagenta.\n//       The background color is DarkYellow.\n//       The background color is Gray.\n//       The background color is DarkGray.\n//       The background color is Blue.\n//       The background color is Green.\n//       The background color is Cyan.\n//       The background color is Red.\n//       The background color is Magenta.\n//       The background color is Yellow.\n//    \n//    Original colors restored...\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_In\">\r\n    \r\n            <a id=\"System_Console_In_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">In</div>        \r\n          </div>\r\n    \r\n            <p>Gets the standard input stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.TextReader In { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> that represents the standard input stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is set to the standard input stream by default. This property can be set to another stream with the <a class=\"xref\" href=\"system.console#System_Console_SetIn_\" data-linktype=\"relative-path\">SetIn</a> method.  </p>\n<p> Read operations on the standard input stream execute synchronously. That is, they block until the specified read operation has completed. This is true even if an asynchronous method, such as <a class=\"xref\" href=\"system.io.textreader#System_IO_TextReader_ReadLineAsync_\" data-linktype=\"relative-path\">ReadLineAsync</a>, is called on the <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object returned by the In property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following sample illustrates the use of the <code>In</code> property.  </p>\n<pre><code class=\"lang-cpp\" name=\"consolein#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   TextReader^ tIn = Console::In;\n   TextWriter^ tOut = Console::Out;\n   tOut-&gt;WriteLine( &quot;Hola Mundo!&quot; );\n   tOut-&gt;Write( &quot;What is your name: &quot; );\n   String^ name = tIn-&gt;ReadLine();\n   tOut-&gt;WriteLine( &quot;Buenos Dias, {0}!&quot;, name );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"consolein#1\">using System;\nusing System.IO;\n\nclass InTest {\n    public static void Main() {\n\n        TextReader tIn = Console.In;\n        TextWriter tOut = Console.Out;\n\n        tOut.WriteLine(&quot;Hola Mundo!&quot;);\n        tOut.Write(&quot;What is your name: &quot;);\n        String name = tIn.ReadLine();\n\n        tOut.WriteLine(&quot;Buenos Dias, {0}!&quot;, name);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"consolein#1\">Imports System\nImports System.IO\n\nClass InTest\n    \n    Public Shared Sub Main()\n        Dim tIn As TextReader = Console.In\n        Dim tOut As TextWriter = Console.Out\n        \n        \n        tOut.WriteLine(&quot;Hola Mundo!&quot;)\n        tOut.Write(&quot;What is your name: &quot;)\n        Dim name As [String] = tIn.ReadLine()\n        \n        tOut.WriteLine(&quot;Buenos Dias, {0}!&quot;, name)\n    End Sub &#39;Main\nEnd Class &#39;InTest\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_InputEncoding\">\r\n    \r\n            <a id=\"System_Console_InputEncoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InputEncoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the encoding the console uses to read input.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding InputEncoding { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>The encoding used to read console input.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property value in a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred during the execution of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>Your application does not have permission to perform this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The console uses the input encoding to translate keyboard input into a corresponding character. The input encoding incorporates a code page that maps 256 keyboard character codes to individual characters. Different code pages include different special characters, typically customized for a language or a group of languages.  </p>\n<p> Starting with the .NET Framework 4, a property get operation may return a cached value instead of the console&#39;s current input encoding. This can occur if the value of the InputEncoding property is modified by some means other than an assignment to the InputEncoding property, such as calling the Windows <code>SetConsoleCP</code> function or using the <code>chcp</code> command from a PowerShell script.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_IsErrorRedirected\">\r\n    \r\n            <a id=\"System_Console_IsErrorRedirected_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsErrorRedirected</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the error output stream has been redirected from the standard error stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsErrorRedirected { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if error output is redirected; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_IsInputRedirected\">\r\n    \r\n            <a id=\"System_Console_IsInputRedirected_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsInputRedirected</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether input has been redirected from the standard input stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsInputRedirected { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if input is redirected; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_IsOutputRedirected\">\r\n    \r\n            <a id=\"System_Console_IsOutputRedirected_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsOutputRedirected</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether output has been redirected from the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsOutputRedirected { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if output is redirected; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_KeyAvailable\">\r\n    \r\n            <a id=\"System_Console_KeyAvailable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyAvailable</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a key press is available in the input stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool KeyAvailable { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a key press is available; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Standard input is redirected to a file instead of the keyboard.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The property value is returned immediately; that is, the KeyAvailable property does not block input until a key press is available.  </p>\n<p> Use the KeyAvailable property in conjunction with only the <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method, not the <a class=\"xref\" href=\"system.console#System_Console_Read_\" data-linktype=\"relative-path\">Read</a> or <a class=\"xref\" href=\"system.console#System_Console_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the KeyAvailable property to create a loop that runs until a key is pressed.  </p>\n<pre><code class=\"lang-cs\" name=\"console.keyavailable#1\">using System;\nusing System.Threading;\n\nclass Sample \n{\n    public static void Main() \n    {\n       ConsoleKeyInfo cki;\n\n       do {\n           Console.WriteLine(&quot;<br>Press a key to display; press the &#39;x&#39; key to quit.&quot;);\n\n           // Your code could perform some useful task in the following loop. However, \n           // for the sake of this example we&#39;ll merely pause for a quarter second.\n   \n           while (Console.KeyAvailable == false)\n               Thread.Sleep(250); // Loop until input is entered.\n           \n           cki = Console.ReadKey(true);\n           Console.WriteLine(&quot;You pressed the &#39;{0}&#39; key.&quot;, cki.Key);\n        } while(cki.Key != ConsoleKey.X);\n    }\n}\n/*\nThis example produces results similar to the following:\n\nPress a key to display; press the &#39;x&#39; key to quit.\nYou pressed the &#39;H&#39; key.\n\nPress a key to display; press the &#39;x&#39; key to quit.\nYou pressed the &#39;E&#39; key.\n\nPress a key to display; press the &#39;x&#39; key to quit.\nYou pressed the &#39;PageUp&#39; key.\n\nPress a key to display; press the &#39;x&#39; key to quit.\nYou pressed the &#39;DownArrow&#39; key.\n\nPress a key to display; press the &#39;x&#39; key to quit.\nYou pressed the &#39;X&#39; key.\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.keyavailable#1\">using namespace System;\nusing namespace System::Threading;\nint main()\n{\n   ConsoleKeyInfo cki;\n   do\n   {\n      Console::WriteLine( &quot;<br>Press a key to display; press the &#39;x&#39; key to quit.&quot; );\n      \n      // Your code could perform some useful task in the following loop. However, \n      // for the sake of this example we&#39;ll merely pause for a quarter second.\n      while ( Console::KeyAvailable == false )\n            Thread::Sleep( 250 );\n      cki = Console::ReadKey( true );\n      Console::WriteLine( &quot;You pressed the &#39;{0}&#39; key.&quot;, cki.Key );\n   }\n   while ( cki.Key != ConsoleKey::X );\n}\n\n/*\nThis example produces results similar to the following:\n\nPress a key to display; press the &#39;x&#39; key to quit.\nYou pressed the &#39;H&#39; key.\n\nPress a key to display; press the &#39;x&#39; key to quit.\nYou pressed the &#39;E&#39; key.\n\nPress a key to display; press the &#39;x&#39; key to quit.\nYou pressed the &#39;PageUp&#39; key.\n\nPress a key to display; press the &#39;x&#39; key to quit.\nYou pressed the &#39;DownArrow&#39; key.\n\nPress a key to display; press the &#39;x&#39; key to quit.\nYou pressed the &#39;X&#39; key.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.keyavailable#1\">Imports System.Threading\n\nClass Sample\n   Public Shared Sub Main()\n      Dim cki As ConsoleKeyInfo\n      \n      Do\n         Console.WriteLine(vbCrLf &amp; &quot;Press a key to display; press the &#39;x&#39; key to quit.&quot;)\n\n         &#39; Your code could perform some useful task in the following loop. However, \n         &#39; for the sake of this example we&#39;ll merely pause for a quarter second.\n         \n         While Console.KeyAvailable = False\n            Thread.Sleep(250) &#39; Loop until input is entered.\n         End While\n         cki = Console.ReadKey(True)\n         Console.WriteLine(&quot;You pressed the &#39;{0}&#39; key.&quot;, cki.Key)\n      Loop While cki.Key &lt;&gt; ConsoleKey.X\n   End Sub \nEnd Class \n&#39;This example produces results similar to the following:\n&#39;\n&#39;Press a key to display; press the &#39;x&#39; key to quit.\n&#39;You pressed the &#39;H&#39; key.\n&#39;\n&#39;Press a key to display; press the &#39;x&#39; key to quit.\n&#39;You pressed the &#39;E&#39; key.\n&#39;\n&#39;Press a key to display; press the &#39;x&#39; key to quit.\n&#39;You pressed the &#39;PageUp&#39; key.\n&#39;\n&#39;Press a key to display; press the &#39;x&#39; key to quit.\n&#39;You pressed the &#39;DownArrow&#39; key.\n&#39;\n&#39;Press a key to display; press the &#39;x&#39; key to quit.\n&#39;You pressed the &#39;X&#39; key.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_LargestWindowHeight\">\r\n    \r\n            <a id=\"System_Console_LargestWindowHeight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LargestWindowHeight</div>        \r\n          </div>\r\n    \r\n            <p>Gets the largest possible number of console window rows, based on the current font and screen resolution.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int LargestWindowHeight { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height of the largest possible console window measured in rows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_LargestWindowWidth\">\r\n    \r\n            <a id=\"System_Console_LargestWindowWidth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LargestWindowWidth</div>        \r\n          </div>\r\n    \r\n            <p>Gets the largest possible number of console window columns, based on the current font and screen resolution.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int LargestWindowWidth { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The width of the largest possible console window measured in columns.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_NumberLock\">\r\n    \r\n            <a id=\"System_Console_NumberLock_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NumberLock</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool NumberLock { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if NUM LOCK is turned on; <code>false</code> if NUM LOCK is turned off.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Out\">\r\n    \r\n            <a id=\"System_Console_Out_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Out</div>        \r\n          </div>\r\n    \r\n            <p>Gets the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.TextWriter Out { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> that represents the standard output stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is set to the standard output stream by default. This property can be set to another stream with the <a class=\"xref\" href=\"system.console#System_Console_SetOut_\" data-linktype=\"relative-path\">SetOut</a> method.  </p>\n<p> Note that calls to <code>Console.Out.WriteLine</code> methods are equivalent to calls to the corresponding <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Out property to display an array containing the names of files in the application&#39;s current directory to the standard output device. It then sets the standard output to a file named Files.txt and lists the array elements to the file. Finally, it sets the output to the standard output stream and again displays the array elements to the standard output device.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.Out#1\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get all files in the current directory.\n      string[] files = Directory.GetFiles(&quot;.&quot;);\n      Array.Sort(files);\n      \n      // Display the files to the current output source to the console.\n      Console.WriteLine(&quot;First display of filenames to the console:&quot;);\n      Array.ForEach(files, s =&gt; Console.Out.WriteLine(s));   \n      Console.Out.WriteLine();\n\n      // Redirect output to a file named Files.txt and write file list.\n      StreamWriter sw = new StreamWriter(@&quot;.\\Files.txt&quot;);\n      sw.AutoFlush = true;\n      Console.SetOut(sw);\n      Console.Out.WriteLine(&quot;Display filenames to a file:&quot;);\n      Array.ForEach(files, s =&gt; Console.Out.WriteLine(s));   \n      Console.Out.WriteLine();\n\n      // Close previous output stream and redirect output to standard output.\n      Console.Out.Close();\n      sw = new StreamWriter(Console.OpenStandardOutput());\n      sw.AutoFlush = true;\n      Console.SetOut(sw);\n           \n      // Display the files to the current output source to the console.\n      Console.Out.WriteLine(&quot;Second display of filenames to the console:&quot;);\n      Array.ForEach(files, s =&gt; Console.Out.WriteLine(s));   \n   }   \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.Out#1\">Imports System.IO\n\nModule Example\n   Public Sub Main()\n      &#39; Get all files in the current directory.\n      Dim files() As String = Directory.GetFiles(&quot;.&quot;)\n      Array.Sort(files)\n      \n      &#39; Display the files to the current output source to the console.\n      Console.WriteLine(&quot;First display of filenames to the console:&quot;)\n      Array.ForEach(files, Function(s) WriteOutput(s))   \n      Console.Out.WriteLine()\n\n      &#39; Redirect output to a file named Files.txt and write file list.\n      Dim sw As StreamWriter = New StreamWriter(&quot;.\\Files.txt&quot;)\n      sw.AutoFlush = True\n      Console.SetOut(sw)\n      Console.Out.WriteLine(&quot;Display filenames to a file:&quot;)\n      Array.ForEach(files, Function(s) WriteOutput(s))\n      Console.Out.WriteLine()\n\n      &#39; Close previous output stream and redirect output to standard output.\n      Console.Out.Close()\n      sw = New StreamWriter(Console.OpenStandardOutput())\n      sw.AutoFlush = True\n      Console.SetOut(sw)\n           \n      &#39; Display the files to the current output source to the console.\n      Console.Out.WriteLine(&quot;Second display of filenames to the console:&quot;)\n      Array.ForEach(files, Function(s) WriteOutput(s))   \n   End Sub\n   \n   Private Function WriteOutput(s As String) As Boolean\n      Console.Out.WriteLine(s)\n      Return True\n   End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_OutputEncoding\">\r\n    \r\n            <a id=\"System_Console_OutputEncoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OutputEncoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the encoding the console uses to write output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Text.Encoding OutputEncoding { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>The encoding used to write console output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property value in a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An error occurred during the execution of this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>Your application does not have permission to perform this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The console uses the output encoding to translate characters written by an application into corresponding console display characters. The default code page that the console uses is determined by the system locale.  </p>\n<p> Starting with the .NET Framework 4, a property get operation may return a cached value instead of the console&#39;s current output encoding. This can occur if the value of the OutputEncoding property is modified by some means other than an assignment to the OutputEncoding property, such as calling the Windows <code>SetConsoleOutputCP</code> function.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Title\">\r\n    \r\n            <a id=\"System_Console_Title_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Title</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the title to display in the console title bar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Title { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string to be displayed in the title bar of the console. The maximum length of the title string is 24500 characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>In a get operation, the retrieved title is longer than 24500 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the specified title is longer than 24500 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the specified title is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the Title property. The example displays the current title of the operating system window, waits for a key press, then displays a new title.  </p>\n<pre><code class=\"lang-cs\" name=\"console.title#1\">// This example demonstrates the Console.Title property.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    Console.WriteLine(&quot;The current console title is: \\&quot;{0}\\&quot;&quot;,\n                      Console.Title);\n    Console.WriteLine(&quot;  (Press any key to change the console title.)&quot;);\n    Console.ReadKey(true);\n    Console.Title = &quot;The title has changed!&quot;;\n    Console.WriteLine(&quot;Note that the new console title is \\&quot;{0}\\&quot;<br>&quot; +\n                      &quot;  (Press any key to quit.)&quot;, Console.Title);\n    Console.ReadKey(true);\n    }\n}\n/*\nThis example produces the following results:\n\n&gt;myTitle\nThe current console title is: &quot;Command Prompt - myTitle&quot;\n  (Press any key to change the console title.)\nNote that the new console title is &quot;The title has changed!&quot;\n  (Press any key to quit.)\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.title#1\">// This example demonstrates the Console.Title property.\nusing namespace System;\nint main()\n{\n   Console::WriteLine( &quot;The current console title is: \\&quot;{0}\\&quot;&quot;, Console::Title );\n   Console::WriteLine( &quot;  (Press any key to change the console title.)&quot; );\n   Console::ReadKey( true );\n   Console::Title = &quot;The title has changed!&quot;;\n   Console::WriteLine( &quot;Note that the new console title is \\&quot;{0}\\&quot;<br>&quot;\n   &quot;  (Press any key to quit.)&quot;, Console::Title );\n   Console::ReadKey( true );\n}\n\n/*\nThis example produces the following results:\n\n&gt;myTitle\nThe current console title is: &quot;Command Prompt - myTitle&quot;\n  (Press any key to change the console title.)\nNote that the new console title is &quot;The title has changed!&quot;\n  (Press any key to quit.)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.title#1\">&#39; This example demonstrates the Console.Title property.\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      Console.WriteLine(&quot;The current console title is: &quot;&quot;{0}&quot;&quot;&quot;, Console.Title)\n      Console.WriteLine(&quot;  (Press any key to change the console title.)&quot;)\n      Console.ReadKey(True)\n      Console.Title = &quot;The title has changed!&quot;\n      Console.WriteLine(&quot;Note that the new console title is &quot;&quot;{0}&quot;&quot;&quot; &amp; vbCrLf &amp; _\n                        &quot;  (Press any key to quit.)&quot;, Console.Title)\n      Console.ReadKey(True)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;&gt;myTitle\n&#39;The current console title is: &quot;Command Prompt - myTitle&quot;\n&#39;  (Press any key to change the console title.)\n&#39;Note that the new console title is &quot;The title has changed!&quot;\n&#39;  (Press any key to quit.)\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_TreatControlCAsInput\">\r\n    \r\n            <a id=\"System_Console_TreatControlCAsInput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TreatControlCAsInput</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the combination of the <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> modifier key and <a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TreatControlCAsInput { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if Ctrl+C is treated as ordinary input; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>Unable to get or set the input mode of the console input buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the value of the TreatControlCAsInput property is <code>false</code> and Ctrl+C is pressed, the pressed keys are not stored in the input buffer and the operating system terminates the currently executing process. This is the default value.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Use this property judiciously because setting it to <code>true</code> has such a dramatic effect. Most users expect Ctrl+C to terminate a console application. If you disable the effect of Ctrl+C, the user must remember to use Ctrl+Break to terminate the application, which is a less familiar key combination.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the TreatControlCAsInput property.  </p>\n<pre><code class=\"lang-cs\" name=\"console.readkey1#1\">using System;\n\nclass Example \n{\n   public static void Main() \n   {\n      ConsoleKeyInfo cki;\n      // Prevent example from ending if CTL+C is pressed.\n      Console.TreatControlCAsInput = true;\n\n      Console.WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;);\n      Console.WriteLine(&quot;Press the Escape (Esc) key to quit: <br>&quot;);\n      do \n      {\n         cki = Console.ReadKey();\n         Console.Write(&quot; --- You pressed &quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Alt) != 0) Console.Write(&quot;ALT+&quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Shift) != 0) Console.Write(&quot;SHIFT+&quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Control) != 0) Console.Write(&quot;CTL+&quot;);\n         Console.WriteLine(cki.Key.ToString());\n       } while (cki.Key != ConsoleKey.Escape);\n    }\n}\n// This example displays output similar to the following:\n//       Press any combination of CTL, ALT, and SHIFT, and a console key.\n//       Press the Escape (Esc) key to quit:\n//       \n//       a --- You pressed A \n//       k --- You pressed ALT+K \n//       â–º --- You pressed CTL+P \n//         --- You pressed RightArrow \n//       R --- You pressed SHIFT+R \n//                --- You pressed CTL+I \n//       j --- You pressed ALT+J \n//       O --- You pressed SHIFT+O \n//       &#167; --- You pressed CTL+U \n</code></pre><pre><code class=\"lang-cpp\" name=\"console.readkey1#1\">using namespace System;\n\nvoid main()\n{\n   ConsoleKeyInfo cki;\n   // Prevent example from ending if CTL+C is pressed.\n   Console::TreatControlCAsInput = true;\n\n   Console::WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;);\n   Console::WriteLine(&quot;Press the Escape (Esc) key to quit: <br>&quot;);\n   do \n   {\n      cki = Console::ReadKey();\n      Console::Write(&quot; --- You pressed &quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Alt) != ConsoleModifiers()) Console::Write(&quot;ALT+&quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Shift) != ConsoleModifiers()) Console::Write(&quot;SHIFT+&quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Control) != ConsoleModifiers()) Console::Write(&quot;CTL+&quot;);\n      Console::WriteLine(cki.Key.ToString());\n   } while (cki.Key != ConsoleKey::Escape);\n}\n// This example displays output similar to the following:\n//       Press any combination of CTL, ALT, and SHIFT, and a console key.\n//       Press the Escape (Esc) key to quit:\n//       \n//       a --- You pressed A \n//       k --- You pressed ALT+K \n//       â–º --- You pressed CTL+P \n//         --- You pressed RightArrow \n//       R --- You pressed SHIFT+R \n//                --- You pressed CTL+I \n//       j --- You pressed ALT+J \n//       O --- You pressed SHIFT+O \n//       &#167; --- You pressed CTL+U }\n</code></pre><pre><code class=\"lang-vb\" name=\"console.readkey1#1\">Class Example\n   Public Shared Sub Main()\n      Dim cki As ConsoleKeyInfo\n      &#39; Prevent example from ending if CTL+C is pressed.\n      Console.TreatControlCAsInput = True\n\n      Console.WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;)\n      Console.WriteLine(&quot;Press the Escape (Esc) key to quit: &quot; + vbCrLf)\n      Do\n         cki = Console.ReadKey()\n         Console.Write(&quot; --- You pressed &quot;)\n         If (cki.Modifiers And ConsoleModifiers.Alt) &lt;&gt; 0 Then Console.Write(&quot;ALT+&quot;)\n         If (cki.Modifiers And ConsoleModifiers.Shift) &lt;&gt; 0 Then Console.Write(&quot;SHIFT+&quot;)\n         If (cki.Modifiers And ConsoleModifiers.Control) &lt;&gt; 0 Then Console.Write(&quot;CTL+&quot;)\n         Console.WriteLine(cki.Key.ToString)\n      Loop While cki.Key &lt;&gt; ConsoleKey.Escape\n   End Sub \nEnd Class \n&#39; This example displays output similar to the following:\n&#39;       Press any combination of CTL, ALT, and SHIFT, and a console key.\n&#39;       Press the Escape (Esc) key to quit:\n&#39;       \n&#39;       a --- You pressed A \n&#39;       k --- You pressed ALT+K \n&#39;       â–º --- You pressed CTL+P \n&#39;         --- You pressed RightArrow \n&#39;       R --- You pressed SHIFT+R \n&#39;                --- You pressed CTL+I \n&#39;       j --- You pressed ALT+J \n&#39;       O --- You pressed SHIFT+O \n&#39;       &#167; --- You pressed CTL+U \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WindowHeight\">\r\n    \r\n            <a id=\"System_Console_WindowHeight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowHeight</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the height of the console window area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int WindowHeight { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The height of the console window measured in rows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of the <span class=\"xref\">stem.Console.WindowWidth*</span> property or the value of the WindowHeight property is less than or equal to 0.  </p>\n<p> -or-  </p>\n<p> The value of the WindowHeight property plus the value of the <span class=\"xref\">stem.Console.WindowTop*</span> property is greater than or equal to <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> -or-  </p>\n<p> The value of the <span class=\"xref\">stem.Console.WindowWidth*</span> property or the value of the WindowHeight property is greater than the largest possible window width or height for the current screen resolution and console font.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>Error reading or writing information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Attempting to set the value of the WindowHeight property when output is redirected throws either an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> or an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> exception. To prevent an exception, you can set the value of this property only if the <a class=\"xref\" href=\"system.console#System_Console_IsOutputRedirected_\" data-linktype=\"relative-path\">IsOutputRedirected</a> property returns <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the <a class=\"xref\" href=\"system.console#System_Console_SetWindowSize_\" data-linktype=\"relative-path\">SetWindowSize</a> method, and the <a class=\"xref\" href=\"system.console#System_Console_WindowWidth_\" data-linktype=\"relative-path\">WindowWidth</a> and WindowHeight properties. You must run the example to see the full effect of changing the console window size.  </p>\n<p> The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.setwindowsize#1\">// This example demonstrates the Console.SetWindowSize method,\n//                           the Console.WindowWidth property, \n//                       and the Console.WindowHeight property.\nusing namespace System;\nint main()\n{\n   int origWidth;\n   int width;\n   int origHeight;\n   int height;\n   String^ m1 = &quot;The current window width is {0}, and the &quot;\n   &quot;current window height is {1}.&quot;;\n   String^ m2 = &quot;The new window width is {0}, and the new &quot;\n   &quot;window height is {1}.&quot;;\n   String^ m4 = &quot;  (Press any key to continue...)&quot;;\n   \n   //\n   // Step 1: Get the current window dimensions.\n   //\n   origWidth = Console::WindowWidth;\n   origHeight = Console::WindowHeight;\n   Console::WriteLine( m1, Console::WindowWidth, Console::WindowHeight );\n   Console::WriteLine( m4 );\n   Console::ReadKey( true );\n   \n   //\n   // Step 2: Cut the window to 1/4 its original size.\n   //\n   width = origWidth / 2;\n   height = origHeight / 2;\n   Console::SetWindowSize( width, height );\n   Console::WriteLine( m2, Console::WindowWidth, Console::WindowHeight );\n   Console::WriteLine( m4 );\n   Console::ReadKey( true );\n   \n   //\n   // Step 3: Restore the window to its original size.\n   //\n   Console::SetWindowSize( origWidth, origHeight );\n   Console::WriteLine( m1, Console::WindowWidth, Console::WindowHeight );\n}\n\n/*\nThis example produces the following results:\n\nThe current window width is 85, and the current window height is 43.\n  (Press any key to continue...)\nThe new window width is 42, and the new window height is 21.\n  (Press any key to continue...)\nThe current window width is 85, and the current window height is 43.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.setwindowsize#1\">&#39; This example demonstrates the Console.SetWindowSize method,\n&#39;                           the Console.WindowWidth property, \n&#39;                       and the Console.WindowHeight property.\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim origWidth, width As Integer\n      Dim origHeight, height As Integer\n      Dim m1 As String = &quot;The current window width is {0}, and the &quot; &amp; _\n                         &quot;current window height is {1}.&quot;\n      Dim m2 As String = &quot;The new window width is {0}, and the new &quot; &amp; _\n                         &quot;window height is {1}.&quot;\n      Dim m4 As String = &quot;  (Press any key to continue...)&quot;\n      &#39;\n      &#39; Step 1: Get the current window dimensions.\n      &#39;\n      origWidth = Console.WindowWidth\n      origHeight = Console.WindowHeight\n      Console.WriteLine(m1, Console.WindowWidth, Console.WindowHeight)\n      Console.WriteLine(m4)\n      Console.ReadKey(True)\n      &#39;\n      &#39; Step 2: Cut the window to 1/4 its original size.\n      &#39;\n      width = origWidth / 2\n      height = origHeight / 2\n      Console.SetWindowSize(width, height)\n      Console.WriteLine(m2, Console.WindowWidth, Console.WindowHeight)\n      Console.WriteLine(m4)\n      Console.ReadKey(True)\n      &#39;\n      &#39; Step 3: Restore the window to its original size.\n      &#39;\n      Console.SetWindowSize(origWidth, origHeight)\n      Console.WriteLine(m1, Console.WindowWidth, Console.WindowHeight)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The current window width is 85, and the current window height is 43.\n&#39;  (Press any key to continue...)\n&#39;The new window width is 42, and the new window height is 21.\n&#39;  (Press any key to continue...)\n&#39;The current window width is 85, and the current window height is 43.\n&#39;\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"console.setwindowsize#1\">// This example demonstrates the Console.SetWindowSize method,\n//                           the Console.WindowWidth property, \n//                       and the Console.WindowHeight property.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    int origWidth, width;  \n    int origHeight, height;\n    string m1 = &quot;The current window width is {0}, and the &quot; +\n                &quot;current window height is {1}.&quot;;\n    string m2 = &quot;The new window width is {0}, and the new &quot; +\n                &quot;window height is {1}.&quot;;\n    string m4 = &quot;  (Press any key to continue...)&quot;;\n//\n// Step 1: Get the current window dimensions.\n//\n    origWidth  = Console.WindowWidth;\n    origHeight = Console.WindowHeight;\n    Console.WriteLine(m1, Console.WindowWidth,\n                          Console.WindowHeight);\n    Console.WriteLine(m4);\n    Console.ReadKey(true); \n//\n// Step 2: Cut the window to 1/4 its original size.\n//\n    width  = origWidth/2;\n    height = origHeight/2;\n    Console.SetWindowSize(width, height);\n    Console.WriteLine(m2, Console.WindowWidth,\n                          Console.WindowHeight);\n    Console.WriteLine(m4);\n    Console.ReadKey(true); \n//\n// Step 3: Restore the window to its original size.\n//\n    Console.SetWindowSize(origWidth, origHeight);\n    Console.WriteLine(m1, Console.WindowWidth,\n                          Console.WindowHeight);\n    }\n}\n/*\nThis example produces the following results:\n\nThe current window width is 85, and the current window height is 43.\n  (Press any key to continue...)\nThe new window width is 42, and the new window height is 21.\n  (Press any key to continue...)\nThe current window width is 85, and the current window height is 43.\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WindowLeft\">\r\n    \r\n            <a id=\"System_Console_WindowLeft_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowLeft</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the leftmost position of the console window area relative to the screen buffer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int WindowLeft { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The leftmost console window position measured in columns.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the value to be assigned is less than zero.  </p>\n<p> -or-  </p>\n<p> As a result of the assignment, WindowLeft plus <span class=\"xref\">stem.Console.WindowWidth*</span> would exceed <span class=\"xref\">stem.Console.BufferWidth*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>Error reading or writing information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The console represents a rectangular window into a larger rectangular buffer area. Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns. The dimensions of the buffer area are defined by the <a class=\"xref\" href=\"system.console#System_Console_BufferHeight_\" data-linktype=\"relative-path\">BufferHeight</a> and <a class=\"xref\" href=\"system.console#System_Console_BufferWidth_\" data-linktype=\"relative-path\">BufferWidth</a> properties. The dimensions of the console area are defined by the <a class=\"xref\" href=\"system.console#System_Console_WindowHeight_\" data-linktype=\"relative-path\">WindowHeight</a> and <a class=\"xref\" href=\"system.console#System_Console_WindowWidth_\" data-linktype=\"relative-path\">WindowWidth</a> properties. The WindowLeft property determines which column of the buffer area is displayed in the first column of the console window. The value of the WindowLeft property can range from 0 to <a class=\"xref\" href=\"system.console#System_Console_BufferWidth_\" data-linktype=\"relative-path\">BufferWidth</a> - <a class=\"xref\" href=\"system.console#System_Console_WindowWidth_\" data-linktype=\"relative-path\">WindowWidth</a>. Attempting to set it to a value outside that range throws an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a>.  </p>\n<p> When a console window first opens, the default value of the WindowLeft property is zero, which indicates that the first column shown by the console corresponds to the first column (the column at position zero) in the buffer area. The default width of both the console window and the buffer area is 80 columns. This means that the WindowLeft property can be modified only if the console window is made narrower or the buffer area is made wider.  </p>\n<p> Note that if the width of the buffer area exceeds the width of the console window, the value of the WindowLeft property is automatically adjusted when the user uses the horizontal scroll bar to define the window&#39;s relationship to the buffer area.  </p>\n<p> Attempting to set the value of the WindowLeft property when output is redirected throws an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> exception. To prevent the exception, you can set the value of this property only if the <a class=\"xref\" href=\"system.console#System_Console_IsOutputRedirected_\" data-linktype=\"relative-path\">IsOutputRedirected</a> property returns <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example opens an 80-column console window and defines a buffer area that is 120 columns wide. It displays information on window and buffer size, and then waits for the user to press either the LEFT ARROW key or the RIGHT ARROW key. In the former case, it decrements the value of the WindowLeft property by one if the result is a legal value. In the latter case, it increases the value of the WindowLeft property by one if the result would be legal. Note that the example does not have to handle an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a>, because it checks that the value to be assigned to the WindowLeft property is not negative and does not cause the sum of the WindowLeft and <a class=\"xref\" href=\"system.console#System_Console_WindowWidth_\" data-linktype=\"relative-path\">WindowWidth</a> properties to exceed the <a class=\"xref\" href=\"system.console#System_Console_BufferWidth_\" data-linktype=\"relative-path\">BufferWidth</a> property value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console.WindowLeft#1\">Module Example\n   Public Sub Main()\n      Dim key As ConsoleKeyInfo\n      Dim moved As Boolean = False\n            \n      Console.BufferWidth = 120\n      Console.Clear()\n      \n      ShowConsoleStatistics()\n      Do While True\n         key = Console.ReadKey(True)\n         If key.Key = ConsoleKey.LeftArrow Then\n            Dim pos As Integer = Console.WindowLeft - 1\n            If pos &gt;= 0 And pos + Console.WindowWidth &lt;= Console.BufferWidth Then \n               Console.WindowLeft = pos\n               moved = True\n            End If       \n         ElseIf key.Key = ConsoleKey.RightArrow Then\n            Dim pos As Integer = Console.WindowLeft + 1\n            If pos + Console.WindowWidth &lt;= Console.BufferWidth Then \n               Console.WindowLeft = pos\n               moved = True\n            End If\n         End If\n         If moved Then ShowConsoleStatistics() : moved = False\n         Console.WriteLine()\n      Loop\n   End Sub\n   \n   Private Sub ShowConsoleStatistics()\n      Console.WriteLine(&quot;Console statistics:&quot;)\n      Console.WriteLine(&quot;   Buffer: {0} x {1}&quot;, Console.BufferHeight, Console.BufferWidth)\n      Console.WriteLine(&quot;   Window: {0} x {1}&quot;, Console.WindowHeight, Console.WindowWidth)\n      Console.WriteLine(&quot;   Window starts at {0}.&quot;, Console.WindowLeft)\n      Console.WriteLine(&quot;Press &lt;- or -&gt; to move window, Ctrl+C to exit.&quot;)\n   End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.WindowLeft#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      ConsoleKeyInfo key;\n      bool moved = false;\n            \n      Console.BufferWidth = 120;\n      Console.Clear();\n      \n      ShowConsoleStatistics();\n      do \n      {\n         key = Console.ReadKey(true);\n         if (key.Key == ConsoleKey.LeftArrow)\n         {\n            int pos = Console.WindowLeft - 1;\n            if (pos &gt;= 0 &amp;&amp; pos + Console.WindowWidth &lt;= Console.BufferWidth)\n            { \n               Console.WindowLeft = pos;\n               moved = true;\n            }       \n         } \n         else if (key.Key == ConsoleKey.RightArrow)\n         {\n            int pos = Console.WindowLeft + 1;\n            if (pos + Console.WindowWidth &lt;= Console.BufferWidth)\n            { \n               Console.WindowLeft = pos;\n               moved = true;\n            }\n         }\n         if (moved)\n         { \n            ShowConsoleStatistics(); \n            moved = false;\n         }   \n         Console.WriteLine();\n      } while (true);\n   }\n\n   private static void ShowConsoleStatistics()\n   {\n      Console.WriteLine(&quot;Console statistics:&quot;);\n      Console.WriteLine(&quot;   Buffer: {0} x {1}&quot;, Console.BufferHeight, Console.BufferWidth);\n      Console.WriteLine(&quot;   Window: {0} x {1}&quot;, Console.WindowHeight, Console.WindowWidth);\n      Console.WriteLine(&quot;   Window starts at {0}.&quot;, Console.WindowLeft);\n      Console.WriteLine(&quot;Press &lt;- or -&gt; to move window, Ctrl+C to exit.&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console.WindowLeft#1\">using namespace System;\n\nvoid ShowConsoleStatistics()\n{\n   Console::WriteLine(&quot;Console statistics:&quot;);\n   Console::WriteLine(&quot;   Buffer: {0} x {1}&quot;, Console::BufferHeight, Console::BufferWidth);\n   Console::WriteLine(&quot;   Window: {0} x {1}&quot;, Console::WindowHeight, Console::WindowWidth);\n   Console::WriteLine(&quot;   Window starts at {0}.&quot;, Console::WindowLeft);\n   Console::WriteLine(&quot;Press &lt;- or -&gt; to move window, Ctrl+C to exit.&quot;);\n}\n\nint main()\n{\n   ConsoleKeyInfo key;\n   bool moved = false;\n\n   Console::BufferWidth = 120;\n   Console::Clear();\n\n   ShowConsoleStatistics();\n   \n   do {\n      key = Console::ReadKey(true);\n      if (key.Key == ConsoleKey::LeftArrow)\n      {\n         int pos = Console::WindowLeft - 1;\n         if (pos &gt;= 0 &amp;&amp; pos + Console::WindowWidth &lt;= Console::BufferWidth)\n         { \n            Console::WindowLeft = pos;\n            moved = true;\n         }       \n      } \n      else if (key.Key == ConsoleKey::RightArrow)\n      {\n            int pos = Console::WindowLeft + 1;\n            if (pos + Console::WindowWidth &lt;= Console::BufferWidth)\n            { \n               Console::WindowLeft = pos;\n               moved = true;\n            }\n      }\n      if (moved)\n      { \n         ShowConsoleStatistics(); \n         moved = false;\n      }   \n      Console::WriteLine();\n   } while (true);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WindowTop\">\r\n    \r\n            <a id=\"System_Console_WindowTop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowTop</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the top position of the console window area relative to the screen buffer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int WindowTop { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The uppermost console window position measured in rows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the value to be assigned is less than zero.  </p>\n<p> -or-  </p>\n<p> As a result of the assignment, WindowTop plus <span class=\"xref\">stem.Console.WindowHeight*</span> would exceed <span class=\"xref\">stem.Console.BufferHeight*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>Error reading or writing information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The console represents a rectangular window into a larger rectangular buffer area. Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns. The dimensions of the buffer area are defined by the <a class=\"xref\" href=\"system.console#System_Console_BufferHeight_\" data-linktype=\"relative-path\">BufferHeight</a> and <a class=\"xref\" href=\"system.console#System_Console_BufferWidth_\" data-linktype=\"relative-path\">BufferWidth</a> properties. The dimensions of the console area are defined by the <a class=\"xref\" href=\"system.console#System_Console_WindowHeight_\" data-linktype=\"relative-path\">WindowHeight</a> and <a class=\"xref\" href=\"system.console#System_Console_WindowWidth_\" data-linktype=\"relative-path\">WindowWidth</a> properties. The WindowTop property determines which row of the buffer area is displayed in the first column of the console window. The value of the WindowTop property can range from 0 to <a class=\"xref\" href=\"system.console#System_Console_BufferHeight_\" data-linktype=\"relative-path\">BufferHeight</a> - <a class=\"xref\" href=\"system.console#System_Console_WindowHeight_\" data-linktype=\"relative-path\">WindowHeight</a>. Attempting to set it to a value outside that range throws an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a>.  </p>\n<p> Attempting to set the value of the WindowTop property when output is redirected throws an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> exception. To prevent the exception, you can set the value of this property only if the <a class=\"xref\" href=\"system.console#System_Console_IsOutputRedirected_\" data-linktype=\"relative-path\">IsOutputRedirected</a> property returns <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.console#System_Console_WindowLeft_\" data-linktype=\"relative-path\">WindowLeft</a>, WindowTop, <a class=\"xref\" href=\"system.console#System_Console_WindowWidth_\" data-linktype=\"relative-path\">WindowWidth</a>, <a class=\"xref\" href=\"system.console#System_Console_WindowHeight_\" data-linktype=\"relative-path\">WindowHeight</a>, <a class=\"xref\" href=\"system.console#System_Console_BufferWidth_\" data-linktype=\"relative-path\">BufferWidth</a>, <a class=\"xref\" href=\"system.console#System_Console_BufferHeight_\" data-linktype=\"relative-path\">BufferHeight</a>, and <a class=\"xref\" href=\"system.console#System_Console_CursorVisible_\" data-linktype=\"relative-path\">CursorVisible</a> properties; and the <a class=\"xref\" href=\"system.console#System_Console_SetWindowPosition_\" data-linktype=\"relative-path\">SetWindowPosition</a>, <a class=\"xref\" href=\"system.console#System_Console_SetBufferSize_\" data-linktype=\"relative-path\">SetBufferSize</a>, and <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.windowLT#1\">// This example demonstrates the Console.WindowLeft and\n//                               Console.WindowTop properties.\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::IO;\n\n//\nint saveBufferWidth;\nint saveBufferHeight;\nint saveWindowHeight;\nint saveWindowWidth;\nbool saveCursorVisible;\n\n//\nint main()\n{\n   String^ m1 = &quot;1) Press the cursor keys to move the console window.<br>&quot;\n   &quot;2) Press any key to begin. When you&#39;re finished...<br>&quot;\n   &quot;3) Press the Escape key to quit.&quot;;\n   String^ g1 = &quot;+----&quot;;\n   String^ g2 = &quot;|    &quot;;\n   String^ grid1;\n   String^ grid2;\n   StringBuilder^ sbG1 = gcnew StringBuilder;\n   StringBuilder^ sbG2 = gcnew StringBuilder;\n   ConsoleKeyInfo cki;\n   int y;\n   \n   //\n   try\n   {\n      saveBufferWidth = Console::BufferWidth;\n      saveBufferHeight = Console::BufferHeight;\n      saveWindowHeight = Console::WindowHeight;\n      saveWindowWidth = Console::WindowWidth;\n      saveCursorVisible = Console::CursorVisible;\n      \n      //\n      Console::Clear();\n      Console::WriteLine( m1 );\n      Console::ReadKey( true );\n      \n      // Set the smallest possible window size before setting the buffer size.\n      Console::SetWindowSize( 1, 1 );\n      Console::SetBufferSize( 80, 80 );\n      Console::SetWindowSize( 40, 20 );\n      \n      // Create grid lines to fit the buffer. (The buffer width is 80, but\n      // this same technique could be used with an arbitrary buffer width.)\n      for ( y = 0; y &lt; Console::BufferWidth / g1-&gt;Length; y++ )\n      {\n         sbG1-&gt;Append( g1 );\n         sbG2-&gt;Append( g2 );\n\n      }\n      sbG1-&gt;Append( g1, 0, Console::BufferWidth % g1-&gt;Length );\n      sbG2-&gt;Append( g2, 0, Console::BufferWidth % g2-&gt;Length );\n      grid1 = sbG1-&gt;ToString();\n      grid2 = sbG2-&gt;ToString();\n      Console::CursorVisible = false;\n      Console::Clear();\n      for ( y = 0; y &lt; Console::BufferHeight - 1; y++ )\n      {\n         if ( y % 3 == 0 )\n                  Console::Write( grid1 );\n         else\n                  Console::Write( grid2 );\n\n      }\n      Console::SetWindowPosition( 0, 0 );\n      do\n      {\n         cki = Console::ReadKey( true );\n         switch ( cki.Key )\n         {\n            case ConsoleKey::LeftArrow:\n               if ( Console::WindowLeft &gt; 0 )\n                              Console::SetWindowPosition( Console::WindowLeft - 1, Console::WindowTop );\n               break;\n\n            case ConsoleKey::UpArrow:\n               if ( Console::WindowTop &gt; 0 )\n                              Console::SetWindowPosition( Console::WindowLeft, Console::WindowTop - 1 );\n               break;\n\n            case ConsoleKey::RightArrow:\n               if ( Console::WindowLeft &lt; (Console::BufferWidth - Console::WindowWidth) )\n                              Console::SetWindowPosition( Console::WindowLeft + 1, Console::WindowTop );\n               break;\n\n            case ConsoleKey::DownArrow:\n               if ( Console::WindowTop &lt; (Console::BufferHeight - Console::WindowHeight) )\n                              Console::SetWindowPosition( Console::WindowLeft, Console::WindowTop + 1 );\n               break;\n         }\n      }\n      while ( cki.Key != ConsoleKey::Escape );\n   }\n   catch ( IOException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      Console::Clear();\n      Console::SetWindowSize( 1, 1 );\n      Console::SetBufferSize( saveBufferWidth, saveBufferHeight );\n      Console::SetWindowSize( saveWindowWidth, saveWindowHeight );\n      Console::CursorVisible = saveCursorVisible;\n   }\n\n} // end Main\n\n\n/*\nThis example produces results similar to the following:\n\n1) Press the cursor keys to move the console window.\n2) Press any key to begin. When you&#39;re finished...\n3) Press the Escape key to quit.\n\n...\n\n+----+----+----+-\n|    |    |    |\n|    |    |    |\n+----+----+----+-\n|    |    |    |\n|    |    |    |\n+----+----+----+-\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.windowLT#1\">&#39; This example demonstrates the Console.WindowLeft and\n&#39;                               Console.WindowTop properties.\nImports System.IO\nImports System.Text\n\nClass Sample\n   Public Shared saveBufferWidth As Integer\n   Public Shared saveBufferHeight As Integer\n   Public Shared saveWindowHeight As Integer\n   Public Shared saveWindowWidth As Integer\n   Public Shared saveCursorVisible As Boolean\n   \n   Public Shared Sub Main()\n      Dim m1 As String = _\n          &quot;1) Press the cursor keys to move the console window.&quot; &amp; vbCrlf &amp; _\n          &quot;2) Press any key to begin. When you&#39;re finished...&quot;   &amp; vbCrlf &amp; _\n          &quot;3) Press the Escape key to quit.&quot;\n      Dim g1 As String = &quot;+----&quot;\n      Dim g2 As String = &quot;|    &quot;\n      Dim grid1 As String\n      Dim grid2 As String\n      Dim sbG1 As New StringBuilder()\n      Dim sbG2 As New StringBuilder()\n      Dim cki As ConsoleKeyInfo\n      Dim y As Integer\n      &#39;\n      Try\n         saveBufferWidth = Console.BufferWidth\n         saveBufferHeight = Console.BufferHeight\n         saveWindowHeight = Console.WindowHeight\n         saveWindowWidth = Console.WindowWidth\n         saveCursorVisible = Console.CursorVisible\n         &#39;\n         Console.Clear()\n         Console.WriteLine(m1)\n         Console.ReadKey(True)\n         \n         &#39; Set the smallest possible window size before setting the buffer size.\n         Console.SetWindowSize(1, 1)\n         Console.SetBufferSize(80, 80)\n         Console.SetWindowSize(40, 20)\n         \n         &#39; Create grid lines to fit the buffer. (The buffer width is 80, but\n         &#39; this same technique could be used with an arbitrary buffer width.)\n         For y = 0 To (Console.BufferWidth / g1.Length) - 1\n            sbG1.Append(g1)\n            sbG2.Append(g2)\n         Next y\n         sbG1.Append(g1, 0, Console.BufferWidth Mod g1.Length)\n         sbG2.Append(g2, 0, Console.BufferWidth Mod g2.Length)\n         grid1 = sbG1.ToString()\n         grid2 = sbG2.ToString()\n         \n         Console.CursorVisible = False\n         Console.Clear()\n         For y = 0 To (Console.BufferHeight - 2)\n            If y Mod 3 = 0 Then\n               Console.Write(grid1)\n            Else\n               Console.Write(grid2)\n            End If\n         Next y \n         &#39;\n         Console.SetWindowPosition(0, 0)\n         Do\n            cki = Console.ReadKey(True)\n            Select Case cki.Key\n               Case ConsoleKey.LeftArrow\n                  If Console.WindowLeft &gt; 0 Then\n                     Console.SetWindowPosition(Console.WindowLeft - 1, Console.WindowTop)\n                  End If\n               Case ConsoleKey.UpArrow\n                  If Console.WindowTop &gt; 0 Then\n                     Console.SetWindowPosition(Console.WindowLeft, Console.WindowTop - 1)\n                  End If\n               Case ConsoleKey.RightArrow\n                  If Console.WindowLeft &lt; Console.BufferWidth - Console.WindowWidth Then\n                     Console.SetWindowPosition(Console.WindowLeft + 1, Console.WindowTop)\n                  End If\n               Case ConsoleKey.DownArrow\n                  If Console.WindowTop &lt; Console.BufferHeight - Console.WindowHeight Then\n                     Console.SetWindowPosition(Console.WindowLeft, Console.WindowTop + 1)\n                  End If\n            End Select\n         Loop While cki.Key &lt;&gt; ConsoleKey.Escape\n      &#39; end do-while\n      &#39; end try\n      Catch e As IOException\n         Console.WriteLine(e.Message)\n      Finally\n         Console.Clear()\n         Console.SetWindowSize(1, 1)\n         Console.SetBufferSize(saveBufferWidth, saveBufferHeight)\n         Console.SetWindowSize(saveWindowWidth, saveWindowHeight)\n         Console.CursorVisible = saveCursorVisible\n      End Try\n   End Sub &#39;Main &#39; end Main\nEnd Class &#39;Sample &#39; end Sample\n&#39;\n&#39;This example produces results similar to the following:\n&#39;\n&#39;1) Press the cursor keys to move the console window.\n&#39;2) Press any key to begin. When you&#39;re finished...\n&#39;3) Press the Escape key to quit.\n&#39;\n&#39;...\n&#39;\n&#39;+----+----+----+-\n&#39;|    |    |    |\n&#39;|    |    |    |\n&#39;+----+----+----+-\n&#39;|    |    |    |\n&#39;|    |    |    |\n&#39;+----+----+----+-\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"console.windowLT#1\">// This example demonstrates the Console.WindowLeft and\n//                               Console.WindowTop properties.\nusing System;\nusing System.Text;\nusing System.IO;\n//\nclass Sample \n{\n    public static int saveBufferWidth;\n    public static int saveBufferHeight;\n    public static int saveWindowHeight;\n    public static int saveWindowWidth;\n    public static bool saveCursorVisible;\n//\n    public static void Main() \n    {\n    string m1 = &quot;1) Press the cursor keys to move the console window.<br>&quot; +\n                &quot;2) Press any key to begin. When you&#39;re finished...<br>&quot; +\n                &quot;3) Press the Escape key to quit.&quot;;\n    string g1 = &quot;+----&quot;;\n    string g2 = &quot;|    &quot;;\n    string grid1;\n    string grid2;\n    StringBuilder sbG1 = new StringBuilder();\n    StringBuilder sbG2 = new StringBuilder();\n    ConsoleKeyInfo cki;\n    int y;\n//\n    try \n    {\n    saveBufferWidth  = Console.BufferWidth;\n    saveBufferHeight = Console.BufferHeight;\n    saveWindowHeight = Console.WindowHeight;\n    saveWindowWidth  = Console.WindowWidth;\n    saveCursorVisible = Console.CursorVisible;\n//\n    Console.Clear();\n    Console.WriteLine(m1);\n    Console.ReadKey(true);\n\n// Set the smallest possible window size before setting the buffer size.\n    Console.SetWindowSize(1, 1);\n    Console.SetBufferSize(80, 80);\n    Console.SetWindowSize(40, 20);\n\n// Create grid lines to fit the buffer. (The buffer width is 80, but\n// this same technique could be used with an arbitrary buffer width.)\n    for (y = 0; y &lt; Console.BufferWidth/g1.Length; y++)\n        {\n        sbG1.Append(g1);\n        sbG2.Append(g2);\n        }\n    sbG1.Append(g1, 0, Console.BufferWidth%g1.Length);\n    sbG2.Append(g2, 0, Console.BufferWidth%g2.Length);\n    grid1 = sbG1.ToString();\n    grid2 = sbG2.ToString();\n\n    Console.CursorVisible = false;\n    Console.Clear();\n    for (y = 0; y &lt; Console.BufferHeight-1; y++)\n        {\n        if (y%3 == 0)\n            Console.Write(grid1);\n        else\n            Console.Write(grid2);\n        }\n\n    Console.SetWindowPosition(0, 0);\n    do\n        {\n        cki = Console.ReadKey(true);\n        switch (cki.Key) \n            {\n            case ConsoleKey.LeftArrow:\n                if (Console.WindowLeft &gt; 0) \n                    Console.SetWindowPosition(\n                            Console.WindowLeft-1, Console.WindowTop);\n                break;\n            case ConsoleKey.UpArrow:\n                if (Console.WindowTop &gt; 0) \n                    Console.SetWindowPosition(\n                            Console.WindowLeft, Console.WindowTop-1);\n                break;\n            case ConsoleKey.RightArrow:\n                if (Console.WindowLeft &lt; (Console.BufferWidth-Console.WindowWidth)) \n                    Console.SetWindowPosition(\n                            Console.WindowLeft+1, Console.WindowTop);\n                break;\n            case ConsoleKey.DownArrow:\n                if (Console.WindowTop &lt; (Console.BufferHeight-Console.WindowHeight)) \n                    Console.SetWindowPosition(\n                            Console.WindowLeft, Console.WindowTop+1);\n                break;\n            }\n        } \n    while (cki.Key != ConsoleKey.Escape);  // end do-while\n    } // end try\n    catch (IOException e) \n        {\n        Console.WriteLine(e.Message);\n        }\n    finally \n        {\n        Console.Clear();\n        Console.SetWindowSize(1, 1);\n        Console.SetBufferSize(saveBufferWidth, saveBufferHeight);\n        Console.SetWindowSize(saveWindowWidth, saveWindowHeight);\n        Console.CursorVisible = saveCursorVisible;\n        }\n    } // end Main\n} // end Sample\n/*\nThis example produces results similar to the following:\n\n1) Press the cursor keys to move the console window.\n2) Press any key to begin. When you&#39;re finished...\n3) Press the Escape key to quit.\n\n...\n\n+----+----+----+-\n|    |    |    |\n|    |    |    |\n+----+----+----+-\n|    |    |    |\n|    |    |    |\n+----+----+----+-\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WindowWidth\">\r\n    \r\n            <a id=\"System_Console_WindowWidth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WindowWidth</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the width of the console window.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int WindowWidth { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The width of the console window measured in columns.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value of the WindowWidth property or the value of the <span class=\"xref\">stem.Console.WindowHeight*</span> property is less than or equal to 0.  </p>\n<p> -or-  </p>\n<p> The value of the <span class=\"xref\">stem.Console.WindowHeight*</span> property plus the value of the <span class=\"xref\">stem.Console.WindowTop*</span> property is greater than or equal to <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> -or-  </p>\n<p> The value of the WindowWidth property or the value of the <span class=\"xref\">stem.Console.WindowHeight*</span> property is greater than the largest possible window width or height for the current screen resolution and console font.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>Error reading or writing information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Attempting to set the value of the WindowWidth property when output is redirected throws either an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> or an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> exception. To prevent an exception, you can set the value of this property only if the <a class=\"xref\" href=\"system.console#System_Console_IsOutputRedirected_\" data-linktype=\"relative-path\">IsOutputRedirected</a> property returns <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the <a class=\"xref\" href=\"system.console#System_Console_SetWindowSize_\" data-linktype=\"relative-path\">SetWindowSize</a> method, and the WindowWidth and <a class=\"xref\" href=\"system.console#System_Console_WindowHeight_\" data-linktype=\"relative-path\">WindowHeight</a> properties. You must run the example to see the full effect of changing the console window size.  </p>\n<p> The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.setwindowsize#1\">// This example demonstrates the Console.SetWindowSize method,\n//                           the Console.WindowWidth property, \n//                       and the Console.WindowHeight property.\nusing namespace System;\nint main()\n{\n   int origWidth;\n   int width;\n   int origHeight;\n   int height;\n   String^ m1 = &quot;The current window width is {0}, and the &quot;\n   &quot;current window height is {1}.&quot;;\n   String^ m2 = &quot;The new window width is {0}, and the new &quot;\n   &quot;window height is {1}.&quot;;\n   String^ m4 = &quot;  (Press any key to continue...)&quot;;\n   \n   //\n   // Step 1: Get the current window dimensions.\n   //\n   origWidth = Console::WindowWidth;\n   origHeight = Console::WindowHeight;\n   Console::WriteLine( m1, Console::WindowWidth, Console::WindowHeight );\n   Console::WriteLine( m4 );\n   Console::ReadKey( true );\n   \n   //\n   // Step 2: Cut the window to 1/4 its original size.\n   //\n   width = origWidth / 2;\n   height = origHeight / 2;\n   Console::SetWindowSize( width, height );\n   Console::WriteLine( m2, Console::WindowWidth, Console::WindowHeight );\n   Console::WriteLine( m4 );\n   Console::ReadKey( true );\n   \n   //\n   // Step 3: Restore the window to its original size.\n   //\n   Console::SetWindowSize( origWidth, origHeight );\n   Console::WriteLine( m1, Console::WindowWidth, Console::WindowHeight );\n}\n\n/*\nThis example produces the following results:\n\nThe current window width is 85, and the current window height is 43.\n  (Press any key to continue...)\nThe new window width is 42, and the new window height is 21.\n  (Press any key to continue...)\nThe current window width is 85, and the current window height is 43.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.setwindowsize#1\">&#39; This example demonstrates the Console.SetWindowSize method,\n&#39;                           the Console.WindowWidth property, \n&#39;                       and the Console.WindowHeight property.\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim origWidth, width As Integer\n      Dim origHeight, height As Integer\n      Dim m1 As String = &quot;The current window width is {0}, and the &quot; &amp; _\n                         &quot;current window height is {1}.&quot;\n      Dim m2 As String = &quot;The new window width is {0}, and the new &quot; &amp; _\n                         &quot;window height is {1}.&quot;\n      Dim m4 As String = &quot;  (Press any key to continue...)&quot;\n      &#39;\n      &#39; Step 1: Get the current window dimensions.\n      &#39;\n      origWidth = Console.WindowWidth\n      origHeight = Console.WindowHeight\n      Console.WriteLine(m1, Console.WindowWidth, Console.WindowHeight)\n      Console.WriteLine(m4)\n      Console.ReadKey(True)\n      &#39;\n      &#39; Step 2: Cut the window to 1/4 its original size.\n      &#39;\n      width = origWidth / 2\n      height = origHeight / 2\n      Console.SetWindowSize(width, height)\n      Console.WriteLine(m2, Console.WindowWidth, Console.WindowHeight)\n      Console.WriteLine(m4)\n      Console.ReadKey(True)\n      &#39;\n      &#39; Step 3: Restore the window to its original size.\n      &#39;\n      Console.SetWindowSize(origWidth, origHeight)\n      Console.WriteLine(m1, Console.WindowWidth, Console.WindowHeight)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The current window width is 85, and the current window height is 43.\n&#39;  (Press any key to continue...)\n&#39;The new window width is 42, and the new window height is 21.\n&#39;  (Press any key to continue...)\n&#39;The current window width is 85, and the current window height is 43.\n&#39;\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"console.setwindowsize#1\">// This example demonstrates the Console.SetWindowSize method,\n//                           the Console.WindowWidth property, \n//                       and the Console.WindowHeight property.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    int origWidth, width;  \n    int origHeight, height;\n    string m1 = &quot;The current window width is {0}, and the &quot; +\n                &quot;current window height is {1}.&quot;;\n    string m2 = &quot;The new window width is {0}, and the new &quot; +\n                &quot;window height is {1}.&quot;;\n    string m4 = &quot;  (Press any key to continue...)&quot;;\n//\n// Step 1: Get the current window dimensions.\n//\n    origWidth  = Console.WindowWidth;\n    origHeight = Console.WindowHeight;\n    Console.WriteLine(m1, Console.WindowWidth,\n                          Console.WindowHeight);\n    Console.WriteLine(m4);\n    Console.ReadKey(true); \n//\n// Step 2: Cut the window to 1/4 its original size.\n//\n    width  = origWidth/2;\n    height = origHeight/2;\n    Console.SetWindowSize(width, height);\n    Console.WriteLine(m2, Console.WindowWidth,\n                          Console.WindowHeight);\n    Console.WriteLine(m4);\n    Console.ReadKey(true); \n//\n// Step 3: Restore the window to its original size.\n//\n    Console.SetWindowSize(origWidth, origHeight);\n    Console.WriteLine(m1, Console.WindowWidth,\n                          Console.WindowHeight);\n    }\n}\n/*\nThis example produces the following results:\n\nThe current window width is 85, and the current window height is 43.\n  (Press any key to continue...)\nThe new window width is 42, and the new window height is 21.\n  (Press any key to continue...)\nThe current window width is 85, and the current window height is 43.\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Beep\">\r\n    \r\n            <a id=\"System_Console_Beep_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Beep()</div>        \r\n          </div>\r\n    \r\n            <p>Plays the sound of a beep through the console speaker.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Beep ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.hostprotectionexception\" data-linktype=\"relative-path\">HostProtectionException</a></div>\r\n                  </div>\r\n                  <p>This method was executed on a server, such as SQL Server, that does not permit access to a user interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the beep plays at a frequency of 800 hertz for a duration of 200 milliseconds.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.console#System_Console_Beep_\" data-linktype=\"relative-path\">Beep</a> method is not supported on the 64-bit editions of Windows Vista and Windows XP.  </p>\n</div>\n<p> Beep wraps a call to the Windows <a href=\"https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx\" data-linktype=\"external\">Beep function</a>. Whether Beep produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip. Starting with Windows 7, it depends on the default sound device.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Beep method. The example accepts a number from 1 through 9 as a command line argument, and plays the beep that number of times.  </p>\n<pre><code class=\"lang-cs\" name=\"console.beep#1\">// This example demonstrates the Console.Beep() method.\nusing System;\n\nclass Sample \n{\n    public static void Main(String[] args) \n    {\n    int x = 0;\n//\n    if ((args.Length == 1) &amp;&amp;\n        (Int32.TryParse(args[0], out x) == true) &amp;&amp;\n        ((x &gt;= 1) &amp;&amp; (x &lt;= 9)))\n        {\n        for (int i = 1; i &lt;= x; i++)\n            {\n            Console.WriteLine(&quot;Beep number {0}.&quot;, i);\n            Console.Beep();\n            }\n        }\n    else\n        Console.WriteLine(&quot;Usage: Enter the number of times (between 1 and 9) to beep.&quot;);\n    }\n}\n/*\nThis example produces the following results:\n\n&gt;beep\nUsage: Enter the number of times (between 1 and 9) to beep\n\n&gt;beep 9\nBeep number 1.\nBeep number 2.\nBeep number 3.\nBeep number 4.\nBeep number 5.\nBeep number 6.\nBeep number 7.\nBeep number 8.\nBeep number 9.\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.beep#1\">// This example demonstrates the Console.Beep() method.\nusing namespace System;\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   int x = 0;\n   \n   //\n   if ( (args-&gt;Length == 2) &amp;&amp; (Int32::TryParse( args[ 1 ],  x ) == true) &amp;&amp; ((x &gt;= 1) &amp;&amp; (x &lt;= 9)) )\n   {\n      for ( int i = 1; i &lt;= x; i++ )\n      {\n         Console::WriteLine( &quot;Beep number {0}.&quot;, i );\n         Console::Beep();\n\n      }\n   }\n   else\n      Console::WriteLine( &quot;Usage: Enter the number of times (between 1 and 9) to beep.&quot; );\n}\n\n/*\nThis example produces the following results:\n\n&gt;beep\nUsage: Enter the number of times (between 1 and 9) to beep\n\n&gt;beep 9\nBeep number 1.\nBeep number 2.\nBeep number 3.\nBeep number 4.\nBeep number 5.\nBeep number 6.\nBeep number 7.\nBeep number 8.\nBeep number 9.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.beep#1\">&#39; This example demonstrates the Console.Beep() method.\nImports System\n\nClass Sample\n   Public Shared Sub Main(args() As String)\n      Dim x As Integer = 0\n      Dim i As Integer\n      &#39;\n      If      (args.Length = 1) _\n      AndAlso (Int32.TryParse(args(0), x) = True) _\n      AndAlso ((x &gt;= 1) AndAlso (x &lt;= 9)) Then\n         For i = 1 To x\n            Console.WriteLine(&quot;Beep number {0}.&quot;, i)\n            Console.Beep()\n         Next i\n      Else\n         Console.WriteLine(&quot;Usage: Enter the number of times (between 1 and 9) to beep.&quot;)\n      End If\n   End Sub &#39;Main\nEnd Class &#39;Sample \n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;&gt;beep\n&#39;Usage: Enter the number of times (between 1 and 9) to beep\n&#39;\n&#39;&gt;beep 9\n&#39;Beep number 1.\n&#39;Beep number 2.\n&#39;Beep number 3.\n&#39;Beep number 4.\n&#39;Beep number 5.\n&#39;Beep number 6.\n&#39;Beep number 7.\n&#39;Beep number 8.\n&#39;Beep number 9.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Beep_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_Beep_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Beep(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Plays the sound of a beep of a specified frequency and duration through the console speaker.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Beep (int frequency, int duration);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>frequency</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The frequency of the beep, ranging from 37 to 32767 hertz.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>duration</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The duration of the beep measured in milliseconds.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>frequency</code> is less than 37 or more than 32767 hertz.  </p>\n<p> -or-  </p>\n<p> <code>duration</code> is less than or equal to zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.hostprotectionexception\" data-linktype=\"relative-path\">HostProtectionException</a></div>\r\n                  </div>\r\n                  <p>This method was executed on a server, such as SQL Server, that does not permit access to the console.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.console#System_Console_Beep_\" data-linktype=\"relative-path\">Beep</a> wraps a call to the Windows <a href=\"https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx\" data-linktype=\"external\">Beep function</a>. Whether <a class=\"xref\" href=\"system.console#System_Console_Beep_\" data-linktype=\"relative-path\">Beep</a> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip. Starting with Windows 7, it depends on the default sound device.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.console#System_Console_Beep_\" data-linktype=\"relative-path\">Beep</a> method is not supported on the 64-bit editions of Windows Vista and Windows XP.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the Beep method by playing the first few notes of a song through the console speaker.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.beep2#1\">// This example demonstrates the Console.Beep(Int32, Int32) method\nusing namespace System;\nusing namespace System::Threading;\nref class Sample\n{\nprotected:\n\n   // Define the frequencies of notes in an octave, as well as \n   // silence (rest).\n   enum class Tone\n   {\n      REST = 0,\n      GbelowC = 196,\n      A = 220,\n      Asharp = 233,\n      B = 247,\n      C = 262,\n      Csharp = 277,\n      D = 294,\n      Dsharp = 311,\n      E = 330,\n      F = 349,\n      Fsharp = 370,\n      G = 392,\n      Gsharp = 415\n   };\n\n\n   // Define the duration of a note in units of milliseconds.\n   enum class Duration\n   {\n      WHOLE = 1600,\n      HALF = Duration::WHOLE / 2,\n      QUARTER = Duration::HALF / 2,\n      EIGHTH = Duration::QUARTER / 2,\n      SIXTEENTH = Duration::EIGHTH / 2\n   };\n\n\npublic:\n\n   // Define a note as a frequency (tone) and the amount of \n   // time (duration) the note plays.\n   value struct Note\n   {\n   public:\n      Tone toneVal;\n      Duration durVal;\n\n      // Define a constructor to create a specific note.\n      Note( Tone frequency, Duration time )\n      {\n         toneVal = frequency;\n         durVal = time;\n      }\n\n\n      property Tone NoteTone \n      {\n\n         // Define properties to return the note&#39;s tone and duration.\n         Tone get()\n         {\n            return toneVal;\n         }\n\n      }\n\n      property Duration NoteDuration \n      {\n         Duration get()\n         {\n            return durVal;\n         }\n\n      }\n\n   };\n\n\nprotected:\n\n   // Play the notes in a song.\n   static void Play( array&lt;Note&gt;^ tune )\n   {\n      System::Collections::IEnumerator^ myEnum = tune-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Note n =  *safe_cast&lt;Note ^&gt;(myEnum-&gt;Current);\n         if ( n.NoteTone == Tone::REST )\n                  Thread::Sleep( (int)n.NoteDuration );\n         else\n                  Console::Beep( (int)n.NoteTone, (int)n.NoteDuration );\n      }\n   }\n\n\npublic:\n   static void Main()\n   {\n      \n      // Declare the first few notes of the song, &quot;Mary Had A Little Lamb&quot;.\n      array&lt;Note&gt;^ Mary = {Note( Tone::B, Duration::QUARTER ),Note( Tone::A, Duration::QUARTER ),Note( Tone::GbelowC, Duration::QUARTER ),Note( Tone::A, Duration::QUARTER ),Note( Tone::B, Duration::QUARTER ),Note( Tone::B, Duration::QUARTER ),Note( Tone::B, Duration::HALF ),Note( Tone::A, Duration::QUARTER ),Note( Tone::A, Duration::QUARTER ),Note( Tone::A, Duration::HALF ),Note( Tone::B, Duration::QUARTER ),Note( Tone::D, Duration::QUARTER ),Note( Tone::D, Duration::HALF )};\n      \n      // Play the song\n      Play( Mary );\n   }\n\n};\n\nint main()\n{\n   Sample::Main();\n}\n\n/*\nThis example produces the following results:\n\nThis example plays the first few notes of &quot;Mary Had A Little Lamb&quot; \nthrough the console speaker.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.beep2#1\">&#39; This example demonstrates the Console.Beep(Int32, Int32) method\nImports System\nImports System.Threading\n\nClass Sample\n   Public Shared Sub Main()\n      &#39; Declare the first few notes of the song, &quot;Mary Had A Little Lamb&quot;.\n      Dim Mary As Note() =  { _\n            New Note(Tone.B, Duration.QUARTER), _\n            New Note(Tone.A, Duration.QUARTER), _\n            New Note(Tone.GbelowC, Duration.QUARTER), _\n            New Note(Tone.A, Duration.QUARTER), _\n            New Note(Tone.B, Duration.QUARTER), _\n            New Note(Tone.B, Duration.QUARTER), _\n            New Note(Tone.B, Duration.HALF), _\n            New Note(Tone.A, Duration.QUARTER), _\n            New Note(Tone.A, Duration.QUARTER), _\n            New Note(Tone.A, Duration.HALF), _\n            New Note(Tone.B, Duration.QUARTER), _\n            New Note(Tone.D, Duration.QUARTER), _\n            New Note(Tone.D, Duration.HALF)}\n      &#39; Play the song\n      Play(Mary)\n   End Sub &#39;Main\n   \n   &#39; Play the notes in a song.\n   Protected Shared Sub Play(tune() As Note)\n      Dim n As Note\n      For Each n In  tune\n         If n.NoteTone = Tone.REST Then\n            Thread.Sleep(CInt(n.NoteDuration))\n         Else\n            Console.Beep(CInt(n.NoteTone), CInt(n.NoteDuration))\n         End If\n      Next n\n   End Sub &#39;Play \n   &#39; Define the frequencies of notes in an octave, as well as \n   &#39; silence (rest).\n   \n   Protected Enum Tone\n      REST = 0\n      GbelowC = 196\n      A = 220\n      Asharp = 233\n      B = 247\n      C = 262\n      Csharp = 277\n      D = 294\n      Dsharp = 311\n      E = 330\n      F = 349\n      Fsharp = 370\n      G = 392\n      Gsharp = 415\n   End Enum &#39;Tone\n   \n   &#39; Define the duration of a note in units of milliseconds.\n   \n   Protected Enum Duration\n      WHOLE = 1600\n      HALF = WHOLE / 2\n      QUARTER = HALF / 2\n      EIGHTH = QUARTER / 2\n      SIXTEENTH = EIGHTH / 2\n   End Enum &#39;Duration\n   \n   &#39; Define a note as a frequency (tone) and the amount of \n   &#39; time (duration) the note plays.\n   Protected Structure Note\n      Private toneVal As Tone\n      Private durVal As Duration\n      \n      &#39; Define a constructor to create a specific note.\n      Public Sub New(frequency As Tone, time As Duration)\n         toneVal = frequency\n         durVal = time\n      End Sub &#39;New\n      \n      &#39; Define properties to return the note&#39;s tone and duration.\n      Public ReadOnly Property NoteTone() As Tone\n         Get\n            Return toneVal\n         End Get\n      End Property\n      \n      Public ReadOnly Property NoteDuration() As Duration\n         Get\n            Return durVal\n         End Get\n      End Property\n   End Structure &#39;Note &#39;\n&#39;This example produces the following results:\n&#39;\n&#39;This example plays the first few notes of &quot;Mary Had A Little Lamb&quot; \n&#39;through the console speaker.\n&#39;\nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"console.beep2#1\">// This example demonstrates the Console.Beep(Int32, Int32) method\nusing System;\nusing System.Threading;\n\nclass Sample \n{\n    public static void Main() \n    {\n// Declare the first few notes of the song, &quot;Mary Had A Little Lamb&quot;.\n    Note[] Mary = \n        {\n        new Note(Tone.B, Duration.QUARTER),\n        new Note(Tone.A, Duration.QUARTER),\n        new Note(Tone.GbelowC, Duration.QUARTER),\n        new Note(Tone.A, Duration.QUARTER),\n        new Note(Tone.B, Duration.QUARTER),\n        new Note(Tone.B, Duration.QUARTER),\n        new Note(Tone.B, Duration.HALF),\n        new Note(Tone.A, Duration.QUARTER),\n        new Note(Tone.A, Duration.QUARTER),\n        new Note(Tone.A, Duration.HALF),\n        new Note(Tone.B, Duration.QUARTER),\n        new Note(Tone.D, Duration.QUARTER),\n        new Note(Tone.D, Duration.HALF)\n        };\n// Play the song\n    Play(Mary);\n    }\n\n// Play the notes in a song.\n    protected static void Play(Note[] tune)\n    {\n    foreach (Note n in tune)\n        {\n        if (n.NoteTone == Tone.REST)\n            Thread.Sleep((int)n.NoteDuration);\n        else\n            Console.Beep((int)n.NoteTone, (int)n.NoteDuration);\n        }\n    }\n\n// Define the frequencies of notes in an octave, as well as \n// silence (rest).\n    protected enum Tone\n    {\n    REST   = 0,\n    GbelowC = 196,\n    A      = 220,\n    Asharp = 233,\n    B      = 247,\n    C      = 262,\n    Csharp = 277,\n    D      = 294,\n    Dsharp = 311,\n    E      = 330,\n    F      = 349,\n    Fsharp = 370,\n    G      = 392,\n    Gsharp = 415, \n    }\n\n// Define the duration of a note in units of milliseconds.\n    protected enum Duration\n    {\n    WHOLE     = 1600,\n    HALF      = WHOLE/2,\n    QUARTER   = HALF/2,\n    EIGHTH    = QUARTER/2,\n    SIXTEENTH = EIGHTH/2,\n    }\n\n// Define a note as a frequency (tone) and the amount of \n// time (duration) the note plays.\n    protected struct Note\n    {\n    Tone     toneVal;\n    Duration durVal;\n\n// Define a constructor to create a specific note.\n    public Note(Tone frequency, Duration time)\n        {\n        toneVal = frequency;\n        durVal  = time;\n        }\n\n// Define properties to return the note&#39;s tone and duration.\n    public Tone NoteTone { get{ return toneVal; } }\n    public Duration NoteDuration { get{ return durVal; } }\n    }\n}\n/*\nThis example produces the following results:\n\nThis example plays the first few notes of &quot;Mary Had A Little Lamb&quot; \nthrough the console speaker.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Clear\">\r\n    \r\n            <a id=\"System_Console_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Clears the console buffer and corresponding console window of display information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using the Clear method is equivalent invoking the MS-DOS <code>cls</code> command in the command prompt window. When the Clear method is called, the cursor automatically scrolls to the top-left corner of the window and the contents of the screen buffer are set to blanks using the current foreground background colors.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Attempting to call the Clear method when a console application&#39;s output is redirected to a file throws a <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a>. To prevent this, always wrap a call to the Clear method in a <code>try</code>â€¦<code>catch</code> block.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Clear method to clear the console before it executes a loop, prompts the user to select a foreground and background color and to enter a string to display. If the user chooses not to exit the program, the console&#39;s original foreground and background colors are restored and the Clear method is called again before re-executing the loop.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console.Clear#1\">Module Example\n   Public Sub Main()\n      &#39; Save colors so they can be restored when use finishes input.\n      Dim dftForeColor As ConsoleColor = Console.ForegroundColor\n      Dim dftBackColor As ConsoleColor = Console.BackgroundColor\n      Dim continueFlag As Boolean = True\n      Console.Clear()\n            \n      Do \n         Dim newForeColor As ConsoleColor\n         Dim newBackColor As ConsoleColor\n                  \n         Dim foreColorSelection As Char = GetKeyPress(&quot;Select Text Color (B for Blue, R for Red, Y for Yellow): &quot;, \n                                              { &quot;B&quot;c, &quot;R&quot;c, &quot;Y&quot;c } )\n         Select Case foreColorSelection\n            Case &quot;B&quot;c, &quot;b&quot;c\n               newForeColor = ConsoleColor.DarkBlue\n            Case &quot;R&quot;c, &quot;r&quot;c\n               newForeColor = ConsoleColor.DarkRed\n            Case &quot;Y&quot;c, &quot;y&quot;c\n               newForeColor = ConsoleColor.DarkYellow   \n         End Select\n         Dim backColorSelection As Char = GetKeyPress(&quot;Select Background Color (W for White, G for Green, M for Magenta): &quot;,\n                                              { &quot;W&quot;c, &quot;G&quot;c, &quot;M&quot;c })\n         Select Case backColorSelection\n            Case &quot;W&quot;c, &quot;w&quot;c\n               newBackColor = ConsoleColor.White\n            Case &quot;G&quot;c, &quot;g&quot;c\n               newBackColor = ConsoleColor.Green\n            Case &quot;M&quot;c, &quot;m&quot;c\n               newBackColor = ConsoleColor.Magenta   \n         End Select\n         \n         Console.WriteLine()\n         Console.Write(&quot;Enter a message to display: &quot;)\n         Dim textToDisplay As String = Console.ReadLine()\n         Console.WriteLine()\n         Console.ForegroundColor = newForeColor\n         Console.BackgroundColor = newBackColor\n         Console.WriteLine(textToDisplay)\n         Console.WriteLine()\n         If Char.ToUpper(GetKeyPress(&quot;Display another message (Y/N): &quot;, { &quot;Y&quot;c, &quot;N&quot;c } )) = &quot;N&quot; Then\n            continueFlag = False\n         End If\n         &#39; Restore the default settings and clear the screen.\n         Console.ForegroundColor = dftForeColor\n         Console.BackgroundColor = dftBackColor\n         Console.Clear()\n      Loop While continueFlag\n   End Sub\n   \n   Private Function GetKeyPress(msg As String, validChars() As Char) As Char\n      Dim keyPressed As ConsoleKeyInfo\n      Dim valid As Boolean = False\n      \n      Console.WriteLine()\n      Do\n         Console.Write(msg)\n         keyPressed = Console.ReadKey()\n         Console.WriteLine()\n         If Array.Exists(validChars, Function(ch As Char) ch.Equals(Char.ToUpper(keypressed.KeyChar)))           \n            valid = True\n         End If\n      Loop While Not valid\n      Return keyPressed.KeyChar \n   End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.Clear#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Save colors so they can be restored when use finishes input.\n      ConsoleColor dftForeColor = Console.ForegroundColor;\n      ConsoleColor dftBackColor = Console.BackgroundColor;\n      bool continueFlag = true;\n      Console.Clear();\n            \n      do { \n         ConsoleColor newForeColor = ConsoleColor.White;\n         ConsoleColor newBackColor = ConsoleColor.Black;\n                  \n         Char foreColorSelection = GetKeyPress(&quot;Select Text Color (B for Blue, R for Red, Y for Yellow): &quot;, \n                                              new Char[] { &#39;B&#39;, &#39;R&#39;, &#39;Y&#39; } );\n         switch (foreColorSelection) {\n            case &#39;B&#39;:\n            case &#39;b&#39;:\n               newForeColor = ConsoleColor.DarkBlue;\n               break;\n            case &#39;R&#39;:\n            case &#39;r&#39;:\n               newForeColor = ConsoleColor.DarkRed;\n               break;\n            case &#39;Y&#39;:\n            case &#39;y&#39;:\n               newForeColor = ConsoleColor.DarkYellow;\n               break;   \n         }\n         Char backColorSelection = GetKeyPress(&quot;Select Background Color (W for White, G for Green, M for Magenta): &quot;,\n                                              new Char[] { &#39;W&#39;, &#39;G&#39;, &#39;M&#39; });\n         switch (backColorSelection) {\n            case &#39;W&#39;:\n            case &#39;w&#39;:\n               newBackColor = ConsoleColor.White;\n               break;\n            case &#39;G&#39;:\n            case &#39;g&#39;:\n               newBackColor = ConsoleColor.Green;\n               break;\n            case &#39;M&#39;:\n            case &#39;m&#39;:\n               newBackColor = ConsoleColor.Magenta;\n               break;   \n         }\n         \n         Console.WriteLine();\n         Console.Write(&quot;Enter a message to display: &quot;);\n         String textToDisplay = Console.ReadLine();\n         Console.WriteLine();\n         Console.ForegroundColor = newForeColor;\n         Console.BackgroundColor = newBackColor;\n         Console.WriteLine(textToDisplay);\n         Console.WriteLine();\n         if (Char.ToUpper(GetKeyPress(&quot;Display another message (Y/N): &quot;, new Char[] { &#39;Y&#39;, &#39;N&#39; } )) == &#39;N&#39;)\n            continueFlag = false;\n\n         // Restore the default settings and clear the screen.\n         Console.ForegroundColor = dftForeColor;\n         Console.BackgroundColor = dftBackColor;\n         Console.Clear();\n      } while (continueFlag);\n   }\n\n   private static Char GetKeyPress(String msg, Char[] validChars) \n   {\n      ConsoleKeyInfo keyPressed;\n      bool valid = false;\n      \n      Console.WriteLine();\n      do {\n         Console.Write(msg);\n         keyPressed = Console.ReadKey();\n         Console.WriteLine();\n         if (Array.Exists(validChars, ch =&gt; ch.Equals(Char.ToUpper(keyPressed.KeyChar))))           \n            valid = true;\n\n      } while (! valid);\n      return keyPressed.KeyChar; \n   }\n}\n</code></pre><p> The example relies on a <code>GetKeyPress</code> method to validate the user&#39;s selection of a foreground and background color.  </p>\n<p> This example demonstrates the <a class=\"xref\" href=\"system.console#System_Console_CursorLeft_\" data-linktype=\"relative-path\">CursorLeft</a> and <a class=\"xref\" href=\"system.console#System_Console_CursorTop_\" data-linktype=\"relative-path\">CursorTop</a> properties, and the <a class=\"xref\" href=\"system.console#System_Console_SetCursorPosition_\" data-linktype=\"relative-path\">SetCursorPosition</a> and Clear methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of &quot;+&quot;, &quot;&#124;&quot;, and &quot;-&quot; strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  </p>\n<pre><code class=\"lang-cs\" name=\"console.cursorLTS#1\">// This example demonstrates the \n//     Console.CursorLeft and \n//     Console.CursorTop properties, and the\n//     Console.SetCursorPosition and \n//     Console.Clear methods.\nusing System;\n\nclass Sample \n{\n    protected static int origRow;\n    protected static int origCol;\n\n    protected static void WriteAt(string s, int x, int y)\n    {\n    try\n        {\n        Console.SetCursorPosition(origCol+x, origRow+y);\n        Console.Write(s);\n        }\n    catch (ArgumentOutOfRangeException e)\n        {\n        Console.Clear();\n        Console.WriteLine(e.Message);\n        }\n    }\n\n    public static void Main() \n    {\n// Clear the screen, then save the top and left coordinates.\n    Console.Clear();\n    origRow = Console.CursorTop;\n    origCol = Console.CursorLeft;\n\n// Draw the left side of a 5x5 rectangle, from top to bottom.\n    WriteAt(&quot;+&quot;, 0, 0);\n    WriteAt(&quot;|&quot;, 0, 1);\n    WriteAt(&quot;|&quot;, 0, 2);\n    WriteAt(&quot;|&quot;, 0, 3);\n    WriteAt(&quot;+&quot;, 0, 4);\n\n// Draw the bottom side, from left to right.\n    WriteAt(&quot;-&quot;, 1, 4); // shortcut: WriteAt(&quot;---&quot;, 1, 4)\n    WriteAt(&quot;-&quot;, 2, 4); // ...\n    WriteAt(&quot;-&quot;, 3, 4); // ...\n    WriteAt(&quot;+&quot;, 4, 4);\n\n// Draw the right side, from bottom to top.\n    WriteAt(&quot;|&quot;, 4, 3);\n    WriteAt(&quot;|&quot;, 4, 2);\n    WriteAt(&quot;|&quot;, 4, 1);\n    WriteAt(&quot;+&quot;, 4, 0);\n\n// Draw the top side, from right to left.\n    WriteAt(&quot;-&quot;, 3, 0); // shortcut: WriteAt(&quot;---&quot;, 1, 0)\n    WriteAt(&quot;-&quot;, 2, 0); // ...\n    WriteAt(&quot;-&quot;, 1, 0); // ...\n//\n    WriteAt(&quot;All done!&quot;, 0, 6);\n    Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\n+---+\n|   |\n|   |\n|   |\n+---+\n\nAll done!\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.cursorLTS#1\">// This example demonstrates the \n//     Console.CursorLeft and \n//     Console.CursorTop properties, and the\n//     Console.SetCursorPosition and \n//     Console.Clear methods.\nusing namespace System;\nint origRow;\nint origCol;\nvoid WriteAt( String^ s, int x, int y )\n{\n   try\n   {\n      Console::SetCursorPosition( origCol + x, origRow + y );\n      Console::Write( s );\n   }\n   catch ( ArgumentOutOfRangeException^ e ) \n   {\n      Console::Clear();\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nint main()\n{\n   \n   // Clear the screen, then save the top and left coordinates.\n   Console::Clear();\n   origRow = Console::CursorTop;\n   origCol = Console::CursorLeft;\n   \n   // Draw the left side of a 5x5 rectangle, from top to bottom.\n   WriteAt( &quot;+&quot;, 0, 0 );\n   WriteAt( &quot;|&quot;, 0, 1 );\n   WriteAt( &quot;|&quot;, 0, 2 );\n   WriteAt( &quot;|&quot;, 0, 3 );\n   WriteAt( &quot;+&quot;, 0, 4 );\n   \n   // Draw the bottom side, from left to right.\n   WriteAt( &quot;-&quot;, 1, 4 ); // shortcut: WriteAt(&quot;---&quot;, 1, 4)\n   WriteAt( &quot;-&quot;, 2, 4 ); // ...\n   WriteAt( &quot;-&quot;, 3, 4 ); // ...\n   WriteAt( &quot;+&quot;, 4, 4 );\n   \n   // Draw the right side, from bottom to top.\n   WriteAt( &quot;|&quot;, 4, 3 );\n   WriteAt( &quot;|&quot;, 4, 2 );\n   WriteAt( &quot;|&quot;, 4, 1 );\n   WriteAt( &quot;+&quot;, 4, 0 );\n   \n   // Draw the top side, from right to left.\n   WriteAt( &quot;-&quot;, 3, 0 ); // shortcut: WriteAt(&quot;---&quot;, 1, 0)\n   WriteAt( &quot;-&quot;, 2, 0 ); // ...\n   WriteAt( &quot;-&quot;, 1, 0 ); // ...\n   \n   //\n   WriteAt( &quot;All done!&quot;, 0, 6 );\n   Console::WriteLine();\n}\n\n/*\nThis example produces the following results:\n\n+---+\n|   |\n|   |\n|   |\n+---+\n\nAll done!\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.cursorLTS#1\">&#39; This example demonstrates the \n&#39;     Console.CursorLeft and \n&#39;     Console.CursorTop properties, and the\n&#39;     Console.SetCursorPosition and \n&#39;     Console.Clear methods.\nImports System\n\nClass Sample\n   Protected Shared origRow As Integer\n   Protected Shared origCol As Integer\n   \n   Protected Shared Sub WriteAt(s As String, x As Integer, y As Integer)\n      Try\n         Console.SetCursorPosition(origCol + x, origRow + y)\n         Console.Write(s)\n      Catch e As ArgumentOutOfRangeException\n         Console.Clear()\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;WriteAt\n   \n   Public Shared Sub Main()\n      &#39; Clear the screen, then save the top and left coordinates.\n      Console.Clear()\n      origRow = Console.CursorTop\n      origCol = Console.CursorLeft\n      \n      &#39; Draw the left side of a 5x5 rectangle, from top to bottom.\n      WriteAt(&quot;+&quot;, 0, 0)\n      WriteAt(&quot;|&quot;, 0, 1)\n      WriteAt(&quot;|&quot;, 0, 2)\n      WriteAt(&quot;|&quot;, 0, 3)\n      WriteAt(&quot;+&quot;, 0, 4)\n      \n      &#39; Draw the bottom side, from left to right.\n      WriteAt(&quot;-&quot;, 1, 4) &#39; shortcut: WriteAt(&quot;---&quot;, 1, 4)\n      WriteAt(&quot;-&quot;, 2, 4) &#39; ...\n      WriteAt(&quot;-&quot;, 3, 4) &#39; ...\n      WriteAt(&quot;+&quot;, 4, 4)\n      \n      &#39; Draw the right side, from bottom to top.\n      WriteAt(&quot;|&quot;, 4, 3)\n      WriteAt(&quot;|&quot;, 4, 2)\n      WriteAt(&quot;|&quot;, 4, 1)\n      WriteAt(&quot;+&quot;, 4, 0)\n      \n      &#39; Draw the top side, from right to left.\n      WriteAt(&quot;-&quot;, 3, 0) &#39; shortcut: WriteAt(&quot;---&quot;, 1, 0)\n      WriteAt(&quot;-&quot;, 2, 0) &#39; ...\n      WriteAt(&quot;-&quot;, 1, 0) &#39; ...\n      &#39;\n      WriteAt(&quot;All done!&quot;, 0, 6)\n      Console.WriteLine()\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;+---+\n&#39;|   |\n&#39;|   |\n&#39;|   |\n&#39;+---+\n&#39;\n&#39;All done!\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_MoveBufferArea_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_MoveBufferArea_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a specified source area of the screen buffer to a specified destination area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceLeft</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The leftmost column of the source area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceTop</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The topmost row of the source area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceWidth</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of columns in the source area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceHeight</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of rows in the source area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetLeft</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The leftmost column of the destination area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetTop</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The topmost row of the destination area.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>One or more of the parameters is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <span class=\"xref\">stem.Console.BufferWidth*</span>.  </p>\n<p> -or-  </p>\n<p> <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <span class=\"xref\">stem.Console.BufferHeight*</span>.  </p>\n<p> -or-  </p>\n<p> <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <span class=\"xref\">stem.Console.BufferHeight*</span>.  </p>\n<p> -or-  </p>\n<p> <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <span class=\"xref\">stem.Console.BufferWidth*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the destination and source parameters specify a position located outside the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.  </p>\n<p> The MoveBufferArea method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with blanks using the current foreground and background colors. Otherwise, the intersected portion of the source area is not filled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_MoveBufferArea_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Char_System_ConsoleColor_System_ConsoleColor_\">\r\n    \r\n            <a id=\"System_Console_MoveBufferArea_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a specified source area of the screen buffer to a specified destination area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceLeft</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The leftmost column of the source area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceTop</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The topmost row of the source area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceWidth</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of columns in the source area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceHeight</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of rows in the source area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetLeft</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The leftmost column of the destination area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetTop</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The topmost row of the destination area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceChar</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character used to fill the source area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceForeColor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The foreground color used to fill the source area.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceBackColor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The background color used to fill the source area.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>One or more of the parameters is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <span class=\"xref\">stem.Console.BufferWidth*</span>.  </p>\n<p> -or-  </p>\n<p> <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <span class=\"xref\">stem.Console.BufferHeight*</span>.  </p>\n<p> -or-  </p>\n<p> <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <span class=\"xref\">stem.Console.BufferHeight*</span>.  </p>\n<p> -or-  </p>\n<p> <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <span class=\"xref\">stem.Console.BufferWidth*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>One or both of the color parameters is not a member of the <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a> enumeration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the destination and source parameters specify a position located beyond the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.  </p>\n<p> The <a class=\"xref\" href=\"system.console#System_Console_MoveBufferArea_\" data-linktype=\"relative-path\">MoveBufferArea</a> method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with the character specified by <code>sourceChar</code>, using the colors specified by <code>sourceForeColor</code> and <code>sourceBackColor</code>. Otherwise, the intersected portion of the source area is not filled.  </p>\n<p> The <a class=\"xref\" href=\"system.console#System_Console_MoveBufferArea_\" data-linktype=\"relative-path\">MoveBufferArea</a> method performs no operation if <code>sourceWidth</code> or <code>sourceHeight</code> is zero.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_OpenStandardError\">\r\n    \r\n            <a id=\"System_Console_OpenStandardError_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenStandardError()</div>        \r\n          </div>\r\n    \r\n            <p>Acquires the standard error stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Stream OpenStandardError ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>The standard error stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to reacquire the standard error stream after it has been changed by the <a class=\"xref\" href=\"system.console#System_Console_SetError_\" data-linktype=\"relative-path\">SetError</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <a class=\"xref\" href=\"system.console#System_Console_SetError_\" data-linktype=\"relative-path\">SetError</a> method to redirect error information to a file, calls the OpenStandardError method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.OpenStandardError#1\">using System;\nusing System.IO;\n\npublic class ViewTextFile\n{\n   public static void Main()\n   {\n      String[] args = Environment.GetCommandLineArgs();\n      String errorOutput = &quot;&quot;;\n      // Make sure that there is at least one command line argument.\n      if (args.Length &lt;= 1)\n         errorOutput += &quot;You must include a filename on the command line.<br>&quot;;\n\n      for (int ctr = 1; ctr &lt;= args.GetUpperBound(0); ctr++)  {\n         // Check whether the file exists.\n         if (! File.Exists(args[ctr])) {\n            errorOutput += String.Format(&quot;&#39;{0}&#39; does not exist.<br>&quot;, args[ctr]);\n         }\n         else {\n            // Display the contents of the file.\n            StreamReader sr = new StreamReader(args[ctr]);\n            String contents = sr.ReadToEnd();\n            sr.Close();\n            Console.WriteLine(&quot;*****Contents of file &#39;{0}&#39;:<br><br>&quot;,\n                              args[ctr]);\n            Console.WriteLine(contents);\n            Console.WriteLine(&quot;*****<br>&quot;);\n         }\n      }\n\n      // Check for error conditions.\n      if (! String.IsNullOrEmpty(errorOutput)) {\n         // Write error information to a file.\n         Console.SetError(new StreamWriter(@&quot;.\\ViewTextFile.Err.txt&quot;));\n         Console.Error.WriteLine(errorOutput);\n         Console.Error.Close();\n         // Reacquire the standard error stream.\n         var standardError = new StreamWriter(Console.OpenStandardError());\n         standardError.AutoFlush = true;\n         Console.SetError(standardError);\n         Console.Error.WriteLine(&quot;<br>Error information written to ViewTextFile.Err.txt&quot;);\n      }\n   }\n}\n// If the example is compiled and run with the following command line:\n//     ViewTextFile file1.txt file2.txt\n// and neither file1.txt nor file2.txt exist, it displays the\n// following output:\n//     Error information written to ViewTextFile.Err.txt\n// and writes the following text to ViewFileText.Err.txt:\n//     &#39;file1.txt&#39; does not exist.\n//     &#39;file2.txt&#39; does not exist.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.OpenStandardError#1\">Imports System.IO\n\nModule ViewTextFile\n   Public Sub Main()\n      Dim args() As String = Environment.GetCommandLineArgs()\n      Dim errorOutput As String = &quot;&quot;\n      &#39; Make sure that there is at least one command line argument.\n      If args.Length &lt;= 1 Then\n         errorOutput += &quot;You must include a filename on the command line.&quot; +\n                        vbCrLf\n      End If\n      \n      For ctr As Integer = 1 To args.GetUpperBound(0)\n         &#39; Check whether the file exists.\n         If Not File.Exists(args(ctr)) Then\n            errorOutput += String.Format(&quot;&#39;{0}&#39; does not exist.{1}&quot;,\n                                         args(ctr), vbCrLf)\n         Else\n            &#39; Display the contents of the file.\n            Dim sr As New StreamReader(args(ctr))\n            Dim contents As String = sr.ReadToEnd()\n            sr.Close()\n            Console.WriteLine(&quot;***** Contents of file &#39;{0}&#39;:{1}{1}&quot;,\n                              args(ctr), vbCrLf)\n            Console.WriteLine(contents)\n            Console.WriteLine(&quot;*****{0}&quot;, vbCrLf)\n         End If\n      Next\n\n      &#39; Check for error conditions.\n      If Not String.IsNullOrEmpty(errorOutput) Then\n         &#39; Write error information to a file.\n         Console.SetError(New StreamWriter(&quot;.\\ViewTextFile.Err.txt&quot;))\n         Console.Error.WriteLine(errorOutput)\n         Console.Error.Close()\n         &#39; Reacquire the standard error stream.\n         Dim standardError As New StreamWriter(Console.OpenStandardError())\n         standardError.AutoFlush = True\n         Console.SetError(standardError)\n         Console.Error.WriteLine(&quot;{0}Error information written to ViewTextFile.Err.txt&quot;,\n                                 vbCrLf)\n      End If\n   End Sub\nEnd Module\n&#39; If the example is compiled and run with the following command line:\n&#39;     ViewTextFile file1.txt file2.txt\n&#39; and neither file1.txt nor file2.txt exist, it displays the\n&#39; following output:\n&#39;     Error information written to ViewTextFile.Err.txt\n&#39; and writes the following text to ViewFileText.Err.txt:\n&#39;     &#39;file1.txt&#39; does not exist.\n&#39;     &#39;file2.txt&#39; does not exist.\n</code></pre><p> Note that the <a class=\"xref\" href=\"system.io.streamwriter#System_IO_StreamWriter_AutoFlush_\" data-linktype=\"relative-path\">AutoFlush</a> property is set to <code>true</code> before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_OpenStandardError_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_OpenStandardError_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenStandardError(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Acquires the standard error stream, which is set to a specified buffer size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Stream OpenStandardError (int bufferSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bufferSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The internal stream buffer size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>The standard error stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>bufferSize</code> is less than or equal to zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to reacquire the standard error stream after it has been changed by the <a class=\"xref\" href=\"system.console#System_Console_SetError_\" data-linktype=\"relative-path\">SetError</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_OpenStandardInput\">\r\n    \r\n            <a id=\"System_Console_OpenStandardInput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenStandardInput()</div>        \r\n          </div>\r\n    \r\n            <p>Acquires the standard input stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Stream OpenStandardInput ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>The standard input stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to reacquire the standard input stream after it has been changed by the <a class=\"xref\" href=\"system.console#System_Console_SetIn_\" data-linktype=\"relative-path\">SetIn</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>OpenStandardInput</code> property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.OpenStandartInput#1\">using System;\nusing System.Text;\nusing System.IO;\n\npublic class Decoder {\n    public static void Main() {\n        Stream inputStream = Console.OpenStandardInput();\n        byte[] bytes = new byte[100];\n        Console.WriteLine(&quot;To decode, type or paste the UTF7 encoded string and press enter:&quot;);\n        Console.WriteLine(&quot;(Example: \\&quot;M+APw-nchen ist wundervoll\\&quot;)&quot;);\n        int outputLength = inputStream.Read(bytes, 0, 100);\n        char[] chars = Encoding.UTF7.GetChars(bytes, 0, outputLength);\n        Console.WriteLine(&quot;Decoded string:&quot;);\n        Console.WriteLine(new string(chars));\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.OpenStandartInput#1\">Imports System.Text\nImports System.IO\n\nPublic Class Decoder\n   Public Shared Sub Main()\n      Dim inputStream As Stream = Console.OpenStandardInput()\n      Dim bytes(100) As Byte\n      Console.WriteLine(&quot;To decode, type or paste the UTF7 encoded string and press enter:&quot;)\n      Console.WriteLine(&quot;(Example: &quot;&quot;M+APw-nchen ist wundervoll&quot;&quot;)&quot;)\n      Dim outputLength As Integer = inputStream.Read(bytes, 0, 100)\n      Dim chars As Char() = Encoding.UTF7.GetChars(bytes, 0, outputLength)\n      Console.WriteLine(&quot;Decoded string:&quot;)\n      Console.WriteLine(New String(chars))\n   End Sub &#39;Main\nEnd Class &#39;Decoder\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console.OpenStandartInput#1\">\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::IO;\n\nint main()\n{\n   Stream^ inputStream = Console::OpenStandardInput();\n   array&lt;Byte&gt;^bytes = gcnew array&lt;Byte&gt;(100);\n   Console::WriteLine( &quot;To decode, type or paste the UTF7 encoded string and press enter:&quot; );\n   Console::WriteLine( &quot;(Example: \\&quot;M+APw-nchen ist wundervoll\\&quot;)&quot; );\n   int outputLength = inputStream-&gt;Read( bytes, 0, 100 );\n   array&lt;Char&gt;^chars = Encoding::UTF7-&gt;GetChars( bytes, 0, outputLength );\n   Console::WriteLine( &quot;Decoded string:&quot; );\n   Console::WriteLine( gcnew String( chars ) );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_OpenStandardInput_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_OpenStandardInput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenStandardInput(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Acquires the standard input stream, which is set to a specified buffer size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Stream OpenStandardInput (int bufferSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bufferSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The internal stream buffer size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>The standard input stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>bufferSize</code> is less than or equal to zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to reacquire the standard output stream after it has been changed by the <a class=\"xref\" href=\"system.console#System_Console_SetIn_\" data-linktype=\"relative-path\">SetIn</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>OpenStandardInput</code> property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.OpenStandartInput#1\">using System;\nusing System.Text;\nusing System.IO;\n\npublic class Decoder {\n    public static void Main() {\n        Stream inputStream = Console.OpenStandardInput();\n        byte[] bytes = new byte[100];\n        Console.WriteLine(&quot;To decode, type or paste the UTF7 encoded string and press enter:&quot;);\n        Console.WriteLine(&quot;(Example: \\&quot;M+APw-nchen ist wundervoll\\&quot;)&quot;);\n        int outputLength = inputStream.Read(bytes, 0, 100);\n        char[] chars = Encoding.UTF7.GetChars(bytes, 0, outputLength);\n        Console.WriteLine(&quot;Decoded string:&quot;);\n        Console.WriteLine(new string(chars));\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.OpenStandartInput#1\">Imports System.Text\nImports System.IO\n\nPublic Class Decoder\n   Public Shared Sub Main()\n      Dim inputStream As Stream = Console.OpenStandardInput()\n      Dim bytes(100) As Byte\n      Console.WriteLine(&quot;To decode, type or paste the UTF7 encoded string and press enter:&quot;)\n      Console.WriteLine(&quot;(Example: &quot;&quot;M+APw-nchen ist wundervoll&quot;&quot;)&quot;)\n      Dim outputLength As Integer = inputStream.Read(bytes, 0, 100)\n      Dim chars As Char() = Encoding.UTF7.GetChars(bytes, 0, outputLength)\n      Console.WriteLine(&quot;Decoded string:&quot;)\n      Console.WriteLine(New String(chars))\n   End Sub &#39;Main\nEnd Class &#39;Decoder\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console.OpenStandartInput#1\">\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::IO;\n\nint main()\n{\n   Stream^ inputStream = Console::OpenStandardInput();\n   array&lt;Byte&gt;^bytes = gcnew array&lt;Byte&gt;(100);\n   Console::WriteLine( &quot;To decode, type or paste the UTF7 encoded string and press enter:&quot; );\n   Console::WriteLine( &quot;(Example: \\&quot;M+APw-nchen ist wundervoll\\&quot;)&quot; );\n   int outputLength = inputStream-&gt;Read( bytes, 0, 100 );\n   array&lt;Char&gt;^chars = Encoding::UTF7-&gt;GetChars( bytes, 0, outputLength );\n   Console::WriteLine( &quot;Decoded string:&quot; );\n   Console::WriteLine( gcnew String( chars ) );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_OpenStandardOutput\">\r\n    \r\n            <a id=\"System_Console_OpenStandardOutput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenStandardOutput()</div>        \r\n          </div>\r\n    \r\n            <p>Acquires the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Stream OpenStandardOutput ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>The standard output stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to reacquire the standard output stream after it has been changed by the <a class=\"xref\" href=\"system.console#System_Console_SetOut_\" data-linktype=\"relative-path\">SetOut</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command-line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console-INSERTTABS#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   const int tabSize = 4;\n   String^ usageText = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;;\n   StreamWriter^ writer = nullptr;\n   if ( args-&gt;Length &lt; 3 )\n   {\n      Console::WriteLine( usageText );\n      return 1;\n   }\n\n   try\n   {\n      // Attempt to open output file.\n      writer = gcnew StreamWriter( args[ 2 ] );\n      // Redirect standard output from the console to the output file.\n      Console::SetOut( writer );\n      // Redirect standard input from the console to the input file.\n      Console::SetIn( gcnew StreamReader( args[ 1 ] ) );\n   }\n   catch ( IOException^ e ) \n   {\n      TextWriter^ errorWriter = Console::Error;\n      errorWriter-&gt;WriteLine( e-&gt;Message );\n      errorWriter-&gt;WriteLine( usageText );\n      return 1;\n   }\n\n   String^ line;\n   while ( (line = Console::ReadLine()) != nullptr )\n   {\n      String^ newLine = line-&gt;Replace( ((String^)&quot;&quot;)-&gt;PadRight( tabSize, &#39; &#39; ), &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      Console::WriteLine( newLine );\n   }\n\n   writer-&gt;Close();\n   \n   // Recover the standard output stream so that a \n   // completion message can be displayed.\n   StreamWriter^ standardOutput = gcnew StreamWriter( Console::OpenStandardOutput() );\n   standardOutput-&gt;AutoFlush = true;\n   Console::SetOut( standardOutput );\n   Console::WriteLine( &quot;INSERTTABS has completed the processing of {0}.&quot;, args[ 1 ] );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console-INSERTTABS#1\">Imports System.IO\n\nPublic Class InsertTabs\n   Private Const tabSize As Integer = 4\n   Private Const usageText As String = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;\n   \n   Public Shared Function Main(args() As String) As Integer\n      Dim writer As StreamWriter = Nothing\n\n      If args.Length &lt; 2 Then\n         Console.WriteLine(usageText)\n         Return 1\n      End If\n      \n      Try\n         &#39; Attempt to open output file.\n         writer = New StreamWriter(args(1))\n         &#39; Redirect standard output from the console to the output file.\n         Console.SetOut(writer)\n         &#39; Redirect standard input from the console to the input file.\n         Console.SetIn(New StreamReader(args(0)))\n      Catch e As IOException\n         Dim errorWriter As TextWriter = Console.Error\n         errorWriter.WriteLine(e.Message)\n         errorWriter.WriteLine(usageText)\n         Return 1\n      End Try\n\n      Dim line As String = Console.ReadLine()\n      While line IsNot Nothing\n         Dim newLine As String = line.Replace(&quot;&quot;.PadRight(tabSize, &quot; &quot;c), ControlChars.Tab)\n         Console.WriteLine(newLine)\n         line = Console.ReadLine()\n      End While\n      writer.Close()\n      &#39; Recover the standard output stream so that a \n      &#39; completion message can be displayed.\n      Dim standardOutput As New StreamWriter(Console.OpenStandardOutput())\n      standardOutput.AutoFlush = True\n      Console.SetOut(standardOutput)\n      Console.WriteLine(&quot;INSERTTABS has completed the processing of {0}.&quot;, args(0))\n      Return 0\n   End Function \nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-INSERTTABS#1\">using System;\nusing System.IO;\n\npublic class InsertTabs {\n    private const int tabSize = 4;\n    private const string usageText = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;;\n    public static int Main(string[] args) {\n        StreamWriter writer = null;\n\n        if (args.Length &lt; 2) {\n            Console.WriteLine(usageText);\n            return 1;\n        }\n\n        try {\n            // Attempt to open output file.\n            writer = new StreamWriter(args[1]);\n            // Redirect standard output from the console to the output file.\n            Console.SetOut(writer);\n            // Redirect standard input from the console to the input file.\n            Console.SetIn(new StreamReader(args[0]));\n        }\n        catch(IOException e) {\n            TextWriter errorWriter = Console.Error;\n            errorWriter.WriteLine(e.Message);\n            errorWriter.WriteLine(usageText);\n            return 1;            \n        }\n        string line;\n        while ((line = Console.ReadLine()) != null) {\n            string newLine = line.Replace((&quot;&quot;).PadRight(tabSize, &#39; &#39;), &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;);\n            Console.WriteLine(newLine);\n        }\n        writer.Close();\n        // Recover the standard output stream so that a \n        // completion message can be displayed.\n        StreamWriter standardOutput = new StreamWriter(Console.OpenStandardOutput());\n        standardOutput.AutoFlush = true;\n        Console.SetOut(standardOutput);\n        Console.WriteLine(&quot;INSERTTABS has completed the processing of {0}.&quot;, args[0]);\n        return 0;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_OpenStandardOutput_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_OpenStandardOutput_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenStandardOutput(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Acquires the standard output stream, which is set to a specified buffer size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.Stream OpenStandardOutput (int bufferSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bufferSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The internal stream buffer size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>The standard output stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>bufferSize</code> is less than or equal to zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to reacquire the standard output stream after it has been changed by the <a class=\"xref\" href=\"system.console#System_Console_SetOut_\" data-linktype=\"relative-path\">SetOut</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console-INSERTTABS#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   const int tabSize = 4;\n   String^ usageText = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;;\n   StreamWriter^ writer = nullptr;\n   if ( args-&gt;Length &lt; 3 )\n   {\n      Console::WriteLine( usageText );\n      return 1;\n   }\n\n   try\n   {\n      // Attempt to open output file.\n      writer = gcnew StreamWriter( args[ 2 ] );\n      // Redirect standard output from the console to the output file.\n      Console::SetOut( writer );\n      // Redirect standard input from the console to the input file.\n      Console::SetIn( gcnew StreamReader( args[ 1 ] ) );\n   }\n   catch ( IOException^ e ) \n   {\n      TextWriter^ errorWriter = Console::Error;\n      errorWriter-&gt;WriteLine( e-&gt;Message );\n      errorWriter-&gt;WriteLine( usageText );\n      return 1;\n   }\n\n   String^ line;\n   while ( (line = Console::ReadLine()) != nullptr )\n   {\n      String^ newLine = line-&gt;Replace( ((String^)&quot;&quot;)-&gt;PadRight( tabSize, &#39; &#39; ), &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      Console::WriteLine( newLine );\n   }\n\n   writer-&gt;Close();\n   \n   // Recover the standard output stream so that a \n   // completion message can be displayed.\n   StreamWriter^ standardOutput = gcnew StreamWriter( Console::OpenStandardOutput() );\n   standardOutput-&gt;AutoFlush = true;\n   Console::SetOut( standardOutput );\n   Console::WriteLine( &quot;INSERTTABS has completed the processing of {0}.&quot;, args[ 1 ] );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console-INSERTTABS#1\">Imports System.IO\n\nPublic Class InsertTabs\n   Private Const tabSize As Integer = 4\n   Private Const usageText As String = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;\n   \n   Public Shared Function Main(args() As String) As Integer\n      Dim writer As StreamWriter = Nothing\n\n      If args.Length &lt; 2 Then\n         Console.WriteLine(usageText)\n         Return 1\n      End If\n      \n      Try\n         &#39; Attempt to open output file.\n         writer = New StreamWriter(args(1))\n         &#39; Redirect standard output from the console to the output file.\n         Console.SetOut(writer)\n         &#39; Redirect standard input from the console to the input file.\n         Console.SetIn(New StreamReader(args(0)))\n      Catch e As IOException\n         Dim errorWriter As TextWriter = Console.Error\n         errorWriter.WriteLine(e.Message)\n         errorWriter.WriteLine(usageText)\n         Return 1\n      End Try\n\n      Dim line As String = Console.ReadLine()\n      While line IsNot Nothing\n         Dim newLine As String = line.Replace(&quot;&quot;.PadRight(tabSize, &quot; &quot;c), ControlChars.Tab)\n         Console.WriteLine(newLine)\n         line = Console.ReadLine()\n      End While\n      writer.Close()\n      &#39; Recover the standard output stream so that a \n      &#39; completion message can be displayed.\n      Dim standardOutput As New StreamWriter(Console.OpenStandardOutput())\n      standardOutput.AutoFlush = True\n      Console.SetOut(standardOutput)\n      Console.WriteLine(&quot;INSERTTABS has completed the processing of {0}.&quot;, args(0))\n      Return 0\n   End Function \nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-INSERTTABS#1\">using System;\nusing System.IO;\n\npublic class InsertTabs {\n    private const int tabSize = 4;\n    private const string usageText = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;;\n    public static int Main(string[] args) {\n        StreamWriter writer = null;\n\n        if (args.Length &lt; 2) {\n            Console.WriteLine(usageText);\n            return 1;\n        }\n\n        try {\n            // Attempt to open output file.\n            writer = new StreamWriter(args[1]);\n            // Redirect standard output from the console to the output file.\n            Console.SetOut(writer);\n            // Redirect standard input from the console to the input file.\n            Console.SetIn(new StreamReader(args[0]));\n        }\n        catch(IOException e) {\n            TextWriter errorWriter = Console.Error;\n            errorWriter.WriteLine(e.Message);\n            errorWriter.WriteLine(usageText);\n            return 1;            \n        }\n        string line;\n        while ((line = Console.ReadLine()) != null) {\n            string newLine = line.Replace((&quot;&quot;).PadRight(tabSize, &#39; &#39;), &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;);\n            Console.WriteLine(newLine);\n        }\n        writer.Close();\n        // Recover the standard output stream so that a \n        // completion message can be displayed.\n        StreamWriter standardOutput = new StreamWriter(Console.OpenStandardOutput());\n        standardOutput.AutoFlush = true;\n        Console.SetOut(standardOutput);\n        Console.WriteLine(&quot;INSERTTABS has completed the processing of {0}.&quot;, args[0]);\n        return 0;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Read\">\r\n    \r\n            <a id=\"System_Console_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the next character from the standard input stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Read ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Read method blocks its return while you type input characters; it terminates when you press the <a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a> key. Pressing Enter appends a platform-dependent line termination sequence to your input (for example, Windows appends a carriage return-linefeed sequence). Subsequent calls to the Read method retrieve your input one character at a time. After the final character is retrieved, Read blocks its return again and the cycle repeats.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The <a class=\"xref\" href=\"system.console#System_Console_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> method, or the <a class=\"xref\" href=\"system.console#System_Console_KeyAvailable_\" data-linktype=\"relative-path\">KeyAvailable</a> property and <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method are preferable to using the Read method.  </p>\n</div>\n<p> Note that the method does not return -1 unless you perform one of the following actions:  </p>\n<ul>\n<li><p>Simultaneously press the <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> modifier key and <a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a> console key (Ctrl+Z), which signals the end-of-file condition.  </p>\n</li>\n<li><p>Press an equivalent key that signals the end-of-file condition, such as the F6 function key in Windows.  </p>\n</li>\n<li><p>Redirect the input stream to a source, such as a text file, that has an actual end-of-file character.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the Read method.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.read#1\">// This example demonstrates the Console.Read() method.\nusing namespace System;\nint main()\n{\n   String^ m1 = &quot;<br>Type a string of text then press Enter. &quot;\n   &quot;Type &#39;+&#39; anywhere in the text to quit:<br>&quot;;\n   String^ m2 = &quot;Character &#39;{0}&#39; is hexadecimal 0x{1:x4}.&quot;;\n   String^ m3 = &quot;Character     is hexadecimal 0x{0:x4}.&quot;;\n   Char ch;\n   int x;\n   \n   //\n   Console::WriteLine( m1 );\n   do\n   {\n      x = Console::Read();\n      try\n      {\n         ch = Convert::ToChar( x );\n         if ( Char::IsWhiteSpace( ch ) )\n         {\n            Console::WriteLine( m3, x );\n            if ( ch == 0x0a )\n                        Console::WriteLine( m1 );\n         }\n         else\n                  Console::WriteLine( m2, ch, x );\n      }\n      catch ( OverflowException^ e ) \n      {\n         Console::WriteLine( &quot;{0} Value read = {1}.&quot;, e-&gt;Message, x );\n         ch = Char::MinValue;\n         Console::WriteLine( m1 );\n      }\n\n   }\n   while ( ch != &#39;+&#39; );\n}\n\n/*\nThis example produces the following results:\n\nType a string of text then press Enter. Type &#39;+&#39; anywhere in the text to quit:\n\nThe quick brown fox.\nCharacter &#39;T&#39; is hexadecimal 0x0054.\nCharacter &#39;h&#39; is hexadecimal 0x0068.\nCharacter &#39;e&#39; is hexadecimal 0x0065.\nCharacter     is hexadecimal 0x0020.\nCharacter &#39;q&#39; is hexadecimal 0x0071.\nCharacter &#39;u&#39; is hexadecimal 0x0075.\nCharacter &#39;i&#39; is hexadecimal 0x0069.\nCharacter &#39;c&#39; is hexadecimal 0x0063.\nCharacter &#39;k&#39; is hexadecimal 0x006b.\nCharacter     is hexadecimal 0x0020.\nCharacter &#39;b&#39; is hexadecimal 0x0062.\nCharacter &#39;r&#39; is hexadecimal 0x0072.\nCharacter &#39;o&#39; is hexadecimal 0x006f.\nCharacter &#39;w&#39; is hexadecimal 0x0077.\nCharacter &#39;n&#39; is hexadecimal 0x006e.\nCharacter     is hexadecimal 0x0020.\nCharacter &#39;f&#39; is hexadecimal 0x0066.\nCharacter &#39;o&#39; is hexadecimal 0x006f.\nCharacter &#39;x&#39; is hexadecimal 0x0078.\nCharacter &#39;.&#39; is hexadecimal 0x002e.\nCharacter     is hexadecimal 0x000d.\nCharacter     is hexadecimal 0x000a.\n\nType a string of text then press Enter. Type &#39;+&#39; anywhere in the text to quit:\n\n^Z\nValue was either too large or too small for a character. Value read = -1.\n\nType a string of text then press Enter. Type &#39;+&#39; anywhere in the text to quit:\n\n+\nCharacter &#39;+&#39; is hexadecimal 0x002b.\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"console.read#1\">// This example demonstrates the Console.Read() method.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string m1 = &quot;<br>Type a string of text then press Enter. &quot; +\n                &quot;Type &#39;+&#39; anywhere in the text to quit:<br>&quot;;\n    string m2 = &quot;Character &#39;{0}&#39; is hexadecimal 0x{1:x4}.&quot;;\n    string m3 = &quot;Character     is hexadecimal 0x{0:x4}.&quot;;\n    char ch;\n    int x;\n//\n    Console.WriteLine(m1);\n    do  \n        {\n        x = Console.Read();\n        try \n            {\n            ch = Convert.ToChar(x);\n            if (Char.IsWhiteSpace(ch))\n               {\n               Console.WriteLine(m3, x);\n               if (ch == 0x0a) \n                   Console.WriteLine(m1);\n               }\n            else\n               Console.WriteLine(m2, ch, x);\n            }\n        catch (OverflowException e) \n            {\n            Console.WriteLine(&quot;{0} Value read = {1}.&quot;, e.Message, x);\n            ch = Char.MinValue;\n            Console.WriteLine(m1);\n            }\n        } while (ch != &#39;+&#39;);\n    }\n}\n/*\nThis example produces the following results:\n\nType a string of text then press Enter. Type &#39;+&#39; anywhere in the text to quit:\n\nThe quick brown fox.\nCharacter &#39;T&#39; is hexadecimal 0x0054.\nCharacter &#39;h&#39; is hexadecimal 0x0068.\nCharacter &#39;e&#39; is hexadecimal 0x0065.\nCharacter     is hexadecimal 0x0020.\nCharacter &#39;q&#39; is hexadecimal 0x0071.\nCharacter &#39;u&#39; is hexadecimal 0x0075.\nCharacter &#39;i&#39; is hexadecimal 0x0069.\nCharacter &#39;c&#39; is hexadecimal 0x0063.\nCharacter &#39;k&#39; is hexadecimal 0x006b.\nCharacter     is hexadecimal 0x0020.\nCharacter &#39;b&#39; is hexadecimal 0x0062.\nCharacter &#39;r&#39; is hexadecimal 0x0072.\nCharacter &#39;o&#39; is hexadecimal 0x006f.\nCharacter &#39;w&#39; is hexadecimal 0x0077.\nCharacter &#39;n&#39; is hexadecimal 0x006e.\nCharacter     is hexadecimal 0x0020.\nCharacter &#39;f&#39; is hexadecimal 0x0066.\nCharacter &#39;o&#39; is hexadecimal 0x006f.\nCharacter &#39;x&#39; is hexadecimal 0x0078.\nCharacter &#39;.&#39; is hexadecimal 0x002e.\nCharacter     is hexadecimal 0x000d.\nCharacter     is hexadecimal 0x000a.\n\nType a string of text then press Enter. Type &#39;+&#39; anywhere in the text to quit:\n\n^Z\nValue was either too large or too small for a character. Value read = -1.\n\nType a string of text then press Enter. Type &#39;+&#39; anywhere in the text to quit:\n\n+\nCharacter &#39;+&#39; is hexadecimal 0x002b.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.read#1\">&#39; This example demonstrates the Console.Read() method.\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      Dim m1 As String = _\n                vbCrLf &amp; _\n                &quot;Type a string of text then press Enter. &quot; &amp; _\n                &quot;Type &#39;+&#39; anywhere in the text to quit:&quot; &amp; _\n                vbCrLf\n      Dim m2 As String = &quot;Character &#39;{0}&#39; is hexadecimal 0x{1:x4}.&quot;\n      Dim m3 As String = &quot;Character     is hexadecimal 0x{0:x4}.&quot;\n      Dim ch As Char\n      Dim x As Integer\n      &#39;\n      Console.WriteLine(m1)\n      Do\n         x = Console.Read()\n         Try\n            ch = Convert.ToChar(x)\n            If Char.IsWhiteSpace(ch) Then\n               Console.WriteLine(m3, x)\n               If ch = vbLf Then\n                  Console.WriteLine(m1)\n               End If\n            Else\n               Console.WriteLine(m2, ch, x)\n            End If\n         Catch e As OverflowException\n            Console.WriteLine(&quot;{0} Value read = {1}.&quot;, e.Message, x)\n            ch = Char.MinValue\n            Console.WriteLine(m1)\n         End Try\n      Loop While ch &lt;&gt; &quot;+&quot;c\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Type a string of text then press Enter. Type &#39;+&#39; anywhere in the text to quit:\n&#39;\n&#39;The quick brown fox.\n&#39;Character &#39;T&#39; is hexadecimal 0x0054.\n&#39;Character &#39;h&#39; is hexadecimal 0x0068.\n&#39;Character &#39;e&#39; is hexadecimal 0x0065.\n&#39;Character     is hexadecimal 0x0020.\n&#39;Character &#39;q&#39; is hexadecimal 0x0071.\n&#39;Character &#39;u&#39; is hexadecimal 0x0075.\n&#39;Character &#39;i&#39; is hexadecimal 0x0069.\n&#39;Character &#39;c&#39; is hexadecimal 0x0063.\n&#39;Character &#39;k&#39; is hexadecimal 0x006b.\n&#39;Character     is hexadecimal 0x0020.\n&#39;Character &#39;b&#39; is hexadecimal 0x0062.\n&#39;Character &#39;r&#39; is hexadecimal 0x0072.\n&#39;Character &#39;o&#39; is hexadecimal 0x006f.\n&#39;Character &#39;w&#39; is hexadecimal 0x0077.\n&#39;Character &#39;n&#39; is hexadecimal 0x006e.\n&#39;Character     is hexadecimal 0x0020.\n&#39;Character &#39;f&#39; is hexadecimal 0x0066.\n&#39;Character &#39;o&#39; is hexadecimal 0x006f.\n&#39;Character &#39;x&#39; is hexadecimal 0x0078.\n&#39;Character &#39;.&#39; is hexadecimal 0x002e.\n&#39;Character     is hexadecimal 0x000d.\n&#39;Character     is hexadecimal 0x000a.\n&#39;\n&#39;Type a string of text then press Enter. Type &#39;+&#39; anywhere in the text to quit:\n&#39;\n&#39;^Z\n&#39;Value was either too large or too small for a character. Value read = -1.\n&#39;\n&#39;Type a string of text then press Enter. Type &#39;+&#39; anywhere in the text to quit:\n&#39;\n&#39;+\n&#39;Character &#39;+&#39; is hexadecimal 0x002b.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_ReadKey\">\r\n    \r\n            <a id=\"System_Console_ReadKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadKey()</div>        \r\n          </div>\r\n    \r\n            <p>Obtains the next character or function key pressed by the user. The pressed key is displayed in the console window.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ConsoleKeyInfo ReadKey ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a></div>\r\n                  </div>\r\n                  <p>An object that describes the <a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a> constant and Unicode character, if any, that correspond to the pressed console key. The <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object also describes, in a bitwise combination of <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Console.In*</span> property is redirected from some stream other than the console.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReadKey method waits, that is, blocks on the thread issuing the ReadKey method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the ReadKey method to return.  </p>\n<p> Depending on your application, you might want to use the ReadKey method in conjunction with the <a class=\"xref\" href=\"system.console#System_Console_KeyAvailable_\" data-linktype=\"relative-path\">KeyAvailable</a> property.  </p>\n<p> The ReadKey method reads from the keyboard even if the standard input is redirected to a file with the <a class=\"xref\" href=\"system.console#System_Console_SetIn_\" data-linktype=\"relative-path\">SetIn</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>One of the most common uses of the ReadKey method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.ReadKey#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime dat = DateTime.Now;\n      Console.WriteLine(&quot;The time: {0:d} at {0:t}&quot;, dat);\n      TimeZoneInfo tz = TimeZoneInfo.Local;\n      Console.WriteLine(&quot;The time zone: {0}<br>&quot;, \n                        tz.IsDaylightSavingTime(dat) ?\n                           tz.DaylightName : tz.StandardName);\n      Console.Write(&quot;Press &lt;Enter&gt; to exit... &quot;);\n      while (Console.ReadKey(true).Key != ConsoleKey.Enter) {}\n   }\n}\n// The example displays output like the following:\n//     The time: 11/11/2015 at 4:02 PM:\n//     The time zone: Pacific Standard Time\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.ReadKey#1\">Module Example\n   Public Sub Main()\n      Dim dat As Date = Date.Now\n      Console.WriteLine(&quot;The time: {0:d} at {0:t}&quot;, dat)\n      Dim tz As TimeZoneInfo = TimeZoneInfo.Local\n      Console.WriteLine(&quot;The time zone: {0}&quot;, \n                        If(tz.IsDaylightSavingTime(dat),\n                           tz.DaylightName, tz.StandardName))\n      Console.WriteLine()\n      Console.Write(&quot;Press &lt;Enter&gt; to exit... &quot;)\n      Do While Console.ReadKey(True).Key &lt;&gt; ConsoleKey.Enter\n      Loop\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     The time: 11/11/2015 at 4:02 PM\n&#39;     The time zone: Pacific Standard Time\n</code></pre><p> Note that this overload of the <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method by default echoes any displayable keys that the user presses to the console. To suppress them, call the  <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method with an <code>intercept</code> argument of <code>true</code>.  </p>\n<p> The following example uses the ReadKey method to display information about which key the user pressed..  </p>\n<pre><code class=\"lang-cs\" name=\"console.readkey1#1\">using System;\n\nclass Example \n{\n   public static void Main() \n   {\n      ConsoleKeyInfo cki;\n      // Prevent example from ending if CTL+C is pressed.\n      Console.TreatControlCAsInput = true;\n\n      Console.WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;);\n      Console.WriteLine(&quot;Press the Escape (Esc) key to quit: <br>&quot;);\n      do \n      {\n         cki = Console.ReadKey();\n         Console.Write(&quot; --- You pressed &quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Alt) != 0) Console.Write(&quot;ALT+&quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Shift) != 0) Console.Write(&quot;SHIFT+&quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Control) != 0) Console.Write(&quot;CTL+&quot;);\n         Console.WriteLine(cki.Key.ToString());\n       } while (cki.Key != ConsoleKey.Escape);\n    }\n}\n// This example displays output similar to the following:\n//       Press any combination of CTL, ALT, and SHIFT, and a console key.\n//       Press the Escape (Esc) key to quit:\n//       \n//       a --- You pressed A \n//       k --- You pressed ALT+K \n//       â–º --- You pressed CTL+P \n//         --- You pressed RightArrow \n//       R --- You pressed SHIFT+R \n//                --- You pressed CTL+I \n//       j --- You pressed ALT+J \n//       O --- You pressed SHIFT+O \n//       &#167; --- You pressed CTL+U \n</code></pre><pre><code class=\"lang-cpp\" name=\"console.readkey1#1\">using namespace System;\n\nvoid main()\n{\n   ConsoleKeyInfo cki;\n   // Prevent example from ending if CTL+C is pressed.\n   Console::TreatControlCAsInput = true;\n\n   Console::WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;);\n   Console::WriteLine(&quot;Press the Escape (Esc) key to quit: <br>&quot;);\n   do \n   {\n      cki = Console::ReadKey();\n      Console::Write(&quot; --- You pressed &quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Alt) != ConsoleModifiers()) Console::Write(&quot;ALT+&quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Shift) != ConsoleModifiers()) Console::Write(&quot;SHIFT+&quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Control) != ConsoleModifiers()) Console::Write(&quot;CTL+&quot;);\n      Console::WriteLine(cki.Key.ToString());\n   } while (cki.Key != ConsoleKey::Escape);\n}\n// This example displays output similar to the following:\n//       Press any combination of CTL, ALT, and SHIFT, and a console key.\n//       Press the Escape (Esc) key to quit:\n//       \n//       a --- You pressed A \n//       k --- You pressed ALT+K \n//       â–º --- You pressed CTL+P \n//         --- You pressed RightArrow \n//       R --- You pressed SHIFT+R \n//                --- You pressed CTL+I \n//       j --- You pressed ALT+J \n//       O --- You pressed SHIFT+O \n//       &#167; --- You pressed CTL+U }\n</code></pre><pre><code class=\"lang-vb\" name=\"console.readkey1#1\">Class Example\n   Public Shared Sub Main()\n      Dim cki As ConsoleKeyInfo\n      &#39; Prevent example from ending if CTL+C is pressed.\n      Console.TreatControlCAsInput = True\n\n      Console.WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;)\n      Console.WriteLine(&quot;Press the Escape (Esc) key to quit: &quot; + vbCrLf)\n      Do\n         cki = Console.ReadKey()\n         Console.Write(&quot; --- You pressed &quot;)\n         If (cki.Modifiers And ConsoleModifiers.Alt) &lt;&gt; 0 Then Console.Write(&quot;ALT+&quot;)\n         If (cki.Modifiers And ConsoleModifiers.Shift) &lt;&gt; 0 Then Console.Write(&quot;SHIFT+&quot;)\n         If (cki.Modifiers And ConsoleModifiers.Control) &lt;&gt; 0 Then Console.Write(&quot;CTL+&quot;)\n         Console.WriteLine(cki.Key.ToString)\n      Loop While cki.Key &lt;&gt; ConsoleKey.Escape\n   End Sub \nEnd Class \n&#39; This example displays output similar to the following:\n&#39;       Press any combination of CTL, ALT, and SHIFT, and a console key.\n&#39;       Press the Escape (Esc) key to quit:\n&#39;       \n&#39;       a --- You pressed A \n&#39;       k --- You pressed ALT+K \n&#39;       â–º --- You pressed CTL+P \n&#39;         --- You pressed RightArrow \n&#39;       R --- You pressed SHIFT+R \n&#39;                --- You pressed CTL+I \n&#39;       j --- You pressed ALT+J \n&#39;       O --- You pressed SHIFT+O \n&#39;       &#167; --- You pressed CTL+U \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_ReadKey_System_Boolean_\">\r\n    \r\n            <a id=\"System_Console_ReadKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadKey(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Obtains the next character or function key pressed by the user. The pressed key is optionally displayed in the console window.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ConsoleKeyInfo ReadKey (bool intercept);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>intercept</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Determines whether to display the pressed key in the console window. <code>true</code> to not display the pressed key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a></div>\r\n                  </div>\r\n                  <p>An object that describes the <a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a> constant and Unicode character, if any, that correspond to the pressed console key. The <a class=\"xref\" href=\"system.consolekeyinfo\" data-linktype=\"relative-path\">ConsoleKeyInfo</a> object also describes, in a bitwise combination of <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Console.In*</span> property is redirected from some stream other than the console.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method waits, that is, blocks on the thread issuing the <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method to return.  </p>\n<p> If the <code>intercept</code> parameter is <code>true</code>, the pressed key is intercepted and not displayed in the console window; otherwise, the pressed key is displayed.  </p>\n<p> Depending on your application, you might want to use the <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method in conjunction with the <a class=\"xref\" href=\"system.console#System_Console_KeyAvailable_\" data-linktype=\"relative-path\">KeyAvailable</a> property.  </p>\n<p> The <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method reads from the keyboard even if the standard input is redirected to a file with the <a class=\"xref\" href=\"system.console#System_Console_SetIn_\" data-linktype=\"relative-path\">SetIn</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>One of the most common uses of the <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app. Note that, if the user presses any other key, it is not echoed to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console.ReadKey#2\">Module Example\n   Public Sub Main()\n      Dim dat As Date = Date.Now\n      Console.WriteLine(&quot;The time: {0:d} at {0:t}&quot;, dat)\n      Dim tz As TimeZoneInfo = TimeZoneInfo.Local\n      Console.WriteLine(&quot;The time zone: {0}&quot;, \n                        If(tz.IsDaylightSavingTime(dat),\n                           tz.DaylightName, tz.StandardName))\n      Console.WriteLine()\n      Console.Write(&quot;Press &lt;Enter&gt; to exit... &quot;)\n      Do While Console.ReadKey(True).Key &lt;&gt; ConsoleKey.Enter\n      Loop\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     The time: 11/11/2015 at 4:02 PM\n&#39;     The time zone: Pacific Standard Time\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.ReadKey#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime dat = DateTime.Now;\n      Console.WriteLine(&quot;The time: {0:d} at {0:t}&quot;, dat);\n      TimeZoneInfo tz = TimeZoneInfo.Local;\n      Console.WriteLine(&quot;The time zone: {0}<br>&quot;, \n                        tz.IsDaylightSavingTime(dat) ?\n                           tz.DaylightName : tz.StandardName);\n      Console.Write(&quot;Press &lt;Enter&gt; to exit... &quot;);\n      while (Console.ReadKey(true).Key != ConsoleKey.Enter) {}\n   }\n}\n// The example displays output like the following:\n//     The time: 11/11/2015 at 4:02 PM:\n//     The time zone: Pacific Standard Time\n</code></pre><p> The following example uses the ReadKey method to display information about the key pressed by a user without echoing that key to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"console.readkey2#1\">using System;\n\nclass Example \n{\n   public static void Main() \n   {\n      ConsoleKeyInfo cki;\n      // Prevent example from ending if CTL+C is pressed.\n      Console.TreatControlCAsInput = true;\n\n      Console.WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;);\n      Console.WriteLine(&quot;Press the Escape (Esc) key to quit: <br>&quot;);\n      do \n      {\n         cki = Console.ReadKey();\n         Console.Write(&quot; --- You pressed &quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Alt) != 0) Console.Write(&quot;ALT+&quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Shift) != 0) Console.Write(&quot;SHIFT+&quot;);\n         if((cki.Modifiers &amp; ConsoleModifiers.Control) != 0) Console.Write(&quot;CTL+&quot;);\n         Console.WriteLine(cki.Key.ToString());\n       } while (cki.Key != ConsoleKey.Escape);\n    }\n}\n// This example displays output similar to the following:\n//       Press any combination of CTL, ALT, and SHIFT, and a console key.\n//       Press the Escape (Esc) key to quit:\n//       \n//       a --- You pressed A \n//       k --- You pressed ALT+K \n//       â–º --- You pressed CTL+P \n//         --- You pressed RightArrow \n//       R --- You pressed SHIFT+R \n//                --- You pressed CTL+I \n//       j --- You pressed ALT+J \n//       O --- You pressed SHIFT+O \n//       &#167; --- You pressed CTL+U \n</code></pre><pre><code class=\"lang-cpp\" name=\"console.readkey2#1\">using namespace System;\n\nvoid main()\n{\n   ConsoleKeyInfo cki;\n   // Prevent example from ending if CTL+C is pressed.\n   Console::TreatControlCAsInput = true;\n\n   Console::WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;);\n   Console::WriteLine(&quot;Press the Escape (Esc) key to quit: <br>&quot;);\n   do \n   {\n      cki = Console::ReadKey();\n      Console::Write(&quot; --- You pressed &quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Alt) != ConsoleModifiers()) Console::Write(&quot;ALT+&quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Shift) != ConsoleModifiers()) Console::Write(&quot;SHIFT+&quot;);\n      if((cki.Modifiers &amp; ConsoleModifiers::Control) != ConsoleModifiers()) Console::Write(&quot;CTL+&quot;);\n      Console::WriteLine(cki.Key.ToString());\n   } while (cki.Key != ConsoleKey::Escape);\n}\n// This example displays output similar to the following:\n//       Press any combination of CTL, ALT, and SHIFT, and a console key.\n//       Press the Escape (Esc) key to quit:\n//       \n//       a --- You pressed A \n//       k --- You pressed ALT+K \n//       â–º --- You pressed CTL+P \n//         --- You pressed RightArrow \n//       R --- You pressed SHIFT+R \n//                --- You pressed CTL+I \n//       j --- You pressed ALT+J \n//       O --- You pressed SHIFT+O \n//       &#167; --- You pressed CTL+U }\n</code></pre><pre><code class=\"lang-vb\" name=\"console.readkey2#1\">Class Example\n   Public Shared Sub Main()\n      Dim cki As ConsoleKeyInfo\n      &#39; Prevent example from ending if CTL+C is pressed.\n      Console.TreatControlCAsInput = True\n\n      Console.WriteLine(&quot;Press any combination of CTL, ALT, and SHIFT, and a console key.&quot;)\n      Console.WriteLine(&quot;Press the Escape (Esc) key to quit: &quot; + vbCrLf)\n      Do\n         cki = Console.ReadKey()\n         Console.Write(&quot; --- You pressed &quot;)\n         If (cki.Modifiers And ConsoleModifiers.Alt) &lt;&gt; 0 Then Console.Write(&quot;ALT+&quot;)\n         If (cki.Modifiers And ConsoleModifiers.Shift) &lt;&gt; 0 Then Console.Write(&quot;SHIFT+&quot;)\n         If (cki.Modifiers And ConsoleModifiers.Control) &lt;&gt; 0 Then Console.Write(&quot;CTL+&quot;)\n         Console.WriteLine(cki.Key.ToString)\n      Loop While cki.Key &lt;&gt; ConsoleKey.Escape\n   End Sub \nEnd Class \n&#39; This example displays output similar to the following:\n&#39;       Press any combination of CTL, ALT, and SHIFT, and a console key.\n&#39;       Press the Escape (Esc) key to quit:\n&#39;       \n&#39;       a --- You pressed A \n&#39;       k --- You pressed ALT+K \n&#39;       â–º --- You pressed CTL+P \n&#39;         --- You pressed RightArrow \n&#39;       R --- You pressed SHIFT+R \n&#39;                --- You pressed CTL+I \n&#39;       j --- You pressed ALT+J \n&#39;       O --- You pressed SHIFT+O \n&#39;       &#167; --- You pressed CTL+U \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_ReadLine\">\r\n    \r\n            <a id=\"System_Console_ReadLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadLine()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the next line of characters from the standard input stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ReadLine ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The next line of characters from the input stream, or <code>null</code> if no more lines are available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is insufficient memory to allocate a buffer for the returned string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The number of characters in the next line of characters is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReadLine method reads a line from the standard input stream. (For the definition of a line, see the paragraph after the following list.) This means that:  </p>\n<ul>\n<li><p>If the standard input device is the keyboard, the ReadLine method blocks until the user presses the <strong>Enter</strong> key.  </p>\n<p> One of the most common uses of the ReadLine method is to pause program execution before clearing the console and displaying new information to it, or to prompt the user to press the Enter key before terminating the application. The following example illustrates this.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console.ReadLine#6\">using namespace System;\n\nvoid main()\n{\n    Console::Clear();\n\n    DateTime dat = DateTime::Now;\n\n    Console::WriteLine(&quot;\\nToday is {0:d} at {0:T}.&quot;, dat);\n    Console::Write(&quot;\\nPress any key to continue... &quot;);\n    Console::ReadLine();\n}\n// The example displays output like the following:\n//     Today is 10/26/2015 at 12:22:22 PM.\n//     \n//     Press any key to continue...\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.ReadLine#6\">Module Example\n   Public Sub Main()\n      Console.Clear()\n\n      Dim dat As Date = Date.Now\n\n      Console.WriteLine()\n      Console.WriteLine(&quot;Today is {0:d} at {0:T}.&quot;, dat)\n      Console.WriteLine()\n      Console.Write(&quot;Press any key to continue... &quot;)\n      Console.ReadLine()\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;     Today is 10/26/2015 at 12:22:22 PM.\n&#39;     \n&#39;     Press any key to continue...\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.ReadLine#6\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.Clear();\n\n      DateTime dat = DateTime.Now;\n\n      Console.WriteLine(&quot;\\nToday is {0:d} at {0:T}.&quot;, dat);\n      Console.Write(&quot;\\nPress any key to continue... &quot;);\n      Console.ReadLine();\n   }\n}\n// The example displays output like the following:\n//     Today is 10/26/2015 at 12:22:22 PM.\n//     \n//     Press any key to continue...\n</code></pre></li>\n<li><p>If standard input is redirected to a file, the ReadLine method reads a line of text from a file. For example, the following is a text file named ReadLine1.txt:  </p>\n<pre><code>\nThis is the first line.  \nThis is the second line.  \nThis is the third line.  \nThis is the fourth line.  \n</code></pre><p> The following example uses the ReadLine method to read input that is redirected from a file. The read operation terminates when the  method returns <code>null</code>, which indicates that no lines remain to be read.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.ReadLine#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      if (! Console.IsInputRedirected) {\n         Console.WriteLine(&quot;This example requires that input be redirected from a file.&quot;);\n         return; \n      }\n\n      Console.WriteLine(&quot;About to call Console.ReadLine in a loop.&quot;);\n      Console.WriteLine(&quot;----&quot;);\n      String s;\n      int ctr = 0;\n      do {\n         ctr++;\n         s = Console.ReadLine();\n         Console.WriteLine(&quot;Line {0}: {1}&quot;, ctr, s);\n      } while (s != null);\n      Console.WriteLine(&quot;---&quot;);\n   }\n}\n// The example displays the following output:\n//       About to call Console.ReadLine in a loop.\n//       ----\n//       Line 1: This is the first line.\n//       Line 2: This is the second line.\n//       Line 3: This is the third line.\n//       Line 4: This is the fourth line.\n//       Line 5:\n//       ---\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.ReadLine#3\">Module Example\n   Public Sub Main()\n      If Not Console.IsInputRedirected Then\n         Console.WriteLine(&quot;This example requires that input be redirected from a file.&quot;)\n         Exit Sub \n      End If\n\n      Console.WriteLine(&quot;About to call Console.ReadLine in a loop.&quot;)\n      Console.WriteLine(&quot;----&quot;)\n      Dim s As String\n      Dim ctr As Integer\n      Do\n         ctr += 1\n         s = Console.ReadLine()\n         Console.WriteLine(&quot;Line {0}: {1}&quot;, ctr, s)\n      Loop While s IsNot Nothing\n      Console.WriteLine(&quot;---&quot;)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       About to call Console.ReadLine in a loop.\n&#39;       ----\n&#39;       Line 1: This is the first line.\n&#39;       Line 2: This is the second line.\n&#39;       Line 3: This is the third line.\n&#39;       Line 4: This is the fourth line.\n&#39;       Line 5:\n&#39;       ---\n</code></pre><p> After compiling the example to an executable named ReadLine1.exe, you can run it from the command line with the syntax  </p>\n<pre><code>ReadLine1 &lt; ReadLine1.txt  \n</code></pre><p> to read the contents of the file and display them to the console.  </p>\n<p>A line is defined as a sequence of characters followed by a carriage return (hexadecimal 0x000d), a line feed (hexadecimal 0x000a), or the value of the <a class=\"xref\" href=\"system.environment#System_Environment_NewLine_\" data-linktype=\"relative-path\">NewLine</a> property. The returned string does not contain the terminating character(s). By default, the method reads input from a 256-character input buffer. Because this includes the <a class=\"xref\" href=\"system.environment#System_Environment_NewLine_\" data-linktype=\"relative-path\">NewLine</a> character(s), the method can read lines that contain up to 254 characters. To read longer lines, call the <a class=\"xref\" href=\"system.console#System_Console_OpenStandardInput_System_Int32_\" data-linktype=\"relative-path\">OpenStandardInput(Int32)</a> method.  </p>\n<p>The ReadLine method executes synchronously. That is, it blocks until a line is read or the Ctrl+Z keyboard combination is pressed. The <a class=\"xref\" href=\"system.console#System_Console_In_\" data-linktype=\"relative-path\">In</a> property returns a <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object that represents the standard input stream and that has both a synchronous <a class=\"xref\" href=\"system.io.textreader#System_IO_TextReader_ReadLine_\" data-linktype=\"relative-path\">ReadLine</a> method and an asynchronous <a class=\"xref\" href=\"system.io.textreader#System_IO_TextReader_ReadLineAsync_\" data-linktype=\"relative-path\">ReadLineAsync</a> method. However, when used as the console&#39;s standard input stream, the <a class=\"xref\" href=\"system.io.textreader#System_IO_TextReader_ReadLineAsync_\" data-linktype=\"relative-path\">ReadLineAsync</a> executes synchronously rather than asynchronously and returns a <code>Task&lt;String&gt;</code> only after the read operation has completed.  </p>\n<p>If this method throws an <a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> exception, the reader&#39;s position in the underlying <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object is advanced by the number of characters the method was able to read, but the characters already read into the internal ReadLine buffer are discarded. Since the position of the reader in the stream cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> also needs to be reinitialized. To avoid such a situation and to produce robust code, you should use the <a class=\"xref\" href=\"system.console#System_Console_KeyAvailable_\" data-linktype=\"relative-path\">KeyAvailable</a> property and <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> method and store the read characters in a pre-allocated buffer.  </p>\n<p>If the Ctrl+Z character is pressed when the method is reading input from the console, the method returns <code>null</code>. This enables the user to prevent further keyboard input when the ReadLine method is called in a loop. The following example illustrates this scenario.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console.ReadLine#1\">using namespace System;\n\nvoid main()\n{\n   String^ line;\n   Console::WriteLine(&quot;Enter one or more lines of text (press CTRL+Z to exit):&quot;);\n   Console::WriteLine();\n   do { \n      Console::Write(&quot;   &quot;);\n      line = Console::ReadLine();\n      if (line != nullptr) \n         Console::WriteLine(&quot;      &quot; + line);\n   } while (line != nullptr);   \n}\n// The following displays possible output from this example:\n//       Enter one or more lines of text (press CTRL+Z to exit):\n//       \n//          This is line #1.\n//             This is line #1.\n//          This is line #2\n//             This is line #2\n//          ^Z\n//       \n//       &gt;}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.ReadLine#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string line;\n      Console.WriteLine(&quot;Enter one or more lines of text (press CTRL+Z to exit):&quot;);\n      Console.WriteLine();\n      do { \n         Console.Write(&quot;   &quot;);\n         line = Console.ReadLine();\n         if (line != null) \n            Console.WriteLine(&quot;      &quot; + line);\n      } while (line != null);   \n   }\n}\n// The following displays possible output from this example:\n//       Enter one or more lines of text (press CTRL+Z to exit):\n//       \n//          This is line #1.\n//             This is line #1.\n//          This is line #2\n//             This is line #2\n//          ^Z\n//       \n//       &gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.ReadLine#1\">Module Example\n   Public Sub Main()\n      Dim line As String\n      Console.WriteLine(&quot;Enter one or more lines of text (press CTRL+Z to exit):&quot;)\n      Console.WriteLine()\n      Do \n         Console.Write(&quot;   &quot;)\n         line = Console.ReadLine()\n         If line IsNot Nothing Then Console.WriteLine(&quot;      &quot; + line)\n      Loop While line IsNot Nothing   \n   End Sub\nEnd Module\n&#39; The following displays possible output from this example:\n&#39;       Enter one or more lines of text (press CTRL+Z to exit):\n&#39;       \n&#39;          This is line #1.\n&#39;             This is line #1.\n&#39;          This is line #2\n&#39;             This is line #2\n&#39;          ^Z\n&#39;       \n&#39;       &gt;\n</code></pre></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example requires two command line arguments: the name of an existing text file, and the name of a file to write the output to. It opens the existing text file and redirects the standard input from the keyboard to that file. It also redirects the standard output from the console to the output file. It then uses the ReadLine method to read each line in the file, replaces every sequence of four spaces with a tab character, and uses the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method to write the result to the output file.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console-INSERTTABS#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   const int tabSize = 4;\n   String^ usageText = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;;\n   StreamWriter^ writer = nullptr;\n   if ( args-&gt;Length &lt; 3 )\n   {\n      Console::WriteLine( usageText );\n      return 1;\n   }\n\n   try\n   {\n      // Attempt to open output file.\n      writer = gcnew StreamWriter( args[ 2 ] );\n      // Redirect standard output from the console to the output file.\n      Console::SetOut( writer );\n      // Redirect standard input from the console to the input file.\n      Console::SetIn( gcnew StreamReader( args[ 1 ] ) );\n   }\n   catch ( IOException^ e ) \n   {\n      TextWriter^ errorWriter = Console::Error;\n      errorWriter-&gt;WriteLine( e-&gt;Message );\n      errorWriter-&gt;WriteLine( usageText );\n      return 1;\n   }\n\n   String^ line;\n   while ( (line = Console::ReadLine()) != nullptr )\n   {\n      String^ newLine = line-&gt;Replace( ((String^)&quot;&quot;)-&gt;PadRight( tabSize, &#39; &#39; ), &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      Console::WriteLine( newLine );\n   }\n\n   writer-&gt;Close();\n   \n   // Recover the standard output stream so that a \n   // completion message can be displayed.\n   StreamWriter^ standardOutput = gcnew StreamWriter( Console::OpenStandardOutput() );\n   standardOutput-&gt;AutoFlush = true;\n   Console::SetOut( standardOutput );\n   Console::WriteLine( &quot;INSERTTABS has completed the processing of {0}.&quot;, args[ 1 ] );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console-INSERTTABS#1\">Imports System.IO\n\nPublic Class InsertTabs\n   Private Const tabSize As Integer = 4\n   Private Const usageText As String = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;\n   \n   Public Shared Function Main(args() As String) As Integer\n      Dim writer As StreamWriter = Nothing\n\n      If args.Length &lt; 2 Then\n         Console.WriteLine(usageText)\n         Return 1\n      End If\n      \n      Try\n         &#39; Attempt to open output file.\n         writer = New StreamWriter(args(1))\n         &#39; Redirect standard output from the console to the output file.\n         Console.SetOut(writer)\n         &#39; Redirect standard input from the console to the input file.\n         Console.SetIn(New StreamReader(args(0)))\n      Catch e As IOException\n         Dim errorWriter As TextWriter = Console.Error\n         errorWriter.WriteLine(e.Message)\n         errorWriter.WriteLine(usageText)\n         Return 1\n      End Try\n\n      Dim line As String = Console.ReadLine()\n      While line IsNot Nothing\n         Dim newLine As String = line.Replace(&quot;&quot;.PadRight(tabSize, &quot; &quot;c), ControlChars.Tab)\n         Console.WriteLine(newLine)\n         line = Console.ReadLine()\n      End While\n      writer.Close()\n      &#39; Recover the standard output stream so that a \n      &#39; completion message can be displayed.\n      Dim standardOutput As New StreamWriter(Console.OpenStandardOutput())\n      standardOutput.AutoFlush = True\n      Console.SetOut(standardOutput)\n      Console.WriteLine(&quot;INSERTTABS has completed the processing of {0}.&quot;, args(0))\n      Return 0\n   End Function \nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-INSERTTABS#1\">using System;\nusing System.IO;\n\npublic class InsertTabs {\n    private const int tabSize = 4;\n    private const string usageText = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;;\n    public static int Main(string[] args) {\n        StreamWriter writer = null;\n\n        if (args.Length &lt; 2) {\n            Console.WriteLine(usageText);\n            return 1;\n        }\n\n        try {\n            // Attempt to open output file.\n            writer = new StreamWriter(args[1]);\n            // Redirect standard output from the console to the output file.\n            Console.SetOut(writer);\n            // Redirect standard input from the console to the input file.\n            Console.SetIn(new StreamReader(args[0]));\n        }\n        catch(IOException e) {\n            TextWriter errorWriter = Console.Error;\n            errorWriter.WriteLine(e.Message);\n            errorWriter.WriteLine(usageText);\n            return 1;            \n        }\n        string line;\n        while ((line = Console.ReadLine()) != null) {\n            string newLine = line.Replace((&quot;&quot;).PadRight(tabSize, &#39; &#39;), &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;);\n            Console.WriteLine(newLine);\n        }\n        writer.Close();\n        // Recover the standard output stream so that a \n        // completion message can be displayed.\n        StreamWriter standardOutput = new StreamWriter(Console.OpenStandardOutput());\n        standardOutput.AutoFlush = true;\n        Console.SetOut(standardOutput);\n        Console.WriteLine(&quot;INSERTTABS has completed the processing of {0}.&quot;, args[0]);\n        return 0;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_ResetColor\">\r\n    \r\n            <a id=\"System_Console_ResetColor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetColor()</div>        \r\n          </div>\r\n    \r\n            <p>Sets the foreground and background console colors to their defaults.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ResetColor ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The foreground and background colors are restored to the colors that existed when the current process began. For more information, see the <a class=\"xref\" href=\"system.console#System_Console_ForegroundColor_\" data-linktype=\"relative-path\">ForegroundColor</a> and <a class=\"xref\" href=\"system.console#System_Console_BackgroundColor_\" data-linktype=\"relative-path\">BackgroundColor</a> properties.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example saves the values of the <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a> enumeration to an array and stores the current values of the <a class=\"xref\" href=\"system.console#System_Console_BackgroundColor_\" data-linktype=\"relative-path\">BackgroundColor</a> and <a class=\"xref\" href=\"system.console#System_Console_ForegroundColor_\" data-linktype=\"relative-path\">ForegroundColor</a> properties to variables. It then changes the foreground color to each color in the <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a> enumeration except to the color that matches the current background, and it changes the background color to each color in the <a class=\"xref\" href=\"system.consolecolor\" data-linktype=\"relative-path\">ConsoleColor</a> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn&#39;t visible.) Finally, it calls the ResetColor method to restore the original console colors.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ConsoleColor#1\">Public Module Example\n   Public Sub Main()\n      &#39; Get an array with the values of ConsoleColor enumeration members.\n      Dim colors() As ConsoleColor = ConsoleColor.GetValues(GetType(ConsoleColor))\n      &#39; Save the current background and foreground colors.\n      Dim currentBackground As ConsoleColor = Console.BackgroundColor\n      Dim currentForeground As ConsoleColor = Console.ForegroundColor\n      \n      &#39; Display all foreground colors except the one that matches the background.\n      Console.WriteLine(&quot;All the foreground colors except {0}, the background color:&quot;,\n                        currentBackground)\n      For Each color In colors\n         If color = currentBackground Then Continue For\n          \n         Console.ForegroundColor = color\n         Console.WriteLine(&quot;   The foreground color is {0}.&quot;, color)\n      Next \n      Console.WriteLine()\n      \n      &#39; Restore the foreground color.\n      Console.ForegroundColor = currentForeground\n      \n      &#39; Display each background color except the one that matches the current foreground color.\n      Console.WriteLine(&quot;All the background colors except {0}, the foreground color:&quot;,\n                        currentForeground)\n      For Each color In colors\n         If color = currentForeground  then Continue For\n         Console.BackgroundColor = color\n         Console.WriteLine(&quot;   The background color is {0}.&quot;, color)\n      Next\n      &#39; Restore the original console colors.\n      Console.ResetColor\n      Console.WriteLine()\n      Console.WriteLine(&quot;Original colors restored...&quot;)\n   End Sub\nEnd Module\n&#39;The example displays output like the following:\n&#39;       The background color is DarkCyan.\n&#39;       The background color is DarkRed.\n&#39;       The background color is DarkMagenta.\n&#39;       The background color is DarkYellow.\n&#39;       The background color is Gray.\n&#39;       The background color is DarkGray.\n&#39;       The background color is Blue.\n&#39;       The background color is Green.\n&#39;       The background color is Cyan.\n&#39;       The background color is Red.\n&#39;       The background color is Magenta.\n&#39;       The background color is Yellow.\n&#39;    \n&#39;    Original colors restored...\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ConsoleColor#1\">using System;\n\nclass Example\n{\n   public static void Main() \n   {\n      // Get an array with the values of ConsoleColor enumeration members.\n      ConsoleColor[] colors = (ConsoleColor[]) ConsoleColor.GetValues(typeof(ConsoleColor));\n      // Save the current background and foreground colors.\n      ConsoleColor currentBackground = Console.BackgroundColor;\n      ConsoleColor currentForeground = Console.ForegroundColor;\n\n      // Display all foreground colors except the one that matches the background.\n      Console.WriteLine(&quot;All the foreground colors except {0}, the background color:&quot;,\n                        currentBackground);\n      foreach (var color in colors) {\n         if (color == currentBackground) continue;\n         \n         Console.ForegroundColor = color;\n         Console.WriteLine(&quot;   The foreground color is {0}.&quot;, color);\n      }\n      Console.WriteLine();\n      // Restore the foreground color.\n      Console.ForegroundColor = currentForeground;\n      \n      // Display each background color except the one that matches the current foreground color.\n      Console.WriteLine(&quot;All the background colors except {0}, the foreground color:&quot;,\n                        currentForeground);\n      foreach (var color in colors) {\n         if (color == currentForeground) continue;\n         \n         Console.BackgroundColor = color;\n         Console.WriteLine(&quot;   The background color is {0}.&quot;, color);\n      }\n      \n      // Restore the original console colors.\n      Console.ResetColor();\n      Console.WriteLine(&quot;<br>Original colors restored...&quot;);\n   }\n}\n//The example displays output like the following:\n//    All the foreground colors except DarkCyan, the background color:\n//       The foreground color is Black.\n//       The foreground color is DarkBlue.\n//       The foreground color is DarkGreen.\n//       The foreground color is DarkRed.\n//       The foreground color is DarkMagenta.\n//       The foreground color is DarkYellow.\n//       The foreground color is Gray.\n//       The foreground color is DarkGray.\n//       The foreground color is Blue.\n//       The foreground color is Green.\n//       The foreground color is Cyan.\n//       The foreground color is Red.\n//       The foreground color is Magenta.\n//       The foreground color is Yellow.\n//       The foreground color is White.\n//    \n//    All the background colors except White, the foreground color:\n//       The background color is Black.\n//       The background color is DarkBlue.\n//       The background color is DarkGreen.\n//       The background color is DarkCyan.\n//       The background color is DarkRed.\n//       The background color is DarkMagenta.\n//       The background color is DarkYellow.\n//       The background color is Gray.\n//       The background color is DarkGray.\n//       The background color is Blue.\n//       The background color is Green.\n//       The background color is Cyan.\n//       The background color is Red.\n//       The background color is Magenta.\n//       The background color is Yellow.\n//    \n//    Original colors restored...\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_SetBufferSize_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_SetBufferSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetBufferSize(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the height and width of the screen buffer area to the specified values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetBufferSize (int width, int height);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>width</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The width of the buffer area measured in columns.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>height</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The height of the buffer area measured in rows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>height</code> or <code>width</code> is less than or equal to zero.  </p>\n<p> -or-  </p>\n<p> <code>height</code> or <code>width</code> is greater than or equal to <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> -or-  </p>\n<p> <code>width</code> is less than <span class=\"xref\">stem.Console.WindowLeft*</span> + <span class=\"xref\">stem.Console.WindowWidth*</span>.  </p>\n<p> -or-  </p>\n<p> <code>height</code> is less than <span class=\"xref\">stem.Console.WindowTop*</span> + <span class=\"xref\">stem.Console.WindowHeight*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.console#System_Console_WindowLeft_\" data-linktype=\"relative-path\">WindowLeft</a>, <a class=\"xref\" href=\"system.console#System_Console_WindowTop_\" data-linktype=\"relative-path\">WindowTop</a>, <a class=\"xref\" href=\"system.console#System_Console_WindowWidth_\" data-linktype=\"relative-path\">WindowWidth</a>, <a class=\"xref\" href=\"system.console#System_Console_WindowHeight_\" data-linktype=\"relative-path\">WindowHeight</a>, <a class=\"xref\" href=\"system.console#System_Console_BufferWidth_\" data-linktype=\"relative-path\">BufferWidth</a>, <a class=\"xref\" href=\"system.console#System_Console_BufferHeight_\" data-linktype=\"relative-path\">BufferHeight</a>, and <a class=\"xref\" href=\"system.console#System_Console_CursorVisible_\" data-linktype=\"relative-path\">CursorVisible</a> properties; and the <a class=\"xref\" href=\"system.console#System_Console_SetWindowPosition_\" data-linktype=\"relative-path\">SetWindowPosition</a>, SetBufferSize, and <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.windowLT#1\">// This example demonstrates the Console.WindowLeft and\n//                               Console.WindowTop properties.\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::IO;\n\n//\nint saveBufferWidth;\nint saveBufferHeight;\nint saveWindowHeight;\nint saveWindowWidth;\nbool saveCursorVisible;\n\n//\nint main()\n{\n   String^ m1 = &quot;1) Press the cursor keys to move the console window.<br>&quot;\n   &quot;2) Press any key to begin. When you&#39;re finished...<br>&quot;\n   &quot;3) Press the Escape key to quit.&quot;;\n   String^ g1 = &quot;+----&quot;;\n   String^ g2 = &quot;|    &quot;;\n   String^ grid1;\n   String^ grid2;\n   StringBuilder^ sbG1 = gcnew StringBuilder;\n   StringBuilder^ sbG2 = gcnew StringBuilder;\n   ConsoleKeyInfo cki;\n   int y;\n   \n   //\n   try\n   {\n      saveBufferWidth = Console::BufferWidth;\n      saveBufferHeight = Console::BufferHeight;\n      saveWindowHeight = Console::WindowHeight;\n      saveWindowWidth = Console::WindowWidth;\n      saveCursorVisible = Console::CursorVisible;\n      \n      //\n      Console::Clear();\n      Console::WriteLine( m1 );\n      Console::ReadKey( true );\n      \n      // Set the smallest possible window size before setting the buffer size.\n      Console::SetWindowSize( 1, 1 );\n      Console::SetBufferSize( 80, 80 );\n      Console::SetWindowSize( 40, 20 );\n      \n      // Create grid lines to fit the buffer. (The buffer width is 80, but\n      // this same technique could be used with an arbitrary buffer width.)\n      for ( y = 0; y &lt; Console::BufferWidth / g1-&gt;Length; y++ )\n      {\n         sbG1-&gt;Append( g1 );\n         sbG2-&gt;Append( g2 );\n\n      }\n      sbG1-&gt;Append( g1, 0, Console::BufferWidth % g1-&gt;Length );\n      sbG2-&gt;Append( g2, 0, Console::BufferWidth % g2-&gt;Length );\n      grid1 = sbG1-&gt;ToString();\n      grid2 = sbG2-&gt;ToString();\n      Console::CursorVisible = false;\n      Console::Clear();\n      for ( y = 0; y &lt; Console::BufferHeight - 1; y++ )\n      {\n         if ( y % 3 == 0 )\n                  Console::Write( grid1 );\n         else\n                  Console::Write( grid2 );\n\n      }\n      Console::SetWindowPosition( 0, 0 );\n      do\n      {\n         cki = Console::ReadKey( true );\n         switch ( cki.Key )\n         {\n            case ConsoleKey::LeftArrow:\n               if ( Console::WindowLeft &gt; 0 )\n                              Console::SetWindowPosition( Console::WindowLeft - 1, Console::WindowTop );\n               break;\n\n            case ConsoleKey::UpArrow:\n               if ( Console::WindowTop &gt; 0 )\n                              Console::SetWindowPosition( Console::WindowLeft, Console::WindowTop - 1 );\n               break;\n\n            case ConsoleKey::RightArrow:\n               if ( Console::WindowLeft &lt; (Console::BufferWidth - Console::WindowWidth) )\n                              Console::SetWindowPosition( Console::WindowLeft + 1, Console::WindowTop );\n               break;\n\n            case ConsoleKey::DownArrow:\n               if ( Console::WindowTop &lt; (Console::BufferHeight - Console::WindowHeight) )\n                              Console::SetWindowPosition( Console::WindowLeft, Console::WindowTop + 1 );\n               break;\n         }\n      }\n      while ( cki.Key != ConsoleKey::Escape );\n   }\n   catch ( IOException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      Console::Clear();\n      Console::SetWindowSize( 1, 1 );\n      Console::SetBufferSize( saveBufferWidth, saveBufferHeight );\n      Console::SetWindowSize( saveWindowWidth, saveWindowHeight );\n      Console::CursorVisible = saveCursorVisible;\n   }\n\n} // end Main\n\n\n/*\nThis example produces results similar to the following:\n\n1) Press the cursor keys to move the console window.\n2) Press any key to begin. When you&#39;re finished...\n3) Press the Escape key to quit.\n\n...\n\n+----+----+----+-\n|    |    |    |\n|    |    |    |\n+----+----+----+-\n|    |    |    |\n|    |    |    |\n+----+----+----+-\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.windowLT#1\">&#39; This example demonstrates the Console.WindowLeft and\n&#39;                               Console.WindowTop properties.\nImports System.IO\nImports System.Text\n\nClass Sample\n   Public Shared saveBufferWidth As Integer\n   Public Shared saveBufferHeight As Integer\n   Public Shared saveWindowHeight As Integer\n   Public Shared saveWindowWidth As Integer\n   Public Shared saveCursorVisible As Boolean\n   \n   Public Shared Sub Main()\n      Dim m1 As String = _\n          &quot;1) Press the cursor keys to move the console window.&quot; &amp; vbCrlf &amp; _\n          &quot;2) Press any key to begin. When you&#39;re finished...&quot;   &amp; vbCrlf &amp; _\n          &quot;3) Press the Escape key to quit.&quot;\n      Dim g1 As String = &quot;+----&quot;\n      Dim g2 As String = &quot;|    &quot;\n      Dim grid1 As String\n      Dim grid2 As String\n      Dim sbG1 As New StringBuilder()\n      Dim sbG2 As New StringBuilder()\n      Dim cki As ConsoleKeyInfo\n      Dim y As Integer\n      &#39;\n      Try\n         saveBufferWidth = Console.BufferWidth\n         saveBufferHeight = Console.BufferHeight\n         saveWindowHeight = Console.WindowHeight\n         saveWindowWidth = Console.WindowWidth\n         saveCursorVisible = Console.CursorVisible\n         &#39;\n         Console.Clear()\n         Console.WriteLine(m1)\n         Console.ReadKey(True)\n         \n         &#39; Set the smallest possible window size before setting the buffer size.\n         Console.SetWindowSize(1, 1)\n         Console.SetBufferSize(80, 80)\n         Console.SetWindowSize(40, 20)\n         \n         &#39; Create grid lines to fit the buffer. (The buffer width is 80, but\n         &#39; this same technique could be used with an arbitrary buffer width.)\n         For y = 0 To (Console.BufferWidth / g1.Length) - 1\n            sbG1.Append(g1)\n            sbG2.Append(g2)\n         Next y\n         sbG1.Append(g1, 0, Console.BufferWidth Mod g1.Length)\n         sbG2.Append(g2, 0, Console.BufferWidth Mod g2.Length)\n         grid1 = sbG1.ToString()\n         grid2 = sbG2.ToString()\n         \n         Console.CursorVisible = False\n         Console.Clear()\n         For y = 0 To (Console.BufferHeight - 2)\n            If y Mod 3 = 0 Then\n               Console.Write(grid1)\n            Else\n               Console.Write(grid2)\n            End If\n         Next y \n         &#39;\n         Console.SetWindowPosition(0, 0)\n         Do\n            cki = Console.ReadKey(True)\n            Select Case cki.Key\n               Case ConsoleKey.LeftArrow\n                  If Console.WindowLeft &gt; 0 Then\n                     Console.SetWindowPosition(Console.WindowLeft - 1, Console.WindowTop)\n                  End If\n               Case ConsoleKey.UpArrow\n                  If Console.WindowTop &gt; 0 Then\n                     Console.SetWindowPosition(Console.WindowLeft, Console.WindowTop - 1)\n                  End If\n               Case ConsoleKey.RightArrow\n                  If Console.WindowLeft &lt; Console.BufferWidth - Console.WindowWidth Then\n                     Console.SetWindowPosition(Console.WindowLeft + 1, Console.WindowTop)\n                  End If\n               Case ConsoleKey.DownArrow\n                  If Console.WindowTop &lt; Console.BufferHeight - Console.WindowHeight Then\n                     Console.SetWindowPosition(Console.WindowLeft, Console.WindowTop + 1)\n                  End If\n            End Select\n         Loop While cki.Key &lt;&gt; ConsoleKey.Escape\n      &#39; end do-while\n      &#39; end try\n      Catch e As IOException\n         Console.WriteLine(e.Message)\n      Finally\n         Console.Clear()\n         Console.SetWindowSize(1, 1)\n         Console.SetBufferSize(saveBufferWidth, saveBufferHeight)\n         Console.SetWindowSize(saveWindowWidth, saveWindowHeight)\n         Console.CursorVisible = saveCursorVisible\n      End Try\n   End Sub &#39;Main &#39; end Main\nEnd Class &#39;Sample &#39; end Sample\n&#39;\n&#39;This example produces results similar to the following:\n&#39;\n&#39;1) Press the cursor keys to move the console window.\n&#39;2) Press any key to begin. When you&#39;re finished...\n&#39;3) Press the Escape key to quit.\n&#39;\n&#39;...\n&#39;\n&#39;+----+----+----+-\n&#39;|    |    |    |\n&#39;|    |    |    |\n&#39;+----+----+----+-\n&#39;|    |    |    |\n&#39;|    |    |    |\n&#39;+----+----+----+-\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"console.windowLT#1\">// This example demonstrates the Console.WindowLeft and\n//                               Console.WindowTop properties.\nusing System;\nusing System.Text;\nusing System.IO;\n//\nclass Sample \n{\n    public static int saveBufferWidth;\n    public static int saveBufferHeight;\n    public static int saveWindowHeight;\n    public static int saveWindowWidth;\n    public static bool saveCursorVisible;\n//\n    public static void Main() \n    {\n    string m1 = &quot;1) Press the cursor keys to move the console window.<br>&quot; +\n                &quot;2) Press any key to begin. When you&#39;re finished...<br>&quot; +\n                &quot;3) Press the Escape key to quit.&quot;;\n    string g1 = &quot;+----&quot;;\n    string g2 = &quot;|    &quot;;\n    string grid1;\n    string grid2;\n    StringBuilder sbG1 = new StringBuilder();\n    StringBuilder sbG2 = new StringBuilder();\n    ConsoleKeyInfo cki;\n    int y;\n//\n    try \n    {\n    saveBufferWidth  = Console.BufferWidth;\n    saveBufferHeight = Console.BufferHeight;\n    saveWindowHeight = Console.WindowHeight;\n    saveWindowWidth  = Console.WindowWidth;\n    saveCursorVisible = Console.CursorVisible;\n//\n    Console.Clear();\n    Console.WriteLine(m1);\n    Console.ReadKey(true);\n\n// Set the smallest possible window size before setting the buffer size.\n    Console.SetWindowSize(1, 1);\n    Console.SetBufferSize(80, 80);\n    Console.SetWindowSize(40, 20);\n\n// Create grid lines to fit the buffer. (The buffer width is 80, but\n// this same technique could be used with an arbitrary buffer width.)\n    for (y = 0; y &lt; Console.BufferWidth/g1.Length; y++)\n        {\n        sbG1.Append(g1);\n        sbG2.Append(g2);\n        }\n    sbG1.Append(g1, 0, Console.BufferWidth%g1.Length);\n    sbG2.Append(g2, 0, Console.BufferWidth%g2.Length);\n    grid1 = sbG1.ToString();\n    grid2 = sbG2.ToString();\n\n    Console.CursorVisible = false;\n    Console.Clear();\n    for (y = 0; y &lt; Console.BufferHeight-1; y++)\n        {\n        if (y%3 == 0)\n            Console.Write(grid1);\n        else\n            Console.Write(grid2);\n        }\n\n    Console.SetWindowPosition(0, 0);\n    do\n        {\n        cki = Console.ReadKey(true);\n        switch (cki.Key) \n            {\n            case ConsoleKey.LeftArrow:\n                if (Console.WindowLeft &gt; 0) \n                    Console.SetWindowPosition(\n                            Console.WindowLeft-1, Console.WindowTop);\n                break;\n            case ConsoleKey.UpArrow:\n                if (Console.WindowTop &gt; 0) \n                    Console.SetWindowPosition(\n                            Console.WindowLeft, Console.WindowTop-1);\n                break;\n            case ConsoleKey.RightArrow:\n                if (Console.WindowLeft &lt; (Console.BufferWidth-Console.WindowWidth)) \n                    Console.SetWindowPosition(\n                            Console.WindowLeft+1, Console.WindowTop);\n                break;\n            case ConsoleKey.DownArrow:\n                if (Console.WindowTop &lt; (Console.BufferHeight-Console.WindowHeight)) \n                    Console.SetWindowPosition(\n                            Console.WindowLeft, Console.WindowTop+1);\n                break;\n            }\n        } \n    while (cki.Key != ConsoleKey.Escape);  // end do-while\n    } // end try\n    catch (IOException e) \n        {\n        Console.WriteLine(e.Message);\n        }\n    finally \n        {\n        Console.Clear();\n        Console.SetWindowSize(1, 1);\n        Console.SetBufferSize(saveBufferWidth, saveBufferHeight);\n        Console.SetWindowSize(saveWindowWidth, saveWindowHeight);\n        Console.CursorVisible = saveCursorVisible;\n        }\n    } // end Main\n} // end Sample\n/*\nThis example produces results similar to the following:\n\n1) Press the cursor keys to move the console window.\n2) Press any key to begin. When you&#39;re finished...\n3) Press the Escape key to quit.\n\n...\n\n+----+----+----+-\n|    |    |    |\n|    |    |    |\n+----+----+----+-\n|    |    |    |\n|    |    |    |\n+----+----+----+-\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_SetCursorPosition_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_SetCursorPosition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCursorPosition(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the position of the cursor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetCursorPosition (int left, int top);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The column position of the cursor. Columns are numbered from left to right starting at 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>top</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The row position of the cursor. Rows are numbered from top to bottom starting at 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>top</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>left</code> is greater than or equal to <span class=\"xref\">stem.Console.BufferWidth*</span>.  </p>\n<p> -or-  </p>\n<p> <code>top</code> is greater than or equal to <span class=\"xref\">stem.Console.BufferHeight*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SetCursorPosition method to specify where the next write operation in the console window is to begin. If the specified cursor position is outside the area that is currently visible in the console window, the window origin changes automatically to make the cursor visible.  </p>\n<p> The cursor automatically moves to the next character position each time a character is written to the console window. If the cursor is at the bottom right character position of the console window, the next write operation causes the console window to scroll so the cursor remains visible. If you want to write a character to the bottom right character position without causing the console window to scroll, use the <a class=\"xref\" href=\"system.console#System_Console_MoveBufferArea_\" data-linktype=\"relative-path\">MoveBufferArea</a> method to move a character to that position.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the <a class=\"xref\" href=\"system.console#System_Console_CursorLeft_\" data-linktype=\"relative-path\">CursorLeft</a> and <a class=\"xref\" href=\"system.console#System_Console_CursorTop_\" data-linktype=\"relative-path\">CursorTop</a> properties, and the SetCursorPosition and <a class=\"xref\" href=\"system.console#System_Console_Clear_\" data-linktype=\"relative-path\">Clear</a> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of &quot;+&quot;, &quot;&#124;&quot;, and &quot;-&quot; strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  </p>\n<pre><code class=\"lang-cs\" name=\"console.cursorLTS#1\">// This example demonstrates the \n//     Console.CursorLeft and \n//     Console.CursorTop properties, and the\n//     Console.SetCursorPosition and \n//     Console.Clear methods.\nusing System;\n\nclass Sample \n{\n    protected static int origRow;\n    protected static int origCol;\n\n    protected static void WriteAt(string s, int x, int y)\n    {\n    try\n        {\n        Console.SetCursorPosition(origCol+x, origRow+y);\n        Console.Write(s);\n        }\n    catch (ArgumentOutOfRangeException e)\n        {\n        Console.Clear();\n        Console.WriteLine(e.Message);\n        }\n    }\n\n    public static void Main() \n    {\n// Clear the screen, then save the top and left coordinates.\n    Console.Clear();\n    origRow = Console.CursorTop;\n    origCol = Console.CursorLeft;\n\n// Draw the left side of a 5x5 rectangle, from top to bottom.\n    WriteAt(&quot;+&quot;, 0, 0);\n    WriteAt(&quot;|&quot;, 0, 1);\n    WriteAt(&quot;|&quot;, 0, 2);\n    WriteAt(&quot;|&quot;, 0, 3);\n    WriteAt(&quot;+&quot;, 0, 4);\n\n// Draw the bottom side, from left to right.\n    WriteAt(&quot;-&quot;, 1, 4); // shortcut: WriteAt(&quot;---&quot;, 1, 4)\n    WriteAt(&quot;-&quot;, 2, 4); // ...\n    WriteAt(&quot;-&quot;, 3, 4); // ...\n    WriteAt(&quot;+&quot;, 4, 4);\n\n// Draw the right side, from bottom to top.\n    WriteAt(&quot;|&quot;, 4, 3);\n    WriteAt(&quot;|&quot;, 4, 2);\n    WriteAt(&quot;|&quot;, 4, 1);\n    WriteAt(&quot;+&quot;, 4, 0);\n\n// Draw the top side, from right to left.\n    WriteAt(&quot;-&quot;, 3, 0); // shortcut: WriteAt(&quot;---&quot;, 1, 0)\n    WriteAt(&quot;-&quot;, 2, 0); // ...\n    WriteAt(&quot;-&quot;, 1, 0); // ...\n//\n    WriteAt(&quot;All done!&quot;, 0, 6);\n    Console.WriteLine();\n    }\n}\n/*\nThis example produces the following results:\n\n+---+\n|   |\n|   |\n|   |\n+---+\n\nAll done!\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.cursorLTS#1\">// This example demonstrates the \n//     Console.CursorLeft and \n//     Console.CursorTop properties, and the\n//     Console.SetCursorPosition and \n//     Console.Clear methods.\nusing namespace System;\nint origRow;\nint origCol;\nvoid WriteAt( String^ s, int x, int y )\n{\n   try\n   {\n      Console::SetCursorPosition( origCol + x, origRow + y );\n      Console::Write( s );\n   }\n   catch ( ArgumentOutOfRangeException^ e ) \n   {\n      Console::Clear();\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n\nint main()\n{\n   \n   // Clear the screen, then save the top and left coordinates.\n   Console::Clear();\n   origRow = Console::CursorTop;\n   origCol = Console::CursorLeft;\n   \n   // Draw the left side of a 5x5 rectangle, from top to bottom.\n   WriteAt( &quot;+&quot;, 0, 0 );\n   WriteAt( &quot;|&quot;, 0, 1 );\n   WriteAt( &quot;|&quot;, 0, 2 );\n   WriteAt( &quot;|&quot;, 0, 3 );\n   WriteAt( &quot;+&quot;, 0, 4 );\n   \n   // Draw the bottom side, from left to right.\n   WriteAt( &quot;-&quot;, 1, 4 ); // shortcut: WriteAt(&quot;---&quot;, 1, 4)\n   WriteAt( &quot;-&quot;, 2, 4 ); // ...\n   WriteAt( &quot;-&quot;, 3, 4 ); // ...\n   WriteAt( &quot;+&quot;, 4, 4 );\n   \n   // Draw the right side, from bottom to top.\n   WriteAt( &quot;|&quot;, 4, 3 );\n   WriteAt( &quot;|&quot;, 4, 2 );\n   WriteAt( &quot;|&quot;, 4, 1 );\n   WriteAt( &quot;+&quot;, 4, 0 );\n   \n   // Draw the top side, from right to left.\n   WriteAt( &quot;-&quot;, 3, 0 ); // shortcut: WriteAt(&quot;---&quot;, 1, 0)\n   WriteAt( &quot;-&quot;, 2, 0 ); // ...\n   WriteAt( &quot;-&quot;, 1, 0 ); // ...\n   \n   //\n   WriteAt( &quot;All done!&quot;, 0, 6 );\n   Console::WriteLine();\n}\n\n/*\nThis example produces the following results:\n\n+---+\n|   |\n|   |\n|   |\n+---+\n\nAll done!\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.cursorLTS#1\">&#39; This example demonstrates the \n&#39;     Console.CursorLeft and \n&#39;     Console.CursorTop properties, and the\n&#39;     Console.SetCursorPosition and \n&#39;     Console.Clear methods.\nImports System\n\nClass Sample\n   Protected Shared origRow As Integer\n   Protected Shared origCol As Integer\n   \n   Protected Shared Sub WriteAt(s As String, x As Integer, y As Integer)\n      Try\n         Console.SetCursorPosition(origCol + x, origRow + y)\n         Console.Write(s)\n      Catch e As ArgumentOutOfRangeException\n         Console.Clear()\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;WriteAt\n   \n   Public Shared Sub Main()\n      &#39; Clear the screen, then save the top and left coordinates.\n      Console.Clear()\n      origRow = Console.CursorTop\n      origCol = Console.CursorLeft\n      \n      &#39; Draw the left side of a 5x5 rectangle, from top to bottom.\n      WriteAt(&quot;+&quot;, 0, 0)\n      WriteAt(&quot;|&quot;, 0, 1)\n      WriteAt(&quot;|&quot;, 0, 2)\n      WriteAt(&quot;|&quot;, 0, 3)\n      WriteAt(&quot;+&quot;, 0, 4)\n      \n      &#39; Draw the bottom side, from left to right.\n      WriteAt(&quot;-&quot;, 1, 4) &#39; shortcut: WriteAt(&quot;---&quot;, 1, 4)\n      WriteAt(&quot;-&quot;, 2, 4) &#39; ...\n      WriteAt(&quot;-&quot;, 3, 4) &#39; ...\n      WriteAt(&quot;+&quot;, 4, 4)\n      \n      &#39; Draw the right side, from bottom to top.\n      WriteAt(&quot;|&quot;, 4, 3)\n      WriteAt(&quot;|&quot;, 4, 2)\n      WriteAt(&quot;|&quot;, 4, 1)\n      WriteAt(&quot;+&quot;, 4, 0)\n      \n      &#39; Draw the top side, from right to left.\n      WriteAt(&quot;-&quot;, 3, 0) &#39; shortcut: WriteAt(&quot;---&quot;, 1, 0)\n      WriteAt(&quot;-&quot;, 2, 0) &#39; ...\n      WriteAt(&quot;-&quot;, 1, 0) &#39; ...\n      &#39;\n      WriteAt(&quot;All done!&quot;, 0, 6)\n      Console.WriteLine()\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;+---+\n&#39;|   |\n&#39;|   |\n&#39;|   |\n&#39;+---+\n&#39;\n&#39;All done!\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_SetError_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_Console_SetError_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetError(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the <span class=\"xref\">stem.Console.Error*</span> property to the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetError (System.IO.TextWriter newError);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newError</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A stream that is the new standard error output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>newError</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the <a class=\"xref\" href=\"system.console#System_Console_Error_\" data-linktype=\"relative-path\">Error</a> property is set to the standard error output stream.  </p>\n<p> A <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> that encapsulates a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> can be used to send error messages to a file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to redirect the standard error stream to a file.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console.SetError#1\">Imports System.IO\nImports System.Reflection\n\nModule RedirectStdErr\n   Public Sub Main()\n      &#39; Define file to receive error stream.\n      Dim appStart As Date = Date.Now\n      Dim fn As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\errlog&quot; &amp; appStart.ToString(&quot;yyyyMMddHHmm&quot;) &amp; &quot;.log&quot;\n      Dim errStream As New StreamWriter(fn)\n      Dim appName As String = GetType(RedirectStdErr).Assembly.Location\n      appName = Mid(appName, InStrRev(appName, &quot;\\&quot;) + 1)\n      &#39; Redirect standard error stream to file.\n      Console.SetError(errStream)\n      &#39; Write file header.\n      Console.Error.WriteLine(&quot;Error Log for Application {0}&quot;, appName)\n      Console.Error.WriteLine()\n      Console.Error.WriteLine(&quot;Application started at {0}.&quot;, appStart)\n      Console.Error.WriteLine()\n      &#39;\n      &#39; Application code along with error output \n      &#39;\n      &#39; Close redirected error stream.\n      Console.Error.Close()\n   End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.SetError#1\">using System;\nusing System.IO;\nusing System.Reflection;\n\npublic class RedirectStdErr\n{\n   public static void Main()\n   {\n      // Define file to receive error stream.\n      DateTime appStart = DateTime.Now;\n      string fn = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\errlog&quot; + appStart.ToString(&quot;yyyyMMddHHmm&quot;) + &quot;.log&quot;;\n      TextWriter errStream = new StreamWriter(fn);\n      string appName = typeof(RedirectStdErr).Assembly.Location;\n      appName = appName.Substring(appName.LastIndexOf(&#39;\\\\&#39;) + 1);\n      // Redirect standard error stream to file.\n      Console.SetError(errStream);\n      // Write file header.\n      Console.Error.WriteLine(&quot;Error Log for Application {0}&quot;, appName);\n      Console.Error.WriteLine();\n      Console.Error.WriteLine(&quot;Application started at {0}.&quot;, appStart);\n      Console.Error.WriteLine();\n      //\n      // Application code along with error output \n      //\n      // Close redirected error stream.\n      Console.Error.Close();\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console.SetError#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Reflection;\n\nref class RedirectStdErr;\n\nvoid main()\n{\n   // Define file to receive error stream.\n   DateTime appStart = DateTime::Now;\n   String^ fn = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\errlog&quot; + appStart.ToString(&quot;yyyyMMddHHmm&quot;) + &quot;.log&quot;;\n   TextWriter^ errStream = gcnew StreamWriter(fn);\n   String^ appName = Assembly::GetExecutingAssembly()-&gt;Location;\n   appName = appName-&gt;Substring(appName-&gt;LastIndexOf(&#39;\\\\&#39;) + 1);\n   // Redirect standard error stream to file.\n   Console::SetError(errStream);\n   // Write file header.\n   Console::Error-&gt;WriteLine(&quot;Error Log for Application {0}&quot;, appName);\n   Console::Error-&gt;WriteLine();\n   Console::Error-&gt;WriteLine(&quot;Application started at {0}.&quot;, appStart);\n   Console::Error-&gt;WriteLine();\n   //\n   // Application code along with error output \n   //\n   // Close redirected error stream.\n   Console::Error-&gt;Close();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_SetIn_System_IO_TextReader_\">\r\n    \r\n            <a id=\"System_Console_SetIn_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetIn(TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the <span class=\"xref\">stem.Console.In*</span> property to the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetIn (System.IO.TextReader newIn);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newIn</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A stream that is the new standard input.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>newIn</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the <a class=\"xref\" href=\"system.console#System_Console_In_\" data-linktype=\"relative-path\">In</a> property is set to the standard input stream.  </p>\n<p> A <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> that encapsulates a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> can be used to receive input from a file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the SetIn method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console-INSERTTABS#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   const int tabSize = 4;\n   String^ usageText = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;;\n   StreamWriter^ writer = nullptr;\n   if ( args-&gt;Length &lt; 3 )\n   {\n      Console::WriteLine( usageText );\n      return 1;\n   }\n\n   try\n   {\n      // Attempt to open output file.\n      writer = gcnew StreamWriter( args[ 2 ] );\n      // Redirect standard output from the console to the output file.\n      Console::SetOut( writer );\n      // Redirect standard input from the console to the input file.\n      Console::SetIn( gcnew StreamReader( args[ 1 ] ) );\n   }\n   catch ( IOException^ e ) \n   {\n      TextWriter^ errorWriter = Console::Error;\n      errorWriter-&gt;WriteLine( e-&gt;Message );\n      errorWriter-&gt;WriteLine( usageText );\n      return 1;\n   }\n\n   String^ line;\n   while ( (line = Console::ReadLine()) != nullptr )\n   {\n      String^ newLine = line-&gt;Replace( ((String^)&quot;&quot;)-&gt;PadRight( tabSize, &#39; &#39; ), &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      Console::WriteLine( newLine );\n   }\n\n   writer-&gt;Close();\n   \n   // Recover the standard output stream so that a \n   // completion message can be displayed.\n   StreamWriter^ standardOutput = gcnew StreamWriter( Console::OpenStandardOutput() );\n   standardOutput-&gt;AutoFlush = true;\n   Console::SetOut( standardOutput );\n   Console::WriteLine( &quot;INSERTTABS has completed the processing of {0}.&quot;, args[ 1 ] );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console-INSERTTABS#1\">Imports System.IO\n\nPublic Class InsertTabs\n   Private Const tabSize As Integer = 4\n   Private Const usageText As String = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;\n   \n   Public Shared Function Main(args() As String) As Integer\n      Dim writer As StreamWriter = Nothing\n\n      If args.Length &lt; 2 Then\n         Console.WriteLine(usageText)\n         Return 1\n      End If\n      \n      Try\n         &#39; Attempt to open output file.\n         writer = New StreamWriter(args(1))\n         &#39; Redirect standard output from the console to the output file.\n         Console.SetOut(writer)\n         &#39; Redirect standard input from the console to the input file.\n         Console.SetIn(New StreamReader(args(0)))\n      Catch e As IOException\n         Dim errorWriter As TextWriter = Console.Error\n         errorWriter.WriteLine(e.Message)\n         errorWriter.WriteLine(usageText)\n         Return 1\n      End Try\n\n      Dim line As String = Console.ReadLine()\n      While line IsNot Nothing\n         Dim newLine As String = line.Replace(&quot;&quot;.PadRight(tabSize, &quot; &quot;c), ControlChars.Tab)\n         Console.WriteLine(newLine)\n         line = Console.ReadLine()\n      End While\n      writer.Close()\n      &#39; Recover the standard output stream so that a \n      &#39; completion message can be displayed.\n      Dim standardOutput As New StreamWriter(Console.OpenStandardOutput())\n      standardOutput.AutoFlush = True\n      Console.SetOut(standardOutput)\n      Console.WriteLine(&quot;INSERTTABS has completed the processing of {0}.&quot;, args(0))\n      Return 0\n   End Function \nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-INSERTTABS#1\">using System;\nusing System.IO;\n\npublic class InsertTabs {\n    private const int tabSize = 4;\n    private const string usageText = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;;\n    public static int Main(string[] args) {\n        StreamWriter writer = null;\n\n        if (args.Length &lt; 2) {\n            Console.WriteLine(usageText);\n            return 1;\n        }\n\n        try {\n            // Attempt to open output file.\n            writer = new StreamWriter(args[1]);\n            // Redirect standard output from the console to the output file.\n            Console.SetOut(writer);\n            // Redirect standard input from the console to the input file.\n            Console.SetIn(new StreamReader(args[0]));\n        }\n        catch(IOException e) {\n            TextWriter errorWriter = Console.Error;\n            errorWriter.WriteLine(e.Message);\n            errorWriter.WriteLine(usageText);\n            return 1;            \n        }\n        string line;\n        while ((line = Console.ReadLine()) != null) {\n            string newLine = line.Replace((&quot;&quot;).PadRight(tabSize, &#39; &#39;), &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;);\n            Console.WriteLine(newLine);\n        }\n        writer.Close();\n        // Recover the standard output stream so that a \n        // completion message can be displayed.\n        StreamWriter standardOutput = new StreamWriter(Console.OpenStandardOutput());\n        standardOutput.AutoFlush = true;\n        Console.SetOut(standardOutput);\n        Console.WriteLine(&quot;INSERTTABS has completed the processing of {0}.&quot;, args[0]);\n        return 0;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_SetOut_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_Console_SetOut_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetOut(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the <span class=\"xref\">stem.Console.Out*</span> property to the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetOut (System.IO.TextWriter newOut);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>newOut</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A stream that is the new standard output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>newOut</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the <a class=\"xref\" href=\"system.console#System_Console_Out_\" data-linktype=\"relative-path\">Out</a> property is set to the standard output stream.  </p>\n<p> A <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> that encapsulates a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> can be used to send output to a file. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.SetOut#1\">            Console.WriteLine(&quot;Hello World&quot;);\n            FileStream fs = new FileStream(&quot;Test.txt&quot;, FileMode.Create);\n            // First, save the standard output.\n            TextWriter tmp = Console.Out;\n            StreamWriter sw = new StreamWriter(fs);\n            Console.SetOut(sw);\n            Console.WriteLine(&quot;Hello file&quot;);\n            Console.SetOut(tmp);\n            Console.WriteLine(&quot;Hello World&quot;);\n            sw.Close();\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.SetOut#1\">        Console.WriteLine(&quot;Hello World&quot;)\n        Dim fs As New FileStream(&quot;Test.txt&quot;, FileMode.Create)\n        &#39; First, save the standard output.\n        Dim tmp as TextWriter = Console.Out\n        Dim sw As New StreamWriter(fs)\n        Console.SetOut(sw)\n        Console.WriteLine(&quot;Hello file&quot;)\n        Console.SetOut(tmp)\n        Console.WriteLine(&quot;Hello World&quot;)\n        sw.Close()\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console.SetOut#1\">        Console::WriteLine(&quot;Hello World&quot;);\n        FileStream^ fs = gcnew FileStream(&quot;Test.txt&quot;, FileMode::Create);\n        // First, save the standard output.\n        TextWriter^ tmp = Console::Out;\n        StreamWriter^ sw = gcnew StreamWriter(fs);\n        Console::SetOut(sw);\n        Console::WriteLine(&quot;Hello file&quot;);\n        Console::SetOut(tmp);\n        Console::WriteLine(&quot;Hello World&quot;);\n        sw-&gt;Close();\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the SetOut method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console-INSERTTABS#1\">using namespace System;\nusing namespace System::IO;\n\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   const int tabSize = 4;\n   String^ usageText = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;;\n   StreamWriter^ writer = nullptr;\n   if ( args-&gt;Length &lt; 3 )\n   {\n      Console::WriteLine( usageText );\n      return 1;\n   }\n\n   try\n   {\n      // Attempt to open output file.\n      writer = gcnew StreamWriter( args[ 2 ] );\n      // Redirect standard output from the console to the output file.\n      Console::SetOut( writer );\n      // Redirect standard input from the console to the input file.\n      Console::SetIn( gcnew StreamReader( args[ 1 ] ) );\n   }\n   catch ( IOException^ e ) \n   {\n      TextWriter^ errorWriter = Console::Error;\n      errorWriter-&gt;WriteLine( e-&gt;Message );\n      errorWriter-&gt;WriteLine( usageText );\n      return 1;\n   }\n\n   String^ line;\n   while ( (line = Console::ReadLine()) != nullptr )\n   {\n      String^ newLine = line-&gt;Replace( ((String^)&quot;&quot;)-&gt;PadRight( tabSize, &#39; &#39; ), &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      Console::WriteLine( newLine );\n   }\n\n   writer-&gt;Close();\n   \n   // Recover the standard output stream so that a \n   // completion message can be displayed.\n   StreamWriter^ standardOutput = gcnew StreamWriter( Console::OpenStandardOutput() );\n   standardOutput-&gt;AutoFlush = true;\n   Console::SetOut( standardOutput );\n   Console::WriteLine( &quot;INSERTTABS has completed the processing of {0}.&quot;, args[ 1 ] );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console-INSERTTABS#1\">Imports System.IO\n\nPublic Class InsertTabs\n   Private Const tabSize As Integer = 4\n   Private Const usageText As String = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;\n   \n   Public Shared Function Main(args() As String) As Integer\n      Dim writer As StreamWriter = Nothing\n\n      If args.Length &lt; 2 Then\n         Console.WriteLine(usageText)\n         Return 1\n      End If\n      \n      Try\n         &#39; Attempt to open output file.\n         writer = New StreamWriter(args(1))\n         &#39; Redirect standard output from the console to the output file.\n         Console.SetOut(writer)\n         &#39; Redirect standard input from the console to the input file.\n         Console.SetIn(New StreamReader(args(0)))\n      Catch e As IOException\n         Dim errorWriter As TextWriter = Console.Error\n         errorWriter.WriteLine(e.Message)\n         errorWriter.WriteLine(usageText)\n         Return 1\n      End Try\n\n      Dim line As String = Console.ReadLine()\n      While line IsNot Nothing\n         Dim newLine As String = line.Replace(&quot;&quot;.PadRight(tabSize, &quot; &quot;c), ControlChars.Tab)\n         Console.WriteLine(newLine)\n         line = Console.ReadLine()\n      End While\n      writer.Close()\n      &#39; Recover the standard output stream so that a \n      &#39; completion message can be displayed.\n      Dim standardOutput As New StreamWriter(Console.OpenStandardOutput())\n      standardOutput.AutoFlush = True\n      Console.SetOut(standardOutput)\n      Console.WriteLine(&quot;INSERTTABS has completed the processing of {0}.&quot;, args(0))\n      Return 0\n   End Function \nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-INSERTTABS#1\">using System;\nusing System.IO;\n\npublic class InsertTabs {\n    private const int tabSize = 4;\n    private const string usageText = &quot;Usage: INSERTTABS inputfile.txt outputfile.txt&quot;;\n    public static int Main(string[] args) {\n        StreamWriter writer = null;\n\n        if (args.Length &lt; 2) {\n            Console.WriteLine(usageText);\n            return 1;\n        }\n\n        try {\n            // Attempt to open output file.\n            writer = new StreamWriter(args[1]);\n            // Redirect standard output from the console to the output file.\n            Console.SetOut(writer);\n            // Redirect standard input from the console to the input file.\n            Console.SetIn(new StreamReader(args[0]));\n        }\n        catch(IOException e) {\n            TextWriter errorWriter = Console.Error;\n            errorWriter.WriteLine(e.Message);\n            errorWriter.WriteLine(usageText);\n            return 1;            \n        }\n        string line;\n        while ((line = Console.ReadLine()) != null) {\n            string newLine = line.Replace((&quot;&quot;).PadRight(tabSize, &#39; &#39;), &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;);\n            Console.WriteLine(newLine);\n        }\n        writer.Close();\n        // Recover the standard output stream so that a \n        // completion message can be displayed.\n        StreamWriter standardOutput = new StreamWriter(Console.OpenStandardOutput());\n        standardOutput.AutoFlush = true;\n        Console.SetOut(standardOutput);\n        Console.WriteLine(&quot;INSERTTABS has completed the processing of {0}.&quot;, args[0]);\n        return 0;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_SetWindowPosition_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_SetWindowPosition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetWindowPosition(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the position of the console window relative to the screen buffer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetWindowPosition (int left, int top);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The column position of the upper left  corner of the console window.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>top</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The row position of the upper left corner of the console window.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>left</code> or <code>top</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>left</code> + <span class=\"xref\">stem.Console.WindowWidth*</span> is greater than <span class=\"xref\">stem.Console.BufferWidth*</span>.  </p>\n<p> -or-  </p>\n<p> <code>top</code> + <span class=\"xref\">stem.Console.WindowHeight*</span> is greater than <span class=\"xref\">stem.Console.BufferHeight*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The operating system window displays the console window, and the console window displays a portion of the screen buffer. The SetWindowPosition method affects the position of the console window relative to the screen buffer, but does not affect the position of the operating system window relative to the desktop.  </p>\n<p> The console and operating system windows generally do not affect each other. However, if the screen buffer cannot be displayed in the current boundaries of the console window, the operating system automatically appends scroll bars to the operating system window. In that case, moving the operating system window scroll bars affects the position of the console window, and moving the console window with the SetWindowPosition method affects the position of the operating system window scroll bars.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the <a class=\"xref\" href=\"system.console#System_Console_WindowLeft_\" data-linktype=\"relative-path\">WindowLeft</a>, <a class=\"xref\" href=\"system.console#System_Console_WindowTop_\" data-linktype=\"relative-path\">WindowTop</a>, <a class=\"xref\" href=\"system.console#System_Console_WindowWidth_\" data-linktype=\"relative-path\">WindowWidth</a>, <a class=\"xref\" href=\"system.console#System_Console_WindowHeight_\" data-linktype=\"relative-path\">WindowHeight</a>, <a class=\"xref\" href=\"system.console#System_Console_BufferWidth_\" data-linktype=\"relative-path\">BufferWidth</a>, <a class=\"xref\" href=\"system.console#System_Console_BufferHeight_\" data-linktype=\"relative-path\">BufferHeight</a>, and <a class=\"xref\" href=\"system.console#System_Console_CursorVisible_\" data-linktype=\"relative-path\">CursorVisible</a> properties; and the SetWindowPosition, <a class=\"xref\" href=\"system.console#System_Console_SetBufferSize_\" data-linktype=\"relative-path\">SetBufferSize</a>, and <a class=\"xref\" href=\"system.console#System_Console_ReadKey_\" data-linktype=\"relative-path\">ReadKey</a> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.windowLT#1\">// This example demonstrates the Console.WindowLeft and\n//                               Console.WindowTop properties.\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::IO;\n\n//\nint saveBufferWidth;\nint saveBufferHeight;\nint saveWindowHeight;\nint saveWindowWidth;\nbool saveCursorVisible;\n\n//\nint main()\n{\n   String^ m1 = &quot;1) Press the cursor keys to move the console window.<br>&quot;\n   &quot;2) Press any key to begin. When you&#39;re finished...<br>&quot;\n   &quot;3) Press the Escape key to quit.&quot;;\n   String^ g1 = &quot;+----&quot;;\n   String^ g2 = &quot;|    &quot;;\n   String^ grid1;\n   String^ grid2;\n   StringBuilder^ sbG1 = gcnew StringBuilder;\n   StringBuilder^ sbG2 = gcnew StringBuilder;\n   ConsoleKeyInfo cki;\n   int y;\n   \n   //\n   try\n   {\n      saveBufferWidth = Console::BufferWidth;\n      saveBufferHeight = Console::BufferHeight;\n      saveWindowHeight = Console::WindowHeight;\n      saveWindowWidth = Console::WindowWidth;\n      saveCursorVisible = Console::CursorVisible;\n      \n      //\n      Console::Clear();\n      Console::WriteLine( m1 );\n      Console::ReadKey( true );\n      \n      // Set the smallest possible window size before setting the buffer size.\n      Console::SetWindowSize( 1, 1 );\n      Console::SetBufferSize( 80, 80 );\n      Console::SetWindowSize( 40, 20 );\n      \n      // Create grid lines to fit the buffer. (The buffer width is 80, but\n      // this same technique could be used with an arbitrary buffer width.)\n      for ( y = 0; y &lt; Console::BufferWidth / g1-&gt;Length; y++ )\n      {\n         sbG1-&gt;Append( g1 );\n         sbG2-&gt;Append( g2 );\n\n      }\n      sbG1-&gt;Append( g1, 0, Console::BufferWidth % g1-&gt;Length );\n      sbG2-&gt;Append( g2, 0, Console::BufferWidth % g2-&gt;Length );\n      grid1 = sbG1-&gt;ToString();\n      grid2 = sbG2-&gt;ToString();\n      Console::CursorVisible = false;\n      Console::Clear();\n      for ( y = 0; y &lt; Console::BufferHeight - 1; y++ )\n      {\n         if ( y % 3 == 0 )\n                  Console::Write( grid1 );\n         else\n                  Console::Write( grid2 );\n\n      }\n      Console::SetWindowPosition( 0, 0 );\n      do\n      {\n         cki = Console::ReadKey( true );\n         switch ( cki.Key )\n         {\n            case ConsoleKey::LeftArrow:\n               if ( Console::WindowLeft &gt; 0 )\n                              Console::SetWindowPosition( Console::WindowLeft - 1, Console::WindowTop );\n               break;\n\n            case ConsoleKey::UpArrow:\n               if ( Console::WindowTop &gt; 0 )\n                              Console::SetWindowPosition( Console::WindowLeft, Console::WindowTop - 1 );\n               break;\n\n            case ConsoleKey::RightArrow:\n               if ( Console::WindowLeft &lt; (Console::BufferWidth - Console::WindowWidth) )\n                              Console::SetWindowPosition( Console::WindowLeft + 1, Console::WindowTop );\n               break;\n\n            case ConsoleKey::DownArrow:\n               if ( Console::WindowTop &lt; (Console::BufferHeight - Console::WindowHeight) )\n                              Console::SetWindowPosition( Console::WindowLeft, Console::WindowTop + 1 );\n               break;\n         }\n      }\n      while ( cki.Key != ConsoleKey::Escape );\n   }\n   catch ( IOException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      Console::Clear();\n      Console::SetWindowSize( 1, 1 );\n      Console::SetBufferSize( saveBufferWidth, saveBufferHeight );\n      Console::SetWindowSize( saveWindowWidth, saveWindowHeight );\n      Console::CursorVisible = saveCursorVisible;\n   }\n\n} // end Main\n\n\n/*\nThis example produces results similar to the following:\n\n1) Press the cursor keys to move the console window.\n2) Press any key to begin. When you&#39;re finished...\n3) Press the Escape key to quit.\n\n...\n\n+----+----+----+-\n|    |    |    |\n|    |    |    |\n+----+----+----+-\n|    |    |    |\n|    |    |    |\n+----+----+----+-\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.windowLT#1\">&#39; This example demonstrates the Console.WindowLeft and\n&#39;                               Console.WindowTop properties.\nImports System.IO\nImports System.Text\n\nClass Sample\n   Public Shared saveBufferWidth As Integer\n   Public Shared saveBufferHeight As Integer\n   Public Shared saveWindowHeight As Integer\n   Public Shared saveWindowWidth As Integer\n   Public Shared saveCursorVisible As Boolean\n   \n   Public Shared Sub Main()\n      Dim m1 As String = _\n          &quot;1) Press the cursor keys to move the console window.&quot; &amp; vbCrlf &amp; _\n          &quot;2) Press any key to begin. When you&#39;re finished...&quot;   &amp; vbCrlf &amp; _\n          &quot;3) Press the Escape key to quit.&quot;\n      Dim g1 As String = &quot;+----&quot;\n      Dim g2 As String = &quot;|    &quot;\n      Dim grid1 As String\n      Dim grid2 As String\n      Dim sbG1 As New StringBuilder()\n      Dim sbG2 As New StringBuilder()\n      Dim cki As ConsoleKeyInfo\n      Dim y As Integer\n      &#39;\n      Try\n         saveBufferWidth = Console.BufferWidth\n         saveBufferHeight = Console.BufferHeight\n         saveWindowHeight = Console.WindowHeight\n         saveWindowWidth = Console.WindowWidth\n         saveCursorVisible = Console.CursorVisible\n         &#39;\n         Console.Clear()\n         Console.WriteLine(m1)\n         Console.ReadKey(True)\n         \n         &#39; Set the smallest possible window size before setting the buffer size.\n         Console.SetWindowSize(1, 1)\n         Console.SetBufferSize(80, 80)\n         Console.SetWindowSize(40, 20)\n         \n         &#39; Create grid lines to fit the buffer. (The buffer width is 80, but\n         &#39; this same technique could be used with an arbitrary buffer width.)\n         For y = 0 To (Console.BufferWidth / g1.Length) - 1\n            sbG1.Append(g1)\n            sbG2.Append(g2)\n         Next y\n         sbG1.Append(g1, 0, Console.BufferWidth Mod g1.Length)\n         sbG2.Append(g2, 0, Console.BufferWidth Mod g2.Length)\n         grid1 = sbG1.ToString()\n         grid2 = sbG2.ToString()\n         \n         Console.CursorVisible = False\n         Console.Clear()\n         For y = 0 To (Console.BufferHeight - 2)\n            If y Mod 3 = 0 Then\n               Console.Write(grid1)\n            Else\n               Console.Write(grid2)\n            End If\n         Next y \n         &#39;\n         Console.SetWindowPosition(0, 0)\n         Do\n            cki = Console.ReadKey(True)\n            Select Case cki.Key\n               Case ConsoleKey.LeftArrow\n                  If Console.WindowLeft &gt; 0 Then\n                     Console.SetWindowPosition(Console.WindowLeft - 1, Console.WindowTop)\n                  End If\n               Case ConsoleKey.UpArrow\n                  If Console.WindowTop &gt; 0 Then\n                     Console.SetWindowPosition(Console.WindowLeft, Console.WindowTop - 1)\n                  End If\n               Case ConsoleKey.RightArrow\n                  If Console.WindowLeft &lt; Console.BufferWidth - Console.WindowWidth Then\n                     Console.SetWindowPosition(Console.WindowLeft + 1, Console.WindowTop)\n                  End If\n               Case ConsoleKey.DownArrow\n                  If Console.WindowTop &lt; Console.BufferHeight - Console.WindowHeight Then\n                     Console.SetWindowPosition(Console.WindowLeft, Console.WindowTop + 1)\n                  End If\n            End Select\n         Loop While cki.Key &lt;&gt; ConsoleKey.Escape\n      &#39; end do-while\n      &#39; end try\n      Catch e As IOException\n         Console.WriteLine(e.Message)\n      Finally\n         Console.Clear()\n         Console.SetWindowSize(1, 1)\n         Console.SetBufferSize(saveBufferWidth, saveBufferHeight)\n         Console.SetWindowSize(saveWindowWidth, saveWindowHeight)\n         Console.CursorVisible = saveCursorVisible\n      End Try\n   End Sub &#39;Main &#39; end Main\nEnd Class &#39;Sample &#39; end Sample\n&#39;\n&#39;This example produces results similar to the following:\n&#39;\n&#39;1) Press the cursor keys to move the console window.\n&#39;2) Press any key to begin. When you&#39;re finished...\n&#39;3) Press the Escape key to quit.\n&#39;\n&#39;...\n&#39;\n&#39;+----+----+----+-\n&#39;|    |    |    |\n&#39;|    |    |    |\n&#39;+----+----+----+-\n&#39;|    |    |    |\n&#39;|    |    |    |\n&#39;+----+----+----+-\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"console.windowLT#1\">// This example demonstrates the Console.WindowLeft and\n//                               Console.WindowTop properties.\nusing System;\nusing System.Text;\nusing System.IO;\n//\nclass Sample \n{\n    public static int saveBufferWidth;\n    public static int saveBufferHeight;\n    public static int saveWindowHeight;\n    public static int saveWindowWidth;\n    public static bool saveCursorVisible;\n//\n    public static void Main() \n    {\n    string m1 = &quot;1) Press the cursor keys to move the console window.<br>&quot; +\n                &quot;2) Press any key to begin. When you&#39;re finished...<br>&quot; +\n                &quot;3) Press the Escape key to quit.&quot;;\n    string g1 = &quot;+----&quot;;\n    string g2 = &quot;|    &quot;;\n    string grid1;\n    string grid2;\n    StringBuilder sbG1 = new StringBuilder();\n    StringBuilder sbG2 = new StringBuilder();\n    ConsoleKeyInfo cki;\n    int y;\n//\n    try \n    {\n    saveBufferWidth  = Console.BufferWidth;\n    saveBufferHeight = Console.BufferHeight;\n    saveWindowHeight = Console.WindowHeight;\n    saveWindowWidth  = Console.WindowWidth;\n    saveCursorVisible = Console.CursorVisible;\n//\n    Console.Clear();\n    Console.WriteLine(m1);\n    Console.ReadKey(true);\n\n// Set the smallest possible window size before setting the buffer size.\n    Console.SetWindowSize(1, 1);\n    Console.SetBufferSize(80, 80);\n    Console.SetWindowSize(40, 20);\n\n// Create grid lines to fit the buffer. (The buffer width is 80, but\n// this same technique could be used with an arbitrary buffer width.)\n    for (y = 0; y &lt; Console.BufferWidth/g1.Length; y++)\n        {\n        sbG1.Append(g1);\n        sbG2.Append(g2);\n        }\n    sbG1.Append(g1, 0, Console.BufferWidth%g1.Length);\n    sbG2.Append(g2, 0, Console.BufferWidth%g2.Length);\n    grid1 = sbG1.ToString();\n    grid2 = sbG2.ToString();\n\n    Console.CursorVisible = false;\n    Console.Clear();\n    for (y = 0; y &lt; Console.BufferHeight-1; y++)\n        {\n        if (y%3 == 0)\n            Console.Write(grid1);\n        else\n            Console.Write(grid2);\n        }\n\n    Console.SetWindowPosition(0, 0);\n    do\n        {\n        cki = Console.ReadKey(true);\n        switch (cki.Key) \n            {\n            case ConsoleKey.LeftArrow:\n                if (Console.WindowLeft &gt; 0) \n                    Console.SetWindowPosition(\n                            Console.WindowLeft-1, Console.WindowTop);\n                break;\n            case ConsoleKey.UpArrow:\n                if (Console.WindowTop &gt; 0) \n                    Console.SetWindowPosition(\n                            Console.WindowLeft, Console.WindowTop-1);\n                break;\n            case ConsoleKey.RightArrow:\n                if (Console.WindowLeft &lt; (Console.BufferWidth-Console.WindowWidth)) \n                    Console.SetWindowPosition(\n                            Console.WindowLeft+1, Console.WindowTop);\n                break;\n            case ConsoleKey.DownArrow:\n                if (Console.WindowTop &lt; (Console.BufferHeight-Console.WindowHeight)) \n                    Console.SetWindowPosition(\n                            Console.WindowLeft, Console.WindowTop+1);\n                break;\n            }\n        } \n    while (cki.Key != ConsoleKey.Escape);  // end do-while\n    } // end try\n    catch (IOException e) \n        {\n        Console.WriteLine(e.Message);\n        }\n    finally \n        {\n        Console.Clear();\n        Console.SetWindowSize(1, 1);\n        Console.SetBufferSize(saveBufferWidth, saveBufferHeight);\n        Console.SetWindowSize(saveWindowWidth, saveWindowHeight);\n        Console.CursorVisible = saveCursorVisible;\n        }\n    } // end Main\n} // end Sample\n/*\nThis example produces results similar to the following:\n\n1) Press the cursor keys to move the console window.\n2) Press any key to begin. When you&#39;re finished...\n3) Press the Escape key to quit.\n\n...\n\n+----+----+----+-\n|    |    |    |\n|    |    |    |\n+----+----+----+-\n|    |    |    |\n|    |    |    |\n+----+----+----+-\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_SetWindowSize_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_SetWindowSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetWindowSize(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the height and width of the console window to the specified values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetWindowSize (int width, int height);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>width</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The width of the console window measured in columns.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>height</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The height of the console window measured in rows.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>width</code> or <code>height</code> is less than or equal to zero.  </p>\n<p> -or-  </p>\n<p> <code>width</code> plus <span class=\"xref\">stem.Console.WindowLeft*</span> or <code>height</code> plus <span class=\"xref\">stem.Console.WindowTop*</span> is greater than or equal to <a class=\"xref\" href=\"system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.  </p>\n<p> -or-  </p>\n<p> <code>width</code> or <code>height</code> is greater than the largest possible window width or height for the current screen resolution and console font.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The user does not have permission to perform this action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>This example demonstrates the SetWindowSize method, and the <a class=\"xref\" href=\"system.console#System_Console_WindowWidth_\" data-linktype=\"relative-path\">WindowWidth</a> and <a class=\"xref\" href=\"system.console#System_Console_WindowHeight_\" data-linktype=\"relative-path\">WindowHeight</a> properties. You must run the example to see the full effect of changing the console window size.  </p>\n<p> The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key to be pressed. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed, the console window is restored to its original dimensions and the example terminates.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.setwindowsize#1\">// This example demonstrates the Console.SetWindowSize method,\n//                           the Console.WindowWidth property, \n//                       and the Console.WindowHeight property.\nusing namespace System;\nint main()\n{\n   int origWidth;\n   int width;\n   int origHeight;\n   int height;\n   String^ m1 = &quot;The current window width is {0}, and the &quot;\n   &quot;current window height is {1}.&quot;;\n   String^ m2 = &quot;The new window width is {0}, and the new &quot;\n   &quot;window height is {1}.&quot;;\n   String^ m4 = &quot;  (Press any key to continue...)&quot;;\n   \n   //\n   // Step 1: Get the current window dimensions.\n   //\n   origWidth = Console::WindowWidth;\n   origHeight = Console::WindowHeight;\n   Console::WriteLine( m1, Console::WindowWidth, Console::WindowHeight );\n   Console::WriteLine( m4 );\n   Console::ReadKey( true );\n   \n   //\n   // Step 2: Cut the window to 1/4 its original size.\n   //\n   width = origWidth / 2;\n   height = origHeight / 2;\n   Console::SetWindowSize( width, height );\n   Console::WriteLine( m2, Console::WindowWidth, Console::WindowHeight );\n   Console::WriteLine( m4 );\n   Console::ReadKey( true );\n   \n   //\n   // Step 3: Restore the window to its original size.\n   //\n   Console::SetWindowSize( origWidth, origHeight );\n   Console::WriteLine( m1, Console::WindowWidth, Console::WindowHeight );\n}\n\n/*\nThis example produces the following results:\n\nThe current window width is 85, and the current window height is 43.\n  (Press any key to continue...)\nThe new window width is 42, and the new window height is 21.\n  (Press any key to continue...)\nThe current window width is 85, and the current window height is 43.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.setwindowsize#1\">&#39; This example demonstrates the Console.SetWindowSize method,\n&#39;                           the Console.WindowWidth property, \n&#39;                       and the Console.WindowHeight property.\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim origWidth, width As Integer\n      Dim origHeight, height As Integer\n      Dim m1 As String = &quot;The current window width is {0}, and the &quot; &amp; _\n                         &quot;current window height is {1}.&quot;\n      Dim m2 As String = &quot;The new window width is {0}, and the new &quot; &amp; _\n                         &quot;window height is {1}.&quot;\n      Dim m4 As String = &quot;  (Press any key to continue...)&quot;\n      &#39;\n      &#39; Step 1: Get the current window dimensions.\n      &#39;\n      origWidth = Console.WindowWidth\n      origHeight = Console.WindowHeight\n      Console.WriteLine(m1, Console.WindowWidth, Console.WindowHeight)\n      Console.WriteLine(m4)\n      Console.ReadKey(True)\n      &#39;\n      &#39; Step 2: Cut the window to 1/4 its original size.\n      &#39;\n      width = origWidth / 2\n      height = origHeight / 2\n      Console.SetWindowSize(width, height)\n      Console.WriteLine(m2, Console.WindowWidth, Console.WindowHeight)\n      Console.WriteLine(m4)\n      Console.ReadKey(True)\n      &#39;\n      &#39; Step 3: Restore the window to its original size.\n      &#39;\n      Console.SetWindowSize(origWidth, origHeight)\n      Console.WriteLine(m1, Console.WindowWidth, Console.WindowHeight)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The current window width is 85, and the current window height is 43.\n&#39;  (Press any key to continue...)\n&#39;The new window width is 42, and the new window height is 21.\n&#39;  (Press any key to continue...)\n&#39;The current window width is 85, and the current window height is 43.\n&#39;\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"console.setwindowsize#1\">// This example demonstrates the Console.SetWindowSize method,\n//                           the Console.WindowWidth property, \n//                       and the Console.WindowHeight property.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    int origWidth, width;  \n    int origHeight, height;\n    string m1 = &quot;The current window width is {0}, and the &quot; +\n                &quot;current window height is {1}.&quot;;\n    string m2 = &quot;The new window width is {0}, and the new &quot; +\n                &quot;window height is {1}.&quot;;\n    string m4 = &quot;  (Press any key to continue...)&quot;;\n//\n// Step 1: Get the current window dimensions.\n//\n    origWidth  = Console.WindowWidth;\n    origHeight = Console.WindowHeight;\n    Console.WriteLine(m1, Console.WindowWidth,\n                          Console.WindowHeight);\n    Console.WriteLine(m4);\n    Console.ReadKey(true); \n//\n// Step 2: Cut the window to 1/4 its original size.\n//\n    width  = origWidth/2;\n    height = origHeight/2;\n    Console.SetWindowSize(width, height);\n    Console.WriteLine(m2, Console.WindowWidth,\n                          Console.WindowHeight);\n    Console.WriteLine(m4);\n    Console.ReadKey(true); \n//\n// Step 3: Restore the window to its original size.\n//\n    Console.SetWindowSize(origWidth, origHeight);\n    Console.WriteLine(m1, Console.WindowWidth,\n                          Console.WindowHeight);\n    }\n}\n/*\nThis example produces the following results:\n\nThe current window width is 85, and the current window height is 43.\n  (Press any key to continue...)\nThe new window width is 42, and the new window height is 21.\n  (Press any key to continue...)\nThe current window width is 85, and the current window height is 43.\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_Boolean_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified Boolean value to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString_\" data-linktype=\"relative-path\">ToString</a>, which outputs either <a class=\"xref\" href=\"system.boolean#System_Boolean_TrueString\" data-linktype=\"relative-path\">System.Boolean.TrueString</a> or <a class=\"xref\" href=\"system.boolean#System_Boolean_FalseString\" data-linktype=\"relative-path\">System.Boolean.FalseString</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_Char_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the specified Unicode character value to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_Char___\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>Writes the specified array of Unicode characters to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (char[] buffer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_Decimal_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling <a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_\" data-linktype=\"relative-path\">ToString</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_Double_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified double-precision floating-point value to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.double#System_Double_ToString_\" data-linktype=\"relative-path\">ToString</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.int32#System_Int32_ToString_\" data-linktype=\"relative-path\">ToString</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_Int64_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified 64-bit signed integer value to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.int64#System_Int64_ToString_\" data-linktype=\"relative-path\">ToString</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_Object_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified object to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is <code>null</code>, nothing is written and no exception is thrown. Otherwise, the <code>ToString</code> method of <code>value</code> is called to produce its string representation, and the resulting string is written to the standard output stream.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_Single_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified single-precision floating-point value to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.single#System_Single_ToString_\" data-linktype=\"relative-path\">ToString</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_String_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the specified string value to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If value is <code>null</code>, nothing is written to the standard output stream.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_UInt32_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.uint32#System_UInt32_ToString_\" data-linktype=\"relative-path\">ToString</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_UInt64_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.uint64#System_UInt64_ToString_\" data-linktype=\"relative-path\">ToString</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified object to the standard output stream using the specified format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (string format, object arg0);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to write using <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The format specification in <code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  </p>\n<p> The syntax of a format item is <code>{</code><em>index</em>[<code>,</code><em>alignment</em>][<code>:</code><em>formatString</em>]<code>}</code>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  </p>\n<ul>\n<li><p>For more information about the composite formatting feature supported by methods such as <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a>, and some overloads of <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, see <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">Composite Formatting</a>.  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about date and time format specifiers, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>.  </p>\n</li>\n<li><p>For more information about enumeration format specifiers, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>WriteLine</code> method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.writelineFmt1#1\">// This code example demonstrates the Console.WriteLine() method.\n// Formatting for this example uses the &quot;en-US&quot; culture.\n\nusing namespace System;\n\npublic enum class Color {Yellow = 1, Blue, Green};\n\nint main() \n{\n    DateTime thisDate = DateTime::Now;\n    Console::Clear();\n\n    // Format a negative integer or floating-point number in various ways.\n    Console::WriteLine(&quot;Standard Numeric Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(C) Currency: . . . . . . . . {0:C}<br>&quot; +\n        &quot;(D) Decimal:. . . . . . . . . {0:D}<br>&quot; +\n        &quot;(E) Scientific: . . . . . . . {1:E}<br>&quot; +\n        &quot;(F) Fixed point:. . . . . . . {1:F}<br>&quot; +\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(N) Number: . . . . . . . . . {0:N}<br>&quot; +\n        &quot;(P) Percent:. . . . . . . . . {1:P}<br>&quot; +\n        &quot;(R) Round-trip: . . . . . . . {1:R}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;,\n        -123, -123.45f); \n\n    // Format the current date in various ways.\n    Console::WriteLine(&quot;Standard DateTime Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(d) Short date: . . . . . . . {0:d}<br>&quot; +\n        &quot;(D) Long date:. . . . . . . . {0:D}<br>&quot; +\n        &quot;(t) Short time: . . . . . . . {0:t}<br>&quot; +\n        &quot;(T) Long time:. . . . . . . . {0:T}<br>&quot; +\n        &quot;(f) Full date/short time: . . {0:f}<br>&quot; +\n        &quot;(F) Full date/long time:. . . {0:F}<br>&quot; +\n        &quot;(g) General date/short time:. {0:g}<br>&quot; +\n        &quot;(G) General date/long time: . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(M) Month:. . . . . . . . . . {0:M}<br>&quot; +\n        &quot;(R) RFC1123:. . . . . . . . . {0:R}<br>&quot; +\n        &quot;(s) Sortable: . . . . . . . . {0:s}<br>&quot; +\n        &quot;(u) Universal sortable: . . . {0:u} (invariant)<br>&quot; +\n        &quot;(U) Universal full date/time: {0:U}<br>&quot; +\n        &quot;(Y) Year: . . . . . . . . . . {0:Y}<br>&quot;, \n        thisDate);\n\n    // Format a Color enumeration value in various ways.\n    Console::WriteLine(&quot;Standard Enumeration Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)<br>&quot; +\n        &quot;(D) Decimal number: . . . . . {0:D}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;, \n        Color::Green);       \n\n};\n\n\n/*\nThis code example produces the following results:\n\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n(default):. . . . . . . . -123 (default = &#39;G&#39;)\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n(default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n(default):. . . . . . . . Green (default = &#39;G&#39;)\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"console.writelineFmt1#1\">// This code example demonstrates the Console.WriteLine() method.\n// Formatting for this example uses the &quot;en-US&quot; culture.\n\nusing System;\nclass Sample \n{\n    enum Color {Yellow = 1, Blue, Green};\n    static DateTime thisDate = DateTime.Now;\n\n    public static void Main() \n    {\n    Console.Clear();\n\n// Format a negative integer or floating-point number in various ways.\n    Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(C) Currency: . . . . . . . . {0:C}<br>&quot; +\n        &quot;(D) Decimal:. . . . . . . . . {0:D}<br>&quot; +\n        &quot;(E) Scientific: . . . . . . . {1:E}<br>&quot; +\n        &quot;(F) Fixed point:. . . . . . . {1:F}<br>&quot; +\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(N) Number: . . . . . . . . . {0:N}<br>&quot; +\n        &quot;(P) Percent:. . . . . . . . . {1:P}<br>&quot; +\n        &quot;(R) Round-trip: . . . . . . . {1:R}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;,\n        -123, -123.45f); \n\n// Format the current date in various ways.\n    Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(d) Short date: . . . . . . . {0:d}<br>&quot; +\n        &quot;(D) Long date:. . . . . . . . {0:D}<br>&quot; +\n        &quot;(t) Short time: . . . . . . . {0:t}<br>&quot; +\n        &quot;(T) Long time:. . . . . . . . {0:T}<br>&quot; +\n        &quot;(f) Full date/short time: . . {0:f}<br>&quot; +\n        &quot;(F) Full date/long time:. . . {0:F}<br>&quot; +\n        &quot;(g) General date/short time:. {0:g}<br>&quot; +\n        &quot;(G) General date/long time: . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(M) Month:. . . . . . . . . . {0:M}<br>&quot; +\n        &quot;(R) RFC1123:. . . . . . . . . {0:R}<br>&quot; +\n        &quot;(s) Sortable: . . . . . . . . {0:s}<br>&quot; +\n        &quot;(u) Universal sortable: . . . {0:u} (invariant)<br>&quot; +\n        &quot;(U) Universal full date/time: {0:U}<br>&quot; +\n        &quot;(Y) Year: . . . . . . . . . . {0:Y}<br>&quot;, \n        thisDate);\n\n// Format a Color enumeration value in various ways.\n    Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)<br>&quot; +\n        &quot;(D) Decimal number: . . . . . {0:D}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;, \n        Color.Green);       \n    }\n}\n/*\nThis code example produces the following results:\n\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n    (default):. . . . . . . . -123 (default = &#39;G&#39;)\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n    (default):. . . . . . . . Green (default = &#39;G&#39;)\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.writelineFmt1#1\">&#39; This code example demonstrates the Console.WriteLine() method.\n&#39; Formatting for this example uses the &quot;en-US&quot; culture.\n\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Enum Color\n      Yellow = 1\n      Blue = 2\n      Green = 3\n   End Enum &#39;Color\n   Private Shared thisDate As DateTime = DateTime.Now\n   \n   Public Shared Sub Main()\n      Console.Clear()\n\n      &#39; Format a negative integer or floating-point number in various ways.\n      Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;)\n      Console.WriteLine(&quot;(C) Currency: . . . . . . . . {0:C}&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Decimal:. . . . . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(E) Scientific: . . . . . . . {1:E}&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Fixed point:. . . . . . . {1:F}&quot; &amp; vbCrLf &amp; _\n                        &quot;(G) General:. . . . . . . . . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(N) Number: . . . . . . . . . {0:N}&quot; &amp; vbCrLf &amp; _\n                        &quot;(P) Percent:. . . . . . . . . {1:P}&quot; &amp; vbCrLf &amp; _\n                        &quot;(R) Round-trip: . . . . . . . {1:R}&quot; &amp; vbCrLf &amp; _\n                        &quot;(X) Hexadecimal:. . . . . . . {0:X}&quot; &amp; vbCrLf, _\n                        - 123, - 123.45F)\n\n      &#39; Format the current date in various ways.\n      Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;)\n      Console.WriteLine(&quot;(d) Short date: . . . . . . . {0:d}&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Long date:. . . . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(t) Short time: . . . . . . . {0:t}&quot; &amp; vbCrLf &amp; _\n                        &quot;(T) Long time:. . . . . . . . {0:T}&quot; &amp; vbCrLf &amp; _\n                        &quot;(f) Full date/short time: . . {0:f}&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Full date/long time:. . . {0:F}&quot; &amp; vbCrLf &amp; _\n                        &quot;(g) General date/short time:. {0:g}&quot; &amp; vbCrLf &amp; _\n                        &quot;(G) General date/long time: . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(M) Month:. . . . . . . . . . {0:M}&quot; &amp; vbCrLf &amp; _\n                        &quot;(R) RFC1123:. . . . . . . . . {0:R}&quot; &amp; vbCrLf &amp; _\n                        &quot;(s) Sortable: . . . . . . . . {0:s}&quot; &amp; vbCrLf &amp; _\n                        &quot;(u) Universal sortable: . . . {0:u} (invariant)&quot; &amp; vbCrLf &amp; _\n                        &quot;(U) Universal full date/time: {0:U}&quot; &amp; vbCrLf &amp; _\n                        &quot;(Y) Year: . . . . . . . . . . {0:Y}&quot; &amp; vbCrLf, _\n                        thisDate)\n\n      &#39; Format a Color enumeration value in various ways.\n      Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;)\n      Console.WriteLine(&quot;(G) General:. . . . . . . . . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Decimal number: . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(X) Hexadecimal:. . . . . . . {0:X}&quot; &amp; vbCrLf, _\n                        Color.Green)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard Numeric Format Specifiers\n&#39;(C) Currency: . . . . . . . . ($123.00)\n&#39;(D) Decimal:. . . . . . . . . -123\n&#39;(E) Scientific: . . . . . . . -1.234500E+002\n&#39;(F) Fixed point:. . . . . . . -123.45\n&#39;(G) General:. . . . . . . . . -123\n&#39;    (default):. . . . . . . . -123 (default = &#39;G&#39;)\n&#39;(N) Number: . . . . . . . . . -123.00\n&#39;(P) Percent:. . . . . . . . . -12,345.00 %\n&#39;(R) Round-trip: . . . . . . . -123.45\n&#39;(X) Hexadecimal:. . . . . . . FFFFFF85\n&#39;\n&#39;Standard DateTime Format Specifiers\n&#39;(d) Short date: . . . . . . . 6/26/2004\n&#39;(D) Long date:. . . . . . . . Saturday, June 26, 2004\n&#39;(t) Short time: . . . . . . . 8:11 PM\n&#39;(T) Long time:. . . . . . . . 8:11:04 PM\n&#39;(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n&#39;(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n&#39;(g) General date/short time:. 6/26/2004 8:11 PM\n&#39;(G) General date/long time: . 6/26/2004 8:11:04 PM\n&#39;    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n&#39;(M) Month:. . . . . . . . . . June 26\n&#39;(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n&#39;(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n&#39;(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n&#39;(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n&#39;(Y) Year: . . . . . . . . . . June, 2004\n&#39;\n&#39;Standard Enumeration Format Specifiers\n&#39;(G) General:. . . . . . . . . Green\n&#39;    (default):. . . . . . . . Green (default = &#39;G&#39;)\n&#39;(F) Flags:. . . . . . . . . . Green (flags or integer)\n&#39;(D) Decimal number: . . . . . 3\n&#39;(X) Hexadecimal:. . . . . . . 00000003\n&#39;\n</code></pre><p> The following example illustrates the use of the Write method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (string format, object[] arg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of objects to write using <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> or <code>arg</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The format specification in <code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the  <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  </p>\n<p> The syntax of a format item is <code>{</code><em>index</em>[<code>,</code><em>alignment</em>][<code>:</code><em>formatString</em>]<code>}</code>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  </p>\n<ul>\n<li><p>For more information about the composite formatting feature supported by methods such as <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a>, and some overloads of <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, see <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">Composite Formatting</a>.  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about date and time format specifiers, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>.  </p>\n</li>\n<li><p>For more information about enumeration format specifiers, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>The <code>arg</code> parameter is a parameter array. Arguments  can be passed to the method either as an array or as list of five or more items. The examples illustrate both forms of method call.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>Person</code> class with a number of properties that provide information about a person. Its <code>GetDescription</code> method returns an array that contains all of the property values except one. The example then uses the array returned by the  <code>GetDescription</code> method  to display the values of the Person object.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.Write#1\">using System;\n\npublic class Person\n{\n   public String Name { get; set; }\n   public DateTime BirthDate  { get; set; }\n   public Double Height { get; set; }\n   public Double Weight { get; set; }\n   public Char Gender { get; set; }\n   public String Remarks { get; set; }\n   \n   public object[] GetDescription() \n   {\n      return new object[] { Name, Gender, Height, Weight, BirthDate};\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var p1 = new Person() { Name = &quot;John&quot;, Gender = &#39;M&#39;,\n                              BirthDate = new DateTime(1992, 5, 10), \n                              Height = 73.5, Weight = 207 };\n      p1.Remarks = &quot;Client since 1/3/2012&quot;;\n      Console.Write(&quot;{0}: {1}, born {4:d}  Height {2} inches, Weight {3} lbs  &quot;, \n                    p1.GetDescription());\n      if (String.IsNullOrEmpty(p1.Remarks))\n         Console.WriteLine();\n      else\n         Console.WriteLine(&quot;{1}Remarks: {0}&quot;, p1.Remarks,\n                           Console.CursorLeft + p1.Remarks.Length + 10 &gt; Console.WindowWidth ?\n                              &quot;<br>   &quot; : &quot;&quot;);\n   }\n}\n// The example displays the following output:\n//    John: M, born 5/10/1992  Height 73.5 inches, Weight 207 lbs  Remarks: Client since 1/3/2012\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.Write#1\">Public Class Person\n   Public Property Name As String\n   Public Property BirthDate As DateTime\n   Public Property Height As Double\n   Public Property Weight As Double\n   Public Property Gender As Char\n   Public Property Remarks As String\n   \n   Public Function GetDescription() As Object()\n      Return { Name, Gender, Height, Weight, BirthDate}\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim p1 As New Person() With { .Name = &quot;John&quot;, .Gender = &quot;M&quot;c,\n                                    .BirthDate = New DateTime(1992, 5, 10), \n                                    .Height = 73.5, .Weight = 207 }\n      p1.Remarks = &quot;Client since 1/3/2012&quot;\n      Console.Write(&quot;{0}: {1}, born {4:d}  Height {2} inches, Weight {3} lbs  &quot;, \n                    p1.GetDescription())\n      If String.IsNullOrEmpty(p1.Remarks) Then\n         Console.WriteLine()\n      Else\n         Console.WriteLine(&quot;{1}Remarks: {0}&quot;, p1.Remarks,\n                           If(Console.CursorLeft + p1.Remarks.Length + 10 &gt; Console.WindowWidth,\n                              vbCrLf + &quot;   &quot;, &quot;&quot;))\n      End If   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   John: M, born 5/10/1992  Height 73.5 inches, Weight 207 lbs  Remarks: Client since 1/3/2012\n</code></pre><p> Note that the example calls the Write method rather than the [WriteLine(String,â€‚Object&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29&gt; method because it attempts to display the value of the <code>Person.Remarks</code> property on the same line. To do this, it examines the value of the <a class=\"xref\" href=\"system.console#System_Console_CursorLeft_\" data-linktype=\"relative-path\">CursorLeft</a> and <a class=\"xref\" href=\"system.console#System_Console_WindowWidth_\" data-linktype=\"relative-path\">WindowWidth</a> properties to determine whether there is enough space for the remark to fit.  If there is, it displays the line. If not, it writes a line, indents three spaces, and displays the remark.  </p>\n<p> The following example is identical to the first, except that it supplies a five-item list as the <code>arg</code> argument instead of a parameter array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console.Write#2\">Public Class Person\n   Public Property Name As String\n   Public Property BirthDate As DateTime\n   Public Property Height As Double\n   Public Property Weight As Double\n   Public Property Gender As Char\n   Public Property Remarks As String\n   \n   Public Function GetDescription() As Object()\n      Return { Name, Gender, Height, Weight, BirthDate}\n   End Function\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim p1 As New Person() With { .Name = &quot;John&quot;, .Gender = &quot;M&quot;c,\n                                    .BirthDate = New DateTime(1992, 5, 10), \n                                    .Height = 73.5, .Weight = 207 }\n      p1.Remarks = &quot;Client since 1/3/2012&quot;\n      Console.Write(&quot;{0}: {1}, born {2:d}  Height {3} inches, Weight {4} lbs  &quot;, \n                    p1.Name, p1.Gender, p1.BirthDate, p1.Height, p1.Weight)\n      If String.IsNullOrEmpty(p1.Remarks) Then\n         Console.WriteLine()\n      Else\n         Console.WriteLine(&quot;{1}Remarks: {0}&quot;, p1.Remarks,\n                           If(Console.CursorLeft + p1.Remarks.Length + 10 &gt; Console.WindowWidth,\n                              vbCrLf + &quot;   &quot;, &quot;&quot;))\n      End If   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   John: M, born 5/10/1992  Height 73.5 inches, Weight 207 lbs  Remarks: Client since 1/3/2012\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.Write#2\">using System;\n\npublic class Person\n{\n   public String Name { get; set; }\n   public DateTime BirthDate  { get; set; }\n   public Double Height { get; set; }\n   public Double Weight { get; set; }\n   public Char Gender { get; set; }\n   public String Remarks { get; set; }\n   \n   public object[] GetDescription() \n   {\n      return new object[] { Name, Gender, Height, Weight, BirthDate};\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var p1 = new Person() { Name = &quot;John&quot;, Gender = &#39;M&#39;,\n                              BirthDate = new DateTime(1992, 5, 10), \n                              Height = 73.5, Weight = 207 };\n      p1.Remarks = &quot;Client since 1/3/2012&quot;;\n      Console.Write(&quot;{0}: {1}, born {2:d}  Height {3} inches, Weight {4} lbs  &quot;, \n                    p1.Name, p1.Gender, p1.BirthDate, p1.Height, p1.Weight);\n      if (String.IsNullOrEmpty(p1.Remarks))\n         Console.WriteLine();\n      else\n         Console.WriteLine(&quot;{1}Remarks: {0}&quot;, p1.Remarks,\n                           Console.CursorLeft + p1.Remarks.Length + 10 &gt; Console.WindowWidth ?\n                              &quot;<br>   &quot; : &quot;&quot;);\n   }\n}\n// The example displays the following output:\n//    John: M, born 5/10/1992  Height 73.5 inches, Weight 207 lbs  Remarks: Client since 1/3/2012\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the specified subarray of Unicode characters to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (char[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of Unicode characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position in <code>buffer</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> plus <code>count</code> specify a position that is not within <code>buffer</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method writes <code>count</code> characters starting at position <code>index</code> of <code>buffer</code> to the standard output stream.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_String_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(String,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified objects to the standard output stream using the specified format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (string format, object arg0, object arg1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to write using <code>format</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to write using <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The format specification in <code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  </p>\n<p> The syntax of a format item is <code>{</code><em>index</em>[<code>,</code><em>alignment</em>][<code>:</code><em>formatString</em>]<code>}</code>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  </p>\n<ul>\n<li><p>For more information about the composite formatting feature supported by methods such as <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a>, and some overloads of <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, see <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">Composite Formatting</a>.  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about date and time format specifiers, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>.  </p>\n</li>\n<li><p>For more information about enumeration format specifiers, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>WriteLine</code> method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.writelineFmt1#1\">// This code example demonstrates the Console.WriteLine() method.\n// Formatting for this example uses the &quot;en-US&quot; culture.\n\nusing namespace System;\n\npublic enum class Color {Yellow = 1, Blue, Green};\n\nint main() \n{\n    DateTime thisDate = DateTime::Now;\n    Console::Clear();\n\n    // Format a negative integer or floating-point number in various ways.\n    Console::WriteLine(&quot;Standard Numeric Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(C) Currency: . . . . . . . . {0:C}<br>&quot; +\n        &quot;(D) Decimal:. . . . . . . . . {0:D}<br>&quot; +\n        &quot;(E) Scientific: . . . . . . . {1:E}<br>&quot; +\n        &quot;(F) Fixed point:. . . . . . . {1:F}<br>&quot; +\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(N) Number: . . . . . . . . . {0:N}<br>&quot; +\n        &quot;(P) Percent:. . . . . . . . . {1:P}<br>&quot; +\n        &quot;(R) Round-trip: . . . . . . . {1:R}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;,\n        -123, -123.45f); \n\n    // Format the current date in various ways.\n    Console::WriteLine(&quot;Standard DateTime Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(d) Short date: . . . . . . . {0:d}<br>&quot; +\n        &quot;(D) Long date:. . . . . . . . {0:D}<br>&quot; +\n        &quot;(t) Short time: . . . . . . . {0:t}<br>&quot; +\n        &quot;(T) Long time:. . . . . . . . {0:T}<br>&quot; +\n        &quot;(f) Full date/short time: . . {0:f}<br>&quot; +\n        &quot;(F) Full date/long time:. . . {0:F}<br>&quot; +\n        &quot;(g) General date/short time:. {0:g}<br>&quot; +\n        &quot;(G) General date/long time: . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(M) Month:. . . . . . . . . . {0:M}<br>&quot; +\n        &quot;(R) RFC1123:. . . . . . . . . {0:R}<br>&quot; +\n        &quot;(s) Sortable: . . . . . . . . {0:s}<br>&quot; +\n        &quot;(u) Universal sortable: . . . {0:u} (invariant)<br>&quot; +\n        &quot;(U) Universal full date/time: {0:U}<br>&quot; +\n        &quot;(Y) Year: . . . . . . . . . . {0:Y}<br>&quot;, \n        thisDate);\n\n    // Format a Color enumeration value in various ways.\n    Console::WriteLine(&quot;Standard Enumeration Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)<br>&quot; +\n        &quot;(D) Decimal number: . . . . . {0:D}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;, \n        Color::Green);       \n\n};\n\n\n/*\nThis code example produces the following results:\n\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n(default):. . . . . . . . -123 (default = &#39;G&#39;)\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n(default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n(default):. . . . . . . . Green (default = &#39;G&#39;)\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"console.writelineFmt1#1\">// This code example demonstrates the Console.WriteLine() method.\n// Formatting for this example uses the &quot;en-US&quot; culture.\n\nusing System;\nclass Sample \n{\n    enum Color {Yellow = 1, Blue, Green};\n    static DateTime thisDate = DateTime.Now;\n\n    public static void Main() \n    {\n    Console.Clear();\n\n// Format a negative integer or floating-point number in various ways.\n    Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(C) Currency: . . . . . . . . {0:C}<br>&quot; +\n        &quot;(D) Decimal:. . . . . . . . . {0:D}<br>&quot; +\n        &quot;(E) Scientific: . . . . . . . {1:E}<br>&quot; +\n        &quot;(F) Fixed point:. . . . . . . {1:F}<br>&quot; +\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(N) Number: . . . . . . . . . {0:N}<br>&quot; +\n        &quot;(P) Percent:. . . . . . . . . {1:P}<br>&quot; +\n        &quot;(R) Round-trip: . . . . . . . {1:R}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;,\n        -123, -123.45f); \n\n// Format the current date in various ways.\n    Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(d) Short date: . . . . . . . {0:d}<br>&quot; +\n        &quot;(D) Long date:. . . . . . . . {0:D}<br>&quot; +\n        &quot;(t) Short time: . . . . . . . {0:t}<br>&quot; +\n        &quot;(T) Long time:. . . . . . . . {0:T}<br>&quot; +\n        &quot;(f) Full date/short time: . . {0:f}<br>&quot; +\n        &quot;(F) Full date/long time:. . . {0:F}<br>&quot; +\n        &quot;(g) General date/short time:. {0:g}<br>&quot; +\n        &quot;(G) General date/long time: . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(M) Month:. . . . . . . . . . {0:M}<br>&quot; +\n        &quot;(R) RFC1123:. . . . . . . . . {0:R}<br>&quot; +\n        &quot;(s) Sortable: . . . . . . . . {0:s}<br>&quot; +\n        &quot;(u) Universal sortable: . . . {0:u} (invariant)<br>&quot; +\n        &quot;(U) Universal full date/time: {0:U}<br>&quot; +\n        &quot;(Y) Year: . . . . . . . . . . {0:Y}<br>&quot;, \n        thisDate);\n\n// Format a Color enumeration value in various ways.\n    Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)<br>&quot; +\n        &quot;(D) Decimal number: . . . . . {0:D}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;, \n        Color.Green);       \n    }\n}\n/*\nThis code example produces the following results:\n\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n    (default):. . . . . . . . -123 (default = &#39;G&#39;)\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n    (default):. . . . . . . . Green (default = &#39;G&#39;)\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.writelineFmt1#1\">&#39; This code example demonstrates the Console.WriteLine() method.\n&#39; Formatting for this example uses the &quot;en-US&quot; culture.\n\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Enum Color\n      Yellow = 1\n      Blue = 2\n      Green = 3\n   End Enum &#39;Color\n   Private Shared thisDate As DateTime = DateTime.Now\n   \n   Public Shared Sub Main()\n      Console.Clear()\n\n      &#39; Format a negative integer or floating-point number in various ways.\n      Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;)\n      Console.WriteLine(&quot;(C) Currency: . . . . . . . . {0:C}&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Decimal:. . . . . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(E) Scientific: . . . . . . . {1:E}&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Fixed point:. . . . . . . {1:F}&quot; &amp; vbCrLf &amp; _\n                        &quot;(G) General:. . . . . . . . . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(N) Number: . . . . . . . . . {0:N}&quot; &amp; vbCrLf &amp; _\n                        &quot;(P) Percent:. . . . . . . . . {1:P}&quot; &amp; vbCrLf &amp; _\n                        &quot;(R) Round-trip: . . . . . . . {1:R}&quot; &amp; vbCrLf &amp; _\n                        &quot;(X) Hexadecimal:. . . . . . . {0:X}&quot; &amp; vbCrLf, _\n                        - 123, - 123.45F)\n\n      &#39; Format the current date in various ways.\n      Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;)\n      Console.WriteLine(&quot;(d) Short date: . . . . . . . {0:d}&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Long date:. . . . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(t) Short time: . . . . . . . {0:t}&quot; &amp; vbCrLf &amp; _\n                        &quot;(T) Long time:. . . . . . . . {0:T}&quot; &amp; vbCrLf &amp; _\n                        &quot;(f) Full date/short time: . . {0:f}&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Full date/long time:. . . {0:F}&quot; &amp; vbCrLf &amp; _\n                        &quot;(g) General date/short time:. {0:g}&quot; &amp; vbCrLf &amp; _\n                        &quot;(G) General date/long time: . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(M) Month:. . . . . . . . . . {0:M}&quot; &amp; vbCrLf &amp; _\n                        &quot;(R) RFC1123:. . . . . . . . . {0:R}&quot; &amp; vbCrLf &amp; _\n                        &quot;(s) Sortable: . . . . . . . . {0:s}&quot; &amp; vbCrLf &amp; _\n                        &quot;(u) Universal sortable: . . . {0:u} (invariant)&quot; &amp; vbCrLf &amp; _\n                        &quot;(U) Universal full date/time: {0:U}&quot; &amp; vbCrLf &amp; _\n                        &quot;(Y) Year: . . . . . . . . . . {0:Y}&quot; &amp; vbCrLf, _\n                        thisDate)\n\n      &#39; Format a Color enumeration value in various ways.\n      Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;)\n      Console.WriteLine(&quot;(G) General:. . . . . . . . . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Decimal number: . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(X) Hexadecimal:. . . . . . . {0:X}&quot; &amp; vbCrLf, _\n                        Color.Green)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard Numeric Format Specifiers\n&#39;(C) Currency: . . . . . . . . ($123.00)\n&#39;(D) Decimal:. . . . . . . . . -123\n&#39;(E) Scientific: . . . . . . . -1.234500E+002\n&#39;(F) Fixed point:. . . . . . . -123.45\n&#39;(G) General:. . . . . . . . . -123\n&#39;    (default):. . . . . . . . -123 (default = &#39;G&#39;)\n&#39;(N) Number: . . . . . . . . . -123.00\n&#39;(P) Percent:. . . . . . . . . -12,345.00 %\n&#39;(R) Round-trip: . . . . . . . -123.45\n&#39;(X) Hexadecimal:. . . . . . . FFFFFF85\n&#39;\n&#39;Standard DateTime Format Specifiers\n&#39;(d) Short date: . . . . . . . 6/26/2004\n&#39;(D) Long date:. . . . . . . . Saturday, June 26, 2004\n&#39;(t) Short time: . . . . . . . 8:11 PM\n&#39;(T) Long time:. . . . . . . . 8:11:04 PM\n&#39;(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n&#39;(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n&#39;(g) General date/short time:. 6/26/2004 8:11 PM\n&#39;(G) General date/long time: . 6/26/2004 8:11:04 PM\n&#39;    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n&#39;(M) Month:. . . . . . . . . . June 26\n&#39;(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n&#39;(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n&#39;(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n&#39;(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n&#39;(Y) Year: . . . . . . . . . . June, 2004\n&#39;\n&#39;Standard Enumeration Format Specifiers\n&#39;(G) General:. . . . . . . . . Green\n&#39;    (default):. . . . . . . . Green (default = &#39;G&#39;)\n&#39;(F) Flags:. . . . . . . . . . Green (flags or integer)\n&#39;(D) Decimal number: . . . . . 3\n&#39;(X) Hexadecimal:. . . . . . . 00000003\n&#39;\n</code></pre><p> The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_String_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(String,Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified objects to the standard output stream using the specified format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (string format, object arg0, object arg1, object arg2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to write using <code>format</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to write using <code>format</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third object to write using <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The format specification in <code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  </p>\n<p> The syntax of a format item is <code>{</code><em>index</em>[<code>,</code><em>alignment</em>][<code>:</code><em>formatString</em>]<code>}</code>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  </p>\n<ul>\n<li><p>For more information about the composite formatting feature supported by methods such as <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a>, and some overloads of <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, see <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">Composite Formatting</a>.  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about date and time format specifiers, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>.  </p>\n</li>\n<li><p>For more information about enumeration format specifiers, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>WriteLine</code> method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.writelineFmt1#1\">// This code example demonstrates the Console.WriteLine() method.\n// Formatting for this example uses the &quot;en-US&quot; culture.\n\nusing namespace System;\n\npublic enum class Color {Yellow = 1, Blue, Green};\n\nint main() \n{\n    DateTime thisDate = DateTime::Now;\n    Console::Clear();\n\n    // Format a negative integer or floating-point number in various ways.\n    Console::WriteLine(&quot;Standard Numeric Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(C) Currency: . . . . . . . . {0:C}<br>&quot; +\n        &quot;(D) Decimal:. . . . . . . . . {0:D}<br>&quot; +\n        &quot;(E) Scientific: . . . . . . . {1:E}<br>&quot; +\n        &quot;(F) Fixed point:. . . . . . . {1:F}<br>&quot; +\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(N) Number: . . . . . . . . . {0:N}<br>&quot; +\n        &quot;(P) Percent:. . . . . . . . . {1:P}<br>&quot; +\n        &quot;(R) Round-trip: . . . . . . . {1:R}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;,\n        -123, -123.45f); \n\n    // Format the current date in various ways.\n    Console::WriteLine(&quot;Standard DateTime Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(d) Short date: . . . . . . . {0:d}<br>&quot; +\n        &quot;(D) Long date:. . . . . . . . {0:D}<br>&quot; +\n        &quot;(t) Short time: . . . . . . . {0:t}<br>&quot; +\n        &quot;(T) Long time:. . . . . . . . {0:T}<br>&quot; +\n        &quot;(f) Full date/short time: . . {0:f}<br>&quot; +\n        &quot;(F) Full date/long time:. . . {0:F}<br>&quot; +\n        &quot;(g) General date/short time:. {0:g}<br>&quot; +\n        &quot;(G) General date/long time: . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(M) Month:. . . . . . . . . . {0:M}<br>&quot; +\n        &quot;(R) RFC1123:. . . . . . . . . {0:R}<br>&quot; +\n        &quot;(s) Sortable: . . . . . . . . {0:s}<br>&quot; +\n        &quot;(u) Universal sortable: . . . {0:u} (invariant)<br>&quot; +\n        &quot;(U) Universal full date/time: {0:U}<br>&quot; +\n        &quot;(Y) Year: . . . . . . . . . . {0:Y}<br>&quot;, \n        thisDate);\n\n    // Format a Color enumeration value in various ways.\n    Console::WriteLine(&quot;Standard Enumeration Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)<br>&quot; +\n        &quot;(D) Decimal number: . . . . . {0:D}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;, \n        Color::Green);       \n\n};\n\n\n/*\nThis code example produces the following results:\n\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n(default):. . . . . . . . -123 (default = &#39;G&#39;)\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n(default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n(default):. . . . . . . . Green (default = &#39;G&#39;)\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"console.writelineFmt1#1\">// This code example demonstrates the Console.WriteLine() method.\n// Formatting for this example uses the &quot;en-US&quot; culture.\n\nusing System;\nclass Sample \n{\n    enum Color {Yellow = 1, Blue, Green};\n    static DateTime thisDate = DateTime.Now;\n\n    public static void Main() \n    {\n    Console.Clear();\n\n// Format a negative integer or floating-point number in various ways.\n    Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(C) Currency: . . . . . . . . {0:C}<br>&quot; +\n        &quot;(D) Decimal:. . . . . . . . . {0:D}<br>&quot; +\n        &quot;(E) Scientific: . . . . . . . {1:E}<br>&quot; +\n        &quot;(F) Fixed point:. . . . . . . {1:F}<br>&quot; +\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(N) Number: . . . . . . . . . {0:N}<br>&quot; +\n        &quot;(P) Percent:. . . . . . . . . {1:P}<br>&quot; +\n        &quot;(R) Round-trip: . . . . . . . {1:R}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;,\n        -123, -123.45f); \n\n// Format the current date in various ways.\n    Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(d) Short date: . . . . . . . {0:d}<br>&quot; +\n        &quot;(D) Long date:. . . . . . . . {0:D}<br>&quot; +\n        &quot;(t) Short time: . . . . . . . {0:t}<br>&quot; +\n        &quot;(T) Long time:. . . . . . . . {0:T}<br>&quot; +\n        &quot;(f) Full date/short time: . . {0:f}<br>&quot; +\n        &quot;(F) Full date/long time:. . . {0:F}<br>&quot; +\n        &quot;(g) General date/short time:. {0:g}<br>&quot; +\n        &quot;(G) General date/long time: . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(M) Month:. . . . . . . . . . {0:M}<br>&quot; +\n        &quot;(R) RFC1123:. . . . . . . . . {0:R}<br>&quot; +\n        &quot;(s) Sortable: . . . . . . . . {0:s}<br>&quot; +\n        &quot;(u) Universal sortable: . . . {0:u} (invariant)<br>&quot; +\n        &quot;(U) Universal full date/time: {0:U}<br>&quot; +\n        &quot;(Y) Year: . . . . . . . . . . {0:Y}<br>&quot;, \n        thisDate);\n\n// Format a Color enumeration value in various ways.\n    Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)<br>&quot; +\n        &quot;(D) Decimal number: . . . . . {0:D}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;, \n        Color.Green);       \n    }\n}\n/*\nThis code example produces the following results:\n\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n    (default):. . . . . . . . -123 (default = &#39;G&#39;)\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n    (default):. . . . . . . . Green (default = &#39;G&#39;)\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.writelineFmt1#1\">&#39; This code example demonstrates the Console.WriteLine() method.\n&#39; Formatting for this example uses the &quot;en-US&quot; culture.\n\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Enum Color\n      Yellow = 1\n      Blue = 2\n      Green = 3\n   End Enum &#39;Color\n   Private Shared thisDate As DateTime = DateTime.Now\n   \n   Public Shared Sub Main()\n      Console.Clear()\n\n      &#39; Format a negative integer or floating-point number in various ways.\n      Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;)\n      Console.WriteLine(&quot;(C) Currency: . . . . . . . . {0:C}&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Decimal:. . . . . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(E) Scientific: . . . . . . . {1:E}&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Fixed point:. . . . . . . {1:F}&quot; &amp; vbCrLf &amp; _\n                        &quot;(G) General:. . . . . . . . . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(N) Number: . . . . . . . . . {0:N}&quot; &amp; vbCrLf &amp; _\n                        &quot;(P) Percent:. . . . . . . . . {1:P}&quot; &amp; vbCrLf &amp; _\n                        &quot;(R) Round-trip: . . . . . . . {1:R}&quot; &amp; vbCrLf &amp; _\n                        &quot;(X) Hexadecimal:. . . . . . . {0:X}&quot; &amp; vbCrLf, _\n                        - 123, - 123.45F)\n\n      &#39; Format the current date in various ways.\n      Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;)\n      Console.WriteLine(&quot;(d) Short date: . . . . . . . {0:d}&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Long date:. . . . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(t) Short time: . . . . . . . {0:t}&quot; &amp; vbCrLf &amp; _\n                        &quot;(T) Long time:. . . . . . . . {0:T}&quot; &amp; vbCrLf &amp; _\n                        &quot;(f) Full date/short time: . . {0:f}&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Full date/long time:. . . {0:F}&quot; &amp; vbCrLf &amp; _\n                        &quot;(g) General date/short time:. {0:g}&quot; &amp; vbCrLf &amp; _\n                        &quot;(G) General date/long time: . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(M) Month:. . . . . . . . . . {0:M}&quot; &amp; vbCrLf &amp; _\n                        &quot;(R) RFC1123:. . . . . . . . . {0:R}&quot; &amp; vbCrLf &amp; _\n                        &quot;(s) Sortable: . . . . . . . . {0:s}&quot; &amp; vbCrLf &amp; _\n                        &quot;(u) Universal sortable: . . . {0:u} (invariant)&quot; &amp; vbCrLf &amp; _\n                        &quot;(U) Universal full date/time: {0:U}&quot; &amp; vbCrLf &amp; _\n                        &quot;(Y) Year: . . . . . . . . . . {0:Y}&quot; &amp; vbCrLf, _\n                        thisDate)\n\n      &#39; Format a Color enumeration value in various ways.\n      Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;)\n      Console.WriteLine(&quot;(G) General:. . . . . . . . . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Decimal number: . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(X) Hexadecimal:. . . . . . . {0:X}&quot; &amp; vbCrLf, _\n                        Color.Green)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard Numeric Format Specifiers\n&#39;(C) Currency: . . . . . . . . ($123.00)\n&#39;(D) Decimal:. . . . . . . . . -123\n&#39;(E) Scientific: . . . . . . . -1.234500E+002\n&#39;(F) Fixed point:. . . . . . . -123.45\n&#39;(G) General:. . . . . . . . . -123\n&#39;    (default):. . . . . . . . -123 (default = &#39;G&#39;)\n&#39;(N) Number: . . . . . . . . . -123.00\n&#39;(P) Percent:. . . . . . . . . -12,345.00 %\n&#39;(R) Round-trip: . . . . . . . -123.45\n&#39;(X) Hexadecimal:. . . . . . . FFFFFF85\n&#39;\n&#39;Standard DateTime Format Specifiers\n&#39;(d) Short date: . . . . . . . 6/26/2004\n&#39;(D) Long date:. . . . . . . . Saturday, June 26, 2004\n&#39;(t) Short time: . . . . . . . 8:11 PM\n&#39;(T) Long time:. . . . . . . . 8:11:04 PM\n&#39;(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n&#39;(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n&#39;(g) General date/short time:. 6/26/2004 8:11 PM\n&#39;(G) General date/long time: . 6/26/2004 8:11:04 PM\n&#39;    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n&#39;(M) Month:. . . . . . . . . . June 26\n&#39;(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n&#39;(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n&#39;(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n&#39;(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n&#39;(Y) Year: . . . . . . . . . . June, 2004\n&#39;\n&#39;Standard Enumeration Format Specifiers\n&#39;(G) General:. . . . . . . . . Green\n&#39;    (default):. . . . . . . . Green (default = &#39;G&#39;)\n&#39;(F) Flags:. . . . . . . . . . Green (flags or integer)\n&#39;(D) Decimal number: . . . . . 3\n&#39;(X) Hexadecimal:. . . . . . . 00000003\n&#39;\n</code></pre><p> The following example illustrates the use of the <code>Write</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console-REFORMAT#1\">Public Class FormatConverter\n   Public Shared Sub Main()\n      Dim lineInput As String\n      lineInput = Console.ReadLine()\n      While Not lineInput Is Nothing\n         Dim fields() As String = lineInput.Split(ControlChars.Tab)\n         Dim isFirstField As Boolean = True\n         Dim item As String\n         For Each item In  fields\n            If isFirstField Then\n               isFirstField = False\n            Else\n               Console.Write(&quot;,&quot;)\n            End If\n            &#39; If the field represents a boolean, replace with a numeric representation.\n            Try\n               Console.Write(Convert.ToByte(Convert.ToBoolean(item)))\n            Catch\n               Console.Write(item)\n            End Try\n         Next item\n         Console.WriteLine()\n         lineInput = Console.ReadLine()\n      End While\n   End Sub &#39;Main\nEnd Class &#39;FormatConverter\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console-REFORMAT#1\">public class FormatConverter {\n    public static void Main(string[] args) {\n        string lineInput;\n        while ((lineInput = Console.ReadLine()) != null) {\n            string[] fields = lineInput.Split(new char[] {&#39;&nbsp;&nbsp;&nbsp;&nbsp;&#39;});\n            bool isFirstField = true;\n            foreach(string item in fields) {\n                if (isFirstField)\n                    isFirstField = false;\n                else\n                    Console.Write(&#39;,&#39;);\n                // If the field represents a boolean, replace with a numeric representation.\n                try {\n                    Console.Write(Convert.ToByte(Convert.ToBoolean(item)));\n                }\n                catch(FormatException) {\n                    Console.Write(item);\n                }\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console-REFORMAT#1\">int main()\n{\n   array&lt;String^&gt;^lineInputArr = {&quot;1   2.2   hello\tTRUE&quot;,&quot;2   5.22   bye\tFALSE&quot;,&quot;3   6.38   see ya&#39;\tTRUE&quot;};\n   for ( Int32 i = 0; i &lt; 3; i++ )\n   {\n      String^ lineInput = lineInputArr-&gt;GetValue( i )-&gt;ToString();\n      String^ aChar =  &quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;;\n      array&lt;String^&gt;^fields = lineInput-&gt;Split( aChar-&gt;ToCharArray() );\n      Boolean isFirstField = true;\n      for ( Int32 i = 0; i &lt; fields-&gt;Length; i++ )\n      {\n         if ( isFirstField )\n                  isFirstField = false;\n         else\n                  Console::Write( &quot;,&quot; );\n         \n         // If the field represents a boolean, replace with a numeric representation.\n         try\n         {\n            Console::Write( Convert::ToByte( Convert::ToBoolean( fields[ i ] ) ) );\n         }\n         catch ( FormatException^ ) \n         {\n            Console::Write( fields[ i ] );\n         }\n\n\n      }\n      Console::WriteLine();\n\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_Write_System_String_System_Object_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Console_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(String,Object,Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (string format, object arg0, object arg1, object arg2, object arg3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to write using <code>format</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to write using <code>format</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third object to write using <code>format</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fourth object to write using <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The format specification in <code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This API is not CLS-compliant. The CLS-compliant alternative is [Console.Write(String,â€‚Object&lt;xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;. The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.Write(String,â€‚Object&lt;xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;.  </p>\n</div>\n<p> This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  </p>\n<p> The syntax of a format item is <code>{</code><em>index</em>[<code>,</code><em>alignment</em>][<code>:</code><em>formatString</em>]<code>}</code>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  </p>\n<ul>\n<li><p>For more information about the composite formatting feature supported by methods such as <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a>, and some overloads of <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, see <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">Composite Formatting</a>.  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about date and time format specifiers, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>.  </p>\n</li>\n<li><p>For more information about enumeration format specifiers, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of variable parameters with the Write method. The method is called with a composite format string and five format items.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console.Write#3\">using namespace System;\n\n//void main(array&lt;System::String ^&gt; ^args)\nvoid main()\n{\n   DateTime dateRecorded(2009, 6, 15);\n   DateTime startTime(1, 1, 1, 0, 30, 0);\n   TimeSpan interval(12, 0, 0);\n\n   Double temperature1 = 52.8;\n   Double temperature2 = 63.5;\n   \n   Console::Write(&quot;Date: {0:d}:<br>   Temperature at {1:t}: {2}<br>   Temperature at {3:t}: {4}<br>&quot;, \n                  dateRecorded, startTime, temperature1, \n                  startTime.Add(interval), temperature2);\n    Console::ReadLine();\n}\n// The example displays the following output:\n//      Date: 6/15/2009:\n//         Temperature at 12:30 AM: 52.8\n//         Temperature at 12:30 PM: 63.5\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine()</div>        \r\n          </div>\r\n    \r\n            <p>Writes the current line terminator to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default line terminator is a string whose value is a carriage return followed by a line feed (&quot;\\r\\n&quot; in C#, or <code>vbCrLf</code> in Visual Basic). You can change the line terminator by setting the <a class=\"xref\" href=\"system.io.textwriter#System_IO_TextWriter_NewLine_\" data-linktype=\"relative-path\">NewLine</a> property of the <a class=\"xref\" href=\"system.console#System_Console_Out_\" data-linktype=\"relative-path\">Out</a> property to another string. The example provides an illustration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example changes the line terminator from its default value of &quot;\\r<br>&quot; or <code>vbCrLf</code> to &quot;\\r<br>\\r<br>&quot; or <code>vbCrLf</code> + <code>vbCrLf</code>. It then calls the WriteLine and <a class=\"xref\" href=\"system.console#System_Console_WriteLine_System_String_\" data-linktype=\"relative-path\">WriteLine(String)</a> methods to display output to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console.WriteLine#2\">using namespace System;\n\nvoid main()\n{\n   array&lt;String^&gt;^ lines = gcnew array&lt;String^&gt; { &quot;This is the first line.&quot;, \n                                                  &quot;This is the second line.&quot; };\n   // Output the lines using the default newline sequence.\n   Console::WriteLine(&quot;With the default new line characters:&quot;);\n   Console::WriteLine();\n   for each (String^ line in lines)\n      Console::WriteLine(line);\n\n   Console::WriteLine();\n\n   // Redefine the newline characters to double space.\n   Console::Out-&gt;NewLine = &quot;\\r<br>\\r<br>&quot;;\n   // Output the lines using the new newline sequence.\n   Console::WriteLine(&quot;With redefined new line characters:&quot;);\n   Console::WriteLine();\n   for each (String^ line in lines)\n      Console::WriteLine(line);\n}\n// The example displays the following output:\n//       With the default new line characters:\n//       \n//       This is the first line.\n//       This is the second line.\n//       \n//       With redefined new line characters:\n//       \n//       \n//       \n//       This is the first line.\n//       \n//       This is the second line.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] lines = { &quot;This is the first line.&quot;, \n                         &quot;This is the second line.&quot; };\n      // Output the lines using the default newline sequence.\n      Console.WriteLine(&quot;With the default new line characters:&quot;);\n      Console.WriteLine();\n      foreach (string line in lines)\n         Console.WriteLine(line);\n\n      Console.WriteLine();\n      \n      // Redefine the newline characters to double space.\n      Console.Out.NewLine = &quot;\\r<br>\\r<br>&quot;;\n      // Output the lines using the new newline sequence.\n      Console.WriteLine(&quot;With redefined new line characters:&quot;);\n      Console.WriteLine();\n      foreach (string line in lines)\n         Console.WriteLine(line);\n   }\n}\n// The example displays the following output:\n//       With the default new line characters:\n//       \n//       This is the first line.\n//       This is the second line.\n//       \n//       With redefined new line characters:\n//       \n//       \n//       \n//       This is the first line.\n//       \n//       This is the second line.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#2\">Module Example\n   Public Sub Main()\n      Dim lines() As String = { &quot;This is the first line.&quot;, _\n                                &quot;This is the second line.&quot; }\n      &#39; Output the lines using the default newline sequence.\n      Console.WriteLine(&quot;With the default new line characters:&quot;)\n      Console.WriteLine()\n      For Each line As String In lines\n         Console.WriteLine(line)\n      Next\n      Console.WriteLine()\n      \n      &#39; Redefine the newline characters to double space.\n      Console.Out.NewLine = vbCrLf + vbCrLf\n      &#39; Output the lines using the new newline sequence.\n      Console.WriteLine(&quot;With redefined new line characters:&quot;)\n      Console.WriteLine()\n      For Each line As String In lines\n         Console.WriteLine(line)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       With the default new line characters:\n&#39;       \n&#39;       This is the first line.\n&#39;       This is the second line.\n&#39;       \n&#39;       With redefined new line characters:\n&#39;       \n&#39;       \n&#39;       \n&#39;       This is the first line.\n&#39;       \n&#39;       This is the second line.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_Boolean_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (bool value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.boolean#System_Boolean_ToString_\" data-linktype=\"relative-path\">ToString</a> method.  </p>\n<p> For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example generates ten random integers and uses the WriteLine method to indicate whether they are even.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console.WriteLine#4\">using namespace System;\n\nvoid main()\n{\n   // Assign 10 random integers to an array.\n   Random^ rnd = gcnew Random();\n   array&lt;Int32&gt;^ numbers = gcnew array&lt;Int32&gt;(10); \n   for (int ctr = 0; ctr &lt;= numbers-&gt;GetUpperBound(0); ctr++)\n      numbers[ctr] = rnd-&gt;Next();\n\n   // Determine whether the numbers are even or odd.\n   for each (Int32 number in numbers) {\n      bool even = (number % 2 == 0);\n      Console::WriteLine(&quot;Is {0} even:&quot;, number);\n      Console::WriteLine(even);\n      Console::WriteLine();      \n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#4\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Assign 10 random integers to an array.\n      Random rnd = new Random();\n      int[] numbers = new int[10]; \n      for (int ctr = 0; ctr &lt;= numbers.GetUpperBound(0); ctr++)\n         numbers[ctr] = rnd.Next();\n      \n      // Determine whether the numbers are even or odd.\n      foreach (var number in numbers) {\n         bool even = (number % 2 == 0);\n         Console.WriteLine(&quot;Is {0} even:&quot;, number);\n         Console.WriteLine(even);\n         Console.WriteLine();      \n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#4\">Module Example\n   Public Sub Main()\n      &#39; Assign 10 random integers to an array.\n      Dim rnd As New Random()\n      Dim numbers(9) As Integer\n      For ctr As Integer = 0 To numbers.GetUpperBound(0)\n         numbers(ctr) = rnd.Next\n      Next\n      \n      &#39; Determine whether the numbers are even or odd.\n      For Each number In numbers\n         Dim even As Boolean = (number mod 2 = 0)\n         Console.WriteLine(&quot;Is {0} even:&quot;, number)\n         Console.WriteLine(even)\n         Console.WriteLine()      \n      Next\n   End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_Char_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a tip calculator that calculates an 18% tip and uses the WriteLine method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#1\">using System;\n\npublic class TipCalculator {\n    private const double tipRate = 0.18;\n    public static int Main(string[] args) {\n        double billTotal;\n        if (args.Length == 0) {\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n            return 1;\n        }\n        else {\n            if (! Double.TryParse(args[0], out billTotal)) {\n                Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n                return 1;\n            }\n            double tip = billTotal * tipRate;\n            Console.WriteLine();\n            Console.WriteLine(&quot;Bill total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal);\n            Console.WriteLine(&quot;Tip total/rate:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c} ({1:p1})&quot;, tip, tipRate);\n            Console.WriteLine((&quot;&quot;).PadRight(24, &#39;-&#39;));\n            Console.WriteLine(&quot;Grand total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal + tip);\n            return 0;\n        }\n    }\n}\n\n/*\n&gt;tipcalc 52.23\n\nBill total:       $52.23\nTip total/rate:    $9.40 (18.0 %)\n------------------------\nGrand total:      $61.63\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#1\">Public Class TipCalculator\n   Private Const tipRate As Double = 0.18\n   \n   Public Shared Sub Main()\n      System.Environment.ExitCode = Calculator(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   Public Shared Function Calculator(args() As String) As Integer\n      Dim billTotal As Double\n      If args.Length &lt; 2 Then\n         Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n         Return 1\n      Else\n         If Not Double.TryParse(args(1), billTotal) Then\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n            Return 1\n         End If\n         \n         Dim tip As Double = billTotal * tipRate\n         Console.WriteLine()\n         Console.WriteLine(&quot;Bill total:{1}{0,8:c}&quot;, billTotal, vbTab)\n         Console.WriteLine(&quot;Tip total/rate:{2}{0,8:c} ({1:p1})&quot;, tip, tipRate, vbTab)\n         Console.WriteLine(&quot;&quot;.PadRight(24, &quot;-&quot;c))\n         Console.WriteLine(&quot;Grand total:{1}{0,8:c}&quot;, billTotal + tip, vbTab)\n         Return 0\n      End If\n   End Function \nEnd Class \n\n&#39;Example Output:\n&#39;---------------\n&#39; &gt;tipcalc 52.23\n&#39; \n&#39; Bill total:       $52.23\n&#39; Tip total/rate:    $9.40 (18.0 %)\n&#39; ------------------------\n&#39; Grand total:      $61.63\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_Char___\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(Char[])</div>        \r\n          </div>\r\n    \r\n            <p>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (char[] buffer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A Unicode character array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_Decimal_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value, followed by the current line terminator, to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_\" data-linktype=\"relative-path\">ToString</a> method.  </p>\n<p> For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a tip calculator that calculates an 18% tip and uses the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#1\">using System;\n\npublic class TipCalculator {\n    private const double tipRate = 0.18;\n    public static int Main(string[] args) {\n        double billTotal;\n        if (args.Length == 0) {\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n            return 1;\n        }\n        else {\n            if (! Double.TryParse(args[0], out billTotal)) {\n                Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n                return 1;\n            }\n            double tip = billTotal * tipRate;\n            Console.WriteLine();\n            Console.WriteLine(&quot;Bill total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal);\n            Console.WriteLine(&quot;Tip total/rate:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c} ({1:p1})&quot;, tip, tipRate);\n            Console.WriteLine((&quot;&quot;).PadRight(24, &#39;-&#39;));\n            Console.WriteLine(&quot;Grand total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal + tip);\n            return 0;\n        }\n    }\n}\n\n/*\n&gt;tipcalc 52.23\n\nBill total:       $52.23\nTip total/rate:    $9.40 (18.0 %)\n------------------------\nGrand total:      $61.63\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#1\">Public Class TipCalculator\n   Private Const tipRate As Double = 0.18\n   \n   Public Shared Sub Main()\n      System.Environment.ExitCode = Calculator(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   Public Shared Function Calculator(args() As String) As Integer\n      Dim billTotal As Double\n      If args.Length &lt; 2 Then\n         Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n         Return 1\n      Else\n         If Not Double.TryParse(args(1), billTotal) Then\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n            Return 1\n         End If\n         \n         Dim tip As Double = billTotal * tipRate\n         Console.WriteLine()\n         Console.WriteLine(&quot;Bill total:{1}{0,8:c}&quot;, billTotal, vbTab)\n         Console.WriteLine(&quot;Tip total/rate:{2}{0,8:c} ({1:p1})&quot;, tip, tipRate, vbTab)\n         Console.WriteLine(&quot;&quot;.PadRight(24, &quot;-&quot;c))\n         Console.WriteLine(&quot;Grand total:{1}{0,8:c}&quot;, billTotal + tip, vbTab)\n         Return 0\n      End If\n   End Function \nEnd Class \n\n&#39;Example Output:\n&#39;---------------\n&#39; &gt;tipcalc 52.23\n&#39; \n&#39; Bill total:       $52.23\n&#39; Tip total/rate:    $9.40 (18.0 %)\n&#39; ------------------------\n&#39; Grand total:      $61.63\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_Double_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.double#System_Double_ToString_\" data-linktype=\"relative-path\">ToString</a> method.  </p>\n<p> For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a tip calculator that calculates an 18% tip and uses the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#1\">using System;\n\npublic class TipCalculator {\n    private const double tipRate = 0.18;\n    public static int Main(string[] args) {\n        double billTotal;\n        if (args.Length == 0) {\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n            return 1;\n        }\n        else {\n            if (! Double.TryParse(args[0], out billTotal)) {\n                Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n                return 1;\n            }\n            double tip = billTotal * tipRate;\n            Console.WriteLine();\n            Console.WriteLine(&quot;Bill total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal);\n            Console.WriteLine(&quot;Tip total/rate:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c} ({1:p1})&quot;, tip, tipRate);\n            Console.WriteLine((&quot;&quot;).PadRight(24, &#39;-&#39;));\n            Console.WriteLine(&quot;Grand total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal + tip);\n            return 0;\n        }\n    }\n}\n\n/*\n&gt;tipcalc 52.23\n\nBill total:       $52.23\nTip total/rate:    $9.40 (18.0 %)\n------------------------\nGrand total:      $61.63\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#1\">Public Class TipCalculator\n   Private Const tipRate As Double = 0.18\n   \n   Public Shared Sub Main()\n      System.Environment.ExitCode = Calculator(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   Public Shared Function Calculator(args() As String) As Integer\n      Dim billTotal As Double\n      If args.Length &lt; 2 Then\n         Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n         Return 1\n      Else\n         If Not Double.TryParse(args(1), billTotal) Then\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n            Return 1\n         End If\n         \n         Dim tip As Double = billTotal * tipRate\n         Console.WriteLine()\n         Console.WriteLine(&quot;Bill total:{1}{0,8:c}&quot;, billTotal, vbTab)\n         Console.WriteLine(&quot;Tip total/rate:{2}{0,8:c} ({1:p1})&quot;, tip, tipRate, vbTab)\n         Console.WriteLine(&quot;&quot;.PadRight(24, &quot;-&quot;c))\n         Console.WriteLine(&quot;Grand total:{1}{0,8:c}&quot;, billTotal + tip, vbTab)\n         Return 0\n      End If\n   End Function \nEnd Class \n\n&#39;Example Output:\n&#39;---------------\n&#39; &gt;tipcalc 52.23\n&#39; \n&#39; Bill total:       $52.23\n&#39; Tip total/rate:    $9.40 (18.0 %)\n&#39; ------------------------\n&#39; Grand total:      $61.63\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.int32#System_Int32_ToString_\" data-linktype=\"relative-path\">ToString</a> method.  </p>\n<p> For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a tip calculator that calculates an 18% tip and uses the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#1\">using System;\n\npublic class TipCalculator {\n    private const double tipRate = 0.18;\n    public static int Main(string[] args) {\n        double billTotal;\n        if (args.Length == 0) {\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n            return 1;\n        }\n        else {\n            if (! Double.TryParse(args[0], out billTotal)) {\n                Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n                return 1;\n            }\n            double tip = billTotal * tipRate;\n            Console.WriteLine();\n            Console.WriteLine(&quot;Bill total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal);\n            Console.WriteLine(&quot;Tip total/rate:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c} ({1:p1})&quot;, tip, tipRate);\n            Console.WriteLine((&quot;&quot;).PadRight(24, &#39;-&#39;));\n            Console.WriteLine(&quot;Grand total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal + tip);\n            return 0;\n        }\n    }\n}\n\n/*\n&gt;tipcalc 52.23\n\nBill total:       $52.23\nTip total/rate:    $9.40 (18.0 %)\n------------------------\nGrand total:      $61.63\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#1\">Public Class TipCalculator\n   Private Const tipRate As Double = 0.18\n   \n   Public Shared Sub Main()\n      System.Environment.ExitCode = Calculator(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   Public Shared Function Calculator(args() As String) As Integer\n      Dim billTotal As Double\n      If args.Length &lt; 2 Then\n         Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n         Return 1\n      Else\n         If Not Double.TryParse(args(1), billTotal) Then\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n            Return 1\n         End If\n         \n         Dim tip As Double = billTotal * tipRate\n         Console.WriteLine()\n         Console.WriteLine(&quot;Bill total:{1}{0,8:c}&quot;, billTotal, vbTab)\n         Console.WriteLine(&quot;Tip total/rate:{2}{0,8:c} ({1:p1})&quot;, tip, tipRate, vbTab)\n         Console.WriteLine(&quot;&quot;.PadRight(24, &quot;-&quot;c))\n         Console.WriteLine(&quot;Grand total:{1}{0,8:c}&quot;, billTotal + tip, vbTab)\n         Return 0\n      End If\n   End Function \nEnd Class \n\n&#39;Example Output:\n&#39;---------------\n&#39; &gt;tipcalc 52.23\n&#39; \n&#39; Bill total:       $52.23\n&#39; Tip total/rate:    $9.40 (18.0 %)\n&#39; ------------------------\n&#39; Grand total:      $61.63\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_Int64_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.int64#System_Int64_ToString_\" data-linktype=\"relative-path\">ToString</a> method.  </p>\n<p> For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a tip calculator that calculates an 18% tip and uses the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#1\">using System;\n\npublic class TipCalculator {\n    private const double tipRate = 0.18;\n    public static int Main(string[] args) {\n        double billTotal;\n        if (args.Length == 0) {\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n            return 1;\n        }\n        else {\n            if (! Double.TryParse(args[0], out billTotal)) {\n                Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n                return 1;\n            }\n            double tip = billTotal * tipRate;\n            Console.WriteLine();\n            Console.WriteLine(&quot;Bill total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal);\n            Console.WriteLine(&quot;Tip total/rate:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c} ({1:p1})&quot;, tip, tipRate);\n            Console.WriteLine((&quot;&quot;).PadRight(24, &#39;-&#39;));\n            Console.WriteLine(&quot;Grand total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal + tip);\n            return 0;\n        }\n    }\n}\n\n/*\n&gt;tipcalc 52.23\n\nBill total:       $52.23\nTip total/rate:    $9.40 (18.0 %)\n------------------------\nGrand total:      $61.63\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#1\">Public Class TipCalculator\n   Private Const tipRate As Double = 0.18\n   \n   Public Shared Sub Main()\n      System.Environment.ExitCode = Calculator(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   Public Shared Function Calculator(args() As String) As Integer\n      Dim billTotal As Double\n      If args.Length &lt; 2 Then\n         Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n         Return 1\n      Else\n         If Not Double.TryParse(args(1), billTotal) Then\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n            Return 1\n         End If\n         \n         Dim tip As Double = billTotal * tipRate\n         Console.WriteLine()\n         Console.WriteLine(&quot;Bill total:{1}{0,8:c}&quot;, billTotal, vbTab)\n         Console.WriteLine(&quot;Tip total/rate:{2}{0,8:c} ({1:p1})&quot;, tip, tipRate, vbTab)\n         Console.WriteLine(&quot;&quot;.PadRight(24, &quot;-&quot;c))\n         Console.WriteLine(&quot;Grand total:{1}{0,8:c}&quot;, billTotal + tip, vbTab)\n         Return 0\n      End If\n   End Function \nEnd Class \n\n&#39;Example Output:\n&#39;---------------\n&#39; &gt;tipcalc 52.23\n&#39; \n&#39; Bill total:       $52.23\n&#39; Tip total/rate:    $9.40 (18.0 %)\n&#39; ------------------------\n&#39; Grand total:      $61.63\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_Object_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>value</code> is <code>null</code>, only the line terminator is written. Otherwise, the <code>ToString</code> method of <code>value</code> is called to produce its string representation, and the resulting string is written to the standard output stream.  </p>\n<p> For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the WriteLine method to display each value in an object array to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console.WriteLine#3\">This snippet ID 3 is used in multiple files: /CPP/con_writeline.cpp, /CPP/writeline_obj1.cpp. Rename the duplicate ID to make it unique, and update the reference to the snippet ID in the topic(s).\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Console.WriteLine#3\">This snippet ID 3 is used in multiple files: /CPP/con_writeline.cpp, /CPP/writeline_obj1.cpp. Rename the duplicate ID to make it unique, and update the reference to the snippet ID in the topic(s).\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Object[] values = { true, 12.632, 17908, &quot;stringValue&quot;,\n                                 &#39;a&#39;, 16907.32m };\n      foreach (var value in values)\n         Console.WriteLine(value);\n   }\n}\n// The example displays the following output:\n//    True\n//    12.632\n//    17908\n//    stringValue\n//    a\n//    16907.32\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#3\">Module Example\n   Public Sub Main()\n      Dim values() As Object = { True, 12.632, 17908, &quot;stringValue&quot;,\n                                 &quot;a&quot;c, 16907.32d }\n      For Each value In values\n         Console.WriteLine(value)\n      Next                           \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    True\n&#39;    12.632\n&#39;    17908\n&#39;    stringValue\n&#39;    a\n&#39;    16907.32\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_Single_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.single#System_Single_ToString_\" data-linktype=\"relative-path\">ToString</a> method.  </p>\n<p> For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a tip calculator that calculates an 18% tip and uses the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#1\">using System;\n\npublic class TipCalculator {\n    private const double tipRate = 0.18;\n    public static int Main(string[] args) {\n        double billTotal;\n        if (args.Length == 0) {\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n            return 1;\n        }\n        else {\n            if (! Double.TryParse(args[0], out billTotal)) {\n                Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n                return 1;\n            }\n            double tip = billTotal * tipRate;\n            Console.WriteLine();\n            Console.WriteLine(&quot;Bill total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal);\n            Console.WriteLine(&quot;Tip total/rate:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c} ({1:p1})&quot;, tip, tipRate);\n            Console.WriteLine((&quot;&quot;).PadRight(24, &#39;-&#39;));\n            Console.WriteLine(&quot;Grand total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal + tip);\n            return 0;\n        }\n    }\n}\n\n/*\n&gt;tipcalc 52.23\n\nBill total:       $52.23\nTip total/rate:    $9.40 (18.0 %)\n------------------------\nGrand total:      $61.63\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#1\">Public Class TipCalculator\n   Private Const tipRate As Double = 0.18\n   \n   Public Shared Sub Main()\n      System.Environment.ExitCode = Calculator(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   Public Shared Function Calculator(args() As String) As Integer\n      Dim billTotal As Double\n      If args.Length &lt; 2 Then\n         Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n         Return 1\n      Else\n         If Not Double.TryParse(args(1), billTotal) Then\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n            Return 1\n         End If\n         \n         Dim tip As Double = billTotal * tipRate\n         Console.WriteLine()\n         Console.WriteLine(&quot;Bill total:{1}{0,8:c}&quot;, billTotal, vbTab)\n         Console.WriteLine(&quot;Tip total/rate:{2}{0,8:c} ({1:p1})&quot;, tip, tipRate, vbTab)\n         Console.WriteLine(&quot;&quot;.PadRight(24, &quot;-&quot;c))\n         Console.WriteLine(&quot;Grand total:{1}{0,8:c}&quot;, billTotal + tip, vbTab)\n         Return 0\n      End If\n   End Function \nEnd Class \n\n&#39;Example Output:\n&#39;---------------\n&#39; &gt;tipcalc 52.23\n&#39; \n&#39; Bill total:       $52.23\n&#39; Tip total/rate:    $9.40 (18.0 %)\n&#39; ------------------------\n&#39; Grand total:      $61.63\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_String_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the specified string value, followed by the current line terminator, to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If value is <code>null</code>, only the line terminator is written to the standard output stream.  </p>\n<p> For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine\" data-linktype=\"relative-path\">WriteLine()</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example changes the line terminator from its default value of &quot;\\r<br>&quot; or <code>vbCrLf</code> to &quot;\\r<br>\\r<br>&quot; or <code>vbCrLf</code> + <code>vbCrLf</code>. It then calls the <a class=\"xref\" href=\"system.console#System_Console_WriteLine\" data-linktype=\"relative-path\">WriteLine()</a> and WriteLine methods to display output to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console.WriteLine#2\">using namespace System;\n\nvoid main()\n{\n   array&lt;String^&gt;^ lines = gcnew array&lt;String^&gt; { &quot;This is the first line.&quot;, \n                                                  &quot;This is the second line.&quot; };\n   // Output the lines using the default newline sequence.\n   Console::WriteLine(&quot;With the default new line characters:&quot;);\n   Console::WriteLine();\n   for each (String^ line in lines)\n      Console::WriteLine(line);\n\n   Console::WriteLine();\n\n   // Redefine the newline characters to double space.\n   Console::Out-&gt;NewLine = &quot;\\r<br>\\r<br>&quot;;\n   // Output the lines using the new newline sequence.\n   Console::WriteLine(&quot;With redefined new line characters:&quot;);\n   Console::WriteLine();\n   for each (String^ line in lines)\n      Console::WriteLine(line);\n}\n// The example displays the following output:\n//       With the default new line characters:\n//       \n//       This is the first line.\n//       This is the second line.\n//       \n//       With redefined new line characters:\n//       \n//       \n//       \n//       This is the first line.\n//       \n//       This is the second line.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] lines = { &quot;This is the first line.&quot;, \n                         &quot;This is the second line.&quot; };\n      // Output the lines using the default newline sequence.\n      Console.WriteLine(&quot;With the default new line characters:&quot;);\n      Console.WriteLine();\n      foreach (string line in lines)\n         Console.WriteLine(line);\n\n      Console.WriteLine();\n      \n      // Redefine the newline characters to double space.\n      Console.Out.NewLine = &quot;\\r<br>\\r<br>&quot;;\n      // Output the lines using the new newline sequence.\n      Console.WriteLine(&quot;With redefined new line characters:&quot;);\n      Console.WriteLine();\n      foreach (string line in lines)\n         Console.WriteLine(line);\n   }\n}\n// The example displays the following output:\n//       With the default new line characters:\n//       \n//       This is the first line.\n//       This is the second line.\n//       \n//       With redefined new line characters:\n//       \n//       \n//       \n//       This is the first line.\n//       \n//       This is the second line.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#2\">Module Example\n   Public Sub Main()\n      Dim lines() As String = { &quot;This is the first line.&quot;, _\n                                &quot;This is the second line.&quot; }\n      &#39; Output the lines using the default newline sequence.\n      Console.WriteLine(&quot;With the default new line characters:&quot;)\n      Console.WriteLine()\n      For Each line As String In lines\n         Console.WriteLine(line)\n      Next\n      Console.WriteLine()\n      \n      &#39; Redefine the newline characters to double space.\n      Console.Out.NewLine = vbCrLf + vbCrLf\n      &#39; Output the lines using the new newline sequence.\n      Console.WriteLine(&quot;With redefined new line characters:&quot;)\n      Console.WriteLine()\n      For Each line As String In lines\n         Console.WriteLine(line)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       With the default new line characters:\n&#39;       \n&#39;       This is the first line.\n&#39;       This is the second line.\n&#39;       \n&#39;       With redefined new line characters:\n&#39;       \n&#39;       \n&#39;       \n&#39;       This is the first line.\n&#39;       \n&#39;       This is the second line.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_UInt32_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.uint32#System_UInt32_ToString_\" data-linktype=\"relative-path\">ToString</a> method.  </p>\n<p> For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a tip calculator that calculates an 18% tip and uses the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#1\">using System;\n\npublic class TipCalculator {\n    private const double tipRate = 0.18;\n    public static int Main(string[] args) {\n        double billTotal;\n        if (args.Length == 0) {\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n            return 1;\n        }\n        else {\n            if (! Double.TryParse(args[0], out billTotal)) {\n                Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n                return 1;\n            }\n            double tip = billTotal * tipRate;\n            Console.WriteLine();\n            Console.WriteLine(&quot;Bill total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal);\n            Console.WriteLine(&quot;Tip total/rate:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c} ({1:p1})&quot;, tip, tipRate);\n            Console.WriteLine((&quot;&quot;).PadRight(24, &#39;-&#39;));\n            Console.WriteLine(&quot;Grand total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal + tip);\n            return 0;\n        }\n    }\n}\n\n/*\n&gt;tipcalc 52.23\n\nBill total:       $52.23\nTip total/rate:    $9.40 (18.0 %)\n------------------------\nGrand total:      $61.63\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#1\">Public Class TipCalculator\n   Private Const tipRate As Double = 0.18\n   \n   Public Shared Sub Main()\n      System.Environment.ExitCode = Calculator(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   Public Shared Function Calculator(args() As String) As Integer\n      Dim billTotal As Double\n      If args.Length &lt; 2 Then\n         Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n         Return 1\n      Else\n         If Not Double.TryParse(args(1), billTotal) Then\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n            Return 1\n         End If\n         \n         Dim tip As Double = billTotal * tipRate\n         Console.WriteLine()\n         Console.WriteLine(&quot;Bill total:{1}{0,8:c}&quot;, billTotal, vbTab)\n         Console.WriteLine(&quot;Tip total/rate:{2}{0,8:c} ({1:p1})&quot;, tip, tipRate, vbTab)\n         Console.WriteLine(&quot;&quot;.PadRight(24, &quot;-&quot;c))\n         Console.WriteLine(&quot;Grand total:{1}{0,8:c}&quot;, billTotal + tip, vbTab)\n         Return 0\n      End If\n   End Function \nEnd Class \n\n&#39;Example Output:\n&#39;---------------\n&#39; &gt;tipcalc 52.23\n&#39; \n&#39; Bill total:       $52.23\n&#39; Tip total/rate:    $9.40 (18.0 %)\n&#39; ------------------------\n&#39; Grand total:      $61.63\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_UInt64_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The text representation of <code>value</code> is produced by calling the <a class=\"xref\" href=\"system.uint64#System_UInt64_ToString_\" data-linktype=\"relative-path\">ToString</a> method.  </p>\n<p> For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a tip calculator that calculates an 18% tip and uses the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#1\">using System;\n\npublic class TipCalculator {\n    private const double tipRate = 0.18;\n    public static int Main(string[] args) {\n        double billTotal;\n        if (args.Length == 0) {\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n            return 1;\n        }\n        else {\n            if (! Double.TryParse(args[0], out billTotal)) {\n                Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n                return 1;\n            }\n            double tip = billTotal * tipRate;\n            Console.WriteLine();\n            Console.WriteLine(&quot;Bill total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal);\n            Console.WriteLine(&quot;Tip total/rate:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c} ({1:p1})&quot;, tip, tipRate);\n            Console.WriteLine((&quot;&quot;).PadRight(24, &#39;-&#39;));\n            Console.WriteLine(&quot;Grand total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal + tip);\n            return 0;\n        }\n    }\n}\n\n/*\n&gt;tipcalc 52.23\n\nBill total:       $52.23\nTip total/rate:    $9.40 (18.0 %)\n------------------------\nGrand total:      $61.63\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#1\">Public Class TipCalculator\n   Private Const tipRate As Double = 0.18\n   \n   Public Shared Sub Main()\n      System.Environment.ExitCode = Calculator(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   Public Shared Function Calculator(args() As String) As Integer\n      Dim billTotal As Double\n      If args.Length &lt; 2 Then\n         Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n         Return 1\n      Else\n         If Not Double.TryParse(args(1), billTotal) Then\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n            Return 1\n         End If\n         \n         Dim tip As Double = billTotal * tipRate\n         Console.WriteLine()\n         Console.WriteLine(&quot;Bill total:{1}{0,8:c}&quot;, billTotal, vbTab)\n         Console.WriteLine(&quot;Tip total/rate:{2}{0,8:c} ({1:p1})&quot;, tip, tipRate, vbTab)\n         Console.WriteLine(&quot;&quot;.PadRight(24, &quot;-&quot;c))\n         Console.WriteLine(&quot;Grand total:{1}{0,8:c}&quot;, billTotal + tip, vbTab)\n         Return 0\n      End If\n   End Function \nEnd Class \n\n&#39;Example Output:\n&#39;---------------\n&#39; &gt;tipcalc 52.23\n&#39; \n&#39; Bill total:       $52.23\n&#39; Tip total/rate:    $9.40 (18.0 %)\n&#39; ------------------------\n&#39; Grand total:      $61.63\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_String_System_Object_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(String,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (string format, object arg0);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to write using <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The format specification in <code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  </p>\n<p> The syntax of a format item is <code>{</code><em>index</em>[<code>,</code><em>alignment</em>][<code>:</code><em>formatString</em>]<code>}</code>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  </p>\n<ul>\n<li><p>For more information about the composite formatting feature supported by methods such as <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a>, and some overloads of <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, see <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">Composite Formatting</a>.  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about date and time format specifiers, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>.  </p>\n</li>\n<li><p>For more information about enumeration format specifiers, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the WriteLine method to display five randomly generated <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#6\">Module Example\n   Public Sub Main()\n      Dim rnd As New Random()\n      &#39; Generate five random Boolean values.\n      For ctr As Integer = 1 To 5\n         Dim bool As Boolean = Convert.ToBoolean(rnd.Next(0, 2))\n         Console.WriteLine(&quot;True or False: {0}&quot;, bool)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       True or False: False\n&#39;       True or False: True\n&#39;       True or False: False\n&#39;       True or False: False\n&#39;       True or False: True\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#6\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Random rnd = new Random();\n      // Generate five random Boolean values.\n      for (int ctr = 1; ctr &lt;= 5; ctr++) {\n         Boolean bln = Convert.ToBoolean(rnd.Next(0, 2));\n         Console.WriteLine(&quot;True or False: {0}&quot;, bln);\n      }\n   }\n}\n// The example displays the following output:\n//       True or False: False\n//       True or False: True\n//       True or False: False\n//       True or False: False\n//       True or False: True\n</code></pre><p> The following example calls the WriteLine method to display the current date.   Note that the format item in the <code>format</code> argument uses the &quot;D&quot; <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">standard date and time format string</a> to display the date in the long date format of the current culture.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#7\">Module Example\n   Public Sub Main()\n      Console.WriteLine(&quot;Today&#39;s date: {0:D}&quot;, DateTime.Now)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Today&#39;s date: Friday, April 1, 2016\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#7\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.WriteLine(&quot;Today&#39;s date: {0:D}&quot;, DateTime.Now);\n   }\n}\n// The example displays output like the following:\n//       Today&#39;s date: Friday, April 1, 2016\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (string format, object[] arg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of objects to write using <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> or <code>arg</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The format specification in <code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the  <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  </p>\n<p> The syntax of a format item is <code>{</code><em>index</em>[<code>,</code><em>alignment</em>][<code>:</code><em>formatString</em>]<code>}</code>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  </p>\n<ul>\n<li><p>For more information about the composite formatting feature supported by methods such as <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a>, and some overloads of <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, see <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">Composite Formatting</a>.  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about date and time format specifiers, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>.  </p>\n</li>\n<li><p>For more information about enumeration format specifiers, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.writelineFmt1#1\">// This code example demonstrates the Console.WriteLine() method.\n// Formatting for this example uses the &quot;en-US&quot; culture.\n\nusing namespace System;\n\npublic enum class Color {Yellow = 1, Blue, Green};\n\nint main() \n{\n    DateTime thisDate = DateTime::Now;\n    Console::Clear();\n\n    // Format a negative integer or floating-point number in various ways.\n    Console::WriteLine(&quot;Standard Numeric Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(C) Currency: . . . . . . . . {0:C}<br>&quot; +\n        &quot;(D) Decimal:. . . . . . . . . {0:D}<br>&quot; +\n        &quot;(E) Scientific: . . . . . . . {1:E}<br>&quot; +\n        &quot;(F) Fixed point:. . . . . . . {1:F}<br>&quot; +\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(N) Number: . . . . . . . . . {0:N}<br>&quot; +\n        &quot;(P) Percent:. . . . . . . . . {1:P}<br>&quot; +\n        &quot;(R) Round-trip: . . . . . . . {1:R}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;,\n        -123, -123.45f); \n\n    // Format the current date in various ways.\n    Console::WriteLine(&quot;Standard DateTime Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(d) Short date: . . . . . . . {0:d}<br>&quot; +\n        &quot;(D) Long date:. . . . . . . . {0:D}<br>&quot; +\n        &quot;(t) Short time: . . . . . . . {0:t}<br>&quot; +\n        &quot;(T) Long time:. . . . . . . . {0:T}<br>&quot; +\n        &quot;(f) Full date/short time: . . {0:f}<br>&quot; +\n        &quot;(F) Full date/long time:. . . {0:F}<br>&quot; +\n        &quot;(g) General date/short time:. {0:g}<br>&quot; +\n        &quot;(G) General date/long time: . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(M) Month:. . . . . . . . . . {0:M}<br>&quot; +\n        &quot;(R) RFC1123:. . . . . . . . . {0:R}<br>&quot; +\n        &quot;(s) Sortable: . . . . . . . . {0:s}<br>&quot; +\n        &quot;(u) Universal sortable: . . . {0:u} (invariant)<br>&quot; +\n        &quot;(U) Universal full date/time: {0:U}<br>&quot; +\n        &quot;(Y) Year: . . . . . . . . . . {0:Y}<br>&quot;, \n        thisDate);\n\n    // Format a Color enumeration value in various ways.\n    Console::WriteLine(&quot;Standard Enumeration Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)<br>&quot; +\n        &quot;(D) Decimal number: . . . . . {0:D}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;, \n        Color::Green);       \n\n};\n\n\n/*\nThis code example produces the following results:\n\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n(default):. . . . . . . . -123 (default = &#39;G&#39;)\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n(default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n(default):. . . . . . . . Green (default = &#39;G&#39;)\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"console.writelineFmt1#1\">// This code example demonstrates the Console.WriteLine() method.\n// Formatting for this example uses the &quot;en-US&quot; culture.\n\nusing System;\nclass Sample \n{\n    enum Color {Yellow = 1, Blue, Green};\n    static DateTime thisDate = DateTime.Now;\n\n    public static void Main() \n    {\n    Console.Clear();\n\n// Format a negative integer or floating-point number in various ways.\n    Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(C) Currency: . . . . . . . . {0:C}<br>&quot; +\n        &quot;(D) Decimal:. . . . . . . . . {0:D}<br>&quot; +\n        &quot;(E) Scientific: . . . . . . . {1:E}<br>&quot; +\n        &quot;(F) Fixed point:. . . . . . . {1:F}<br>&quot; +\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(N) Number: . . . . . . . . . {0:N}<br>&quot; +\n        &quot;(P) Percent:. . . . . . . . . {1:P}<br>&quot; +\n        &quot;(R) Round-trip: . . . . . . . {1:R}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;,\n        -123, -123.45f); \n\n// Format the current date in various ways.\n    Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(d) Short date: . . . . . . . {0:d}<br>&quot; +\n        &quot;(D) Long date:. . . . . . . . {0:D}<br>&quot; +\n        &quot;(t) Short time: . . . . . . . {0:t}<br>&quot; +\n        &quot;(T) Long time:. . . . . . . . {0:T}<br>&quot; +\n        &quot;(f) Full date/short time: . . {0:f}<br>&quot; +\n        &quot;(F) Full date/long time:. . . {0:F}<br>&quot; +\n        &quot;(g) General date/short time:. {0:g}<br>&quot; +\n        &quot;(G) General date/long time: . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(M) Month:. . . . . . . . . . {0:M}<br>&quot; +\n        &quot;(R) RFC1123:. . . . . . . . . {0:R}<br>&quot; +\n        &quot;(s) Sortable: . . . . . . . . {0:s}<br>&quot; +\n        &quot;(u) Universal sortable: . . . {0:u} (invariant)<br>&quot; +\n        &quot;(U) Universal full date/time: {0:U}<br>&quot; +\n        &quot;(Y) Year: . . . . . . . . . . {0:Y}<br>&quot;, \n        thisDate);\n\n// Format a Color enumeration value in various ways.\n    Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)<br>&quot; +\n        &quot;(D) Decimal number: . . . . . {0:D}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;, \n        Color.Green);       \n    }\n}\n/*\nThis code example produces the following results:\n\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n    (default):. . . . . . . . -123 (default = &#39;G&#39;)\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n    (default):. . . . . . . . Green (default = &#39;G&#39;)\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.writelineFmt1#1\">&#39; This code example demonstrates the Console.WriteLine() method.\n&#39; Formatting for this example uses the &quot;en-US&quot; culture.\n\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Enum Color\n      Yellow = 1\n      Blue = 2\n      Green = 3\n   End Enum &#39;Color\n   Private Shared thisDate As DateTime = DateTime.Now\n   \n   Public Shared Sub Main()\n      Console.Clear()\n\n      &#39; Format a negative integer or floating-point number in various ways.\n      Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;)\n      Console.WriteLine(&quot;(C) Currency: . . . . . . . . {0:C}&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Decimal:. . . . . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(E) Scientific: . . . . . . . {1:E}&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Fixed point:. . . . . . . {1:F}&quot; &amp; vbCrLf &amp; _\n                        &quot;(G) General:. . . . . . . . . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(N) Number: . . . . . . . . . {0:N}&quot; &amp; vbCrLf &amp; _\n                        &quot;(P) Percent:. . . . . . . . . {1:P}&quot; &amp; vbCrLf &amp; _\n                        &quot;(R) Round-trip: . . . . . . . {1:R}&quot; &amp; vbCrLf &amp; _\n                        &quot;(X) Hexadecimal:. . . . . . . {0:X}&quot; &amp; vbCrLf, _\n                        - 123, - 123.45F)\n\n      &#39; Format the current date in various ways.\n      Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;)\n      Console.WriteLine(&quot;(d) Short date: . . . . . . . {0:d}&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Long date:. . . . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(t) Short time: . . . . . . . {0:t}&quot; &amp; vbCrLf &amp; _\n                        &quot;(T) Long time:. . . . . . . . {0:T}&quot; &amp; vbCrLf &amp; _\n                        &quot;(f) Full date/short time: . . {0:f}&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Full date/long time:. . . {0:F}&quot; &amp; vbCrLf &amp; _\n                        &quot;(g) General date/short time:. {0:g}&quot; &amp; vbCrLf &amp; _\n                        &quot;(G) General date/long time: . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(M) Month:. . . . . . . . . . {0:M}&quot; &amp; vbCrLf &amp; _\n                        &quot;(R) RFC1123:. . . . . . . . . {0:R}&quot; &amp; vbCrLf &amp; _\n                        &quot;(s) Sortable: . . . . . . . . {0:s}&quot; &amp; vbCrLf &amp; _\n                        &quot;(u) Universal sortable: . . . {0:u} (invariant)&quot; &amp; vbCrLf &amp; _\n                        &quot;(U) Universal full date/time: {0:U}&quot; &amp; vbCrLf &amp; _\n                        &quot;(Y) Year: . . . . . . . . . . {0:Y}&quot; &amp; vbCrLf, _\n                        thisDate)\n\n      &#39; Format a Color enumeration value in various ways.\n      Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;)\n      Console.WriteLine(&quot;(G) General:. . . . . . . . . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Decimal number: . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(X) Hexadecimal:. . . . . . . {0:X}&quot; &amp; vbCrLf, _\n                        Color.Green)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard Numeric Format Specifiers\n&#39;(C) Currency: . . . . . . . . ($123.00)\n&#39;(D) Decimal:. . . . . . . . . -123\n&#39;(E) Scientific: . . . . . . . -1.234500E+002\n&#39;(F) Fixed point:. . . . . . . -123.45\n&#39;(G) General:. . . . . . . . . -123\n&#39;    (default):. . . . . . . . -123 (default = &#39;G&#39;)\n&#39;(N) Number: . . . . . . . . . -123.00\n&#39;(P) Percent:. . . . . . . . . -12,345.00 %\n&#39;(R) Round-trip: . . . . . . . -123.45\n&#39;(X) Hexadecimal:. . . . . . . FFFFFF85\n&#39;\n&#39;Standard DateTime Format Specifiers\n&#39;(d) Short date: . . . . . . . 6/26/2004\n&#39;(D) Long date:. . . . . . . . Saturday, June 26, 2004\n&#39;(t) Short time: . . . . . . . 8:11 PM\n&#39;(T) Long time:. . . . . . . . 8:11:04 PM\n&#39;(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n&#39;(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n&#39;(g) General date/short time:. 6/26/2004 8:11 PM\n&#39;(G) General date/long time: . 6/26/2004 8:11:04 PM\n&#39;    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n&#39;(M) Month:. . . . . . . . . . June 26\n&#39;(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n&#39;(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n&#39;(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n&#39;(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n&#39;(Y) Year: . . . . . . . . . . June, 2004\n&#39;\n&#39;Standard Enumeration Format Specifiers\n&#39;(G) General:. . . . . . . . . Green\n&#39;    (default):. . . . . . . . Green (default = &#39;G&#39;)\n&#39;(F) Flags:. . . . . . . . . . Green (flags or integer)\n&#39;(D) Decimal number: . . . . . 3\n&#39;(X) Hexadecimal:. . . . . . . 00000003\n&#39;\n</code></pre><p> The following example is a tip calculator that calculates an 18% tip and uses the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#1\">using System;\n\npublic class TipCalculator {\n    private const double tipRate = 0.18;\n    public static int Main(string[] args) {\n        double billTotal;\n        if (args.Length == 0) {\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n            return 1;\n        }\n        else {\n            if (! Double.TryParse(args[0], out billTotal)) {\n                Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n                return 1;\n            }\n            double tip = billTotal * tipRate;\n            Console.WriteLine();\n            Console.WriteLine(&quot;Bill total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal);\n            Console.WriteLine(&quot;Tip total/rate:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c} ({1:p1})&quot;, tip, tipRate);\n            Console.WriteLine((&quot;&quot;).PadRight(24, &#39;-&#39;));\n            Console.WriteLine(&quot;Grand total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal + tip);\n            return 0;\n        }\n    }\n}\n\n/*\n&gt;tipcalc 52.23\n\nBill total:       $52.23\nTip total/rate:    $9.40 (18.0 %)\n------------------------\nGrand total:      $61.63\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#1\">Public Class TipCalculator\n   Private Const tipRate As Double = 0.18\n   \n   Public Shared Sub Main()\n      System.Environment.ExitCode = Calculator(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   Public Shared Function Calculator(args() As String) As Integer\n      Dim billTotal As Double\n      If args.Length &lt; 2 Then\n         Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n         Return 1\n      Else\n         If Not Double.TryParse(args(1), billTotal) Then\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n            Return 1\n         End If\n         \n         Dim tip As Double = billTotal * tipRate\n         Console.WriteLine()\n         Console.WriteLine(&quot;Bill total:{1}{0,8:c}&quot;, billTotal, vbTab)\n         Console.WriteLine(&quot;Tip total/rate:{2}{0,8:c} ({1:p1})&quot;, tip, tipRate, vbTab)\n         Console.WriteLine(&quot;&quot;.PadRight(24, &quot;-&quot;c))\n         Console.WriteLine(&quot;Grand total:{1}{0,8:c}&quot;, billTotal + tip, vbTab)\n         Return 0\n      End If\n   End Function \nEnd Class \n\n&#39;Example Output:\n&#39;---------------\n&#39; &gt;tipcalc 52.23\n&#39; \n&#39; Bill total:       $52.23\n&#39; Tip total/rate:    $9.40 (18.0 %)\n&#39; ------------------------\n&#39; Grand total:      $61.63\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (char[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of Unicode characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position in <code>buffer</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> plus <code>count</code> specify a position that is not within <code>buffer</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method writes <code>count</code> characters starting at position <code>index</code> of <code>buffer</code> to the standard output stream.  </p>\n<p> For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_String_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(String,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (string format, object arg0, object arg1);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to write using <code>format</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to write using <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The format specification in <code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  </p>\n<p> The syntax of a format item is <code>{</code><em>index</em>[<code>,</code><em>alignment</em>][<code>:</code><em>formatString</em>]<code>}</code>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  </p>\n<ul>\n<li><p>For more information about the composite formatting feature supported by methods such as <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a>, and some overloads of <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, see <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">Composite Formatting</a>.  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about date and time format specifiers, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>.  </p>\n</li>\n<li><p>For more information about enumeration format specifiers, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.writelineFmt1#1\">// This code example demonstrates the Console.WriteLine() method.\n// Formatting for this example uses the &quot;en-US&quot; culture.\n\nusing namespace System;\n\npublic enum class Color {Yellow = 1, Blue, Green};\n\nint main() \n{\n    DateTime thisDate = DateTime::Now;\n    Console::Clear();\n\n    // Format a negative integer or floating-point number in various ways.\n    Console::WriteLine(&quot;Standard Numeric Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(C) Currency: . . . . . . . . {0:C}<br>&quot; +\n        &quot;(D) Decimal:. . . . . . . . . {0:D}<br>&quot; +\n        &quot;(E) Scientific: . . . . . . . {1:E}<br>&quot; +\n        &quot;(F) Fixed point:. . . . . . . {1:F}<br>&quot; +\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(N) Number: . . . . . . . . . {0:N}<br>&quot; +\n        &quot;(P) Percent:. . . . . . . . . {1:P}<br>&quot; +\n        &quot;(R) Round-trip: . . . . . . . {1:R}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;,\n        -123, -123.45f); \n\n    // Format the current date in various ways.\n    Console::WriteLine(&quot;Standard DateTime Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(d) Short date: . . . . . . . {0:d}<br>&quot; +\n        &quot;(D) Long date:. . . . . . . . {0:D}<br>&quot; +\n        &quot;(t) Short time: . . . . . . . {0:t}<br>&quot; +\n        &quot;(T) Long time:. . . . . . . . {0:T}<br>&quot; +\n        &quot;(f) Full date/short time: . . {0:f}<br>&quot; +\n        &quot;(F) Full date/long time:. . . {0:F}<br>&quot; +\n        &quot;(g) General date/short time:. {0:g}<br>&quot; +\n        &quot;(G) General date/long time: . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(M) Month:. . . . . . . . . . {0:M}<br>&quot; +\n        &quot;(R) RFC1123:. . . . . . . . . {0:R}<br>&quot; +\n        &quot;(s) Sortable: . . . . . . . . {0:s}<br>&quot; +\n        &quot;(u) Universal sortable: . . . {0:u} (invariant)<br>&quot; +\n        &quot;(U) Universal full date/time: {0:U}<br>&quot; +\n        &quot;(Y) Year: . . . . . . . . . . {0:Y}<br>&quot;, \n        thisDate);\n\n    // Format a Color enumeration value in various ways.\n    Console::WriteLine(&quot;Standard Enumeration Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)<br>&quot; +\n        &quot;(D) Decimal number: . . . . . {0:D}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;, \n        Color::Green);       \n\n};\n\n\n/*\nThis code example produces the following results:\n\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n(default):. . . . . . . . -123 (default = &#39;G&#39;)\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n(default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n(default):. . . . . . . . Green (default = &#39;G&#39;)\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"console.writelineFmt1#1\">// This code example demonstrates the Console.WriteLine() method.\n// Formatting for this example uses the &quot;en-US&quot; culture.\n\nusing System;\nclass Sample \n{\n    enum Color {Yellow = 1, Blue, Green};\n    static DateTime thisDate = DateTime.Now;\n\n    public static void Main() \n    {\n    Console.Clear();\n\n// Format a negative integer or floating-point number in various ways.\n    Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(C) Currency: . . . . . . . . {0:C}<br>&quot; +\n        &quot;(D) Decimal:. . . . . . . . . {0:D}<br>&quot; +\n        &quot;(E) Scientific: . . . . . . . {1:E}<br>&quot; +\n        &quot;(F) Fixed point:. . . . . . . {1:F}<br>&quot; +\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(N) Number: . . . . . . . . . {0:N}<br>&quot; +\n        &quot;(P) Percent:. . . . . . . . . {1:P}<br>&quot; +\n        &quot;(R) Round-trip: . . . . . . . {1:R}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;,\n        -123, -123.45f); \n\n// Format the current date in various ways.\n    Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(d) Short date: . . . . . . . {0:d}<br>&quot; +\n        &quot;(D) Long date:. . . . . . . . {0:D}<br>&quot; +\n        &quot;(t) Short time: . . . . . . . {0:t}<br>&quot; +\n        &quot;(T) Long time:. . . . . . . . {0:T}<br>&quot; +\n        &quot;(f) Full date/short time: . . {0:f}<br>&quot; +\n        &quot;(F) Full date/long time:. . . {0:F}<br>&quot; +\n        &quot;(g) General date/short time:. {0:g}<br>&quot; +\n        &quot;(G) General date/long time: . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(M) Month:. . . . . . . . . . {0:M}<br>&quot; +\n        &quot;(R) RFC1123:. . . . . . . . . {0:R}<br>&quot; +\n        &quot;(s) Sortable: . . . . . . . . {0:s}<br>&quot; +\n        &quot;(u) Universal sortable: . . . {0:u} (invariant)<br>&quot; +\n        &quot;(U) Universal full date/time: {0:U}<br>&quot; +\n        &quot;(Y) Year: . . . . . . . . . . {0:Y}<br>&quot;, \n        thisDate);\n\n// Format a Color enumeration value in various ways.\n    Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)<br>&quot; +\n        &quot;(D) Decimal number: . . . . . {0:D}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;, \n        Color.Green);       \n    }\n}\n/*\nThis code example produces the following results:\n\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n    (default):. . . . . . . . -123 (default = &#39;G&#39;)\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n    (default):. . . . . . . . Green (default = &#39;G&#39;)\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.writelineFmt1#1\">&#39; This code example demonstrates the Console.WriteLine() method.\n&#39; Formatting for this example uses the &quot;en-US&quot; culture.\n\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Enum Color\n      Yellow = 1\n      Blue = 2\n      Green = 3\n   End Enum &#39;Color\n   Private Shared thisDate As DateTime = DateTime.Now\n   \n   Public Shared Sub Main()\n      Console.Clear()\n\n      &#39; Format a negative integer or floating-point number in various ways.\n      Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;)\n      Console.WriteLine(&quot;(C) Currency: . . . . . . . . {0:C}&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Decimal:. . . . . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(E) Scientific: . . . . . . . {1:E}&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Fixed point:. . . . . . . {1:F}&quot; &amp; vbCrLf &amp; _\n                        &quot;(G) General:. . . . . . . . . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(N) Number: . . . . . . . . . {0:N}&quot; &amp; vbCrLf &amp; _\n                        &quot;(P) Percent:. . . . . . . . . {1:P}&quot; &amp; vbCrLf &amp; _\n                        &quot;(R) Round-trip: . . . . . . . {1:R}&quot; &amp; vbCrLf &amp; _\n                        &quot;(X) Hexadecimal:. . . . . . . {0:X}&quot; &amp; vbCrLf, _\n                        - 123, - 123.45F)\n\n      &#39; Format the current date in various ways.\n      Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;)\n      Console.WriteLine(&quot;(d) Short date: . . . . . . . {0:d}&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Long date:. . . . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(t) Short time: . . . . . . . {0:t}&quot; &amp; vbCrLf &amp; _\n                        &quot;(T) Long time:. . . . . . . . {0:T}&quot; &amp; vbCrLf &amp; _\n                        &quot;(f) Full date/short time: . . {0:f}&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Full date/long time:. . . {0:F}&quot; &amp; vbCrLf &amp; _\n                        &quot;(g) General date/short time:. {0:g}&quot; &amp; vbCrLf &amp; _\n                        &quot;(G) General date/long time: . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(M) Month:. . . . . . . . . . {0:M}&quot; &amp; vbCrLf &amp; _\n                        &quot;(R) RFC1123:. . . . . . . . . {0:R}&quot; &amp; vbCrLf &amp; _\n                        &quot;(s) Sortable: . . . . . . . . {0:s}&quot; &amp; vbCrLf &amp; _\n                        &quot;(u) Universal sortable: . . . {0:u} (invariant)&quot; &amp; vbCrLf &amp; _\n                        &quot;(U) Universal full date/time: {0:U}&quot; &amp; vbCrLf &amp; _\n                        &quot;(Y) Year: . . . . . . . . . . {0:Y}&quot; &amp; vbCrLf, _\n                        thisDate)\n\n      &#39; Format a Color enumeration value in various ways.\n      Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;)\n      Console.WriteLine(&quot;(G) General:. . . . . . . . . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Decimal number: . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(X) Hexadecimal:. . . . . . . {0:X}&quot; &amp; vbCrLf, _\n                        Color.Green)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard Numeric Format Specifiers\n&#39;(C) Currency: . . . . . . . . ($123.00)\n&#39;(D) Decimal:. . . . . . . . . -123\n&#39;(E) Scientific: . . . . . . . -1.234500E+002\n&#39;(F) Fixed point:. . . . . . . -123.45\n&#39;(G) General:. . . . . . . . . -123\n&#39;    (default):. . . . . . . . -123 (default = &#39;G&#39;)\n&#39;(N) Number: . . . . . . . . . -123.00\n&#39;(P) Percent:. . . . . . . . . -12,345.00 %\n&#39;(R) Round-trip: . . . . . . . -123.45\n&#39;(X) Hexadecimal:. . . . . . . FFFFFF85\n&#39;\n&#39;Standard DateTime Format Specifiers\n&#39;(d) Short date: . . . . . . . 6/26/2004\n&#39;(D) Long date:. . . . . . . . Saturday, June 26, 2004\n&#39;(t) Short time: . . . . . . . 8:11 PM\n&#39;(T) Long time:. . . . . . . . 8:11:04 PM\n&#39;(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n&#39;(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n&#39;(g) General date/short time:. 6/26/2004 8:11 PM\n&#39;(G) General date/long time: . 6/26/2004 8:11:04 PM\n&#39;    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n&#39;(M) Month:. . . . . . . . . . June 26\n&#39;(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n&#39;(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n&#39;(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n&#39;(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n&#39;(Y) Year: . . . . . . . . . . June, 2004\n&#39;\n&#39;Standard Enumeration Format Specifiers\n&#39;(G) General:. . . . . . . . . Green\n&#39;    (default):. . . . . . . . Green (default = &#39;G&#39;)\n&#39;(F) Flags:. . . . . . . . . . Green (flags or integer)\n&#39;(D) Decimal number: . . . . . 3\n&#39;(X) Hexadecimal:. . . . . . . 00000003\n&#39;\n</code></pre><p> The following example is a tip calculator that calculates an 18% tip and uses the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#1\">using System;\n\npublic class TipCalculator {\n    private const double tipRate = 0.18;\n    public static int Main(string[] args) {\n        double billTotal;\n        if (args.Length == 0) {\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n            return 1;\n        }\n        else {\n            if (! Double.TryParse(args[0], out billTotal)) {\n                Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n                return 1;\n            }\n            double tip = billTotal * tipRate;\n            Console.WriteLine();\n            Console.WriteLine(&quot;Bill total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal);\n            Console.WriteLine(&quot;Tip total/rate:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c} ({1:p1})&quot;, tip, tipRate);\n            Console.WriteLine((&quot;&quot;).PadRight(24, &#39;-&#39;));\n            Console.WriteLine(&quot;Grand total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal + tip);\n            return 0;\n        }\n    }\n}\n\n/*\n&gt;tipcalc 52.23\n\nBill total:       $52.23\nTip total/rate:    $9.40 (18.0 %)\n------------------------\nGrand total:      $61.63\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#1\">Public Class TipCalculator\n   Private Const tipRate As Double = 0.18\n   \n   Public Shared Sub Main()\n      System.Environment.ExitCode = Calculator(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   Public Shared Function Calculator(args() As String) As Integer\n      Dim billTotal As Double\n      If args.Length &lt; 2 Then\n         Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n         Return 1\n      Else\n         If Not Double.TryParse(args(1), billTotal) Then\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n            Return 1\n         End If\n         \n         Dim tip As Double = billTotal * tipRate\n         Console.WriteLine()\n         Console.WriteLine(&quot;Bill total:{1}{0,8:c}&quot;, billTotal, vbTab)\n         Console.WriteLine(&quot;Tip total/rate:{2}{0,8:c} ({1:p1})&quot;, tip, tipRate, vbTab)\n         Console.WriteLine(&quot;&quot;.PadRight(24, &quot;-&quot;c))\n         Console.WriteLine(&quot;Grand total:{1}{0,8:c}&quot;, billTotal + tip, vbTab)\n         Return 0\n      End If\n   End Function \nEnd Class \n\n&#39;Example Output:\n&#39;---------------\n&#39; &gt;tipcalc 52.23\n&#39; \n&#39; Bill total:       $52.23\n&#39; Tip total/rate:    $9.40 (18.0 %)\n&#39; ------------------------\n&#39; Grand total:      $61.63\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_String_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(String,Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (string format, object arg0, object arg1, object arg2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to write using <code>format</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to write using <code>format</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third object to write using <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The format specification in <code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  </p>\n<p> The syntax of a format item is <code>{</code><em>index</em>[<code>,</code><em>alignment</em>][<code>:</code><em>formatString</em>]<code>}</code>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  </p>\n<ul>\n<li><p>For more information about the composite formatting feature supported by methods such as <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a>, and some overloads of <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, see <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">Composite Formatting</a>.  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about date and time format specifiers, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>.  </p>\n</li>\n<li><p>For more information about enumeration format specifiers, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  </p>\n<pre><code class=\"lang-cpp\" name=\"console.writelineFmt1#1\">// This code example demonstrates the Console.WriteLine() method.\n// Formatting for this example uses the &quot;en-US&quot; culture.\n\nusing namespace System;\n\npublic enum class Color {Yellow = 1, Blue, Green};\n\nint main() \n{\n    DateTime thisDate = DateTime::Now;\n    Console::Clear();\n\n    // Format a negative integer or floating-point number in various ways.\n    Console::WriteLine(&quot;Standard Numeric Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(C) Currency: . . . . . . . . {0:C}<br>&quot; +\n        &quot;(D) Decimal:. . . . . . . . . {0:D}<br>&quot; +\n        &quot;(E) Scientific: . . . . . . . {1:E}<br>&quot; +\n        &quot;(F) Fixed point:. . . . . . . {1:F}<br>&quot; +\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(N) Number: . . . . . . . . . {0:N}<br>&quot; +\n        &quot;(P) Percent:. . . . . . . . . {1:P}<br>&quot; +\n        &quot;(R) Round-trip: . . . . . . . {1:R}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;,\n        -123, -123.45f); \n\n    // Format the current date in various ways.\n    Console::WriteLine(&quot;Standard DateTime Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(d) Short date: . . . . . . . {0:d}<br>&quot; +\n        &quot;(D) Long date:. . . . . . . . {0:D}<br>&quot; +\n        &quot;(t) Short time: . . . . . . . {0:t}<br>&quot; +\n        &quot;(T) Long time:. . . . . . . . {0:T}<br>&quot; +\n        &quot;(f) Full date/short time: . . {0:f}<br>&quot; +\n        &quot;(F) Full date/long time:. . . {0:F}<br>&quot; +\n        &quot;(g) General date/short time:. {0:g}<br>&quot; +\n        &quot;(G) General date/long time: . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(M) Month:. . . . . . . . . . {0:M}<br>&quot; +\n        &quot;(R) RFC1123:. . . . . . . . . {0:R}<br>&quot; +\n        &quot;(s) Sortable: . . . . . . . . {0:s}<br>&quot; +\n        &quot;(u) Universal sortable: . . . {0:u} (invariant)<br>&quot; +\n        &quot;(U) Universal full date/time: {0:U}<br>&quot; +\n        &quot;(Y) Year: . . . . . . . . . . {0:Y}<br>&quot;, \n        thisDate);\n\n    // Format a Color enumeration value in various ways.\n    Console::WriteLine(&quot;Standard Enumeration Format Specifiers&quot;);\n    Console::WriteLine(\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)<br>&quot; +\n        &quot;(D) Decimal number: . . . . . {0:D}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;, \n        Color::Green);       \n\n};\n\n\n/*\nThis code example produces the following results:\n\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n(default):. . . . . . . . -123 (default = &#39;G&#39;)\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n(default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n(default):. . . . . . . . Green (default = &#39;G&#39;)\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"console.writelineFmt1#1\">// This code example demonstrates the Console.WriteLine() method.\n// Formatting for this example uses the &quot;en-US&quot; culture.\n\nusing System;\nclass Sample \n{\n    enum Color {Yellow = 1, Blue, Green};\n    static DateTime thisDate = DateTime.Now;\n\n    public static void Main() \n    {\n    Console.Clear();\n\n// Format a negative integer or floating-point number in various ways.\n    Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(C) Currency: . . . . . . . . {0:C}<br>&quot; +\n        &quot;(D) Decimal:. . . . . . . . . {0:D}<br>&quot; +\n        &quot;(E) Scientific: . . . . . . . {1:E}<br>&quot; +\n        &quot;(F) Fixed point:. . . . . . . {1:F}<br>&quot; +\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(N) Number: . . . . . . . . . {0:N}<br>&quot; +\n        &quot;(P) Percent:. . . . . . . . . {1:P}<br>&quot; +\n        &quot;(R) Round-trip: . . . . . . . {1:R}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;,\n        -123, -123.45f); \n\n// Format the current date in various ways.\n    Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(d) Short date: . . . . . . . {0:d}<br>&quot; +\n        &quot;(D) Long date:. . . . . . . . {0:D}<br>&quot; +\n        &quot;(t) Short time: . . . . . . . {0:t}<br>&quot; +\n        &quot;(T) Long time:. . . . . . . . {0:T}<br>&quot; +\n        &quot;(f) Full date/short time: . . {0:f}<br>&quot; +\n        &quot;(F) Full date/long time:. . . {0:F}<br>&quot; +\n        &quot;(g) General date/short time:. {0:g}<br>&quot; +\n        &quot;(G) General date/long time: . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(M) Month:. . . . . . . . . . {0:M}<br>&quot; +\n        &quot;(R) RFC1123:. . . . . . . . . {0:R}<br>&quot; +\n        &quot;(s) Sortable: . . . . . . . . {0:s}<br>&quot; +\n        &quot;(u) Universal sortable: . . . {0:u} (invariant)<br>&quot; +\n        &quot;(U) Universal full date/time: {0:U}<br>&quot; +\n        &quot;(Y) Year: . . . . . . . . . . {0:Y}<br>&quot;, \n        thisDate);\n\n// Format a Color enumeration value in various ways.\n    Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;);\n    Console.WriteLine(\n        &quot;(G) General:. . . . . . . . . {0:G}<br>&quot; +\n        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)<br>&quot; +\n        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)<br>&quot; +\n        &quot;(D) Decimal number: . . . . . {0:D}<br>&quot; +\n        &quot;(X) Hexadecimal:. . . . . . . {0:X}<br>&quot;, \n        Color.Green);       \n    }\n}\n/*\nThis code example produces the following results:\n\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n    (default):. . . . . . . . -123 (default = &#39;G&#39;)\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n    (default):. . . . . . . . Green (default = &#39;G&#39;)\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"console.writelineFmt1#1\">&#39; This code example demonstrates the Console.WriteLine() method.\n&#39; Formatting for this example uses the &quot;en-US&quot; culture.\n\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Enum Color\n      Yellow = 1\n      Blue = 2\n      Green = 3\n   End Enum &#39;Color\n   Private Shared thisDate As DateTime = DateTime.Now\n   \n   Public Shared Sub Main()\n      Console.Clear()\n\n      &#39; Format a negative integer or floating-point number in various ways.\n      Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;)\n      Console.WriteLine(&quot;(C) Currency: . . . . . . . . {0:C}&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Decimal:. . . . . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(E) Scientific: . . . . . . . {1:E}&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Fixed point:. . . . . . . {1:F}&quot; &amp; vbCrLf &amp; _\n                        &quot;(G) General:. . . . . . . . . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(N) Number: . . . . . . . . . {0:N}&quot; &amp; vbCrLf &amp; _\n                        &quot;(P) Percent:. . . . . . . . . {1:P}&quot; &amp; vbCrLf &amp; _\n                        &quot;(R) Round-trip: . . . . . . . {1:R}&quot; &amp; vbCrLf &amp; _\n                        &quot;(X) Hexadecimal:. . . . . . . {0:X}&quot; &amp; vbCrLf, _\n                        - 123, - 123.45F)\n\n      &#39; Format the current date in various ways.\n      Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;)\n      Console.WriteLine(&quot;(d) Short date: . . . . . . . {0:d}&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Long date:. . . . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(t) Short time: . . . . . . . {0:t}&quot; &amp; vbCrLf &amp; _\n                        &quot;(T) Long time:. . . . . . . . {0:T}&quot; &amp; vbCrLf &amp; _\n                        &quot;(f) Full date/short time: . . {0:f}&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Full date/long time:. . . {0:F}&quot; &amp; vbCrLf &amp; _\n                        &quot;(g) General date/short time:. {0:g}&quot; &amp; vbCrLf &amp; _\n                        &quot;(G) General date/long time: . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(M) Month:. . . . . . . . . . {0:M}&quot; &amp; vbCrLf &amp; _\n                        &quot;(R) RFC1123:. . . . . . . . . {0:R}&quot; &amp; vbCrLf &amp; _\n                        &quot;(s) Sortable: . . . . . . . . {0:s}&quot; &amp; vbCrLf &amp; _\n                        &quot;(u) Universal sortable: . . . {0:u} (invariant)&quot; &amp; vbCrLf &amp; _\n                        &quot;(U) Universal full date/time: {0:U}&quot; &amp; vbCrLf &amp; _\n                        &quot;(Y) Year: . . . . . . . . . . {0:Y}&quot; &amp; vbCrLf, _\n                        thisDate)\n\n      &#39; Format a Color enumeration value in various ways.\n      Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;)\n      Console.WriteLine(&quot;(G) General:. . . . . . . . . {0:G}&quot; &amp; vbCrLf &amp; _\n                        &quot;    (default):. . . . . . . . {0} (default = &#39;G&#39;)&quot; &amp; vbCrLf &amp; _\n                        &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)&quot; &amp; vbCrLf &amp; _\n                        &quot;(D) Decimal number: . . . . . {0:D}&quot; &amp; vbCrLf &amp; _\n                        &quot;(X) Hexadecimal:. . . . . . . {0:X}&quot; &amp; vbCrLf, _\n                        Color.Green)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;Standard Numeric Format Specifiers\n&#39;(C) Currency: . . . . . . . . ($123.00)\n&#39;(D) Decimal:. . . . . . . . . -123\n&#39;(E) Scientific: . . . . . . . -1.234500E+002\n&#39;(F) Fixed point:. . . . . . . -123.45\n&#39;(G) General:. . . . . . . . . -123\n&#39;    (default):. . . . . . . . -123 (default = &#39;G&#39;)\n&#39;(N) Number: . . . . . . . . . -123.00\n&#39;(P) Percent:. . . . . . . . . -12,345.00 %\n&#39;(R) Round-trip: . . . . . . . -123.45\n&#39;(X) Hexadecimal:. . . . . . . FFFFFF85\n&#39;\n&#39;Standard DateTime Format Specifiers\n&#39;(d) Short date: . . . . . . . 6/26/2004\n&#39;(D) Long date:. . . . . . . . Saturday, June 26, 2004\n&#39;(t) Short time: . . . . . . . 8:11 PM\n&#39;(T) Long time:. . . . . . . . 8:11:04 PM\n&#39;(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n&#39;(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n&#39;(g) General date/short time:. 6/26/2004 8:11 PM\n&#39;(G) General date/long time: . 6/26/2004 8:11:04 PM\n&#39;    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = &#39;G&#39;)\n&#39;(M) Month:. . . . . . . . . . June 26\n&#39;(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n&#39;(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n&#39;(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n&#39;(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n&#39;(Y) Year: . . . . . . . . . . June, 2004\n&#39;\n&#39;Standard Enumeration Format Specifiers\n&#39;(G) General:. . . . . . . . . Green\n&#39;    (default):. . . . . . . . Green (default = &#39;G&#39;)\n&#39;(F) Flags:. . . . . . . . . . Green (flags or integer)\n&#39;(D) Decimal number: . . . . . 3\n&#39;(X) Hexadecimal:. . . . . . . 00000003\n&#39;\n</code></pre><p> The following example is a tip calculator that calculates an 18% tip and uses the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Console.WriteLine#1\">using System;\n\npublic class TipCalculator {\n    private const double tipRate = 0.18;\n    public static int Main(string[] args) {\n        double billTotal;\n        if (args.Length == 0) {\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n            return 1;\n        }\n        else {\n            if (! Double.TryParse(args[0], out billTotal)) {\n                Console.WriteLine(&quot;usage: TIPCALC total&quot;);\n                return 1;\n            }\n            double tip = billTotal * tipRate;\n            Console.WriteLine();\n            Console.WriteLine(&quot;Bill total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal);\n            Console.WriteLine(&quot;Tip total/rate:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c} ({1:p1})&quot;, tip, tipRate);\n            Console.WriteLine((&quot;&quot;).PadRight(24, &#39;-&#39;));\n            Console.WriteLine(&quot;Grand total:&nbsp;&nbsp;&nbsp;&nbsp;{0,8:c}&quot;, billTotal + tip);\n            return 0;\n        }\n    }\n}\n\n/*\n&gt;tipcalc 52.23\n\nBill total:       $52.23\nTip total/rate:    $9.40 (18.0 %)\n------------------------\nGrand total:      $61.63\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Console.WriteLine#1\">Public Class TipCalculator\n   Private Const tipRate As Double = 0.18\n   \n   Public Shared Sub Main()\n      System.Environment.ExitCode = Calculator(System.Environment.GetCommandLineArgs())\n   End Sub\n   \n   Public Shared Function Calculator(args() As String) As Integer\n      Dim billTotal As Double\n      If args.Length &lt; 2 Then\n         Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n         Return 1\n      Else\n         If Not Double.TryParse(args(1), billTotal) Then\n            Console.WriteLine(&quot;usage: TIPCALC total&quot;)\n            Return 1\n         End If\n         \n         Dim tip As Double = billTotal * tipRate\n         Console.WriteLine()\n         Console.WriteLine(&quot;Bill total:{1}{0,8:c}&quot;, billTotal, vbTab)\n         Console.WriteLine(&quot;Tip total/rate:{2}{0,8:c} ({1:p1})&quot;, tip, tipRate, vbTab)\n         Console.WriteLine(&quot;&quot;.PadRight(24, &quot;-&quot;c))\n         Console.WriteLine(&quot;Grand total:{1}{0,8:c}&quot;, billTotal + tip, vbTab)\n         Return 0\n      End If\n   End Function \nEnd Class \n\n&#39;Example Output:\n&#39;---------------\n&#39; &gt;tipcalc 52.23\n&#39; \n&#39; Bill total:       $52.23\n&#39; Tip total/rate:    $9.40 (18.0 %)\n&#39; ------------------------\n&#39; Grand total:      $61.63\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Console_WriteLine_System_String_System_Object_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Console_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(String,Object,Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg0</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to write using <code>format</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to write using <code>format</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third object to write using <code>format</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arg3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fourth object to write using <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The format specification in <code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This API is not CLS-compliant. The CLS-compliant alternative is [Console.WriteLine(String,â€‚Object&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;. The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.WriteLine(String,â€‚Object&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;.  </p>\n</div>\n<p> This method uses the <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">composite formatting feature</a> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  </p>\n<p> The <code>format</code> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  </p>\n<p> The syntax of a format item is <code>{</code><em>index</em>[<code>,</code><em>alignment</em>][<code>:</code><em>formatString</em>]<code>}</code>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  </p>\n<ul>\n<li><p>For more information about the composite formatting feature supported by methods such as <a class=\"xref\" href=\"system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>, <a class=\"xref\" href=\"system.text.stringbuilder#System_Text_StringBuilder_AppendFormat_\" data-linktype=\"relative-path\">AppendFormat</a>, and some overloads of <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, see <a href=\"../Topic/Composite%20Formatting.md\" data-linktype=\"relative-path\">Composite Formatting</a>.  </p>\n</li>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about date and time format specifiers, see <a href=\"../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Date and Time Format Strings</a> and <a href=\"../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Date and Time Format Strings</a>.  </p>\n</li>\n<li><p>For more information about enumeration format specifiers, see <a href=\"../Topic/Enumeration%20Format%20Strings.md\" data-linktype=\"relative-path\">Enumeration Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>For more information about the line terminator, see the Remarks section of the <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method that takes no parameters.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of variable arguments with the WriteLine method. The method is called with a composite format string and five format items.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Console.WriteLine#5\">using namespace System;\n\nint CountLetters(String^ value);\nint CountWhitespace(String^ value);\n\nvoid main()\n{\n   String^ value = &quot;This is a test string.&quot;;\n   \n   \n   Console::WriteLine(&quot;The string &#39;{0}&#39; consists of:&quot; +\n                      &quot;{4}{1} characters{4}{2} letters{4}&quot; +\n                      &quot;{3} whitespace characters&quot;, \n                      value, value-&gt;Length, CountLetters(value), \n                      CountWhitespace(value), Environment::NewLine);\n}\n\nint CountLetters(String^ value)\n{\n   int nLetters = 0;\n   for each (Char ch in value) {\n      if (Char::IsLetter(ch))\n         nLetters++;\n   }\n   return nLetters;\n}\n\nint CountWhitespace(String^ value)\n{\n   int nWhitespace = 0;\n   for each (Char ch in value) {\n      if (Char::IsWhiteSpace(ch))\n         nWhitespace++;\n   }\n   return nWhitespace;\n}\n// The example displays the following output:\n//    The string &#39;This is a test string.&#39; consists of:\n//    22 characters\n//    17 letters\n//    4 whitespace characters\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Console_CancelKeyPress\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CancelKeyPress</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when the <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> modifier key (Ctrl) and either the <a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static event ConsoleCancelEventHandler CancelKeyPress;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This event is used in conjunction with <a class=\"xref\" href=\"system.consolecanceleventhandler\" data-linktype=\"relative-path\">System.ConsoleCancelEventHandler</a> and <a class=\"xref\" href=\"system.consolecanceleventargs\" data-linktype=\"relative-path\">System.ConsoleCancelEventArgs</a>. The CancelKeyPress event enables a console application to intercept the Ctrl+C signal so the event handler can decide whether to continue executing or terminate. For more information about handling events, see <a href=\"../Topic/Handling%20and%20Raising%20Events.md\" data-linktype=\"relative-path\">Handling and Raising Events</a>.  </p>\n<p> When the user presses either Ctrl+C or Ctrl+Break, the CancelKeyPress event is fired and the application&#39;s <a class=\"xref\" href=\"system.consolecanceleventhandler\" data-linktype=\"relative-path\">ConsoleCancelEventHandler</a> event handler is executed. The event handler is passed a <a class=\"xref\" href=\"system.consolecanceleventargs\" data-linktype=\"relative-path\">ConsoleCancelEventArgs</a> object that has two useful properties:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.consolecanceleventargs#System_ConsoleCancelEventArgs_SpecialKey_\" data-linktype=\"relative-path\">SpecialKey</a>, which allows you to determine whether the handler was invoked as a result of the user pressing Ctrl+C (the property value is <a class=\"xref\" href=\"system.consolespecialkey\" data-linktype=\"relative-path\">System.ConsoleSpecialKey</a>) or Ctrl+Break (the property value is <a class=\"xref\" href=\"system.consolespecialkey\" data-linktype=\"relative-path\">System.ConsoleSpecialKey</a>).  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.consolecanceleventargs#System_ConsoleCancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a>, which allows you to determine how to your application should respond to the user pressing Ctrl+C or Ctrl+Break. By default, the <a class=\"xref\" href=\"system.consolecanceleventargs#System_ConsoleCancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> property is <code>false</code>, which causes program execution to terminate when the event handler exits. Changing its property to <code>true</code> specifies that the application should continue to execute.  </p>\n</li>\n</ul>\n<div class=\"TIP\"><h5>Tip</h5><p> If your application has simple requirements, you can use the <a class=\"xref\" href=\"system.console#System_Console_TreatControlCAsInput_\" data-linktype=\"relative-path\">TreatControlCAsInput</a> property instead of this event. By setting this property to <code>false</code>, you can ensure that your application always exits if the user presses Ctrl+C. By setting it to <code>true</code>, you can ensure that pressing Ctrl+C will not terminate the application.  </p>\n</div>\n<p> The event handler for this event is executed on a thread pool thread.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how the CancelKeyPress event is used. When you press Ctrl+C, the read operation is interrupted and the <code>myHandler</code> event handler is invoked. Upon entry to the event handler, the <a class=\"xref\" href=\"system.consolecanceleventargs#System_ConsoleCancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> property is <code>false</code>, which means that the current process will terminate when the event handler terminates. However, the event handler sets the <a class=\"xref\" href=\"system.consolecanceleventargs#System_ConsoleCancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> property to <code>true</code>, which means that the process will not terminate and the read operation will resume.  </p>\n<pre><code class=\"lang-cs\" name=\"console.cancelkeypress#1\">using System;\n\nclass Sample \n{\n    public static void Main()\n    {\n        ConsoleKeyInfo cki;\n\n        Console.Clear();\n\n        // Establish an event handler to process key press events.\n        Console.CancelKeyPress += new ConsoleCancelEventHandler(myHandler);\n        while (true) {\n            Console.Write(&quot;Press any key, or &#39;X&#39; to quit, or &quot;);\n            Console.WriteLine(&quot;CTRL+C to interrupt the read operation:&quot;);\n\n            // Start a console read operation. Do not display the input.\n            cki = Console.ReadKey(true);\n\n            // Announce the name of the key that was pressed .\n            Console.WriteLine(&quot;  Key pressed: {0}<br>&quot;, cki.Key);\n\n            // Exit if the user pressed the &#39;X&#39; key.\n            if (cki.Key == ConsoleKey.X) break;\n        }\n    }\n\n    protected static void myHandler(object sender, ConsoleCancelEventArgs args)\n    {\n        Console.WriteLine(&quot;<br>The read operation has been interrupted.&quot;);\n\n        Console.WriteLine(&quot;  Key pressed: {0}&quot;, args.SpecialKey);\n\n        Console.WriteLine(&quot;  Cancel property: {0}&quot;, args.Cancel);\n\n        // Set the Cancel property to true to prevent the process from terminating.\n        Console.WriteLine(&quot;Setting the Cancel property to true...&quot;);\n        args.Cancel = true;\n\n        // Announce the new value of the Cancel property.\n        Console.WriteLine(&quot;  Cancel property: {0}&quot;, args.Cancel);\n        Console.WriteLine(&quot;The read operation will resume...<br>&quot;);\n    }\n}\n// The example displays output similar to the follwoing:\n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//      Key pressed: J\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//      Key pressed: Enter\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    \n//    The read operation has been interrupted.\n//      Key pressed: ControlC\n//      Cancel property: False\n//    Setting the Cancel property to true...\n//      Cancel property: True\n//    The read operation will resume...\n//    \n//      Key pressed: Q\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//      Key pressed: X\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.cancelkeypress#1\">using namespace System;\n\nvoid OnCancelKeyPressed(Object^ sender, \n    ConsoleCancelEventArgs^ args)\n{\n    Console::WriteLine(&quot;{0}The read operation has been interrupted.&quot;,\n        Environment::NewLine);\n\n    Console::WriteLine(&quot;  Key pressed: {0}&quot;, args-&gt;SpecialKey);\n\n    Console::WriteLine(&quot;  Cancel property: {0}&quot;, args-&gt;Cancel);\n\n    // Set the Cancel property to true to prevent the process from \n    // terminating.\n    Console::WriteLine(&quot;Setting the Cancel property to true...&quot;);\n    args-&gt;Cancel = true;\n\n    // Announce the new value of the Cancel property.\n    Console::WriteLine(&quot;  Cancel property: {0}&quot;, args-&gt;Cancel);\n    Console::WriteLine(&quot;The read operation will resume...{0}&quot;,\n        Environment::NewLine);\n}\n\nint main()\n{       \n    // Clear the screen.\n    Console::Clear();\n\n    // Establish an event handler to process key press events.\n    Console::CancelKeyPress += \n        gcnew ConsoleCancelEventHandler(OnCancelKeyPressed);\n\n    while (true)\n    {\n        // Prompt the user.\n        Console::Write(&quot;Press any key, or &#39;X&#39; to quit, or &quot;);\n        Console::WriteLine(&quot;CTRL+C to interrupt the read operation:&quot;);\n\n        // Start a console read operation. Do not display the input.\n        ConsoleKeyInfo^ keyInfo = Console::ReadKey(true);\n\n        // Announce the name of the key that was pressed .\n        Console::WriteLine(&quot;  Key pressed: {0}{1}&quot;, keyInfo-&gt;Key, \n            Environment::NewLine);\n\n        // Exit if the user pressed the &#39;X&#39; key.\n        if (keyInfo-&gt;Key == ConsoleKey::X)\n        {\n            break;\n        }\n    }\n}\n// The example displays output similar to the following:\n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    Key pressed: J\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    Key pressed: Enter\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    \n//    The read operation has been interrupted.\n//    Key pressed: ControlC\n//    Cancel property: False\n//    Setting the Cancel property to true...\n//    Cancel property: True\n//    The read operation will resume...\n//    \n//    Key pressed: Q\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    Key pressed: X\n</code></pre><pre><code class=\"lang-vb\" name=\"console.cancelkeypress#1\">Class Sample\n    Public Shared Sub Main() \n        Dim cki As ConsoleKeyInfo\n        \n        Console.Clear()\n        \n        &#39; Establish an event handler to process key press events.\n        AddHandler Console.CancelKeyPress, AddressOf myHandler\n\n        While True\n            Console.Write(&quot;Press any key, or &#39;X&#39; to quit, or &quot;)\n            Console.WriteLine(&quot;CTRL+C to interrupt the read operation:&quot;)\n            \n            &#39; Start a console read operation. Do not display the input.\n            cki = Console.ReadKey(True)\n            \n            &#39; Announce the name of the key that was pressed .\n            Console.WriteLine(&quot;  Key pressed: {0}&quot; &amp; vbCrLf, cki.Key)\n            \n            &#39; Exit if the user pressed the &#39;X&#39; key.\n            If cki.Key = ConsoleKey.X Then Exit While\n        End While\n    End Sub\n\n    Protected Shared Sub myHandler(ByVal sender As Object, _\n                                   ByVal args As ConsoleCancelEventArgs) \n        Console.WriteLine(vbCrLf &amp; &quot;The read operation has been interrupted.&quot;)\n        \n        Console.WriteLine(&quot;  Key pressed: {0}&quot;, args.SpecialKey)\n        \n        Console.WriteLine(&quot;  Cancel property: {0}&quot;, args.Cancel)\n        \n        &#39; Set the Cancel property to true to prevent the process from terminating.\n        Console.WriteLine(&quot;Setting the Cancel property to true...&quot;)\n        args.Cancel = True\n        \n        &#39; Announce the new value of the Cancel property.\n        Console.WriteLine(&quot;  Cancel property: {0}&quot;, args.Cancel)\n        Console.WriteLine(&quot;The read operation will resume...&quot; &amp; vbCrLf)\n    End Sub\nEnd Class\n&#39; The example diplays output similar to the following:\n&#39;    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n&#39;     Key pressed: J\n&#39;    \n&#39;    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n&#39;     Key pressed: Enter\n&#39;    \n&#39;    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n&#39;    \n&#39;    The read operation has been interrupted.\n&#39;     Key pressed: ControlC\n&#39;     Cancel property: False\n&#39;    Setting the Cancel property to true...\n&#39;     Cancel property: True\n&#39;    The read operation will resume...\n&#39;    \n&#39;     Key pressed: Q\n&#39;    \n&#39;    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n&#39;     Key pressed: X\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Console.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Console.yml\">\r\n<meta name=\"APIName\" content=\"System.Console\">\r\n<meta name=\"APIName\" content=\"System.Console.BackgroundColor\">\r\n<meta name=\"APIName\" content=\"System.Console.Beep\">\r\n<meta name=\"APIName\" content=\"System.Console.BufferHeight\">\r\n<meta name=\"APIName\" content=\"System.Console.BufferWidth\">\r\n<meta name=\"APIName\" content=\"System.Console.CancelKeyPress\">\r\n<meta name=\"APIName\" content=\"System.Console.add_CancelKeyPress\">\r\n<meta name=\"APIName\" content=\"System.Console.remove_CancelKeyPress\">\r\n<meta name=\"APIName\" content=\"System.Console.CapsLock\">\r\n<meta name=\"APIName\" content=\"System.Console.Clear\">\r\n<meta name=\"APIName\" content=\"System.Console.CursorLeft\">\r\n<meta name=\"APIName\" content=\"System.Console.CursorSize\">\r\n<meta name=\"APIName\" content=\"System.Console.CursorTop\">\r\n<meta name=\"APIName\" content=\"System.Console.CursorVisible\">\r\n<meta name=\"APIName\" content=\"System.Console.Error\">\r\n<meta name=\"APIName\" content=\"System.Console.ForegroundColor\">\r\n<meta name=\"APIName\" content=\"System.Console.In\">\r\n<meta name=\"APIName\" content=\"System.Console.InputEncoding\">\r\n<meta name=\"APIName\" content=\"System.Console.IsErrorRedirected\">\r\n<meta name=\"APIName\" content=\"System.Console.IsInputRedirected\">\r\n<meta name=\"APIName\" content=\"System.Console.IsOutputRedirected\">\r\n<meta name=\"APIName\" content=\"System.Console.KeyAvailable\">\r\n<meta name=\"APIName\" content=\"System.Console.LargestWindowHeight\">\r\n<meta name=\"APIName\" content=\"System.Console.LargestWindowWidth\">\r\n<meta name=\"APIName\" content=\"System.Console.MoveBufferArea\">\r\n<meta name=\"APIName\" content=\"System.Console.NumberLock\">\r\n<meta name=\"APIName\" content=\"System.Console.OpenStandardError\">\r\n<meta name=\"APIName\" content=\"System.Console.OpenStandardInput\">\r\n<meta name=\"APIName\" content=\"System.Console.OpenStandardOutput\">\r\n<meta name=\"APIName\" content=\"System.Console.Out\">\r\n<meta name=\"APIName\" content=\"System.Console.OutputEncoding\">\r\n<meta name=\"APIName\" content=\"System.Console.Read\">\r\n<meta name=\"APIName\" content=\"System.Console.ReadKey\">\r\n<meta name=\"APIName\" content=\"System.Console.ReadLine\">\r\n<meta name=\"APIName\" content=\"System.Console.ResetColor\">\r\n<meta name=\"APIName\" content=\"System.Console.SetBufferSize\">\r\n<meta name=\"APIName\" content=\"System.Console.SetCursorPosition\">\r\n<meta name=\"APIName\" content=\"System.Console.SetError\">\r\n<meta name=\"APIName\" content=\"System.Console.SetIn\">\r\n<meta name=\"APIName\" content=\"System.Console.SetOut\">\r\n<meta name=\"APIName\" content=\"System.Console.SetWindowPosition\">\r\n<meta name=\"APIName\" content=\"System.Console.SetWindowSize\">\r\n<meta name=\"APIName\" content=\"System.Console.Title\">\r\n<meta name=\"APIName\" content=\"System.Console.TreatControlCAsInput\">\r\n<meta name=\"APIName\" content=\"System.Console.WindowHeight\">\r\n<meta name=\"APIName\" content=\"System.Console.WindowLeft\">\r\n<meta name=\"APIName\" content=\"System.Console.WindowTop\">\r\n<meta name=\"APIName\" content=\"System.Console.WindowWidth\">\r\n<meta name=\"APIName\" content=\"System.Console.Write\">\r\n<meta name=\"APIName\" content=\"System.Console.WriteLine\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c373fda9-59fb-2c94-0ea4-3993d37352c7\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the standard input, output, and error streams for console applications. This class cannot be inherited.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Console\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Console.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Console.yml","open_to_public_contributors":true,"api_name":["System.Console","System.Console.BackgroundColor","System.Console.Beep","System.Console.BufferHeight","System.Console.BufferWidth","System.Console.CancelKeyPress","System.Console.add_CancelKeyPress","System.Console.remove_CancelKeyPress","System.Console.CapsLock","System.Console.Clear","System.Console.CursorLeft","System.Console.CursorSize","System.Console.CursorTop","System.Console.CursorVisible","System.Console.Error","System.Console.ForegroundColor","System.Console.In","System.Console.InputEncoding","System.Console.IsErrorRedirected","System.Console.IsInputRedirected","System.Console.IsOutputRedirected","System.Console.KeyAvailable","System.Console.LargestWindowHeight","System.Console.LargestWindowWidth","System.Console.MoveBufferArea","System.Console.NumberLock","System.Console.OpenStandardError","System.Console.OpenStandardInput","System.Console.OpenStandardOutput","System.Console.Out","System.Console.OutputEncoding","System.Console.Read","System.Console.ReadKey","System.Console.ReadLine","System.Console.ResetColor","System.Console.SetBufferSize","System.Console.SetCursorPosition","System.Console.SetError","System.Console.SetIn","System.Console.SetOut","System.Console.SetWindowPosition","System.Console.SetWindowSize","System.Console.Title","System.Console.TreatControlCAsInput","System.Console.WindowHeight","System.Console.WindowLeft","System.Console.WindowTop","System.Console.WindowWidth","System.Console.Write","System.Console.WriteLine"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Console","System::Console","System.Console.BackgroundColor","System::Console::BackgroundColor","System.Console.Beep","System::Console::Beep","System.Console.BufferHeight","System::Console::BufferHeight","System.Console.BufferWidth","System::Console::BufferWidth","System.Console.CancelKeyPress","System::Console::CancelKeyPress","System.Console.CapsLock","System::Console::CapsLock","System.Console.Clear","System::Console::Clear","System.Console.CursorLeft","System::Console::CursorLeft","System.Console.CursorSize","System::Console::CursorSize","System.Console.CursorTop","System::Console::CursorTop","System.Console.CursorVisible","System::Console::CursorVisible","System.Console.Error","System::Console::Error","System.Console.ForegroundColor","System::Console::ForegroundColor","System.Console.In","System::Console::In","System.Console.InputEncoding","System::Console::InputEncoding","System.Console.IsErrorRedirected","System::Console::IsErrorRedirected","System.Console.IsInputRedirected","System::Console::IsInputRedirected","System.Console.IsOutputRedirected","System::Console::IsOutputRedirected","System.Console.KeyAvailable","System::Console::KeyAvailable","System.Console.LargestWindowHeight","System::Console::LargestWindowHeight","System.Console.LargestWindowWidth","System::Console::LargestWindowWidth","System.Console.MoveBufferArea","System::Console::MoveBufferArea","System.Console.NumberLock","System::Console::NumberLock","System.Console.OpenStandardError","System::Console::OpenStandardError","System.Console.OpenStandardInput","System::Console::OpenStandardInput","System.Console.OpenStandardOutput","System::Console::OpenStandardOutput","System.Console.Out","System::Console::Out","System.Console.OutputEncoding","System::Console::OutputEncoding","System.Console.Read","System::Console::Read","System.Console.ReadKey","System::Console::ReadKey","System.Console.ReadLine","System::Console::ReadLine","System.Console.ResetColor","System::Console::ResetColor","System.Console.SetBufferSize","System::Console::SetBufferSize","System.Console.SetCursorPosition","System::Console::SetCursorPosition","System.Console.SetError","System::Console::SetError","System.Console.SetIn","System::Console::SetIn","System.Console.SetOut","System::Console::SetOut","System.Console.SetWindowPosition","System::Console::SetWindowPosition","System.Console.SetWindowSize","System::Console::SetWindowSize","System.Console.Title","System::Console::Title","System.Console.TreatControlCAsInput","System::Console::TreatControlCAsInput","System.Console.WindowHeight","System::Console::WindowHeight","System.Console.WindowLeft","System::Console::WindowLeft","System.Console.WindowTop","System::Console::WindowTop","System.Console.WindowWidth","System::Console::WindowWidth","System.Console.Write","System::Console::Write","System.Console.WriteLine","System::Console::WriteLine"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c373fda9-59fb-2c94-0ea4-3993d37352c7","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Console.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Console class | Microsoft Docs","_op_ogTitle":"Console class","description":"Represents the standard input, output, and error streams for console applications. This class cannot be inherited.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Console","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.console","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.console","fileRelativePath":"System.Console.html"},"themesRelativePathToOutputRoot":"_themes/"}