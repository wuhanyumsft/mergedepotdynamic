{"content":"    \r\n    <h1 id=\"System_Management_MethodData\">\r\n      <span class=\"lang-csharp\">MethodData</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Contains information about a WMI method.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class MethodData</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">MethodData</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_MethodData_InParameters\" data-linktype=\"self-bookmark\">InParameters</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the input parameters to the method. Each parameter is described as a property in the object. If a parameter is both in and out, it appears in both the InParameters and <span class=\"xref\">stem.Management.MethodData.OutParameters*</span> properties.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_MethodData_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_MethodData_Origin\" data-linktype=\"self-bookmark\">Origin</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the name of the management class in which the method was first introduced in the class inheritance hierarchy.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_MethodData_OutParameters\" data-linktype=\"self-bookmark\">OutParameters</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the output parameters to the method. Each parameter is described as a property in the object. If a parameter is both in and out, it will appear in both the <span class=\"xref\">stem.Management.MethodData.InParameters*</span> and OutParameters properties.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_MethodData_Qualifiers\" data-linktype=\"self-bookmark\">Qualifiers</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of qualifiers defined in the method. Each element is of type <a class=\"xref\" href=\"system.management.qualifierdata\" data-linktype=\"relative-path\">QualifierData</a> and contains information such as the <em>qualifier</em> name, value, and <em>flavor</em>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Management_MethodData_InParameters\">\r\n    \r\n            <a id=\"System_Management_MethodData_InParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InParameters</div>        \r\n          </div>\r\n    \r\n            <p>Gets the input parameters to the method. Each parameter is described as a property in the object. If a parameter is both in and out, it appears in both the InParameters and <span class=\"xref\">stem.Management.MethodData.OutParameters*</span> properties.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Management.ManagementBaseObject InParameters { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.managementbaseobject\" data-linktype=\"relative-path\">ManagementBaseObject</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.management.managementbaseobject\" data-linktype=\"relative-path\">ManagementBaseObject</a> containing the input parameters to the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each parameter in the object should have an ID qualifier, identifying the order of the parameters in the method call.  </p>\n<h2 id=\"property-value\">Property Value</h2>\n<p> A <a class=\"xref\" href=\"system.management.managementbaseobject\" data-linktype=\"relative-path\">ManagementBaseObject</a> containing all the input parameters to the method.  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example lists information about the <strong>Win32_Process.Create</strong> method using the <a class=\"xref\" href=\"system.management.methoddata\" data-linktype=\"relative-path\">MethodData</a> class. For more information about the <strong>Win32_Process</strong> class, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"wminet_MethodData_InParameters#1\">using System;\nusing System.Management;\n\npublic class Sample \n{    \n    public static void Main() \n    {\n\n        // Get the WMI class\n        ManagementClass processClass = \n            new ManagementClass(&quot;Win32_Process&quot;);\n        processClass.Options.UseAmendedQualifiers = true;\n\n        // Get the methods in the class\n        MethodDataCollection methods =\n            processClass.Methods;\n\n        // display the method names\n        Console.WriteLine(&quot;Method Name: &quot;);\n        foreach (MethodData method in methods)\n        {\n            if(method.Name.Equals(&quot;Create&quot;))\n            {\n                Console.WriteLine(method.Name);\n                Console.WriteLine(&quot;Description: &quot; +\n                    method.Qualifiers[&quot;Description&quot;].Value);\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;In-parameters: &quot;);\n                foreach(PropertyData i in \n                    method.InParameters.Properties)\n                {\n                    Console.WriteLine(i.Name);\n                }\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;Out-parameters: &quot;);\n                foreach(PropertyData o in \n                    method.OutParameters.Properties)\n                {\n                    Console.WriteLine(o.Name);\n                }\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;Qualifiers: &quot;);\n                foreach(QualifierData q in \n                    method.Qualifiers)\n                {\n                    Console.WriteLine(q.Name);\n                }\n                Console.WriteLine();\n  \n            }\n        } \n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"wminet_MethodData_InParameters#1\">Imports System\nImports System.Management\n\n\nPublic Class Sample\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Get the WMI class\n        Dim processClass As ManagementClass = _\n            New ManagementClass(&quot;Win32_Process&quot;)\n        processClass.Options.UseAmendedQualifiers = True\n\n        &#39; Get the methods in the class\n        Dim methods As MethodDataCollection = _\n            processClass.Methods\n\n        &#39; display the method names\n        Console.WriteLine(&quot;Method Name: &quot;)\n        For Each method As MethodData In methods\n\n            If (method.Name.Equals(&quot;Create&quot;)) Then\n\n                Console.WriteLine(method.Name)\n                Console.WriteLine(&quot;Description: &quot; &amp; _\n                    method.Qualifiers(&quot;Description&quot;).Value)\n                Console.WriteLine()\n\n                Console.WriteLine(&quot;In-parameters: &quot;)\n                For Each i As PropertyData In _\n                    method.InParameters.Properties\n\n                    Console.WriteLine(i.Name)\n                Next\n                Console.WriteLine()\n\n                Console.WriteLine(&quot;Out-parameters: &quot;)\n                For Each o As PropertyData In _\n                    method.OutParameters.Properties\n\n                    Console.WriteLine(o.Name)\n                Next\n                Console.WriteLine()\n\n                Console.WriteLine(&quot;Qualifiers: &quot;)\n                For Each q As QualifierData In _\n                    method.Qualifiers\n\n                    Console.WriteLine(q.Name)\n                Next\n                Console.WriteLine()\n\n            End If\n        Next\n\n    End Function &#39;Main\nEnd Class &#39;Sample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_MethodData_Name\">\r\n    \r\n            <a id=\"System_Management_MethodData_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> value containing the name of the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"property-value\">Property Value</h2>\n<p> The name of the method.  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example lists information about the <strong>Win32_Process.Create</strong> method using the <a class=\"xref\" href=\"system.management.methoddata\" data-linktype=\"relative-path\">MethodData</a> class. For more information about the <strong>Win32_Process</strong> class, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"wminet_MethodData_Name#1\">Imports System\nImports System.Management\n\n\nPublic Class Sample\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Get the WMI class\n        Dim processClass As ManagementClass = _\n            New ManagementClass(&quot;Win32_Process&quot;)\n        processClass.Options.UseAmendedQualifiers = True\n\n        &#39; Get the methods in the class\n        Dim methods As MethodDataCollection = _\n            processClass.Methods\n\n        &#39; display the method names\n        Console.WriteLine(&quot;Method Name: &quot;)\n        For Each method As MethodData In methods\n\n            If (method.Name.Equals(&quot;Create&quot;)) Then\n\n                Console.WriteLine(method.Name)\n                Console.WriteLine(&quot;Description: &quot; &amp; _\n                    method.Qualifiers(&quot;Description&quot;).Value)\n                Console.WriteLine()\n\n                Console.WriteLine(&quot;In-parameters: &quot;)\n                For Each i As PropertyData In _\n                    method.InParameters.Properties\n\n                    Console.WriteLine(i.Name)\n                Next\n                Console.WriteLine()\n\n                Console.WriteLine(&quot;Out-parameters: &quot;)\n                For Each o As PropertyData In _\n                    method.OutParameters.Properties\n\n                    Console.WriteLine(o.Name)\n                Next\n                Console.WriteLine()\n\n                Console.WriteLine(&quot;Qualifiers: &quot;)\n                For Each q As QualifierData In _\n                    method.Qualifiers\n\n                    Console.WriteLine(q.Name)\n                Next\n                Console.WriteLine()\n\n            End If\n        Next\n\n    End Function &#39;Main\nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"wminet_MethodData_Name#1\">using System;\nusing System.Management;\n\npublic class Sample \n{    \n    public static void Main() \n    {\n\n        // Get the WMI class\n        ManagementClass processClass = \n            new ManagementClass(&quot;Win32_Process&quot;);\n        processClass.Options.UseAmendedQualifiers = true;\n\n        // Get the methods in the class\n        MethodDataCollection methods =\n            processClass.Methods;\n\n        // display the method names\n        Console.WriteLine(&quot;Method Name: &quot;);\n        foreach (MethodData method in methods)\n        {\n            if(method.Name.Equals(&quot;Create&quot;))\n            {\n                Console.WriteLine(method.Name);\n                Console.WriteLine(&quot;Description: &quot; +\n                    method.Qualifiers[&quot;Description&quot;].Value);\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;In-parameters: &quot;);\n                foreach(PropertyData i in \n                    method.InParameters.Properties)\n                {\n                    Console.WriteLine(i.Name);\n                }\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;Out-parameters: &quot;);\n                foreach(PropertyData o in \n                    method.OutParameters.Properties)\n                {\n                    Console.WriteLine(o.Name);\n                }\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;Qualifiers: &quot;);\n                foreach(QualifierData q in \n                    method.Qualifiers)\n                {\n                    Console.WriteLine(q.Name);\n                }\n                Console.WriteLine();\n  \n            }\n        } \n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_MethodData_Origin\">\r\n    \r\n            <a id=\"System_Management_MethodData_Origin_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Origin</div>        \r\n          </div>\r\n    \r\n            <p>Gets the name of the management class in which the method was first introduced in the class inheritance hierarchy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Origin { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> value containing the name of the class in which the method was first introduced in the class inheritance hierarchy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"property-value\">Property Value</h2>\n<p> A string representing the originating management class name.  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_MethodData_OutParameters\">\r\n    \r\n            <a id=\"System_Management_MethodData_OutParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OutParameters</div>        \r\n          </div>\r\n    \r\n            <p>Gets the output parameters to the method. Each parameter is described as a property in the object. If a parameter is both in and out, it will appear in both the <span class=\"xref\">stem.Management.MethodData.InParameters*</span> and OutParameters properties.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Management.ManagementBaseObject OutParameters { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.managementbaseobject\" data-linktype=\"relative-path\">ManagementBaseObject</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.management.managementbaseobject\" data-linktype=\"relative-path\">ManagementBaseObject</a> containing the output parameters for the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each parameter in this object should have an ID qualifier to identify the order of the parameters in the method call.  </p>\n<p> The <strong>ReturnValue</strong> property is a special property of the <a class=\"xref\" href=\"system.management.managementbaseobject\" data-linktype=\"relative-path\">ManagementBaseObject</a> returned by the OutParameters property and holds the return value of the method.  </p>\n<h2 id=\"property-value\">Property Value</h2>\n<p> A <a class=\"xref\" href=\"system.management.managementbaseobject\" data-linktype=\"relative-path\">ManagementBaseObject</a> containing all the output parameters to the method.  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example lists information about the <strong>Win32_Process.Create</strong> method using the <a class=\"xref\" href=\"system.management.methoddata\" data-linktype=\"relative-path\">MethodData</a> class. For more information on the <strong>Win32_Process</strong> class, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"wminet_MethodData_OutParameters#1\">Imports System\nImports System.Management\n\n\nPublic Class Sample\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Get the WMI class\n        Dim processClass As ManagementClass = _\n            New ManagementClass(&quot;Win32_Process&quot;)\n        processClass.Options.UseAmendedQualifiers = True\n\n        &#39; Get the methods in the class\n        Dim methods As MethodDataCollection = _\n            processClass.Methods\n\n        &#39; display the method names\n        Console.WriteLine(&quot;Method Name: &quot;)\n        For Each method As MethodData In methods\n\n            If (method.Name.Equals(&quot;Create&quot;)) Then\n\n                Console.WriteLine(method.Name)\n                Console.WriteLine(&quot;Description: &quot; &amp; _\n                    method.Qualifiers(&quot;Description&quot;).Value)\n                Console.WriteLine()\n\n                Console.WriteLine(&quot;In-parameters: &quot;)\n                For Each i As PropertyData In _\n                    method.InParameters.Properties\n\n                    Console.WriteLine(i.Name)\n                Next\n                Console.WriteLine()\n\n                Console.WriteLine(&quot;Out-parameters: &quot;)\n                For Each o As PropertyData In _\n                    method.OutParameters.Properties\n\n                    Console.WriteLine(o.Name)\n                Next\n                Console.WriteLine()\n\n                Console.WriteLine(&quot;Qualifiers: &quot;)\n                For Each q As QualifierData In _\n                    method.Qualifiers\n\n                    Console.WriteLine(q.Name)\n                Next\n                Console.WriteLine()\n\n            End If\n        Next\n\n    End Function &#39;Main\nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"wminet_MethodData_OutParameters#1\">using System;\nusing System.Management;\n\npublic class Sample \n{    \n    public static void Main() \n    {\n\n        // Get the WMI class\n        ManagementClass processClass = \n            new ManagementClass(&quot;Win32_Process&quot;);\n        processClass.Options.UseAmendedQualifiers = true;\n\n        // Get the methods in the class\n        MethodDataCollection methods =\n            processClass.Methods;\n\n        // display the method names\n        Console.WriteLine(&quot;Method Name: &quot;);\n        foreach (MethodData method in methods)\n        {\n            if(method.Name.Equals(&quot;Create&quot;))\n            {\n                Console.WriteLine(method.Name);\n                Console.WriteLine(&quot;Description: &quot; +\n                    method.Qualifiers[&quot;Description&quot;].Value);\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;In-parameters: &quot;);\n                foreach(PropertyData i in \n                    method.InParameters.Properties)\n                {\n                    Console.WriteLine(i.Name);\n                }\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;Out-parameters: &quot;);\n                foreach(PropertyData o in \n                    method.OutParameters.Properties)\n                {\n                    Console.WriteLine(o.Name);\n                }\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;Qualifiers: &quot;);\n                foreach(QualifierData q in \n                    method.Qualifiers)\n                {\n                    Console.WriteLine(q.Name);\n                }\n                Console.WriteLine();\n  \n            }\n        } \n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_MethodData_Qualifiers\">\r\n    \r\n            <a id=\"System_Management_MethodData_Qualifiers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Qualifiers</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of qualifiers defined in the method. Each element is of type <a class=\"xref\" href=\"system.management.qualifierdata\" data-linktype=\"relative-path\">QualifierData</a> and contains information such as the <em>qualifier</em> name, value, and <em>flavor</em>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Management.QualifierDataCollection Qualifiers { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.qualifierdatacollection\" data-linktype=\"relative-path\">QualifierDataCollection</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.management.qualifierdatacollection\" data-linktype=\"relative-path\">QualifierDataCollection</a> containing the qualifiers for the method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"property-value\">Property Value</h2>\n<p> A <a class=\"xref\" href=\"system.management.qualifierdatacollection\" data-linktype=\"relative-path\">QualifierDataCollection</a> containing the qualifiers for this method.  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example lists information about the <strong>Win32_Process.Create</strong> method using the <a class=\"xref\" href=\"system.management.methoddata\" data-linktype=\"relative-path\">MethodData</a> class. For more information about the <strong>Win32_Process</strong> class, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"wminet_MethodData_Qualifiers#1\">Imports System\nImports System.Management\n\n\nPublic Class Sample\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Get the WMI class\n        Dim processClass As ManagementClass = _\n            New ManagementClass(&quot;Win32_Process&quot;)\n        processClass.Options.UseAmendedQualifiers = True\n\n        &#39; Get the methods in the class\n        Dim methods As MethodDataCollection = _\n            processClass.Methods\n\n        &#39; display the method names\n        Console.WriteLine(&quot;Method Name: &quot;)\n        For Each method As MethodData In methods\n\n            If (method.Name.Equals(&quot;Create&quot;)) Then\n\n                Console.WriteLine(method.Name)\n                Console.WriteLine(&quot;Description: &quot; &amp; _\n                    method.Qualifiers(&quot;Description&quot;).Value)\n                Console.WriteLine()\n\n                Console.WriteLine(&quot;In-parameters: &quot;)\n                For Each i As PropertyData In _\n                    method.InParameters.Properties\n\n                    Console.WriteLine(i.Name)\n                Next\n                Console.WriteLine()\n\n                Console.WriteLine(&quot;Out-parameters: &quot;)\n                For Each o As PropertyData In _\n                    method.OutParameters.Properties\n\n                    Console.WriteLine(o.Name)\n                Next\n                Console.WriteLine()\n\n                Console.WriteLine(&quot;Qualifiers: &quot;)\n                For Each q As QualifierData In _\n                    method.Qualifiers\n\n                    Console.WriteLine(q.Name)\n                Next\n                Console.WriteLine()\n\n            End If\n        Next\n\n    End Function &#39;Main\nEnd Class &#39;Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"wminet_MethodData_Qualifiers#1\">using System;\nusing System.Management;\n\npublic class Sample \n{    \n    public static void Main() \n    {\n\n        // Get the WMI class\n        ManagementClass processClass = \n            new ManagementClass(&quot;Win32_Process&quot;);\n        processClass.Options.UseAmendedQualifiers = true;\n\n        // Get the methods in the class\n        MethodDataCollection methods =\n            processClass.Methods;\n\n        // display the method names\n        Console.WriteLine(&quot;Method Name: &quot;);\n        foreach (MethodData method in methods)\n        {\n            if(method.Name.Equals(&quot;Create&quot;))\n            {\n                Console.WriteLine(method.Name);\n                Console.WriteLine(&quot;Description: &quot; +\n                    method.Qualifiers[&quot;Description&quot;].Value);\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;In-parameters: &quot;);\n                foreach(PropertyData i in \n                    method.InParameters.Properties)\n                {\n                    Console.WriteLine(i.Name);\n                }\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;Out-parameters: &quot;);\n                foreach(PropertyData o in \n                    method.OutParameters.Properties)\n                {\n                    Console.WriteLine(o.Name);\n                }\n                Console.WriteLine();\n\n                Console.WriteLine(&quot;Qualifiers: &quot;);\n                foreach(QualifierData q in \n                    method.Qualifiers)\n                {\n                    Console.WriteLine(q.Name);\n                }\n                Console.WriteLine();\n  \n            }\n        } \n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Management.MethodData.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Management.MethodData.yml\">\r\n<meta name=\"APIName\" content=\"System.Management.MethodData\">\r\n<meta name=\"APIName\" content=\"System.Management.MethodData.InParameters\">\r\n<meta name=\"APIName\" content=\"System.Management.MethodData.Name\">\r\n<meta name=\"APIName\" content=\"System.Management.MethodData.Origin\">\r\n<meta name=\"APIName\" content=\"System.Management.MethodData.OutParameters\">\r\n<meta name=\"APIName\" content=\"System.Management.MethodData.Qualifiers\">\r\n<meta name=\"APILocation\" content=\"System.Management.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"f7f22853-77cf-177a-5813-13a1ef8f89d4\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Management\\MethodData.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Contains information about a WMI method.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Management/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Management.MethodData\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Management.MethodData.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Management.MethodData.yml","open_to_public_contributors":true,"api_name":["System.Management.MethodData","System.Management.MethodData.InParameters","System.Management.MethodData.Name","System.Management.MethodData.Origin","System.Management.MethodData.OutParameters","System.Management.MethodData.Qualifiers"],"api_location":["System.Management.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Management.MethodData","System::Management::MethodData","System.Management.MethodData.InParameters","System::Management::MethodData::InParameters","System.Management.MethodData.Name","System::Management::MethodData::Name","System.Management.MethodData.Origin","System::Management::MethodData::Origin","System.Management.MethodData.OutParameters","System::Management::MethodData::OutParameters","System.Management.MethodData.Qualifiers","System::Management::MethodData::Qualifiers"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"f7f22853-77cf-177a-5813-13a1ef8f89d4","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Management\\MethodData.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Management/MethodData.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"MethodData class | Microsoft Docs","_op_ogTitle":"MethodData class","description":"Contains information about a WMI method.\n","toc_asset_id":"_splitted/System.Management/toc.json","toc_rel":"_splitted/System.Management/toc.json","source_url":"","ms.assetid":"System.Management.MethodData","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.management.methoddata","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.management.methoddata","fileRelativePath":"System.Management.MethodData.html"},"themesRelativePathToOutputRoot":"_themes/"}