{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">FrameworkPropertyMetadata</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.uipropertymetadata\" data-linktype=\"relative-path\">System.Windows.UIPropertyMetadata</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">FrameworkPropertyMetadata</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_CoerceValueCallback\" data-linktype=\"relative-path\">CoerceValueCallback</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_DefaultValue\" data-linktype=\"relative-path\">DefaultValue</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed\" data-linktype=\"relative-path\">IsSealed</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_PropertyChangedCallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.uipropertymetadata#System_Windows_UIPropertyMetadata_IsAnimationProhibited\" data-linktype=\"relative-path\">IsAnimationProhibited</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This class derives from <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> (through <a class=\"xref\" href=\"system.windows.uipropertymetadata\" data-linktype=\"relative-path\">UIPropertyMetadata</a>) . For most WPF framework-level application development purposes, FrameworkPropertyMetadata is the type used for dependency property metadata, rather than the base metadata types <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> or <a class=\"xref\" href=\"system.windows.uipropertymetadata\" data-linktype=\"relative-path\">UIPropertyMetadata</a>. This is true both for existing dependency properties and for most custom dependency property scenarios.  </p>\n<p> The members declared by this class that supplement the <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.  </p>\n<p> Several constructor signatures for creating a FrameworkPropertyMetadata instance take a <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> parameter. The <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after FrameworkPropertyMetadata is constructed. From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.  </p>\n<p><a name=\"xamlTextUsage_FrameworkPropertyMetadata\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> This class is not typically used in XAML.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FrameworkPropertyMetadata()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FrameworkPropertyMetadata ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This signature initializes all values of FrameworkPropertyMetadata to their property defaults. <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_DefaultValue_\" data-linktype=\"relative-path\">DefaultValue</a> will be <code>null</code>, and the various <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> Boolean properties will be <code>false</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata__ctor_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FrameworkPropertyMetadata(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> class with the specified default value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FrameworkPropertyMetadata (object defaultValue);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>defaultValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The default value of the dependency property, usually provided as a value of a specific type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>defaultValue</code> is set to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a>; see Remarks.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the value provided for <code>defaultValue</code> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  </p>\n<p> The value <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a> has special meaning in the property system, and cannot be used as a dependency property default value.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata__ctor_System_Windows_PropertyChangedCallback_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FrameworkPropertyMetadata(PropertyChangedCallback)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> class with the specified <a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a> callback.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>propertyChangedCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata__ctor_System_Object_System_Windows_FrameworkPropertyMetadataOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> class with the provided default value and framework-level metadata options.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>defaultValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The default value of the dependency property, usually provided as a value of a specific type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>flags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The metadata option flags (a combination of <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>defaultValue</code> is set to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a>; see Remarks.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the value provided for <code>defaultValue</code> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  </p>\n<p> The value <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a> has special meaning in the property system, and cannot be used as a dependency property default value.  </p>\n<p> Values marked as set flags in the <code>flags</code> parameter will set the Boolean value of <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> properties that match that <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> flag&#39;s name to <code>true</code>. You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata__ctor_System_Object_System_Windows_PropertyChangedCallback_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FrameworkPropertyMetadata(Object,PropertyChangedCallback)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> class with the provided default value and specified <a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a> callback.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>defaultValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The default value of the dependency property, usually provided as a value of a specific type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>propertyChangedCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>defaultValue</code> is set to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a>; see Remarks.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the value provided for <code>defaultValue</code> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  </p>\n<p> The value <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a> has special meaning in the property system, and cannot be used as a dependency property default value.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata__ctor_System_Windows_PropertyChangedCallback_System_Windows_CoerceValueCallback_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> class with the specified callbacks.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>propertyChangedCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>coerceValueCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.coercevaluecallback\" data-linktype=\"relative-path\">CoerceValueCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation will be called whenever the property system calls <span class=\"xref\">stem.Windows.DependencyObject.CoerceValue*</span> for this dependency property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This implementation calls a base initializer and then adds the <code>coerceValueCallback</code> by setting the property on the base instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata__ctor_System_Object_System_Windows_FrameworkPropertyMetadataOptions_System_Windows_PropertyChangedCallback_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> class with the provided default value and framework metadata options, and specified <a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a> callback.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>defaultValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The default value of the dependency property, usually provided as a value of a specific type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>flags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The metadata option flags (a combination of <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>propertyChangedCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>defaultValue</code> is set to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a>; see Remarks.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the value provided for <code>defaultValue</code> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  </p>\n<p> The value <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a> has special meaning in the property system, and cannot be used as a dependency property default value.  </p>\n<p> Values marked as set flags in the <code>flags</code> parameter will set the Boolean value of <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> properties that match that <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> flag&#39;s name to <code>true</code>. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata__ctor_System_Object_System_Windows_PropertyChangedCallback_System_Windows_CoerceValueCallback_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> class with the provided default value and specified callbacks.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>defaultValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The default value of the dependency property, usually provided as a specific type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>propertyChangedCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>coerceValueCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.coercevaluecallback\" data-linktype=\"relative-path\">CoerceValueCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation that will be called whenever the property system calls <span class=\"xref\">stem.Windows.DependencyObject.CoerceValue*</span> for this dependency property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>defaultValue</code> is set to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a>; see Remarks.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the value provided for <code>defaultValue</code> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  </p>\n<p> The value <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a> has special meaning in the property system, and cannot be used as a dependency property default value.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata__ctor_System_Object_System_Windows_FrameworkPropertyMetadataOptions_System_Windows_PropertyChangedCallback_System_Windows_CoerceValueCallback_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> class with the provided default value and framework metadata options, and specified callbacks.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>defaultValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The default value of the dependency property, usually provided as a specific type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>flags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The metadata option flags (a combination of <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>propertyChangedCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>coerceValueCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.coercevaluecallback\" data-linktype=\"relative-path\">CoerceValueCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation that will be called whenever the property system calls <span class=\"xref\">stem.Windows.DependencyObject.CoerceValue*</span> against this property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>defaultValue</code> is set to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a>; see Remarks.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the value provided for <code>defaultValue</code> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  </p>\n<p> The value <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a> has special meaning in the property system, and cannot be used as a dependency property default value.  </p>\n<p> Values marked as set flags in the <code>flags</code> parameter will set the Boolean value of <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> properties that match that <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> flag&#39;s name to <code>true</code>. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata__ctor_System_Object_System_Windows_FrameworkPropertyMetadataOptions_System_Windows_PropertyChangedCallback_System_Windows_CoerceValueCallback_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>defaultValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The default value of the dependency property, usually provided as a specific type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>flags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The metadata option flags (a combination of <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>propertyChangedCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>coerceValueCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.coercevaluecallback\" data-linktype=\"relative-path\">CoerceValueCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation that will be called whenever the property system calls <span class=\"xref\">stem.Windows.DependencyObject.CoerceValue*</span> on this dependency property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>isAnimationProhibited</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to prevent the property system from animating the property that this metadata is applied to. Such properties will raise a run-time exception originating from the property system if animations of them are attempted. <code>false</code> to permit animating the property. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>defaultValue</code> is set to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a>; see Remarks.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the value provided for <code>defaultValue</code> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  </p>\n<p> The value <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a> has special meaning in the property system, and cannot be used as a dependency property default value.  </p>\n<p> The <code>isAnimationProhibited</code> parameter sets the initial value of the <a class=\"xref\" href=\"system.windows.uipropertymetadata#System_Windows_UIPropertyMetadata_IsAnimationProhibited_\" data-linktype=\"relative-path\">IsAnimationProhibited</a> property declared by the immediate base <a class=\"xref\" href=\"system.windows.uipropertymetadata\" data-linktype=\"relative-path\">UIPropertyMetadata</a> class.  </p>\n<p> Values marked as set flags in the <code>flags</code> parameter will set the Boolean value of <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> properties that match that <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> flag&#39;s name to <code>true</code>. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata__ctor_System_Object_System_Windows_FrameworkPropertyMetadataOptions_System_Windows_PropertyChangedCallback_System_Windows_CoerceValueCallback_System_Boolean_System_Windows_Data_UpdateSourceTrigger_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>defaultValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The default value of the dependency property, usually provided as a specific type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>flags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The metadata option flags (a combination of <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>propertyChangedCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertychangedcallback\" data-linktype=\"relative-path\">PropertyChangedCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>coerceValueCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.coercevaluecallback\" data-linktype=\"relative-path\">CoerceValueCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A reference to a handler implementation that will be called whenever the property system calls <span class=\"xref\">stem.Windows.DependencyObject.CoerceValue*</span> against this property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>isAnimationProhibited</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to prevent the property system from animating the property that this metadata is applied to. Such properties will raise a run-time exception originating from the property system if animations of them are attempted. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>defaultUpdateSourceTrigger</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.data.updatesourcetrigger\" data-linktype=\"relative-path\">UpdateSourceTrigger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.data.updatesourcetrigger\" data-linktype=\"relative-path\">UpdateSourceTrigger</a> to use when bindings for this property are applied that have their <a class=\"xref\" href=\"system.windows.data.updatesourcetrigger\" data-linktype=\"relative-path\">UpdateSourceTrigger</a> set to <a class=\"xref\" href=\"system.windows.data.updatesourcetrigger\" data-linktype=\"relative-path\">UpdateSourceTrigger</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>defaultValue</code> is set to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a>; see Remarks.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the value provided for <code>defaultValue</code> must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  </p>\n<p> The value <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_UnsetValue\" data-linktype=\"relative-path\">UnsetValue</a> has special meaning in the property system, and cannot be used as a dependency property default value.  </p>\n<p> The <code>isAnimationProhibited</code> parameter sets the initial value of the <a class=\"xref\" href=\"system.windows.uipropertymetadata#System_Windows_UIPropertyMetadata_IsAnimationProhibited_\" data-linktype=\"relative-path\">IsAnimationProhibited</a> property declared by the immediate base <a class=\"xref\" href=\"system.windows.uipropertymetadata\" data-linktype=\"relative-path\">UIPropertyMetadata</a> class.  </p>\n<p> For more information about the update source behavior for bindings, see <a href=\"../Topic/Data%20Binding%20Overview.md\" data-linktype=\"relative-path\">Data Binding Overview</a>.  </p>\n<p> Values marked as set flags in the <code>flags</code> parameter will set the Boolean value of <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> properties that match that <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> flag&#39;s name to <code>true</code>. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_AffectsArrange\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AffectsArrange</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AffectsArrange { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> and <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> include an implementation of <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_OnPropertyChanged_\" data-linktype=\"relative-path\">OnPropertyChanged</a> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsArrange set to <code>true</code> will initiate a deferred request to invalidate the visuals for that element (a call to <a class=\"xref\" href=\"system.windows.uielement#System_Windows_UIElement_InvalidateArrange_\" data-linktype=\"relative-path\">InvalidateArrange</a>). Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.  </p>\n<p> Custom <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_OnPropertyChanged_\" data-linktype=\"relative-path\">OnPropertyChanged</a> implementations might choose to have similar behavior for dependency property changes where AffectsArrange is <code>true</code>.  </p>\n<p> Properties on derived classes of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a>, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>, or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed_\" data-linktype=\"relative-path\">IsSealed</a> is <code>true</code> on this metadata instance will raise an exception.  </p>\n<p><a name=\"xamlTextUsage_AffectsArrange\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are either not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_AffectsMeasure\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AffectsMeasure</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AffectsMeasure { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> and <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> include an implementation of <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_OnPropertyChanged_\" data-linktype=\"relative-path\">OnPropertyChanged</a> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsMeasure set to <code>true</code> will initiate a deferred request to invalidate the visuals for that element. Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.  </p>\n<p> Custom <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_OnPropertyChanged_\" data-linktype=\"relative-path\">OnPropertyChanged</a> implementations might choose to have similar behavior for dependency property changes where AffectsMeasure is <code>true</code>.  </p>\n<p> Properties on derived classes of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a>, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>, or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed_\" data-linktype=\"relative-path\">IsSealed</a> is <code>true</code> on this metadata instance will raise an exception.  </p>\n<p><a name=\"xamlTextUsage_AffectsMeasure\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_AffectsParentArrange\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AffectsParentArrange</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element&#39;s layout during layout engine operations.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AffectsParentArrange { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> and <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> include an implementation of <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_OnPropertyChanged_\" data-linktype=\"relative-path\">OnPropertyChanged</a> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsParentArrange set to <code>true</code> will initiate a deferred request to invalidate the visuals for the parent element.  </p>\n<p> Generally, you do not need to report changes of a <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> property to a parent element using AffectsParentArrange because the element itself would already have its own <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_AffectsArrange_\" data-linktype=\"relative-path\">AffectsArrange</a> as <code>true</code>. That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate. AffectsParentArrange is sometimes used for a <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> derived class. In this case, the child element sets a property, but a <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> derived class does not control its own rendering. The rendering is handled by a <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> parent element that serves as the content host. For instance, a change to the value of the &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt; attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed. Therefore, the &lt;xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName&gt; attached property has metadata where AffectsParentArrange is <code>true</code>. Another example is <a class=\"xref\" href=\"system.windows.controls.control#System_Windows_Controls_Control_Padding_\" data-linktype=\"relative-path\">Padding</a>; when this property changes, the parent might change the positioning of the child, depending on available space.  </p>\n<p> Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentArrange unless you are substantially replacing or modifying the WPF framework-level layout behavior.  </p>\n<p> Custom <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_OnPropertyChanged_\" data-linktype=\"relative-path\">OnPropertyChanged</a> implementations might choose to have similar behavior for dependency property changes where AffectsParentArrange is <code>true</code>.  </p>\n<p> Properties on any derived classes of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a>, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>, or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed_\" data-linktype=\"relative-path\">IsSealed</a> is <code>true</code> on this metadata instance will raise an exception.  </p>\n<p><a name=\"xamlTextUsage_AffectsParentArrange\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_AffectsParentMeasure\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AffectsParentMeasure</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element&#39;s layout during layout engine operations.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AffectsParentMeasure { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <code>false</code>.The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> and <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> include an implementation of <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_OnPropertyChanged_\" data-linktype=\"relative-path\">OnPropertyChanged</a> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsParentMeasure set to <code>true</code> will initiate a deferred request to invalidate the visuals for the parent element. Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsParentMeasure unless you are substantially replacing or modifying the WPF framework-level layout behavior.  </p>\n<p> Generally, you do not need to report changes of a <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> property to a parent element using AffectsParentMeasure because the element itself would already have its own <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_AffectsMeasure_\" data-linktype=\"relative-path\">AffectsMeasure</a> as <code>true</code>. That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate. AffectsParentMeasure is sometimes used for a <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> derived class. In this case, the child element sets a property, but a <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> derived class does not control its own rendering. The rendering is handled by a <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> parent element that serves as the content host. For instance, a change to the value of the <a class=\"xref\" href=\"system.windows.documents.paragraph#System_Windows_Documents_Paragraph_KeepWithNext_\" data-linktype=\"relative-path\">KeepWithNext</a> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size. Therefore, the <a class=\"xref\" href=\"system.windows.documents.paragraph#System_Windows_Documents_Paragraph_KeepWithNext_\" data-linktype=\"relative-path\">KeepWithNext</a> property has metadata where AffectsParentMeasure is <code>true</code>.  </p>\n<p> Content host elements also frequently look for changes in dependency properties where AffectsParentMeasure is <code>true</code>, as part of content host rendering logic. For instance, the <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> element must respond to certain changes within text that might require that the bounding box of the <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> itself be changed.  </p>\n<p> Custom <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_OnPropertyChanged_\" data-linktype=\"relative-path\">OnPropertyChanged</a> implementations might choose to have similar behavior for dependency property changes where AffectsParentMeasure is <code>true</code>.  </p>\n<p> Properties on any derived classes of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a>, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>, or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed_\" data-linktype=\"relative-path\">IsSealed</a> is <code>true</code> on this metadata instance will raise an exception.  </p>\n<p><a name=\"xamlTextUsage_AffectsParentMeasure\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_AffectsRender\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AffectsRender</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AffectsRender { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the dependency property on which this metadata exists affects rendering; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a> and <a class=\"xref\" href=\"system.windows.frameworkcontentelement\" data-linktype=\"relative-path\">FrameworkContentElement</a> include an implementation of <a class=\"xref\" href=\"system.windows.frameworkelement#System_Windows_FrameworkElement_OnPropertyChanged_\" data-linktype=\"relative-path\">OnPropertyChanged</a> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with AffectsRender set to <code>true</code> will initiate a deferred request to invalidate the visuals for that element. Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with AffectsRender unless you are substantially replacing or modifying the WPF framework-level layout behavior.  </p>\n<p> Custom <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_OnPropertyChanged_\" data-linktype=\"relative-path\">OnPropertyChanged</a> implementations might choose to have similar behavior for dependency property changes where AffectsRender is <code>true</code>.  </p>\n<p> Properties on any derived classes of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a>, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>, or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed_\" data-linktype=\"relative-path\">IsSealed</a> is <code>true</code> on this metadata instance will raise an exception.  </p>\n<p><a name=\"xamlTextUsage_AffectsRender\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_BindsTwoWayByDefault\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BindsTwoWayByDefault</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether the property binds two-way by default.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool BindsTwoWayByDefault { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the dependency property on which this metadata exists binds two-way by default; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In absence of this property being <code>true</code>, binding updates are one-way by default, based on the default behavior of the <a class=\"xref\" href=\"system.windows.data.binding\" data-linktype=\"relative-path\">Binding</a> constructors or equivalent XAML syntax.  </p>\n<p> In existing elements, you will usually find this property set to <code>true</code> in metadata for dependency properties that both report state and are modifiable by user action, for example &lt;xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName&gt;.  </p>\n<p> This property only reports the default binding update characteristics of the dependency property in general. Any binding set to this property on an instance can locally set the <a class=\"xref\" href=\"system.windows.data.binding#System_Windows_Data_Binding_Mode_\" data-linktype=\"relative-path\">Mode</a> property of the binding and change this default.  </p>\n<p> Properties on any derived classes of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a>, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>, or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed_\" data-linktype=\"relative-path\">IsSealed</a> is <code>true</code> on this metadata instance will raise an exception.  </p>\n<p><a name=\"xamlTextUsage_BindsTwoWayByDefault\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_DefaultUpdateSourceTrigger\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DefaultUpdateSourceTrigger</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the default for <a class=\"xref\" href=\"system.windows.data.updatesourcetrigger\" data-linktype=\"relative-path\">UpdateSourceTrigger</a> to use when bindings for the property with this metadata are applied, which have their <a class=\"xref\" href=\"system.windows.data.updatesourcetrigger\" data-linktype=\"relative-path\">UpdateSourceTrigger</a> set to <a class=\"xref\" href=\"system.windows.data.updatesourcetrigger\" data-linktype=\"relative-path\">UpdateSourceTrigger</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.data.updatesourcetrigger\" data-linktype=\"relative-path\">UpdateSourceTrigger</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value of the enumeration, other than <a class=\"xref\" href=\"system.windows.data.updatesourcetrigger\" data-linktype=\"relative-path\">UpdateSourceTrigger</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>This property is set to <a class=\"xref\" href=\"system.windows.data.updatesourcetrigger\" data-linktype=\"relative-path\">UpdateSourceTrigger</a>; the value you set is supposed to become the default when requested by bindings.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Properties on derived classes of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a>, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>, or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed_\" data-linktype=\"relative-path\">IsSealed</a> is <code>true</code> on this metadata instance will raise an exception.  </p>\n<p><a name=\"xamlTextUsage_DefaultUpdateSourceTrigger\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_Inherits\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Inherits</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether the value of the dependency property is inheritable.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Inherits { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the property value is inheritable; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Property value inheritance is a feature of the WPF property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a XAML element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property. Property value inheritance is not enabled by default, and enabling it does have some performance implications. For details, see <a href=\"../Topic/Property%20Value%20Inheritance.md\" data-linktype=\"relative-path\">Property Value Inheritance</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined. Always use <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttached_\" data-linktype=\"relative-path\">RegisterAttached</a> to register properties where you specify Inherits in the metadata.  </p>\n</div>\n<p> Properties on derived classes of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a>, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>, or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed_\" data-linktype=\"relative-path\">IsSealed</a> is <code>true</code> on this metadata instance will raise an exception.  </p>\n<p><a name=\"xamlTextUsage_Inherits\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_IsDataBindingAllowed\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsDataBindingAllowed</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether data binding is supported for the dependency property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsDataBindingAllowed { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if data binding is supported on the dependency property to which this metadata applies; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property reports <code>false</code> for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_IsNotDataBindable_\" data-linktype=\"relative-path\">IsNotDataBindable</a>, is set to <code>true</code> in this metadata. This property is exposed as a convenience so that callers do not have to check both <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_ReadOnly_\" data-linktype=\"relative-path\">ReadOnly</a> and <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_IsNotDataBindable_\" data-linktype=\"relative-path\">IsNotDataBindable</a>.  </p>\n<p> If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> (note the slight naming convention difference versus <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_IsNotDataBindable_\" data-linktype=\"relative-path\">IsNotDataBindable</a>).  </p>\n<p><a name=\"xamlTextUsage_IsDataBindingAllowed\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_IsNotDataBindable\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsNotDataBindable</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether the dependency property supports data binding.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsNotDataBindable { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the property does not support data binding; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Note that this metadata property is set to <code>true</code> specifically for properties that should not support data binding, despite being read-write properties. The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful. Unlike <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_BindsTwoWayByDefault_\" data-linktype=\"relative-path\">BindsTwoWayByDefault</a>, this does not merely change a default that can later be changed on a specific binding. Setting this property <code>true</code> in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.  </p>\n<p> Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report <code>false</code> for IsNotDataBindable. This is because properties that correspond to a <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply. To determine whether a given dependency property permits data binding, you should usually check <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_IsDataBindingAllowed_\" data-linktype=\"relative-path\">IsDataBindingAllowed</a> instead. <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_IsDataBindingAllowed_\" data-linktype=\"relative-path\">IsDataBindingAllowed</a> is a convenience for checking both <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_ReadOnly_\" data-linktype=\"relative-path\">ReadOnly</a> and IsNotDataBindable as a single operation, yielding the expected result.  </p>\n<p> Properties on derived classes of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a>, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>, or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed_\" data-linktype=\"relative-path\">IsSealed</a> is <code>true</code> on this metadata instance will raise an exception.  </p>\n<p><a name=\"xamlTextUsage_IsNotDataBindable\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_Journal\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Journal</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Journal { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Properties on derived classes of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a>, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>, or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed_\" data-linktype=\"relative-path\">IsSealed</a> is <code>true</code> on this metadata instance will raise an exception.  </p>\n<p><a name=\"xamlTextUsage_Journal\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_OverridesInheritanceBehavior\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OverridesInheritanceBehavior</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool OverridesInheritanceBehavior { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the property value inheritance should span across certain content boundaries; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries. The canonical example of such a boundary is the contents of a <a class=\"xref\" href=\"system.windows.controls.frame\" data-linktype=\"relative-path\">Frame</a>, where the <a class=\"xref\" href=\"system.windows.controls.frame\" data-linktype=\"relative-path\">Frame</a> content might get reloaded independently of the existence of the <a class=\"xref\" href=\"system.windows.controls.frame\" data-linktype=\"relative-path\">Frame</a>. The desired property system behavior is that property value inheritance should not traverse into the contents of the <a class=\"xref\" href=\"system.windows.controls.frame\" data-linktype=\"relative-path\">Frame</a>, because these contents might be elements that the application hosting the frame does not own or control. Specifying metadata with OverridesInheritanceBehavior set to <code>true</code>, as well as specifying <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata#System_Windows_FrameworkPropertyMetadata_Inherits_\" data-linktype=\"relative-path\">Inherits</a> as <code>true</code>, will cause the property on which the metadata is applied to be inheritable even across the <a class=\"xref\" href=\"system.windows.controls.frame\" data-linktype=\"relative-path\">Frame</a> boundary or similar boundaries.  </p>\n<p> Properties on derived classes of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a>, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>, or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed_\" data-linktype=\"relative-path\">IsSealed</a> is <code>true</code> on this metadata instance will raise an exception.  </p>\n<p><a name=\"xamlTextUsage_OverridesInheritanceBehavior\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_SubPropertiesDoNotAffectRender\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SubPropertiesDoNotAffectRender</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool SubPropertiesDoNotAffectRender { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if changes to sub-property values do not affect rendering if changed; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own. Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass. Setting this option to <code>true</code> is useful for optimizing performance of the WPF framework level layout system implementation.  </p>\n<p> Properties on derived classes of <a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, once the metadata is consumed as part of a call to <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_Register_\" data-linktype=\"relative-path\">Register</a>, <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_AddOwner_\" data-linktype=\"relative-path\">AddOwner</a>, or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <a class=\"xref\" href=\"system.windows.propertymetadata#System_Windows_PropertyMetadata_IsSealed_\" data-linktype=\"relative-path\">IsSealed</a> is <code>true</code> on this metadata instance will raise an exception.  </p>\n<p><a name=\"xamlTextUsage_SubPropertiesDoNotAffectRender\"></a>   </p>\n<h2 id=\"xaml-text-usage\">XAML Text Usage</h2>\n<p> Members of this class are not typically used in XAML.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_Merge_System_Windows_PropertyMetadata_System_Windows_DependencyProperty_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Merge(PropertyMetadata,DependencyProperty)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Enables a merge of the source metadata with base metadata.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>baseMetadata</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The base metadata to merge.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dp</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The dependency property this metadata is being applied to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is used internally when metadata is being overridden.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_FrameworkPropertyMetadata_OnApply_System_Windows_DependencyProperty_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnApply(DependencyProperty,Type)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dp</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The dependency property to which the metadata has been applied.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>targetType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value can be <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Any mutability of the data structure of a <a class=\"xref\" href=\"system.windows.frameworkpropertymetadata\" data-linktype=\"relative-path\">FrameworkPropertyMetadata</a> instance should be marked as immutable when this method is invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.FrameworkPropertyMetadata.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.FrameworkPropertyMetadata.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.AffectsArrange\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.AffectsMeasure\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.AffectsParentArrange\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.AffectsRender\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.Inherits\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.IsNotDataBindable\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.Journal\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.Merge\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.OnApply\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior\">\r\n<meta name=\"APIName\" content=\"System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender\">\r\n<meta name=\"APILocation\" content=\"PresentationFramework.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c421a175-7b2c-d86a-f030-d800f684a8b3\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.FrameworkPropertyMetadata\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.FrameworkPropertyMetadata.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.FrameworkPropertyMetadata.yml","open_to_public_contributors":true,"api_name":["System.Windows.FrameworkPropertyMetadata","System.Windows.FrameworkPropertyMetadata..ctor","System.Windows.FrameworkPropertyMetadata.AffectsArrange","System.Windows.FrameworkPropertyMetadata.AffectsMeasure","System.Windows.FrameworkPropertyMetadata.AffectsParentArrange","System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure","System.Windows.FrameworkPropertyMetadata.AffectsRender","System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault","System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger","System.Windows.FrameworkPropertyMetadata.Inherits","System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed","System.Windows.FrameworkPropertyMetadata.IsNotDataBindable","System.Windows.FrameworkPropertyMetadata.Journal","System.Windows.FrameworkPropertyMetadata.Merge","System.Windows.FrameworkPropertyMetadata.OnApply","System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior","System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender"],"api_location":["PresentationFramework.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.FrameworkPropertyMetadata","System::Windows::FrameworkPropertyMetadata","System.Windows.FrameworkPropertyMetadata.#ctor","System::Windows::FrameworkPropertyMetadata::#ctor","System.Windows.FrameworkPropertyMetadata.AffectsArrange","System::Windows::FrameworkPropertyMetadata::AffectsArrange","System.Windows.FrameworkPropertyMetadata.AffectsMeasure","System::Windows::FrameworkPropertyMetadata::AffectsMeasure","System.Windows.FrameworkPropertyMetadata.AffectsParentArrange","System::Windows::FrameworkPropertyMetadata::AffectsParentArrange","System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure","System::Windows::FrameworkPropertyMetadata::AffectsParentMeasure","System.Windows.FrameworkPropertyMetadata.AffectsRender","System::Windows::FrameworkPropertyMetadata::AffectsRender","System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault","System::Windows::FrameworkPropertyMetadata::BindsTwoWayByDefault","System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger","System::Windows::FrameworkPropertyMetadata::DefaultUpdateSourceTrigger","System.Windows.FrameworkPropertyMetadata.Inherits","System::Windows::FrameworkPropertyMetadata::Inherits","System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed","System::Windows::FrameworkPropertyMetadata::IsDataBindingAllowed","System.Windows.FrameworkPropertyMetadata.IsNotDataBindable","System::Windows::FrameworkPropertyMetadata::IsNotDataBindable","System.Windows.FrameworkPropertyMetadata.Journal","System::Windows::FrameworkPropertyMetadata::Journal","System.Windows.FrameworkPropertyMetadata.Merge","System::Windows::FrameworkPropertyMetadata::Merge","System.Windows.FrameworkPropertyMetadata.OnApply","System::Windows::FrameworkPropertyMetadata::OnApply","System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior","System::Windows::FrameworkPropertyMetadata::OverridesInheritanceBehavior","System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender","System::Windows::FrameworkPropertyMetadata::SubPropertiesDoNotAffectRender"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c421a175-7b2c-d86a-f030-d800f684a8b3","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows/FrameworkPropertyMetadata.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FrameworkPropertyMetadata class | Microsoft Docs","_op_ogTitle":"FrameworkPropertyMetadata class","description":"Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.\n","toc_asset_id":"_splitted/System.Windows/toc.json","toc_rel":"_splitted/System.Windows/toc.json","source_url":"","ms.assetid":"System.Windows.FrameworkPropertyMetadata","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.frameworkpropertymetadata","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.frameworkpropertymetadata","fileRelativePath":"System.Windows.FrameworkPropertyMetadata.html"},"themesRelativePathToOutputRoot":"_themes/"}