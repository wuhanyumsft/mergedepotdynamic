{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ExpressionType</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Describes the node types for the nodes of an expression tree.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum ExpressionType</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">System.Enum</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">ExpressionType</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>For more information about each enumeration value of this type, see section 4.4 of expr-tree-spec.doc or expr-tree-spec.pdf on the <a href=\"http://go.microsoft.com/fwlink/?LinkId=230775\" data-linktype=\"external\">Microsoft Dynamic Language Runtime</a> page of the Codeplex website.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Add\">\r\n      \t\t\t<span class=\"lang-csharp\">Add</span>\r\n      \t</td>\r\n      \t<td><p>An addition operation, such as <code>a + b</code>, without overflow checking, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_AddAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">AddAssign</span>\r\n      \t</td>\r\n      \t<td><p>An addition compound assignment operation, such as <code>(a += b)</code>, without overflow checking, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_AddAssignChecked\">\r\n      \t\t\t<span class=\"lang-csharp\">AddAssignChecked</span>\r\n      \t</td>\r\n      \t<td><p>An addition compound assignment operation, such as <code>(a += b)</code>, with overflow checking, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_AddChecked\">\r\n      \t\t\t<span class=\"lang-csharp\">AddChecked</span>\r\n      \t</td>\r\n      \t<td><p>An addition operation, such as <code>(a + b)</code>, with overflow checking, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_And\">\r\n      \t\t\t<span class=\"lang-csharp\">And</span>\r\n      \t</td>\r\n      \t<td><p>A bitwise or logical <code>AND</code> operation, such as <code>(a &amp; b)</code> in C# and <code>(a And b)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_AndAlso\">\r\n      \t\t\t<span class=\"lang-csharp\">AndAlso</span>\r\n      \t</td>\r\n      \t<td><p>A conditional <code>AND</code> operation that evaluates the second operand only if the first operand evaluates to <code>true</code>. It corresponds to <code>(a &amp;&amp; b)</code> in C# and <code>(a AndAlso b)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_AndAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">AndAssign</span>\r\n      \t</td>\r\n      \t<td><p>A bitwise or logical <code>AND</code> compound assignment operation, such as <code>(a &amp;= b)</code> in C#.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_ArrayIndex\">\r\n      \t\t\t<span class=\"lang-csharp\">ArrayIndex</span>\r\n      \t</td>\r\n      \t<td><p>An indexing operation in a one-dimensional array, such as <code>array[index]</code> in C# or <code>array(index)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_ArrayLength\">\r\n      \t\t\t<span class=\"lang-csharp\">ArrayLength</span>\r\n      \t</td>\r\n      \t<td><p>An operation that obtains the length of a one-dimensional array, such as <code>array.Length</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Assign\">\r\n      \t\t\t<span class=\"lang-csharp\">Assign</span>\r\n      \t</td>\r\n      \t<td><p>An assignment operation, such as <code>(a = b)</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Block\">\r\n      \t\t\t<span class=\"lang-csharp\">Block</span>\r\n      \t</td>\r\n      \t<td><p>A block of expressions.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Call\">\r\n      \t\t\t<span class=\"lang-csharp\">Call</span>\r\n      \t</td>\r\n      \t<td><p>A method call, such as in the <code>obj.sampleMethod()</code> expression.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Coalesce\">\r\n      \t\t\t<span class=\"lang-csharp\">Coalesce</span>\r\n      \t</td>\r\n      \t<td><p>A node that represents a null coalescing operation, such as <code>(a ?? b)</code> in C# or <code>If(a, b)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Conditional\">\r\n      \t\t\t<span class=\"lang-csharp\">Conditional</span>\r\n      \t</td>\r\n      \t<td><p>A conditional operation, such as <code>a &gt; b ? a : b</code> in C# or <code>If(a &gt; b, a, b)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Constant\">\r\n      \t\t\t<span class=\"lang-csharp\">Constant</span>\r\n      \t</td>\r\n      \t<td><p>A constant value.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Convert\">\r\n      \t\t\t<span class=\"lang-csharp\">Convert</span>\r\n      \t</td>\r\n      \t<td><p>A cast or conversion operation, such as <code>(SampleType)obj</code> in C#or <code>CType(obj, SampleType)</code> in Visual Basic. For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_ConvertChecked\">\r\n      \t\t\t<span class=\"lang-csharp\">ConvertChecked</span>\r\n      \t</td>\r\n      \t<td><p>A cast or conversion operation, such as <code>(SampleType)obj</code> in C#or <code>CType(obj, SampleType)</code> in Visual Basic. For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_DebugInfo\">\r\n      \t\t\t<span class=\"lang-csharp\">DebugInfo</span>\r\n      \t</td>\r\n      \t<td><p>Debugging information.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Decrement\">\r\n      \t\t\t<span class=\"lang-csharp\">Decrement</span>\r\n      \t</td>\r\n      \t<td><p>A unary decrement operation, such as <code>(a - 1)</code> in C# and Visual Basic. The object <code>a</code> should not be modified in place.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Default\">\r\n      \t\t\t<span class=\"lang-csharp\">Default</span>\r\n      \t</td>\r\n      \t<td><p>A default value.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Divide\">\r\n      \t\t\t<span class=\"lang-csharp\">Divide</span>\r\n      \t</td>\r\n      \t<td><p>A division operation, such as <code>(a / b)</code>, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_DivideAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">DivideAssign</span>\r\n      \t</td>\r\n      \t<td><p>An division compound assignment operation, such as <code>(a /= b)</code>, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Dynamic\">\r\n      \t\t\t<span class=\"lang-csharp\">Dynamic</span>\r\n      \t</td>\r\n      \t<td><p>A dynamic operation.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Equal\">\r\n      \t\t\t<span class=\"lang-csharp\">Equal</span>\r\n      \t</td>\r\n      \t<td><p>A node that represents an equality comparison, such as <code>(a == b)</code> in C# or <code>(a = b)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_ExclusiveOr\">\r\n      \t\t\t<span class=\"lang-csharp\">ExclusiveOr</span>\r\n      \t</td>\r\n      \t<td><p>A bitwise or logical <code>XOR</code> operation, such as <code>(a ^ b)</code> in C# or <code>(a Xor b)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_ExclusiveOrAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">ExclusiveOrAssign</span>\r\n      \t</td>\r\n      \t<td><p>A bitwise or logical <code>XOR</code> compound assignment operation, such as <code>(a ^= b)</code> in C#.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Extension\">\r\n      \t\t\t<span class=\"lang-csharp\">Extension</span>\r\n      \t</td>\r\n      \t<td><p>An extension expression.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Goto\">\r\n      \t\t\t<span class=\"lang-csharp\">Goto</span>\r\n      \t</td>\r\n      \t<td><p>A &quot;go to&quot; expression, such as <code>goto Label</code> in C# or <code>GoTo Label</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_GreaterThan\">\r\n      \t\t\t<span class=\"lang-csharp\">GreaterThan</span>\r\n      \t</td>\r\n      \t<td><p>A &quot;greater than&quot; comparison, such as <code>(a &gt; b)</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_GreaterThanOrEqual\">\r\n      \t\t\t<span class=\"lang-csharp\">GreaterThanOrEqual</span>\r\n      \t</td>\r\n      \t<td><p>A &quot;greater than or equal to&quot; comparison, such as <code>(a &gt;= b)</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Increment\">\r\n      \t\t\t<span class=\"lang-csharp\">Increment</span>\r\n      \t</td>\r\n      \t<td><p>A unary increment operation, such as <code>(a + 1)</code> in C# and Visual Basic. The object <code>a</code> should not be modified in place.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Index\">\r\n      \t\t\t<span class=\"lang-csharp\">Index</span>\r\n      \t</td>\r\n      \t<td><p>An index operation or an operation that accesses a property that takes arguments.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Invoke\">\r\n      \t\t\t<span class=\"lang-csharp\">Invoke</span>\r\n      \t</td>\r\n      \t<td><p>An operation that invokes a delegate or lambda expression, such as <code>sampleDelegate.Invoke()</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_IsFalse\">\r\n      \t\t\t<span class=\"lang-csharp\">IsFalse</span>\r\n      \t</td>\r\n      \t<td><p>A <code>false</code> condition value.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_IsTrue\">\r\n      \t\t\t<span class=\"lang-csharp\">IsTrue</span>\r\n      \t</td>\r\n      \t<td><p>A <code>true</code> condition value.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Label\">\r\n      \t\t\t<span class=\"lang-csharp\">Label</span>\r\n      \t</td>\r\n      \t<td><p>A label.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Lambda\">\r\n      \t\t\t<span class=\"lang-csharp\">Lambda</span>\r\n      \t</td>\r\n      \t<td><p>A lambda expression, such as <code>a =&gt; a + a</code> in C# or <code>Function(a) a + a</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_LeftShift\">\r\n      \t\t\t<span class=\"lang-csharp\">LeftShift</span>\r\n      \t</td>\r\n      \t<td><p>A bitwise left-shift operation, such as <code>(a &lt;&lt; b)</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_LeftShiftAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">LeftShiftAssign</span>\r\n      \t</td>\r\n      \t<td><p>A bitwise left-shift compound assignment, such as <code>(a &lt;&lt;= b)</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_LessThan\">\r\n      \t\t\t<span class=\"lang-csharp\">LessThan</span>\r\n      \t</td>\r\n      \t<td><p>A &quot;less than&quot; comparison, such as <code>(a &lt; b)</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_LessThanOrEqual\">\r\n      \t\t\t<span class=\"lang-csharp\">LessThanOrEqual</span>\r\n      \t</td>\r\n      \t<td><p>A &quot;less than or equal to&quot; comparison, such as <code>(a &lt;= b)</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_ListInit\">\r\n      \t\t\t<span class=\"lang-csharp\">ListInit</span>\r\n      \t</td>\r\n      \t<td><p>An operation that creates a new <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> object and initializes it from a list of elements, such as <code>new List<sampletype>(){ a, b, c }</sampletype></code> in C# or <code>Dim sampleList = { a, b, c }</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Loop\">\r\n      \t\t\t<span class=\"lang-csharp\">Loop</span>\r\n      \t</td>\r\n      \t<td><p>A loop, such as <code>for</code> or <code>while</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_MemberAccess\">\r\n      \t\t\t<span class=\"lang-csharp\">MemberAccess</span>\r\n      \t</td>\r\n      \t<td><p>An operation that reads from a field or property, such as <code>obj.SampleProperty</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_MemberInit\">\r\n      \t\t\t<span class=\"lang-csharp\">MemberInit</span>\r\n      \t</td>\r\n      \t<td><p>An operation that creates a new object and initializes one or more of its members, such as <code>new Point { X = 1, Y = 2 }</code> in C# or <code>New Point With {.X = 1, .Y = 2}</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Modulo\">\r\n      \t\t\t<span class=\"lang-csharp\">Modulo</span>\r\n      \t</td>\r\n      \t<td><p>An arithmetic remainder operation, such as <code>(a % b)</code> in C# or <code>(a Mod b)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_ModuloAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">ModuloAssign</span>\r\n      \t</td>\r\n      \t<td><p>An arithmetic remainder compound assignment operation, such as <code>(a %= b)</code> in C#.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Multiply\">\r\n      \t\t\t<span class=\"lang-csharp\">Multiply</span>\r\n      \t</td>\r\n      \t<td><p>A multiplication operation, such as <code>(a * b)</code>, without overflow checking, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_MultiplyAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">MultiplyAssign</span>\r\n      \t</td>\r\n      \t<td><p>A multiplication compound assignment operation, such as <code>(a *= b)</code>, without overflow checking, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_MultiplyAssignChecked\">\r\n      \t\t\t<span class=\"lang-csharp\">MultiplyAssignChecked</span>\r\n      \t</td>\r\n      \t<td><p>A multiplication compound assignment operation, such as <code>(a *= b)</code>, that has overflow checking, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_MultiplyChecked\">\r\n      \t\t\t<span class=\"lang-csharp\">MultiplyChecked</span>\r\n      \t</td>\r\n      \t<td><p>An multiplication operation, such as <code>(a * b)</code>, that has overflow checking, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Negate\">\r\n      \t\t\t<span class=\"lang-csharp\">Negate</span>\r\n      \t</td>\r\n      \t<td><p>An arithmetic negation operation, such as <code>(-a)</code>. The object <code>a</code> should not be modified in place.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_NegateChecked\">\r\n      \t\t\t<span class=\"lang-csharp\">NegateChecked</span>\r\n      \t</td>\r\n      \t<td><p>An arithmetic negation operation, such as <code>(-a)</code>, that has overflow checking. The object <code>a</code> should not be modified in place.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_New\">\r\n      \t\t\t<span class=\"lang-csharp\">New</span>\r\n      \t</td>\r\n      \t<td><p>An operation that calls a constructor to create a new object, such as <code>new SampleType()</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_NewArrayBounds\">\r\n      \t\t\t<span class=\"lang-csharp\">NewArrayBounds</span>\r\n      \t</td>\r\n      \t<td><p>An operation that creates a new array, in which the bounds for each dimension are specified, such as <code>new SampleType[dim1, dim2]</code> in C# or <code>New SampleType(dim1, dim2)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_NewArrayInit\">\r\n      \t\t\t<span class=\"lang-csharp\">NewArrayInit</span>\r\n      \t</td>\r\n      \t<td><p>An operation that creates a new one-dimensional array and initializes it from a list of elements, such as <code>new SampleType[]{a, b, c}</code> in C# or <code>New SampleType(){a, b, c}</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Not\">\r\n      \t\t\t<span class=\"lang-csharp\">Not</span>\r\n      \t</td>\r\n      \t<td><p>A bitwise complement or logical negation operation. In C#, it is equivalent to <code>(~a)</code> for integral types and to <code>(!a)</code> for Boolean values. In Visual Basic, it is equivalent to <code>(Not a)</code>. The object <code>a</code> should not be modified in place.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_NotEqual\">\r\n      \t\t\t<span class=\"lang-csharp\">NotEqual</span>\r\n      \t</td>\r\n      \t<td><p>An inequality comparison, such as <code>(a != b)</code> in C# or <code>(a &lt;&gt; b)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_OnesComplement\">\r\n      \t\t\t<span class=\"lang-csharp\">OnesComplement</span>\r\n      \t</td>\r\n      \t<td><p>A ones complement operation, such as <code>(~a)</code> in C#.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Or\">\r\n      \t\t\t<span class=\"lang-csharp\">Or</span>\r\n      \t</td>\r\n      \t<td><p>A bitwise or logical <code>OR</code> operation, such as <code>(a | b)</code> in C# or <code>(a Or b)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_OrAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">OrAssign</span>\r\n      \t</td>\r\n      \t<td><p>A bitwise or logical <code>OR</code> compound assignment, such as <code>(a |= b)</code> in C#.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_OrElse\">\r\n      \t\t\t<span class=\"lang-csharp\">OrElse</span>\r\n      \t</td>\r\n      \t<td><p>A short-circuiting conditional <code>OR</code> operation, such as <code>(a || b)</code> in C# or <code>(a OrElse b)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Parameter\">\r\n      \t\t\t<span class=\"lang-csharp\">Parameter</span>\r\n      \t</td>\r\n      \t<td><p>A reference to a parameter or variable that is defined in the context of the expression. For more information, see <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_PostDecrementAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">PostDecrementAssign</span>\r\n      \t</td>\r\n      \t<td><p>A unary postfix decrement, such as <code>(a--)</code>. The object <code>a</code> should be modified in place.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_PostIncrementAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">PostIncrementAssign</span>\r\n      \t</td>\r\n      \t<td><p>A unary postfix increment, such as <code>(a++)</code>. The object <code>a</code> should be modified in place.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Power\">\r\n      \t\t\t<span class=\"lang-csharp\">Power</span>\r\n      \t</td>\r\n      \t<td><p>A mathematical operation that raises a number to a power, such as <code>(a ^ b)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_PowerAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">PowerAssign</span>\r\n      \t</td>\r\n      \t<td><p>A compound assignment operation that raises a number to a power, such as <code>(a ^= b)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_PreDecrementAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">PreDecrementAssign</span>\r\n      \t</td>\r\n      \t<td><p>A unary prefix decrement, such as <code>(--a)</code>. The object <code>a</code> should be modified in place.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_PreIncrementAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">PreIncrementAssign</span>\r\n      \t</td>\r\n      \t<td><p>A unary prefix increment, such as <code>(++a)</code>. The object <code>a</code> should be modified in place.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Quote\">\r\n      \t\t\t<span class=\"lang-csharp\">Quote</span>\r\n      \t</td>\r\n      \t<td><p>An expression that has a constant value of type <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>. A Quote node can contain references to parameters that are defined in the context of the expression it represents.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_RightShift\">\r\n      \t\t\t<span class=\"lang-csharp\">RightShift</span>\r\n      \t</td>\r\n      \t<td><p>A bitwise right-shift operation, such as <code>(a &gt;&gt; b)</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_RightShiftAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">RightShiftAssign</span>\r\n      \t</td>\r\n      \t<td><p>A bitwise right-shift compound assignment operation, such as <code>(a &gt;&gt;= b)</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_RuntimeVariables\">\r\n      \t\t\t<span class=\"lang-csharp\">RuntimeVariables</span>\r\n      \t</td>\r\n      \t<td><p>A list of run-time variables. For more information, see <a class=\"xref\" href=\"system.linq.expressions.runtimevariablesexpression\" data-linktype=\"relative-path\">RuntimeVariablesExpression</a>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Subtract\">\r\n      \t\t\t<span class=\"lang-csharp\">Subtract</span>\r\n      \t</td>\r\n      \t<td><p>A subtraction operation, such as <code>(a - b)</code>, without overflow checking, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_SubtractAssign\">\r\n      \t\t\t<span class=\"lang-csharp\">SubtractAssign</span>\r\n      \t</td>\r\n      \t<td><p>A subtraction compound assignment operation, such as <code>(a -= b)</code>, without overflow checking, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_SubtractAssignChecked\">\r\n      \t\t\t<span class=\"lang-csharp\">SubtractAssignChecked</span>\r\n      \t</td>\r\n      \t<td><p>A subtraction compound assignment operation, such as <code>(a -= b)</code>, that has overflow checking, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_SubtractChecked\">\r\n      \t\t\t<span class=\"lang-csharp\">SubtractChecked</span>\r\n      \t</td>\r\n      \t<td><p>An arithmetic subtraction operation, such as <code>(a - b)</code>, that has overflow checking, for numeric operands.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Switch\">\r\n      \t\t\t<span class=\"lang-csharp\">Switch</span>\r\n      \t</td>\r\n      \t<td><p>A switch operation, such as <code>switch</code> in C# or <code>Select Case</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Throw\">\r\n      \t\t\t<span class=\"lang-csharp\">Throw</span>\r\n      \t</td>\r\n      \t<td><p>An operation that throws an exception, such as <code>throw new Exception()</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Try\">\r\n      \t\t\t<span class=\"lang-csharp\">Try</span>\r\n      \t</td>\r\n      \t<td><p>A <code>try-catch</code> expression.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_TypeAs\">\r\n      \t\t\t<span class=\"lang-csharp\">TypeAs</span>\r\n      \t</td>\r\n      \t<td><p>An explicit reference or boxing conversion in which <code>null</code> is supplied if the conversion fails, such as <code>(obj as SampleType)</code> in C# or <code>TryCast(obj, SampleType)</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_TypeEqual\">\r\n      \t\t\t<span class=\"lang-csharp\">TypeEqual</span>\r\n      \t</td>\r\n      \t<td><p>An exact type test.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_TypeIs\">\r\n      \t\t\t<span class=\"lang-csharp\">TypeIs</span>\r\n      \t</td>\r\n      \t<td><p>A type test, such as <code>obj is SampleType</code> in C# or <code>TypeOf obj is SampleType</code> in Visual Basic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_UnaryPlus\">\r\n      \t\t\t<span class=\"lang-csharp\">UnaryPlus</span>\r\n      \t</td>\r\n      \t<td><p>A unary plus operation, such as <code>(+a)</code>. The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Linq_Expressions_ExpressionType_Unbox\">\r\n      \t\t\t<span class=\"lang-csharp\">Unbox</span>\r\n      \t</td>\r\n      \t<td><p>An unbox value type operation, such as <code>unbox</code> and <code>unbox.any</code> instructions in MSIL.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.Expressions.ExpressionType.yml\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Add\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.AddAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.AddChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.And\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.AndAlso\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.AndAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.ArrayIndex\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.ArrayLength\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Assign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Block\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Call\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Coalesce\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Conditional\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Constant\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Convert\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.ConvertChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.DebugInfo\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Decrement\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Default\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Divide\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.DivideAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Dynamic\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Equal\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.ExclusiveOr\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Extension\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Goto\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.GreaterThan\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Increment\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Index\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.IsFalse\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.IsTrue\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Label\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Lambda\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.LeftShift\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.LessThan\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.ListInit\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Loop\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.MemberAccess\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.MemberInit\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Modulo\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.ModuloAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Multiply\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.MultiplyChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Negate\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.NegateChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.New\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.NewArrayBounds\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.NewArrayInit\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Not\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.NotEqual\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.OnesComplement\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Or\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.OrAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.OrElse\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Parameter\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.PostDecrementAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.PostIncrementAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Power\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.PowerAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.PreDecrementAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.PreIncrementAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Quote\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.RightShift\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.RuntimeVariables\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Subtract\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.SubtractAssign\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.SubtractChecked\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Switch\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Throw\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Try\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.TypeAs\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.TypeEqual\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.TypeIs\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.UnaryPlus\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.ExpressionType.Unbox\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-20 09:40 AM\">\r\n<meta name=\"document_id\" content=\"4ef9d480-66e5-8e61-decd-f2a3ded0f68c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Describes the node types for the nodes of an expression tree.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Linq.Expressions/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Linq.Expressions.ExpressionType\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.Expressions.ExpressionType.yml","open_to_public_contributors":true,"api_name":["System.Linq.Expressions.ExpressionType","System.Linq.Expressions.ExpressionType.Add","System.Linq.Expressions.ExpressionType.AddAssign","System.Linq.Expressions.ExpressionType.AddAssignChecked","System.Linq.Expressions.ExpressionType.AddChecked","System.Linq.Expressions.ExpressionType.And","System.Linq.Expressions.ExpressionType.AndAlso","System.Linq.Expressions.ExpressionType.AndAssign","System.Linq.Expressions.ExpressionType.ArrayIndex","System.Linq.Expressions.ExpressionType.ArrayLength","System.Linq.Expressions.ExpressionType.Assign","System.Linq.Expressions.ExpressionType.Block","System.Linq.Expressions.ExpressionType.Call","System.Linq.Expressions.ExpressionType.Coalesce","System.Linq.Expressions.ExpressionType.Conditional","System.Linq.Expressions.ExpressionType.Constant","System.Linq.Expressions.ExpressionType.Convert","System.Linq.Expressions.ExpressionType.ConvertChecked","System.Linq.Expressions.ExpressionType.DebugInfo","System.Linq.Expressions.ExpressionType.Decrement","System.Linq.Expressions.ExpressionType.Default","System.Linq.Expressions.ExpressionType.Divide","System.Linq.Expressions.ExpressionType.DivideAssign","System.Linq.Expressions.ExpressionType.Dynamic","System.Linq.Expressions.ExpressionType.Equal","System.Linq.Expressions.ExpressionType.ExclusiveOr","System.Linq.Expressions.ExpressionType.ExclusiveOrAssign","System.Linq.Expressions.ExpressionType.Extension","System.Linq.Expressions.ExpressionType.Goto","System.Linq.Expressions.ExpressionType.GreaterThan","System.Linq.Expressions.ExpressionType.GreaterThanOrEqual","System.Linq.Expressions.ExpressionType.Increment","System.Linq.Expressions.ExpressionType.Index","System.Linq.Expressions.ExpressionType.Invoke","System.Linq.Expressions.ExpressionType.IsFalse","System.Linq.Expressions.ExpressionType.IsTrue","System.Linq.Expressions.ExpressionType.Label","System.Linq.Expressions.ExpressionType.Lambda","System.Linq.Expressions.ExpressionType.LeftShift","System.Linq.Expressions.ExpressionType.LeftShiftAssign","System.Linq.Expressions.ExpressionType.LessThan","System.Linq.Expressions.ExpressionType.LessThanOrEqual","System.Linq.Expressions.ExpressionType.ListInit","System.Linq.Expressions.ExpressionType.Loop","System.Linq.Expressions.ExpressionType.MemberAccess","System.Linq.Expressions.ExpressionType.MemberInit","System.Linq.Expressions.ExpressionType.Modulo","System.Linq.Expressions.ExpressionType.ModuloAssign","System.Linq.Expressions.ExpressionType.Multiply","System.Linq.Expressions.ExpressionType.MultiplyAssign","System.Linq.Expressions.ExpressionType.MultiplyAssignChecked","System.Linq.Expressions.ExpressionType.MultiplyChecked","System.Linq.Expressions.ExpressionType.Negate","System.Linq.Expressions.ExpressionType.NegateChecked","System.Linq.Expressions.ExpressionType.New","System.Linq.Expressions.ExpressionType.NewArrayBounds","System.Linq.Expressions.ExpressionType.NewArrayInit","System.Linq.Expressions.ExpressionType.Not","System.Linq.Expressions.ExpressionType.NotEqual","System.Linq.Expressions.ExpressionType.OnesComplement","System.Linq.Expressions.ExpressionType.Or","System.Linq.Expressions.ExpressionType.OrAssign","System.Linq.Expressions.ExpressionType.OrElse","System.Linq.Expressions.ExpressionType.Parameter","System.Linq.Expressions.ExpressionType.PostDecrementAssign","System.Linq.Expressions.ExpressionType.PostIncrementAssign","System.Linq.Expressions.ExpressionType.Power","System.Linq.Expressions.ExpressionType.PowerAssign","System.Linq.Expressions.ExpressionType.PreDecrementAssign","System.Linq.Expressions.ExpressionType.PreIncrementAssign","System.Linq.Expressions.ExpressionType.Quote","System.Linq.Expressions.ExpressionType.RightShift","System.Linq.Expressions.ExpressionType.RightShiftAssign","System.Linq.Expressions.ExpressionType.RuntimeVariables","System.Linq.Expressions.ExpressionType.Subtract","System.Linq.Expressions.ExpressionType.SubtractAssign","System.Linq.Expressions.ExpressionType.SubtractAssignChecked","System.Linq.Expressions.ExpressionType.SubtractChecked","System.Linq.Expressions.ExpressionType.Switch","System.Linq.Expressions.ExpressionType.Throw","System.Linq.Expressions.ExpressionType.Try","System.Linq.Expressions.ExpressionType.TypeAs","System.Linq.Expressions.ExpressionType.TypeEqual","System.Linq.Expressions.ExpressionType.TypeIs","System.Linq.Expressions.ExpressionType.UnaryPlus","System.Linq.Expressions.ExpressionType.Unbox"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Linq.Expressions.ExpressionType","System::Linq::Expressions::ExpressionType","System.Linq.Expressions.ExpressionType.Add","System::Linq::Expressions::ExpressionType::Add","System.Linq.Expressions.ExpressionType.AddAssign","System::Linq::Expressions::ExpressionType::AddAssign","System.Linq.Expressions.ExpressionType.AddAssignChecked","System::Linq::Expressions::ExpressionType::AddAssignChecked","System.Linq.Expressions.ExpressionType.AddChecked","System::Linq::Expressions::ExpressionType::AddChecked","System.Linq.Expressions.ExpressionType.And","System::Linq::Expressions::ExpressionType::And","System.Linq.Expressions.ExpressionType.AndAlso","System::Linq::Expressions::ExpressionType::AndAlso","System.Linq.Expressions.ExpressionType.AndAssign","System::Linq::Expressions::ExpressionType::AndAssign","System.Linq.Expressions.ExpressionType.ArrayIndex","System::Linq::Expressions::ExpressionType::ArrayIndex","System.Linq.Expressions.ExpressionType.ArrayLength","System::Linq::Expressions::ExpressionType::ArrayLength","System.Linq.Expressions.ExpressionType.Assign","System::Linq::Expressions::ExpressionType::Assign","System.Linq.Expressions.ExpressionType.Block","System::Linq::Expressions::ExpressionType::Block","System.Linq.Expressions.ExpressionType.Call","System::Linq::Expressions::ExpressionType::Call","System.Linq.Expressions.ExpressionType.Coalesce","System::Linq::Expressions::ExpressionType::Coalesce","System.Linq.Expressions.ExpressionType.Conditional","System::Linq::Expressions::ExpressionType::Conditional","System.Linq.Expressions.ExpressionType.Constant","System::Linq::Expressions::ExpressionType::Constant","System.Linq.Expressions.ExpressionType.Convert","System::Linq::Expressions::ExpressionType::Convert","System.Linq.Expressions.ExpressionType.ConvertChecked","System::Linq::Expressions::ExpressionType::ConvertChecked","System.Linq.Expressions.ExpressionType.DebugInfo","System::Linq::Expressions::ExpressionType::DebugInfo","System.Linq.Expressions.ExpressionType.Decrement","System::Linq::Expressions::ExpressionType::Decrement","System.Linq.Expressions.ExpressionType.Default","System::Linq::Expressions::ExpressionType::Default","System.Linq.Expressions.ExpressionType.Divide","System::Linq::Expressions::ExpressionType::Divide","System.Linq.Expressions.ExpressionType.DivideAssign","System::Linq::Expressions::ExpressionType::DivideAssign","System.Linq.Expressions.ExpressionType.Dynamic","System::Linq::Expressions::ExpressionType::Dynamic","System.Linq.Expressions.ExpressionType.Equal","System::Linq::Expressions::ExpressionType::Equal","System.Linq.Expressions.ExpressionType.ExclusiveOr","System::Linq::Expressions::ExpressionType::ExclusiveOr","System.Linq.Expressions.ExpressionType.ExclusiveOrAssign","System::Linq::Expressions::ExpressionType::ExclusiveOrAssign","System.Linq.Expressions.ExpressionType.Extension","System::Linq::Expressions::ExpressionType::Extension","System.Linq.Expressions.ExpressionType.Goto","System::Linq::Expressions::ExpressionType::Goto","System.Linq.Expressions.ExpressionType.GreaterThan","System::Linq::Expressions::ExpressionType::GreaterThan","System.Linq.Expressions.ExpressionType.GreaterThanOrEqual","System::Linq::Expressions::ExpressionType::GreaterThanOrEqual","System.Linq.Expressions.ExpressionType.Increment","System::Linq::Expressions::ExpressionType::Increment","System.Linq.Expressions.ExpressionType.Index","System::Linq::Expressions::ExpressionType::Index","System.Linq.Expressions.ExpressionType.Invoke","System::Linq::Expressions::ExpressionType::Invoke","System.Linq.Expressions.ExpressionType.IsFalse","System::Linq::Expressions::ExpressionType::IsFalse","System.Linq.Expressions.ExpressionType.IsTrue","System::Linq::Expressions::ExpressionType::IsTrue","System.Linq.Expressions.ExpressionType.Label","System::Linq::Expressions::ExpressionType::Label","System.Linq.Expressions.ExpressionType.Lambda","System::Linq::Expressions::ExpressionType::Lambda","System.Linq.Expressions.ExpressionType.LeftShift","System::Linq::Expressions::ExpressionType::LeftShift","System.Linq.Expressions.ExpressionType.LeftShiftAssign","System::Linq::Expressions::ExpressionType::LeftShiftAssign","System.Linq.Expressions.ExpressionType.LessThan","System::Linq::Expressions::ExpressionType::LessThan","System.Linq.Expressions.ExpressionType.LessThanOrEqual","System::Linq::Expressions::ExpressionType::LessThanOrEqual","System.Linq.Expressions.ExpressionType.ListInit","System::Linq::Expressions::ExpressionType::ListInit","System.Linq.Expressions.ExpressionType.Loop","System::Linq::Expressions::ExpressionType::Loop","System.Linq.Expressions.ExpressionType.MemberAccess","System::Linq::Expressions::ExpressionType::MemberAccess","System.Linq.Expressions.ExpressionType.MemberInit","System::Linq::Expressions::ExpressionType::MemberInit","System.Linq.Expressions.ExpressionType.Modulo","System::Linq::Expressions::ExpressionType::Modulo","System.Linq.Expressions.ExpressionType.ModuloAssign","System::Linq::Expressions::ExpressionType::ModuloAssign","System.Linq.Expressions.ExpressionType.Multiply","System::Linq::Expressions::ExpressionType::Multiply","System.Linq.Expressions.ExpressionType.MultiplyAssign","System::Linq::Expressions::ExpressionType::MultiplyAssign","System.Linq.Expressions.ExpressionType.MultiplyAssignChecked","System::Linq::Expressions::ExpressionType::MultiplyAssignChecked","System.Linq.Expressions.ExpressionType.MultiplyChecked","System::Linq::Expressions::ExpressionType::MultiplyChecked","System.Linq.Expressions.ExpressionType.Negate","System::Linq::Expressions::ExpressionType::Negate","System.Linq.Expressions.ExpressionType.NegateChecked","System::Linq::Expressions::ExpressionType::NegateChecked","System.Linq.Expressions.ExpressionType.New","System::Linq::Expressions::ExpressionType::New","System.Linq.Expressions.ExpressionType.NewArrayBounds","System::Linq::Expressions::ExpressionType::NewArrayBounds","System.Linq.Expressions.ExpressionType.NewArrayInit","System::Linq::Expressions::ExpressionType::NewArrayInit","System.Linq.Expressions.ExpressionType.Not","System::Linq::Expressions::ExpressionType::Not","System.Linq.Expressions.ExpressionType.NotEqual","System::Linq::Expressions::ExpressionType::NotEqual","System.Linq.Expressions.ExpressionType.OnesComplement","System::Linq::Expressions::ExpressionType::OnesComplement","System.Linq.Expressions.ExpressionType.Or","System::Linq::Expressions::ExpressionType::Or","System.Linq.Expressions.ExpressionType.OrAssign","System::Linq::Expressions::ExpressionType::OrAssign","System.Linq.Expressions.ExpressionType.OrElse","System::Linq::Expressions::ExpressionType::OrElse","System.Linq.Expressions.ExpressionType.Parameter","System::Linq::Expressions::ExpressionType::Parameter","System.Linq.Expressions.ExpressionType.PostDecrementAssign","System::Linq::Expressions::ExpressionType::PostDecrementAssign","System.Linq.Expressions.ExpressionType.PostIncrementAssign","System::Linq::Expressions::ExpressionType::PostIncrementAssign","System.Linq.Expressions.ExpressionType.Power","System::Linq::Expressions::ExpressionType::Power","System.Linq.Expressions.ExpressionType.PowerAssign","System::Linq::Expressions::ExpressionType::PowerAssign","System.Linq.Expressions.ExpressionType.PreDecrementAssign","System::Linq::Expressions::ExpressionType::PreDecrementAssign","System.Linq.Expressions.ExpressionType.PreIncrementAssign","System::Linq::Expressions::ExpressionType::PreIncrementAssign","System.Linq.Expressions.ExpressionType.Quote","System::Linq::Expressions::ExpressionType::Quote","System.Linq.Expressions.ExpressionType.RightShift","System::Linq::Expressions::ExpressionType::RightShift","System.Linq.Expressions.ExpressionType.RightShiftAssign","System::Linq::Expressions::ExpressionType::RightShiftAssign","System.Linq.Expressions.ExpressionType.RuntimeVariables","System::Linq::Expressions::ExpressionType::RuntimeVariables","System.Linq.Expressions.ExpressionType.Subtract","System::Linq::Expressions::ExpressionType::Subtract","System.Linq.Expressions.ExpressionType.SubtractAssign","System::Linq::Expressions::ExpressionType::SubtractAssign","System.Linq.Expressions.ExpressionType.SubtractAssignChecked","System::Linq::Expressions::ExpressionType::SubtractAssignChecked","System.Linq.Expressions.ExpressionType.SubtractChecked","System::Linq::Expressions::ExpressionType::SubtractChecked","System.Linq.Expressions.ExpressionType.Switch","System::Linq::Expressions::ExpressionType::Switch","System.Linq.Expressions.ExpressionType.Throw","System::Linq::Expressions::ExpressionType::Throw","System.Linq.Expressions.ExpressionType.Try","System::Linq::Expressions::ExpressionType::Try","System.Linq.Expressions.ExpressionType.TypeAs","System::Linq::Expressions::ExpressionType::TypeAs","System.Linq.Expressions.ExpressionType.TypeEqual","System::Linq::Expressions::ExpressionType::TypeEqual","System.Linq.Expressions.ExpressionType.TypeIs","System::Linq::Expressions::ExpressionType::TypeIs","System.Linq.Expressions.ExpressionType.UnaryPlus","System::Linq::Expressions::ExpressionType::UnaryPlus","System.Linq.Expressions.ExpressionType.Unbox","System::Linq::Expressions::ExpressionType::Unbox"],"dev_langs":["csharp"],"updated_at":"2017-03-20 09:40 AM","document_id":"4ef9d480-66e5-8e61-decd-f2a3ded0f68c","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Linq.Expressions/ExpressionType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ExpressionType enum | Microsoft Docs","_op_ogTitle":"ExpressionType enum","description":"Describes the node types for the nodes of an expression tree.\n","toc_asset_id":"_splitted/System.Linq.Expressions/toc.json","toc_rel":"_splitted/System.Linq.Expressions/toc.json","source_url":"","ms.assetid":"System.Linq.Expressions.ExpressionType","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.expressions.expressiontype","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.expressions.expressiontype","fileRelativePath":"System.Linq.Expressions.ExpressionType.html"},"themesRelativePathToOutputRoot":"_themes/"}