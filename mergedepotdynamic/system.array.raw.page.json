{"content":"    \r\n    <h1 id=\"System_Array\">\r\n      <span class=\"lang-csharp\">Array</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/array.cs#156e066ecc4ccedf\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class Array : ICloneable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Array</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/array.cs#156e066ecc4ccedf\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> The Array class is not part of the <a class=\"xref\" href=\"system.collections\" data-linktype=\"relative-path\">System.Collections</a> namespaces. However, it is still considered a collection because it is based on the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.  </p>\n<p> The Array class is the base class for language implementations that support arrays. However, only the system and compilers can derive explicitly from the Array class. Users should employ the array constructs provided by the language.  </p>\n<p> An element is a value in an Array. The length of an Array is the total number of elements it can contain. The lower bound of an Array is the index of its first element. An Array can have any lower bound, but it has a lower bound of zero by default. A different lower bound can be defined when creating an instance of the Array class using <a class=\"xref\" href=\"system.array#System_Array_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a>.A multidimensional Array can have different bounds for each dimension. An array can have a maximum of 32 dimensions.  </p>\n<p> Unlike the classes in the <a class=\"xref\" href=\"system.collections\" data-linktype=\"relative-path\">System.Collections</a> namespaces, Array has a fixed capacity. To increase the capacity, you must create a new Array object with the required capacity, copy the elements from the old Array object to the new one, and delete the old Array.  </p>\n<p> By default, the maximum size of an Array is 2 gigabytes (GB). In a 64-bit environment, you can avoid the size restriction by setting the <code>enabled</code> attribute of the <a href=\"../Topic/%3CgcAllowVeryLargeObjects%3E%20Element.md\" data-linktype=\"relative-path\">gcAllowVeryLargeObjects</a> configuration element to <code>true</code> in the run-time environment. However, the array will still be limited to a total of 4 billion elements, and to a maximum index of 0X7FEFFFFF in any given dimension (0X7FFFFFC7 for byte arrays and arrays of single-byte structures).  </p>\n<p> Starting with the .NET Framework 2.0, the Array class implements the <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">System.Collections.Generic.IList&lt;T&gt;</a>, <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">System.Collections.Generic.ICollection&lt;T&gt;</a>, and <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">System.Collections.Generic.IEnumerable&lt;T&gt;</a> generic interfaces. The implementations are provided to arrays at run time, and as a result, the generic interfaces do not appear in the declaration syntax for the Array class. In addition,  there are no reference topics for interface members that are accessible only by casting an array to the generic interface type (explicit interface implementations). The key thing to be aware of when you cast an array to one of these interfaces is that members which add, insert, or remove elements throw <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.  </p>\n<p> <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects provide information about array type declarations. Array objects with the same array type share the same <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object.  </p>\n<p> <a class=\"xref\" href=\"system.type#System_Type_IsArray_\" data-linktype=\"relative-path\">IsArray</a> and <a class=\"xref\" href=\"system.type#System_Type_GetElementType_\" data-linktype=\"relative-path\">GetElementType</a> might not return the expected results with Array because if an array is cast to the type Array, the result is an object, not an array. That is, <code>typeof(System.Array).IsArray</code> returns <code>false</code>, and <code>typeof(System.Array).GetElementType</code> returns <code>null</code>.  </p>\n<p> The <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> method copies elements not only between arrays of the same type but also between standard arrays of different types; it handles type casting automatically.  </p>\n<p> Some methods, such as <a class=\"xref\" href=\"system.array#System_Array_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a>, <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a>, <a class=\"xref\" href=\"system.array#System_Array_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a>, <a class=\"xref\" href=\"system.array#System_Array_GetValue_\" data-linktype=\"relative-path\">GetValue</a>, and <a class=\"xref\" href=\"system.array#System_Array_SetValue_\" data-linktype=\"relative-path\">SetValue</a>, provide overloads that accept 64-bit integers as parameters to accommodate large capacity arrays. <a class=\"xref\" href=\"system.array#System_Array_LongLength_\" data-linktype=\"relative-path\">LongLength</a> and <a class=\"xref\" href=\"system.array#System_Array_GetLongLength_\" data-linktype=\"relative-path\">GetLongLength</a> return 64-bit integers indicating the length of the array.  </p>\n<p> The Array is not guaranteed to be sorted.  You must sort the Array prior to performing operations (such as <a class=\"xref\" href=\"system.array#System_Array_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a>) that require the Array to be sorted.  </p>\n<p> Using an Array object of pointers in native code is not supported and will throw a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> for several methods.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_IsFixedSize\" data-linktype=\"self-bookmark\">IsFixedSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> has a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_IsSynchronized\" data-linktype=\"self-bookmark\">IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Length\" data-linktype=\"self-bookmark\">Length</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the total number of elements in all the dimensions of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_LongLength\" data-linktype=\"self-bookmark\">LongLength</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a 64-bit integer that represents the total number of elements in all the dimensions of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Rank\" data-linktype=\"self-bookmark\">Rank</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the rank (number of dimensions) of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. For example, a one-dimensional array returns 1, a two-dimensional array returns 2, and so on.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_SyncRoot\" data-linktype=\"self-bookmark\">SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_AsReadOnly__1___0___\" data-linktype=\"self-bookmark\">AsReadOnly&lt;T&gt;(T[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a read-only wrapper for the specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_BinarySearch_System_Array_System_Object_\" data-linktype=\"self-bookmark\">BinarySearch(Array,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches an entire one-dimensional sorted array for a specific element, using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface implemented by each element of the array and by the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_BinarySearch_System_Array_System_Object_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">BinarySearch(Array,Object,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches an entire one-dimensional sorted array for a value using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_BinarySearch_System_Array_System_Int32_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">BinarySearch(Array,Int32,Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches a range of elements in a one-dimensional sorted array for a value, using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface implemented by each element of the array and by the specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_BinarySearch_System_Array_System_Int32_System_Int32_System_Object_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">BinarySearch(Array,Int32,Int32,Object,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches a range of elements in a one-dimensional sorted array for a value, using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_BinarySearch__1___0_____0_\" data-linktype=\"self-bookmark\">BinarySearch&lt;T&gt;(T[],T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches an entire one-dimensional sorted array for a specific element, using the <span class=\"xref\">stem.IComparable`1</span> generic interface implemented by each element of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> and by the specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_BinarySearch__1___0_____0_System_Collections_Generic_IComparer___0__\" data-linktype=\"self-bookmark\">BinarySearch&lt;T&gt;(T[],T,IComparer&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches an entire one-dimensional sorted array for a value using the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_BinarySearch__1___0___System_Int32_System_Int32___0_\" data-linktype=\"self-bookmark\">BinarySearch&lt;T&gt;(T[],Int32,Int32,T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches a range of elements in a one-dimensional sorted array for a value, using the <span class=\"xref\">stem.IComparable`1</span> generic interface implemented by each element of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> and by the specified value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_BinarySearch__1___0___System_Int32_System_Int32___0_System_Collections_Generic_IComparer___0__\" data-linktype=\"self-bookmark\">BinarySearch&lt;T&gt;(T[],Int32,Int32,T,IComparer&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches a range of elements in a one-dimensional sorted array for a value, using the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Clear_System_Array_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Clear(Array,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a range of elements in an array to the default value of each element type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a shallow copy of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_ConstrainedCopy_System_Array_System_Int32_System_Array_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ConstrainedCopy(Array,Int32,Array,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a range of elements from an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the specified source index and pastes them to another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_ConvertAll__2___0___System_Converter___0___1__\" data-linktype=\"self-bookmark\">ConvertAll&lt;TInput,TOutput&gt;(TInput[],Converter&lt;TInput,TOutput&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an array of one type to an array of another type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Copy_System_Array_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">Copy(Array,Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a range of elements from an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the first element and pastes them into another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the first element. The length is specified as a 32-bit integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Copy_System_Array_System_Array_System_Int64_\" data-linktype=\"self-bookmark\">Copy(Array,Array,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a range of elements from an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the first element and pastes them into another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the first element. The length is specified as a 64-bit integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Copy_System_Array_System_Int32_System_Array_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Copy(Array,Int32,Array,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a range of elements from an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the specified source index and pastes them to another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Copy_System_Array_System_Int64_System_Array_System_Int64_System_Int64_\" data-linktype=\"self-bookmark\">Copy(Array,Int64,Array,Int64,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a range of elements from an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the specified source index and pastes them to another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 32-bit integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_CopyTo_System_Array_System_Int64_\" data-linktype=\"self-bookmark\">CopyTo(Array,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 64-bit integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_CreateInstance_System_Type_System_Int32_\" data-linktype=\"self-bookmark\">CreateInstance(Type,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and length, with zero-based indexing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_CreateInstance_System_Type_System_Int32___\" data-linktype=\"self-bookmark\">CreateInstance(Type,Int32[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_CreateInstance_System_Type_System_Int64___\" data-linktype=\"self-bookmark\">CreateInstance(Type,Int64[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 64-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_CreateInstance_System_Type_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">CreateInstance(Type,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and dimension lengths, with zero-based indexing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_CreateInstance_System_Type_System_Int32___System_Int32___\" data-linktype=\"self-bookmark\">CreateInstance(Type,Int32[],Int32[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and dimension lengths, with the specified lower bounds.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_CreateInstance_System_Type_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">CreateInstance(Type,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and dimension lengths, with zero-based indexing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Empty__1\" data-linktype=\"self-bookmark\">Empty&lt;T&gt;()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an empty array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Exists__1___0___System_Predicate___0__\" data-linktype=\"self-bookmark\">Exists&lt;T&gt;(T[],Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified array contains elements that match the conditions defined by the specified predicate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Find__1___0___System_Predicate___0__\" data-linktype=\"self-bookmark\">Find&lt;T&gt;(T[],Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_FindAll__1___0___System_Predicate___0__\" data-linktype=\"self-bookmark\">FindAll&lt;T&gt;(T[],Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves all the elements that match the conditions defined by the specified predicate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_FindIndex__1___0___System_Predicate___0__\" data-linktype=\"self-bookmark\">FindIndex&lt;T&gt;(T[],Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_FindIndex__1___0___System_Int32_System_Predicate___0__\" data-linktype=\"self-bookmark\">FindIndex&lt;T&gt;(T[],Int32,Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that extends from the specified index to the last element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_FindIndex__1___0___System_Int32_System_Int32_System_Predicate___0__\" data-linktype=\"self-bookmark\">FindIndex&lt;T&gt;(T[],Int32,Int32,Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that starts at the specified index and contains the specified number of elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_FindLast__1___0___System_Predicate___0__\" data-linktype=\"self-bookmark\">FindLast&lt;T&gt;(T[],Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_FindLastIndex__1___0___System_Predicate___0__\" data-linktype=\"self-bookmark\">FindLastIndex&lt;T&gt;(T[],Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_FindLastIndex__1___0___System_Int32_System_Predicate___0__\" data-linktype=\"self-bookmark\">FindLastIndex&lt;T&gt;(T[],Int32,Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that extends from the first element to the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_FindLastIndex__1___0___System_Int32_System_Int32_System_Predicate___0__\" data-linktype=\"self-bookmark\">FindLastIndex&lt;T&gt;(T[],Int32,Int32,Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the specified number of elements and ends at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_ForEach__1___0___System_Action___0__\" data-linktype=\"self-bookmark\">ForEach&lt;T&gt;(T[],Action&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs the specified action on each element of the specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetLength_System_Int32_\" data-linktype=\"self-bookmark\">GetLength(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a 32-bit integer that represents the number of elements in the specified dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetLongLength_System_Int32_\" data-linktype=\"self-bookmark\">GetLongLength(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a 64-bit integer that represents the number of elements in the specified dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetLowerBound_System_Int32_\" data-linktype=\"self-bookmark\">GetLowerBound(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the index of the first element of the specified dimension in the array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetUpperBound_System_Int32_\" data-linktype=\"self-bookmark\">GetUpperBound(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the index of the last element of the specified dimension in the array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetValue_System_Int32_\" data-linktype=\"self-bookmark\">GetValue(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value at the specified position in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The index is specified as a 32-bit integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetValue_System_Int32___\" data-linktype=\"self-bookmark\">GetValue(Int32[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value at the specified position in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as an array of 32-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetValue_System_Int64_\" data-linktype=\"self-bookmark\">GetValue(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value at the specified position in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The index is specified as a 64-bit integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetValue_System_Int64___\" data-linktype=\"self-bookmark\">GetValue(Int64[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value at the specified position in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as an array of 64-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetValue_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetValue(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value at the specified position in the two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 32-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetValue_System_Int64_System_Int64_\" data-linktype=\"self-bookmark\">GetValue(Int64,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value at the specified position in the two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 64-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetValue_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetValue(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value at the specified position in the three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 32-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_GetValue_System_Int64_System_Int64_System_Int64_\" data-linktype=\"self-bookmark\">GetValue(Int64,Int64,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value at the specified position in the three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 64-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_IndexOf_System_Array_System_Object_\" data-linktype=\"self-bookmark\">IndexOf(Array,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_IndexOf_System_Array_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(Array,Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_IndexOf_System_Array_System_Object_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf(Array,Object,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence. The range extends from a specified index for a specified number of elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_IndexOf__1___0_____0_\" data-linktype=\"self-bookmark\">IndexOf&lt;T&gt;(T[],T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_IndexOf__1___0_____0_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf&lt;T&gt;(T[],T,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_IndexOf__1___0_____0_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IndexOf&lt;T&gt;(T[],T,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index for a specified number of elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Initialize\" data-linktype=\"self-bookmark\">Initialize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes every element of the value-type <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> by calling the default constructor of the value type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_LastIndexOf_System_Array_System_Object_\" data-linktype=\"self-bookmark\">LastIndexOf(Array,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_LastIndexOf_System_Array_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(Array,Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that extends from the first element to the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_LastIndexOf_System_Array_System_Object_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf(Array,Object,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the specified number of elements and ends at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_LastIndexOf__1___0_____0_\" data-linktype=\"self-bookmark\">LastIndexOf&lt;T&gt;(T[],T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the index of the last occurrence within the entire <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_LastIndexOf__1___0_____0_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf&lt;T&gt;(T[],T,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that extends from the first element to the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_LastIndexOf__1___0_____0_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">LastIndexOf&lt;T&gt;(T[],T,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the specified number of elements and ends at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Resize__1___0____System_Int32_\" data-linktype=\"self-bookmark\">Resize&lt;T&gt;(T[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the number of elements of a one-dimensional array to the specified new size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Reverse_System_Array_\" data-linktype=\"self-bookmark\">Reverse(Array)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reverses the sequence of the elements in the entire one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Reverse_System_Array_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Reverse(Array,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reverses the sequence of the elements in a range of elements in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_SetValue_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">SetValue(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a value to the element at the specified position in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The index is specified as a 32-bit integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_SetValue_System_Object_System_Int32___\" data-linktype=\"self-bookmark\">SetValue(Object,Int32[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a value to the element at the specified position in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as an array of 32-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_SetValue_System_Object_System_Int64_\" data-linktype=\"self-bookmark\">SetValue(Object,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a value to the element at the specified position in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The index is specified as a 64-bit integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_SetValue_System_Object_System_Int64___\" data-linktype=\"self-bookmark\">SetValue(Object,Int64[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a value to the element at the specified position in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as an array of 64-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_SetValue_System_Object_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">SetValue(Object,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a value to the element at the specified position in the two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 32-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_SetValue_System_Object_System_Int64_System_Int64_\" data-linktype=\"self-bookmark\">SetValue(Object,Int64,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a value to the element at the specified position in the two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 64-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_SetValue_System_Object_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">SetValue(Object,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a value to the element at the specified position in the three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 32-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_SetValue_System_Object_System_Int64_System_Int64_System_Int64_\" data-linktype=\"self-bookmark\">SetValue(Object,Int64,Int64,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a value to the element at the specified position in the three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 64-bit integers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort_System_Array_\" data-linktype=\"self-bookmark\">Sort(Array)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in an entire one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort_System_Array_System_Array_\" data-linktype=\"self-bookmark\">Sort(Array,Array)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts a pair of one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort_System_Array_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">Sort(Array,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort_System_Array_System_Array_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">Sort(Array,Array,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts a pair of one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort_System_Array_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Sort(Array,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in a range of elements in a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort_System_Array_System_Array_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Sort(Array,Array,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts a range of elements in a pair of one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort_System_Array_System_Int32_System_Int32_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">Sort(Array,Int32,Int32,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in a range of elements in a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort_System_Array_System_Array_System_Int32_System_Int32_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">Sort(Array,Array,Int32,Int32,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts a range of elements in a pair of one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort__1___0___\" data-linktype=\"self-bookmark\">Sort&lt;T&gt;(T[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in an entire <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <span class=\"xref\">stem.IComparable`1</span> generic interface implementation of each element of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort__1___0___System_Collections_Generic_IComparer___0__\" data-linktype=\"self-bookmark\">Sort&lt;T&gt;(T[],IComparer&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort__1___0___System_Comparison___0__\" data-linktype=\"self-bookmark\">Sort&lt;T&gt;(T[],Comparison&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <span class=\"xref\">stem.Comparison`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort__1___0___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Sort&lt;T&gt;(T[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in a range of elements in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <span class=\"xref\">stem.IComparable`1</span> generic interface implementation of each element of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort__1___0___System_Int32_System_Int32_System_Collections_Generic_IComparer___0__\" data-linktype=\"self-bookmark\">Sort&lt;T&gt;(T[],Int32,Int32,IComparer&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts the elements in a range of elements in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort__2___0_____1___\" data-linktype=\"self-bookmark\">Sort&lt;TKey,TValue&gt;(TKey[],TValue[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts a pair of <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <span class=\"xref\">stem.IComparable`1</span> generic interface implementation of each key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort__2___0_____1___System_Collections_Generic_IComparer___0__\" data-linktype=\"self-bookmark\">Sort&lt;TKey,TValue&gt;(TKey[],TValue[],IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts a pair of <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort__2___0_____1___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Sort&lt;TKey,TValue&gt;(TKey[],TValue[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts a range of elements in a pair of <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <span class=\"xref\">stem.IComparable`1</span> generic interface implementation of each key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_Sort__2___0_____1___System_Int32_System_Int32_System_Collections_Generic_IComparer___0__\" data-linktype=\"self-bookmark\">Sort&lt;TKey,TValue&gt;(TKey[],TValue[],Int32,Int32,IComparer&lt;TKey&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sorts a range of elements in a pair of <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_TrueForAll__1___0___System_Predicate___0__\" data-linktype=\"self-bookmark\">TrueForAll&lt;T&gt;(T[],Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether every element in the array matches the conditions defined by the specified predicate.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_System_Collections_ICollection_Count\" data-linktype=\"self-bookmark\">ICollection.Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements contained in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_System_Collections_IList_Add_System_Object_\" data-linktype=\"self-bookmark\">IList.Add(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calling this method always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_System_Collections_IList_Clear\" data-linktype=\"self-bookmark\">IList.Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all items from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_System_Collections_IList_Contains_System_Object_\" data-linktype=\"self-bookmark\">IList.Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether an element is in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_System_Collections_IList_IndexOf_System_Object_\" data-linktype=\"self-bookmark\">IList.IndexOf(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines the index of a specific item in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_System_Collections_IList_Insert_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">IList.Insert(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts an item to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_System_Collections_IList_Item_System_Int32_\" data-linktype=\"self-bookmark\">IList.Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_System_Collections_IList_Remove_System_Object_\" data-linktype=\"self-bookmark\">IList.Remove(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_System_Collections_IList_RemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">IList.RemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> item at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">IStructuralComparable.CompareTo(Object,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.Equals(Object,IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether an object is equal to the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Array_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\" data-linktype=\"self-bookmark\">IStructuralEquatable.GetHashCode(IEqualityComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a hash code for the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Array_IsFixedSize\">\r\n    \r\n            <a id=\"System_Array_IsFixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFixedSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> has a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFixedSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This property is always <code>true</code> for all arrays.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> implements the IsFixedSize property because it is required by the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">System.Collections.IList</a> interface.  </p>\n<p> An array with a fixed size does not allow the addition or removal of elements after the array is created, but it allows the modification of existing elements.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_IsReadOnly\">\r\n    \r\n            <a id=\"System_Array_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This property is always <code>false</code> for all arrays.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> implements the IsReadOnly property because it is required by the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">System.Collections.IList</a> interface. An array that is read-only does not allow the addition, removal, or modification of elements after the array is created.  </p>\n<p> If you require a read-only collection, use a <a class=\"xref\" href=\"system.collections\" data-linktype=\"relative-path\">System.Collections</a> class that implements the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">System.Collections.IList</a> interface.  </p>\n<p> If you cast or convert an array to an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface object, the <a class=\"xref\" href=\"system.collections.ilist#System_Collections_IList_IsReadOnly_\" data-linktype=\"relative-path\">IsReadOnly</a> property returns <code>false</code>. However, if you cast or convert an array to a <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> interface, the <code>IsReadOnly</code> property returns <code>true</code>.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_IsSynchronized\">\r\n    \r\n            <a id=\"System_Array_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This property is always <code>false</code> for all arrays.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> implements the IsSynchronized property because it is required by the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">System.Collections.ICollection</a> interface.  </p>\n<p> .NET Framework classes based on <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> provide their own synchronized version of the collection using the <a class=\"xref\" href=\"system.array#System_Array_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property.  </p>\n<p> Classes that use arrays can also implement their own synchronization using the <a class=\"xref\" href=\"system.array#System_Array_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property. The synchronizing code must perform operations on the <code>SyncRoot</code> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection. Note that some implementations of <a class=\"xref\" href=\"system.array#System_Array_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> might return the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> itself.  </p>\n<p> Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock an array during the entire enumeration by using the <a class=\"xref\" href=\"system.array#System_Array_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a>property.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.SyncRoot#1\">        Array^ myArray = gcnew array&lt;Int32&gt; { 1, 2, 4 };\n        try\n        {\n            Monitor::Enter(myArray-&gt;SyncRoot); \n                \n            for each (Int32 item in myArray)\n                Console::WriteLine(item);\n        }\n        finally\n        {\n            Monitor::Exit(myArray-&gt;SyncRoot);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.SyncRoot#1\">        Dim myArray As Array = New Integer() { 1, 2, 4 }\n        SyncLock(myArray.SyncRoot) \n            For Each item As Object In myArray\n                Console.WriteLine(item)\n            Next\n        End SyncLock\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.SyncRoot#1\">        Array myArray = new int[] { 1, 2, 4 };\n        lock(myArray.SyncRoot) \n        {\n            foreach (Object item in myArray)\n                Console.WriteLine(item);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Length\">\r\n    \r\n            <a id=\"System_Array_Length_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Length</div>        \r\n          </div>\r\n    \r\n            <p>Gets the total number of elements in all the dimensions of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Length { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The total number of elements in all the dimensions of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>; zero if there are no elements in the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The array is multidimensional and contains more than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the                                 Length property to get the total number of elements in an array. It also uses the                                 <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> method to determine the number of elements in each dimension of a multidimensional array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Array.Length#1\">Module Example\n    Public Sub Main()\n        &#39; Declare a single-dimensional string array\n        Dim array1d() As String = {&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot;}\n        ShowArrayInfo(array1d)\n\n        &#39; Declare a two-dimensional string array\n        Dim array2d(,) As String = {{&quot;zero&quot;, &quot;0&quot;}, {&quot;one&quot;, &quot;1&quot;},\n                                     {&quot;two&quot;, &quot;2&quot;}, {&quot;three&quot;, &quot;3&quot;},\n                                     {&quot;four&quot;, &quot;4&quot;}, {&quot;five&quot;, &quot;5&quot;}}\n        ShowArrayInfo(array2d)\n\n        &#39; Declare a three-dimensional integer array  \n        Dim array3d(,,) As Integer = New Integer(,,) {{{1, 2, 3}, {4, 5, 6}},\n                                        {{7, 8, 9}, {10, 11, 12}}}\n        ShowArrayInfo(array3d)\n\n    End Sub\n\n    Private Sub ShowArrayInfo(arr As Array)\n        Console.WriteLine(&quot;Length of Array:      {0,3}&quot;, arr.Length)\n        Console.WriteLine(&quot;Number of Dimensions: {0,3}&quot;, arr.Rank)\n        &#39; For multidimensional arrays, show number of elements in each dimension.\n        If arr.Rank &gt; 1 Then\n            For dimension As Integer = 1 To arr.Rank\n                Console.WriteLine(&quot;   Dimension {0}: {1,3}&quot;, dimension,\n                                  arr.GetUpperBound(dimension - 1) + 1)\n            Next\n        End If\n        Console.WriteLine()\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Length of Array:        4\n&#39;       Number of Dimensions:   1\n&#39;       \n&#39;       Length of Array:       12\n&#39;       Number of Dimensions:   2\n&#39;          Dimension 1:   6\n&#39;          Dimension 2:   2\n&#39;       \n&#39;       Length of Array:       12\n&#39;       Number of Dimensions:   3\n&#39;          Dimension 1:   2\n&#39;          Dimension 2:   2\n&#39;          Dimension 3:   3\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.Length#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Declare a single-dimensional string array\n        String[] array1d = { &quot;zero&quot;, &quot;one&quot;, &quot;two&quot;, &quot;three&quot; };\n        ShowArrayInfo(array1d);\n\n        // Declare a two-dimensional string array\n        String[,] array2d = { { &quot;zero&quot;, &quot;0&quot; }, { &quot;one&quot;, &quot;1&quot; }, \n                           { &quot;two&quot;, &quot;2&quot; }, { &quot;three&quot;, &quot;3&quot;},\n                           { &quot;four&quot;, &quot;4&quot; }, { &quot;five&quot;, &quot;5&quot; } };\n        ShowArrayInfo(array2d);\n\n        // Declare a three-dimensional integer array  \n        int[, ,] array3d = new int[,,] { { { 1, 2, 3 }, { 4, 5, 6 } }, \n                                       { { 7, 8, 9 }, { 10, 11, 12 } } };\n        ShowArrayInfo(array3d);\n    }\n\n    private static void ShowArrayInfo(Array arr)\n    {\n        Console.WriteLine(&quot;Length of Array:      {0,3}&quot;, arr.Length);\n        Console.WriteLine(&quot;Number of Dimensions: {0,3}&quot;, arr.Rank);\n        // For multidimensional arrays, show number of elements in each dimension.\n        if (arr.Rank &gt; 1) {\n            for (int dimension = 1; dimension &lt;= arr.Rank; dimension++)\n                Console.WriteLine(&quot;   Dimension {0}: {1,3}&quot;, dimension,\n                                  arr.GetUpperBound(dimension - 1) + 1);\n        }\n        Console.WriteLine();\n    }\n}\n// The example displays the following output:\n//       Length of Array:        4\n//       Number of Dimensions:   1\n//       \n//       Length of Array:       12\n//       Number of Dimensions:   2\n//          Dimension 1:   6\n//          Dimension 2:   2\n//       \n//       Length of Array:       12\n//       Number of Dimensions:   3\n//          Dimension 1:   2\n//          Dimension 2:   2\n//          Dimension 3:   3\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_LongLength\">\r\n    \r\n            <a id=\"System_Array_LongLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LongLength</div>        \r\n          </div>\r\n    \r\n            <p>Gets a 64-bit integer that represents the total number of elements in all the dimensions of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long LongLength { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit integer that represents the total number of elements in all the dimensions of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Rank\">\r\n    \r\n            <a id=\"System_Array_Rank_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rank</div>        \r\n          </div>\r\n    \r\n            <p>Gets the rank (number of dimensions) of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. For example, a one-dimensional array returns 1, a two-dimensional array returns 2, and so on.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Rank { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The rank (number of dimensions) of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For example, the Visual Basic code  </p>\n<pre><code>Dim TDArray(0,0,0) As Integer\n</code></pre><p> and the C# code  </p>\n<pre><code>int[,,] TDArray = new int[1,1,1];\n</code></pre><p> create an array of three dimensions with a Rank property whose value is 3.  </p>\n<p> A jagged array (an array of arrays) is a one-dimensional array; the value of its Rank property is 1.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example initializes a one-dimensional array, a two-dimensional array, and a jagged array, and retrieves the Rank property of each.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Array.Rank#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int[] array1 = new int[10];\n      int[,] array2= new int[10,3];  \n      int[][] array3 = new int[10][]; \n      \n      Console.WriteLine(&quot;{0}: {1} dimension(s)&quot;, \n                        array1.ToString(), array1.Rank);\n      Console.WriteLine(&quot;{0}: {1} dimension(s)&quot;, \n                        array2.ToString(), array2.Rank);\n      Console.WriteLine(&quot;{0}: {1} dimension(s)&quot;, \n                        array3.ToString(), array3.Rank);\n   }\n}\n// The example displays the following output:\n//       System.Int32[]: 1 dimension\n//       System.Int32[,]: 2 dimension\n//       System.Int32[][]: 1 dimension\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Rank#1\">Module Example\n   Public Sub Main()\n      Dim array1(9) As Integer \n      Dim array2(9,2) As Integer  \n      Dim array3(9)() As Integer \n      \n      Console.WriteLine(&quot;{0}: {1} dimension(s)&quot;, \n                        array1.ToString(), array1.Rank)\n      Console.WriteLine(&quot;{0}: {1} dimension(s)&quot;, \n                        array2.ToString(), array2.Rank)\n      Console.WriteLine(&quot;{0}: {1} dimension(s)&quot;, \n                        array3.ToString(), array3.Rank)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       System.Int32[]: 1 dimension\n&#39;       System.Int32[,]: 2 dimension\n&#39;       System.Int32[][]: 1 dimension\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_SyncRoot\">\r\n    \r\n            <a id=\"System_Array_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property implements the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">System.Collections.ICollection</a> interface.  </p>\n<p> .NET Framework classes based on <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> provide their own synchronized version of the collection using the SyncRoot property.  </p>\n<p> Classes that use arrays can also implement their own synchronization using the SyncRoot property. The synchronizing code must perform operations on the <code>SyncRoot</code> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection. Note that some implementations of SyncRoot might return the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> itself.  </p>\n<p> Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock an array during the entire enumeration by using the SyncRoot property.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.SyncRoot#1\">        Array^ myArray = gcnew array&lt;Int32&gt; { 1, 2, 4 };\n        try\n        {\n            Monitor::Enter(myArray-&gt;SyncRoot); \n                \n            for each (Int32 item in myArray)\n                Console::WriteLine(item);\n        }\n        finally\n        {\n            Monitor::Exit(myArray-&gt;SyncRoot);\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.SyncRoot#1\">        Dim myArray As Array = New Integer() { 1, 2, 4 }\n        SyncLock(myArray.SyncRoot) \n            For Each item As Object In myArray\n                Console.WriteLine(item)\n            Next\n        End SyncLock\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.SyncRoot#1\">        Array myArray = new int[] { 1, 2, 4 };\n        lock(myArray.SyncRoot) \n        {\n            foreach (Object item in myArray)\n                Console.WriteLine(item);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Array_AsReadOnly__1___0___\">\r\n    \r\n            <a id=\"System_Array_AsReadOnly_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AsReadOnly&lt;T&gt;(T[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns a read-only wrapper for the specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly&lt;T&gt; (T[] array);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based array to wrap in a read-only <span class=\"xref\">stem.Collections.ObjectModel.ReadOnlyCollection`1</span> wrapper.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.objectmodel.readonlycollection-1\" data-linktype=\"relative-path\">ReadOnlyCollection<t></t></a></div>\r\n                  </div>\r\n                  <p>A read-only <span class=\"xref\">stem.Collections.ObjectModel.ReadOnlyCollection`1</span> wrapper for the specified array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To prevent any modifications to the array, expose the array only through this wrapper.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example wraps an array in a read-only <a class=\"xref\" href=\"system.collections.objectmodel.readonlycollection-1\" data-linktype=\"relative-path\">ReadOnlyCollection&lt;T&gt;</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.AsReadOnly#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nnamespace Samples\n{\n    public ref class SamplesArray\n    {\n    public:\n        static void Work()\n        {\n\n            // Create and initialize a new string array.\n            array &lt;String^&gt;^ textArray = \n                {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;};\n\n            // Display the values of the array.\n            Console::WriteLine(&quot;The string array initially contains &quot;\n                &quot;the following values:&quot;);\n            PrintIndexAndValues(textArray);\n\n            // Create a read-only IList wrapper around the array.\n            IList &lt;String^&gt;^ textList = Array::AsReadOnly(textArray);\n\n            // Display the values of the read-only IList.\n            Console::WriteLine(&quot;The read-only IList contains &quot; \n                &quot;the following values:&quot;);\n            PrintIndexAndValues(textList);\n\n            // Attempt to change a value through the wrapper.\n            try\n            {\n                textList[3] = &quot;CAT&quot;;\n            }\n            catch (NotSupportedException^ ex) \n            {\n                Console::WriteLine(&quot;{0} - {1}&quot;, ex-&gt;GetType(), \n                    ex-&gt;Message);\n                Console::WriteLine();\n            }\n\n\n            // Change a value in the original array.\n            textArray[2] = &quot;RED&quot;;\n\n            // Display the values of the array.\n            Console::WriteLine(&quot;After changing the third element,&quot; \n                &quot;the string array contains the following values:&quot;);\n            PrintIndexAndValues(textArray);\n\n            // Display the values of the read-only IList.\n            Console::WriteLine(&quot;After changing the third element, the&quot; \n                &quot; read-only IList contains the following values:&quot;);\n            PrintIndexAndValues(textList);\n        }\n\n        static void PrintIndexAndValues(array&lt;String^&gt;^ textArray)\n        {\n            for (int i = 0; i &lt; textArray-&gt;Length; i++)\n            {\n                Console::WriteLine(&quot;   [{0}] : {1}&quot;, i, textArray[i]);\n            }\n            Console::WriteLine();\n        }\n\n        static void PrintIndexAndValues(IList&lt;String^&gt;^ textList)\n        {\n            for (int i = 0; i &lt; textList-&gt;Count; i++)\n            {\n                Console::WriteLine(&quot;   [{0}] : {1}&quot;, i, textList[i]);\n            }\n            Console::WriteLine();\n        }\n    };\n}\n\nint main()\n{\n    Samples::SamplesArray::Work();\n\n}\n\n/* \nThis code produces the following output.\n\nThe string array initially contains the following values:\n[0] : The\n[1] : quick\n[2] : brown\n[3] : fox\n\nThe read-only IList contains the following values:\n[0] : The\n[1] : quick\n[2] : brown\n[3] : fox\n\nSystem.NotSupportedException - Collection is read-only.\n\nAfter changing the third element, the string array contains the following values:\n[0] : The\n[1] : quick\n[2] : RED\n[3] : fox\n\nAfter changing the third element, the read-only IList contains the following values:\n[0] : The\n[1] : quick\n[2] : RED\n[3] : fox\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.AsReadOnly#1\">using System;\nusing System.Collections.Generic;\n\npublic class SamplesArray  {\n \n   public static void Main()  {\n \n      // Create and initialize a new string array.\n      String[] myArr = { &quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot; };\n \n      // Display the values of the array.\n      Console.WriteLine( &quot;The string array initially contains the following values:&quot; );\n      PrintIndexAndValues( myArr );\n\n      // Create a read-only IList wrapper around the array.\n      IList&lt;String&gt; myList = Array.AsReadOnly( myArr );\n      \n      // Display the values of the read-only IList.\n      Console.WriteLine( &quot;The read-only IList contains the following values:&quot; );\n      PrintIndexAndValues( myList );\n\n      // Attempt to change a value through the wrapper.\n      try  {\n         myList[3] = &quot;CAT&quot;;\n      }\n      catch ( NotSupportedException e )  {\n         Console.WriteLine( &quot;{0} - {1}&quot;, e.GetType(), e.Message );\n         Console.WriteLine();\n      }\n\n      // Change a value in the original array.\n      myArr[2] = &quot;RED&quot;;\n\n      // Display the values of the array.\n      Console.WriteLine( &quot;After changing the third element, the string array contains the following values:&quot; );\n      PrintIndexAndValues( myArr );\n\n      // Display the values of the read-only IList.\n      Console.WriteLine( &quot;After changing the third element, the read-only IList contains the following values:&quot; );\n      PrintIndexAndValues( myList );\n\n   }\n \n   public static void PrintIndexAndValues( String[] myArr )  {\n      for ( int i = 0; i &lt; myArr.Length; i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, myArr[i] );\n      }\n      Console.WriteLine();\n   }\n\n   public static void PrintIndexAndValues( IList&lt;String&gt; myList )  {\n      for ( int i = 0; i &lt; myList.Count; i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, myList[i] );\n      }\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nThe string array initially contains the following values:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n\nThe read-only IList contains the following values:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n\nSystem.NotSupportedException - Collection is read-only.\n\nAfter changing the third element, the string array contains the following values:\n   [0] : The\n   [1] : quick\n   [2] : RED\n   [3] : fox\n\nAfter changing the third element, the read-only IList contains the following values:\n   [0] : The\n   [1] : quick\n   [2] : RED\n   [3] : fox\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.AsReadOnly#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class SamplesArray\n\n    Public Shared Sub Main()\n\n        &#39; Create and initialize a new string array.\n        Dim myArr As String() =  {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;}\n\n        &#39; Display the values of the array.\n        Console.WriteLine(&quot;The string array initially contains the following values:&quot;)\n        PrintIndexAndValues(myArr)\n\n        &#39; Create a read-only IList wrapper around the array.\n        Dim myList As IList(Of String) = Array.AsReadOnly(myArr) &#39;\n\n        &#39; Display the values of the read-only IList.\n        Console.WriteLine(&quot;The read-only IList contains the following values:&quot;)\n        PrintIndexAndValues(myList)\n\n        &#39; Attempt to change a value through the wrapper.\n        Try\n            myList(3) = &quot;CAT&quot;\n        Catch e As NotSupportedException\n            Console.WriteLine(&quot;{0} - {1}&quot;, e.GetType(), e.Message)\n            Console.WriteLine()\n        End Try\n\n        &#39; Change a value in the original array.\n        myArr(2) = &quot;RED&quot;\n\n        &#39; Display the values of the array.\n        Console.WriteLine(&quot;After changing the third element, the string array contains the following values:&quot;)\n        PrintIndexAndValues(myArr)\n\n        &#39; Display the values of the read-only IList.\n        Console.WriteLine(&quot;After changing the third element, the read-only IList contains the following values:&quot;)\n        PrintIndexAndValues(myList)\n\n    End Sub &#39;Main\n\n    Overloads Public Shared Sub PrintIndexAndValues(myArr() As String)\n        Dim i As Integer\n        For i = 0 To myArr.Length - 1\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, myArr(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n    Overloads Public Shared Sub PrintIndexAndValues(myList As IList(Of String))\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, myList(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The string array initially contains the following values:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;\n&#39;The read-only IList contains the following values:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;\n&#39;System.NotSupportedException - Collection is read-only.\n&#39;\n&#39;After changing the third element, the string array contains the following values:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : RED\n&#39;   [3] : fox\n&#39;\n&#39;After changing the third element, the read-only IList contains the following values:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : RED\n&#39;   [3] : fox\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_BinarySearch_System_Array_System_Object_\">\r\n    \r\n            <a id=\"System_Array_BinarySearch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch(Array,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Searches an entire one-dimensional sorted array for a specific element, using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface implemented by each element of the array and by the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int BinarySearch (Array array, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sorted one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is of a type that is not compatible with the elements of <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, and the search encounters an element that does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not support searching arrays that contain negative indexes. <code>array</code> must be sorted before calling this method.  </p>\n<p> If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, <code>Not</code> in Visual Basic) to the negative result  to produce an index. If this index is one greater than the upper bound of the array, there are no elements larger than <code>value</code> in the array. Otherwise, it is the index of the first element that is larger than <code>value</code>.  </p>\n<p> Either <code>value</code> or every element of <code>array</code> must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, which is used for comparisons. The elements of <code>array</code> must already be sorted in increasing value according to the sort order defined by the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation; otherwise, the result might be incorrect.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If<code>value</code> does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, the elements of <code>array</code> are not tested for <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> before the search begins. An exception is thrown if the search encounters an element that does not implement <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>.  </p>\n</div>\n<p> Duplicate elements are allowed. If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> contains more than one element equal to <code>value</code>, the method returns the index of only one of the occurrences, and not necessarily the first one.  </p>\n<p> <code>null</code> can always be compared with any other reference type; therefore, comparisons with <code>null</code> do not generate an exception.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For every element tested, <code>value</code> is passed to the appropriate <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation, even if <code>value</code> is <code>null</code>. That is, the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation determines how a given element compares to <code>null</code>.  </p>\n</div>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use <a class=\"xref\" href=\"system.array#System_Array_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> to locate a specific object in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The array is created with its elements in ascending sort order. The <a class=\"xref\" href=\"system.array#System_Array_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> method requires the array to be sorted in ascending order.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"Classic Array.BinarySearch Example#1\">using namespace System;\n\npublic ref class SamplesArray\n{\npublic:\n    static void Main()\n    {\n        // Creates and initializes a new Array.\n        Array^ myIntArray = Array::CreateInstance(Int32::typeid, 5);\n\n        myIntArray-&gt;SetValue(8, 0);\n        myIntArray-&gt;SetValue(2, 1);\n        myIntArray-&gt;SetValue(6, 2);\n        myIntArray-&gt;SetValue(3, 3);\n        myIntArray-&gt;SetValue(7, 4);\n\n        // Do the required sort first\n        Array::Sort(myIntArray);\n\n        // Displays the values of the Array.\n        Console::WriteLine(&quot;The Int32 array contains the following:&quot;);\n        PrintValues(myIntArray);\n\n        // Locates a specific object that does not exist in the Array.\n        Object^ myObjectOdd = 1;\n        FindMyObject(myIntArray, myObjectOdd);\n\n        // Locates an object that exists in the Array.\n        Object^ myObjectEven = 6;\n        FindMyObject(myIntArray, myObjectEven);\n    }\n\n    static void FindMyObject(Array^ myArr, Object^ myObject)\n    {\n        int myIndex = Array::BinarySearch(myArr, myObject);\n        if (myIndex &lt; 0)\n        {\n            Console::WriteLine(&quot;The object to search for ({0}) is not found. The next larger object is at index {1}.&quot;, myObject, ~myIndex);\n        }\n        else\n        {\n            Console::WriteLine(&quot;The object to search for ({0}) is at index {1}.&quot;, myObject, myIndex);\n        }\n    }\n\n    static void PrintValues(Array^ myArr)\n    {\n        int i = 0;\n        int cols = myArr-&gt;GetLength(myArr-&gt;Rank - 1);\n        for each (Object^ o in myArr)\n        {\n            if ( i &lt; cols )\n            {\n                i++;\n            }\n            else\n            {\n                Console::WriteLine();\n                i = 1;\n            }\n            Console::Write(&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, o);\n        }\n        Console::WriteLine();\n    }\n};\n\nint main()\n{\n    SamplesArray::Main();\n}\n// This code produces the following output.\n//\n//The Int32 array contains the following:\n//        2       3       6       7       8\n//The object to search for (1) is not found. The next larger object is at index 0\n//\n//The object to search for (6) is at index 2.\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.BinarySearch Example#1\">using System;\n\npublic class SamplesArray\n{\n    public static void Main()\n    {\n        // Creates and initializes a new Array.\n        Array myIntArray = Array.CreateInstance(typeof(Int32), 5);\n\n        myIntArray.SetValue(8, 0);\n        myIntArray.SetValue(2, 1);\n        myIntArray.SetValue(6, 2);\n        myIntArray.SetValue(3, 3);\n        myIntArray.SetValue(7, 4);\n\n        // Do the required sort first\n        Array.Sort(myIntArray);\n\n        // Displays the values of the Array.\n        Console.WriteLine( &quot;The Int32 array contains the following:&quot; );\n        PrintValues(myIntArray);\n\n        // Locates a specific object that does not exist in the Array.\n        object myObjectOdd = 1;\n        FindMyObject( myIntArray, myObjectOdd );\n\n        // Locates an object that exists in the Array.\n        object myObjectEven = 6;\n        FindMyObject(myIntArray, myObjectEven);\n    }\n\n    public static void FindMyObject(Array myArr, object myObject)\n    {\n        int myIndex=Array.BinarySearch(myArr, myObject);\n        if (myIndex &lt; 0)\n        {\n            Console.WriteLine(&quot;The object to search for ({0}) is not found. The next larger object is at index {1}.&quot;, myObject, ~myIndex );\n        }\n        else\n        {\n            Console.WriteLine(&quot;The object to search for ({0}) is at index {1}.&quot;, myObject, myIndex );\n        }\n    }\n\n \n    public static void PrintValues(Array myArr)\n    {\n        int i = 0;\n        int cols = myArr.GetLength(myArr.Rank - 1);\n        foreach (object o in myArr)\n        {\n            if ( i &lt; cols )\n            {\n                i++;\n            }\n            else\n            {\n                Console.WriteLine();\n                i = 1;\n            }\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, o);\n        }\n        Console.WriteLine();\n    }\n}\n// This code produces the following output.\n//\n//The Int32 array contains the following:\n//        2       3       6       7       8\n//The object to search for (1) is not found. The next larger object is at index 0\n//\n//The object to search for (6) is at index 2.\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.BinarySearch Example#1\">Imports System\n\nPublic Class SamplesArray\n    Public Shared Sub Main()\n        &#39; Creates and initializes a new Array.\n        Dim myIntArray As Array = Array.CreateInstance( GetType(Int32), 5 )\n\n        myIntArray.SetValue( 8, 0 )\n        myIntArray.SetValue( 2, 1 )\n        myIntArray.SetValue( 6, 2 )\n        myIntArray.SetValue( 3, 3 )\n        myIntArray.SetValue( 7, 4 )\n\n        &#39; Do the required sort first\n        Array.Sort(myIntArray)\n\n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The Int32 array contains the following:&quot;)\n        PrintValues(myIntArray)\n\n        &#39; Locates a specific object that does not exist in the Array.\n        Dim myObjectOdd As Object = 1\n        FindMyObject(myIntArray, myObjectOdd)\n\n        &#39; Locates an object that exists in the Array.\n        Dim myObjectEven As Object = 6\n        FindMyObject(myIntArray, myObjectEven)\n    End Sub\n\n    Public Shared Sub FindMyObject(myArr As Array, myObject As Object)\n        Dim myIndex As Integer = Array.BinarySearch(myArr, myObject)\n        If  myIndex &lt; 0 Then\n            Console.WriteLine(&quot;The object to search for ({0}) is not found. The next larger object is at index {1}.&quot;, myObject, Not(myIndex))\n        Else\n            Console.WriteLine(&quot;The object to search for ({0}) is at index {1}.&quot;, myObject, myIndex)\n        End If\n    End Sub\n\n    Public Shared Sub PrintValues(myArr As Array)\n        Dim i As Integer = 0\n        Dim cols As Integer = myArr.GetLength( myArr.Rank - 1 )\n        For Each o As Object In myArr\n            If i &lt; cols Then\n                i += 1\n            Else\n                Console.WriteLine()\n                i = 1\n            End If\n            Console.Write( vbTab + &quot;{0}&quot;, o)\n        Next o\n        Console.WriteLine()\n    End Sub\nEnd Class\n&#39; This code produces the following output.\n&#39;\n&#39; The Int32 array contains the following:\n&#39;         2       3       6       7       8\n&#39; The object to search for (1) is not found. The next larger object is at index 0\n&#39;\n&#39; The object to search for (6) is at index 2.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_BinarySearch_System_Array_System_Object_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Array_BinarySearch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch(Array,Object,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Searches an entire one-dimensional sorted array for a value using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int BinarySearch (Array array, object value, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sorted one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and <code>value</code> is of a type that is not compatible with the elements of <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, <code>value</code> does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, and the search encounters an element that does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not support searching arrays that contain negative indexes. <code>array</code> must be sorted before calling this method.  </p>\n<p> If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, <code>Not</code> in Visual Basic) to the negative result  to produce an index. If this index is one greater than the upper bound of the array, there are no elements larger than <code>value</code> in the array. Otherwise, it is the index of the first element that is larger than <code>value</code>.  </p>\n<p> The comparer customizes how the elements are compared. For example, you can use a <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">System.Collections.CaseInsensitiveComparer</a> as the comparer to perform case-insensitive string searches.  </p>\n<p> If <code>comparer</code> is not <code>null</code>, the elements of <code>array</code> are compared to the specified value using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation. The elements of <code>array</code> must already be sorted in increasing value according to the sort order defined by <code>comparer</code>; otherwise, the result might be incorrect.  </p>\n<p> If<code>comparer</code> is <code>null</code>, the comparison is done using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation provided by the element itself or by the specified value. The elements of <code>array</code> must already be sorted in increasing value according to the sort order defined by the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation; otherwise, the result might be incorrect.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <code>comparer</code> is <code>null</code> and <code>value</code> does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, the elements of <code>array</code> are not tested for <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> before the search begins. An exception is thrown if the search encounters an element that does not implement <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>.  </p>\n</div>\n<p> Duplicate elements are allowed. If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> contains more than one element equal to <code>value</code>, the method returns the index of only one of the occurrences, and not necessarily the first one.  </p>\n<p> <code>null</code> can always be compared with any other reference type; therefore, comparisons with <code>null</code> do not generate an exception.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For every element tested, <code>value</code> is passed to the appropriate <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation, even if <code>value</code> is <code>null</code>. That is, the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation determines how a given element compares to <code>null</code>.  </p>\n</div>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_BinarySearch_System_Array_System_Int32_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Array_BinarySearch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch(Array,Int32,Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Searches a range of elements in a one-dimensional sorted array for a value, using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface implemented by each element of the array and by the specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int BinarySearch (Array array, int index, int length, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sorted one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the range to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is of a type that is not compatible with the elements of <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, and the search encounters an element that does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not support searching arrays that contain negative indexes. <code>array</code> must be sorted before calling this method.  </p>\n<p> If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, <code>Not</code> in Visual Basic) to the negative result to produce an index. If this index is one greater than the upper bound of the array, there are no elements larger than <code>value</code> in the array. Otherwise, it is the index of the first element that is larger than <code>value</code>.  </p>\n<p> Either <code>value</code> or every element of <code>array</code> must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, which is used for comparisons. The elements of <code>array</code> must already be sorted in increasing value according to the sort order defined by the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation; otherwise, the result might be incorrect.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <code>value</code> does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, the elements of <code>array</code> are not tested for <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> before the search begins. An exception is thrown if the search encounters an element that does not implement <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>.  </p>\n</div>\n<p> Duplicate elements are allowed. If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> contains more than one element equal to <code>value</code>, the method returns the index of only one of the occurrences, and not necessarily the first one.  </p>\n<p> <code>null</code> can always be compared with any other reference type; therefore, comparisons with <code>null</code> do not generate an exception.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For every element tested, <code>value</code> is passed to the appropriate <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation, even if <code>value</code> is <code>null</code>. That is, the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation determines how a given element compares to <code>null</code>.  </p>\n</div>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_BinarySearch_System_Array_System_Int32_System_Int32_System_Object_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Array_BinarySearch_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch(Array,Int32,Int32,Object,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Searches a range of elements in a one-dimensional sorted array for a value, using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int BinarySearch (Array array, int index, int length, object value, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sorted one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the range to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>comparer</code> is <code>null</code>, and <code>value</code> is of a type that is not compatible with the elements of <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, <code>value</code> does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, and the search encounters an element that does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not support searching arrays that contain negative indexes. <code>array</code> must be sorted before calling this method.  </p>\n<p> If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, <code>Not</code> in Visual Basic) to the negative result  to produce an index. If this index is one greater than the upper bound of the array, there are no elements larger than <code>value</code> in the array. Otherwise, it is the index of the first element that is larger than <code>value</code>.  </p>\n<p> The comparer customizes how the elements are compared. For example, you can use a <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">System.Collections.CaseInsensitiveComparer</a> as the comparer to perform case-insensitive string searches.  </p>\n<p> If <code>comparer</code> is not <code>null</code>, the elements of <code>array</code> are compared to the specified value using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation. The elements of <code>array</code> must already be sorted in increasing value according to the sort order defined by <code>comparer</code>; otherwise, the result might be incorrect.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the comparison is done using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation provided by the element itself or by the specified value. The elements of <code>array</code> must already be sorted in increasing value according to the sort order defined by the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation; otherwise, the result might be incorrect.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <code>comparer</code> is <code>null</code> and <code>value</code> does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, the elements of <code>array</code> are not tested for <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> before the search begins. An exception is thrown if the search encounters an element that does not implement <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>.  </p>\n</div>\n<p> Duplicate elements are allowed. If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> contains more than one element equal to <code>value</code>, the method returns the index of only one of the occurrences, and not necessarily the first one.  </p>\n<p> <code>null</code> can always be compared with any other reference type; therefore, comparisons with <code>null</code> do not generate an exception when using <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For every element tested, <code>value</code> is passed to the appropriate <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation, even if <code>value</code> is <code>null</code>. That is, the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation determines how a given element compares to <code>null</code>.  </p>\n</div>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_BinarySearch__1___0_____0_\">\r\n    \r\n            <a id=\"System_Array_BinarySearch_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch&lt;T&gt;(T[],T)</div>        \r\n          </div>\r\n    \r\n            <p>Searches an entire one-dimensional sorted array for a specific element, using the <span class=\"xref\">stem.IComparable`1</span> generic interface implemented by each element of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> and by the specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int BinarySearch&lt;T&gt; (T[] array, T value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sorted one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>T</code> does not implement the <span class=\"xref\">stem.IComparable`1</span> generic interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not support searching arrays that contain negative indexes. <code>array</code> must be sorted before calling this method.  </p>\n<p> If <code>array</code> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, <code>Not</code> in Visual Basic) to the negative result  to produce an index. If this index is equal to the size of the array, there are no elements larger than <code>value</code> in the array. Otherwise, it is the index of the first element that is larger than <code>value</code>.  </p>\n<p> <code>T</code> must implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface, which is used for comparisons. The elements of <code>array</code> must already be sorted in increasing value according to the sort order defined by the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation; otherwise, the result might be incorrect.  </p>\n<p> Duplicate elements are allowed. If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> contains more than one element equal to <code>value</code>, the method returns the index of only one of the occurrences, and not necessarily the first one.  </p>\n<p> <code>null</code> can always be compared with any other reference type; therefore, comparisons with <code>null</code> do not generate an exception.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For every element tested, <code>value</code> is passed to the appropriate <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation, even if <code>value</code> is <code>null</code>. That is, the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation determines how a given element compares to <code>null</code>.  </p>\n</div>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the [Sort<t\\>(T&lt;xref:System.Array.Sort%60%601%28%60%600%5B%5D%29&gt; generic method overload and the BinarySearch(T) generic method overload. An array of strings is created, in no particular order.  <p>\n<p> The array is displayed, sorted, and displayed again. Arrays must be sorted in order to use the BinarySearch(T) method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The calls to the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> and BinarySearch(T) generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  </p>\n</div>\n<p> The BinarySearch(T) generic method overload is then used to search for two strings, one that is not in the array and one that is. The array and the return value of the BinarySearch(T) method are passed to the <code>ShowWhere</code> generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array. The index is negative if the string is not in the array, so the <code>ShowWhere</code> method takes the bitwise complement (the ~ operator in C# and Visual C++, <code>Xor</code>-1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.  </p>\n<pre><code class=\"lang-cs\" name=\"Array_SortSearch#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = {&quot;Pachycephalosaurus&quot;, \n                              &quot;Amargasaurus&quot;, \n                              &quot;Tyrannosaurus&quot;, \n                              &quot;Mamenchisaurus&quot;, \n                              &quot;Deinonychus&quot;, \n                              &quot;Edmontosaurus&quot;};\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Sort&quot;);\n        Array.Sort(dinosaurs);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>BinarySearch for &#39;Coelophysis&#39;:&quot;);\n        int index = Array.BinarySearch(dinosaurs, &quot;Coelophysis&quot;);\n        ShowWhere(dinosaurs, index);\n\n        Console.WriteLine(&quot;<br>BinarySearch for &#39;Tyrannosaurus&#39;:&quot;);\n        index = Array.BinarySearch(dinosaurs, &quot;Tyrannosaurus&quot;);\n        ShowWhere(dinosaurs, index);\n    }\n\n    private static void ShowWhere&lt;T&gt;(T[] array, int index)\n    {\n        if (index&lt;0)\n        {\n            // If the index is negative, it represents the bitwise\n            // complement of the next larger element in the array.\n            //\n            index = ~index;\n\n            Console.Write(&quot;Not found. Sorts between: &quot;);\n\n            if (index == 0)\n                Console.Write(&quot;beginning of array and &quot;);\n            else\n                Console.Write(&quot;{0} and &quot;, array[index-1]);\n\n            if (index == array.Length)\n                Console.WriteLine(&quot;end of array.&quot;);\n            else\n                Console.WriteLine(&quot;{0}.&quot;, array[index]);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Found at index {0}.&quot;, index);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nTyrannosaurus\nMamenchisaurus\nDeinonychus\nEdmontosaurus\n\nSort\n\nAmargasaurus\nDeinonychus\nEdmontosaurus\nMamenchisaurus\nPachycephalosaurus\nTyrannosaurus\n\nBinarySearch for &#39;Coelophysis&#39;:\nNot found. Sorts between: Amargasaurus and Deinonychus.\n\nBinarySearch for &#39;Tyrannosaurus&#39;:\nFound at index 5.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_SortSearch#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\ngeneric&lt;typename T&gt; void ShowWhere(array&lt;T&gt;^ arr, int index)\n{\n    if (index&lt;0)\n    {\n        // If the index is negative, it represents the bitwise\n        // complement of the next larger element in the array.\n        //\n        index = ~index;\n\n        Console::Write(&quot;Not found. Sorts between: &quot;);\n\n        if (index == 0)\n            Console::Write(&quot;beginning of array and &quot;);\n        else\n            Console::Write(&quot;{0} and &quot;, arr[index-1]);\n\n        if (index == arr-&gt;Length)\n            Console::WriteLine(&quot;end of array.&quot;);\n        else\n            Console::WriteLine(&quot;{0}.&quot;, arr[index]);\n    }\n    else\n    {\n        Console::WriteLine(&quot;Found at index {0}.&quot;, index);\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = {&quot;Pachycephalosaurus&quot;, \n                                 &quot;Amargasaurus&quot;, \n                                 &quot;Tyrannosaurus&quot;, \n                                 &quot;Mamenchisaurus&quot;, \n                                 &quot;Deinonychus&quot;, \n                                 &quot;Edmontosaurus&quot;};\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Sort&quot;);\n    Array::Sort(dinosaurs);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>BinarySearch for &#39;Coelophysis&#39;:&quot;);\n    int index = Array::BinarySearch(dinosaurs, &quot;Coelophysis&quot;);\n    ShowWhere(dinosaurs, index);\n\n    Console::WriteLine(&quot;<br>BinarySearch for &#39;Tyrannosaurus&#39;:&quot;);\n    index = Array::BinarySearch(dinosaurs, &quot;Tyrannosaurus&quot;);\n    ShowWhere(dinosaurs, index);\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nTyrannosaurus\nMamenchisaurus\nDeinonychus\nEdmontosaurus\n\nSort\n\nAmargasaurus\nDeinonychus\nEdmontosaurus\nMamenchisaurus\nPachycephalosaurus\nTyrannosaurus\n\nBinarySearch for &#39;Coelophysis&#39;:\nNot found. Sorts between: Amargasaurus and Deinonychus.\n\nBinarySearch for &#39;Tyrannosaurus&#39;:\nFound at index 5.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_SortSearch#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { _\n            &quot;Pachycephalosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;Tyrannosaurus&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Deinonychus&quot;, _\n            &quot;Edmontosaurus&quot;  }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Sort&quot;)\n        Array.Sort(dinosaurs)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch for &#39;Coelophysis&#39;:&quot;)\n        Dim index As Integer = _\n            Array.BinarySearch(dinosaurs, &quot;Coelophysis&quot;)\n        ShowWhere(dinosaurs, index)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch for &#39;Tyrannosaurus&#39;:&quot;)\n        index = Array.BinarySearch(dinosaurs, &quot;Tyrannosaurus&quot;)\n        ShowWhere(dinosaurs, index)\n\n    End Sub\n\n    Private Shared Sub ShowWhere(Of T) _\n        (ByVal array() As T, ByVal index As Integer) \n\n        If index &lt; 0 Then\n            &#39; If the index is negative, it represents the bitwise\n            &#39; complement of the next larger element in the array.\n            &#39;\n            index = index Xor -1\n\n            Console.Write(&quot;Not found. Sorts between: &quot;)\n\n            If index = 0 Then\n                Console.Write(&quot;beginning of array and &quot;)\n            Else\n                Console.Write(&quot;{0} and &quot;, array(index - 1))\n            End If \n\n            If index = array.Length Then\n                Console.WriteLine(&quot;end of array.&quot;)\n            Else\n                Console.WriteLine(&quot;{0}.&quot;, array(index))\n            End If \n        Else\n            Console.WriteLine(&quot;Found at index {0}.&quot;, index)\n        End If\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Edmontosaurus\n&#39;\n&#39;Sort\n&#39;\n&#39;Amargasaurus\n&#39;Deinonychus\n&#39;Edmontosaurus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;Tyrannosaurus\n&#39;\n&#39;BinarySearch for &#39;Coelophysis&#39;:\n&#39;Not found. Sorts between: Amargasaurus and Deinonychus.\n&#39;\n&#39;BinarySearch for &#39;Tyrannosaurus&#39;:\n&#39;Found at index 5.\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_BinarySearch__1___0_____0_System_Collections_Generic_IComparer___0__\">\r\n    \r\n            <a id=\"System_Array_BinarySearch_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch&lt;T&gt;(T[],T,IComparer&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches an entire one-dimensional sorted array for a value using the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int BinarySearch&lt;T&gt; (T[] array, T value, System.Collections.Generic.IComparer&lt;T&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sorted one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the <span class=\"xref\">stem.IComparable`1</span> implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and <code>value</code> is of a type that is not compatible with the elements of <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and <code>T</code> does not implement the <span class=\"xref\">stem.IComparable`1</span> generic interface</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not support searching arrays that contain negative indexes. <code>array</code> must be sorted before calling this method.  </p>\n<p> If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, <code>Not</code> in Visual Basic) to the negative result to produce an index. If this index is equal to the size of the array, there are no elements larger than <code>value</code> in the array. Otherwise, it is the index of the first element that is larger than <code>value</code>.  </p>\n<p> The comparer customizes how the elements are compared. For example, you can use a <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">System.Collections.CaseInsensitiveComparer</a> as the comparer to perform case-insensitive string searches.  </p>\n<p> If <code>comparer</code> is not <code>null</code>, the elements of <code>array</code> are compared to the specified value using the specified <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> generic interface implementation. The elements of <code>array</code> must already be sorted in increasing value according to the sort order defined by <code>comparer</code>; otherwise, the result might be incorrect.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the comparison is done using the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface implementation provided by <code>T</code>. The elements of <code>array</code> must already be sorted in increasing value according to the sort order defined by the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation; otherwise, the result might be incorrect.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <code>comparer</code> is <code>null</code> and <code>value</code> does not implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface, the elements of <code>array</code> are not tested for <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> before the search begins. An exception is thrown if the search encounters an element that does not implement <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a>.  </p>\n</div>\n<p> Duplicate elements are allowed. If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> contains more than one element equal to <code>value</code>, the method returns the index of only one of the occurrences, and not necessarily the first one.  </p>\n<p> <code>null</code> can always be compared with any other reference type; therefore, comparisons with <code>null</code> do not generate an exception.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For every element tested, <code>value</code> is passed to the appropriate <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation, even if <code>value</code> is <code>null</code>. That is, the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation determines how a given element compares to <code>null</code>.  </p>\n</div>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the [Sort&lt;T&gt;(T&lt;xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic method overload and the BinarySearch(T) generic method overload.  </p>\n<p> The code example defines an alternative comparer for strings, named <code>ReverseCompare</code>, which implements the <code>IComparer&lt;string&gt;</code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer&lt;String^&gt;</code> in Visual C++) generic interface. The comparer calls the <a class=\"xref\" href=\"system.string#System_String_CompareTo_System_String_\" data-linktype=\"relative-path\">CompareTo(String)</a> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  </p>\n<p> The array is displayed, sorted, and displayed again. Arrays must be sorted in order to use theBinarySearch(T) method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The calls to the [Sort<t\\>(T&lt;xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; and BinarySearch(T) generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  <p>\n</t\\></div>\n<p> The BinarySearch(T) generic method overload is then used to search for two strings, one that is not in the array and one that is. The array and the return value of the BinarySearch(T) method are passed to the <code>ShowWhere</code> generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array. The index is negative if the string is not n the array, so the <code>ShowWhere</code>method takes the bitwise complement (the ~ operator in C# and Visual C++, <code>Xor</code> -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.  </p>\n<pre><code class=\"lang-cs\" name=\"Array_SortSearchComparer#1\">using System;\nusing System.Collections.Generic;\n\npublic class ReverseComparer: IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        // Compare y and x in reverse order.\n        return y.CompareTo(x);\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = {&quot;Pachycephalosaurus&quot;, \n                              &quot;Amargasaurus&quot;, \n                              &quot;Tyrannosaurus&quot;, \n                              &quot;Mamenchisaurus&quot;, \n                              &quot;Deinonychus&quot;, \n                              &quot;Edmontosaurus&quot;};\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        ReverseComparer rc = new ReverseComparer();\n\n        Console.WriteLine(&quot;<br>Sort&quot;);\n        Array.Sort(dinosaurs, rc);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>BinarySearch for &#39;Coelophysis&#39;:&quot;);\n        int index = Array.BinarySearch(dinosaurs, &quot;Coelophysis&quot;, rc);\n        ShowWhere(dinosaurs, index);\n\n        Console.WriteLine(&quot;<br>BinarySearch for &#39;Tyrannosaurus&#39;:&quot;);\n        index = Array.BinarySearch(dinosaurs, &quot;Tyrannosaurus&quot;, rc);\n        ShowWhere(dinosaurs, index);\n    }\n\n    private static void ShowWhere&lt;T&gt;(T[] array, int index)\n    {\n        if (index&lt;0)\n        {\n            // If the index is negative, it represents the bitwise\n            // complement of the next larger element in the array.\n            //\n            index = ~index;\n\n            Console.Write(&quot;Not found. Sorts between: &quot;);\n\n            if (index == 0)\n                Console.Write(&quot;beginning of array and &quot;);\n            else\n                Console.Write(&quot;{0} and &quot;, array[index-1]);\n\n            if (index == array.Length)\n                Console.WriteLine(&quot;end of array.&quot;);\n            else\n                Console.WriteLine(&quot;{0}.&quot;, array[index]);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Found at index {0}.&quot;, index);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nTyrannosaurus\nMamenchisaurus\nDeinonychus\nEdmontosaurus\n\nSort\n\nTyrannosaurus\nPachycephalosaurus\nMamenchisaurus\nEdmontosaurus\nDeinonychus\nAmargasaurus\n\nBinarySearch for &#39;Coelophysis&#39;:\nNot found. Sorts between: Deinonychus and Amargasaurus.\n\nBinarySearch for &#39;Tyrannosaurus&#39;:\nFound at index 0.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_SortSearchComparer#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class ReverseComparer: IComparer&lt;String^&gt;\n{\npublic:\n    virtual int Compare(String^ x, String^ y)\n    {\n        // Compare y and x in reverse order.\n        return y-&gt;CompareTo(x);\n    }\n};\n\ngeneric&lt;typename T&gt; void ShowWhere(array&lt;T&gt;^ arr, int index)\n{\n    if (index&lt;0)\n    {\n        // If the index is negative, it represents the bitwise\n        // complement of the next larger element in the array.\n        //\n        index = ~index;\n\n        Console::Write(&quot;Not found. Sorts between: &quot;);\n\n        if (index == 0)\n            Console::Write(&quot;beginning of array and &quot;);\n        else\n            Console::Write(&quot;{0} and &quot;, arr[index-1]);\n\n        if (index == arr-&gt;Length)\n            Console::WriteLine(&quot;end of array.&quot;);\n        else\n            Console::WriteLine(&quot;{0}.&quot;, arr[index]);\n    }\n    else\n    {\n        Console::WriteLine(&quot;Found at index {0}.&quot;, index);\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = {&quot;Pachycephalosaurus&quot;, \n                                 &quot;Amargasaurus&quot;, \n                                 &quot;Tyrannosaurus&quot;, \n                                 &quot;Mamenchisaurus&quot;, \n                                 &quot;Deinonychus&quot;, \n                                 &quot;Edmontosaurus&quot;};\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    ReverseComparer^ rc = gcnew ReverseComparer();\n\n    Console::WriteLine(&quot;<br>Sort&quot;);\n    Array::Sort(dinosaurs, rc);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>BinarySearch for &#39;Coelophysis&#39;:&quot;);\n    int index = Array::BinarySearch(dinosaurs, &quot;Coelophysis&quot;, rc);\n    ShowWhere(dinosaurs, index);\n\n    Console::WriteLine(&quot;<br>BinarySearch for &#39;Tyrannosaurus&#39;:&quot;);\n    index = Array::BinarySearch(dinosaurs, &quot;Tyrannosaurus&quot;, rc);\n    ShowWhere(dinosaurs, index);\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nTyrannosaurus\nMamenchisaurus\nDeinonychus\nEdmontosaurus\n\nSort\n\nTyrannosaurus\nPachycephalosaurus\nMamenchisaurus\nEdmontosaurus\nDeinonychus\nAmargasaurus\n\nBinarySearch for &#39;Coelophysis&#39;:\nNot found. Sorts between: Deinonychus and Amargasaurus.\n\nBinarySearch for &#39;Tyrannosaurus&#39;:\nFound at index 0.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_SortSearchComparer#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class ReverseComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare(ByVal x As String, _\n        ByVal y As String) As Integer _\n        Implements IComparer(Of String).Compare\n\n        &#39; Compare y and x in reverse order.\n        Return y.CompareTo(x)\n\n    End Function\nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { _\n            &quot;Pachycephalosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;Tyrannosaurus&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Deinonychus&quot;, _\n            &quot;Edmontosaurus&quot;  }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Dim rc As New ReverseComparer()\n\n        Console.WriteLine(vbLf &amp; &quot;Sort&quot;)\n        Array.Sort(dinosaurs, rc)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch for &#39;Coelophysis&#39;:&quot;)\n        Dim index As Integer = _\n            Array.BinarySearch(dinosaurs, &quot;Coelophysis&quot;, rc)\n        ShowWhere(dinosaurs, index)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch for &#39;Tyrannosaurus&#39;:&quot;)\n        index = Array.BinarySearch(dinosaurs, &quot;Tyrannosaurus&quot;, rc)\n        ShowWhere(dinosaurs, index)\n\n    End Sub\n\n    Private Shared Sub ShowWhere(Of T) _\n        (ByVal array() As T, ByVal index As Integer) \n\n        If index &lt; 0 Then\n            &#39; If the index is negative, it represents the bitwise\n            &#39; complement of the next larger element in the array.\n            &#39;\n            index = index Xor -1\n\n            Console.Write(&quot;Not found. Sorts between: &quot;)\n\n            If index = 0 Then\n                Console.Write(&quot;beginning of array and &quot;)\n            Else\n                Console.Write(&quot;{0} and &quot;, array(index - 1))\n            End If \n\n            If index = array.Length Then\n                Console.WriteLine(&quot;end of array.&quot;)\n            Else\n                Console.WriteLine(&quot;{0}.&quot;, array(index))\n            End If \n        Else\n            Console.WriteLine(&quot;Found at index {0}.&quot;, index)\n        End If\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Edmontosaurus\n&#39;\n&#39;Sort\n&#39;\n&#39;Tyrannosaurus\n&#39;Pachycephalosaurus\n&#39;Mamenchisaurus\n&#39;Edmontosaurus\n&#39;Deinonychus\n&#39;Amargasaurus\n&#39;\n&#39;BinarySearch for &#39;Coelophysis&#39;:\n&#39;Not found. Sorts between: Deinonychus and Amargasaurus.\n&#39;\n&#39;BinarySearch for &#39;Tyrannosaurus&#39;:\n&#39;Found at index 0.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_BinarySearch__1___0___System_Int32_System_Int32___0_\">\r\n    \r\n            <a id=\"System_Array_BinarySearch_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch&lt;T&gt;(T[],Int32,Int32,T)</div>        \r\n          </div>\r\n    \r\n            <p>Searches a range of elements in a one-dimensional sorted array for a value, using the <span class=\"xref\">stem.IComparable`1</span> generic interface implemented by each element of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> and by the specified value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int BinarySearch&lt;T&gt; (T[] array, int index, int length, T value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sorted one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the range to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is of a type that is not compatible with the elements of <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>T</code> does not implement the <span class=\"xref\">stem.IComparable`1</span> generic interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not support searching arrays that contain negative indexes. <code>array</code> must be sorted before calling this method.  </p>\n<p> If the array does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, <code>Not</code> in Visual Basic) to the negative result  to produce an index. If this index is equal to the size of the array, there are no elements larger than <code>value</code> in the array. Otherwise, it is the index of the first element that is larger than <code>value</code>.  </p>\n<p> <code>T</code> must implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface, which is used for comparisons. The elements of <code>array</code> must already be sorted in increasing value according to the sort order defined by the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation; otherwise, the result might be incorrect.  </p>\n<p> Duplicate elements are allowed. If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> contains more than one element equal to <code>value</code>, the method returns the index of only one of the occurrences, and not necessarily the first one.  </p>\n<p> <code>null</code> can always be compared with any other reference type; therefore, comparisons with <code>null</code> do not generate an exception.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For every element tested, <code>value</code> is passed to the appropriate <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation, even if <code>value</code> is <code>null</code>. That is, the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation determines how a given element compares to <code>null</code>.  </p>\n</div>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_BinarySearch__1___0___System_Int32_System_Int32___0_System_Collections_Generic_IComparer___0__\">\r\n    \r\n            <a id=\"System_Array_BinarySearch_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinarySearch&lt;T&gt;(T[],Int32,Int32,T,IComparer&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches a range of elements in a one-dimensional sorted array for a value, using the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int BinarySearch&lt;T&gt; (T[] array, int index, int length, T value, System.Collections.Generic.IComparer&lt;T&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The sorted one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The length of the range to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to search for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the <span class=\"xref\">stem.IComparable`1</span> implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the specified <code>value</code> in the specified <code>array</code>, if <code>value</code> is found; otherwise, a negative number. If <code>value</code> is not found and <code>value</code> is less than one or more elements in <code>array</code>, the negative number returned is the bitwise complement of the index of the first element that is larger than <code>value</code>. If <code>value</code> is not found and <code>value</code> is greater than all elements in <code>array</code>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <code>array</code>, the return value can be incorrect and a negative number could be returned, even if <code>value</code> is present in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>comparer</code> is <code>null</code>, and <code>value</code> is of a type that is not compatible with the elements of <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and <code>T</code> does not implement the <span class=\"xref\">stem.IComparable`1</span> generic interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not support searching arrays that contain negative indexes. <code>array</code> must be sorted before calling this method.  </p>\n<p> If the array does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, <code>Not</code> in Visual Basic) to the negative result  to produce an index. If this index is equal to the size of the array, there are no elements larger than <code>value</code> in the array. Otherwise, it is the index of the first element that is larger than <code>value</code>.  </p>\n<p> The comparer customizes how the elements are compared. For example, you can use a <a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">System.Collections.CaseInsensitiveComparer</a> as the comparer to perform case-insensitive string searches.  </p>\n<p> If <code>comparer</code> is not <code>null</code>, the elements of <code>array</code> are compared to the specified value using the specified <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> generic interface implementation. The elements of <code>array</code> must already be sorted in increasing value according to the sort order defined by <code>comparer</code>; otherwise, the result might be incorrect.  </p>\n<p> If <code>comparer</code> is <code>null</code>, the comparison is done using the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface implementation provided for type <code>T</code>. The elements of <code>array</code> must already be sorted in increasing value according to the sort order defined by the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation; otherwise, the result might be incorrect.  </p>\n<p> Duplicate elements are allowed. If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> contains more than one element equal to <code>value</code>, the method returns the index of only one of the occurrences, and not necessarily the first one.  </p>\n<p> <code>null</code> can always be compared with any other reference type; therefore, comparisons with <code>null</code> do not generate an exception when using <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For every element tested, <code>value</code> is passed to the appropriate <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation, even if <code>value</code> is <code>null</code>. That is, the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> implementation determines how a given element compares to <code>null</code>.  </p>\n</div>\n<p> This method is an O(log <code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Clear_System_Array_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear(Array,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets a range of elements in an array to the default value of each element type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Clear (Array array, int index, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The array whose elements need to be cleared.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range of elements to clear.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements to clear.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The sum of <code>index</code> and <code>length</code> is greater than the size of <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method resets each element in an array to the element type&#39;s default value. It sets elements of reference types (including <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> elements) to <code>null</code>, and sets elements of value types to the default values shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>All integral and floating point numeric types</td>\n<td>0 (zero)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></td>\n<td><a class=\"xref\" href=\"system.datetime#System_DateTime_MinValue\" data-linktype=\"relative-path\">System.DateTime.MinValue</a></td>\n</tr>\n<tr>\n<td>Other value types</td>\n<td>Default value of the type&#39;s fields</td>\n</tr>\n</tbody>\n</table>\n<p> The range of cleared elements wrap from row to row in a multi-dimensional array.  </p>\n<p> This method only clears the values of the elements; it does not delete the elements themselves. An array has a fixed size; therefore, elements cannot be added or removed.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Clear method to reset integer values in a one-dimensional, two-dimensional, and three-dimensional array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Array.Clear#1\">using System;\n\nclass Example\n{\n    public static void Main()\n    {\n        Console.WriteLine(&quot;One dimension (Rank=1):&quot;);\n        int[] numbers1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\n        for (int i = 0; i &lt; 9; i++)\n        {\n            Console.Write(&quot;{0} &quot;, numbers1[i]);\n        }\n        Console.WriteLine();\n        Console.WriteLine();\n\n        Console.WriteLine(&quot;Array.Clear(numbers1, 2, 5)&quot;);\n        Array.Clear(numbers1, 2, 5);\n\n        for (int i = 0; i &lt; 9; i++)\n        {\n            Console.Write(&quot;{0} &quot;, numbers1[i]);\n        }\n        Console.WriteLine();\n        Console.WriteLine();\n\n        Console.WriteLine(&quot;Two dimensions (Rank=2):&quot;);\n        int[,] numbers2 = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };\n\n        for (int i = 0; i &lt; 3; i++)\n        {\n            for (int j = 0; j &lt; 3; j++)\n            {\n                Console.Write(&quot;{0} &quot;, numbers2[i, j]);\n            }\n            Console.WriteLine();\n        }\n\n        Console.WriteLine();\n        Console.WriteLine(&quot;Array.Clear(numbers2, 2, 5)&quot;);\n        Array.Clear(numbers2, 2, 5);\n\n        for (int i = 0; i &lt; 3; i++)\n        {\n            for (int j = 0; j &lt; 3; j++)\n            {\n                Console.Write(&quot;{0} &quot;, numbers2[i, j]);\n            }\n            Console.WriteLine();\n        }\n\n        Console.WriteLine(&quot;Three dimensions (Rank=3):&quot;);\n        int[, ,] numbers3 = {{{1, 2}, {3, 4}},\n                             {{5, 6}, {7, 8}},\n                             {{9, 10}, {11, 12}}};\n\n        for (int i = 0; i &lt; 2; i++)\n        {\n            for (int j = 0; j &lt; 2; j++)\n            {\n                for (int k = 0; k &lt; 2; k++)\n                {\n                    Console.Write(&quot;{0} &quot;, numbers3[i, j, k]);\n                }\n                Console.WriteLine();\n            }\n            Console.WriteLine();\n        }\n\n        Console.WriteLine(&quot;Array.Clear(numbers3, 2, 5)&quot;);\n        Array.Clear(numbers3, 2, 5);\n\n        for (int i = 0; i &lt; 2; i++)\n        {\n            for (int j = 0; j &lt; 2; j++)\n            {\n                for (int k = 0; k &lt; 2; k++)\n                {\n                    Console.Write(&quot;{0} &quot;, numbers3[i, j, k]);\n                }\n                Console.WriteLine();\n            }\n            Console.WriteLine();\n        }\n    }\n}\n/*  This code example produces the following output:\n * \n * One dimension (Rank=1):\n * 1 2 3 4 5 6 7 8 9\n * \n * Array.Clear(numbers1, 2, 5)\n * 1 2 0 0 0 0 0 8 9\n * \n * Two dimensions (Rank=2):\n * 1 2 3\n * 4 5 6\n * 7 8 9\n * \n * Array.Clear(numbers2, 2, 5)\n * 1 2 0\n * 0 0 0\n * 0 8 9\n * \n * Three dimensions (Rank=3):\n * 1 2\n * 3 4\n * \n * 5 6\n * 7 8\n * \n * Array.Clear(numbers3, 2, 5)\n * 1 2\n * 0 0\n * \n * 0 0\n * 0 8\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Clear#1\">Module Example\n    Sub Main()\n        Console.WriteLine(vbLf &amp; &quot;One dimension (Rank=1):&quot;)\n        Dim numbers1() As Integer = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n\n        For i As Integer = 0 To 8\n            Console.Write(&quot;{0} &quot;, numbers1(i))\n        Next \n        Console.WriteLine()\n\n        Console.WriteLine(vbLf &amp; &quot;Array.Clear(numbers1, 2, 5)&quot;)\n        Array.Clear(numbers1, 2, 5)\n\n        For i As Integer = 0 To 8\n            Console.Write(&quot;{0} &quot;, numbers1(i))\n        Next \n        Console.WriteLine()\n\n\n        Console.WriteLine(vbLf &amp; &quot;Two dimensions (Rank=2):&quot;)\n        Dim numbers2(,) As Integer = {{ 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 }}\n\n        For i As Integer = 0 To 2\n            For j As Integer = 0 To 2\n                Console.Write(&quot;{0} &quot;, numbers2(i, j))\n            Next \n            Console.WriteLine()\n        Next \n\n        Console.WriteLine(vbLf &amp; &quot;Array.Clear(numbers2, 2, 5)&quot;)\n        Array.Clear(numbers2, 2, 5)\n\n        For i As Integer = 0 To 2\n            For j As Integer = 0 To 2\n                Console.Write(&quot;{0} &quot;, numbers2(i, j))\n            Next \n            Console.WriteLine()\n        Next \n\n\n        Console.WriteLine(vbLf &amp; &quot;Three dimensions (Rank=3):&quot;)\n        Dim numbers3(,,) As Integer = {{{ 1, 2 }, { 3, 4 }}, _\n                                       {{ 5, 6 }, { 7, 8 }}, _\n                                       {{ 9, 10 }, { 11, 12 }}}\n\n        For i As Integer = 0 To 1\n            For j As Integer = 0 To 1\n                For k As Integer = 0 To 1\n                    Console.Write(&quot;{0} &quot;, numbers3(i, j, k))\n                Next \n                Console.WriteLine()\n            Next \n            Console.WriteLine()\n        Next \n        Console.WriteLine()\n        \n        Console.WriteLine(&quot;Array.Clear(numbers3, 2, 5)&quot;)\n        Array.Clear(numbers3, 2, 5)\n\n        For i As Integer = 0 To 1\n            For j As Integer = 0 To 1\n                For k As Integer = 0 To 1\n                    Console.Write(&quot;{0} &quot;, numbers3(i, j, k))\n                Next \n                Console.WriteLine()\n            Next \n            Console.WriteLine()\n        Next \n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       One dimension (Rank=1):\n&#39;       1 2 3 4 5 6 7 8 9\n&#39;       \n&#39;       Array.Clear(numbers1, 2, 5)\n&#39;       1 2 0 0 0 0 0 8 9\n&#39;       \n&#39;       Two dimensions (Rank=2):\n&#39;       1 2 3\n&#39;       4 5 6\n&#39;       7 8 9\n&#39;       \n&#39;       Array.Clear(numbers2, 2, 5)\n&#39;       1 2 0\n&#39;       0 0 0\n&#39;       0 8 9\n&#39;       \n&#39;       Three dimensions (Rank=3):\n&#39;       1 2\n&#39;       3 4\n&#39;\n&#39;       5 6\n&#39;       7 8\n&#39;       \n&#39;       Array.Clear(numbers3, 2, 5)\n&#39;       1 2\n&#39;       0 0\n&#39;       \n&#39;       0 0\n&#39;       0 8\n</code></pre><p> The following example defines a <code>TimeZoneTime</code> structure that includes a <a class=\"xref\" href=\"system.timezoneinfo\" data-linktype=\"relative-path\">TimeZoneInfo</a> field and a <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> field. It then calls the Clear method to clear one element in a two-element array of <code>TimeZoneTime</code> values. The method sets the value of the cleared element to the default value of a <a class=\"xref\" href=\"system.timezoneinfo\" data-linktype=\"relative-path\">TimeZoneInfo</a> object, which is <code>null</code>, and the default value of a <a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> object, which is <a class=\"xref\" href=\"system.datetimeoffset#System_DateTimeOffset_MinValue\" data-linktype=\"relative-path\">System.DateTimeOffset.MinValue</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Array.Clear#2\">using System;\n\npublic struct TimeZoneTime\n{\n   private DateTimeOffset dt;\n   private TimeZoneInfo tz;\n   \n   public TimeZoneTime(DateTimeOffset dateTime, TimeZoneInfo timeZone)\n   {\n      dt = dateTime;\n      tz = timeZone;\n   }\n\n   public DateTimeOffset DateTime \n   { get { return dt; } }\n   \n   public TimeZoneInfo TimeZone \n   { get { return tz; } }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Declare an array with two elements.\n      TimeZoneTime[] timeZoneTimes = { new TimeZoneTime(DateTime.Now, TimeZoneInfo.Local),\n                                       new TimeZoneTime(DateTime.Now, TimeZoneInfo.Utc) };   \n      foreach (var timeZoneTime in timeZoneTimes)\n         Console.WriteLine(&quot;{0}: {1:G}&quot;, \n                           timeZoneTime.TimeZone == null ? &quot;&lt;null&gt;&quot; : timeZoneTime.TimeZone.ToString(), \n                           timeZoneTime.DateTime);\n      Console.WriteLine();\n      \n      Array.Clear(timeZoneTimes, 1, 1);\n      foreach (var timeZoneTime in timeZoneTimes)\n         Console.WriteLine(&quot;{0}: {1:G}&quot;, \n                           timeZoneTime.TimeZone == null ? &quot;&lt;null&gt;&quot; : timeZoneTime.TimeZone.ToString(), \n                           timeZoneTime.DateTime);\n   }\n}\n// The example displays the following output:\n//       (UTC-08:00) Pacific Time (US &amp; Canada): 1/20/2014 12:11:00 PM\n//       UTC: 1/20/2014 12:11:00 PM\n//       \n//       (UTC-08:00) Pacific Time (US &amp; Canada): 1/20/2014 12:11:00 PM\n//       &lt;null&gt;: 1/1/0001 12:00:00 AM\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Clear#2\">Public Structure TimeZoneTime\n   Private dt As DateTimeOffset\n   Private tz As TimeZoneInfo\n   \n   Public Sub New(dateTime As DateTimeOffset, timeZone As TimeZoneInfo)\n      dt = dateTime\n      tz = timeZone\n   End Sub\n\n   Public ReadOnly Property DateTime As DateTimeOffset\n      Get\n         Return dt\n      End Get\n   End Property\n   \n   Public ReadOnly Property TimeZone As TimeZoneInfo\n      Get\n         Return tz\n      End Get\n   End Property \nEnd Structure\n\nModule Example\n   Public Sub Main()\n      &#39; Declare an array with two elements.\n      Dim timeZoneTimes() As TimeZoneTime = { New TimeZoneTime(Date.Now, TimeZoneInfo.Local),\n                                              New TimeZoneTime(Date.Now, TimeZoneInfo.Utc) }   \n      For Each timeZoneTime In timeZoneTimes\n         Console.WriteLine(&quot;{0}: {1:G}&quot;, \n                           If(timeZoneTime.TimeZone Is Nothing, &quot;&lt;null&gt;&quot;, timeZoneTime.TimeZone), \n                           timeZoneTime.DateTime)\n      Next\n      Console.WriteLine()\n      \n      Array.Clear(timeZoneTimes, 1, 1)\n      For Each timeZoneTime In timeZoneTimes\n         Console.WriteLine(&quot;{0}: {1:G}&quot;, \n                           If(timeZoneTime.TimeZone Is Nothing, &quot;&lt;null&gt;&quot;, timeZoneTime.TimeZone), \n                           timeZoneTime.DateTime)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       (UTC-08:00) Pacific Time (US &amp; Canada): 1/20/2014 12:11:00 PM\n&#39;       UTC: 1/20/2014 12:11:00 PM\n&#39;       \n&#39;       (UTC-08:00) Pacific Time (US &amp; Canada): 1/20/2014 12:11:00 PM\n&#39;       &lt;null&gt;: 1/1/0001 12:00:00 AM\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Clone\">\r\n    \r\n            <a id=\"System_Array_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a shallow copy of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A shallow copy of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A shallow copy of an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> copies only the elements of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> point to the same objects that the references in the original <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> point to.  </p>\n<p> In contrast, a deep copy of an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> copies the elements and everything directly or indirectly referenced by the elements.  </p>\n<p> The clone is of the same <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> as the original <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example clones a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">System.Globalization.CultureInfo</a> array and demonstrates the behavior of a shallow copy.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.Clone#1\">using namespace System;\nusing namespace System::Globalization;\nvoid PrintIndexAndValues( Array^ myArray );\nint main()\n{\n   \n   // Create and initialize a new CultureInfo array.\n   CultureInfo^ ci0 = gcnew CultureInfo( &quot;ar-SA&quot;,false );\n   CultureInfo^ ci1 = gcnew CultureInfo( &quot;en-US&quot;,false );\n   CultureInfo^ ci2 = gcnew CultureInfo( &quot;fr-FR&quot;,false );\n   CultureInfo^ ci3 = gcnew CultureInfo( &quot;ja-JP&quot;,false );\n   array&lt;CultureInfo^&gt;^arrCI = {ci0,ci1,ci2,ci3};\n   \n   // Create a clone of the CultureInfo array.\n   array&lt;CultureInfo^&gt;^arrCIClone = (array&lt;CultureInfo^&gt;^)arrCI-&gt;Clone();\n   \n   // Replace an element in the clone array.\n   CultureInfo^ ci4 = gcnew CultureInfo( &quot;th-TH&quot;,false );\n   arrCIClone[ 0 ] = ci4;\n   \n   // Display the contents of the original array.\n   Console::WriteLine( &quot;The original array contains the following values:&quot; );\n   PrintIndexAndValues( arrCI );\n   \n   // Display the contents of the clone array.\n   Console::WriteLine( &quot;The clone array contains the following values:&quot; );\n   PrintIndexAndValues( arrCIClone );\n   \n   // Display the DateTimeFormatInfo.DateSeparator for the fourth element in both arrays.\n   Console::WriteLine( &quot;Before changes to the clone:&quot; );\n   Console::WriteLine( &quot;   Original: The DateTimeFormatInfo-&gt;DateSeparator for {0} is {1}.&quot;, arrCI[ 3 ]-&gt;Name, arrCI[ 3 ]-&gt;DateTimeFormat-&gt;DateSeparator );\n   Console::WriteLine( &quot;      Clone: The DateTimeFormatInfo-&gt;DateSeparator for {0} is {1}.&quot;, arrCIClone[ 3 ]-&gt;Name, arrCIClone[ 3 ]-&gt;DateTimeFormat-&gt;DateSeparator );\n   \n   // Replace the DateTimeFormatInfo.DateSeparator for the fourth element in the clone array.\n   arrCIClone[ 3 ]-&gt;DateTimeFormat-&gt;DateSeparator = &quot;-&quot;;\n   \n   // Display the DateTimeFormatInfo.DateSeparator for the fourth element in both arrays.\n   Console::WriteLine( &quot;After changes to the clone:&quot; );\n   Console::WriteLine( &quot;   Original: The DateTimeFormatInfo-&gt;DateSeparator for {0} is {1}.&quot;, arrCI[ 3 ]-&gt;Name, arrCI[ 3 ]-&gt;DateTimeFormat-&gt;DateSeparator );\n   Console::WriteLine( &quot;      Clone: The DateTimeFormatInfo-&gt;DateSeparator for {0} is {1}.&quot;, arrCIClone[ 3 ]-&gt;Name, arrCIClone[ 3 ]-&gt;DateTimeFormat-&gt;DateSeparator );\n}\n\nvoid PrintIndexAndValues( Array^ myArray )\n{\n   for ( int i = myArray-&gt;GetLowerBound( 0 ); i &lt;= myArray-&gt;GetUpperBound( 0 ); i++ )\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray-&gt;GetValue( i ) );\n}\n\n/* \nThis code produces the following output.\n\nThe original array contains the following values:\n        [0]:    ar-SA\n        [1]:    en-US\n        [2]:    fr-FR\n        [3]:    ja-JP\nThe clone array contains the following values:\n        [0]:    th-TH\n        [1]:    en-US\n        [2]:    fr-FR\n        [3]:    ja-JP\nBefore changes to the clone:\n   Original: The DateTimeFormatInfo.DateSeparator for ja-JP is /.\n      Clone: The DateTimeFormatInfo.DateSeparator for ja-JP is /.\nAfter changes to the clone:\n   Original: The DateTimeFormatInfo.DateSeparator for ja-JP is -.\n      Clone: The DateTimeFormatInfo.DateSeparator for ja-JP is -.\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.Clone#1\">using System;\nusing System.Globalization;\npublic class SamplesArray  {\n\n   public static void Main()  {\n\n      // Create and initialize a new CultureInfo array.\n      CultureInfo ci0 = new CultureInfo( &quot;ar-SA&quot;, false );\n      CultureInfo ci1 = new CultureInfo( &quot;en-US&quot;, false );\n      CultureInfo ci2 = new CultureInfo( &quot;fr-FR&quot;, false );\n      CultureInfo ci3 = new CultureInfo( &quot;ja-JP&quot;, false );\n      CultureInfo[] arrCI = new CultureInfo[] { ci0, ci1, ci2, ci3 };\n\n      // Create a clone of the CultureInfo array.\n      CultureInfo[] arrCIClone = (CultureInfo[]) arrCI.Clone();\n\n      // Replace an element in the clone array.\n      CultureInfo ci4 = new CultureInfo( &quot;th-TH&quot;, false );\n      arrCIClone[0] = ci4;\n\n      // Display the contents of the original array.\n      Console.WriteLine( &quot;The original array contains the following values:&quot; );\n      PrintIndexAndValues( arrCI );\n\n      // Display the contents of the clone array.\n      Console.WriteLine( &quot;The clone array contains the following values:&quot; );\n      PrintIndexAndValues( arrCIClone );\n\n      // Display the DateTimeFormatInfo.DateSeparator for the fourth element in both arrays.\n      Console.WriteLine( &quot;Before changes to the clone:&quot; );\n      Console.WriteLine( &quot;   Original: The DateTimeFormatInfo.DateSeparator for {0} is {1}.&quot;, arrCI[3].Name, arrCI[3].DateTimeFormat.DateSeparator );\n      Console.WriteLine( &quot;      Clone: The DateTimeFormatInfo.DateSeparator for {0} is {1}.&quot;, arrCIClone[3].Name, arrCIClone[3].DateTimeFormat.DateSeparator );\n\n      // Replace the DateTimeFormatInfo.DateSeparator for the fourth element in the clone array.\n      arrCIClone[3].DateTimeFormat.DateSeparator = &quot;-&quot;;\n\n      // Display the DateTimeFormatInfo.DateSeparator for the fourth element in both arrays.\n      Console.WriteLine( &quot;After changes to the clone:&quot; );\n      Console.WriteLine( &quot;   Original: The DateTimeFormatInfo.DateSeparator for {0} is {1}.&quot;, arrCI[3].Name, arrCI[3].DateTimeFormat.DateSeparator );\n      Console.WriteLine( &quot;      Clone: The DateTimeFormatInfo.DateSeparator for {0} is {1}.&quot;, arrCIClone[3].Name, arrCIClone[3].DateTimeFormat.DateSeparator );\n\n   }\n\n   public static void PrintIndexAndValues( Array myArray )  {\n      for ( int i = myArray.GetLowerBound(0); i &lt;= myArray.GetUpperBound(0); i++ )\n         Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray.GetValue( i ) );\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nThe original array contains the following values:\n        [0]:    ar-SA\n        [1]:    en-US\n        [2]:    fr-FR\n        [3]:    ja-JP\nThe clone array contains the following values:\n        [0]:    th-TH\n        [1]:    en-US\n        [2]:    fr-FR\n        [3]:    ja-JP\nBefore changes to the clone:\n   Original: The DateTimeFormatInfo.DateSeparator for ja-JP is /.\n      Clone: The DateTimeFormatInfo.DateSeparator for ja-JP is /.\nAfter changes to the clone:\n   Original: The DateTimeFormatInfo.DateSeparator for ja-JP is -.\n      Clone: The DateTimeFormatInfo.DateSeparator for ja-JP is -.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Clone#1\">Imports System\nImports System.Globalization\n\nPublic Class SamplesArray\n\n    Public Shared Sub Main()\n\n        &#39; Create and initialize a new CultureInfo array.\n        Dim ci0 As New CultureInfo(&quot;ar-SA&quot;, False)\n        Dim ci1 As New CultureInfo(&quot;en-US&quot;, False)\n        Dim ci2 As New CultureInfo(&quot;fr-FR&quot;, False)\n        Dim ci3 As New CultureInfo(&quot;ja-JP&quot;, False)\n        Dim arrCI() As CultureInfo = {ci0, ci1, ci2, ci3}\n\n        &#39; Create a clone of the CultureInfo array.\n        Dim arrCIClone As CultureInfo() = CType(arrCI.Clone(), CultureInfo())\n\n        &#39; Replace an element in the clone array.\n        Dim ci4 As New CultureInfo(&quot;th-TH&quot;, False)\n        arrCIClone(0) = ci4\n\n        &#39; Display the contents of the original array.\n        Console.WriteLine(&quot;The original array contains the following values:&quot;)\n        PrintIndexAndValues(arrCI)\n\n        &#39; Display the contents of the clone array.\n        Console.WriteLine(&quot;The clone array contains the following values:&quot;)\n        PrintIndexAndValues(arrCIClone)\n\n        &#39; Display the DateTimeFormatInfo.DateSeparator for the fourth element in both arrays.\n        Console.WriteLine(&quot;Before changes to the clone:&quot;)\n        Console.WriteLine(&quot;   Original: The DateTimeFormatInfo.DateSeparator for {0} is {1}.&quot;, arrCI(3).Name, arrCI(3).DateTimeFormat.DateSeparator)\n        Console.WriteLine(&quot;      Clone: The DateTimeFormatInfo.DateSeparator for {0} is {1}.&quot;, arrCIClone(3).Name, arrCIClone(3).DateTimeFormat.DateSeparator)\n\n        &#39; Replace the DateTimeFormatInfo.DateSeparator for the fourth element in the clone array.\n        arrCIClone(3).DateTimeFormat.DateSeparator = &quot;-&quot;\n\n        &#39; Display the DateTimeFormatInfo.DateSeparator for the fourth element in both arrays.\n        Console.WriteLine(&quot;After changes to the clone:&quot;)\n        Console.WriteLine(&quot;   Original: The DateTimeFormatInfo.DateSeparator for {0} is {1}.&quot;, arrCI(3).Name, arrCI(3).DateTimeFormat.DateSeparator)\n        Console.WriteLine(&quot;      Clone: The DateTimeFormatInfo.DateSeparator for {0} is {1}.&quot;, arrCIClone(3).Name, arrCIClone(3).DateTimeFormat.DateSeparator)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(myArray As Array)\n        Dim i As Integer\n        For i = myArray.GetLowerBound(0) To myArray.GetUpperBound(0)\n            Console.WriteLine(vbTab + &quot;[{0}]:&quot; + vbTab + &quot;{1}&quot;, i, myArray.GetValue(i))\n        Next i\n    End Sub &#39;PrintIndexAndValues \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The original array contains the following values:\n&#39;        [0]:    ar-SA\n&#39;        [1]:    en-US\n&#39;        [2]:    fr-FR\n&#39;        [3]:    ja-JP\n&#39;The clone array contains the following values:\n&#39;        [0]:    th-TH\n&#39;        [1]:    en-US\n&#39;        [2]:    fr-FR\n&#39;        [3]:    ja-JP\n&#39;Before changes to the clone:\n&#39;   Original: The DateTimeFormatInfo.DateSeparator for ja-JP is /.\n&#39;      Clone: The DateTimeFormatInfo.DateSeparator for ja-JP is /.\n&#39;After changes to the clone:\n&#39;   Original: The DateTimeFormatInfo.DateSeparator for ja-JP is -.\n&#39;      Clone: The DateTimeFormatInfo.DateSeparator for ja-JP is -.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_ConstrainedCopy_System_Array_System_Int32_System_Array_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_ConstrainedCopy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConstrainedCopy(Array,Int32,Array,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a range of elements from an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the specified source index and pastes them to another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ConstrainedCopy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the data to copy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the index in the <code>sourceArray</code> at which copying begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that receives the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the index in the <code>destinationArray</code> at which storing begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the number of elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>destinationArray</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> and <code>destinationArray</code> have different ranks.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a></div>\r\n                  </div>\r\n                  <p>The <code>sourceArray</code> type is neither the same as nor derived from the <code>destinationArray</code> type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>At least one element in <code>sourceArray</code> cannot be cast to the type of <code>destinationArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>sourceIndex</code> is less than the lower bound of the first dimension of <code>sourceArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>destinationIndex</code> is less than the lower bound of the first dimension of <code>destinationArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>length</code> is greater than the number of elements from <code>sourceIndex</code> to the end of <code>sourceArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is greater than the number of elements from <code>destinationIndex</code> to the end of <code>destinationArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>sourceArray</code> and <code>destinationArray</code> parameters must have the same number of dimensions.  The <code>sourceArray</code> type must be the same as or derived from the <code>destinationArray</code> type; otherwise, an <a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown.  Unlike <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a>, ConstrainedCopy verifies the compatibility of the array types before performing any operation.  </p>\n<p> When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column). To start copying from the second element of the third row (or column), <code>sourceIndex</code> must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.  </p>\n<p> If <code>sourceArray</code> and <code>destinationArray</code> overlap, this method behaves as if the original values of <code>sourceArray</code> were preserved in a temporary location before <code>destinationArray</code> is overwritten.  </p>\n<p> [C++]  </p>\n<p> This method is equivalent to the standard C/C++ function <code>memmove</code>, not <code>memcpy</code>.  </p>\n<p> The arrays can be reference-type arrays or value-type arrays.  If <code>sourceArray</code> and <code>destinationArray</code> are both reference-type arrays or are both arrays of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, a shallow copy is performed. A shallow copy of an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is a new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> containing references to the same elements as the original <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> copies the elements and everything directly or indirectly referenced by the elements.  </p>\n<p> If this method throws an exception while copying, the <code>destinationArray</code> remains unchanged; therefore, ConstrainedCopy can be used within a constrained execution region (<a class=\"xref\" href=\"system.runtime.constrainedexecution.cer\" data-linktype=\"relative-path\">Cer</a>).  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_ConvertAll__2___0___System_Converter___0___1__\">\r\n    \r\n            <a id=\"System_Array_ConvertAll_TInput_TOutput__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConvertAll&lt;TInput,TOutput&gt;(TInput[],Converter&lt;TInput,TOutput&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an array of one type to an array of another type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TOutput[] ConvertAll&lt;TInput,TOutput&gt; (TInput[] array, Converter&lt;TInput,TOutput&gt; converter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TInput[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to convert to a target type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>converter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.converter-2\" data-linktype=\"relative-path\">Converter<tinput,toutput></tinput,toutput></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <span class=\"xref\">stem.Converter`2</span> that converts each element from one type to another type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TOutput[]</span>[]</div>\r\n                  </div>\r\n                  <p>An array of the target type containing the converted elements from the source array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>converter</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.converter-2\" data-linktype=\"relative-path\">Converter&lt;TInput,TOutput&gt;</a> is a delegate to a method that converts an object to the target type.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.converter-2\" data-linktype=\"relative-path\">Converter&lt;TInput,TOutput&gt;</a>, and the converted elements are saved in the new array.  </p>\n<p> The source <code>array</code> remains unchanged.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example defines a method named <code>PointFToPoint</code> that converts a <a class=\"xref\" href=\"system.drawing.pointf\" data-linktype=\"relative-path\">PointF</a> structure to a <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> structure. The example then creates an array of <a class=\"xref\" href=\"system.drawing.pointf\" data-linktype=\"relative-path\">PointF</a> structures, creates a <code>Converter\\&lt;PointF, Point&gt;</code> delegate (<code>Converter(Of PointF, Point)</code> in Visual Basic) to represent the <code>PointFToPoint</code> method, and passes the delegate to the ConvertAll(TInput, method. The ConvertAll(TInput, method passes each element of the input list to the <code>PointFToPoint</code> method and puts the converted elements into a new list of <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> structures. Both lists are displayed.  </p>\n<pre><code class=\"lang-cpp\" name=\"Array_ConvertAll#1\">#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Collections::Generic;\n\nPoint PointFToPoint(PointF pf)\n{\n    return Point((int) pf.X, (int) pf.Y);\n};\n\nvoid main()\n{\n    // Create an array of PointF objects.\n    array&lt;PointF&gt;^ apf = {\n        PointF(27.8F, 32.62F),\n        PointF(99.3F, 147.273F),\n        PointF(7.5F, 1412.2F) };\n\n\n    // Display each element in the PointF array.\n    Console::WriteLine();\n    for each(PointF p in apf)\n    {\n        Console::WriteLine(p);\n    }\n\n    // Convert each PointF element to a Point object.\n    array&lt;Point&gt;^ ap = \n        Array::ConvertAll(apf, \n            gcnew Converter&lt;PointF, Point&gt;(PointFToPoint)\n        );\n\n    // Display each element in the Point array.\n    Console::WriteLine();\n    for each(Point p in ap)\n    {\n        Console::WriteLine(p);\n    }\n}\n\n/* This code example produces the following output:\n\n{X=27.8, Y=32.62}\n{X=99.3, Y=147.273}\n{X=7.5, Y=1412.2}\n\n{X=27,Y=32}\n{X=99,Y=147}\n{X=7,Y=1412}\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_ConvertAll#1\">Imports System.Drawing\nImports System.Collections.Generic\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Create an array of PointF objects.\n        Dim apf() As PointF = { _\n            New PointF(27.8, 32.62), _\n            New PointF(99.3, 147.273), _\n            New PointF(7.5, 1412.2)  }\n\n        &#39; Display each element in the PointF array.\n        Console.WriteLine()\n        For Each p As PointF In apf\n            Console.WriteLine(p)\n        Next\n        \n        &#39; Convert each PointF element to a Point object.\n        Dim ap() As Point = Array.ConvertAll(apf, _\n            New Converter(Of PointF, Point)(AddressOf PointFToPoint))\n\n        &#39; Display each element in the Point array.\n        Console.WriteLine()\n        For Each p As Point In ap\n            Console.WriteLine(p)\n        Next\n    End Sub\n\n    Public Shared Function PointFToPoint(ByVal pf As PointF) _\n        As Point\n\n        Return New Point(CInt(pf.X), CInt(pf.Y))\n    End Function\nEnd Class\n&#39; The example produces the following output:\n&#39;       {X=27.8, Y=32.62}\n&#39;       {X=99.3, Y=147.273}\n&#39;       {X=7.5, Y=1412.2}\n&#39;       \n&#39;       {X=28,Y=33}\n&#39;       {X=99,Y=147}\n&#39;       {X=8,Y=1412}\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_ConvertAll#1\">using System;\nusing System.Drawing;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create an array of PointF objects.\n        PointF[] apf = {\n            new PointF(27.8F, 32.62F),\n            new PointF(99.3F, 147.273F),\n            new PointF(7.5F, 1412.2F) };\n\n        // Display each element in the PointF array.\n        Console.WriteLine();\n        foreach( PointF p in apf )\n            Console.WriteLine(p);\n\n        // Convert each PointF element to a Point object.\n        Point[] ap = Array.ConvertAll(apf, \n            new Converter&lt;PointF, Point&gt;(PointFToPoint));\n\n        // Display each element in the Point array.\n        Console.WriteLine();\n        foreach( Point p in ap )\n        {\n            Console.WriteLine(p);\n        }\n    }\n\n    public static Point PointFToPoint(PointF pf)\n    {\n        return new Point(((int) pf.X), ((int) pf.Y));\n    }\n}\n\n/* This code example produces the following output:\n\n{X=27.8, Y=32.62}\n{X=99.3, Y=147.273}\n{X=7.5, Y=1412.2}\n\n{X=27,Y=32}\n{X=99,Y=147}\n{X=7,Y=1412}\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Copy_System_Array_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(Array,Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a range of elements from an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the first element and pastes them into another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the first element. The length is specified as a 32-bit integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (Array sourceArray, Array destinationArray, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the data to copy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that receives the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the number of elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>destinationArray</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> and <code>destinationArray</code> have different ranks.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> and <code>destinationArray</code> are of incompatible types.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>At least one element in <code>sourceArray</code> cannot be cast to the type of <code>destinationArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>length</code> is greater than the number of elements in <code>sourceArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is greater than the number of elements in <code>destinationArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>sourceArray</code> and <code>destinationArray</code> parameters must have the same number of dimensions. In addition, <code>destinationArray</code> must already have been dimensioned and must have a sufficient number of elements to accommodate the copied data.  </p>\n<p> When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end to end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).  </p>\n<p> If <code>sourceArray</code> and <code>destinationArray</code> overlap, this method behaves as if the original values of <code>sourceArray</code> were preserved in a temporary location before <code>destinationArray</code> is overwritten.  </p>\n<p> [C++]  </p>\n<p> This method is equivalent to the standard C/C++ function <code>memmove</code>, not <code>memcpy</code>.  </p>\n<p> The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.  </p>\n<ul>\n<li><p>When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.  </p>\n</li>\n<li><p>When copying from a reference-type or value-type array to an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array, an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is created to hold each value or reference and then copied. When copying from an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array to a reference-type or value-type array and the assignment is not possible, an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown.  </p>\n</li>\n<li><p>If <code>sourceArray</code> and <code>destinationArray</code> are both reference-type arrays or are both arrays of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, a shallow copy is performed. A shallow copy of an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is a new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> containing references to the same elements as the original <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> copies the elements and everything directly or indirectly referenced by the elements.  </p>\n<p>An <a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows:  </p>\n</li>\n<li><p>A type is compatible with itself.  </p>\n</li>\n<li><p>A value type is compatible with <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.  </p>\n</li>\n<li><p>Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n</li>\n<li><p>A nonintrinsic (user-defined) value type is compatible only with itself.  </p>\n</li>\n<li><p>Enumerations have an implicit conversion to <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> and to their underlying type.  </p>\n<p>If every element in <code>sourceArray</code> requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in <code>destinationArray</code>, an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown.  </p>\n<p>If this method throws an exception while copying, the state of <code>destinationArray</code> is undefined.  </p>\n<p>This method is an O(<code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Copy_System_Array_System_Array_System_Int64_\">\r\n    \r\n            <a id=\"System_Array_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(Array,Array,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a range of elements from an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the first element and pastes them into another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the first element. The length is specified as a 64-bit integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (Array sourceArray, Array destinationArray, long length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the data to copy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that receives the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>, inclusive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>destinationArray</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> and <code>destinationArray</code> have different ranks.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> and <code>destinationArray</code> are of incompatible types.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>At least one element in <code>sourceArray</code> cannot be cast to the type of <code>destinationArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>length</code> is less than 0 or greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>length</code> is greater than the number of elements in <code>sourceArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is greater than the number of elements in <code>destinationArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>sourceArray</code> and <code>destinationArray</code> parameters must have the same number of dimensions. In addition, <code>destinationArray</code> must already have been dimensioned and must have a sufficient number of elements to accommodate the copied data.  </p>\n<p> When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end to end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).  </p>\n<p> If <code>sourceArray</code> and <code>destinationArray</code> overlap, this method behaves as if the original values of <code>sourceArray</code> were preserved in a temporary location before <code>destinationArray</code> is overwritten.  </p>\n<p> [C++]  </p>\n<p> This method is equivalent to the standard C/C++ function <code>memmove</code>, not <code>memcpy</code>.  </p>\n<p> The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.  </p>\n<ul>\n<li><p>When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.  </p>\n</li>\n<li><p>When copying from a reference-type or value-type array to an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array, an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is created to hold each value or reference and then copied. When copying from an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array to a reference-type or value-type array and the assignment is not possible, an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown.  </p>\n</li>\n<li><p>If <code>sourceArray</code> and <code>destinationArray</code> are both reference-type arrays or are both arrays of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, a shallow copy is performed. A shallow copy of an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is a new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> containing references to the same elements as the original <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> copies the elements and everything directly or indirectly referenced by the elements.  </p>\n<p>An <a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows:  </p>\n</li>\n<li><p>A type is compatible with itself.  </p>\n</li>\n<li><p>A value type is compatible with <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.  </p>\n</li>\n<li><p>Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n</li>\n<li><p>A nonintrinsic (user-defined) value type is compatible only with itself.  </p>\n</li>\n<li><p>Enumerations have an implicit conversion to <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> and to their underlying type.  </p>\n<p>If every element in <code>sourceArray</code> requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in <code>destinationArray</code>, an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown.  </p>\n<p>If this method throws an exception while copying, the state of <code>destinationArray</code> is undefined.  </p>\n<p>This method is an O(<code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Copy_System_Array_System_Int32_System_Array_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(Array,Int32,Array,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a range of elements from an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the specified source index and pastes them to another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the data to copy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the index in the <code>sourceArray</code> at which copying begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that receives the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the index in the <code>destinationArray</code> at which storing begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the number of elements to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>destinationArray</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> and <code>destinationArray</code> have different ranks.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> and <code>destinationArray</code> are of incompatible types.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>At least one element in <code>sourceArray</code> cannot be cast to the type of <code>destinationArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>sourceIndex</code> is less than the lower bound of the first dimension of <code>sourceArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>destinationIndex</code> is less than the lower bound of the first dimension of <code>destinationArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>length</code> is greater than the number of elements from <code>sourceIndex</code> to the end of <code>sourceArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is greater than the number of elements from <code>destinationIndex</code> to the end of <code>destinationArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>sourceArray</code> and <code>destinationArray</code> parameters must have the same number of dimensions. In addition, <code>destinationArray</code> must already have been dimensioned and must have a sufficient number of elements starting from the <code>destinationIndex</code> position to accommodate the copied data.  </p>\n<p> When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column). To start copying from the second element of the third row (or column), <code>sourceIndex</code> must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.  </p>\n<p> If <code>sourceArray</code> and <code>destinationArray</code> overlap, this method behaves as if the original values of <code>sourceArray</code> were preserved in a temporary location before <code>destinationArray</code> is overwritten.  </p>\n<p> [C++]  </p>\n<p> This method is equivalent to the standard C/C++ function <code>memmove</code>, not <code>memcpy</code>.  </p>\n<p> The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.  </p>\n<ul>\n<li><p>When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.  </p>\n</li>\n<li><p>When copying from a reference-type or value-type array to an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array, an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is created to hold each value or reference and then copied. When copying from an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array to a reference-type or value-type array and the assignment is not possible, an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown.  </p>\n</li>\n<li><p>If <code>sourceArray</code> and <code>destinationArray</code> are both reference-type arrays or are both arrays of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, a shallow copy is performed. A shallow copy of an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is a new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> containing references to the same elements as the original <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> copies the elements and everything directly or indirectly referenced by the elements.  </p>\n<p>An <a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows:  </p>\n</li>\n<li><p>A type is compatible with itself.  </p>\n</li>\n<li><p>A value type is compatible with <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.  </p>\n</li>\n<li><p>Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n</li>\n<li><p>A nonintrinsic (user-defined) value type is compatible only with itself.  </p>\n</li>\n<li><p>Enumerations have an implicit conversion to <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> and to their underlying type.  </p>\n<p>If every element in <code>sourceArray</code> requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in <code>destinationArray</code>, an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown.  </p>\n<p>If this method throws an exception while copying, the state of <code>destinationArray</code> is undefined.  </p>\n<p>This method is an O(<code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to copy from one <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of type integer.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Array.Copy1 Example#1\">using namespace System;\nvoid PrintValues( Array^ myArr );\nvoid main()\n{\n   \n   // Creates and initializes a new Array instance of type Int32.\n   Array^ myIntArray = Array::CreateInstance( Type::GetType(  &quot;System.Int32&quot; ), 5 );\n   for ( int i = myIntArray-&gt;GetLowerBound( 0 ); i &lt;= myIntArray-&gt;GetUpperBound( 0 ); i++ )\n      myIntArray-&gt;SetValue( i + 1, i );\n   \n   // Creates and initializes a new Array instance of type Object.\n   Array^ myObjArray = Array::CreateInstance( Type::GetType(  &quot;System.Object&quot; ), 5 );\n   for ( int i = myObjArray-&gt;GetLowerBound( 0 ); i &lt;= myObjArray-&gt;GetUpperBound( 0 ); i++ )\n      myObjArray-&gt;SetValue( i + 26, i );\n   \n   // Displays the initial values of both arrays.\n   Console::WriteLine(  &quot;Int32 array:&quot; );\n   PrintValues( myIntArray );\n   Console::WriteLine(  &quot;Object array:&quot; );\n   PrintValues( myObjArray );\n   \n   // Copies the first element from the Int32 array to the Object array.\n   Array::Copy( myIntArray, myIntArray-&gt;GetLowerBound( 0 ), myObjArray, myObjArray-&gt;GetLowerBound( 0 ), 1 );\n   \n   // Copies the last two elements from the Object array to the Int32 array.\n   Array::Copy( myObjArray, myObjArray-&gt;GetUpperBound( 0 ) - 1, myIntArray, myIntArray-&gt;GetUpperBound( 0 ) - 1, 2 );\n   \n   // Displays the values of the modified arrays.\n   Console::WriteLine(  &quot;Int32 array - Last two elements should now be the same as Object array:&quot; );\n   PrintValues( myIntArray );\n   Console::WriteLine(  &quot;Object array - First element should now be the same as Int32 array:&quot; );\n   PrintValues( myObjArray );\n}\n\nvoid PrintValues( Array^ myArr )\n{\n   System::Collections::IEnumerator^ myEnumerator = myArr-&gt;GetEnumerator();\n   int i = 0;\n   int cols = myArr-&gt;GetLength( myArr-&gt;Rank - 1 );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      if ( i &lt; cols )\n      {\n         i++;\n      }\n      else\n      {\n         Console::WriteLine();\n         i = 1;\n      }\n\n      Console::Write(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator-&gt;Current );\n   }\n\n   Console::WriteLine();\n}\n\n/*\n This code produces the following output.\n \n Int32 array:\n     1    2    3    4    5\n Object array:\n     26    27    28    29    30\n Int32 array - Last two elements should now be the same as Object array:\n     1    2    3    29    30\n Object array - First element should now be the same as Int32 array:\n     1    27    28    29    30\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.Copy1 Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Array of type Int32.\n        Dim myIntArray As Array = _\n           Array.CreateInstance(GetType(System.Int32), 5)\n        Dim i As Integer\n        For i = myIntArray.GetLowerBound(0) To myIntArray.GetUpperBound(0)\n            myIntArray.SetValue(i + 1, i)\n        Next i \n        &#39; Creates and initializes a new Array of type Object.\n        Dim myObjArray As Array = _\n           Array.CreateInstance(GetType(System.Object), 5)\n        For i = myObjArray.GetLowerBound(0) To myObjArray.GetUpperBound(0)\n            myObjArray.SetValue(i + 26, i)\n        Next i \n        &#39; Displays the initial values of both arrays.\n        Console.WriteLine(&quot;Int32 array:&quot;)\n        PrintValues(myIntArray)\n        Console.WriteLine(&quot;Object array:&quot;)\n        PrintValues(myObjArray)\n        \n        &#39; Copies the first element from the Int32 array to the Object array.\n        Array.Copy(myIntArray, myIntArray.GetLowerBound(0), myObjArray, _\n           myObjArray.GetLowerBound(0), 1)\n        \n        &#39; Copies the last two elements from the Object array to the Int32 array.\n        Array.Copy(myObjArray, myObjArray.GetUpperBound(0) - 1, myIntArray, _\n           myIntArray.GetUpperBound(0) - 1, 2)\n        \n        &#39; Displays the values of the modified arrays.\n        Console.WriteLine(&quot;Int32 array - Last two elements should now be &quot; _\n           + &quot;the same as Object array:&quot;)\n        PrintValues(myIntArray)\n        Console.WriteLine(&quot;Object array - First element should now be the &quot; _\n           + &quot;same as Int32 array:&quot;)\n        PrintValues(myObjArray)\n    End Sub\n    \n    Public Shared Sub PrintValues(myArr As Array)\n        Dim myEnumerator As System.Collections.IEnumerator = _\n           myArr.GetEnumerator()\n        Dim i As Integer = 0\n        Dim cols As Integer = myArr.GetLength((myArr.Rank - 1))\n        While myEnumerator.MoveNext()\n            If i &lt; cols Then\n                i += 1\n            Else\n                Console.WriteLine()\n                i = 1\n            End If\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; Int32 array:\n&#39;     1    2    3    4    5\n&#39; Object array:\n&#39;     26    27    28    29    30\n&#39; Int32 array - Last two elements should now be the same as Object array:\n&#39;     1    2    3    29    30\n&#39; Object array - First element should now be the same as Int32 array:\n&#39;     1    27    28    29    30\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.Copy1 Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Array of type Int32.\n       Array myIntArray=Array.CreateInstance( typeof(System.Int32), 5 );\n       for ( int i = myIntArray.GetLowerBound(0); i &lt;= myIntArray.GetUpperBound(0); i++ )\n          myIntArray.SetValue( i+1, i );\n \n       // Creates and initializes a new Array of type Object.\n       Array myObjArray = Array.CreateInstance( typeof(System.Object), 5 );\n       for ( int i = myObjArray.GetLowerBound(0); i &lt;= myObjArray.GetUpperBound(0); i++ )\n          myObjArray.SetValue( i+26, i );\n \n       // Displays the initial values of both arrays.\n       Console.WriteLine( &quot;Int32 array:&quot; );\n       PrintValues( myIntArray );\n       Console.WriteLine( &quot;Object array:&quot; );\n       PrintValues( myObjArray );\n \n       // Copies the first element from the Int32 array to the Object array.\n       Array.Copy( myIntArray, myIntArray.GetLowerBound(0), myObjArray, myObjArray.GetLowerBound(0), 1 );\n \n       // Copies the last two elements from the Object array to the Int32 array.\n       Array.Copy( myObjArray, myObjArray.GetUpperBound(0) - 1, myIntArray, myIntArray.GetUpperBound(0) - 1, 2 );\n \n       // Displays the values of the modified arrays.\n       Console.WriteLine( &quot;Int32 array - Last two elements should now be the same as Object array:&quot; );\n       PrintValues( myIntArray );\n       Console.WriteLine( &quot;Object array - First element should now be the same as Int32 array:&quot; );\n       PrintValues( myObjArray );\n    }\n \n \n    public static void PrintValues( Array myArr )  {\n       System.Collections.IEnumerator myEnumerator = myArr.GetEnumerator();\n       int i = 0;\n       int cols = myArr.GetLength( myArr.Rank - 1 );\n       while ( myEnumerator.MoveNext() )  {\n          if ( i &lt; cols )  {\n             i++;\n          } else  {\n             Console.WriteLine();\n             i = 1;\n          }\n          Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator.Current );\n       }\n       Console.WriteLine();\n    }\n }\n /*\n This code produces the following output.\n \n Int32 array:\n     1    2    3    4    5\n Object array:\n     26    27    28    29    30\n Int32 array - Last two elements should now be the same as Object array:\n     1    2    3    29    30\n Object array - First element should now be the same as Int32 array:\n     1    27    28    29    30\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Copy_System_Array_System_Int64_System_Array_System_Int64_System_Int64_\">\r\n    \r\n            <a id=\"System_Array_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy(Array,Int64,Array,Int64,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Copies a range of elements from an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the specified source index and pastes them to another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Copy (Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the data to copy.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the index in the <code>sourceArray</code> at which copying begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationArray</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that receives the data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destinationIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the index in the <code>destinationArray</code> at which storing begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>, inclusive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>destinationArray</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> and <code>destinationArray</code> have different ranks.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a></div>\r\n                  </div>\r\n                  <p><code>sourceArray</code> and <code>destinationArray</code> are of incompatible types.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>At least one element in <code>sourceArray</code> cannot be cast to the type of <code>destinationArray</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>sourceIndex</code> is outside the range of valid indexes for the <code>sourceArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>destinationIndex</code> is outside the range of valid indexes for the <code>destinationArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than 0 or greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>length</code> is greater than the number of elements from <code>sourceIndex</code> to the end of <code>sourceArray</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is greater than the number of elements from <code>destinationIndex</code> to the end of <code>destinationArray</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>sourceArray</code> and <code>destinationArray</code> parameters must have the same number of dimensions. In addition, <code>destinationArray</code> must already have been dimensioned and must have a sufficient number of elements starting from the <code>destinationIndex</code> position to accommodate the copied data.  </p>\n<p> When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column). To start copying from the second element of the third row (or column), <code>sourceIndex</code> must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.  </p>\n<p> If <code>sourceArray</code> and <code>destinationArray</code> overlap, this method behaves as if the original values of <code>sourceArray</code> were preserved in a temporary location before <code>destinationArray</code> is overwritten.  </p>\n<p> [C++]  </p>\n<p> This method is equivalent to the standard C/C++ function <code>memmove</code>, not <code>memcpy</code>.  </p>\n<p> The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.  </p>\n<ul>\n<li><p>When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.  </p>\n</li>\n<li><p>When copying from a reference-type or value-type array to an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array, an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is created to hold each value or reference and then copied. When copying from an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array to a reference-type or value-type array and the assignment is not possible, an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown.  </p>\n</li>\n<li><p>If <code>sourceArray</code> and <code>destinationArray</code> are both reference-type arrays or are both arrays of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, a shallow copy is performed. A shallow copy of an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is a new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>containing references to the same elements as the original <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> copies the elements and everything directly or indirectly referenced by the elements.  </p>\n<p>An <a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows:  </p>\n</li>\n<li><p>A type is compatible with itself.  </p>\n</li>\n<li><p>A value type is compatible with <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.  </p>\n</li>\n<li><p>Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n</li>\n<li><p>A nonintrinsic (user-defined) value type is compatible only with itself.  </p>\n</li>\n<li><p>Enumerations have an implicit conversion to <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> and to their underlying type.  </p>\n<p>If every element in <code>sourceArray</code> requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in <code>destinationArray</code>, an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown.  </p>\n<p>If this method throws an exception while copying, the state of <code>destinationArray</code> is undefined.  </p>\n<p>This method is an O(<code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to copy from one <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of type integer.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Array.Copy1 Example#1\">using namespace System;\nvoid PrintValues( Array^ myArr );\nvoid main()\n{\n   \n   // Creates and initializes a new Array instance of type Int32.\n   Array^ myIntArray = Array::CreateInstance( Type::GetType(  &quot;System.Int32&quot; ), 5 );\n   for ( int i = myIntArray-&gt;GetLowerBound( 0 ); i &lt;= myIntArray-&gt;GetUpperBound( 0 ); i++ )\n      myIntArray-&gt;SetValue( i + 1, i );\n   \n   // Creates and initializes a new Array instance of type Object.\n   Array^ myObjArray = Array::CreateInstance( Type::GetType(  &quot;System.Object&quot; ), 5 );\n   for ( int i = myObjArray-&gt;GetLowerBound( 0 ); i &lt;= myObjArray-&gt;GetUpperBound( 0 ); i++ )\n      myObjArray-&gt;SetValue( i + 26, i );\n   \n   // Displays the initial values of both arrays.\n   Console::WriteLine(  &quot;Int32 array:&quot; );\n   PrintValues( myIntArray );\n   Console::WriteLine(  &quot;Object array:&quot; );\n   PrintValues( myObjArray );\n   \n   // Copies the first element from the Int32 array to the Object array.\n   Array::Copy( myIntArray, myIntArray-&gt;GetLowerBound( 0 ), myObjArray, myObjArray-&gt;GetLowerBound( 0 ), 1 );\n   \n   // Copies the last two elements from the Object array to the Int32 array.\n   Array::Copy( myObjArray, myObjArray-&gt;GetUpperBound( 0 ) - 1, myIntArray, myIntArray-&gt;GetUpperBound( 0 ) - 1, 2 );\n   \n   // Displays the values of the modified arrays.\n   Console::WriteLine(  &quot;Int32 array - Last two elements should now be the same as Object array:&quot; );\n   PrintValues( myIntArray );\n   Console::WriteLine(  &quot;Object array - First element should now be the same as Int32 array:&quot; );\n   PrintValues( myObjArray );\n}\n\nvoid PrintValues( Array^ myArr )\n{\n   System::Collections::IEnumerator^ myEnumerator = myArr-&gt;GetEnumerator();\n   int i = 0;\n   int cols = myArr-&gt;GetLength( myArr-&gt;Rank - 1 );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      if ( i &lt; cols )\n      {\n         i++;\n      }\n      else\n      {\n         Console::WriteLine();\n         i = 1;\n      }\n\n      Console::Write(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator-&gt;Current );\n   }\n\n   Console::WriteLine();\n}\n\n/*\n This code produces the following output.\n \n Int32 array:\n     1    2    3    4    5\n Object array:\n     26    27    28    29    30\n Int32 array - Last two elements should now be the same as Object array:\n     1    2    3    29    30\n Object array - First element should now be the same as Int32 array:\n     1    27    28    29    30\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.Copy1 Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Array of type Int32.\n        Dim myIntArray As Array = _\n           Array.CreateInstance(GetType(System.Int32), 5)\n        Dim i As Integer\n        For i = myIntArray.GetLowerBound(0) To myIntArray.GetUpperBound(0)\n            myIntArray.SetValue(i + 1, i)\n        Next i \n        &#39; Creates and initializes a new Array of type Object.\n        Dim myObjArray As Array = _\n           Array.CreateInstance(GetType(System.Object), 5)\n        For i = myObjArray.GetLowerBound(0) To myObjArray.GetUpperBound(0)\n            myObjArray.SetValue(i + 26, i)\n        Next i \n        &#39; Displays the initial values of both arrays.\n        Console.WriteLine(&quot;Int32 array:&quot;)\n        PrintValues(myIntArray)\n        Console.WriteLine(&quot;Object array:&quot;)\n        PrintValues(myObjArray)\n        \n        &#39; Copies the first element from the Int32 array to the Object array.\n        Array.Copy(myIntArray, myIntArray.GetLowerBound(0), myObjArray, _\n           myObjArray.GetLowerBound(0), 1)\n        \n        &#39; Copies the last two elements from the Object array to the Int32 array.\n        Array.Copy(myObjArray, myObjArray.GetUpperBound(0) - 1, myIntArray, _\n           myIntArray.GetUpperBound(0) - 1, 2)\n        \n        &#39; Displays the values of the modified arrays.\n        Console.WriteLine(&quot;Int32 array - Last two elements should now be &quot; _\n           + &quot;the same as Object array:&quot;)\n        PrintValues(myIntArray)\n        Console.WriteLine(&quot;Object array - First element should now be the &quot; _\n           + &quot;same as Int32 array:&quot;)\n        PrintValues(myObjArray)\n    End Sub\n    \n    Public Shared Sub PrintValues(myArr As Array)\n        Dim myEnumerator As System.Collections.IEnumerator = _\n           myArr.GetEnumerator()\n        Dim i As Integer = 0\n        Dim cols As Integer = myArr.GetLength((myArr.Rank - 1))\n        While myEnumerator.MoveNext()\n            If i &lt; cols Then\n                i += 1\n            Else\n                Console.WriteLine()\n                i = 1\n            End If\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; Int32 array:\n&#39;     1    2    3    4    5\n&#39; Object array:\n&#39;     26    27    28    29    30\n&#39; Int32 array - Last two elements should now be the same as Object array:\n&#39;     1    2    3    29    30\n&#39; Object array - First element should now be the same as Int32 array:\n&#39;     1    27    28    29    30\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.Copy1 Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Array of type Int32.\n       Array myIntArray=Array.CreateInstance( typeof(System.Int32), 5 );\n       for ( int i = myIntArray.GetLowerBound(0); i &lt;= myIntArray.GetUpperBound(0); i++ )\n          myIntArray.SetValue( i+1, i );\n \n       // Creates and initializes a new Array of type Object.\n       Array myObjArray = Array.CreateInstance( typeof(System.Object), 5 );\n       for ( int i = myObjArray.GetLowerBound(0); i &lt;= myObjArray.GetUpperBound(0); i++ )\n          myObjArray.SetValue( i+26, i );\n \n       // Displays the initial values of both arrays.\n       Console.WriteLine( &quot;Int32 array:&quot; );\n       PrintValues( myIntArray );\n       Console.WriteLine( &quot;Object array:&quot; );\n       PrintValues( myObjArray );\n \n       // Copies the first element from the Int32 array to the Object array.\n       Array.Copy( myIntArray, myIntArray.GetLowerBound(0), myObjArray, myObjArray.GetLowerBound(0), 1 );\n \n       // Copies the last two elements from the Object array to the Int32 array.\n       Array.Copy( myObjArray, myObjArray.GetUpperBound(0) - 1, myIntArray, myIntArray.GetUpperBound(0) - 1, 2 );\n \n       // Displays the values of the modified arrays.\n       Console.WriteLine( &quot;Int32 array - Last two elements should now be the same as Object array:&quot; );\n       PrintValues( myIntArray );\n       Console.WriteLine( &quot;Object array - First element should now be the same as Int32 array:&quot; );\n       PrintValues( myObjArray );\n    }\n \n \n    public static void PrintValues( Array myArr )  {\n       System.Collections.IEnumerator myEnumerator = myArr.GetEnumerator();\n       int i = 0;\n       int cols = myArr.GetLength( myArr.Rank - 1 );\n       while ( myEnumerator.MoveNext() )  {\n          if ( i &lt; cols )  {\n             i++;\n          } else  {\n             Console.WriteLine();\n             i = 1;\n          }\n          Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator.Current );\n       }\n       Console.WriteLine();\n    }\n }\n /*\n This code produces the following output.\n \n Int32 array:\n     1    2    3    4    5\n Object array:\n     26    27    28    29    30\n Int32 array - Last two elements should now be the same as Object array:\n     1    2    3    29    30\n Object array - First element should now be the same as Int32 array:\n     1    27    28    29    30\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 32-bit integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (Array array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array that is the destination of the elements copied from the current array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source array is greater than the available number of elements from <code>index</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p>The source array is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>At least one element in the source <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> cannot be cast to the type of destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method copies all the elements of the current array instance to the <code>array</code> destination array, starting at index <code>index</code>. The <code>array</code> destination array must already have been dimensioned and must have a sufficient number of elements to accommodate the copied elements. Otherwise, the method throws an exception.  </p>\n<p> This method supports the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">System.Collections.ICollection</a> interface. If implementing <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">System.Collections.ICollection</a> is not explicitly required, use <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to avoid an extra indirection.  </p>\n<p> If this method throws an exception while copying, the state of <code>array</code> is undefined.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a>.It performs a shallow copy only.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to copy an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Array.CopyTo Example#1\">using namespace System;\nvoid main1();\nvoid main2();\nvoid main()\n{\n   main1();\n   Console::WriteLine();\n   main2();\n}\n\nvoid PrintValues( Array^ myArr );\nvoid main1()\n{\n   // Creates and initializes two new Array instances.\n   Array^ mySourceArray = Array::CreateInstance( String::typeid, 6 );\n   mySourceArray-&gt;SetValue( &quot;three&quot;, 0 );\n   mySourceArray-&gt;SetValue( &quot;napping&quot;, 1 );\n   mySourceArray-&gt;SetValue( &quot;cats&quot;, 2 );\n   mySourceArray-&gt;SetValue( &quot;in&quot;, 3 );\n   mySourceArray-&gt;SetValue( &quot;the&quot;, 4 );\n   mySourceArray-&gt;SetValue( &quot;barn&quot;, 5 );\n   Array^ myTargetArray = Array::CreateInstance( String::typeid, 15 );\n   myTargetArray-&gt;SetValue( &quot;The&quot;, 0 );\n   myTargetArray-&gt;SetValue( &quot;quick&quot;, 1 );\n   myTargetArray-&gt;SetValue( &quot;brown&quot;, 2 );\n   myTargetArray-&gt;SetValue( &quot;fox&quot;, 3 );\n   myTargetArray-&gt;SetValue( &quot;jumped&quot;, 4 );\n   myTargetArray-&gt;SetValue( &quot;over&quot;, 5 );\n   myTargetArray-&gt;SetValue( &quot;the&quot;, 6 );\n   myTargetArray-&gt;SetValue( &quot;lazy&quot;, 7 );\n   myTargetArray-&gt;SetValue( &quot;dog&quot;, 8 );\n\n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The target Array instance contains the following (before and after copying):&quot; );\n   PrintValues( myTargetArray );\n\n   // Copies the source Array to the target Array, starting at index 6.\n   mySourceArray-&gt;CopyTo( myTargetArray, 6 );\n\n   // Displays the values of the Array.\n   PrintValues( myTargetArray );\n}\n\nvoid PrintValues( Array^ myArr )\n{\n   System::Collections::IEnumerator^ myEnumerator = myArr-&gt;GetEnumerator();\n   int i = 0;\n   int cols = myArr-&gt;GetLength( myArr-&gt;Rank - 1 );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      if ( i &lt; cols )\n      {\n         i++;\n      }\n      else\n      {\n         Console::WriteLine();\n         i = 1;\n      }\n\n      Console::Write(  &quot; {0}&quot;, myEnumerator-&gt;Current );\n   }\n\n   Console::WriteLine();\n}\n\n\n/*\n This code produces the following output.\n \n  The target Array instance contains the following (before and after copying):\n  The quick brown fox jumped over the lazy dog      \n  The quick brown fox jumped over three napping cats in the barn\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.CopyTo Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes two new Arrays.\n        Dim mySourceArray As Array = Array.CreateInstance(GetType(String), 6)\n        mySourceArray.SetValue(&quot;three&quot;, 0)\n        mySourceArray.SetValue(&quot;napping&quot;, 1)\n        mySourceArray.SetValue(&quot;cats&quot;, 2)\n        mySourceArray.SetValue(&quot;in&quot;, 3)\n        mySourceArray.SetValue(&quot;the&quot;, 4)\n        mySourceArray.SetValue(&quot;barn&quot;, 5)\n        Dim myTargetArray As Array = Array.CreateInstance(GetType(String), 15)\n        myTargetArray.SetValue(&quot;The&quot;, 0)\n        myTargetArray.SetValue(&quot;quick&quot;, 1)\n        myTargetArray.SetValue(&quot;brown&quot;, 2)\n        myTargetArray.SetValue(&quot;fox&quot;, 3)\n        myTargetArray.SetValue(&quot;jumps&quot;, 4)\n        myTargetArray.SetValue(&quot;over&quot;, 5)\n        myTargetArray.SetValue(&quot;the&quot;, 6)\n        myTargetArray.SetValue(&quot;lazy&quot;, 7)\n        myTargetArray.SetValue(&quot;dog&quot;, 8)\n        \n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The target Array contains the following&quot; _\n           &amp; &quot;(before and after copying):&quot;)\n        PrintValues(myTargetArray, &quot; &quot;c)\n        \n        &#39; Copies the source Array to the target Array, starting at index 6.\n        mySourceArray.CopyTo(myTargetArray, 6)\n        \n        &#39; Displays the values of the Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n    End Sub    \n    \n    Public Shared Sub PrintValues(myArr As Array, mySeparator As Char)\n        Dim myEnumerator As System.Collections.IEnumerator = _\n           myArr.GetEnumerator()\n        Dim i As Integer = 0\n        Dim cols As Integer = myArr.GetLength((myArr.Rank - 1))\n        While myEnumerator.MoveNext()\n            If i &lt; cols Then\n                i += 1\n            Else\n                Console.WriteLine()\n                i = 1\n            End If\n            Console.Write(&quot;{0}{1}&quot;, mySeparator, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39;  The target Array contains the following (before and after copying):\n&#39;  The quick brown fox jumps over the lazy dog      \n&#39;  The quick brown fox jumps over three napping cats in the barn\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.CopyTo Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes two new Arrays.\n       Array mySourceArray=Array.CreateInstance( typeof(String), 6 );\n       mySourceArray.SetValue( &quot;three&quot;, 0 );\n       mySourceArray.SetValue( &quot;napping&quot;, 1 );\n       mySourceArray.SetValue( &quot;cats&quot;, 2 );\n       mySourceArray.SetValue( &quot;in&quot;, 3 );\n       mySourceArray.SetValue( &quot;the&quot;, 4 );\n       mySourceArray.SetValue( &quot;barn&quot;, 5 );\n       Array myTargetArray=Array.CreateInstance( typeof(String), 15 );\n       myTargetArray.SetValue( &quot;The&quot;, 0 );\n       myTargetArray.SetValue( &quot;quick&quot;, 1 );\n       myTargetArray.SetValue( &quot;brown&quot;, 2 );\n       myTargetArray.SetValue( &quot;fox&quot;, 3 );\n       myTargetArray.SetValue( &quot;jumps&quot;, 4 );\n       myTargetArray.SetValue( &quot;over&quot;, 5 );\n       myTargetArray.SetValue( &quot;the&quot;, 6 );\n       myTargetArray.SetValue( &quot;lazy&quot;, 7 );\n       myTargetArray.SetValue( &quot;dog&quot;, 8 );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the source Array to the target Array, starting at index 6.\n       mySourceArray.CopyTo( myTargetArray, 6 );\n \n       // Displays the values of the Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n    }\n \n \n    public static void PrintValues( Array myArr, char mySeparator )  {\n       System.Collections.IEnumerator myEnumerator = myArr.GetEnumerator();\n       int i = 0;\n       int cols = myArr.GetLength( myArr.Rank - 1 );\n       while ( myEnumerator.MoveNext() )  {\n          if ( i &lt; cols )  {\n             i++;\n          } else  {\n             Console.WriteLine();\n             i = 1;\n          }\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, myEnumerator.Current );\n       }\n       Console.WriteLine();\n    }\n }\n /*\n This code produces the following output.\n \n  The target Array contains the following (before and after copying):\n  The quick brown fox jumps over the lazy dog      \n  The quick brown fox jumps over three napping cats in the barn\n */\n</code></pre><p> The following code example shows how to copy an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> with a nonzero lower bound. Note that the entire source <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is copied, including empty elements that overwrite existing elements in the target <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Array.CopyTo Example#2\">void PrintIndexAndValues( Array^ myArray );\nvoid main2()\n{\n   // Creates and initializes the source Array.\n   Array^ myArrayZero = Array::CreateInstance( String::typeid, 3 );\n   myArrayZero-&gt;SetValue( &quot;zero&quot;, 0 );\n   myArrayZero-&gt;SetValue( &quot;one&quot;, 1 );\n\n   // Displays the source Array.\n   Console::WriteLine(  &quot;The array with lowbound=0 contains:&quot; );\n   PrintIndexAndValues( myArrayZero );\n\n   // Creates and initializes the target Array.\n   array&lt;int&gt;^myArrLen = {4};\n   array&lt;int&gt;^myArrLow = {2};\n   Array^ myArrayTwo = Array::CreateInstance( String::typeid, myArrLen, myArrLow );\n   myArrayTwo-&gt;SetValue( &quot;two&quot;, 2 );\n   myArrayTwo-&gt;SetValue( &quot;three&quot;, 3 );\n   myArrayTwo-&gt;SetValue( &quot;four&quot;, 4 );\n   myArrayTwo-&gt;SetValue( &quot;five&quot;, 5 );\n\n   // Displays the target Array.\n   Console::WriteLine(  &quot;The array with lowbound=2 contains:&quot; );\n   PrintIndexAndValues( myArrayTwo );\n\n   // Copy from the array with lowbound=0 to the array with lowbound=2.\n   myArrayZero-&gt;CopyTo( myArrayTwo, 3 );\n\n   // Displays the modified target Array.\n   Console::WriteLine(  &quot;<br>After copying at relative index 1:&quot; );\n   PrintIndexAndValues( myArrayTwo );\n}\n\nvoid PrintIndexAndValues( Array^ myArray )\n{\n   for ( int i = myArray-&gt;GetLowerBound( 0 ); i &lt;= myArray-&gt;GetUpperBound( 0 ); i++ )\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray-&gt;GetValue( i ) );\n}\n\n/* \n This code produces the following output.\n \n The array with lowbound=0 contains:\n     [0]:    zero\n     [1]:    one\n     [2]:    \n The array with lowbound=2 contains:\n     [2]:    two\n     [3]:    three\n     [4]:    four\n     [5]:    five\n \n After copying at relative index 1:\n     [2]:    two\n     [3]:    zero\n     [4]:    one\n     [5]:\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.CopyTo Example#2\">Public Class SamplesArray2    \n    \n    Public Shared Sub Main()\n        &#39; Creates and initializes the source Array.\n        Dim myArrayZero As Array = Array.CreateInstance(GetType(String), 3)\n        myArrayZero.SetValue(&quot;zero&quot;, 0)\n        myArrayZero.SetValue(&quot;one&quot;, 1)\n        \n        &#39; Displays the source Array.\n        Console.WriteLine(&quot;The array with lower bound=0 contains:&quot;)\n        PrintIndexAndValues(myArrayZero)\n        \n        &#39; Creates and initializes the target Array.\n        Dim myArrLen As Integer() = {4}\n        Dim myArrLow As Integer() = {2}\n        Dim myArrayTwo As Array = Array.CreateInstance(GetType(String), _\n           myArrLen, myArrLow)\n        myArrayTwo.SetValue(&quot;two&quot;, 2)\n        myArrayTwo.SetValue(&quot;three&quot;, 3)\n        myArrayTwo.SetValue(&quot;four&quot;, 4)\n        myArrayTwo.SetValue(&quot;five&quot;, 5)\n        \n        &#39; Displays the target Array.\n        Console.WriteLine(&quot;The array with lower bound=2 contains:&quot;)\n        PrintIndexAndValues(myArrayTwo)\n        \n        &#39; Copies from the array with lower bound=0 to the array with lower bound=2.\n        myArrayZero.CopyTo(myArrayTwo, 3)\n        \n        &#39; Displays the modified target Array.\n        Console.WriteLine(ControlChars.Cr + &quot;After copying to the target array from &quot; _\n           + &quot;index 3:&quot;)\n        PrintIndexAndValues(myArrayTwo)\n    End Sub\n    \n    Public Shared Sub PrintIndexAndValues(myArray As Array)\n        Dim i As Integer\n        For i = myArray.GetLowerBound(0) To myArray.GetUpperBound(0)\n            Console.WriteLine(ControlChars.Tab + &quot;[{0}]:&quot; + ControlChars.Tab _\n               + &quot;{1}&quot;, i, myArray.GetValue(i))\n        Next i\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The array with lower bound=0 contains:\n&#39;     [0]:    zero\n&#39;     [1]:    one\n&#39;     [2]:    \n&#39; The array with lower bound=2 contains:\n&#39;     [2]:    two\n&#39;     [3]:    three\n&#39;     [4]:    four\n&#39;     [5]:    five\n&#39; \n&#39; After copying to the target array from index 3:\n&#39;     [2]:    two\n&#39;     [3]:    zero\n&#39;     [4]:    one\n&#39;     [5]: \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.CopyTo Example#2\"> public class SamplesArray2{\n \n    public static void Main()  {\n       // Creates and initializes the source Array.\n       Array myArrayZero=Array.CreateInstance( typeof(String), 3 );\n       myArrayZero.SetValue( &quot;zero&quot;, 0 );\n       myArrayZero.SetValue( &quot;one&quot;, 1 );\n \n       // Displays the source Array.\n       Console.WriteLine( &quot;The array with lower bound=0 contains:&quot; );\n       PrintIndexAndValues( myArrayZero );\n \n       // Creates and initializes the target Array.\n       int[] myArrLen = { 4 };\n       int[] myArrLow = { 2 };\n       Array myArrayTwo=Array.CreateInstance( typeof(String), myArrLen, myArrLow );\n       myArrayTwo.SetValue( &quot;two&quot;, 2 );\n       myArrayTwo.SetValue( &quot;three&quot;, 3 );\n       myArrayTwo.SetValue( &quot;four&quot;, 4 );\n       myArrayTwo.SetValue( &quot;five&quot;, 5 );\n \n       // Displays the target Array.\n       Console.WriteLine( &quot;The array with lower bound=2 contains:&quot; );\n       PrintIndexAndValues( myArrayTwo );\n \n       // Copies from the array with lower bound=0 to the array with lower bound=2.\n       myArrayZero.CopyTo( myArrayTwo, 3 );\n \n       // Displays the modified target Array.\n       Console.WriteLine( &quot;<br>After copying to the target array from index 3:&quot; );\n       PrintIndexAndValues( myArrayTwo );\n    }\n \n \n    public static void PrintIndexAndValues( Array myArray )  {\n       for ( int i = myArray.GetLowerBound(0); i &lt;= myArray.GetUpperBound(0); i++ )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray.GetValue( i ) );\n    }\n }\n /* \n This code produces the following output.\n \n The array with lower bound=0 contains:\n     [0]:    zero\n     [1]:    one\n     [2]:    \n The array with lower bound=2 contains:\n     [2]:    two\n     [3]:    three\n     [4]:    four\n     [5]:    five\n \n After copying to the target array from index 3:\n     [2]:    two\n     [3]:    zero\n     [4]:    one\n     [5]:\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_CopyTo_System_Array_System_Int64_\">\r\n    \r\n            <a id=\"System_Array_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Array,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 64-bit integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (Array array, long index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array that is the destination of the elements copied from the current array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source array is greater than the available number of elements from <code>index</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p>The source <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>At least one element in the source <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> cannot be cast to the type of destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method copies all the elements of the current array instance to the <code>array</code> destination array, starting at index <code>index</code>. The <code>array</code> destination array must already have been dimensioned and must have a sufficient number of elements to accommodate the copied elements. Otherwise, the method throws an exception.  </p>\n<p> This method supports the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">System.Collections.ICollection</a> interface. If implementing <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">System.Collections.ICollection</a> is not explicitly required, use <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to avoid an extra indirection.  </p>\n<p> If this method throws an exception while copying, the state of <code>array</code> is undefined.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a>.It performs a shallow copy only.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to copy an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Array.CopyTo Example#1\">using namespace System;\nvoid main1();\nvoid main2();\nvoid main()\n{\n   main1();\n   Console::WriteLine();\n   main2();\n}\n\nvoid PrintValues( Array^ myArr );\nvoid main1()\n{\n   // Creates and initializes two new Array instances.\n   Array^ mySourceArray = Array::CreateInstance( String::typeid, 6 );\n   mySourceArray-&gt;SetValue( &quot;three&quot;, 0 );\n   mySourceArray-&gt;SetValue( &quot;napping&quot;, 1 );\n   mySourceArray-&gt;SetValue( &quot;cats&quot;, 2 );\n   mySourceArray-&gt;SetValue( &quot;in&quot;, 3 );\n   mySourceArray-&gt;SetValue( &quot;the&quot;, 4 );\n   mySourceArray-&gt;SetValue( &quot;barn&quot;, 5 );\n   Array^ myTargetArray = Array::CreateInstance( String::typeid, 15 );\n   myTargetArray-&gt;SetValue( &quot;The&quot;, 0 );\n   myTargetArray-&gt;SetValue( &quot;quick&quot;, 1 );\n   myTargetArray-&gt;SetValue( &quot;brown&quot;, 2 );\n   myTargetArray-&gt;SetValue( &quot;fox&quot;, 3 );\n   myTargetArray-&gt;SetValue( &quot;jumped&quot;, 4 );\n   myTargetArray-&gt;SetValue( &quot;over&quot;, 5 );\n   myTargetArray-&gt;SetValue( &quot;the&quot;, 6 );\n   myTargetArray-&gt;SetValue( &quot;lazy&quot;, 7 );\n   myTargetArray-&gt;SetValue( &quot;dog&quot;, 8 );\n\n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The target Array instance contains the following (before and after copying):&quot; );\n   PrintValues( myTargetArray );\n\n   // Copies the source Array to the target Array, starting at index 6.\n   mySourceArray-&gt;CopyTo( myTargetArray, 6 );\n\n   // Displays the values of the Array.\n   PrintValues( myTargetArray );\n}\n\nvoid PrintValues( Array^ myArr )\n{\n   System::Collections::IEnumerator^ myEnumerator = myArr-&gt;GetEnumerator();\n   int i = 0;\n   int cols = myArr-&gt;GetLength( myArr-&gt;Rank - 1 );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      if ( i &lt; cols )\n      {\n         i++;\n      }\n      else\n      {\n         Console::WriteLine();\n         i = 1;\n      }\n\n      Console::Write(  &quot; {0}&quot;, myEnumerator-&gt;Current );\n   }\n\n   Console::WriteLine();\n}\n\n\n/*\n This code produces the following output.\n \n  The target Array instance contains the following (before and after copying):\n  The quick brown fox jumped over the lazy dog      \n  The quick brown fox jumped over three napping cats in the barn\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.CopyTo Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes two new Arrays.\n        Dim mySourceArray As Array = Array.CreateInstance(GetType(String), 6)\n        mySourceArray.SetValue(&quot;three&quot;, 0)\n        mySourceArray.SetValue(&quot;napping&quot;, 1)\n        mySourceArray.SetValue(&quot;cats&quot;, 2)\n        mySourceArray.SetValue(&quot;in&quot;, 3)\n        mySourceArray.SetValue(&quot;the&quot;, 4)\n        mySourceArray.SetValue(&quot;barn&quot;, 5)\n        Dim myTargetArray As Array = Array.CreateInstance(GetType(String), 15)\n        myTargetArray.SetValue(&quot;The&quot;, 0)\n        myTargetArray.SetValue(&quot;quick&quot;, 1)\n        myTargetArray.SetValue(&quot;brown&quot;, 2)\n        myTargetArray.SetValue(&quot;fox&quot;, 3)\n        myTargetArray.SetValue(&quot;jumps&quot;, 4)\n        myTargetArray.SetValue(&quot;over&quot;, 5)\n        myTargetArray.SetValue(&quot;the&quot;, 6)\n        myTargetArray.SetValue(&quot;lazy&quot;, 7)\n        myTargetArray.SetValue(&quot;dog&quot;, 8)\n        \n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The target Array contains the following&quot; _\n           &amp; &quot;(before and after copying):&quot;)\n        PrintValues(myTargetArray, &quot; &quot;c)\n        \n        &#39; Copies the source Array to the target Array, starting at index 6.\n        mySourceArray.CopyTo(myTargetArray, 6)\n        \n        &#39; Displays the values of the Array.\n        PrintValues(myTargetArray, &quot; &quot;c)\n    End Sub    \n    \n    Public Shared Sub PrintValues(myArr As Array, mySeparator As Char)\n        Dim myEnumerator As System.Collections.IEnumerator = _\n           myArr.GetEnumerator()\n        Dim i As Integer = 0\n        Dim cols As Integer = myArr.GetLength((myArr.Rank - 1))\n        While myEnumerator.MoveNext()\n            If i &lt; cols Then\n                i += 1\n            Else\n                Console.WriteLine()\n                i = 1\n            End If\n            Console.Write(&quot;{0}{1}&quot;, mySeparator, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39;  The target Array contains the following (before and after copying):\n&#39;  The quick brown fox jumps over the lazy dog      \n&#39;  The quick brown fox jumps over three napping cats in the barn\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.CopyTo Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes two new Arrays.\n       Array mySourceArray=Array.CreateInstance( typeof(String), 6 );\n       mySourceArray.SetValue( &quot;three&quot;, 0 );\n       mySourceArray.SetValue( &quot;napping&quot;, 1 );\n       mySourceArray.SetValue( &quot;cats&quot;, 2 );\n       mySourceArray.SetValue( &quot;in&quot;, 3 );\n       mySourceArray.SetValue( &quot;the&quot;, 4 );\n       mySourceArray.SetValue( &quot;barn&quot;, 5 );\n       Array myTargetArray=Array.CreateInstance( typeof(String), 15 );\n       myTargetArray.SetValue( &quot;The&quot;, 0 );\n       myTargetArray.SetValue( &quot;quick&quot;, 1 );\n       myTargetArray.SetValue( &quot;brown&quot;, 2 );\n       myTargetArray.SetValue( &quot;fox&quot;, 3 );\n       myTargetArray.SetValue( &quot;jumps&quot;, 4 );\n       myTargetArray.SetValue( &quot;over&quot;, 5 );\n       myTargetArray.SetValue( &quot;the&quot;, 6 );\n       myTargetArray.SetValue( &quot;lazy&quot;, 7 );\n       myTargetArray.SetValue( &quot;dog&quot;, 8 );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the source Array to the target Array, starting at index 6.\n       mySourceArray.CopyTo( myTargetArray, 6 );\n \n       // Displays the values of the Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n    }\n \n \n    public static void PrintValues( Array myArr, char mySeparator )  {\n       System.Collections.IEnumerator myEnumerator = myArr.GetEnumerator();\n       int i = 0;\n       int cols = myArr.GetLength( myArr.Rank - 1 );\n       while ( myEnumerator.MoveNext() )  {\n          if ( i &lt; cols )  {\n             i++;\n          } else  {\n             Console.WriteLine();\n             i = 1;\n          }\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, myEnumerator.Current );\n       }\n       Console.WriteLine();\n    }\n }\n /*\n This code produces the following output.\n \n  The target Array contains the following (before and after copying):\n  The quick brown fox jumps over the lazy dog      \n  The quick brown fox jumps over three napping cats in the barn\n */\n</code></pre><p> The following code example shows how to copy an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to another <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> with a nonzero lower bound. Note that the entire source <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is copied, including empty elements that overwrite existing elements in the target <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Array.CopyTo Example#2\">void PrintIndexAndValues( Array^ myArray );\nvoid main2()\n{\n   // Creates and initializes the source Array.\n   Array^ myArrayZero = Array::CreateInstance( String::typeid, 3 );\n   myArrayZero-&gt;SetValue( &quot;zero&quot;, 0 );\n   myArrayZero-&gt;SetValue( &quot;one&quot;, 1 );\n\n   // Displays the source Array.\n   Console::WriteLine(  &quot;The array with lowbound=0 contains:&quot; );\n   PrintIndexAndValues( myArrayZero );\n\n   // Creates and initializes the target Array.\n   array&lt;int&gt;^myArrLen = {4};\n   array&lt;int&gt;^myArrLow = {2};\n   Array^ myArrayTwo = Array::CreateInstance( String::typeid, myArrLen, myArrLow );\n   myArrayTwo-&gt;SetValue( &quot;two&quot;, 2 );\n   myArrayTwo-&gt;SetValue( &quot;three&quot;, 3 );\n   myArrayTwo-&gt;SetValue( &quot;four&quot;, 4 );\n   myArrayTwo-&gt;SetValue( &quot;five&quot;, 5 );\n\n   // Displays the target Array.\n   Console::WriteLine(  &quot;The array with lowbound=2 contains:&quot; );\n   PrintIndexAndValues( myArrayTwo );\n\n   // Copy from the array with lowbound=0 to the array with lowbound=2.\n   myArrayZero-&gt;CopyTo( myArrayTwo, 3 );\n\n   // Displays the modified target Array.\n   Console::WriteLine(  &quot;<br>After copying at relative index 1:&quot; );\n   PrintIndexAndValues( myArrayTwo );\n}\n\nvoid PrintIndexAndValues( Array^ myArray )\n{\n   for ( int i = myArray-&gt;GetLowerBound( 0 ); i &lt;= myArray-&gt;GetUpperBound( 0 ); i++ )\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray-&gt;GetValue( i ) );\n}\n\n/* \n This code produces the following output.\n \n The array with lowbound=0 contains:\n     [0]:    zero\n     [1]:    one\n     [2]:    \n The array with lowbound=2 contains:\n     [2]:    two\n     [3]:    three\n     [4]:    four\n     [5]:    five\n \n After copying at relative index 1:\n     [2]:    two\n     [3]:    zero\n     [4]:    one\n     [5]:\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.CopyTo Example#2\">Public Class SamplesArray2    \n    \n    Public Shared Sub Main()\n        &#39; Creates and initializes the source Array.\n        Dim myArrayZero As Array = Array.CreateInstance(GetType(String), 3)\n        myArrayZero.SetValue(&quot;zero&quot;, 0)\n        myArrayZero.SetValue(&quot;one&quot;, 1)\n        \n        &#39; Displays the source Array.\n        Console.WriteLine(&quot;The array with lower bound=0 contains:&quot;)\n        PrintIndexAndValues(myArrayZero)\n        \n        &#39; Creates and initializes the target Array.\n        Dim myArrLen As Integer() = {4}\n        Dim myArrLow As Integer() = {2}\n        Dim myArrayTwo As Array = Array.CreateInstance(GetType(String), _\n           myArrLen, myArrLow)\n        myArrayTwo.SetValue(&quot;two&quot;, 2)\n        myArrayTwo.SetValue(&quot;three&quot;, 3)\n        myArrayTwo.SetValue(&quot;four&quot;, 4)\n        myArrayTwo.SetValue(&quot;five&quot;, 5)\n        \n        &#39; Displays the target Array.\n        Console.WriteLine(&quot;The array with lower bound=2 contains:&quot;)\n        PrintIndexAndValues(myArrayTwo)\n        \n        &#39; Copies from the array with lower bound=0 to the array with lower bound=2.\n        myArrayZero.CopyTo(myArrayTwo, 3)\n        \n        &#39; Displays the modified target Array.\n        Console.WriteLine(ControlChars.Cr + &quot;After copying to the target array from &quot; _\n           + &quot;index 3:&quot;)\n        PrintIndexAndValues(myArrayTwo)\n    End Sub\n    \n    Public Shared Sub PrintIndexAndValues(myArray As Array)\n        Dim i As Integer\n        For i = myArray.GetLowerBound(0) To myArray.GetUpperBound(0)\n            Console.WriteLine(ControlChars.Tab + &quot;[{0}]:&quot; + ControlChars.Tab _\n               + &quot;{1}&quot;, i, myArray.GetValue(i))\n        Next i\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The array with lower bound=0 contains:\n&#39;     [0]:    zero\n&#39;     [1]:    one\n&#39;     [2]:    \n&#39; The array with lower bound=2 contains:\n&#39;     [2]:    two\n&#39;     [3]:    three\n&#39;     [4]:    four\n&#39;     [5]:    five\n&#39; \n&#39; After copying to the target array from index 3:\n&#39;     [2]:    two\n&#39;     [3]:    zero\n&#39;     [4]:    one\n&#39;     [5]: \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.CopyTo Example#2\"> public class SamplesArray2{\n \n    public static void Main()  {\n       // Creates and initializes the source Array.\n       Array myArrayZero=Array.CreateInstance( typeof(String), 3 );\n       myArrayZero.SetValue( &quot;zero&quot;, 0 );\n       myArrayZero.SetValue( &quot;one&quot;, 1 );\n \n       // Displays the source Array.\n       Console.WriteLine( &quot;The array with lower bound=0 contains:&quot; );\n       PrintIndexAndValues( myArrayZero );\n \n       // Creates and initializes the target Array.\n       int[] myArrLen = { 4 };\n       int[] myArrLow = { 2 };\n       Array myArrayTwo=Array.CreateInstance( typeof(String), myArrLen, myArrLow );\n       myArrayTwo.SetValue( &quot;two&quot;, 2 );\n       myArrayTwo.SetValue( &quot;three&quot;, 3 );\n       myArrayTwo.SetValue( &quot;four&quot;, 4 );\n       myArrayTwo.SetValue( &quot;five&quot;, 5 );\n \n       // Displays the target Array.\n       Console.WriteLine( &quot;The array with lower bound=2 contains:&quot; );\n       PrintIndexAndValues( myArrayTwo );\n \n       // Copies from the array with lower bound=0 to the array with lower bound=2.\n       myArrayZero.CopyTo( myArrayTwo, 3 );\n \n       // Displays the modified target Array.\n       Console.WriteLine( &quot;<br>After copying to the target array from index 3:&quot; );\n       PrintIndexAndValues( myArrayTwo );\n    }\n \n \n    public static void PrintIndexAndValues( Array myArray )  {\n       for ( int i = myArray.GetLowerBound(0); i &lt;= myArray.GetUpperBound(0); i++ )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray.GetValue( i ) );\n    }\n }\n /* \n This code produces the following output.\n \n The array with lower bound=0 contains:\n     [0]:    zero\n     [1]:    one\n     [2]:    \n The array with lower bound=2 contains:\n     [2]:    two\n     [3]:    three\n     [4]:    four\n     [5]:    five\n \n After copying to the target array from index 3:\n     [2]:    two\n     [3]:    zero\n     [4]:    one\n     [5]:\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_CreateInstance_System_Type_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(Type,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and length, with zero-based indexing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Array CreateInstance (Type elementType, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </div>\r\n                  <p>A new one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> with the specified length, using zero-based indexing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is not a valid <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is not supported. For example, <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a> is not supported.  </p>\n<p> -or-  </p>\n<p> <code>elementType</code> is an open generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>length</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike most classes, <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> provides the <a class=\"xref\" href=\"system.array#System_Array_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> method, instead of public constructors, to allow for late bound access.  </p>\n<p> Reference-type elements are initialized to <code>null</code>. Value-type elements are initialized to zero.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create and initialize a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Array.CreateInstance Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a one-dimensional Array of type Int32.\n       Array my1DArray=Array.CreateInstance( typeof(Int32), 5 );\n       for ( int i = my1DArray.GetLowerBound(0); i &lt;= my1DArray.GetUpperBound(0); i++ )\n          my1DArray.SetValue( i+1, i );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The one-dimensional Array contains the following values:&quot; );\n       PrintValues( my1DArray );\n    }\n \n \n    public static void PrintValues( Array myArr )  {\n       System.Collections.IEnumerator myEnumerator = myArr.GetEnumerator();\n       int i = 0;\n       int cols = myArr.GetLength( myArr.Rank - 1 );\n       while ( myEnumerator.MoveNext() )  {\n          if ( i &lt; cols )  {\n             i++;\n          } else  {\n             Console.WriteLine();\n             i = 1;\n          }\n          Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator.Current );\n       }\n       Console.WriteLine();\n    }\n }\n /*\n This code produces the following output.\n \n The one-dimensional Array contains the following values:\n     1    2    3    4    5\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Array.CreateInstance Example#1\">using namespace System;\nvoid PrintValues( Array^ myArr );\nvoid main()\n{\n   // Creates and initializes a one-dimensional Array instance of type Int32.\n   Array^ my1DArray = Array::CreateInstance( Int32::typeid, 5 );\n   for ( int i = my1DArray-&gt;GetLowerBound( 0 ); i &lt;= my1DArray-&gt;GetUpperBound( 0 ); i++ )\n      my1DArray-&gt;SetValue( i + 1, i );\n\n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The one-dimensional Array instance contains the following values:&quot; );\n   PrintValues( my1DArray );\n}\n\nvoid PrintValues( Array^ myArr )\n{\n   System::Collections::IEnumerator^ myEnumerator = myArr-&gt;GetEnumerator();\n   int i = 0;\n   int cols = myArr-&gt;GetLength( myArr-&gt;Rank - 1 );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      if ( i &lt; cols )\n      {\n         i++;\n      }\n      else\n      {\n         Console::WriteLine();\n         i = 1;\n      }\n\n      Console::Write(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator-&gt;Current );\n   }\n\n   Console::WriteLine();\n}\n\n/*\n This code produces the following output.\n \n The one-dimensional Array instance contains the following values:\n     1    2    3    4    5\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.CreateInstance Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a one-dimensional Array of type Int32.\n        Dim my1DArray As Array = Array.CreateInstance(GetType(Int32), 5)\n        Dim i As Integer\n        For i = my1DArray.GetLowerBound(0) To my1DArray.GetUpperBound(0)\n            my1DArray.SetValue(i + 1, i)\n        Next i \n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The one-dimensional Array contains the &quot; _\n           + &quot;following values:&quot;)\n        PrintValues(my1DArray)\n        \n    End Sub\n    \n    Public Shared Sub PrintValues(myArr As Array)\n        Dim myEnumerator As System.Collections.IEnumerator = _\n           myArr.GetEnumerator()\n        Dim i As Integer = 0\n        Dim cols As Integer = myArr.GetLength((myArr.Rank - 1))\n        While myEnumerator.MoveNext()\n            If i &lt; cols Then\n                i += 1\n            Else\n                Console.WriteLine()\n                i = 1\n            End If\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The one-dimensional Array contains the following values:\n&#39;     1    2    3    4    5 \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_CreateInstance_System_Type_System_Int32___\">\r\n    \r\n            <a id=\"System_Array_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(Type,Int32[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Array CreateInstance (Type elementType, int[] lengths);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lengths</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of 32-bit integers that represent the size of each dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </div>\r\n                  <p>A new multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> with the specified length for each dimension, using zero-based indexing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>lengths</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is not a valid <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.  </p>\n<p> -or-  </p>\n<p> The <code>lengths</code> array contains less than one element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is not supported. For example, <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a> is not supported.  </p>\n<p> -or-  </p>\n<p> <code>elementType</code> is an open generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Any value in <code>lengths</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike most classes, <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> provides the <a class=\"xref\" href=\"system.array#System_Array_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> method, instead of public constructors, to allow for late bound access.  </p>\n<p> The number of elements in the <code>lengths</code> array must equal the number of dimensions in the new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. Each element of the <code>lengths</code> array must specify the length of the corresponding dimension in the new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> Reference-type elements are initialized to <code>null</code>. Value-type elements are initialized to zero.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the product of all values in <code>lengths</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create and initialize a multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Array.CreateInstance3 Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a multidimensional Array of type String.\n       int[] myLengthsArray = new int[4] { 2, 3, 4, 5 };\n       Array my4DArray=Array.CreateInstance( typeof(String), myLengthsArray );\n       for ( int i = my4DArray.GetLowerBound(0); i &lt;= my4DArray.GetUpperBound(0); i++ )\n          for ( int j = my4DArray.GetLowerBound(1); j &lt;= my4DArray.GetUpperBound(1); j++ )\n             for ( int k = my4DArray.GetLowerBound(2); k &lt;= my4DArray.GetUpperBound(2); k++ )\n                for ( int l = my4DArray.GetLowerBound(3); l &lt;= my4DArray.GetUpperBound(3); l++ )  {\n                   int[] myIndicesArray = new int[4] { i, j, k, l };\n                   my4DArray.SetValue( Convert.ToString(i) + j + k + l, myIndicesArray );\n                }\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The four-dimensional Array contains the following values:&quot; );\n       PrintValues( my4DArray );\n    }\n \n \n    public static void PrintValues( Array myArr )  {\n       System.Collections.IEnumerator myEnumerator = myArr.GetEnumerator();\n       int i = 0;\n       int cols = myArr.GetLength( myArr.Rank - 1 );\n       while ( myEnumerator.MoveNext() )  {\n          if ( i &lt; cols )  {\n             i++;\n          } else  {\n             Console.WriteLine();\n             i = 1;\n          }\n          Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator.Current );\n       }\n       Console.WriteLine();\n    }\n }\n /*\n This code produces the following output.\n \n The four-dimensional Array contains the following values:\n     0000    0001    0002    0003    0004\n     0010    0011    0012    0013    0014\n     0020    0021    0022    0023    0024\n     0030    0031    0032    0033    0034\n     0100    0101    0102    0103    0104\n     0110    0111    0112    0113    0114\n     0120    0121    0122    0123    0124\n     0130    0131    0132    0133    0134\n     0200    0201    0202    0203    0204\n     0210    0211    0212    0213    0214\n     0220    0221    0222    0223    0224\n     0230    0231    0232    0233    0234\n     1000    1001    1002    1003    1004\n     1010    1011    1012    1013    1014\n     1020    1021    1022    1023    1024\n     1030    1031    1032    1033    1034\n     1100    1101    1102    1103    1104\n     1110    1111    1112    1113    1114\n     1120    1121    1122    1123    1124\n     1130    1131    1132    1133    1134\n     1200    1201    1202    1203    1204\n     1210    1211    1212    1213    1214\n     1220    1221    1222    1223    1224\n     1230    1231    1232    1233    1234\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Array.CreateInstance3 Example#1\">using namespace System;\nvoid PrintValues( Array^ myArr );\nvoid main()\n{\n   // Creates and initializes a multidimensional Array instance of type String.\n   array&lt;int&gt;^myLengthsArray = {2,3,4,5};\n   Array^ my4DArray = Array::CreateInstance( String::typeid, myLengthsArray );\n   for ( int i = my4DArray-&gt;GetLowerBound( 0 ); i &lt;= my4DArray-&gt;GetUpperBound( 0 ); i++ )\n      for ( int j = my4DArray-&gt;GetLowerBound( 1 ); j &lt;= my4DArray-&gt;GetUpperBound( 1 ); j++ )\n         for ( int k = my4DArray-&gt;GetLowerBound( 2 ); k &lt;= my4DArray-&gt;GetUpperBound( 2 ); k++ )\n            for ( int l = my4DArray-&gt;GetLowerBound( 3 ); l &lt;= my4DArray-&gt;GetUpperBound( 3 ); l++ )\n            {\n               array&lt;int&gt;^myIndicesArray = {i,j,k,l};\n               my4DArray-&gt;SetValue( String::Concat( Convert::ToString( i ), j, k, l ), myIndicesArray );\n\n            }\n\n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The four-dimensional Array instance contains the following values:&quot; );\n   PrintValues( my4DArray );\n}\n\nvoid PrintValues( Array^ myArr )\n{\n   System::Collections::IEnumerator^ myEnumerator = myArr-&gt;GetEnumerator();\n   int i = 0;\n   int cols = myArr-&gt;GetLength( myArr-&gt;Rank - 1 );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      if ( i &lt; cols )\n      {\n         i++;\n      }\n      else\n      {\n         Console::WriteLine();\n         i = 1;\n      }\n\n      Console::Write(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator-&gt;Current );\n   }\n\n   Console::WriteLine();\n}\n\n/*\n This code produces the following output.\n \n The four-dimensional Array instance contains the following values:\n     0000    0001    0002    0003    0004\n     0010    0011    0012    0013    0014\n     0020    0021    0022    0023    0024\n     0030    0031    0032    0033    0034\n     0100    0101    0102    0103    0104\n     0110    0111    0112    0113    0114\n     0120    0121    0122    0123    0124\n     0130    0131    0132    0133    0134\n     0200    0201    0202    0203    0204\n     0210    0211    0212    0213    0214\n     0220    0221    0222    0223    0224\n     0230    0231    0232    0233    0234\n     1000    1001    1002    1003    1004\n     1010    1011    1012    1013    1014\n     1020    1021    1022    1023    1024\n     1030    1031    1032    1033    1034\n     1100    1101    1102    1103    1104\n     1110    1111    1112    1113    1114\n     1120    1121    1122    1123    1124\n     1130    1131    1132    1133    1134\n     1200    1201    1202    1203    1204\n     1210    1211    1212    1213    1214\n     1220    1221    1222    1223    1224\n     1230    1231    1232    1233    1234\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.CreateInstance3 Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a multidimensional Array of type String.\n        Dim myLengthsArray() As Integer = {2, 3, 4, 5}\n        Dim my4DArray As Array = Array.CreateInstance(GetType(String), myLengthsArray)\n        Dim i, j, k, l As Integer\n        Dim myIndicesArray() As Integer\n        For i = my4DArray.GetLowerBound(0) To my4DArray.GetUpperBound(0)\n            For j = my4DArray.GetLowerBound(1) To my4DArray.GetUpperBound(1)\n                For k = my4DArray.GetLowerBound(2) To my4DArray.GetUpperBound(2)\n                    For l = my4DArray.GetLowerBound(3) To my4DArray.GetUpperBound(3)\n                        myIndicesArray = New Integer() {i, j, k, l}\n                        my4DArray.SetValue(Convert.ToString(i) + j.ToString() _\n                           + k.ToString() + l.ToString(), myIndicesArray)\n                    Next l\n                Next k \n            Next j\n        Next i\n\n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The four-dimensional Array contains the following values:&quot;)\n        PrintValues(my4DArray)\n    End Sub\n    \n    \n    Public Shared Sub PrintValues(myArr As Array)\n        Dim myEnumerator As System.Collections.IEnumerator = myArr.GetEnumerator()\n        Dim i As Integer = 0\n        Dim cols As Integer = myArr.GetLength(myArr.Rank - 1)\n        While myEnumerator.MoveNext()\n            If i &lt; cols Then\n                i += 1\n            Else\n                Console.WriteLine()\n                i = 1\n            End If\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The four-dimensional Array contains the following values:\n&#39;     0000    0001    0002    0003    0004\n&#39;     0010    0011    0012    0013    0014\n&#39;     0020    0021    0022    0023    0024\n&#39;     0030    0031    0032    0033    0034\n&#39;     0100    0101    0102    0103    0104\n&#39;     0110    0111    0112    0113    0114\n&#39;     0120    0121    0122    0123    0124\n&#39;     0130    0131    0132    0133    0134\n&#39;     0200    0201    0202    0203    0204\n&#39;     0210    0211    0212    0213    0214\n&#39;     0220    0221    0222    0223    0224\n&#39;     0230    0231    0232    0233    0234\n&#39;     1000    1001    1002    1003    1004\n&#39;     1010    1011    1012    1013    1014\n&#39;     1020    1021    1022    1023    1024\n&#39;     1030    1031    1032    1033    1034\n&#39;     1100    1101    1102    1103    1104\n &#39;    1110    1111    1112    1113    1114\n&#39;     1120    1121    1122    1123    1124\n&#39;     1130    1131    1132    1133    1134\n&#39;     1200    1201    1202    1203    1204\n&#39;     1210    1211    1212    1213    1214\n&#39;     1220    1221    1222    1223    1224\n&#39;     1230    1231    1232    1233    1234\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_CreateInstance_System_Type_System_Int64___\">\r\n    \r\n            <a id=\"System_Array_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(Type,Int64[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 64-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Array CreateInstance (Type elementType, long[] lengths);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lengths</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of 64-bit integers that represent the size of each dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create. Each integer in the array must be between zero and <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>, inclusive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </div>\r\n                  <p>A new multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> with the specified length for each dimension, using zero-based indexing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>lengths</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is not a valid <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.  </p>\n<p> -or-  </p>\n<p> The <code>lengths</code> array contains less than one element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is not supported. For example, <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a> is not supported.  </p>\n<p> -or-  </p>\n<p> <code>elementType</code> is an open generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Any value in <code>lengths</code> is less than zero or greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike most classes, <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> provides the <a class=\"xref\" href=\"system.array#System_Array_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> method, instead of public constructors, to allow for late bound access.  </p>\n<p> The number of elements in the <code>lengths</code> array must equal the number of dimensions in the new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. Each element of the <code>lengths</code> array must specify the length of the corresponding dimension in the new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> Reference-type elements are initialized to <code>null</code>. Value-type elements are initialized to zero.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the product of all values in <code>lengths</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create and initialize a multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Array.CreateInstance3 Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a multidimensional Array of type String.\n       int[] myLengthsArray = new int[4] { 2, 3, 4, 5 };\n       Array my4DArray=Array.CreateInstance( typeof(String), myLengthsArray );\n       for ( int i = my4DArray.GetLowerBound(0); i &lt;= my4DArray.GetUpperBound(0); i++ )\n          for ( int j = my4DArray.GetLowerBound(1); j &lt;= my4DArray.GetUpperBound(1); j++ )\n             for ( int k = my4DArray.GetLowerBound(2); k &lt;= my4DArray.GetUpperBound(2); k++ )\n                for ( int l = my4DArray.GetLowerBound(3); l &lt;= my4DArray.GetUpperBound(3); l++ )  {\n                   int[] myIndicesArray = new int[4] { i, j, k, l };\n                   my4DArray.SetValue( Convert.ToString(i) + j + k + l, myIndicesArray );\n                }\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The four-dimensional Array contains the following values:&quot; );\n       PrintValues( my4DArray );\n    }\n \n \n    public static void PrintValues( Array myArr )  {\n       System.Collections.IEnumerator myEnumerator = myArr.GetEnumerator();\n       int i = 0;\n       int cols = myArr.GetLength( myArr.Rank - 1 );\n       while ( myEnumerator.MoveNext() )  {\n          if ( i &lt; cols )  {\n             i++;\n          } else  {\n             Console.WriteLine();\n             i = 1;\n          }\n          Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator.Current );\n       }\n       Console.WriteLine();\n    }\n }\n /*\n This code produces the following output.\n \n The four-dimensional Array contains the following values:\n     0000    0001    0002    0003    0004\n     0010    0011    0012    0013    0014\n     0020    0021    0022    0023    0024\n     0030    0031    0032    0033    0034\n     0100    0101    0102    0103    0104\n     0110    0111    0112    0113    0114\n     0120    0121    0122    0123    0124\n     0130    0131    0132    0133    0134\n     0200    0201    0202    0203    0204\n     0210    0211    0212    0213    0214\n     0220    0221    0222    0223    0224\n     0230    0231    0232    0233    0234\n     1000    1001    1002    1003    1004\n     1010    1011    1012    1013    1014\n     1020    1021    1022    1023    1024\n     1030    1031    1032    1033    1034\n     1100    1101    1102    1103    1104\n     1110    1111    1112    1113    1114\n     1120    1121    1122    1123    1124\n     1130    1131    1132    1133    1134\n     1200    1201    1202    1203    1204\n     1210    1211    1212    1213    1214\n     1220    1221    1222    1223    1224\n     1230    1231    1232    1233    1234\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Array.CreateInstance3 Example#1\">using namespace System;\nvoid PrintValues( Array^ myArr );\nvoid main()\n{\n   // Creates and initializes a multidimensional Array instance of type String.\n   array&lt;int&gt;^myLengthsArray = {2,3,4,5};\n   Array^ my4DArray = Array::CreateInstance( String::typeid, myLengthsArray );\n   for ( int i = my4DArray-&gt;GetLowerBound( 0 ); i &lt;= my4DArray-&gt;GetUpperBound( 0 ); i++ )\n      for ( int j = my4DArray-&gt;GetLowerBound( 1 ); j &lt;= my4DArray-&gt;GetUpperBound( 1 ); j++ )\n         for ( int k = my4DArray-&gt;GetLowerBound( 2 ); k &lt;= my4DArray-&gt;GetUpperBound( 2 ); k++ )\n            for ( int l = my4DArray-&gt;GetLowerBound( 3 ); l &lt;= my4DArray-&gt;GetUpperBound( 3 ); l++ )\n            {\n               array&lt;int&gt;^myIndicesArray = {i,j,k,l};\n               my4DArray-&gt;SetValue( String::Concat( Convert::ToString( i ), j, k, l ), myIndicesArray );\n\n            }\n\n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The four-dimensional Array instance contains the following values:&quot; );\n   PrintValues( my4DArray );\n}\n\nvoid PrintValues( Array^ myArr )\n{\n   System::Collections::IEnumerator^ myEnumerator = myArr-&gt;GetEnumerator();\n   int i = 0;\n   int cols = myArr-&gt;GetLength( myArr-&gt;Rank - 1 );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      if ( i &lt; cols )\n      {\n         i++;\n      }\n      else\n      {\n         Console::WriteLine();\n         i = 1;\n      }\n\n      Console::Write(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator-&gt;Current );\n   }\n\n   Console::WriteLine();\n}\n\n/*\n This code produces the following output.\n \n The four-dimensional Array instance contains the following values:\n     0000    0001    0002    0003    0004\n     0010    0011    0012    0013    0014\n     0020    0021    0022    0023    0024\n     0030    0031    0032    0033    0034\n     0100    0101    0102    0103    0104\n     0110    0111    0112    0113    0114\n     0120    0121    0122    0123    0124\n     0130    0131    0132    0133    0134\n     0200    0201    0202    0203    0204\n     0210    0211    0212    0213    0214\n     0220    0221    0222    0223    0224\n     0230    0231    0232    0233    0234\n     1000    1001    1002    1003    1004\n     1010    1011    1012    1013    1014\n     1020    1021    1022    1023    1024\n     1030    1031    1032    1033    1034\n     1100    1101    1102    1103    1104\n     1110    1111    1112    1113    1114\n     1120    1121    1122    1123    1124\n     1130    1131    1132    1133    1134\n     1200    1201    1202    1203    1204\n     1210    1211    1212    1213    1214\n     1220    1221    1222    1223    1224\n     1230    1231    1232    1233    1234\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.CreateInstance3 Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a multidimensional Array of type String.\n        Dim myLengthsArray() As Integer = {2, 3, 4, 5}\n        Dim my4DArray As Array = Array.CreateInstance(GetType(String), myLengthsArray)\n        Dim i, j, k, l As Integer\n        Dim myIndicesArray() As Integer\n        For i = my4DArray.GetLowerBound(0) To my4DArray.GetUpperBound(0)\n            For j = my4DArray.GetLowerBound(1) To my4DArray.GetUpperBound(1)\n                For k = my4DArray.GetLowerBound(2) To my4DArray.GetUpperBound(2)\n                    For l = my4DArray.GetLowerBound(3) To my4DArray.GetUpperBound(3)\n                        myIndicesArray = New Integer() {i, j, k, l}\n                        my4DArray.SetValue(Convert.ToString(i) + j.ToString() _\n                           + k.ToString() + l.ToString(), myIndicesArray)\n                    Next l\n                Next k \n            Next j\n        Next i\n\n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The four-dimensional Array contains the following values:&quot;)\n        PrintValues(my4DArray)\n    End Sub\n    \n    \n    Public Shared Sub PrintValues(myArr As Array)\n        Dim myEnumerator As System.Collections.IEnumerator = myArr.GetEnumerator()\n        Dim i As Integer = 0\n        Dim cols As Integer = myArr.GetLength(myArr.Rank - 1)\n        While myEnumerator.MoveNext()\n            If i &lt; cols Then\n                i += 1\n            Else\n                Console.WriteLine()\n                i = 1\n            End If\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The four-dimensional Array contains the following values:\n&#39;     0000    0001    0002    0003    0004\n&#39;     0010    0011    0012    0013    0014\n&#39;     0020    0021    0022    0023    0024\n&#39;     0030    0031    0032    0033    0034\n&#39;     0100    0101    0102    0103    0104\n&#39;     0110    0111    0112    0113    0114\n&#39;     0120    0121    0122    0123    0124\n&#39;     0130    0131    0132    0133    0134\n&#39;     0200    0201    0202    0203    0204\n&#39;     0210    0211    0212    0213    0214\n&#39;     0220    0221    0222    0223    0224\n&#39;     0230    0231    0232    0233    0234\n&#39;     1000    1001    1002    1003    1004\n&#39;     1010    1011    1012    1013    1014\n&#39;     1020    1021    1022    1023    1024\n&#39;     1030    1031    1032    1033    1034\n&#39;     1100    1101    1102    1103    1104\n &#39;    1110    1111    1112    1113    1114\n&#39;     1120    1121    1122    1123    1124\n&#39;     1130    1131    1132    1133    1134\n&#39;     1200    1201    1202    1203    1204\n&#39;     1210    1211    1212    1213    1214\n&#39;     1220    1221    1222    1223    1224\n&#39;     1230    1231    1232    1233    1234\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_CreateInstance_System_Type_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(Type,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and dimension lengths, with zero-based indexing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Array CreateInstance (Type elementType, int length1, int length2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the first dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the second dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </div>\r\n                  <p>A new two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> with the specified length for each dimension, using zero-based indexing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is not a valid <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is not supported. For example, <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a> is not supported.  </p>\n<p> -or-  </p>\n<p> <code>elementType</code> is an open generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>length1</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>length2</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike most classes, <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> provides the<a class=\"xref\" href=\"system.array#System_Array_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> method, instead of public constructors, to allow for late bound access.  </p>\n<p> Reference-type elements are initialized to <code>null</code>. Value-type elements are initialized to zero.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the product of <code>length1</code> and <code>length2</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create and initialize a two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Array.CreateInstance1 Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a two-dimensional Array of type String.\n       Array my2DArray=Array.CreateInstance( typeof(String), 2, 3 );\n       for ( int i = my2DArray.GetLowerBound(0); i &lt;= my2DArray.GetUpperBound(0); i++ )\n          for ( int j = my2DArray.GetLowerBound(1); j &lt;= my2DArray.GetUpperBound(1); j++ )\n             my2DArray.SetValue( &quot;abc&quot; + i + j, i, j );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The two-dimensional Array contains the following values:&quot; );\n       PrintValues( my2DArray );\n    }\n \n \n    public static void PrintValues( Array myArr )  {\n       System.Collections.IEnumerator myEnumerator = myArr.GetEnumerator();\n       int i = 0;\n       int cols = myArr.GetLength( myArr.Rank - 1 );\n       while ( myEnumerator.MoveNext() )  {\n          if ( i &lt; cols )  {\n             i++;\n          } else  {\n             Console.WriteLine();\n             i = 1;\n          }\n          Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator.Current );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The two-dimensional Array contains the following values:\n     abc00    abc01    abc02\n     abc10    abc11    abc12\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.CreateInstance1 Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a two-dimensional Array of type String.\n        Dim my2DArray As Array = Array.CreateInstance(GetType(String), 2, 3)\n        Dim i, j As Integer        \n        For i = my2DArray.GetLowerBound(0) To my2DArray.GetUpperBound(0)\n            For j = my2DArray.GetLowerBound(1) To my2DArray.GetUpperBound(1)\n                my2DArray.SetValue(&quot;abc&quot; + i.ToString() + j.ToString(), i, j)\n            Next j \n        Next i\n\n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The two-dimensional Array contains the &quot; _\n           + &quot;following values:&quot;)\n        PrintValues(my2DArray)\n    End Sub   \n    \n    Public Shared Sub PrintValues(myArr As Array)\n        Dim myEnumerator As System.Collections.IEnumerator = _\n           myArr.GetEnumerator()\n        Dim i As Integer = 0\n        Dim cols As Integer = myArr.GetLength(myArr.Rank - 1)\n        While myEnumerator.MoveNext()\n            If i &lt; cols Then\n                i += 1\n            Else\n                Console.WriteLine()\n                i = 1\n            End If\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The two-dimensional Array contains the following values:\n&#39;     abc00    abc01    abc02\n&#39;     abc10    abc11    abc12 \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Array.CreateInstance1 Example#1\">using namespace System;\nvoid PrintValues( Array^ myArr );\nvoid main()\n{\n   // Creates and initializes a two-dimensional Array instance of type String.\n   Array^ my2DArray = Array::CreateInstance( String::typeid, 2, 3 );\n   for ( int i = my2DArray-&gt;GetLowerBound( 0 ); i &lt;= my2DArray-&gt;GetUpperBound( 0 ); i++ )\n      for ( int j = my2DArray-&gt;GetLowerBound( 1 ); j &lt;= my2DArray-&gt;GetUpperBound( 1 ); j++ )\n         my2DArray-&gt;SetValue( String::Concat( &quot;abc&quot;, i, j ), i, j );\n   \n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The two-dimensional Array instance contains the following values:&quot; );\n   PrintValues( my2DArray );\n}\n\nvoid PrintValues( Array^ myArr )\n{\n   System::Collections::IEnumerator^ myEnumerator = myArr-&gt;GetEnumerator();\n   int i = 0;\n   int cols = myArr-&gt;GetLength( myArr-&gt;Rank - 1 );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      if ( i &lt; cols )\n      {\n         i++;\n      }\n      else\n      {\n         Console::WriteLine();\n         i = 1;\n      }\n\n      Console::Write(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator-&gt;Current );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n The two-dimensional Array instance contains the following values:\n     abc00    abc01    abc02\n     abc10    abc11    abc12\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_CreateInstance_System_Type_System_Int32___System_Int32___\">\r\n    \r\n            <a id=\"System_Array_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(Type,Int32[],Int32[])</div>        \r\n          </div>\r\n    \r\n            <p>Creates a multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and dimension lengths, with the specified lower bounds.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Array CreateInstance (Type elementType, int[] lengths, int[] lowerBounds);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lengths</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A one-dimensional array that contains the size of each dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lowerBounds</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A one-dimensional array that contains the lower bound (starting index) of each dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </div>\r\n                  <p>A new multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> with the specified length and lower bound for each dimension.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>lengths</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>lowerBounds</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is not a valid <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.  </p>\n<p> -or-  </p>\n<p> The <code>lengths</code> array contains less than one element.  </p>\n<p> -or-  </p>\n<p> The <code>lengths</code> and <code>lowerBounds</code> arrays do not contain the same number of elements.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is not supported. For example, <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a> is not supported.  </p>\n<p> -or-  </p>\n<p> <code>elementType</code> is an open generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Any value in <code>lengths</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> Any value in <code>lowerBounds</code> is very large, such that the sum of a dimension&#39;s lower bound and length is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike most classes, <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> provides the <a class=\"xref\" href=\"system.array#System_Array_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> method, instead of public constructors, to allow for late bound access.  </p>\n<p> The <code>lengths</code> and <code>lowerBounds</code> arrays must have the same number of elements. The number of elements in the <code>lengths</code> array must equal the number of dimensions in the new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> Each element of the <code>lengths</code> array must specify the length of the corresponding dimension in the new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> Each element of the <code>lowerBounds</code> array must specify the lower bound of the corresponding dimension in the new <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. Generally, the .NET Framework class library and many programming languages do not handle nonzero lower bounds.  </p>\n<p> Reference-type elements are initialized to <code>null</code>. Value-type elements are initialized to zero.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the product of all values in <code>lengths</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create and initialize a multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> with specified lower bounds.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Array.CreateInstance4 Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a multidimensional Array of type String.\n       int[] myLengthsArray = new int[2] { 3, 5 };\n       int[] myBoundsArray = new int[2] { 2, 3 };\n       Array myArray=Array.CreateInstance( typeof(String), myLengthsArray, myBoundsArray );\n       for ( int i = myArray.GetLowerBound(0); i &lt;= myArray.GetUpperBound(0); i++ )\n          for ( int j = myArray.GetLowerBound(1); j &lt;= myArray.GetUpperBound(1); j++ )  {\n             int[] myIndicesArray = new int[2] { i, j };\n             myArray.SetValue( Convert.ToString(i) + j, myIndicesArray );\n          }\n \n       // Displays the lower bounds and the upper bounds of each dimension.\n       Console.WriteLine( &quot;Bounds:&nbsp;&nbsp;&nbsp;&nbsp;Lower&nbsp;&nbsp;&nbsp;&nbsp;Upper&quot; );\n       for ( int i = 0; i &lt; myArray.Rank; i++ )\n          Console.WriteLine( &quot;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myArray.GetLowerBound(i), myArray.GetUpperBound(i) );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The Array contains the following values:&quot; );\n       PrintValues( myArray );\n    }\n \n \n    public static void PrintValues( Array myArr )  {\n       System.Collections.IEnumerator myEnumerator = myArr.GetEnumerator();\n       int i = 0;\n       int cols = myArr.GetLength( myArr.Rank - 1 );\n       while ( myEnumerator.MoveNext() )  {\n          if ( i &lt; cols )  {\n             i++;\n          } else  {\n             Console.WriteLine();\n             i = 1;\n          }\n          Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator.Current );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n Bounds:    Lower    Upper\n 0:    2    4\n 1:    3    7\n The Array contains the following values:\n     23    24    25    26    27\n     33    34    35    36    37\n     43    44    45    46    47\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.CreateInstance4 Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a multidimensional Array of type String.\n        Dim myLengthsArray() As Integer = {3, 5}\n        Dim myBoundsArray() As Integer = {2, 3}\n        Dim myArray As Array = Array.CreateInstance(GetType(String), _\n           myLengthsArray, myBoundsArray)\n        Dim i, j As Integer\n        Dim myIndicesArray() As Integer\n        For i = myArray.GetLowerBound(0) To myArray.GetUpperBound(0)\n            For j = myArray.GetLowerBound(1) To myArray.GetUpperBound(1)\n                myIndicesArray = New Integer() {i, j}\n                myArray.SetValue(i.ToString() + j.ToString(), myIndicesArray)\n            Next j\n        Next i\n        \n        &#39; Displays the lower bounds and the upper bounds of each dimension.\n        Console.WriteLine(&quot;Bounds:&quot; + ControlChars.Tab + &quot;Lower&quot; _\n           + ControlChars.Tab + &quot;Upper&quot;)\n        For i = 0 To myArray.Rank - 1\n            Console.WriteLine(&quot;{0}:&quot; + ControlChars.Tab + &quot;{1}&quot; _\n               + ControlChars.Tab + &quot;{2}&quot;, i, myArray.GetLowerBound(i), _\n               myArray.GetUpperBound(i))\n        Next i\n        \n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The Array contains the following values:&quot;)\n        PrintValues(myArray)\n    End Sub    \n    \n    Public Shared Sub PrintValues(myArr As Array)\n        Dim myEnumerator As System.Collections.IEnumerator = _\n           myArr.GetEnumerator()\n        Dim i As Integer = 0\n        Dim cols As Integer = myArr.GetLength(myArr.Rank - 1)\n        While myEnumerator.MoveNext()\n            If i &lt; cols Then\n                i += 1\n            Else\n                Console.WriteLine()\n                i = 1\n            End If\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; Bounds:    Lower    Upper\n&#39; 0:    2    4\n&#39; 1:    3    7\n&#39; The Array contains the following values:\n&#39;     23    24    25    26    27\n&#39;     33    34    35    36    37\n&#39;     43    44    45    46    47 \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Array.CreateInstance4 Example#1\">using namespace System;\nvoid PrintValues( Array^ myArr );\nvoid main()\n{\n   // Creates and initializes a multidimensional Array instance of type String.\n   array&lt;int&gt;^myLengthsArray = {3,5};\n   array&lt;int&gt;^myBoundsArray = {2,3};\n   Array^ myArray = Array::CreateInstance( String::typeid, myLengthsArray, myBoundsArray );\n   for ( int i = myArray-&gt;GetLowerBound( 0 ); i &lt;= myArray-&gt;GetUpperBound( 0 ); i++ )\n      for ( int j = myArray-&gt;GetLowerBound( 1 ); j &lt;= myArray-&gt;GetUpperBound( 1 ); j++ )\n      {\n         array&lt;int&gt;^myIndicesArray = {i,j};\n         myArray-&gt;SetValue( String::Concat( Convert::ToString( i ), j ), myIndicesArray );\n\n      }\n\n   // Displays the lower bounds and the upper bounds of each dimension.\n   Console::WriteLine(  &quot;Bounds:&nbsp;&nbsp;&nbsp;&nbsp;Lower&nbsp;&nbsp;&nbsp;&nbsp;Upper&quot; );\n   for ( int i = 0; i &lt; myArray-&gt;Rank; i++ )\n      Console::WriteLine(  &quot;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myArray-&gt;GetLowerBound( i ), myArray-&gt;GetUpperBound( i ) );\n\n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The Array instance contains the following values:&quot; );\n   PrintValues( myArray );\n}\n\nvoid PrintValues( Array^ myArr )\n{\n   System::Collections::IEnumerator^ myEnumerator = myArr-&gt;GetEnumerator();\n   int i = 0;\n   int cols = myArr-&gt;GetLength( myArr-&gt;Rank - 1 );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      if ( i &lt; cols )\n      {\n         i++;\n      }\n      else\n      {\n         Console::WriteLine();\n         i = 1;\n      }\n\n      Console::Write(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator-&gt;Current );\n   }\n\n   Console::WriteLine();\n}\n\n/* \n This code produces the following output.\n \n Bounds:    Lower    Upper\n 0:    2    4\n 1:    3    7\n The Array instance contains the following values:\n     23    24    25    26    27\n     33    34    35    36    37\n     43    44    45    46    47\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_CreateInstance_System_Type_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_CreateInstance_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateInstance(Type,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> and dimension lengths, with zero-based indexing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Array CreateInstance (Type elementType, int length1, int length2, int length3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>elementType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the first dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the second dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the third dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </div>\r\n                  <p>A new three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> of the specified <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> with the specified length for each dimension, using zero-based indexing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is not a valid <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>elementType</code> is not supported. For example, <a class=\"xref\" href=\"system.void\" data-linktype=\"relative-path\">Void</a> is not supported.  </p>\n<p> -or-  </p>\n<p> <code>elementType</code> is an open generic type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>length1</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>length2</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>length3</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Unlike most classes, <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> provides the <a class=\"xref\" href=\"system.array#System_Array_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> method, instead of public constructors, to allow for late bound access.  </p>\n<p> Reference-type elements are initialized to <code>null</code>. Value-type elements are initialized to zero.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the product of <code>length1</code>, <code>length2</code>, and <code>length3</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create and initialize a three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic Array.CreateInstance2 Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a three-dimensional Array of type Object.\n        Dim my3DArray As Array = Array.CreateInstance(GetType(Object), 2, 3, 4)\n        Dim i As Integer\n        For i = my3DArray.GetLowerBound(0) To my3DArray.GetUpperBound(0)\n            Dim j As Integer\n            For j = my3DArray.GetLowerBound(1) To my3DArray.GetUpperBound(1)\n                Dim k As Integer\n                For k = my3DArray.GetLowerBound(2) To my3DArray.GetUpperBound(2)\n                    my3DArray.SetValue(&quot;abc&quot; + i.ToString() _\n                       + j.ToString() + k.ToString(), i, j, k)\n                Next k \n            Next j\n        Next i\n\n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The three-dimensional Array contains the &quot; _\n           + &quot;following values:&quot;)\n        PrintValues(my3DArray)\n    End Sub\n    \n    \n    Public Shared Sub PrintValues(myArr As Array)\n        Dim myEnumerator As System.Collections.IEnumerator = _\n           myArr.GetEnumerator()\n        Dim i As Integer = 0\n        Dim cols As Integer = myArr.GetLength(myArr.Rank - 1)\n        While myEnumerator.MoveNext()\n            If i &lt; cols Then\n                i += 1\n            Else\n                Console.WriteLine()\n                i = 1\n            End If\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The three-dimensional Array contains the following values:\n&#39;     abc000    abc001    abc002    abc003\n&#39;     abc010    abc011    abc012    abc013\n&#39;     abc020    abc021    abc022    abc023\n&#39;     abc100    abc101    abc102    abc103\n&#39;     abc110    abc111    abc112    abc113\n&#39;     abc120    abc121    abc122    abc123 \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.CreateInstance2 Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a three-dimensional Array of type Object.\n       Array my3DArray=Array.CreateInstance( typeof(Object), 2, 3, 4 );\n       for ( int i = my3DArray.GetLowerBound(0); i &lt;= my3DArray.GetUpperBound(0); i++ )\n          for ( int j = my3DArray.GetLowerBound(1); j &lt;= my3DArray.GetUpperBound(1); j++ )\n             for ( int k = my3DArray.GetLowerBound(2); k &lt;= my3DArray.GetUpperBound(2); k++ )\n                my3DArray.SetValue( &quot;abc&quot; + i + j + k, i, j, k );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The three-dimensional Array contains the following values:&quot; );\n       PrintValues( my3DArray );\n    }\n \n \n    public static void PrintValues( Array myArr )  {\n       System.Collections.IEnumerator myEnumerator = myArr.GetEnumerator();\n       int i = 0;\n       int cols = myArr.GetLength( myArr.Rank - 1 );\n       while ( myEnumerator.MoveNext() )  {\n          if ( i &lt; cols )  {\n             i++;\n          } else  {\n             Console.WriteLine();\n             i = 1;\n          }\n          Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator.Current );\n       }\n       Console.WriteLine();\n    }\n }\n /*\n This code produces the following output.\n \n The three-dimensional Array contains the following values:\n     abc000    abc001    abc002    abc003\n     abc010    abc011    abc012    abc013\n     abc020    abc021    abc022    abc023\n     abc100    abc101    abc102    abc103\n     abc110    abc111    abc112    abc113\n     abc120    abc121    abc122    abc123\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Array.CreateInstance2 Example#1\">using namespace System;\nvoid PrintValues( Array^ myArr );\nvoid main()\n{\n   // Creates and initializes a three-dimensional Array instance of type Object.\n   Array^ my3DArray = Array::CreateInstance( Object::typeid, 2, 3, 4 );\n   for ( int i = my3DArray-&gt;GetLowerBound( 0 ); i &lt;= my3DArray-&gt;GetUpperBound( 0 ); i++ )\n      for ( int j = my3DArray-&gt;GetLowerBound( 1 ); j &lt;= my3DArray-&gt;GetUpperBound( 1 ); j++ )\n         for ( int k = my3DArray-&gt;GetLowerBound( 2 ); k &lt;= my3DArray-&gt;GetUpperBound( 2 ); k++ )\n            my3DArray-&gt;SetValue( String::Concat( &quot;abc&quot;, i, j, k ), i, j, k );\n   \n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The three-dimensional Array instance contains the following values:&quot; );\n   PrintValues( my3DArray );\n}\n\nvoid PrintValues( Array^ myArr )\n{\n   System::Collections::IEnumerator^ myEnumerator = myArr-&gt;GetEnumerator();\n   int i = 0;\n   int cols = myArr-&gt;GetLength( myArr-&gt;Rank - 1 );\n   while ( myEnumerator-&gt;MoveNext() )\n   {\n      if ( i &lt; cols )\n      {\n         i++;\n      }\n      else\n      {\n         Console::WriteLine();\n         i = 1;\n      }\n\n      Console::Write(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myEnumerator-&gt;Current );\n   }\n\n   Console::WriteLine();\n}\n\n/*\n This code produces the following output.\n \n The three-dimensional Array instance contains the following values:\n     abc000    abc001    abc002    abc003\n     abc010    abc011    abc012    abc013\n     abc020    abc021    abc022    abc023\n     abc100    abc101    abc102    abc103\n     abc110    abc111    abc112    abc113\n     abc120    abc121    abc122    abc123\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Empty__1\">\r\n    \r\n            <a id=\"System_Array_Empty_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Empty&lt;T&gt;()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an empty array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static T[] Empty&lt;T&gt; ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </div>\r\n                  <p>Returns an empty <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Exists__1___0___System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Array_Exists_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exists&lt;T&gt;(T[],Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified array contains elements that match the conditions defined by the specified predicate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Exists&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> that defines the conditions of the elements to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>array</code> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a>, and processing is stopped when a match is found.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C# and Visual Basic, it is not necessary to create the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate explicitly. These languages infer the correct delegate from context and create it automatically.  </p>\n</div>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example specifies the match conditions for the Exists(T)method usinglambda expressions to check whether a planet starts with a given letter or whether the planet is found on the given array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Array.Exists#3\">using System;\n\nnamespace Example\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] planets = { &quot;Mercury&quot;, &quot;Venus&quot;,\n                &quot;Earth&quot;, &quot;Mars&quot;, &quot;Jupiter&quot;,\n                &quot;Saturn&quot;, &quot;Uranus&quot;, &quot;Neptune&quot; };\n\n            Console.WriteLine(&quot;One or more planets begin with &#39;M&#39;: {0}&quot;,\n                Array.Exists(planets, element =&gt; element.StartsWith(&quot;M&quot;)));\n\n            Console.WriteLine(&quot;One or more planets begin with &#39;T&#39;: {0}&quot;,\n                Array.Exists(planets, element =&gt; element.StartsWith(&quot;T&quot;)));\n\n            Console.WriteLine(&quot;Is Pluto one of the planets? {0}&quot;,\n                Array.Exists(planets, element =&gt; element == &quot;Pluto&quot;));\n        }\n    }\n}\n// The example displays the following output:\n//       One or more planets begin with &#39;M&#39;: True\n//       One or more planets begin with &#39;T&#39;: False\n//       Is Pluto one of the planets? False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Exists#3\">Module Example\n    Public Sub Main()\n        Dim planets() As String = {&quot;Mercury&quot;, &quot;Venus&quot;,\n                                    &quot;Earth&quot;, &quot;Mars&quot;, &quot;Jupiter&quot;,\n                                    &quot;Saturn&quot;, &quot;Uranus&quot;, &quot;Neptune&quot;}\n\n        Console.WriteLine(&quot;One or more planets begin with &#39;M&#39;: {0}&quot;,\n            Array.Exists(planets, Function(element)\n                                      Return element.StartsWith(&quot;M&quot;)\n                                  End Function))\n\n        Console.WriteLine(&quot;One or more planets begin with &#39;T&#39;: {0}&quot;,\n            Array.Exists(planets, Function(element)\n                                      Return element.StartsWith(&quot;T&quot;)\n                                  End Function))\n\n        Console.WriteLine(&quot;Is Pluto one of the planets? {0}&quot;,\n            Array.Exists(planets, Function(element)\n                                      Return element.Equals(&quot;Pluto&quot;)\n                                  End Function))\n\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       One or more planets begin with &#39;M&#39;: True\n&#39;       One or more planets begin with &#39;T&#39;: False\n&#39;       Is Pluto one of the planets? False\n</code></pre><p> The following example uses the Exists(T) method to indicate whether any names in a string array begin with a specified character. The example instantiates a <code>StringSearcher</code> object by passing the string to search for to its class constructor. The <code>StringSearcher.StartsWith</code> method has same signature as the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate. When theExists(T) method is called, each member of the array is passed to the delegate until it returns <code>true</code> or iterates all the elements in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Array.Exists#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] names = { &quot;Adam&quot;, &quot;Adel&quot;, &quot;Bridgette&quot;, &quot;Carla&quot;,\n                         &quot;Charles&quot;, &quot;Daniel&quot;, &quot;Elaine&quot;, &quot;Frances&quot;,\n                         &quot;George&quot;, &quot;Gillian&quot;, &quot;Henry&quot;, &quot;Irving&quot;,\n                         &quot;James&quot;, &quot;Janae&quot;, &quot;Lawrence&quot;, &quot;Miguel&quot;,\n                         &quot;Nicole&quot;, &quot;Oliver&quot;, &quot;Paula&quot;, &quot;Robert&quot;,\n                         &quot;Stephen&quot;, &quot;Thomas&quot;, &quot;Vanessa&quot;,\n                         &quot;Veronica&quot;, &quot;Wilberforce&quot; };\n      Char[] charsToFind = { &#39;A&#39;, &#39;K&#39;, &#39;W&#39;, &#39;Z&#39; };\n\n      foreach (var charToFind in charsToFind)\n         Console.WriteLine(&quot;One or more names begin with &#39;{0}&#39;: {1}&quot;,\n                           charToFind,\n                           Array.Exists(names, (new StringSearcher(charToFind)).StartsWith));\n   }\n}\n\npublic class StringSearcher\n{\n   Char firstChar;\n\n   public StringSearcher(Char firstChar)\n   {\n      this.firstChar = Char.ToUpper(firstChar);\n   }\n\n   public bool StartsWith(String s)\n   {\n      if (String.IsNullOrEmpty(s)) return false;\n\n      if(s.Substring(0, 1).ToUpper() == firstChar.ToString())\n         return true;\n      else\n         return false;\n   }\n}\n// The example displays the following output:\n//       One or more names begin with &#39;A&#39;: True\n//       One or more names begin with &#39;K&#39;: False\n//       One or more names begin with &#39;W&#39;: True\n//       One or more names begin with &#39;Z&#39;: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Exists#1\">Module Example\n   Public Sub Main()\n      Dim names() As String = { &quot;Adam&quot;, &quot;Adel&quot;, &quot;Bridgette&quot;, &quot;Carla&quot;,\n                                &quot;Charles&quot;, &quot;Daniel&quot;, &quot;Elaine&quot;, &quot;Frances&quot;,\n                                &quot;George&quot;, &quot;Gillian&quot;, &quot;Henry&quot;, &quot;Irving&quot;,\n                                &quot;James&quot;, &quot;Janae&quot;, &quot;Lawrence&quot;, &quot;Miguel&quot;,\n                                &quot;Nicole&quot;, &quot;Oliver&quot;, &quot;Paula&quot;, &quot;Robert&quot;,\n                                &quot;Stephen&quot;, &quot;Thomas&quot;, &quot;Vanessa&quot;,\n                                &quot;Veronica&quot;, &quot;Wilberforce&quot; }\n      Dim charsToFind() As Char = { &quot;A&quot;c, &quot;K&quot;c, &quot;W&quot;c, &quot;Z&quot;c }\n      \n      For Each charToFind In charsToFind\n         Console.WriteLine(&quot;One or more names begin with &#39;{0}&#39;: {1}&quot;,\n                           charToFind,\n                           Array.Exists(names, AddressOf (New StringSearcher(charToFind)).StartsWith))\n      Next\n   End Sub\n   \nEnd Module\n\nPublic Class StringSearcher\n   Dim firstChar As Char\n   \n   Public Sub New(firstChar As Char)\n      Me.firstChar = Char.ToUpper(firstChar)\n   End Sub\n   \n   Public Function StartsWith(s As String) As Boolean\n      If String.IsNullOrEmpty(s) Then Return False\n      \n      If s.Substring(0, 1).ToUpper = firstChar Then\n         Return True\n      Else\n         Return False\n      End If\n   End Function\nEnd Class\n&#39; The example displays the following output:\n&#39;       One or more names begin with &#39;A&#39;: True\n&#39;       One or more names begin with &#39;K&#39;: False\n&#39;       One or more names begin with &#39;W&#39;: True\n&#39;       One or more names begin with &#39;Z&#39;: False\n</code></pre><p> You can also use a lambda expression rather than explicitly define a method whose signature corresponds to that of the delegate. The following example replaces the <code>StringSearcher</code>class and its <code>StartsWith</code> method with a lambda expression.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Array.Exists#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] names = { &quot;Adam&quot;, &quot;Adel&quot;, &quot;Bridgette&quot;, &quot;Carla&quot;,\n                         &quot;Charles&quot;, &quot;Daniel&quot;, &quot;Elaine&quot;, &quot;Frances&quot;,\n                         &quot;George&quot;, &quot;Gillian&quot;, &quot;Henry&quot;, &quot;Irving&quot;,\n                         &quot;James&quot;, &quot;Janae&quot;, &quot;Lawrence&quot;, &quot;Miguel&quot;,\n                         &quot;Nicole&quot;, &quot;Oliver&quot;, &quot;Paula&quot;, &quot;Robert&quot;,\n                         &quot;Stephen&quot;, &quot;Thomas&quot;, &quot;Vanessa&quot;,\n                         &quot;Veronica&quot;, &quot;Wilberforce&quot; };\n      Char[] charsToFind = { &#39;A&#39;, &#39;K&#39;, &#39;W&#39;, &#39;Z&#39; };\n\n      foreach (var charToFind in charsToFind)\n         Console.WriteLine(&quot;One or more names begin with &#39;{0}&#39;: {1}&quot;,\n                           charToFind,\n                           Array.Exists(names,\n                                        s =&gt; { if (String.IsNullOrEmpty(s))\n                                                  return false;\n\n                                               if (s.Substring(0, 1).ToUpper() == charToFind.ToString())\n                                                  return true;\n                                               else\n                                                  return false;\n                                             } ));\n   }\n}\n// The example displays the following output:\n//       One or more names begin with &#39;A&#39;: True\n//       One or more names begin with &#39;K&#39;: False\n//       One or more names begin with &#39;W&#39;: True\n//       One or more names begin with &#39;Z&#39;: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Exists#2\">Module Example\n   Public Sub Main()\n      Dim names() As String = { &quot;Adam&quot;, &quot;Adel&quot;, &quot;Bridgette&quot;, &quot;Carla&quot;,\n                                &quot;Charles&quot;, &quot;Daniel&quot;, &quot;Elaine&quot;, &quot;Frances&quot;,\n                                &quot;George&quot;, &quot;Gillian&quot;, &quot;Henry&quot;, &quot;Irving&quot;,\n                                &quot;James&quot;, &quot;Janae&quot;, &quot;Lawrence&quot;, &quot;Miguel&quot;,\n                                &quot;Nicole&quot;, &quot;Oliver&quot;, &quot;Paula&quot;, &quot;Robert&quot;,\n                                &quot;Stephen&quot;, &quot;Thomas&quot;, &quot;Vanessa&quot;,\n                                &quot;Veronica&quot;, &quot;Wilberforce&quot; }\n      Dim charsToFind() As Char = { &quot;A&quot;c, &quot;K&quot;c, &quot;W&quot;c, &quot;Z&quot;c }\n\n      For Each charToFind In charsToFind\n         Console.WriteLine(&quot;One or more names begin with &#39;{0}&#39;: {1}&quot;,\n                           charToFind,\n                           Array.Exists(names, Function(s)\n                                                  If String.IsNullOrEmpty(s) Then Return False\n\n                                                  If s.Substring(0, 1).ToUpper = charToFind Then\n                                                     Return True\n                                                  Else\n                                                     Return False\n                                                  End If\n                                               End Function ))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       One or more names begin with &#39;A&#39;: True\n&#39;       One or more names begin with &#39;K&#39;: False\n&#39;       One or more names begin with &#39;W&#39;: True\n&#39;       One or more names begin with &#39;Z&#39;: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Find__1___0___System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Array_Find_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Find&lt;T&gt;(T[],Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static T Find&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based array to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The predicate that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method or a lambda expression that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate or lambda expression.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a>, starting with the first element and ending with the last element.  Processing is stopped when a match is found.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate with the Find(T) generic method to search an array of <a class=\"xref\" href=\"system.drawing.point\" data-linktype=\"relative-path\">Point</a> structures. The method the delegate represents, <code>ProductGT10</code>, returns <code>true</code> if the product of the X and Y fields is greater than 100,000. The Find(T) method calls the delegate for each element of the array, returning the first point that meets the test condition.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Visual Basic and C# users do not have to create the delegate explicitly or specify the type argument of the generic method. The compilers determine the necessary types from the method arguments you supply.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"System.Array.Find#1\">using System;\nusing System.Drawing;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create an array of five Point structures.\n        Point[] points = { new Point(100, 200), \n            new Point(150, 250), new Point(250, 375), \n            new Point(275, 395), new Point(295, 450) };\n\n        // Find the first Point structure for which X times Y \n        // is greater than 100000. \n        Point first = Array.Find(points, ProductGT10);\n\n        // Display the first structure found.\n        Console.WriteLine(&quot;Found: X = {0}, Y = {1}&quot;, first.X, first.Y);\n    }\n\n    // Return true if X times Y is greater than 100000.\n    private static bool ProductGT10(Point p)\n    {\n        return p.X * p.Y &gt; 100000;\n    }\n}\n// The example displays the following output:\n//       Found: X = 275, Y = 395\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Find#1\">Imports System.Drawing\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Create an array of five Point structures.\n      Dim points() As Point = { new Point(100, 200), _\n            new Point(150, 250), new Point(250, 375), _\n            new Point(275, 395), new Point(295, 450) }\n\n      &#39; Find the first Point structure for which X times Y \n      &#39; is greater than 100000. \n      Dim first As Point = Array.Find(points, AddressOf ProductGT10)\n\n      &#39; Display the first structure found.\n      Console.WriteLine(&quot;Found: X = {0}, Y = {1}&quot;, _\n            first.X, first.Y)\n   End Sub\n\n   &#39; Return true if X times Y is greater than 100000.\n   Private Function ProductGT10(ByVal p As Point) As Boolean\n      Return p.X * p.Y &gt; 100000 \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Found: X = 275, Y = 395\n</code></pre><p> Rather than explicitly defining a method with the necessary signature, instantiating a <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate, and passing the delegate to the Find(T) method, it is customary to use a lambda expression. The following example is identical to the previous one, except that it uses a lambda expression as the <code>match</code> argument.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Array.Find#2\">using System;\nusing System.Drawing;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create an array of five Point structures.\n        Point[] points = { new Point(100, 200), \n            new Point(150, 250), new Point(250, 375), \n            new Point(275, 395), new Point(295, 450) };\n\n        // Find the first Point structure for which X times Y \n        // is greater than 100000. \n        Point first = Array.Find(points, p =&gt; p.X * p.Y &gt; 100000);\n\n        // Display the first structure found.\n        Console.WriteLine(&quot;Found: X = {0}, Y = {1}&quot;, first.X, first.Y);\n    }\n}\n// The example displays the following output:\n//       Found: X = 275, Y = 395\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Find#2\">Imports System.Drawing\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Create an array of five Point structures.\n      Dim points() As Point = { new Point(100, 200), _\n            new Point(150, 250), new Point(250, 375), _\n            new Point(275, 395), new Point(295, 450) }\n\n      &#39; Find the first Point structure for which X times Y \n      &#39; is greater than 100000. \n      Dim first As Point = Array.Find(points, \n                                      Function(p) p.X * p.Y &gt; 100000)\n\n      &#39; Display the first structure found.\n      Console.WriteLine(&quot;Found: X = {0}, Y = {1}&quot;, _\n            first.X, first.Y)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Found: X = 275, Y = 395\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_FindAll__1___0___System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Array_FindAll_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindAll&lt;T&gt;(T[],Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves all the elements that match the conditions defined by the specified predicate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static T[] FindAll&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> that defines the conditions of the elements to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a>, and the elements that match the conditions are saved in the returned array.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an array of 50 random numbers with values that can range from 0 to 1,000. It then calls the FindAll(T) method with a lambda expression that returns the values that range from 300 to 600. Note that the lambda expression is passed a parameter named <code>x</code>;  this represents the individual array member that is passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a>. Also note that the local <code>lBound</code> and <code>uBound</code> variables are accessible within the lambda expression.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Array.FindAll#1\">Imports System.Collections.Generic\n\nModule Example\n   Public Sub Main()\n      &#39; Get an array of n random integers.\n      Dim values() As Integer = GetArray(50, 0, 1000)\n      Dim lBound As Integer = 300\n      Dim uBound As Integer = 600\n      Dim matchedItems() As Integer = Array.FindAll(values, \n                                            Function(x) x &gt;= lBound And x &lt;= uBound)  \n      For ctr As Integer = 0 To matchedItems.Length - 1\n         Console.Write(&quot;{0}  &quot;, matchedItems(ctr))\n         If (ctr + 1) Mod 12 = 0 Then Console.WriteLine()\n      Next\n   End Sub\n   \n   Private Function GetArray(n As Integer, lower As Integer, \n                             upper As Integer) As Integer()\n      Dim rnd As New Random()\n      Dim list As New List(Of Integer)\n      For ctr As Integer = 1 To n\n         list.Add(rnd.Next(lower, upper + 1))\n      Next\n      Return list.ToArray()\n   End Function\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;       542  398  356  351  348  301  562  599  575  400  569  306\n&#39;       535  416  393  385\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.FindAll#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Get an array of n random integers.\n      int[] values = GetArray(50, 0, 1000);\n      int lBound = 300;\n      int uBound = 600;\n      int[] matchedItems = Array.FindAll(values, x =&gt;  \n                                       x &gt;= lBound &amp;&amp; x &lt;= uBound);  \n      for (int ctr = 0; ctr &lt; matchedItems.Length; ctr++) {\n         Console.Write(&quot;{0}  &quot;, matchedItems[ctr]);\n         if ((ctr + 1) % 12 == 0)\n            Console.WriteLine();\n      }\n   }\n\n   private static int[] GetArray(int n, int lower, int upper)\n   {\n      Random rnd = new Random();\n      List&lt;int&gt; list = new List&lt;int&gt;();\n      for (int ctr = 1; ctr &lt;= n; ctr++)\n         list.Add(rnd.Next(lower, upper + 1));\n\n      return list.ToArray();\n   }\n}\n// The example displays output similar to the following:\n//       542  398  356  351  348  301  562  599  575  400  569  306\n//       535  416  393  385\n</code></pre><p> The following code example demonstrates the &lt;xref:System.Array.Find%2A&gt;, &lt;xref:System.Array.FindLast%2A&gt;, and FindAll(T) generic methods. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with &quot;saurus&quot;. The code example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in &quot;saurus&quot;.  </p>\n<p> The &lt;xref:System.Array.Find%2A&gt; generic method traverses the array from the beginning, passing each element in turn to the <code>EndsWithSaurus</code> method. The search stops when the <code>EndsWithSaurus</code> method returns <code>true</code> for the element &quot;Amargasaurus&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C# and Visual Basic, it is not necessary to create the <code>Predicate&lt;string&gt;</code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  </p>\n</div>\n<p> The &lt;xref:System.Array.FindLast%2A&gt; generic method is used to search the array backward from the end. It finds the element &quot;Dilophosaurus&quot; at position 5. The FindAll(T) generic method is used to return an array containing all the elements that end in &quot;saurus&quot;. The elements are displayed.  </p>\n<p> The code example also demonstrates the &lt;xref:System.Array.Exists%2A&gt; and &lt;xref:System.Array.TrueForAll%2A&gt; generic methods.  </p>\n<pre><code class=\"lang-vb\" name=\"Array_FindEtAl#1\">Imports System\n\nPublic Class DinoDiscoverySet\n\n    Public Shared Sub Main()\n        Dim dinosaurs() As String = { &quot;Compsognathus&quot;, _\n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, _\n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, _\n            &quot;Triceratops&quot; }\n\n        Dim GoMesozoic As New DinoDiscoverySet(dinosaurs)\n\n        GoMesozoic.DiscoverAll()\n        GoMesozoic.DiscoverByEnding(&quot;saurus&quot;)\n    End Sub\n\n    Private dinosaurs As String()\n\n    Public Sub New(items() As String)\n        dinosaurs = items\n    End Sub\n\n    Public Sub DiscoverAll()\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next dinosaur\n    End Sub\n\n    Public Sub DiscoverByEnding(Ending As String)\n        Dim dinoType As Predicate(Of String)\n\n        Select Case Ending.ToLower()\n            Case &quot;raptor&quot;\n                dinoType = AddressOf EndsWithRaptor\n            Case &quot;tops&quot;\n                dinoType = AddressOf EndsWithTops\n            Case &quot;saurus&quot;\n                dinoType = AddressOf EndsWithSaurus\n            Case Else\n                dinoType = AddressOf EndsWithSaurus\n        End Select\n\n        Console.WriteLine(vbNewLine + _\n            &quot;Array.Exists(dinosaurs, &quot;&quot;{0}&quot;&quot;): {1}&quot;, _\n            Ending, _\n            Array.Exists(dinosaurs, dinoType))\n\n        Console.WriteLine(vbNewLine + _\n            &quot;Array.TrueForAll(dinosaurs, &quot;&quot;{0}&quot;&quot;): {1}&quot;, _\n            Ending, _\n            Array.TrueForAll(dinosaurs, dinoType))\n\n        Console.WriteLine(vbNewLine + _\n            &quot;Array.Find(dinosaurs, &quot;&quot;{0}&quot;&quot;): {1}&quot;, _\n            Ending, _\n            Array.Find(dinosaurs, dinoType))\n\n        Console.WriteLine(vbNewLine + _\n            &quot;Array.FindLast(dinosaurs, &quot;&quot;{0}&quot;&quot;): {1}&quot;, _\n            Ending, _\n            Array.FindLast(dinosaurs, dinoType))\n\n        Console.WriteLine(vbNewLine + _\n            &quot;Array.FindAll(dinosaurs, &quot;&quot;{0}&quot;&quot;):&quot;, Ending)\n\n        Dim subArray() As String = _\n            Array.FindAll(dinosaurs, dinoType)\n\n        For Each dinosaur As String In subArray\n            Console.WriteLine(dinosaur)\n        Next dinosaur\n    End Sub\n\n    &#39; Search predicate returns true if a string ends in &quot;saurus&quot;.\n    Private Function EndsWithSaurus(s As String) As Boolean\n        &#39; AndAlso prevents evaluation of the second Boolean\n        &#39; expression if the string is so short that an error\n        &#39; would occur.\n        If (s.Length &gt; 5) AndAlso _\n            (s.ToLower().EndsWith(&quot;saurus&quot;)) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    &#39; Search predicate returns true if a string ends in &quot;raptor&quot;.\n    Private Function EndsWithRaptor(s As String) As Boolean\n        &#39; AndAlso prevents evaluation of the second Boolean\n        &#39; expression if the string is so short that an error\n        &#39; would occur.\n        If (s.Length &gt; 5) AndAlso _\n            (s.ToLower().EndsWith(&quot;raptor&quot;)) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    &#39; Search predicate returns true if a string ends in &quot;tops&quot;.\n    Private Function EndsWithTops(s As String) As Boolean\n        &#39; AndAlso prevents evaluation of the second Boolean\n        &#39; expression if the string is so short that an error\n        &#39; would occur.\n        If (s.Length &gt; 3) AndAlso _\n            (s.ToLower().EndsWith(&quot;tops&quot;)) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39; Compsognathus\n&#39; Amargasaurus\n&#39; Oviraptor\n&#39; Velociraptor\n&#39; Deinonychus\n&#39; Dilophosaurus\n&#39; Gallimimus\n&#39; Triceratops\n&#39;\n&#39; Array.Exists(dinosaurs, &quot;saurus&quot;): True\n&#39;\n&#39; Array.TrueForAll(dinosaurs, &quot;saurus&quot;): False\n&#39;\n&#39; Array.Find(dinosaurs, &quot;saurus&quot;): Amargasaurus\n&#39;\n&#39; Array.FindLast(dinosaurs, &quot;saurus&quot;): Dilophosaurus\n&#39;\n&#39; Array.FindAll(dinosaurs, &quot;saurus&quot;):\n&#39; Amargasaurus\n&#39; Dilophosaurus\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_FindEtAl#1\">using System;\n\npublic class DinoDiscoverySet\n{\n    public static void Main()\n    {\n        string[] dinosaurs =\n        {\n            &quot;Compsognathus&quot;, &quot;Amargasaurus&quot;, &quot;Oviraptor&quot;,\n            &quot;Velociraptor&quot;,  &quot;Deinonychus&quot;,  &quot;Dilophosaurus&quot;,\n            &quot;Gallimimus&quot;,    &quot;Triceratops&quot;\n        };\n\n        DinoDiscoverySet GoMesozoic = new DinoDiscoverySet(dinosaurs);\n        \n        GoMesozoic.DiscoverAll();\n        GoMesozoic.DiscoverByEnding(&quot;saurus&quot;);\n    }\n\n    private string[] dinosaurs;\n\n    public DinoDiscoverySet(string[] items)\n    {\n        dinosaurs = items;\n    }\n\n    public void DiscoverAll()\n    {\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n\n    public void DiscoverByEnding(string Ending)\n    {\n        Predicate&lt;string&gt; dinoType;\n\n        switch (Ending.ToLower())\n        {\n            case &quot;raptor&quot;:\n                dinoType = EndsWithRaptor;\n                break;\n            case &quot;tops&quot;:\n                dinoType = EndsWithTops;\n                break;\n            case &quot;saurus&quot;:\n            default:\n                dinoType = EndsWithSaurus;\n                break;\n        }\n        Console.WriteLine(\n            &quot;<br>Array.Exists(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array.Exists(dinosaurs, dinoType));\n\n        Console.WriteLine(\n            &quot;<br>Array.TrueForAll(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array.TrueForAll(dinosaurs, dinoType));\n\n        Console.WriteLine(\n            &quot;<br>Array.Find(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array.Find(dinosaurs, dinoType));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindLast(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array.FindLast(dinosaurs, dinoType));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindAll(dinosaurs, \\&quot;{0}\\&quot;):&quot;, Ending);\n\n        string[] subArray =\n            Array.FindAll(dinosaurs, dinoType);\n\n        foreach(string dinosaur in subArray)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    private bool EndsWithSaurus(string s)\n    {\n        if ((s.Length &gt; 5) &amp;&amp;\n            (s.Substring(s.Length - 6).ToLower() == &quot;saurus&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    // Search predicate returns true if a string ends in &quot;raptor&quot;.\n    private bool EndsWithRaptor(String s)\n    {\n        if ((s.Length &gt; 5) &amp;&amp;\n            (s.Substring(s.Length - 6).ToLower() == &quot;raptor&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    // Search predicate returns true if a string ends in &quot;tops&quot;.\n    private bool EndsWithTops(String s)\n    {\n        if ((s.Length &gt; 3) &amp;&amp;\n            (s.Substring(s.Length - 4).ToLower() == &quot;tops&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray.Exists(dinosaurs, &quot;saurus&quot;): True\n\nArray.TrueForAll(dinosaurs, &quot;saurus&quot;): False\n\nArray.Find(dinosaurs, &quot;saurus&quot;): Amargasaurus\n\nArray.FindLast(dinosaurs, &quot;saurus&quot;): Dilophosaurus\n\nArray.FindAll(dinosaurs, &quot;saurus&quot;):\nAmargasaurus\nDilophosaurus\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_FindEtAl#1\">using namespace System;\n\npublic ref class DinoDiscoverySet\n{\npublic:\n    static void Main()\n    {\n        array&lt;String^&gt;^ dinosaurs =\n        {\n            &quot;Compsognathus&quot;, &quot;Amargasaurus&quot;, &quot;Oviraptor&quot;,\n            &quot;Velociraptor&quot;,  &quot;Deinonychus&quot;,  &quot;Dilophosaurus&quot;,\n            &quot;Gallimimus&quot;,    &quot;Triceratops&quot;\n        };\n\n        DinoDiscoverySet^ GoMesozoic = gcnew DinoDiscoverySet(dinosaurs);\n\n        GoMesozoic-&gt;DiscoverAll();\n        GoMesozoic-&gt;DiscoverByEnding(&quot;saurus&quot;);\n    }\n\n    DinoDiscoverySet(array&lt;String^&gt;^ items)\n    {\n        dinosaurs = items;\n    }\n\n    void DiscoverAll()\n    {\n        Console::WriteLine();\n        for each(String^ dinosaur in dinosaurs)\n        {\n            Console::WriteLine(dinosaur);\n        }\n    }\n\n    void DiscoverByEnding(String^ Ending)\n    {\n        Predicate&lt;String^&gt;^ dinoType;\n\n        if (Ending-&gt;ToLower() == &quot;raptor&quot;)\n        {\n            dinoType =\n                gcnew Predicate&lt;String^&gt;(&amp;DinoDiscoverySet::EndsWithRaptor);\n        }\n        else if (Ending-&gt;ToLower() == &quot;tops&quot;)\n        {\n            dinoType =\n                gcnew Predicate&lt;String^&gt;(&amp;DinoDiscoverySet::EndsWithTops);\n        }\n        else if (Ending-&gt;ToLower() == &quot;saurus&quot;)\n        {\n            dinoType =\n                gcnew Predicate&lt;String^&gt;(&amp;DinoDiscoverySet::EndsWithSaurus);\n        }\n        else\n        {\n            dinoType =\n                gcnew Predicate&lt;String^&gt;(&amp;DinoDiscoverySet::EndsWithSaurus);\n        }\n\n        Console::WriteLine(\n            &quot;<br>Array::Exists(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array::Exists(dinosaurs, dinoType));\n\n        Console::WriteLine(\n            &quot;<br>Array::TrueForAll(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array::TrueForAll(dinosaurs, dinoType));\n\n        Console::WriteLine(\n            &quot;<br>Array::Find(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array::Find(dinosaurs, dinoType));\n\n        Console::WriteLine(\n            &quot;<br>Array::FindLast(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array::FindLast(dinosaurs, dinoType));\n\n        Console::WriteLine(\n            &quot;<br>Array::FindAll(dinosaurs, \\&quot;{0}\\&quot;):&quot;, Ending);\n\n        array&lt;String^&gt;^ subArray =\n            Array::FindAll(dinosaurs, dinoType);\n\n        for each(String^ dinosaur in subArray)\n        {\n            Console::WriteLine(dinosaur);\n        }\n    }\n\nprivate:\n    array&lt;String^&gt;^ dinosaurs;\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    static bool EndsWithSaurus(String^ s)\n    {\n        if ((s-&gt;Length &gt; 5) &amp;&amp;\n            (s-&gt;Substring(s-&gt;Length - 6)-&gt;ToLower() == &quot;saurus&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    // Search predicate returns true if a string ends in &quot;raptor&quot;.\n    static bool EndsWithRaptor(String^ s)\n    {\n        if ((s-&gt;Length &gt; 5) &amp;&amp;\n            (s-&gt;Substring(s-&gt;Length - 6)-&gt;ToLower() == &quot;raptor&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    // Search predicate returns true if a string ends in &quot;tops&quot;.\n    static bool EndsWithTops(String^ s)\n    {\n        if ((s-&gt;Length &gt; 3) &amp;&amp;\n            (s-&gt;Substring(s-&gt;Length - 4)-&gt;ToLower() == &quot;tops&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n};\n\nint main()\n{\n    DinoDiscoverySet::Main();\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray.Exists(dinosaurs, &quot;saurus&quot;): True\n\nArray.TrueForAll(dinosaurs, &quot;saurus&quot;): False\n\nArray.Find(dinosaurs, &quot;saurus&quot;): Amargasaurus\n\nArray.FindLast(dinosaurs, &quot;saurus&quot;): Dilophosaurus\n\nArray.FindAll(dinosaurs, &quot;saurus&quot;):\nAmargasaurus\nDilophosaurus\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_FindIndex__1___0___System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Array_FindIndex_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindIndex&lt;T&gt;(T[],Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int FindIndex&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is searched forward starting at the first element and ending at the last element.  </p>\n<p> The<a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates all three overloads of the &lt;xref:System.Array.FindIndex%2A&gt; generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with &quot;saurus&quot;. The code example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in &quot;saurus&quot;.  </p>\n<p> The FindIndex(T) method overload traverses the array from the beginning, passing each element in turn to the <code>EndsWithSaurus</code> method. The search stops when the <code>EndsWithSaurus</code> method returns <code>true</code> for the element at position 1.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C# and Visual Basic, it is not necessary to create the <code>Predicate&lt;string&gt;</code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  </p>\n</div>\n<p> The [FindIndex<t\\>(T&lt;xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29&gt; method overload is used to search the array beginning at position 2 and continuing to the end of the array. It finds the element at position 5. Finally, the [FindIndex&lt;T&gt;(T&lt;xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29&gt; method overload is used to search the range of three elements beginning at position 2. It returns â€“1 because there are no dinosaur names in that range that end with &quot;saurus&quot;.  <p>\n<pre><code class=\"lang-cpp\" name=\"Array_FindIndex#1\">using namespace System;\n\n// Search predicate returns true if a string ends in &quot;saurus&quot;.\nbool EndsWithSaurus(String^ s)\n{\n    if ((s-&gt;Length &gt; 5) &amp;&amp; \n        (s-&gt;Substring(s-&gt;Length - 6)-&gt;ToLower() == &quot;saurus&quot;))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { &quot;Compsognathus&quot;, \n        &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, \n        &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, \n        &quot;Triceratops&quot; };\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Array::FindIndex(dinosaurs, EndsWithSaurus): {0}&quot;, \n        Array::FindIndex(dinosaurs, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Array::FindIndex(dinosaurs, 2, EndsWithSaurus): {0}&quot;,\n        Array::FindIndex(dinosaurs, 2, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Array::FindIndex(dinosaurs, 2, 3, EndsWithSaurus): {0}&quot;,\n        Array::FindIndex(dinosaurs, 2, 3, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray::FindIndex(dinosaurs, EndsWithSaurus): 1\n\nArray::FindIndex(dinosaurs, 2, EndsWithSaurus): 5\n\nArray::FindIndex(dinosaurs, 2, 3, EndsWithSaurus): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_FindIndex#1\">Imports System\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { &quot;Compsognathus&quot;, _\n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, _\n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, _\n            &quot;Triceratops&quot; }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindIndex(dinosaurs, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindIndex(dinosaurs, AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindIndex(dinosaurs, 2, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindIndex(dinosaurs, 2, AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindIndex(dinosaurs, 2, 3, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindIndex(dinosaurs, 2, 3, AddressOf EndsWithSaurus))\n\n    End Sub\n\n    &#39; Search predicate returns true if a string ends in &quot;saurus&quot;.\n    Private Shared Function EndsWithSaurus(ByVal s As String) _\n        As Boolean\n\n        &#39; AndAlso prevents evaluation of the second Boolean\n        &#39; expression if the string is so short that an error\n        &#39; would occur.\n        If (s.Length &gt; 5) AndAlso _\n            (s.Substring(s.Length - 6).ToLower() = &quot;saurus&quot;) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Compsognathus\n&#39;Amargasaurus\n&#39;Oviraptor\n&#39;Velociraptor\n&#39;Deinonychus\n&#39;Dilophosaurus\n&#39;Gallimimus\n&#39;Triceratops\n&#39;\n&#39;Array.FindIndex(dinosaurs, AddressOf EndsWithSaurus): 1\n&#39;\n&#39;Array.FindIndex(dinosaurs, 2, AddressOf EndsWithSaurus): 5\n&#39;\n&#39;Array.FindIndex(dinosaurs, 2, 3, AddressOf EndsWithSaurus): -1\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_FindIndex#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = { &quot;Compsognathus&quot;, \n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, \n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, \n            &quot;Triceratops&quot; };\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>Array.FindIndex(dinosaurs, EndsWithSaurus): {0}&quot;, \n            Array.FindIndex(dinosaurs, EndsWithSaurus));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindIndex(dinosaurs, 2, EndsWithSaurus): {0}&quot;,\n            Array.FindIndex(dinosaurs, 2, EndsWithSaurus));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindIndex(dinosaurs, 2, 3, EndsWithSaurus): {0}&quot;,\n            Array.FindIndex(dinosaurs, 2, 3, EndsWithSaurus));\n    }\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    private static bool EndsWithSaurus(String s)\n    {\n        if ((s.Length &gt; 5) &amp;&amp; \n            (s.Substring(s.Length - 6).ToLower() == &quot;saurus&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray.FindIndex(dinosaurs, EndsWithSaurus): 1\n\nArray.FindIndex(dinosaurs, 2, EndsWithSaurus): 5\n\nArray.FindIndex(dinosaurs, 2, 3, EndsWithSaurus): -1\n */\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_FindIndex__1___0___System_Int32_System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Array_FindIndex_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindIndex&lt;T&gt;(T[],Int32,Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that extends from the specified index to the last element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int FindIndex&lt;T&gt; (T[] array, int startIndex, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is searched forward starting at <code>startIndex</code> and ending at the last element.  </p>\n<p> The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements from <code>startIndex</code> to the end of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates all three overloads of the &lt;xref:System.Array.FindIndex%2A&gt; generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with &quot;saurus&quot;. The code example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in &quot;saurus&quot;.  </p>\n<p> The [FindIndex<t\\>(T&lt;xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29&gt; method overload traverses the array from the beginning, passing each element in turn to the <code>EndsWithSaurus</code> method. The search stops when the <code>EndsWithSaurus</code> method returns <code>true</code> for the element at position 1.  <p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C# and Visual Basic, it is not necessary to create the <code>Predicate&lt;string&gt;</code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  </p>\n</div>\n<p> The FindIndex(T) method overload is used to search the array beginning at position 2 and continuing to the end of the array. It finds the element at position 5. Finally, the [FindIndex&lt;T&gt;(T&lt;xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29&gt; method overload is used to search the range of three elements beginning at position 2. It returns â€“1 because there are no dinosaur names in that range that end with &quot;saurus&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"Array_FindIndex#1\">using namespace System;\n\n// Search predicate returns true if a string ends in &quot;saurus&quot;.\nbool EndsWithSaurus(String^ s)\n{\n    if ((s-&gt;Length &gt; 5) &amp;&amp; \n        (s-&gt;Substring(s-&gt;Length - 6)-&gt;ToLower() == &quot;saurus&quot;))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { &quot;Compsognathus&quot;, \n        &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, \n        &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, \n        &quot;Triceratops&quot; };\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Array::FindIndex(dinosaurs, EndsWithSaurus): {0}&quot;, \n        Array::FindIndex(dinosaurs, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Array::FindIndex(dinosaurs, 2, EndsWithSaurus): {0}&quot;,\n        Array::FindIndex(dinosaurs, 2, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Array::FindIndex(dinosaurs, 2, 3, EndsWithSaurus): {0}&quot;,\n        Array::FindIndex(dinosaurs, 2, 3, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray::FindIndex(dinosaurs, EndsWithSaurus): 1\n\nArray::FindIndex(dinosaurs, 2, EndsWithSaurus): 5\n\nArray::FindIndex(dinosaurs, 2, 3, EndsWithSaurus): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_FindIndex#1\">Imports System\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { &quot;Compsognathus&quot;, _\n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, _\n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, _\n            &quot;Triceratops&quot; }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindIndex(dinosaurs, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindIndex(dinosaurs, AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindIndex(dinosaurs, 2, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindIndex(dinosaurs, 2, AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindIndex(dinosaurs, 2, 3, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindIndex(dinosaurs, 2, 3, AddressOf EndsWithSaurus))\n\n    End Sub\n\n    &#39; Search predicate returns true if a string ends in &quot;saurus&quot;.\n    Private Shared Function EndsWithSaurus(ByVal s As String) _\n        As Boolean\n\n        &#39; AndAlso prevents evaluation of the second Boolean\n        &#39; expression if the string is so short that an error\n        &#39; would occur.\n        If (s.Length &gt; 5) AndAlso _\n            (s.Substring(s.Length - 6).ToLower() = &quot;saurus&quot;) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Compsognathus\n&#39;Amargasaurus\n&#39;Oviraptor\n&#39;Velociraptor\n&#39;Deinonychus\n&#39;Dilophosaurus\n&#39;Gallimimus\n&#39;Triceratops\n&#39;\n&#39;Array.FindIndex(dinosaurs, AddressOf EndsWithSaurus): 1\n&#39;\n&#39;Array.FindIndex(dinosaurs, 2, AddressOf EndsWithSaurus): 5\n&#39;\n&#39;Array.FindIndex(dinosaurs, 2, 3, AddressOf EndsWithSaurus): -1\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_FindIndex#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = { &quot;Compsognathus&quot;, \n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, \n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, \n            &quot;Triceratops&quot; };\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>Array.FindIndex(dinosaurs, EndsWithSaurus): {0}&quot;, \n            Array.FindIndex(dinosaurs, EndsWithSaurus));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindIndex(dinosaurs, 2, EndsWithSaurus): {0}&quot;,\n            Array.FindIndex(dinosaurs, 2, EndsWithSaurus));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindIndex(dinosaurs, 2, 3, EndsWithSaurus): {0}&quot;,\n            Array.FindIndex(dinosaurs, 2, 3, EndsWithSaurus));\n    }\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    private static bool EndsWithSaurus(String s)\n    {\n        if ((s.Length &gt; 5) &amp;&amp; \n            (s.Substring(s.Length - 6).ToLower() == &quot;saurus&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray.FindIndex(dinosaurs, EndsWithSaurus): 1\n\nArray.FindIndex(dinosaurs, 2, EndsWithSaurus): 5\n\nArray.FindIndex(dinosaurs, 2, 3, EndsWithSaurus): -1\n */\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_FindIndex__1___0___System_Int32_System_Int32_System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Array_FindIndex_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindIndex&lt;T&gt;(T[],Int32,Int32,Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that starts at the specified index and contains the specified number of elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int FindIndex&lt;T&gt; (T[] array, int startIndex, int count, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is searched forward starting at <code>startIndex</code> and ending at <code>startIndex</code> plus <code>count</code> minus 1, if <code>count</code> is greater than 0.  </p>\n<p> The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates all three overloads of the &lt;xref:System.Array.FindIndex%2A&gt; generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with &quot;saurus&quot;. The code example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in &quot;saurus&quot;.  </p>\n<p> The [FindIndex<t\\>(T&lt;xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29&gt; method overload traverses the array from the beginning, passing each element in turn to the <code>EndsWithSaurus</code> method. The search stops when the <code>EndsWithSaurus</code> method returns <code>true</code> for the element at position 1.  <p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C# and Visual Basic, it is not necessary to create the <code>Predicate&lt;string&gt;</code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  </p>\n</div>\n<p> The [FindIndex&lt;T&gt;(T&lt;xref:System.Array.FindIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29&gt; method overload is used to search the array beginning at position 2 and continuing to the end of the array. It finds the element at position 5. Finally, the FindIndex(T) method overload is used to search the range of three elements beginning at position 2. It returns â€“1 because there are no dinosaur names in that range that end with &quot;saurus&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"Array_FindIndex#1\">using namespace System;\n\n// Search predicate returns true if a string ends in &quot;saurus&quot;.\nbool EndsWithSaurus(String^ s)\n{\n    if ((s-&gt;Length &gt; 5) &amp;&amp; \n        (s-&gt;Substring(s-&gt;Length - 6)-&gt;ToLower() == &quot;saurus&quot;))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { &quot;Compsognathus&quot;, \n        &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, \n        &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, \n        &quot;Triceratops&quot; };\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Array::FindIndex(dinosaurs, EndsWithSaurus): {0}&quot;, \n        Array::FindIndex(dinosaurs, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Array::FindIndex(dinosaurs, 2, EndsWithSaurus): {0}&quot;,\n        Array::FindIndex(dinosaurs, 2, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Array::FindIndex(dinosaurs, 2, 3, EndsWithSaurus): {0}&quot;,\n        Array::FindIndex(dinosaurs, 2, 3, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray::FindIndex(dinosaurs, EndsWithSaurus): 1\n\nArray::FindIndex(dinosaurs, 2, EndsWithSaurus): 5\n\nArray::FindIndex(dinosaurs, 2, 3, EndsWithSaurus): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_FindIndex#1\">Imports System\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { &quot;Compsognathus&quot;, _\n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, _\n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, _\n            &quot;Triceratops&quot; }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindIndex(dinosaurs, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindIndex(dinosaurs, AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindIndex(dinosaurs, 2, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindIndex(dinosaurs, 2, AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindIndex(dinosaurs, 2, 3, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindIndex(dinosaurs, 2, 3, AddressOf EndsWithSaurus))\n\n    End Sub\n\n    &#39; Search predicate returns true if a string ends in &quot;saurus&quot;.\n    Private Shared Function EndsWithSaurus(ByVal s As String) _\n        As Boolean\n\n        &#39; AndAlso prevents evaluation of the second Boolean\n        &#39; expression if the string is so short that an error\n        &#39; would occur.\n        If (s.Length &gt; 5) AndAlso _\n            (s.Substring(s.Length - 6).ToLower() = &quot;saurus&quot;) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Compsognathus\n&#39;Amargasaurus\n&#39;Oviraptor\n&#39;Velociraptor\n&#39;Deinonychus\n&#39;Dilophosaurus\n&#39;Gallimimus\n&#39;Triceratops\n&#39;\n&#39;Array.FindIndex(dinosaurs, AddressOf EndsWithSaurus): 1\n&#39;\n&#39;Array.FindIndex(dinosaurs, 2, AddressOf EndsWithSaurus): 5\n&#39;\n&#39;Array.FindIndex(dinosaurs, 2, 3, AddressOf EndsWithSaurus): -1\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_FindIndex#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = { &quot;Compsognathus&quot;, \n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, \n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, \n            &quot;Triceratops&quot; };\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>Array.FindIndex(dinosaurs, EndsWithSaurus): {0}&quot;, \n            Array.FindIndex(dinosaurs, EndsWithSaurus));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindIndex(dinosaurs, 2, EndsWithSaurus): {0}&quot;,\n            Array.FindIndex(dinosaurs, 2, EndsWithSaurus));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindIndex(dinosaurs, 2, 3, EndsWithSaurus): {0}&quot;,\n            Array.FindIndex(dinosaurs, 2, 3, EndsWithSaurus));\n    }\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    private static bool EndsWithSaurus(String s)\n    {\n        if ((s.Length &gt; 5) &amp;&amp; \n            (s.Substring(s.Length - 6).ToLower() == &quot;saurus&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray.FindIndex(dinosaurs, EndsWithSaurus): 1\n\nArray.FindIndex(dinosaurs, 2, EndsWithSaurus): 5\n\nArray.FindIndex(dinosaurs, 2, 3, EndsWithSaurus): -1\n */\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_FindLast__1___0___System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Array_FindLast_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindLast&lt;T&gt;(T[],Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static T FindLast&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a>, moving backward in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting with the last element and ending with the first element.  Processing is stopped when a match is found.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the &lt;xref:System.Array.Find%2A&gt;, FindLast(T), and &lt;xref:System.Array.FindAll%2A&gt; generic methods. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with &quot;saurus&quot;. The code example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in &quot;saurus&quot;.  </p>\n<p> The &lt;xref:System.Array.Find%2A&gt; generic method traverses the array from the beginning, passing each element in turn to the <code>EndsWithSaurus</code> method. The search stops when the <code>EndsWithSaurus</code> method returns <code>true</code> for the element &quot;Amargasaurus&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C# and Visual Basic, it is not necessary to create the<code>Predicate&lt;string&gt;</code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  </p>\n</div>\n<p> The FindLast(T) generic method is used to search the array backward from the end. It finds the element &quot;Dilophosaurus&quot; at position 5. The &lt;xref:System.Array.FindAll%2A&gt; generic method is used to return an array containing all the elements that end in &quot;saurus&quot;. The elements are displayed.  </p>\n<p> The code example also demonstrates the &lt;xref:System.Array.Exists%2A&gt; and &lt;xref:System.Array.TrueForAll%2A&gt; generic methods.  </p>\n<pre><code class=\"lang-vb\" name=\"Array_FindEtAl#1\">Imports System\n\nPublic Class DinoDiscoverySet\n\n    Public Shared Sub Main()\n        Dim dinosaurs() As String = { &quot;Compsognathus&quot;, _\n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, _\n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, _\n            &quot;Triceratops&quot; }\n\n        Dim GoMesozoic As New DinoDiscoverySet(dinosaurs)\n\n        GoMesozoic.DiscoverAll()\n        GoMesozoic.DiscoverByEnding(&quot;saurus&quot;)\n    End Sub\n\n    Private dinosaurs As String()\n\n    Public Sub New(items() As String)\n        dinosaurs = items\n    End Sub\n\n    Public Sub DiscoverAll()\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next dinosaur\n    End Sub\n\n    Public Sub DiscoverByEnding(Ending As String)\n        Dim dinoType As Predicate(Of String)\n\n        Select Case Ending.ToLower()\n            Case &quot;raptor&quot;\n                dinoType = AddressOf EndsWithRaptor\n            Case &quot;tops&quot;\n                dinoType = AddressOf EndsWithTops\n            Case &quot;saurus&quot;\n                dinoType = AddressOf EndsWithSaurus\n            Case Else\n                dinoType = AddressOf EndsWithSaurus\n        End Select\n\n        Console.WriteLine(vbNewLine + _\n            &quot;Array.Exists(dinosaurs, &quot;&quot;{0}&quot;&quot;): {1}&quot;, _\n            Ending, _\n            Array.Exists(dinosaurs, dinoType))\n\n        Console.WriteLine(vbNewLine + _\n            &quot;Array.TrueForAll(dinosaurs, &quot;&quot;{0}&quot;&quot;): {1}&quot;, _\n            Ending, _\n            Array.TrueForAll(dinosaurs, dinoType))\n\n        Console.WriteLine(vbNewLine + _\n            &quot;Array.Find(dinosaurs, &quot;&quot;{0}&quot;&quot;): {1}&quot;, _\n            Ending, _\n            Array.Find(dinosaurs, dinoType))\n\n        Console.WriteLine(vbNewLine + _\n            &quot;Array.FindLast(dinosaurs, &quot;&quot;{0}&quot;&quot;): {1}&quot;, _\n            Ending, _\n            Array.FindLast(dinosaurs, dinoType))\n\n        Console.WriteLine(vbNewLine + _\n            &quot;Array.FindAll(dinosaurs, &quot;&quot;{0}&quot;&quot;):&quot;, Ending)\n\n        Dim subArray() As String = _\n            Array.FindAll(dinosaurs, dinoType)\n\n        For Each dinosaur As String In subArray\n            Console.WriteLine(dinosaur)\n        Next dinosaur\n    End Sub\n\n    &#39; Search predicate returns true if a string ends in &quot;saurus&quot;.\n    Private Function EndsWithSaurus(s As String) As Boolean\n        &#39; AndAlso prevents evaluation of the second Boolean\n        &#39; expression if the string is so short that an error\n        &#39; would occur.\n        If (s.Length &gt; 5) AndAlso _\n            (s.ToLower().EndsWith(&quot;saurus&quot;)) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    &#39; Search predicate returns true if a string ends in &quot;raptor&quot;.\n    Private Function EndsWithRaptor(s As String) As Boolean\n        &#39; AndAlso prevents evaluation of the second Boolean\n        &#39; expression if the string is so short that an error\n        &#39; would occur.\n        If (s.Length &gt; 5) AndAlso _\n            (s.ToLower().EndsWith(&quot;raptor&quot;)) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    &#39; Search predicate returns true if a string ends in &quot;tops&quot;.\n    Private Function EndsWithTops(s As String) As Boolean\n        &#39; AndAlso prevents evaluation of the second Boolean\n        &#39; expression if the string is so short that an error\n        &#39; would occur.\n        If (s.Length &gt; 3) AndAlso _\n            (s.ToLower().EndsWith(&quot;tops&quot;)) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39; Compsognathus\n&#39; Amargasaurus\n&#39; Oviraptor\n&#39; Velociraptor\n&#39; Deinonychus\n&#39; Dilophosaurus\n&#39; Gallimimus\n&#39; Triceratops\n&#39;\n&#39; Array.Exists(dinosaurs, &quot;saurus&quot;): True\n&#39;\n&#39; Array.TrueForAll(dinosaurs, &quot;saurus&quot;): False\n&#39;\n&#39; Array.Find(dinosaurs, &quot;saurus&quot;): Amargasaurus\n&#39;\n&#39; Array.FindLast(dinosaurs, &quot;saurus&quot;): Dilophosaurus\n&#39;\n&#39; Array.FindAll(dinosaurs, &quot;saurus&quot;):\n&#39; Amargasaurus\n&#39; Dilophosaurus\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_FindEtAl#1\">using System;\n\npublic class DinoDiscoverySet\n{\n    public static void Main()\n    {\n        string[] dinosaurs =\n        {\n            &quot;Compsognathus&quot;, &quot;Amargasaurus&quot;, &quot;Oviraptor&quot;,\n            &quot;Velociraptor&quot;,  &quot;Deinonychus&quot;,  &quot;Dilophosaurus&quot;,\n            &quot;Gallimimus&quot;,    &quot;Triceratops&quot;\n        };\n\n        DinoDiscoverySet GoMesozoic = new DinoDiscoverySet(dinosaurs);\n        \n        GoMesozoic.DiscoverAll();\n        GoMesozoic.DiscoverByEnding(&quot;saurus&quot;);\n    }\n\n    private string[] dinosaurs;\n\n    public DinoDiscoverySet(string[] items)\n    {\n        dinosaurs = items;\n    }\n\n    public void DiscoverAll()\n    {\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n\n    public void DiscoverByEnding(string Ending)\n    {\n        Predicate&lt;string&gt; dinoType;\n\n        switch (Ending.ToLower())\n        {\n            case &quot;raptor&quot;:\n                dinoType = EndsWithRaptor;\n                break;\n            case &quot;tops&quot;:\n                dinoType = EndsWithTops;\n                break;\n            case &quot;saurus&quot;:\n            default:\n                dinoType = EndsWithSaurus;\n                break;\n        }\n        Console.WriteLine(\n            &quot;<br>Array.Exists(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array.Exists(dinosaurs, dinoType));\n\n        Console.WriteLine(\n            &quot;<br>Array.TrueForAll(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array.TrueForAll(dinosaurs, dinoType));\n\n        Console.WriteLine(\n            &quot;<br>Array.Find(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array.Find(dinosaurs, dinoType));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindLast(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array.FindLast(dinosaurs, dinoType));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindAll(dinosaurs, \\&quot;{0}\\&quot;):&quot;, Ending);\n\n        string[] subArray =\n            Array.FindAll(dinosaurs, dinoType);\n\n        foreach(string dinosaur in subArray)\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    private bool EndsWithSaurus(string s)\n    {\n        if ((s.Length &gt; 5) &amp;&amp;\n            (s.Substring(s.Length - 6).ToLower() == &quot;saurus&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    // Search predicate returns true if a string ends in &quot;raptor&quot;.\n    private bool EndsWithRaptor(String s)\n    {\n        if ((s.Length &gt; 5) &amp;&amp;\n            (s.Substring(s.Length - 6).ToLower() == &quot;raptor&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    // Search predicate returns true if a string ends in &quot;tops&quot;.\n    private bool EndsWithTops(String s)\n    {\n        if ((s.Length &gt; 3) &amp;&amp;\n            (s.Substring(s.Length - 4).ToLower() == &quot;tops&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray.Exists(dinosaurs, &quot;saurus&quot;): True\n\nArray.TrueForAll(dinosaurs, &quot;saurus&quot;): False\n\nArray.Find(dinosaurs, &quot;saurus&quot;): Amargasaurus\n\nArray.FindLast(dinosaurs, &quot;saurus&quot;): Dilophosaurus\n\nArray.FindAll(dinosaurs, &quot;saurus&quot;):\nAmargasaurus\nDilophosaurus\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_FindEtAl#1\">using namespace System;\n\npublic ref class DinoDiscoverySet\n{\npublic:\n    static void Main()\n    {\n        array&lt;String^&gt;^ dinosaurs =\n        {\n            &quot;Compsognathus&quot;, &quot;Amargasaurus&quot;, &quot;Oviraptor&quot;,\n            &quot;Velociraptor&quot;,  &quot;Deinonychus&quot;,  &quot;Dilophosaurus&quot;,\n            &quot;Gallimimus&quot;,    &quot;Triceratops&quot;\n        };\n\n        DinoDiscoverySet^ GoMesozoic = gcnew DinoDiscoverySet(dinosaurs);\n\n        GoMesozoic-&gt;DiscoverAll();\n        GoMesozoic-&gt;DiscoverByEnding(&quot;saurus&quot;);\n    }\n\n    DinoDiscoverySet(array&lt;String^&gt;^ items)\n    {\n        dinosaurs = items;\n    }\n\n    void DiscoverAll()\n    {\n        Console::WriteLine();\n        for each(String^ dinosaur in dinosaurs)\n        {\n            Console::WriteLine(dinosaur);\n        }\n    }\n\n    void DiscoverByEnding(String^ Ending)\n    {\n        Predicate&lt;String^&gt;^ dinoType;\n\n        if (Ending-&gt;ToLower() == &quot;raptor&quot;)\n        {\n            dinoType =\n                gcnew Predicate&lt;String^&gt;(&amp;DinoDiscoverySet::EndsWithRaptor);\n        }\n        else if (Ending-&gt;ToLower() == &quot;tops&quot;)\n        {\n            dinoType =\n                gcnew Predicate&lt;String^&gt;(&amp;DinoDiscoverySet::EndsWithTops);\n        }\n        else if (Ending-&gt;ToLower() == &quot;saurus&quot;)\n        {\n            dinoType =\n                gcnew Predicate&lt;String^&gt;(&amp;DinoDiscoverySet::EndsWithSaurus);\n        }\n        else\n        {\n            dinoType =\n                gcnew Predicate&lt;String^&gt;(&amp;DinoDiscoverySet::EndsWithSaurus);\n        }\n\n        Console::WriteLine(\n            &quot;<br>Array::Exists(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array::Exists(dinosaurs, dinoType));\n\n        Console::WriteLine(\n            &quot;<br>Array::TrueForAll(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array::TrueForAll(dinosaurs, dinoType));\n\n        Console::WriteLine(\n            &quot;<br>Array::Find(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array::Find(dinosaurs, dinoType));\n\n        Console::WriteLine(\n            &quot;<br>Array::FindLast(dinosaurs, \\&quot;{0}\\&quot;): {1}&quot;,\n            Ending,\n            Array::FindLast(dinosaurs, dinoType));\n\n        Console::WriteLine(\n            &quot;<br>Array::FindAll(dinosaurs, \\&quot;{0}\\&quot;):&quot;, Ending);\n\n        array&lt;String^&gt;^ subArray =\n            Array::FindAll(dinosaurs, dinoType);\n\n        for each(String^ dinosaur in subArray)\n        {\n            Console::WriteLine(dinosaur);\n        }\n    }\n\nprivate:\n    array&lt;String^&gt;^ dinosaurs;\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    static bool EndsWithSaurus(String^ s)\n    {\n        if ((s-&gt;Length &gt; 5) &amp;&amp;\n            (s-&gt;Substring(s-&gt;Length - 6)-&gt;ToLower() == &quot;saurus&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    // Search predicate returns true if a string ends in &quot;raptor&quot;.\n    static bool EndsWithRaptor(String^ s)\n    {\n        if ((s-&gt;Length &gt; 5) &amp;&amp;\n            (s-&gt;Substring(s-&gt;Length - 6)-&gt;ToLower() == &quot;raptor&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    // Search predicate returns true if a string ends in &quot;tops&quot;.\n    static bool EndsWithTops(String^ s)\n    {\n        if ((s-&gt;Length &gt; 3) &amp;&amp;\n            (s-&gt;Substring(s-&gt;Length - 4)-&gt;ToLower() == &quot;tops&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n};\n\nint main()\n{\n    DinoDiscoverySet::Main();\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray.Exists(dinosaurs, &quot;saurus&quot;): True\n\nArray.TrueForAll(dinosaurs, &quot;saurus&quot;): False\n\nArray.Find(dinosaurs, &quot;saurus&quot;): Amargasaurus\n\nArray.FindLast(dinosaurs, &quot;saurus&quot;): Dilophosaurus\n\nArray.FindAll(dinosaurs, &quot;saurus&quot;):\nAmargasaurus\nDilophosaurus\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_FindLastIndex__1___0___System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Array_FindLastIndex_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindLastIndex&lt;T&gt;(T[],Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int FindLastIndex&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is searched backward starting at the last element and ending at the first element.  </p>\n<p> The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates all three overloads of the &lt;xref:System.Array.FindLastIndex%2A&gt; generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with &quot;saurus&quot;. The code example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in &quot;saurus&quot;.  </p>\n<p> The FindLastIndex(T) method overload traverses the array backward from the end, passing each element in turn to the <code>EndsWithSaurus</code> method. The search stops when the <code>EndsWithSaurus</code> method returns <code>true</code> for the element at position 5.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C# and Visual Basic, it is not necessary to create the <code>Predicate&lt;string&gt;</code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  </p>\n</div>\n<p> The [FindLastIndex<t\\>(T&lt;xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29&gt; method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array. It finds the element at position 1. Finally, the [FindLastIndex&lt;T&gt;(T&lt;xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29&gt; method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2). It returns â€“1 because there are no dinosaur names in that range that end with &quot;saurus&quot;.  <p>\n<pre><code class=\"lang-cpp\" name=\"Array_FindLastIndex#1\">using namespace System;\n\n// Search predicate returns true if a string ends in &quot;saurus&quot;.\nbool EndsWithSaurus(String^ s)\n{\n    if ((s-&gt;Length &gt; 5) &amp;&amp; \n        (s-&gt;Substring(s-&gt;Length - 6)-&gt;ToLower() == &quot;saurus&quot;))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { &quot;Compsognathus&quot;, \n        &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, \n        &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, \n        &quot;Triceratops&quot; };\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Array::FindLastIndex(dinosaurs, EndsWithSaurus): {0}&quot;, \n        Array::FindLastIndex(dinosaurs, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Array::FindLastIndex(dinosaurs, 4, EndsWithSaurus): {0}&quot;,\n        Array::FindLastIndex(dinosaurs, 4, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Array::FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): {0}&quot;,\n        Array::FindLastIndex(dinosaurs, 4, 3, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray::FindLastIndex(dinosaurs, EndsWithSaurus): 5\n\nArray::FindLastIndex(dinosaurs, 4, EndsWithSaurus): 1\n\nArray::FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): -1\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_FindLastIndex#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = { &quot;Compsognathus&quot;, \n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, \n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, \n            &quot;Triceratops&quot; };\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>Array.FindLastIndex(dinosaurs, EndsWithSaurus): {0}&quot;, \n            Array.FindLastIndex(dinosaurs, EndsWithSaurus));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindLastIndex(dinosaurs, 4, EndsWithSaurus): {0}&quot;,\n            Array.FindLastIndex(dinosaurs, 4, EndsWithSaurus));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): {0}&quot;,\n            Array.FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus));\n    }\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    private static bool EndsWithSaurus(String s)\n    {\n        if ((s.Length &gt; 5) &amp;&amp; \n            (s.Substring(s.Length - 6).ToLower() == &quot;saurus&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray.FindLastIndex(dinosaurs, EndsWithSaurus): 5\n\nArray.FindLastIndex(dinosaurs, 4, EndsWithSaurus): 1\n\nArray.FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_FindLastIndex#1\">Imports System\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { &quot;Compsognathus&quot;, _\n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, _\n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, _\n            &quot;Triceratops&quot; }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindLastIndex(dinosaurs, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindLastIndex(dinosaurs, AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindLastIndex(dinosaurs, 4, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindLastIndex(dinosaurs, 4, AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindLastIndex(dinosaurs, 4, 3, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindLastIndex(dinosaurs, 4, 3, AddressOf EndsWithSaurus))\n\n    End Sub\n\n    &#39; Search predicate returns true if a string ends in &quot;saurus&quot;.\n    Private Shared Function EndsWithSaurus(ByVal s As String) _\n        As Boolean\n\n        &#39; AndAlso prevents evaluation of the second Boolean\n        &#39; expression if the string is so short that an error\n        &#39; would occur.\n        If (s.Length &gt; 5) AndAlso _\n            (s.Substring(s.Length - 6).ToLower() = &quot;saurus&quot;) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Compsognathus\n&#39;Amargasaurus\n&#39;Oviraptor\n&#39;Velociraptor\n&#39;Deinonychus\n&#39;Dilophosaurus\n&#39;Gallimimus\n&#39;Triceratops\n&#39;\n&#39;Array.FindLastIndex(dinosaurs, AddressOf EndsWithSaurus): 5\n&#39;\n&#39;Array.FindLastIndex(dinosaurs, 4, AddressOf EndsWithSaurus): 1\n&#39;\n&#39;Array.FindLastIndex(dinosaurs, 4, 3, AddressOf EndsWithSaurus): -1\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_FindLastIndex__1___0___System_Int32_System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Array_FindLastIndex_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindLastIndex&lt;T&gt;(T[],Int32,Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that extends from the first element to the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int FindLastIndex&lt;T&gt; (T[] array, int startIndex, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is searched backward starting at <code>startIndex</code> and ending at the first element.  </p>\n<p> The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements from the beginning of <code>array</code> to <code>startIndex</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates all three overloads of the &lt;xref:System.Array.FindLastIndex%2A&gt; generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with &quot;saurus&quot;. The code example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in &quot;saurus&quot;.  </p>\n<p> The [FindLastIndex<t\\>(T&lt;xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29&gt; method overload traverses the array backward from the end, passing each element in turn to the <code>EndsWithSaurus</code> method. The search stops when the <code>EndsWithSaurus</code> method returns <code>true</code> for the element at position 5.  <p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C# and Visual Basic, it is not necessary to create the <code>Predicate&lt;string&gt;</code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  </p>\n</div>\n<p> The FindLastIndex(T) method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array. It finds the element at position 1. Finally, the [FindLastIndex&lt;T&gt;(T&lt;xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29&gt; method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2). It returns â€“1 because there are no dinosaur names in that range that end with &quot;saurus&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"Array_FindLastIndex#1\">using namespace System;\n\n// Search predicate returns true if a string ends in &quot;saurus&quot;.\nbool EndsWithSaurus(String^ s)\n{\n    if ((s-&gt;Length &gt; 5) &amp;&amp; \n        (s-&gt;Substring(s-&gt;Length - 6)-&gt;ToLower() == &quot;saurus&quot;))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { &quot;Compsognathus&quot;, \n        &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, \n        &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, \n        &quot;Triceratops&quot; };\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Array::FindLastIndex(dinosaurs, EndsWithSaurus): {0}&quot;, \n        Array::FindLastIndex(dinosaurs, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Array::FindLastIndex(dinosaurs, 4, EndsWithSaurus): {0}&quot;,\n        Array::FindLastIndex(dinosaurs, 4, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Array::FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): {0}&quot;,\n        Array::FindLastIndex(dinosaurs, 4, 3, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray::FindLastIndex(dinosaurs, EndsWithSaurus): 5\n\nArray::FindLastIndex(dinosaurs, 4, EndsWithSaurus): 1\n\nArray::FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): -1\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_FindLastIndex#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = { &quot;Compsognathus&quot;, \n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, \n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, \n            &quot;Triceratops&quot; };\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>Array.FindLastIndex(dinosaurs, EndsWithSaurus): {0}&quot;, \n            Array.FindLastIndex(dinosaurs, EndsWithSaurus));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindLastIndex(dinosaurs, 4, EndsWithSaurus): {0}&quot;,\n            Array.FindLastIndex(dinosaurs, 4, EndsWithSaurus));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): {0}&quot;,\n            Array.FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus));\n    }\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    private static bool EndsWithSaurus(String s)\n    {\n        if ((s.Length &gt; 5) &amp;&amp; \n            (s.Substring(s.Length - 6).ToLower() == &quot;saurus&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray.FindLastIndex(dinosaurs, EndsWithSaurus): 5\n\nArray.FindLastIndex(dinosaurs, 4, EndsWithSaurus): 1\n\nArray.FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_FindLastIndex#1\">Imports System\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { &quot;Compsognathus&quot;, _\n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, _\n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, _\n            &quot;Triceratops&quot; }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindLastIndex(dinosaurs, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindLastIndex(dinosaurs, AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindLastIndex(dinosaurs, 4, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindLastIndex(dinosaurs, 4, AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindLastIndex(dinosaurs, 4, 3, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindLastIndex(dinosaurs, 4, 3, AddressOf EndsWithSaurus))\n\n    End Sub\n\n    &#39; Search predicate returns true if a string ends in &quot;saurus&quot;.\n    Private Shared Function EndsWithSaurus(ByVal s As String) _\n        As Boolean\n\n        &#39; AndAlso prevents evaluation of the second Boolean\n        &#39; expression if the string is so short that an error\n        &#39; would occur.\n        If (s.Length &gt; 5) AndAlso _\n            (s.Substring(s.Length - 6).ToLower() = &quot;saurus&quot;) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Compsognathus\n&#39;Amargasaurus\n&#39;Oviraptor\n&#39;Velociraptor\n&#39;Deinonychus\n&#39;Dilophosaurus\n&#39;Gallimimus\n&#39;Triceratops\n&#39;\n&#39;Array.FindLastIndex(dinosaurs, AddressOf EndsWithSaurus): 5\n&#39;\n&#39;Array.FindLastIndex(dinosaurs, 4, AddressOf EndsWithSaurus): 1\n&#39;\n&#39;Array.FindLastIndex(dinosaurs, 4, 3, AddressOf EndsWithSaurus): -1\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_FindLastIndex__1___0___System_Int32_System_Int32_System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Array_FindLastIndex_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FindLastIndex&lt;T&gt;(T[],Int32,Int32,Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the specified number of elements and ends at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int FindLastIndex&lt;T&gt; (T[] array, int startIndex, int count, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> that defines the conditions of the element to search for.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is searched backward starting at <code>startIndex</code> and ending at <code>startIndex</code> minus <code>count</code> plus 1, if <code>count</code> is greater than 0.  </p>\n<p> The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns <code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates all three overloads of the &lt;xref:System.Array.FindLastIndex%2A&gt; generic method. An array of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with &quot;saurus&quot;. The code example also defines a search predicate method named <code>EndsWithSaurus</code>, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in &quot;saurus&quot;.  </p>\n<p> The [FindLastIndex<t\\>(T&lt;xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Predicate%7B%60%600%7D%29&gt; method overload traverses the array backward from the end, passing each element in turn to the <code>EndsWithSaurus</code> method. The search stops when the <code>EndsWithSaurus</code> method returns <code>true</code> for the element at position 5.  <p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C# and Visual Basic, it is not necessary to create the <code>Predicate&lt;string&gt;</code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  </p>\n</div>\n<p> The [FindLastIndex&lt;T&gt;(T&lt;xref:System.Array.FindLastIndex%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Predicate%7B%60%600%7D%29&gt; method overload is used to search the array beginning at position 4 and continuing backward to the beginning of the array. It finds the element at position 1. Finally, the FindLastIndex(T) method overload is used to search the range of three elements beginning at position 4 and working backward (that is, elements 4, 3, and 2). It returns â€“1 because there are no dinosaur names in that range that end with &quot;saurus&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"Array_FindLastIndex#1\">using namespace System;\n\n// Search predicate returns true if a string ends in &quot;saurus&quot;.\nbool EndsWithSaurus(String^ s)\n{\n    if ((s-&gt;Length &gt; 5) &amp;&amp; \n        (s-&gt;Substring(s-&gt;Length - 6)-&gt;ToLower() == &quot;saurus&quot;))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { &quot;Compsognathus&quot;, \n        &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, \n        &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, \n        &quot;Triceratops&quot; };\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Array::FindLastIndex(dinosaurs, EndsWithSaurus): {0}&quot;, \n        Array::FindLastIndex(dinosaurs, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Array::FindLastIndex(dinosaurs, 4, EndsWithSaurus): {0}&quot;,\n        Array::FindLastIndex(dinosaurs, 4, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n\n    Console::WriteLine(&quot;<br>Array::FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): {0}&quot;,\n        Array::FindLastIndex(dinosaurs, 4, 3, gcnew Predicate&lt;String^&gt;(EndsWithSaurus)));\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray::FindLastIndex(dinosaurs, EndsWithSaurus): 5\n\nArray::FindLastIndex(dinosaurs, 4, EndsWithSaurus): 1\n\nArray::FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): -1\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_FindLastIndex#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = { &quot;Compsognathus&quot;, \n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, \n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, \n            &quot;Triceratops&quot; };\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>Array.FindLastIndex(dinosaurs, EndsWithSaurus): {0}&quot;, \n            Array.FindLastIndex(dinosaurs, EndsWithSaurus));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindLastIndex(dinosaurs, 4, EndsWithSaurus): {0}&quot;,\n            Array.FindLastIndex(dinosaurs, 4, EndsWithSaurus));\n\n        Console.WriteLine(\n            &quot;<br>Array.FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): {0}&quot;,\n            Array.FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus));\n    }\n\n    // Search predicate returns true if a string ends in &quot;saurus&quot;.\n    private static bool EndsWithSaurus(String s)\n    {\n        if ((s.Length &gt; 5) &amp;&amp; \n            (s.Substring(s.Length - 6).ToLower() == &quot;saurus&quot;))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nCompsognathus\nAmargasaurus\nOviraptor\nVelociraptor\nDeinonychus\nDilophosaurus\nGallimimus\nTriceratops\n\nArray.FindLastIndex(dinosaurs, EndsWithSaurus): 5\n\nArray.FindLastIndex(dinosaurs, 4, EndsWithSaurus): 1\n\nArray.FindLastIndex(dinosaurs, 4, 3, EndsWithSaurus): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_FindLastIndex#1\">Imports System\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { &quot;Compsognathus&quot;, _\n            &quot;Amargasaurus&quot;,   &quot;Oviraptor&quot;,      &quot;Velociraptor&quot;, _\n            &quot;Deinonychus&quot;,    &quot;Dilophosaurus&quot;,  &quot;Gallimimus&quot;, _\n            &quot;Triceratops&quot; }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindLastIndex(dinosaurs, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindLastIndex(dinosaurs, AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindLastIndex(dinosaurs, 4, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindLastIndex(dinosaurs, 4, AddressOf EndsWithSaurus))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.FindLastIndex(dinosaurs, 4, 3, AddressOf EndsWithSaurus): {0}&quot;, _\n            Array.FindLastIndex(dinosaurs, 4, 3, AddressOf EndsWithSaurus))\n\n    End Sub\n\n    &#39; Search predicate returns true if a string ends in &quot;saurus&quot;.\n    Private Shared Function EndsWithSaurus(ByVal s As String) _\n        As Boolean\n\n        &#39; AndAlso prevents evaluation of the second Boolean\n        &#39; expression if the string is so short that an error\n        &#39; would occur.\n        If (s.Length &gt; 5) AndAlso _\n            (s.Substring(s.Length - 6).ToLower() = &quot;saurus&quot;) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Compsognathus\n&#39;Amargasaurus\n&#39;Oviraptor\n&#39;Velociraptor\n&#39;Deinonychus\n&#39;Dilophosaurus\n&#39;Gallimimus\n&#39;Triceratops\n&#39;\n&#39;Array.FindLastIndex(dinosaurs, AddressOf EndsWithSaurus): 5\n&#39;\n&#39;Array.FindLastIndex(dinosaurs, 4, AddressOf EndsWithSaurus): 1\n&#39;\n&#39;Array.FindLastIndex(dinosaurs, 4, 3, AddressOf EndsWithSaurus): -1\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_ForEach__1___0___System_Action___0__\">\r\n    \r\n            <a id=\"System_Array_ForEach_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForEach&lt;T&gt;(T[],Action&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Performs the specified action on each element of the specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ForEach&lt;T&gt; (T[] array, Action&lt;T&gt; action);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> on whose elements the action is to be performed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Action`1</span> to perform on each element of <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>action</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action&lt;T&gt;</a> is a delegate to a method that performs an action on the object passed to it.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use ForEach(T) to display the squares of each element in an integer array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.ForEach#1\">using namespace System;\n\npublic ref class SamplesArray\n{\npublic:\n    static void Main()\n    {\n        // create a three element array of integers\n        array&lt;int&gt;^ intArray = gcnew array&lt;int&gt; {2, 3, 4};\n\n        // set a delegate for the ShowSquares method\n        Action&lt;int&gt;^ action = gcnew Action&lt;int&gt;(ShowSquares);\n\n        Array::ForEach(intArray, action);\n    }\n\nprivate:\n    static void ShowSquares(int val)\n    {\n        Console::WriteLine(&quot;{0:d} squared = {1:d}&quot;, val, val*val);\n    }\n};\n\nint main()\n{\n    SamplesArray::Main();\n}\n\n/*\nThis code produces the following output:\n\n2 squared = 4\n3 squared = 9\n4 squared = 16\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.ForEach#1\">using System;\n\npublic class SamplesArray\n{\n    public static void Main()\n    {\n        // create a three element array of integers\n        int[] intArray = new int[] {2, 3, 4};\n\n        // set a delegate for the ShowSquares method\n        Action&lt;int&gt; action = new Action&lt;int&gt;(ShowSquares);\n\n        Array.ForEach(intArray, action);\n    }\n\n    private static void ShowSquares(int val)\n    {\n        Console.WriteLine(&quot;{0:d} squared = {1:d}&quot;, val, val*val);\n    }\n}\n\n/*\nThis code produces the following output:\n\n2 squared = 4\n3 squared = 9\n4 squared = 16\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.ForEach#1\">Imports System\n\nPublic Class SamplesArray\n    Public Shared Sub Main()\n        &#39; create a three element array of integers\n        Dim intArray() As Integer = New Integer() {2, 3, 4}\n\n        &#39; set a delegate for the ShowSquares method\n        Dim action As New Action(Of Integer)(AddressOf ShowSquares)\n\n        Array.ForEach(intArray, action)\n    End Sub\n\n    Private Shared Sub ShowSquares(val As Integer)\n        Console.WriteLine(&quot;{0:d} squared = {1:d}&quot;, val, val*val)\n    End Sub\nEnd Class\n\n&#39; This code produces the following output:\n&#39;\n&#39; 2 squared = 4\n&#39; 3 squared = 9\n&#39; 4 squared = 16\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetEnumerator\">\r\n    \r\n            <a id=\"System_Array_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of the enumerators. Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use GetEnumerator to list the elements of an array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Array_GetEnumerator#1\">using System;\n\npublic class SamplesArray  {\n \n   public static void Main()  {\n \n      // Creates and initializes a new Array.\n      String[] myArr = new String[10];\n      myArr[0] = &quot;The&quot;;\n      myArr[1] = &quot;quick&quot;;\n      myArr[2] = &quot;brown&quot;;\n      myArr[3] = &quot;fox&quot;;\n      myArr[4] = &quot;jumped&quot;;\n      myArr[5] = &quot;over&quot;;\n      myArr[6] = &quot;the&quot;;\n      myArr[7] = &quot;lazy&quot;;\n      myArr[8] = &quot;dog&quot;;\n \n      // Displays the values of the Array.\n      int i = 0;\n      System.Collections.IEnumerator myEnumerator = myArr.GetEnumerator();\n      Console.WriteLine( &quot;The Array contains the following values:&quot; );\n      while (( myEnumerator.MoveNext() ) &amp;&amp; ( myEnumerator.Current != null ))\n         Console.WriteLine( &quot;[{0}] {1}&quot;, i++, myEnumerator.Current );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\nThe Array contains the following values:\n[0] The\n[1] quick\n[2] brown\n[3] fox\n[4] jumped\n[5] over\n[6] the\n[7] lazy\n[8] dog\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Array_GetEnumerator#1\">using namespace System;\n\nint main()\n{\n   // Creates and initializes a new Array.\n   array&lt;String^&gt;^myArr = gcnew array&lt;String^&gt;(10);\n   myArr[ 0 ] = &quot;The&quot;;\n   myArr[ 1 ] = &quot;quick&quot;;\n   myArr[ 2 ] = &quot;brown&quot;;\n   myArr[ 3 ] = &quot;fox&quot;;\n   myArr[ 4 ] = &quot;jumped&quot;;\n   myArr[ 5 ] = &quot;over&quot;;\n   myArr[ 6 ] = &quot;the&quot;;\n   myArr[ 7 ] = &quot;lazy&quot;;\n   myArr[ 8 ] = &quot;dog&quot;;\n   \n   // Displays the values of the Array.\n   int i = 0;\n   System::Collections::IEnumerator^ myEnumerator = myArr-&gt;GetEnumerator();\n   Console::WriteLine( &quot;The Array contains the following values:&quot; );\n   while ( (myEnumerator-&gt;MoveNext()) &amp;&amp; (myEnumerator-&gt;Current != nullptr) )\n      Console::WriteLine( &quot;[{0}] {1}&quot;, i++, myEnumerator-&gt;Current );\n}\n\n/* \nThis code produces the following output.\n\nThe Array contains the following values:\n[0] The\n[1] quick\n[2] brown\n[3] fox\n[4] jumped\n[5] over\n[6] the\n[7] lazy\n[8] dog\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetEnumerator#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new Array.\n      Dim myArr(10) As [String]\n      myArr(0) = &quot;The&quot;\n      myArr(1) = &quot;quick&quot;\n      myArr(2) = &quot;brown&quot;\n      myArr(3) = &quot;fox&quot;\n      myArr(4) = &quot;jumped&quot;\n      myArr(5) = &quot;over&quot;\n      myArr(6) = &quot;the&quot;\n      myArr(7) = &quot;lazy&quot;\n      myArr(8) = &quot;dog&quot;\n\n      &#39; Displays the values of the Array.\n      Dim i As Integer = 0\n      Dim myEnumerator As System.Collections.IEnumerator = myArr.GetEnumerator()\n      Console.WriteLine(&quot;The Array contains the following values:&quot;)\n      While myEnumerator.MoveNext() And Not (myEnumerator.Current Is Nothing)\n         Console.WriteLine(&quot;[{0}] {1}&quot;, i, myEnumerator.Current)\n         i += 1\n      End While \n\n   End Sub &#39;Main\n\nEnd Class &#39;SamplesArray \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The Array contains the following values:\n&#39;[0] The\n&#39;[1] quick\n&#39;[2] brown\n&#39;[3] fox\n&#39;[4] jumped\n&#39;[5] over\n&#39;[6] the\n&#39;[7] lazy\n&#39;[8] dog\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetLength_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_GetLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLength(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a 32-bit integer that represents the number of elements in the specified dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetLength (int dimension);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dimension</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A zero-based dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> whose length needs to be determined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit integer that represents the number of elements in the specified dimension.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>dimension</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>dimension</code> is equal to or greater than <span class=\"xref\">stem.Array.Rank*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An example of GetLength is <code>GetLength(0)</code>, which returns the number of elements in the first dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use GetLength to display the dimensions of two arrays with different ranks.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.GetLength#1\">using namespace System;\n\npublic ref class SamplesArray\n{\npublic:\n    static void Main()\n    {\n        // make a single dimension array\n        Array^ MyArray1 = Array::CreateInstance(int::typeid, 5);\n\n        // make a 3 dimensional array\n        Array^ MyArray2 = Array::CreateInstance(int::typeid, 5, 3, 2);\n\n        // make an array container\n        Array^ BossArray = Array::CreateInstance(Array::typeid, 2);\n        BossArray-&gt;SetValue(MyArray1, 0);\n        BossArray-&gt;SetValue(MyArray2, 1);\n\n        int i = 0, j, rank;\n        for each (Array^ anArray in BossArray)\n        {\n            rank = anArray-&gt;Rank;\n            if (rank &gt; 1)\n            {\n                Console::WriteLine(&quot;Lengths of {0:d} dimension array[{1:d}]&quot;, rank, i);\n                // show the lengths of each dimension\n                for (j = 0; j &lt; rank; j++)\n                {\n                    Console::WriteLine(&quot;    Length of dimension({0:d}) = {1:d}&quot;, j, anArray-&gt;GetLength(j));\n                }\n            }\n            else\n            {\n                Console::WriteLine(&quot;Lengths of single dimension array[{0:d}]&quot;, i);\n            }\n            // show the total length of the entire array or all dimensions\n            Console::WriteLine(&quot;    Total length of the array = {0:d}&quot;, anArray-&gt;Length);\n            Console::WriteLine();\n            i++;\n        }\n    }\n};\n\nint main()\n{\n    SamplesArray::Main();\n}\n\n/*\nThis code produces the following output:\n\nLengths of single dimension array[0]\n    Total length of the array = 5\n\nLengths of 3 dimension array[1]\n    Length of dimension(0) = 5\n    Length of dimension(1) = 3\n    Length of dimension(2) = 2\n    Total length of the array = 30\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.GetLength#1\">using System;\n\npublic class SamplesArray\n{\n    public static void Main()\n    {\n        // make a single dimension array\n        Array MyArray1 = Array.CreateInstance(typeof(int), 5);\n\n        // make a 3 dimensional array\n        Array MyArray2 = Array.CreateInstance(typeof(int), 5, 3, 2);\n\n        // make an array container\n        Array BossArray = Array.CreateInstance(typeof(Array), 2);\n        BossArray.SetValue(MyArray1, 0);\n        BossArray.SetValue(MyArray2, 1);\n\n        int i = 0, j, rank;\n        foreach (Array anArray in BossArray)\n        {\n            rank = anArray.Rank;\n            if (rank &gt; 1)\n            {\n                Console.WriteLine(&quot;Lengths of {0:d} dimension array[{1:d}]&quot;, rank, i);\n                // show the lengths of each dimension\n                for (j = 0; j &lt; rank; j++)\n                {\n                    Console.WriteLine(&quot;    Length of dimension({0:d}) = {1:d}&quot;, j, anArray.GetLength(j));\n                }\n            }\n            else\n            {\n                Console.WriteLine(&quot;Lengths of single dimension array[{0:d}]&quot;, i);\n            }\n            // show the total length of the entire array or all dimensions\n            Console.WriteLine(&quot;    Total length of the array = {0:d}&quot;, anArray.Length);\n            Console.WriteLine();\n            i++;\n        }\n    }\n}\n\n/*\nThis code produces the following output:\n\nLengths of single dimension array[0]\n    Total length of the array = 5\n\nLengths of 3 dimension array[1]\n    Length of dimension(0) = 5\n    Length of dimension(1) = 3\n    Length of dimension(2) = 2\n    Total length of the array = 30\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.GetLength#1\">Imports System\n\nPublic Class SamplesArray\n    Public Shared Sub Main()\n        &#39; make a single dimension array\n        Dim MyArray1 As Array = Array.CreateInstance(GetType(Integer), 5)\n\n        &#39; make a 3 dimensional array\n        Dim MyArray2 As Array = Array.CreateInstance(GetType(Integer), 5, 3, 2)\n\n        &#39; make an array container\n        Dim BossArray As Array = Array.CreateInstance(GetType(Array), 2)\n        BossArray.SetValue(MyArray1, 0)\n        BossArray.SetValue(MyArray2, 1)\n\n        Dim i As Integer = 0\n        Dim j As Integer\n        Dim rank As Integer\n        For Each anArray As Array In BossArray\n            rank = anArray.Rank\n            If rank &gt; 1\n                Console.WriteLine(&quot;Lengths of {0:d} dimension array[{1:d}]&quot;, rank, i)\n                &#39; show the lengths of each dimension\n                For j = 0 To rank - 1\n                    Console.WriteLine(&quot;    Length of dimension({0:d}) = {1:d}&quot;, j, anArray.GetLength(j))\n                Next j\n            Else\n                Console.WriteLine(&quot;Lengths of single dimension array[{0:d}]&quot;, i)\n            End If\n            &#39; show the total length of the entire array or all dimensions\n            Console.WriteLine(&quot;    Total length of the array = {0:d}&quot;, anArray.Length)\n            Console.WriteLine()\n            i = i + 1\n        Next anArray\n    End Sub\nEnd Class\n\n&#39;This code produces the following output:\n&#39;\n&#39;Lengths of single dimension array[0]\n&#39;    Total length of the array = 5\n&#39;\n&#39;Lengths of 3 dimension array[1]\n&#39;    Length of dimension(0) = 5\n&#39;    Length of dimension(1) = 3\n&#39;    Length of dimension(2) = 2\n&#39;    Total length of the array = 30\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetLongLength_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_GetLongLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLongLength(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a 64-bit integer that represents the number of elements in the specified dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long GetLongLength (int dimension);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dimension</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A zero-based dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> whose length needs to be determined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit integer that represents the number of elements in the specified dimension.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>dimension</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>dimension</code> is equal to or greater than <span class=\"xref\">stem.Array.Rank*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An example of GetLongLength is <code>GetLongLength(0)</code>, which returns the number of elements in the first dimension of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetLowerBound_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_GetLowerBound_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLowerBound(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the index of the first element of the specified dimension in the array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetLowerBound (int dimension);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dimension</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A zero-based dimension of the array whose starting index needs to be determined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the first element of the specified dimension in the array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>dimension</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>dimension</code> is equal to or greater than <span class=\"xref\">stem.Array.Rank*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>GetLowerBound(0)</code> returns the starting index of the first dimension of the array, and <code>GetLowerBound(Rank - 1)</code> returns the starting index of the last dimension of the array.  </p>\n<p> The GetLowerBound method always returns a value that indicates the index of the lower bound of the array, even if the array is empty.  </p>\n<p> Note that, although most arrays in the .NET Framework are zero-based (that is, the GetLowerBound method returns zero for each dimension of an array), the .NET Framework does support arrays that are not zero-based. Such arrays can be created with the [CreateInstance(Type,â€‚Int32[],â€‚Int32&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29&gt; method, and can also be returned from unmanaged code.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetLowerBound and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods to display the bounds of a one-dimensional and two-dimensional array and to display the values of their array elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.GetUpperBound#1\">using namespace System;\n\nvoid main()  \n{\n   // Create a one-dimensional integer array.\n   array&lt;int&gt;^ integers = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n   // Get the upper and lower bound of the array.\n   int upper = integers-&gt;GetUpperBound(0);\n   int lower = integers-&gt;GetLowerBound(0);\n   Console::WriteLine(&quot;Elements from index {0} to {1}:&quot;, lower, upper);\n   // Iterate the array.\n   for (int ctr = lower; ctr &lt;= upper; ctr++)\n     Console::Write(&quot;{0}{1}{2}&quot;, ctr == lower ? &quot;   &quot; : &quot;&quot;, \n                                 integers[ctr], \n                                 ctr &lt; upper ? &quot;, &quot; : Environment::NewLine);\n\n   Console::WriteLine();\n   \n   // Create a two-dimensional integer array.\n   array&lt;int, 2&gt;^ integers2d = { {2, 4}, {3, 9}, {4, 16}, {5, 25}, \n                                 {6, 36}, {7, 49}, {8, 64}, {9, 81} }; \n   // Get the number of dimensions.                               \n   int rank = integers2d-&gt;Rank;  \n   Console::WriteLine(&quot;Number of dimensions: {0}&quot;, rank);      \n   for (int ctr = 0; ctr &lt; integers2d-&gt;Rank - 1; ctr++)\n     Console::WriteLine(&quot;   Dimension {0}: from {1} to {2}&quot;,\n                        ctr, integers2d-&gt;GetLowerBound(ctr),\n                        integers2d-&gt;GetUpperBound(ctr));\n\n   // Iterate the 2-dimensional array and display its values.\n   Console::WriteLine(&quot;   Values of array elements:&quot;);\n   for (int outer = integers2d-&gt;GetLowerBound(0); outer &lt;= integers2d-&gt;GetUpperBound(0);\n        outer++)\n     for (int inner = integers2d-&gt;GetLowerBound(1); inner &lt;= integers2d-&gt;GetUpperBound(1);\n          inner++)\n        Console::WriteLine(&quot;      {3}{0}, {1}{4} = {2}&quot;, outer, inner,\n                           integers2d-&gt;GetValue(outer, inner), &quot;{&quot;, &quot;}&quot;);\n}\n// The example displays the following output:\n//       Elements from index 0 to 9:\n//          2, 4, 6, 8, 10, 12, 14, 16, 18, 20\n//       \n//       Number of dimensions: 2\n//          Dimension 0: from 0 to 7\n//          Dimension 1: from 0 to 1\n//          Values of array elements:\n//             {0, 0} = 2\n//             {0, 1} = 4\n//             {1, 0} = 3\n//             {1, 1} = 9\n//             {2, 0} = 4\n//             {2, 1} = 16\n//             {3, 0} = 5\n//             {3, 1} = 25\n//             {4, 0} = 6\n//             {4, 1} = 36\n//             {5, 0} = 7\n//             {5, 1} = 49\n//             {6, 0} = 8\n//             {6, 1} = 64\n//             {7, 0} = 9\n//             {7, 1} = 81\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.GetUpperBound#1\">using System;\n\npublic class Example\n{\n   public static void Main()  \n   {\n      // Create a one-dimensional integer array.\n      int[] integers = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n      // Get the upper and lower bound of the array.\n      int upper = integers.GetUpperBound(0);\n      int lower = integers.GetLowerBound(0);\n      Console.WriteLine(&quot;Elements from index {0} to {1}:&quot;, lower, upper);\n      // Iterate the array.\n      for (int ctr = lower; ctr &lt;= upper; ctr++)\n        Console.Write(&quot;{0}{1}{2}&quot;, ctr == lower ? &quot;   &quot; : &quot;&quot;, \n                                  integers[ctr], \n                                  ctr &lt; upper ? &quot;, &quot; : Environment.NewLine);\n\n      Console.WriteLine();\n      \n      // Create a two-dimensional integer array.\n      int[,] integers2d= { {2, 4}, {3, 9}, {4, 16}, {5, 25}, \n                           {6, 36}, {7, 49}, {8, 64}, {9, 81} }; \n      // Get the number of dimensions.                               \n      int rank = integers2d.Rank;  \n      Console.WriteLine(&quot;Number of dimensions: {0}&quot;, rank);      \n      for (int ctr = 0; ctr &lt; integers2d.Rank - 1; ctr++)\n        Console.WriteLine(&quot;   Dimension {0}: from {1} to {2}&quot;,\n                          ctr, integers2d.GetLowerBound(ctr),\n                          integers2d.GetUpperBound(ctr));\n\n      // Iterate the 2-dimensional array and display its values.\n      Console.WriteLine(&quot;   Values of array elements:&quot;);\n      for (int outer = integers2d.GetLowerBound(0); outer &lt;= integers2d.GetUpperBound(0);\n           outer++)\n        for (int inner = integers2d.GetLowerBound(1); inner &lt;= integers2d.GetUpperBound(1);\n             inner++)\n           Console.WriteLine(&quot;      {3}{0}, {1}{4} = {2}&quot;, outer, inner,\n                             integers2d.GetValue(outer, inner), &quot;{&quot;, &quot;}&quot;);\n\n   }\n}\n// The example displays the following output:\n//       Elements from index 0 to 9:\n//          2, 4, 6, 8, 10, 12, 14, 16, 18, 20\n//       \n//       Number of dimensions: 2\n//          Dimension 0: from 0 to 7\n//          Dimension 1: from 0 to 1\n//          Values of array elements:\n//             {0, 0} = 2\n//             {0, 1} = 4\n//             {1, 0} = 3\n//             {1, 1} = 9\n//             {2, 0} = 4\n//             {2, 1} = 16\n//             {3, 0} = 5\n//             {3, 1} = 25\n//             {4, 0} = 6\n//             {4, 1} = 36\n//             {5, 0} = 7\n//             {5, 1} = 49\n//             {6, 0} = 8\n//             {6, 1} = 64\n//             {7, 0} = 9\n//             {7, 1} = 81\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.GetUpperBound#1\">Public Module Example    \n    Public Sub Main()\n        &#39; Create a one-dimensional integer array.\n        Dim integers() As Integer = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 }\n        &#39; Get the upper and lower bound of the array.\n        Dim upper As Integer = integers.GetUpperBound(0)\n        Dim lower As Integer = integers.GetLowerBound(0)\n        Console.WriteLine(&quot;Elements from index {0} to {1}:&quot;, lower, upper)\n        &#39; Iterate the array.\n        For ctr As Integer = lower To upper\n           Console.Write(&quot;{0}{1}{2}&quot;, If(ctr = lower, &quot;   &quot;, &quot;&quot;), \n                                     integers(ctr), \n                                     If(ctr &lt; upper, &quot;, &quot;, vbCrLf))\n        Next\n        Console.WriteLine()\n        \n        &#39; Create a two-dimensional integer array.\n        Dim integers2d(,) As Integer = {{2, 4}, {3, 9}, {4, 16}, {5, 25}, \n                                       {6, 36}, {7, 49}, {8, 64}, {9, 81} } \n        &#39; Get the number of dimensions.                               \n        Dim rank As Integer = integers2d.Rank  \n        Console.WriteLine(&quot;Number of dimensions: {0}&quot;, rank)      \n        For ctr As Integer = 0 To integers2d.Rank - 1\n           Console.WriteLine(&quot;   Dimension {0}: from {1} to {2}&quot;,\n                             ctr, integers2d.GetLowerBound(ctr),\n                             integers2d.GetUpperBound(ctr))\n        Next\n        &#39; Iterate the 2-dimensional array and display its values.\n        Console.WriteLine(&quot;   Values of array elements:&quot;)\n        For outer = integers2d.GetLowerBound(0) To integers2d.GetUpperBound(0)\n           For inner = integers2d.GetLowerBound(1) To integers2d.GetUpperBound(1)\n              Console.WriteLine(&quot;      {3}{0}, {1}{4} = {2}&quot;, outer, inner,\n                                integers2d.GetValue(outer, inner), &quot;{&quot;, &quot;}&quot;)\n           Next\n        Next\n    End Sub\nEnd Module\n&#39; The example displays the following output.\n&#39;       Elements from index 0 to 9:\n&#39;          2, 4, 6, 8, 10, 12, 14, 16, 18, 20\n&#39;       \n&#39;       Number of dimensions: 2\n&#39;          Dimension 0: from 0 to 7\n&#39;          Dimension 1: from 0 to 1\n&#39;          Values of array elements:\n&#39;             {0, 0} = 2\n&#39;             {0, 1} = 4\n&#39;             {1, 0} = 3\n&#39;             {1, 1} = 9\n&#39;             {2, 0} = 4\n&#39;             {2, 1} = 16\n&#39;             {3, 0} = 5\n&#39;             {3, 1} = 25\n&#39;             {4, 0} = 6\n&#39;             {4, 1} = 36\n&#39;             {5, 0} = 7\n&#39;             {5, 1} = 49\n&#39;             {6, 0} = 8\n&#39;             {6, 1} = 64\n&#39;             {7, 0} = 9\n&#39;             {7, 1} = 81\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetUpperBound_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_GetUpperBound_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetUpperBound(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the index of the last element of the specified dimension in the array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetUpperBound (int dimension);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dimension</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A zero-based dimension of the array whose upper bound needs to be determined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the last element of the specified dimension in the array, or -1 if the specified dimension is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>dimension</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>dimension</code> is equal to or greater than <span class=\"xref\">stem.Array.Rank*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>GetUpperBound(0)</code> returns the last index in the first dimension of the array, and <code>GetUpperBound(Rank - 1)</code> returns the last index of the last dimension of the array.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and GetUpperBound methods to display the bounds of a one-dimensional and two-dimensional array and to display the values of their array elements.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.GetUpperBound#1\">using namespace System;\n\nvoid main()  \n{\n   // Create a one-dimensional integer array.\n   array&lt;int&gt;^ integers = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n   // Get the upper and lower bound of the array.\n   int upper = integers-&gt;GetUpperBound(0);\n   int lower = integers-&gt;GetLowerBound(0);\n   Console::WriteLine(&quot;Elements from index {0} to {1}:&quot;, lower, upper);\n   // Iterate the array.\n   for (int ctr = lower; ctr &lt;= upper; ctr++)\n     Console::Write(&quot;{0}{1}{2}&quot;, ctr == lower ? &quot;   &quot; : &quot;&quot;, \n                                 integers[ctr], \n                                 ctr &lt; upper ? &quot;, &quot; : Environment::NewLine);\n\n   Console::WriteLine();\n   \n   // Create a two-dimensional integer array.\n   array&lt;int, 2&gt;^ integers2d = { {2, 4}, {3, 9}, {4, 16}, {5, 25}, \n                                 {6, 36}, {7, 49}, {8, 64}, {9, 81} }; \n   // Get the number of dimensions.                               \n   int rank = integers2d-&gt;Rank;  \n   Console::WriteLine(&quot;Number of dimensions: {0}&quot;, rank);      \n   for (int ctr = 0; ctr &lt; integers2d-&gt;Rank - 1; ctr++)\n     Console::WriteLine(&quot;   Dimension {0}: from {1} to {2}&quot;,\n                        ctr, integers2d-&gt;GetLowerBound(ctr),\n                        integers2d-&gt;GetUpperBound(ctr));\n\n   // Iterate the 2-dimensional array and display its values.\n   Console::WriteLine(&quot;   Values of array elements:&quot;);\n   for (int outer = integers2d-&gt;GetLowerBound(0); outer &lt;= integers2d-&gt;GetUpperBound(0);\n        outer++)\n     for (int inner = integers2d-&gt;GetLowerBound(1); inner &lt;= integers2d-&gt;GetUpperBound(1);\n          inner++)\n        Console::WriteLine(&quot;      {3}{0}, {1}{4} = {2}&quot;, outer, inner,\n                           integers2d-&gt;GetValue(outer, inner), &quot;{&quot;, &quot;}&quot;);\n}\n// The example displays the following output:\n//       Elements from index 0 to 9:\n//          2, 4, 6, 8, 10, 12, 14, 16, 18, 20\n//       \n//       Number of dimensions: 2\n//          Dimension 0: from 0 to 7\n//          Dimension 1: from 0 to 1\n//          Values of array elements:\n//             {0, 0} = 2\n//             {0, 1} = 4\n//             {1, 0} = 3\n//             {1, 1} = 9\n//             {2, 0} = 4\n//             {2, 1} = 16\n//             {3, 0} = 5\n//             {3, 1} = 25\n//             {4, 0} = 6\n//             {4, 1} = 36\n//             {5, 0} = 7\n//             {5, 1} = 49\n//             {6, 0} = 8\n//             {6, 1} = 64\n//             {7, 0} = 9\n//             {7, 1} = 81\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.GetUpperBound#1\">using System;\n\npublic class Example\n{\n   public static void Main()  \n   {\n      // Create a one-dimensional integer array.\n      int[] integers = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n      // Get the upper and lower bound of the array.\n      int upper = integers.GetUpperBound(0);\n      int lower = integers.GetLowerBound(0);\n      Console.WriteLine(&quot;Elements from index {0} to {1}:&quot;, lower, upper);\n      // Iterate the array.\n      for (int ctr = lower; ctr &lt;= upper; ctr++)\n        Console.Write(&quot;{0}{1}{2}&quot;, ctr == lower ? &quot;   &quot; : &quot;&quot;, \n                                  integers[ctr], \n                                  ctr &lt; upper ? &quot;, &quot; : Environment.NewLine);\n\n      Console.WriteLine();\n      \n      // Create a two-dimensional integer array.\n      int[,] integers2d= { {2, 4}, {3, 9}, {4, 16}, {5, 25}, \n                           {6, 36}, {7, 49}, {8, 64}, {9, 81} }; \n      // Get the number of dimensions.                               \n      int rank = integers2d.Rank;  \n      Console.WriteLine(&quot;Number of dimensions: {0}&quot;, rank);      \n      for (int ctr = 0; ctr &lt; integers2d.Rank - 1; ctr++)\n        Console.WriteLine(&quot;   Dimension {0}: from {1} to {2}&quot;,\n                          ctr, integers2d.GetLowerBound(ctr),\n                          integers2d.GetUpperBound(ctr));\n\n      // Iterate the 2-dimensional array and display its values.\n      Console.WriteLine(&quot;   Values of array elements:&quot;);\n      for (int outer = integers2d.GetLowerBound(0); outer &lt;= integers2d.GetUpperBound(0);\n           outer++)\n        for (int inner = integers2d.GetLowerBound(1); inner &lt;= integers2d.GetUpperBound(1);\n             inner++)\n           Console.WriteLine(&quot;      {3}{0}, {1}{4} = {2}&quot;, outer, inner,\n                             integers2d.GetValue(outer, inner), &quot;{&quot;, &quot;}&quot;);\n\n   }\n}\n// The example displays the following output:\n//       Elements from index 0 to 9:\n//          2, 4, 6, 8, 10, 12, 14, 16, 18, 20\n//       \n//       Number of dimensions: 2\n//          Dimension 0: from 0 to 7\n//          Dimension 1: from 0 to 1\n//          Values of array elements:\n//             {0, 0} = 2\n//             {0, 1} = 4\n//             {1, 0} = 3\n//             {1, 1} = 9\n//             {2, 0} = 4\n//             {2, 1} = 16\n//             {3, 0} = 5\n//             {3, 1} = 25\n//             {4, 0} = 6\n//             {4, 1} = 36\n//             {5, 0} = 7\n//             {5, 1} = 49\n//             {6, 0} = 8\n//             {6, 1} = 64\n//             {7, 0} = 9\n//             {7, 1} = 81\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.GetUpperBound#1\">Public Module Example    \n    Public Sub Main()\n        &#39; Create a one-dimensional integer array.\n        Dim integers() As Integer = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 }\n        &#39; Get the upper and lower bound of the array.\n        Dim upper As Integer = integers.GetUpperBound(0)\n        Dim lower As Integer = integers.GetLowerBound(0)\n        Console.WriteLine(&quot;Elements from index {0} to {1}:&quot;, lower, upper)\n        &#39; Iterate the array.\n        For ctr As Integer = lower To upper\n           Console.Write(&quot;{0}{1}{2}&quot;, If(ctr = lower, &quot;   &quot;, &quot;&quot;), \n                                     integers(ctr), \n                                     If(ctr &lt; upper, &quot;, &quot;, vbCrLf))\n        Next\n        Console.WriteLine()\n        \n        &#39; Create a two-dimensional integer array.\n        Dim integers2d(,) As Integer = {{2, 4}, {3, 9}, {4, 16}, {5, 25}, \n                                       {6, 36}, {7, 49}, {8, 64}, {9, 81} } \n        &#39; Get the number of dimensions.                               \n        Dim rank As Integer = integers2d.Rank  \n        Console.WriteLine(&quot;Number of dimensions: {0}&quot;, rank)      \n        For ctr As Integer = 0 To integers2d.Rank - 1\n           Console.WriteLine(&quot;   Dimension {0}: from {1} to {2}&quot;,\n                             ctr, integers2d.GetLowerBound(ctr),\n                             integers2d.GetUpperBound(ctr))\n        Next\n        &#39; Iterate the 2-dimensional array and display its values.\n        Console.WriteLine(&quot;   Values of array elements:&quot;)\n        For outer = integers2d.GetLowerBound(0) To integers2d.GetUpperBound(0)\n           For inner = integers2d.GetLowerBound(1) To integers2d.GetUpperBound(1)\n              Console.WriteLine(&quot;      {3}{0}, {1}{4} = {2}&quot;, outer, inner,\n                                integers2d.GetValue(outer, inner), &quot;{&quot;, &quot;}&quot;)\n           Next\n        Next\n    End Sub\nEnd Module\n&#39; The example displays the following output.\n&#39;       Elements from index 0 to 9:\n&#39;          2, 4, 6, 8, 10, 12, 14, 16, 18, 20\n&#39;       \n&#39;       Number of dimensions: 2\n&#39;          Dimension 0: from 0 to 7\n&#39;          Dimension 1: from 0 to 1\n&#39;          Values of array elements:\n&#39;             {0, 0} = 2\n&#39;             {0, 1} = 4\n&#39;             {1, 0} = 3\n&#39;             {1, 1} = 9\n&#39;             {2, 0} = 4\n&#39;             {2, 1} = 16\n&#39;             {3, 0} = 5\n&#39;             {3, 1} = 25\n&#39;             {4, 0} = 6\n&#39;             {4, 1} = 36\n&#39;             {5, 0} = 7\n&#39;             {5, 1} = 49\n&#39;             {6, 0} = 8\n&#39;             {6, 1} = 64\n&#39;             {7, 0} = 9\n&#39;             {7, 1} = 81\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetValue_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value at the specified position in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The index is specified as a 32-bit integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetValue (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the position of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value at the specified position in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly one dimension.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether the value of <code>index</code> is out of bounds.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetValue_System_Int32___\">\r\n    \r\n            <a id=\"System_Array_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Int32[])</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value at the specified position in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as an array of 32-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetValue (int[] indices);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>indices</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value at the specified position in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>indices</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number of dimensions in the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is not equal to the number of elements in <code>indices</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Any element in <code>indices</code> is outside the range of valid indexes for the corresponding dimension of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The number of elements in <code>indices</code> must equal the number of dimensions in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. All elements in the <code>indices</code> array must collectively specify the position of the desired element in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether any of the indexes is out of bounds.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetValue_System_Int64_\">\r\n    \r\n            <a id=\"System_Array_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value at the specified position in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The index is specified as a 64-bit integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetValue (long index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the position of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value at the specified position in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly one dimension.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether the value of <code>index</code> is out of bounds.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetValue_System_Int64___\">\r\n    \r\n            <a id=\"System_Array_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Int64[])</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value at the specified position in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as an array of 64-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetValue (long[] indices);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>indices</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value at the specified position in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>indices</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number of dimensions in the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is not equal to the number of elements in <code>indices</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Any element in <code>indices</code> is outside the range of valid indexes for the corresponding dimension of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The number of elements in <code>indices</code> must equal the number of dimensions in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. All elements in the <code>indices</code> array must collectively specify the position of the desired element in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether any of the indexes is out of bounds.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetValue_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value at the specified position in the two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 32-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetValue (int index1, int index2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the first-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the second-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value at the specified position in the two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly two dimensions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Either <code>index1</code> or <code>index2</code> is outside the range of valid indexes for the corresponding dimension of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether any of the indexes is out of bounds.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetValue_System_Int64_System_Int64_\">\r\n    \r\n            <a id=\"System_Array_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Int64,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value at the specified position in the two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 64-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetValue (long index1, long index2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the first-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the second-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value at the specified position in the two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly two dimensions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Either <code>index1</code> or <code>index2</code> is outside the range of valid indexes for the corresponding dimension of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether any of the indexes is out of bounds.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetValue_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value at the specified position in the three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 32-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetValue (int index1, int index2, int index3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the first-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the second-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the third-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value at the specified position in the three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly three dimensions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index1</code> or <code>index2</code> or <code>index3</code> is outside the range of valid indexes for the corresponding dimension of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether any of the indexes is out of bounds.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_GetValue_System_Int64_System_Int64_System_Int64_\">\r\n    \r\n            <a id=\"System_Array_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Int64,Int64,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value at the specified position in the three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 64-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetValue (long index1, long index2, long index3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the first-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the second-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the third-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value at the specified position in the three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly three dimensions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index1</code> or <code>index2</code> or <code>index3</code> is outside the range of valid indexes for the corresponding dimension of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether any of the indexes is out of bounds.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_IndexOf_System_Array_System_Object_\">\r\n    \r\n            <a id=\"System_Array_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(Array,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int IndexOf (Array array, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the first occurrence of <code>value</code> in <code>array</code>, if found; otherwise, the lower bound of the array minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method searches all the elements of a one-dimensional arrayfor <code>value</code>. To determine whether <code>value</code> exists in <code>array</code>, the method performs an equality comparison by calling each element&#39;s <code>Equals</code> method until it finds a match. This means that if the element overrides the <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">System.Object.Equals(Object)</a> method, that override is called.  </p>\n<p> Because most arrays have a lower bound of zero, this method generally returns â€“1 if<code>value</code> isnâ€™t found. In the rare case that the lower bound of the array is equal to <a class=\"xref\" href=\"system.int32#System_Int32_MinValue\" data-linktype=\"relative-path\">System.Int32.MinValue</a>(0x80000000) and <code>value</code> isnâ€™t found, this method returns <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a> (0x7FFFFFFF).  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example calls the following three overloads of the IndexOfmethod to find the index of a string in a string array:  </p>\n<ul>\n<li><p>IndexOf, to determine the first occurrence of the string &quot;the&quot; in a string array.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.array#System_Array_IndexOf_System_Array_System_Object_System_Int32_\" data-linktype=\"relative-path\">IndexOf(Array,Object,Int32)</a>, to determine the first occurrence of the string &quot;the&quot; in the fourth to the last elements of a string array.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.array#System_Array_IndexOf_System_Array_System_Object_System_Int32_System_Int32_\" data-linktype=\"relative-path\">IndexOf(Array,Object,Int32,Int32)</a>, to determine the first occurrence of the string &quot;the&quot; in a string array from the element that follows the last successful match to the end of the array.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Array.IndexOf Example#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n       // Create a string array with 3 elements having the same value.\n       String[] strings = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;,\n                            &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;, &quot;in&quot;, &quot;the&quot;,\n                            &quot;barn&quot; };\n\n       // Display the elements of the array.\n       Console.WriteLine(&quot;The array contains the following values:&quot;);\n       for (int i = strings.GetLowerBound(0); i &lt;= strings.GetUpperBound(0); i++)\n          Console.WriteLine(&quot;   [{0,2}]: {1}&quot;, i, strings[i]);\n\n       // Search for the first occurrence of the duplicated value.\n       String searchString = &quot;the&quot;;\n       int index = Array.IndexOf(strings, searchString);\n       Console.WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;,\n                         searchString, index);\n \n       // Search for the first occurrence of the duplicated value in the last section of the array.\n       index = Array.IndexOf(strings, searchString, 4);\n       Console.WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; between index 4 and the end is at index {1}.&quot;,\n                         searchString, index);\n \n       // Search for the first occurrence of the duplicated value in a section of the array.\n       int position = index + 1;\n       index = Array.IndexOf(strings, searchString, position, strings.GetUpperBound(0) - position + 1);\n       Console.WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; between index {1} and index {2} is at index {3}.&quot;,\n                         searchString, position, strings.GetUpperBound(0), index);\n    }\n }\n// The example displays the following output:\n//    The array contains the following values:\n//       [ 0]: the\n//       [ 1]: quick\n//       [ 2]: brown\n//       [ 3]: fox\n//       [ 4]: jumps\n//       [ 5]: over\n//       [ 6]: the\n//       [ 7]: lazy\n//       [ 8]: dog\n//       [ 9]: in\n//       [10]: the\n//       [11]: barn\n//    The first occurrence of &quot;the&quot; is at index 0.\n//    The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n//    The first occurrence of &quot;the&quot; between index 7 and index 11 is at index 10.\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.IndexOf Example#1\">Public Module Example\n   Public Sub Main()\n      &#39; Create a string array with 3 elements having the same value.\n      Dim strings() As String = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;,\n                                  &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;,\n                                  &quot;dog&quot;, &quot;in&quot;, &quot;the&quot;, &quot;barn&quot; }\n\n      &#39; Display the values of the array.\n      Console.WriteLine(&quot;The array contains the following values:&quot;)\n      For i As Integer = strings.GetLowerBound(0) To strings.GetUpperBound(0)\n         Console.WriteLine(&quot;   [{0,2}]: {1}&quot;, i, strings(i))\n      Next\n\n      &#39; Search for the first occurrence of the duplicated value.\n      Dim searchString As String = &quot;the&quot;\n      Dim index As Integer = Array.IndexOf(strings, searchString)\n      Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;,\n                        searchString, index)\n        \n      &#39; Search for the first occurrence of the duplicated value in the last section of the array.\n      index = Array.IndexOf(strings, searchString, 4)\n      Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index 4 and the end is at index {1}.&quot;,\n                        searchString, index)\n        \n      &#39; Search for the first occurrence of the duplicated value in a section of the array.\n       Dim position As Integer = index + 1\n       index = Array.IndexOf(strings, searchString, position, strings.GetUpperBound(0) - position + 1)\n       Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index {1} and index {2} is at index {3}.&quot;,\n                         searchString, position, strings.GetUpperBound(0), index)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    The array contains the following values:\n&#39;       [ 0]: the\n&#39;       [ 1]: quick\n&#39;       [ 2]: brown\n&#39;       [ 3]: fox\n&#39;       [ 4]: jumps\n&#39;       [ 5]: over\n&#39;       [ 6]: the\n&#39;       [ 7]: lazy\n&#39;       [ 8]: dog\n&#39;       [ 9]: in\n&#39;       [10]: the\n&#39;       [11]: barn\n&#39;    The first occurrence of &quot;the&quot; is at index 0.\n&#39;    The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n&#39;    The first occurrence of &quot;the&quot; between index 7 and index 11 is at index 10.\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Array.IndexOf Example#1\">using namespace System;\n\nvoid main()\n{\n   // Create a string array with 3 elements having the same value.\n   array&lt;String^&gt;^ strings = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;,\n                               &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;,\n                               &quot;in&quot;, &quot;the&quot;, &quot;barn&quot; };\n\n   // Display the elements of the array.\n   Console::WriteLine(&quot;The array contains the following values:&quot;);\n   for (int i = strings-&gt;GetLowerBound(0); i &lt;= strings-&gt;GetUpperBound(0); i++)\n      Console::WriteLine(&quot;   [{0,2}]: {1}&quot;, i, strings[i]);\n      \n   // Search for the first occurrence of the duplicated value.\n   String^ searchString =  &quot;the&quot;;\n   int index = Array::IndexOf(strings, searchString);\n   Console::WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;,\n                      searchString, index);\n\n   // Search for the first occurrence of the duplicated value in the last section of the array.\n   index = Array::IndexOf( strings, searchString, 4);\n   Console::WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; between index 4 and the end is at index {1}.&quot;,\n                      searchString, index);\n\n   // Search for the first occurrence of the duplicated value in a section of the array.\n   int position = index + 1;\n   index = Array::IndexOf(strings, searchString, position, strings-&gt;GetUpperBound(0) - position + 1);\n   Console::WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; between index {1} and index {2} is at index {3}.&quot;,\n                      searchString, position, strings-&gt;GetUpperBound(0), index);\n}\n// The example displays the following output:\n//    The array contains the following values:\n//       [ 0]: the\n//       [ 1]: quick\n//       [ 2]: brown\n//       [ 3]: fox\n//       [ 4]: jumps\n//       [ 5]: over\n//       [ 6]: the\n//       [ 7]: lazy\n//       [ 8]: dog\n//       [ 9]: in\n//       [10]: the\n//       [11]: barn\n//    The first occurrence of &quot;the&quot; is at index 0.\n//    The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n//    The first occurrence of &quot;the&quot; between index 7 and index 11 is at index 10.\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_IndexOf_System_Array_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(Array,Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int IndexOf (Array array, object value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the search. 0 (zero) is valid in an empty array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the first occurrence of <code>value</code>, if itâ€™s found, within the range of elements in <code>array</code> that extends from <code>startIndex</code> to the last element; otherwise, the lower bound of the array minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method searches a one-dimensional array from the element at index <code>startIndex</code>to the last element. To determine whether <code>value</code> exists in <code>array</code>, the method performs an equality comparison by calling the <code>Equals</code> method of every element until it finds a match. This means that if the element overrides the <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">System.Object.Equals(Object)</a> method, that override is called.  </p>\n<p> Because most arrays have a lower bound of zero, this method generally returns â€“1 if <code>value</code> isnâ€™t found. In the rare case that the lower bound of the array is equal to <a class=\"xref\" href=\"system.int32#System_Int32_MinValue\" data-linktype=\"relative-path\">System.Int32.MinValue</a>(0x80000000) and <code>value</code> isnâ€™t found, this method returns <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a> (0x7FFFFFFF).  </p>\n<p> If <code>startIndex</code> equals <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a>,the method returns -1. If <code>startIndex</code> is greater than <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a>, the method throws an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements from <code>startIndex</code> to the end of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example calls the following three overloads of the <a class=\"xref\" href=\"system.array#System_Array_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to find the index of a string in a string array:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.array#System_Array_IndexOf_System_Array_System_Object_\" data-linktype=\"relative-path\">IndexOf(Array,Object)</a>, to determine the first occurrence of the string &quot;the&quot; in a string array.  </p>\n</li>\n<li><p>IndexOf, to determine the first occurrence of the string &quot;the&quot; in the fourth to the last elements of a string array.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.array#System_Array_IndexOf_System_Array_System_Object_System_Int32_System_Int32_\" data-linktype=\"relative-path\">IndexOf(Array,Object,Int32,Int32)</a>, to determine the first occurrence of the string &quot;the&quot; in a string array from the element that follows the last successful match to the end of the array.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Array.IndexOf Example#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n       // Create a string array with 3 elements having the same value.\n       String[] strings = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;,\n                            &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;, &quot;in&quot;, &quot;the&quot;,\n                            &quot;barn&quot; };\n\n       // Display the elements of the array.\n       Console.WriteLine(&quot;The array contains the following values:&quot;);\n       for (int i = strings.GetLowerBound(0); i &lt;= strings.GetUpperBound(0); i++)\n          Console.WriteLine(&quot;   [{0,2}]: {1}&quot;, i, strings[i]);\n\n       // Search for the first occurrence of the duplicated value.\n       String searchString = &quot;the&quot;;\n       int index = Array.IndexOf(strings, searchString);\n       Console.WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;,\n                         searchString, index);\n \n       // Search for the first occurrence of the duplicated value in the last section of the array.\n       index = Array.IndexOf(strings, searchString, 4);\n       Console.WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; between index 4 and the end is at index {1}.&quot;,\n                         searchString, index);\n \n       // Search for the first occurrence of the duplicated value in a section of the array.\n       int position = index + 1;\n       index = Array.IndexOf(strings, searchString, position, strings.GetUpperBound(0) - position + 1);\n       Console.WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; between index {1} and index {2} is at index {3}.&quot;,\n                         searchString, position, strings.GetUpperBound(0), index);\n    }\n }\n// The example displays the following output:\n//    The array contains the following values:\n//       [ 0]: the\n//       [ 1]: quick\n//       [ 2]: brown\n//       [ 3]: fox\n//       [ 4]: jumps\n//       [ 5]: over\n//       [ 6]: the\n//       [ 7]: lazy\n//       [ 8]: dog\n//       [ 9]: in\n//       [10]: the\n//       [11]: barn\n//    The first occurrence of &quot;the&quot; is at index 0.\n//    The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n//    The first occurrence of &quot;the&quot; between index 7 and index 11 is at index 10.\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.IndexOf Example#1\">Public Module Example\n   Public Sub Main()\n      &#39; Create a string array with 3 elements having the same value.\n      Dim strings() As String = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;,\n                                  &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;,\n                                  &quot;dog&quot;, &quot;in&quot;, &quot;the&quot;, &quot;barn&quot; }\n\n      &#39; Display the values of the array.\n      Console.WriteLine(&quot;The array contains the following values:&quot;)\n      For i As Integer = strings.GetLowerBound(0) To strings.GetUpperBound(0)\n         Console.WriteLine(&quot;   [{0,2}]: {1}&quot;, i, strings(i))\n      Next\n\n      &#39; Search for the first occurrence of the duplicated value.\n      Dim searchString As String = &quot;the&quot;\n      Dim index As Integer = Array.IndexOf(strings, searchString)\n      Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;,\n                        searchString, index)\n        \n      &#39; Search for the first occurrence of the duplicated value in the last section of the array.\n      index = Array.IndexOf(strings, searchString, 4)\n      Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index 4 and the end is at index {1}.&quot;,\n                        searchString, index)\n        \n      &#39; Search for the first occurrence of the duplicated value in a section of the array.\n       Dim position As Integer = index + 1\n       index = Array.IndexOf(strings, searchString, position, strings.GetUpperBound(0) - position + 1)\n       Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index {1} and index {2} is at index {3}.&quot;,\n                         searchString, position, strings.GetUpperBound(0), index)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    The array contains the following values:\n&#39;       [ 0]: the\n&#39;       [ 1]: quick\n&#39;       [ 2]: brown\n&#39;       [ 3]: fox\n&#39;       [ 4]: jumps\n&#39;       [ 5]: over\n&#39;       [ 6]: the\n&#39;       [ 7]: lazy\n&#39;       [ 8]: dog\n&#39;       [ 9]: in\n&#39;       [10]: the\n&#39;       [11]: barn\n&#39;    The first occurrence of &quot;the&quot; is at index 0.\n&#39;    The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n&#39;    The first occurrence of &quot;the&quot; between index 7 and index 11 is at index 10.\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Array.IndexOf Example#1\">using namespace System;\n\nvoid main()\n{\n   // Create a string array with 3 elements having the same value.\n   array&lt;String^&gt;^ strings = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;,\n                               &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;,\n                               &quot;in&quot;, &quot;the&quot;, &quot;barn&quot; };\n\n   // Display the elements of the array.\n   Console::WriteLine(&quot;The array contains the following values:&quot;);\n   for (int i = strings-&gt;GetLowerBound(0); i &lt;= strings-&gt;GetUpperBound(0); i++)\n      Console::WriteLine(&quot;   [{0,2}]: {1}&quot;, i, strings[i]);\n      \n   // Search for the first occurrence of the duplicated value.\n   String^ searchString =  &quot;the&quot;;\n   int index = Array::IndexOf(strings, searchString);\n   Console::WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;,\n                      searchString, index);\n\n   // Search for the first occurrence of the duplicated value in the last section of the array.\n   index = Array::IndexOf( strings, searchString, 4);\n   Console::WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; between index 4 and the end is at index {1}.&quot;,\n                      searchString, index);\n\n   // Search for the first occurrence of the duplicated value in a section of the array.\n   int position = index + 1;\n   index = Array::IndexOf(strings, searchString, position, strings-&gt;GetUpperBound(0) - position + 1);\n   Console::WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; between index {1} and index {2} is at index {3}.&quot;,\n                      searchString, position, strings-&gt;GetUpperBound(0), index);\n}\n// The example displays the following output:\n//    The array contains the following values:\n//       [ 0]: the\n//       [ 1]: quick\n//       [ 2]: brown\n//       [ 3]: fox\n//       [ 4]: jumps\n//       [ 5]: over\n//       [ 6]: the\n//       [ 7]: lazy\n//       [ 8]: dog\n//       [ 9]: in\n//       [10]: the\n//       [11]: barn\n//    The first occurrence of &quot;the&quot; is at index 0.\n//    The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n//    The first occurrence of &quot;the&quot; between index 7 and index 11 is at index 10.\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_IndexOf_System_Array_System_Object_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(Array,Object,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence. The range extends from a specified index for a specified number of elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int IndexOf (Array array, object value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the search. 0 (zero) is valid in an empty array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the first occurrence of <code>value</code>, if itâ€™s found in the <code>array</code> from index <code>startIndex</code> to <code>startIndex</code> + <code>count</code> - 1; otherwise, the lower bound of the array minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method searches the elements of a one-dimensional arrayfrom <code>startIndex</code>to <code>startIndex</code> plus <code>count</code> minus 1, if <code>count</code> is greater than 0. To determine whether <code>value</code> exists in <code>array</code>, the method performs an equality comparison by calling the <code>Equals</code> method of every element until it finds a match. This means that if the element overrides the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method, that override is called.  </p>\n<p> Becausemost arrays have a lower bound of zero, this method generally returns â€“1 when <code>value</code> isnâ€™t found. In the rare case that the lower bound of the array is equal to <a class=\"xref\" href=\"system.int32#System_Int32_MinValue\" data-linktype=\"relative-path\">System.Int32.MinValue</a> (0x80000000) and <code>value</code> isnâ€™t found, this method returns <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a> (0x7FFFFFFF).  </p>\n<p> If <code>startindex</code> equals <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a>, the method returns -1. If <code>startIndex</code> is greater than <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a>, the method throws an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The example calls the following three overloads of the <a class=\"xref\" href=\"system.array#System_Array_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to find the index of a string in a string array:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.array#System_Array_IndexOf_System_Array_System_Object_\" data-linktype=\"relative-path\">IndexOf(Array,Object)</a>, to determine the first occurrence of the string &quot;the&quot; in a string array.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.array#System_Array_IndexOf_System_Array_System_Object_System_Int32_\" data-linktype=\"relative-path\">IndexOf(Array,Object,Int32)</a>, to determine the first occurrence of the string &quot;the&quot; in the fourth to the last elements of a string array.  </p>\n</li>\n<li><p>IndexOf, to determine the first occurrence of the string &quot;the&quot; in a string array from the element that follows the last successful match to the end of the array. To determine the value of the <code>count</code> argument, it subtracts the upper bound of the array from the starting index and adds one.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Array.IndexOf Example#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n       // Create a string array with 3 elements having the same value.\n       String[] strings = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;,\n                            &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;, &quot;in&quot;, &quot;the&quot;,\n                            &quot;barn&quot; };\n\n       // Display the elements of the array.\n       Console.WriteLine(&quot;The array contains the following values:&quot;);\n       for (int i = strings.GetLowerBound(0); i &lt;= strings.GetUpperBound(0); i++)\n          Console.WriteLine(&quot;   [{0,2}]: {1}&quot;, i, strings[i]);\n\n       // Search for the first occurrence of the duplicated value.\n       String searchString = &quot;the&quot;;\n       int index = Array.IndexOf(strings, searchString);\n       Console.WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;,\n                         searchString, index);\n \n       // Search for the first occurrence of the duplicated value in the last section of the array.\n       index = Array.IndexOf(strings, searchString, 4);\n       Console.WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; between index 4 and the end is at index {1}.&quot;,\n                         searchString, index);\n \n       // Search for the first occurrence of the duplicated value in a section of the array.\n       int position = index + 1;\n       index = Array.IndexOf(strings, searchString, position, strings.GetUpperBound(0) - position + 1);\n       Console.WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; between index {1} and index {2} is at index {3}.&quot;,\n                         searchString, position, strings.GetUpperBound(0), index);\n    }\n }\n// The example displays the following output:\n//    The array contains the following values:\n//       [ 0]: the\n//       [ 1]: quick\n//       [ 2]: brown\n//       [ 3]: fox\n//       [ 4]: jumps\n//       [ 5]: over\n//       [ 6]: the\n//       [ 7]: lazy\n//       [ 8]: dog\n//       [ 9]: in\n//       [10]: the\n//       [11]: barn\n//    The first occurrence of &quot;the&quot; is at index 0.\n//    The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n//    The first occurrence of &quot;the&quot; between index 7 and index 11 is at index 10.\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.IndexOf Example#1\">Public Module Example\n   Public Sub Main()\n      &#39; Create a string array with 3 elements having the same value.\n      Dim strings() As String = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;,\n                                  &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;,\n                                  &quot;dog&quot;, &quot;in&quot;, &quot;the&quot;, &quot;barn&quot; }\n\n      &#39; Display the values of the array.\n      Console.WriteLine(&quot;The array contains the following values:&quot;)\n      For i As Integer = strings.GetLowerBound(0) To strings.GetUpperBound(0)\n         Console.WriteLine(&quot;   [{0,2}]: {1}&quot;, i, strings(i))\n      Next\n\n      &#39; Search for the first occurrence of the duplicated value.\n      Dim searchString As String = &quot;the&quot;\n      Dim index As Integer = Array.IndexOf(strings, searchString)\n      Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;,\n                        searchString, index)\n        \n      &#39; Search for the first occurrence of the duplicated value in the last section of the array.\n      index = Array.IndexOf(strings, searchString, 4)\n      Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index 4 and the end is at index {1}.&quot;,\n                        searchString, index)\n        \n      &#39; Search for the first occurrence of the duplicated value in a section of the array.\n       Dim position As Integer = index + 1\n       index = Array.IndexOf(strings, searchString, position, strings.GetUpperBound(0) - position + 1)\n       Console.WriteLine(&quot;The first occurrence of &quot;&quot;{0}&quot;&quot; between index {1} and index {2} is at index {3}.&quot;,\n                         searchString, position, strings.GetUpperBound(0), index)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    The array contains the following values:\n&#39;       [ 0]: the\n&#39;       [ 1]: quick\n&#39;       [ 2]: brown\n&#39;       [ 3]: fox\n&#39;       [ 4]: jumps\n&#39;       [ 5]: over\n&#39;       [ 6]: the\n&#39;       [ 7]: lazy\n&#39;       [ 8]: dog\n&#39;       [ 9]: in\n&#39;       [10]: the\n&#39;       [11]: barn\n&#39;    The first occurrence of &quot;the&quot; is at index 0.\n&#39;    The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n&#39;    The first occurrence of &quot;the&quot; between index 7 and index 11 is at index 10.\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Array.IndexOf Example#1\">using namespace System;\n\nvoid main()\n{\n   // Create a string array with 3 elements having the same value.\n   array&lt;String^&gt;^ strings = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;,\n                               &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;,\n                               &quot;in&quot;, &quot;the&quot;, &quot;barn&quot; };\n\n   // Display the elements of the array.\n   Console::WriteLine(&quot;The array contains the following values:&quot;);\n   for (int i = strings-&gt;GetLowerBound(0); i &lt;= strings-&gt;GetUpperBound(0); i++)\n      Console::WriteLine(&quot;   [{0,2}]: {1}&quot;, i, strings[i]);\n      \n   // Search for the first occurrence of the duplicated value.\n   String^ searchString =  &quot;the&quot;;\n   int index = Array::IndexOf(strings, searchString);\n   Console::WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;,\n                      searchString, index);\n\n   // Search for the first occurrence of the duplicated value in the last section of the array.\n   index = Array::IndexOf( strings, searchString, 4);\n   Console::WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; between index 4 and the end is at index {1}.&quot;,\n                      searchString, index);\n\n   // Search for the first occurrence of the duplicated value in a section of the array.\n   int position = index + 1;\n   index = Array::IndexOf(strings, searchString, position, strings-&gt;GetUpperBound(0) - position + 1);\n   Console::WriteLine(&quot;The first occurrence of \\&quot;{0}\\&quot; between index {1} and index {2} is at index {3}.&quot;,\n                      searchString, position, strings-&gt;GetUpperBound(0), index);\n}\n// The example displays the following output:\n//    The array contains the following values:\n//       [ 0]: the\n//       [ 1]: quick\n//       [ 2]: brown\n//       [ 3]: fox\n//       [ 4]: jumps\n//       [ 5]: over\n//       [ 6]: the\n//       [ 7]: lazy\n//       [ 8]: dog\n//       [ 9]: in\n//       [10]: the\n//       [11]: barn\n//    The first occurrence of &quot;the&quot; is at index 0.\n//    The first occurrence of &quot;the&quot; between index 4 and the end is at index 6.\n//    The first occurrence of &quot;the&quot; between index 7 and index 11 is at index 10.\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_IndexOf__1___0_____0_\">\r\n    \r\n            <a id=\"System_Array_IndexOf_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf&lt;T&gt;(T[],T)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int IndexOf&lt;T&gt; (T[] array, T value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based array to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code> in the entire <code>array</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method searches all the elements of a one-dimensional array for <code>value</code>. To determine whether <code>value</code> exists in <code>array</code>, the method performs an equality comparison by calling the <code>T.Equals</code> method on every element. This means that if <code>T</code> overrides the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method, that override is called.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates all three generic overloads of the <a class=\"xref\" href=\"system.array#System_Array_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The IndexOf(T) method overload searches the array from the beginning, and finds the first occurrence of the string. The [IndexOf<t\\>(T&lt;xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29&gt; method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string. Finally, the [IndexOf&lt;T&gt;(T&lt;xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29&gt; method overload is used to search a range of two entries, beginning at index location two; it returns â€“1 because there are no instances of the search string in that range.  <p>\n<pre><code class=\"lang-cpp\" name=\"Array_IndexOf#1\">using namespace System;\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { &quot;Tyrannosaurus&quot;, \n        &quot;Amargasaurus&quot;,\n        &quot;Mamenchisaurus&quot;,\n        &quot;Brachiosaurus&quot;,\n        &quot;Deinonychus&quot;,\n        &quot;Tyrannosaurus&quot;,\n        &quot;Compsognathus&quot; };\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n        Array::IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;));\n\n    Console::WriteLine(&quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n        Array::IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3));\n\n    Console::WriteLine(&quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 2, 2): {0}&quot;, \n        Array::IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2));\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 0\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 5\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_IndexOf#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = { &quot;Tyrannosaurus&quot;,\n            &quot;Amargasaurus&quot;,\n            &quot;Mamenchisaurus&quot;,\n            &quot;Brachiosaurus&quot;,\n            &quot;Deinonychus&quot;,\n            &quot;Tyrannosaurus&quot;,\n            &quot;Compsognathus&quot; };\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;));\n\n        Console.WriteLine(\n            &quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3));\n\n        Console.WriteLine(\n            &quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 2, 2): {0}&quot;, \n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2));\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 0\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 5\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_IndexOf#1\">Imports System\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { &quot;Tyrannosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Brachiosaurus&quot;, _\n            &quot;Deinonychus&quot;, _\n            &quot;Tyrannosaurus&quot;, _\n            &quot;Compsognathus&quot; }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.IndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;): {0}&quot;, _\n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.IndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;, 3): {0}&quot;, _\n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.IndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;, 2, 2): {0}&quot;, _\n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Deinonychus\n&#39;Tyrannosaurus\n&#39;Compsognathus\n&#39;\n&#39;Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 0\n&#39;\n&#39;Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 5\n&#39;\n&#39;Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2): -1\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_IndexOf__1___0_____0_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_IndexOf_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf&lt;T&gt;(T[],T,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int IndexOf&lt;T&gt; (T[] array, T value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based array to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search. 0 (zero) is valid in an empty array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code> within the range of elements in <code>array</code> that extends from <code>startIndex</code> to the last element, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method searches a one-dimensional array from the element at <code>startIndex</code> to the end of the array. To determine whether <code>value</code> exists in <code>array</code>, the method performs an equality comparison by calling the <code>T.Equals</code> method on every element. This means that if <code>T</code> overrides the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method, that override is called.  </p>\n<p> If <code>startIndex</code> equals <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a>,the method returns -1.If <code>startIndex</code> is greater than <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a>, the method throws an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements from <code>startIndex</code> to the end of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates all three generic overloads of the <a class=\"xref\" href=\"system.array#System_Array_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The [IndexOf<t\\>(T&lt;xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29&gt; method overload searches the array from the beginning, and finds the first occurrence of the string. The IndexOf(T) method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string. Finally, the [IndexOf&lt;T&gt;(T&lt;xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29&gt; method overload is used to search a range of two entries, beginning at index location two; it returns â€“1 because there are no instances of the search string in that range.  <p>\n<pre><code class=\"lang-cpp\" name=\"Array_IndexOf#1\">using namespace System;\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { &quot;Tyrannosaurus&quot;, \n        &quot;Amargasaurus&quot;,\n        &quot;Mamenchisaurus&quot;,\n        &quot;Brachiosaurus&quot;,\n        &quot;Deinonychus&quot;,\n        &quot;Tyrannosaurus&quot;,\n        &quot;Compsognathus&quot; };\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n        Array::IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;));\n\n    Console::WriteLine(&quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n        Array::IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3));\n\n    Console::WriteLine(&quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 2, 2): {0}&quot;, \n        Array::IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2));\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 0\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 5\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_IndexOf#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = { &quot;Tyrannosaurus&quot;,\n            &quot;Amargasaurus&quot;,\n            &quot;Mamenchisaurus&quot;,\n            &quot;Brachiosaurus&quot;,\n            &quot;Deinonychus&quot;,\n            &quot;Tyrannosaurus&quot;,\n            &quot;Compsognathus&quot; };\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;));\n\n        Console.WriteLine(\n            &quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3));\n\n        Console.WriteLine(\n            &quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 2, 2): {0}&quot;, \n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2));\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 0\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 5\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_IndexOf#1\">Imports System\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { &quot;Tyrannosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Brachiosaurus&quot;, _\n            &quot;Deinonychus&quot;, _\n            &quot;Tyrannosaurus&quot;, _\n            &quot;Compsognathus&quot; }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.IndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;): {0}&quot;, _\n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.IndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;, 3): {0}&quot;, _\n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.IndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;, 2, 2): {0}&quot;, _\n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Deinonychus\n&#39;Tyrannosaurus\n&#39;Compsognathus\n&#39;\n&#39;Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 0\n&#39;\n&#39;Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 5\n&#39;\n&#39;Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2): -1\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_IndexOf__1___0_____0_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_IndexOf_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf&lt;T&gt;(T[],T,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index for a specified number of elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int IndexOf&lt;T&gt; (T[] array, T value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based array to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the search. 0 (zero) is valid in an empty array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>value</code> within the range of elements in <code>array</code> that starts at <code>startIndex</code> and contains the number of elements specified in <code>count</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method searchesthe elements of a one-dimensional array from <code>startIndex</code> to <code>startIndex</code> plus <code>count</code> minus 1, if <code>count</code> is greater than 0. To determine whether <code>value</code> exists in <code>array</code>, the method performs an equality comparison by calling the <code>T.Equals</code> method on every element. This means that if <code>T</code> overrides the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method, that override is called.  </p>\n<p> If <code>startIndex</code> equals <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a>, the method returns -1.  If <code>startIndex</code> is greater than <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a>, the method throws an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates all three generic overloads of the <a class=\"xref\" href=\"system.array#System_Array_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The [IndexOf<t\\>(T&lt;xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%29&gt; method overload searches the array from the beginning, and finds the first occurrence of the string. The [IndexOf&lt;T&gt;(T&lt;xref:System.Array.IndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29&gt; method overload is used to search the array beginning with index location 3 and continuing to the end of the array, and finds the second occurrence of the string. Finally, the IndexOf(T)method overload is used to search a range of two entries, beginning at index location two; it returns â€“1 because there are no instances of the search string in that range.  <p>\n<pre><code class=\"lang-cpp\" name=\"Array_IndexOf#1\">using namespace System;\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { &quot;Tyrannosaurus&quot;, \n        &quot;Amargasaurus&quot;,\n        &quot;Mamenchisaurus&quot;,\n        &quot;Brachiosaurus&quot;,\n        &quot;Deinonychus&quot;,\n        &quot;Tyrannosaurus&quot;,\n        &quot;Compsognathus&quot; };\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n        Array::IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;));\n\n    Console::WriteLine(&quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n        Array::IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3));\n\n    Console::WriteLine(&quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 2, 2): {0}&quot;, \n        Array::IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2));\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 0\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 5\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_IndexOf#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = { &quot;Tyrannosaurus&quot;,\n            &quot;Amargasaurus&quot;,\n            &quot;Mamenchisaurus&quot;,\n            &quot;Brachiosaurus&quot;,\n            &quot;Deinonychus&quot;,\n            &quot;Tyrannosaurus&quot;,\n            &quot;Compsognathus&quot; };\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;));\n\n        Console.WriteLine(\n            &quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3));\n\n        Console.WriteLine(\n            &quot;<br>Array.IndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 2, 2): {0}&quot;, \n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2));\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 0\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 5\n\nArray.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_IndexOf#1\">Imports System\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { &quot;Tyrannosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Brachiosaurus&quot;, _\n            &quot;Deinonychus&quot;, _\n            &quot;Tyrannosaurus&quot;, _\n            &quot;Compsognathus&quot; }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.IndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;): {0}&quot;, _\n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.IndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;, 3): {0}&quot;, _\n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.IndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;, 2, 2): {0}&quot;, _\n            Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Deinonychus\n&#39;Tyrannosaurus\n&#39;Compsognathus\n&#39;\n&#39;Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 0\n&#39;\n&#39;Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 5\n&#39;\n&#39;Array.IndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 2, 2): -1\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Initialize\">\r\n    \r\n            <a id=\"System_Array_Initialize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Initialize()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes every element of the value-type <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> by calling the default constructor of the value type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Initialize ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is designed to help compilers support value-type arrays; most users do not need this method. It must not be used on reference-type arrays.  </p>\n<p> If the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is not a value-type <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> or if the value type does not have a default constructor, the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is not modified.  </p>\n<p> The value-type <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> can have any lower bound and any number of dimensions.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> You can use this method only on value types that have constructors; however, value types that are native to C# do not have constructors.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_LastIndexOf_System_Array_System_Object_\">\r\n    \r\n            <a id=\"System_Array_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(Array,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int LastIndexOf (Array array, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the last occurrence of <code>value</code> within the entire <code>array</code>, if found; otherwise, the lower bound of the array minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is searched backward starting at the last element and ending at the first element.  </p>\n<p> The elements are compared to the specified value using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method. If the element type is a nonintrinsic (user-defined) type, the <code>Equals</code> implementation of that type is used.  </p>\n<p> Since most arrays will have a lower bound of zero, this method would generally return â€“1 when <code>value</code> is not found. In the rare case that the lower bound of the array is equal to <a class=\"xref\" href=\"system.int32#System_Int32_MinValue\" data-linktype=\"relative-path\">System.Int32.MinValue</a> and <code>value</code> is not found, this method returns <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a>, which is <code>System.Int32.MinValue - 1</code>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.  </p>\n<p> In the .NET Framework version 2.0, this method uses the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to determine whether the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> specified by the <code>value</code> parameter exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>value</code><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> itself.  </p>\n<p> <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine the index of the last occurrence of a specified element in an array.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Array.LastIndexOf Example#1\">using namespace System;\nvoid PrintIndexAndValues( Array^ myArray );\n\nvoid main()\n{\n   // Creates and initializes a new Array instance with three elements of the same value.\n   Array^ myArray = Array::CreateInstance( String::typeid, 12 );\n   myArray-&gt;SetValue( &quot;the&quot;, 0 );\n   myArray-&gt;SetValue( &quot;quick&quot;, 1 );\n   myArray-&gt;SetValue( &quot;brown&quot;, 2 );\n   myArray-&gt;SetValue( &quot;fox&quot;, 3 );\n   myArray-&gt;SetValue( &quot;jumped&quot;, 4 );\n   myArray-&gt;SetValue( &quot;over&quot;, 5 );\n   myArray-&gt;SetValue( &quot;the&quot;, 6 );\n   myArray-&gt;SetValue( &quot;lazy&quot;, 7 );\n   myArray-&gt;SetValue( &quot;dog&quot;, 8 );\n   myArray-&gt;SetValue( &quot;in&quot;, 9 );\n   myArray-&gt;SetValue( &quot;the&quot;, 10 );\n   myArray-&gt;SetValue( &quot;barn&quot;, 11 );\n\n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The Array instance contains the following values:&quot; );\n   PrintIndexAndValues( myArray );\n\n   // Searches for the last occurrence of the duplicated value.\n   String^ myString =  &quot;the&quot;;\n   int myIndex = Array::LastIndexOf( myArray, myString );\n   Console::WriteLine(  &quot;The last occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n\n   // Searches for the last occurrence of the duplicated value in the first section of the Array.\n   myIndex = Array::LastIndexOf( myArray, myString, 8 );\n   Console::WriteLine(  &quot;The last occurrence of \\&quot;{0}\\&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex );\n\n   // Searches for the last occurrence of the duplicated value in a section of the Array.  \n   // Note that the start index is greater than the end index because the search is done backward.\n   myIndex = Array::LastIndexOf( myArray, myString, 10, 6 );\n   Console::WriteLine(  &quot;The last occurrence of \\&quot;{0}\\&quot; between index 5 and index 10 is at index {1}.&quot;, myString, myIndex );\n}\n\nvoid PrintIndexAndValues( Array^ myArray )\n{\n   for ( int i = myArray-&gt;GetLowerBound( 0 ); i &lt;= myArray-&gt;GetUpperBound( 0 ); i++ )\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray-&gt;GetValue( i ) );\n}\n\n/* \n This code produces the following output.\n \n The Array instance contains the following values:\n     [0]:    the\n     [1]:    quick\n     [2]:    brown\n     [3]:    fox\n     [4]:    jumped\n     [5]:    over\n     [6]:    the\n     [7]:    lazy\n     [8]:    dog\n     [9]:    in\n     [10]:    the\n     [11]:    barn\n The last occurrence of &quot;the&quot; is at index 10.\n The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n The last occurrence of &quot;the&quot; between index 5 and index 10 is at index 10.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.LastIndexOf Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Array with three elements of the same value.\n       Array myArray=Array.CreateInstance( typeof(String), 12 );\n       myArray.SetValue( &quot;the&quot;, 0 );\n       myArray.SetValue( &quot;quick&quot;, 1 );\n       myArray.SetValue( &quot;brown&quot;, 2 );\n       myArray.SetValue( &quot;fox&quot;, 3 );\n       myArray.SetValue( &quot;jumps&quot;, 4 );\n       myArray.SetValue( &quot;over&quot;, 5 );\n       myArray.SetValue( &quot;the&quot;, 6 );\n       myArray.SetValue( &quot;lazy&quot;, 7 );\n       myArray.SetValue( &quot;dog&quot;, 8 );\n       myArray.SetValue( &quot;in&quot;, 9 );\n       myArray.SetValue( &quot;the&quot;, 10 );\n       myArray.SetValue( &quot;barn&quot;, 11 );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The Array contains the following values:&quot; );\n       PrintIndexAndValues( myArray );\n \n       // Searches for the last occurrence of the duplicated value.\n       String myString = &quot;the&quot;;\n       int myIndex = Array.LastIndexOf( myArray, myString );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n \n       // Searches for the last occurrence of the duplicated value in the first section of the Array.\n       myIndex = Array.LastIndexOf( myArray, myString, 8 );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex );\n \n       // Searches for the last occurrence of the duplicated value in a section of the Array.\n       // Note that the start index is greater than the end index because the search is done backward.\n       myIndex = Array.LastIndexOf( myArray, myString, 10, 6 );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between index 5 and index 10 is at index {1}.&quot;, myString, myIndex );\n    }\n \n \n    public static void PrintIndexAndValues( Array myArray )  {\n       for ( int i = myArray.GetLowerBound(0); i &lt;= myArray.GetUpperBound(0); i++ )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray.GetValue( i ) );\n    }\n }\n /* \n This code produces the following output.\n \n The Array contains the following values:\n     [0]:    the\n     [1]:    quick\n     [2]:    brown\n     [3]:    fox\n     [4]:    jumps\n     [5]:    over\n     [6]:    the\n     [7]:    lazy\n     [8]:    dog\n     [9]:    in\n     [10]:    the\n     [11]:    barn\n The last occurrence of &quot;the&quot; is at index 10.\n The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n The last occurrence of &quot;the&quot; between index 5 and index 10 is at index 10.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.LastIndexOf Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Array with three elements of\n        &#39; the same value.\n        Dim myArray As Array = Array.CreateInstance(GetType(String), 12)\n        myArray.SetValue(&quot;the&quot;, 0)\n        myArray.SetValue(&quot;quick&quot;, 1)\n        myArray.SetValue(&quot;brown&quot;, 2)\n        myArray.SetValue(&quot;fox&quot;, 3)\n        myArray.SetValue(&quot;jumps&quot;, 4)\n        myArray.SetValue(&quot;over&quot;, 5)\n        myArray.SetValue(&quot;the&quot;, 6)\n        myArray.SetValue(&quot;lazy&quot;, 7)\n        myArray.SetValue(&quot;dog&quot;, 8)\n        myArray.SetValue(&quot;in&quot;, 9)\n        myArray.SetValue(&quot;the&quot;, 10)\n        myArray.SetValue(&quot;barn&quot;, 11)\n        \n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The Array contains the following values:&quot;)\n        PrintIndexAndValues(myArray)\n        \n        &#39; Searches for the last occurrence of the duplicated value.\n        Dim myString As String = &quot;the&quot;\n        Dim myIndex As Integer = Array.LastIndexOf(myArray, myString)\n        Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, _\n           myString, myIndex)\n        \n        &#39; Searches for the last occurrence of the duplicated value in the first\n        &#39; section of the Array.\n        myIndex = Array.LastIndexOf(myArray, myString, 8)\n        Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; between the start &quot; _\n           + &quot;and index 8 is at index {1}.&quot;, myString, myIndex)\n        \n        &#39; Searches for the last occurrence of the duplicated value in a section\n        &#39; of the Array.  Note that the start index is greater than the end\n        &#39; index because the search is done backward.\n        myIndex = Array.LastIndexOf(myArray, myString, 10, 6)\n        Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; between index 5 &quot; _\n           + &quot;and index 10 is at index {1}.&quot;, myString, myIndex)\n    End Sub\n    \n    \n    Public Shared Sub PrintIndexAndValues(myArray As Array)\n        Dim i As Integer\n        For i = myArray.GetLowerBound(0) To myArray.GetUpperBound(0)\n            Console.WriteLine(ControlChars.Tab + &quot;[{0}]:&quot; + ControlChars.Tab _\n               + &quot;{1}&quot;, i, myArray.GetValue(i))\n        Next i\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The Array contains the following values:\n&#39;     [0]:    the\n&#39;     [1]:    quick\n&#39;     [2]:    brown\n&#39;     [3]:    fox\n&#39;     [4]:    jumps\n&#39;     [5]:    over\n&#39;     [6]:    the\n&#39;     [7]:    lazy\n&#39;     [8]:    dog\n&#39;     [9]:    in\n&#39;     [10]:    the\n&#39;     [11]:    barn\n&#39; The last occurrence of &quot;the&quot; is at index 10.\n&#39; The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n&#39; The last occurrence of &quot;the&quot; between index 5 and index 10 is at index 10. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_LastIndexOf_System_Array_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(Array,Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that extends from the first element to the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int LastIndexOf (Array array, object value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the backward search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the last occurrence of <code>value</code> within the range of elements in <code>array</code> that extends from the first element to <code>startIndex</code>, if found; otherwise, the lower bound of the array minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is searched backward starting at <code>startIndex</code> and ending at the first element.  </p>\n<p> The elements are compared to the specified value using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method. If the element type is a nonintrinsic (user-defined) type, the <code>Equals</code> implementation of that type is used.  </p>\n<p> Since most arrays will have a lower bound of zero, this method would generally return â€“1 when <code>value</code> is not found. In the rare case that the lower bound of the array is equal to <a class=\"xref\" href=\"system.int32#System_Int32_MinValue\" data-linktype=\"relative-path\">System.Int32.MinValue</a> and <code>value</code> is not found, this method returns <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a>, which is <code>System.Int32.MinValue - 1</code>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements from the beginning of <code>array</code> to <code>startIndex</code>.  </p>\n<p> In the .NET Framework version 2.0, this method uses the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to determine whether the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> specified by the <code>value</code> parameter exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>value</code><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> itself.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine the index of the last occurrence of a specified element in an array.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Array.LastIndexOf Example#1\">using namespace System;\nvoid PrintIndexAndValues( Array^ myArray );\n\nvoid main()\n{\n   // Creates and initializes a new Array instance with three elements of the same value.\n   Array^ myArray = Array::CreateInstance( String::typeid, 12 );\n   myArray-&gt;SetValue( &quot;the&quot;, 0 );\n   myArray-&gt;SetValue( &quot;quick&quot;, 1 );\n   myArray-&gt;SetValue( &quot;brown&quot;, 2 );\n   myArray-&gt;SetValue( &quot;fox&quot;, 3 );\n   myArray-&gt;SetValue( &quot;jumped&quot;, 4 );\n   myArray-&gt;SetValue( &quot;over&quot;, 5 );\n   myArray-&gt;SetValue( &quot;the&quot;, 6 );\n   myArray-&gt;SetValue( &quot;lazy&quot;, 7 );\n   myArray-&gt;SetValue( &quot;dog&quot;, 8 );\n   myArray-&gt;SetValue( &quot;in&quot;, 9 );\n   myArray-&gt;SetValue( &quot;the&quot;, 10 );\n   myArray-&gt;SetValue( &quot;barn&quot;, 11 );\n\n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The Array instance contains the following values:&quot; );\n   PrintIndexAndValues( myArray );\n\n   // Searches for the last occurrence of the duplicated value.\n   String^ myString =  &quot;the&quot;;\n   int myIndex = Array::LastIndexOf( myArray, myString );\n   Console::WriteLine(  &quot;The last occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n\n   // Searches for the last occurrence of the duplicated value in the first section of the Array.\n   myIndex = Array::LastIndexOf( myArray, myString, 8 );\n   Console::WriteLine(  &quot;The last occurrence of \\&quot;{0}\\&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex );\n\n   // Searches for the last occurrence of the duplicated value in a section of the Array.  \n   // Note that the start index is greater than the end index because the search is done backward.\n   myIndex = Array::LastIndexOf( myArray, myString, 10, 6 );\n   Console::WriteLine(  &quot;The last occurrence of \\&quot;{0}\\&quot; between index 5 and index 10 is at index {1}.&quot;, myString, myIndex );\n}\n\nvoid PrintIndexAndValues( Array^ myArray )\n{\n   for ( int i = myArray-&gt;GetLowerBound( 0 ); i &lt;= myArray-&gt;GetUpperBound( 0 ); i++ )\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray-&gt;GetValue( i ) );\n}\n\n/* \n This code produces the following output.\n \n The Array instance contains the following values:\n     [0]:    the\n     [1]:    quick\n     [2]:    brown\n     [3]:    fox\n     [4]:    jumped\n     [5]:    over\n     [6]:    the\n     [7]:    lazy\n     [8]:    dog\n     [9]:    in\n     [10]:    the\n     [11]:    barn\n The last occurrence of &quot;the&quot; is at index 10.\n The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n The last occurrence of &quot;the&quot; between index 5 and index 10 is at index 10.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.LastIndexOf Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Array with three elements of the same value.\n       Array myArray=Array.CreateInstance( typeof(String), 12 );\n       myArray.SetValue( &quot;the&quot;, 0 );\n       myArray.SetValue( &quot;quick&quot;, 1 );\n       myArray.SetValue( &quot;brown&quot;, 2 );\n       myArray.SetValue( &quot;fox&quot;, 3 );\n       myArray.SetValue( &quot;jumps&quot;, 4 );\n       myArray.SetValue( &quot;over&quot;, 5 );\n       myArray.SetValue( &quot;the&quot;, 6 );\n       myArray.SetValue( &quot;lazy&quot;, 7 );\n       myArray.SetValue( &quot;dog&quot;, 8 );\n       myArray.SetValue( &quot;in&quot;, 9 );\n       myArray.SetValue( &quot;the&quot;, 10 );\n       myArray.SetValue( &quot;barn&quot;, 11 );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The Array contains the following values:&quot; );\n       PrintIndexAndValues( myArray );\n \n       // Searches for the last occurrence of the duplicated value.\n       String myString = &quot;the&quot;;\n       int myIndex = Array.LastIndexOf( myArray, myString );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n \n       // Searches for the last occurrence of the duplicated value in the first section of the Array.\n       myIndex = Array.LastIndexOf( myArray, myString, 8 );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex );\n \n       // Searches for the last occurrence of the duplicated value in a section of the Array.\n       // Note that the start index is greater than the end index because the search is done backward.\n       myIndex = Array.LastIndexOf( myArray, myString, 10, 6 );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between index 5 and index 10 is at index {1}.&quot;, myString, myIndex );\n    }\n \n \n    public static void PrintIndexAndValues( Array myArray )  {\n       for ( int i = myArray.GetLowerBound(0); i &lt;= myArray.GetUpperBound(0); i++ )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray.GetValue( i ) );\n    }\n }\n /* \n This code produces the following output.\n \n The Array contains the following values:\n     [0]:    the\n     [1]:    quick\n     [2]:    brown\n     [3]:    fox\n     [4]:    jumps\n     [5]:    over\n     [6]:    the\n     [7]:    lazy\n     [8]:    dog\n     [9]:    in\n     [10]:    the\n     [11]:    barn\n The last occurrence of &quot;the&quot; is at index 10.\n The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n The last occurrence of &quot;the&quot; between index 5 and index 10 is at index 10.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.LastIndexOf Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Array with three elements of\n        &#39; the same value.\n        Dim myArray As Array = Array.CreateInstance(GetType(String), 12)\n        myArray.SetValue(&quot;the&quot;, 0)\n        myArray.SetValue(&quot;quick&quot;, 1)\n        myArray.SetValue(&quot;brown&quot;, 2)\n        myArray.SetValue(&quot;fox&quot;, 3)\n        myArray.SetValue(&quot;jumps&quot;, 4)\n        myArray.SetValue(&quot;over&quot;, 5)\n        myArray.SetValue(&quot;the&quot;, 6)\n        myArray.SetValue(&quot;lazy&quot;, 7)\n        myArray.SetValue(&quot;dog&quot;, 8)\n        myArray.SetValue(&quot;in&quot;, 9)\n        myArray.SetValue(&quot;the&quot;, 10)\n        myArray.SetValue(&quot;barn&quot;, 11)\n        \n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The Array contains the following values:&quot;)\n        PrintIndexAndValues(myArray)\n        \n        &#39; Searches for the last occurrence of the duplicated value.\n        Dim myString As String = &quot;the&quot;\n        Dim myIndex As Integer = Array.LastIndexOf(myArray, myString)\n        Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, _\n           myString, myIndex)\n        \n        &#39; Searches for the last occurrence of the duplicated value in the first\n        &#39; section of the Array.\n        myIndex = Array.LastIndexOf(myArray, myString, 8)\n        Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; between the start &quot; _\n           + &quot;and index 8 is at index {1}.&quot;, myString, myIndex)\n        \n        &#39; Searches for the last occurrence of the duplicated value in a section\n        &#39; of the Array.  Note that the start index is greater than the end\n        &#39; index because the search is done backward.\n        myIndex = Array.LastIndexOf(myArray, myString, 10, 6)\n        Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; between index 5 &quot; _\n           + &quot;and index 10 is at index {1}.&quot;, myString, myIndex)\n    End Sub\n    \n    \n    Public Shared Sub PrintIndexAndValues(myArray As Array)\n        Dim i As Integer\n        For i = myArray.GetLowerBound(0) To myArray.GetUpperBound(0)\n            Console.WriteLine(ControlChars.Tab + &quot;[{0}]:&quot; + ControlChars.Tab _\n               + &quot;{1}&quot;, i, myArray.GetValue(i))\n        Next i\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The Array contains the following values:\n&#39;     [0]:    the\n&#39;     [1]:    quick\n&#39;     [2]:    brown\n&#39;     [3]:    fox\n&#39;     [4]:    jumps\n&#39;     [5]:    over\n&#39;     [6]:    the\n&#39;     [7]:    lazy\n&#39;     [8]:    dog\n&#39;     [9]:    in\n&#39;     [10]:    the\n&#39;     [11]:    barn\n&#39; The last occurrence of &quot;the&quot; is at index 10.\n&#39; The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n&#39; The last occurrence of &quot;the&quot; between index 5 and index 10 is at index 10. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_LastIndexOf_System_Array_System_Object_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_LastIndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf(Array,Object,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the specified number of elements and ends at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int LastIndexOf (Array array, object value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of the last occurrence of <code>value</code> within the range of elements in <code>array</code> that contains the number of elements specified in <code>count</code> and ends at <code>startIndex</code>, if found; otherwise, the lower bound of the array minus 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is searched backward starting at <code>startIndex</code> and ending at <code>startIndex</code> minus <code>count</code> plus 1, if <code>count</code> is greater than 0.  </p>\n<p> The elements are compared to the specified value using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method. If the element type is a nonintrinsic (user-defined) type, the<code>Equals</code> implementation of that type is used.  </p>\n<p> Since most arrays will have a lower bound of zero, this method would generally return â€“1 when <code>value</code> is not found. In the rare case that the lower bound of the array is equal to <a class=\"xref\" href=\"system.int32#System_Int32_MinValue\" data-linktype=\"relative-path\">System.Int32.MinValue</a> and <code>value</code> is not found, this method returns <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">System.Int32.MaxValue</a>, which is <code>System.Int32.MinValue - 1</code>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.  </p>\n<p> In the .NET Framework version 2.0, this method uses the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to determine whether the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> specified by the <code>value</code> parameter exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>value</code><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> itself.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine the index of the last occurrence of a specified element in an array. Note that the <a class=\"xref\" href=\"system.array#System_Array_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method is a backward search; therefore, <code>count</code> must be less than or equal to (<code>startIndex</code> minus the lower bound of the array plus 1).  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Array.LastIndexOf Example#1\">using namespace System;\nvoid PrintIndexAndValues( Array^ myArray );\n\nvoid main()\n{\n   // Creates and initializes a new Array instance with three elements of the same value.\n   Array^ myArray = Array::CreateInstance( String::typeid, 12 );\n   myArray-&gt;SetValue( &quot;the&quot;, 0 );\n   myArray-&gt;SetValue( &quot;quick&quot;, 1 );\n   myArray-&gt;SetValue( &quot;brown&quot;, 2 );\n   myArray-&gt;SetValue( &quot;fox&quot;, 3 );\n   myArray-&gt;SetValue( &quot;jumped&quot;, 4 );\n   myArray-&gt;SetValue( &quot;over&quot;, 5 );\n   myArray-&gt;SetValue( &quot;the&quot;, 6 );\n   myArray-&gt;SetValue( &quot;lazy&quot;, 7 );\n   myArray-&gt;SetValue( &quot;dog&quot;, 8 );\n   myArray-&gt;SetValue( &quot;in&quot;, 9 );\n   myArray-&gt;SetValue( &quot;the&quot;, 10 );\n   myArray-&gt;SetValue( &quot;barn&quot;, 11 );\n\n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The Array instance contains the following values:&quot; );\n   PrintIndexAndValues( myArray );\n\n   // Searches for the last occurrence of the duplicated value.\n   String^ myString =  &quot;the&quot;;\n   int myIndex = Array::LastIndexOf( myArray, myString );\n   Console::WriteLine(  &quot;The last occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n\n   // Searches for the last occurrence of the duplicated value in the first section of the Array.\n   myIndex = Array::LastIndexOf( myArray, myString, 8 );\n   Console::WriteLine(  &quot;The last occurrence of \\&quot;{0}\\&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex );\n\n   // Searches for the last occurrence of the duplicated value in a section of the Array.  \n   // Note that the start index is greater than the end index because the search is done backward.\n   myIndex = Array::LastIndexOf( myArray, myString, 10, 6 );\n   Console::WriteLine(  &quot;The last occurrence of \\&quot;{0}\\&quot; between index 5 and index 10 is at index {1}.&quot;, myString, myIndex );\n}\n\nvoid PrintIndexAndValues( Array^ myArray )\n{\n   for ( int i = myArray-&gt;GetLowerBound( 0 ); i &lt;= myArray-&gt;GetUpperBound( 0 ); i++ )\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray-&gt;GetValue( i ) );\n}\n\n/* \n This code produces the following output.\n \n The Array instance contains the following values:\n     [0]:    the\n     [1]:    quick\n     [2]:    brown\n     [3]:    fox\n     [4]:    jumped\n     [5]:    over\n     [6]:    the\n     [7]:    lazy\n     [8]:    dog\n     [9]:    in\n     [10]:    the\n     [11]:    barn\n The last occurrence of &quot;the&quot; is at index 10.\n The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n The last occurrence of &quot;the&quot; between index 5 and index 10 is at index 10.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.LastIndexOf Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Array with three elements of the same value.\n       Array myArray=Array.CreateInstance( typeof(String), 12 );\n       myArray.SetValue( &quot;the&quot;, 0 );\n       myArray.SetValue( &quot;quick&quot;, 1 );\n       myArray.SetValue( &quot;brown&quot;, 2 );\n       myArray.SetValue( &quot;fox&quot;, 3 );\n       myArray.SetValue( &quot;jumps&quot;, 4 );\n       myArray.SetValue( &quot;over&quot;, 5 );\n       myArray.SetValue( &quot;the&quot;, 6 );\n       myArray.SetValue( &quot;lazy&quot;, 7 );\n       myArray.SetValue( &quot;dog&quot;, 8 );\n       myArray.SetValue( &quot;in&quot;, 9 );\n       myArray.SetValue( &quot;the&quot;, 10 );\n       myArray.SetValue( &quot;barn&quot;, 11 );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The Array contains the following values:&quot; );\n       PrintIndexAndValues( myArray );\n \n       // Searches for the last occurrence of the duplicated value.\n       String myString = &quot;the&quot;;\n       int myIndex = Array.LastIndexOf( myArray, myString );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; is at index {1}.&quot;, myString, myIndex );\n \n       // Searches for the last occurrence of the duplicated value in the first section of the Array.\n       myIndex = Array.LastIndexOf( myArray, myString, 8 );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between the start and index 8 is at index {1}.&quot;, myString, myIndex );\n \n       // Searches for the last occurrence of the duplicated value in a section of the Array.\n       // Note that the start index is greater than the end index because the search is done backward.\n       myIndex = Array.LastIndexOf( myArray, myString, 10, 6 );\n       Console.WriteLine( &quot;The last occurrence of \\&quot;{0}\\&quot; between index 5 and index 10 is at index {1}.&quot;, myString, myIndex );\n    }\n \n \n    public static void PrintIndexAndValues( Array myArray )  {\n       for ( int i = myArray.GetLowerBound(0); i &lt;= myArray.GetUpperBound(0); i++ )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray.GetValue( i ) );\n    }\n }\n /* \n This code produces the following output.\n \n The Array contains the following values:\n     [0]:    the\n     [1]:    quick\n     [2]:    brown\n     [3]:    fox\n     [4]:    jumps\n     [5]:    over\n     [6]:    the\n     [7]:    lazy\n     [8]:    dog\n     [9]:    in\n     [10]:    the\n     [11]:    barn\n The last occurrence of &quot;the&quot; is at index 10.\n The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n The last occurrence of &quot;the&quot; between index 5 and index 10 is at index 10.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.LastIndexOf Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Array with three elements of\n        &#39; the same value.\n        Dim myArray As Array = Array.CreateInstance(GetType(String), 12)\n        myArray.SetValue(&quot;the&quot;, 0)\n        myArray.SetValue(&quot;quick&quot;, 1)\n        myArray.SetValue(&quot;brown&quot;, 2)\n        myArray.SetValue(&quot;fox&quot;, 3)\n        myArray.SetValue(&quot;jumps&quot;, 4)\n        myArray.SetValue(&quot;over&quot;, 5)\n        myArray.SetValue(&quot;the&quot;, 6)\n        myArray.SetValue(&quot;lazy&quot;, 7)\n        myArray.SetValue(&quot;dog&quot;, 8)\n        myArray.SetValue(&quot;in&quot;, 9)\n        myArray.SetValue(&quot;the&quot;, 10)\n        myArray.SetValue(&quot;barn&quot;, 11)\n        \n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The Array contains the following values:&quot;)\n        PrintIndexAndValues(myArray)\n        \n        &#39; Searches for the last occurrence of the duplicated value.\n        Dim myString As String = &quot;the&quot;\n        Dim myIndex As Integer = Array.LastIndexOf(myArray, myString)\n        Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, _\n           myString, myIndex)\n        \n        &#39; Searches for the last occurrence of the duplicated value in the first\n        &#39; section of the Array.\n        myIndex = Array.LastIndexOf(myArray, myString, 8)\n        Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; between the start &quot; _\n           + &quot;and index 8 is at index {1}.&quot;, myString, myIndex)\n        \n        &#39; Searches for the last occurrence of the duplicated value in a section\n        &#39; of the Array.  Note that the start index is greater than the end\n        &#39; index because the search is done backward.\n        myIndex = Array.LastIndexOf(myArray, myString, 10, 6)\n        Console.WriteLine(&quot;The last occurrence of &quot;&quot;{0}&quot;&quot; between index 5 &quot; _\n           + &quot;and index 10 is at index {1}.&quot;, myString, myIndex)\n    End Sub\n    \n    \n    Public Shared Sub PrintIndexAndValues(myArray As Array)\n        Dim i As Integer\n        For i = myArray.GetLowerBound(0) To myArray.GetUpperBound(0)\n            Console.WriteLine(ControlChars.Tab + &quot;[{0}]:&quot; + ControlChars.Tab _\n               + &quot;{1}&quot;, i, myArray.GetValue(i))\n        Next i\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The Array contains the following values:\n&#39;     [0]:    the\n&#39;     [1]:    quick\n&#39;     [2]:    brown\n&#39;     [3]:    fox\n&#39;     [4]:    jumps\n&#39;     [5]:    over\n&#39;     [6]:    the\n&#39;     [7]:    lazy\n&#39;     [8]:    dog\n&#39;     [9]:    in\n&#39;     [10]:    the\n&#39;     [11]:    barn\n&#39; The last occurrence of &quot;the&quot; is at index 10.\n&#39; The last occurrence of &quot;the&quot; between the start and index 8 is at index 6.\n&#39; The last occurrence of &quot;the&quot; between index 5 and index 10 is at index 10. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_LastIndexOf__1___0_____0_\">\r\n    \r\n            <a id=\"System_Array_LastIndexOf_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf&lt;T&gt;(T[],T)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the index of the last occurrence within the entire <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int LastIndexOf&lt;T&gt; (T[] array, T value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code> within the entire <code>array</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is searched backward starting at the last element and ending at the first element.  </p>\n<p> The elements are compared to the specified value using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method. If the element type is a nonintrinsic (user-defined) type, the <code>Equals</code> implementation of that type is used.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates all three generic overloads of the <a class=\"xref\" href=\"system.array#System_Array_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The LastIndexOf(T) method overload searches the entire array from the end, and finds the second occurrence of the string. The [LastIndexOf<t\\>(T&lt;xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29&gt; method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string. Finally, the [LastIndexOf&lt;T&gt;(T&lt;xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29&gt; method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns â€“1 because there are no instances of the search string in that range.  <p>\n<pre><code class=\"lang-cs\" name=\"Array_LastIndexOf#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = { &quot;Tyrannosaurus&quot;,\n            &quot;Amargasaurus&quot;,\n            &quot;Mamenchisaurus&quot;,\n            &quot;Brachiosaurus&quot;,\n            &quot;Deinonychus&quot;,\n            &quot;Tyrannosaurus&quot;,\n            &quot;Compsognathus&quot; };\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;));\n\n        Console.WriteLine(\n            &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3));\n\n        Console.WriteLine(\n            &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 4, 4): {0}&quot;, \n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4));\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 5\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 0\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_LastIndexOf#1\">Imports System\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { &quot;Tyrannosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Brachiosaurus&quot;, _\n            &quot;Deinonychus&quot;, _\n            &quot;Tyrannosaurus&quot;, _\n            &quot;Compsognathus&quot; }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.LastIndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;): {0}&quot;, _\n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.LastIndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;, 3): {0}&quot;, _\n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.LastIndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;, 4, 4): {0}&quot;, _\n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Deinonychus\n&#39;Tyrannosaurus\n&#39;Compsognathus\n&#39;\n&#39;Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 5\n&#39;\n&#39;Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 0\n&#39;\n&#39;Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4): -1\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_LastIndexOf#1\">using namespace System;\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { &quot;Tyrannosaurus&quot;, \n        &quot;Amargasaurus&quot;,\n        &quot;Mamenchisaurus&quot;,\n        &quot;Brachiosaurus&quot;,\n        &quot;Deinonychus&quot;,\n        &quot;Tyrannosaurus&quot;,\n        &quot;Compsognathus&quot; };\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(\n        &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n        Array::LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;));\n\n    Console::WriteLine(\n        &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n        Array::LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3));\n\n    Console::WriteLine(\n        &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 4, 4): {0}&quot;, \n        Array::LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4));\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 5\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 0\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4): -1\n */\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_LastIndexOf__1___0_____0_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_LastIndexOf_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf&lt;T&gt;(T[],T,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that extends from the first element to the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int LastIndexOf&lt;T&gt; (T[] array, T value, int startIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code> within the range of elements in <code>array</code> that extends from the first element to <code>startIndex</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is searched backward starting at <code>startIndex</code> and ending at the first element.  </p>\n<p> The elements are compared to the specified value using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method. If the element type is a nonintrinsic (user-defined) type, the <code>Equals</code> implementation of that type is used.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements from the beginning of <code>array</code> to <code>startIndex</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates all three generic overloads of the <a class=\"xref\" href=\"system.array#System_Array_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The [LastIndexOf<t\\>(T&lt;xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29&gt; method overload searches the entire array from the end, and finds the second occurrence of the string. The LastIndexOf(T) method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string. Finally, the [LastIndexOf&lt;T&gt;(T&lt;xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%2CSystem.Int32%29&gt; method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns â€“1 because there are no instances of the search string in that range.  <p>\n<pre><code class=\"lang-cs\" name=\"Array_LastIndexOf#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = { &quot;Tyrannosaurus&quot;,\n            &quot;Amargasaurus&quot;,\n            &quot;Mamenchisaurus&quot;,\n            &quot;Brachiosaurus&quot;,\n            &quot;Deinonychus&quot;,\n            &quot;Tyrannosaurus&quot;,\n            &quot;Compsognathus&quot; };\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;));\n\n        Console.WriteLine(\n            &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3));\n\n        Console.WriteLine(\n            &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 4, 4): {0}&quot;, \n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4));\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 5\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 0\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_LastIndexOf#1\">Imports System\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { &quot;Tyrannosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Brachiosaurus&quot;, _\n            &quot;Deinonychus&quot;, _\n            &quot;Tyrannosaurus&quot;, _\n            &quot;Compsognathus&quot; }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.LastIndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;): {0}&quot;, _\n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.LastIndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;, 3): {0}&quot;, _\n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.LastIndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;, 4, 4): {0}&quot;, _\n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Deinonychus\n&#39;Tyrannosaurus\n&#39;Compsognathus\n&#39;\n&#39;Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 5\n&#39;\n&#39;Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 0\n&#39;\n&#39;Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4): -1\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_LastIndexOf#1\">using namespace System;\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { &quot;Tyrannosaurus&quot;, \n        &quot;Amargasaurus&quot;,\n        &quot;Mamenchisaurus&quot;,\n        &quot;Brachiosaurus&quot;,\n        &quot;Deinonychus&quot;,\n        &quot;Tyrannosaurus&quot;,\n        &quot;Compsognathus&quot; };\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(\n        &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n        Array::LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;));\n\n    Console::WriteLine(\n        &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n        Array::LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3));\n\n    Console::WriteLine(\n        &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 4, 4): {0}&quot;, \n        Array::LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4));\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 5\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 0\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4): -1\n */\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_LastIndexOf__1___0_____0_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_LastIndexOf_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastIndexOf&lt;T&gt;(T[],T,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the specified number of elements and ends at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int LastIndexOf&lt;T&gt; (T[] array, T value, int startIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based starting index of the backward search.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to search.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the last occurrence of <code>value</code> within the range of elements in <code>array</code> that contains the number of elements specified in <code>count</code> and ends at <code>startIndex</code>, if found; otherwise, â€“1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>startIndex</code> is outside the range of valid indexes for <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is searched backward starting at <code>startIndex</code> and ending at <code>startIndex</code> minus <code>count</code> plus 1, if <code>count</code> is greater than 0.  </p>\n<p> The elements are compared to the specified value using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method. If the element type is a nonintrinsic (user-defined) type, the <code>Equals</code> implementation of that type is used.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates all three generic overloads of the <a class=\"xref\" href=\"system.array#System_Array_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a> method. An array of strings is created, with one entry that appears twice, at index location 0 and index location 5. The [LastIndexOf<t\\>(T&lt;xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%29&gt; method overload searches the entire array from the end, and finds the second occurrence of the string. The [LastIndexOf&lt;T&gt;(T&lt;xref:System.Array.LastIndexOf%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Int32%29&gt; method overload is used to search the array backward beginning with index location 3 and continuing to the beginning of the array, and finds the first occurrence of the string. Finally, the LastIndexOf(T) method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns â€“1 because there are no instances of the search string in that range.  <p>\n<pre><code class=\"lang-cs\" name=\"Array_LastIndexOf#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = { &quot;Tyrannosaurus&quot;,\n            &quot;Amargasaurus&quot;,\n            &quot;Mamenchisaurus&quot;,\n            &quot;Brachiosaurus&quot;,\n            &quot;Deinonychus&quot;,\n            &quot;Tyrannosaurus&quot;,\n            &quot;Compsognathus&quot; };\n\n        Console.WriteLine();\n        foreach(string dinosaur in dinosaurs)\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(\n            &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;));\n\n        Console.WriteLine(\n            &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3));\n\n        Console.WriteLine(\n            &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 4, 4): {0}&quot;, \n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4));\n    }\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 5\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 0\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4): -1\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_LastIndexOf#1\">Imports System\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { &quot;Tyrannosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Brachiosaurus&quot;, _\n            &quot;Deinonychus&quot;, _\n            &quot;Tyrannosaurus&quot;, _\n            &quot;Compsognathus&quot; }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.LastIndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;): {0}&quot;, _\n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.LastIndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;, 3): {0}&quot;, _\n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3))\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Array.LastIndexOf(dinosaurs, &quot;&quot;Tyrannosaurus&quot;&quot;, 4, 4): {0}&quot;, _\n            Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4))\n\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Tyrannosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Brachiosaurus\n&#39;Deinonychus\n&#39;Tyrannosaurus\n&#39;Compsognathus\n&#39;\n&#39;Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 5\n&#39;\n&#39;Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 0\n&#39;\n&#39;Array.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4): -1\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_LastIndexOf#1\">using namespace System;\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { &quot;Tyrannosaurus&quot;, \n        &quot;Amargasaurus&quot;,\n        &quot;Mamenchisaurus&quot;,\n        &quot;Brachiosaurus&quot;,\n        &quot;Deinonychus&quot;,\n        &quot;Tyrannosaurus&quot;,\n        &quot;Compsognathus&quot; };\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs )\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(\n        &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;): {0}&quot;, \n        Array::LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;));\n\n    Console::WriteLine(\n        &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 3): {0}&quot;, \n        Array::LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3));\n\n    Console::WriteLine(\n        &quot;<br>Array.LastIndexOf(dinosaurs, \\&quot;Tyrannosaurus\\&quot;, 4, 4): {0}&quot;, \n        Array::LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4));\n}\n\n/* This code example produces the following output:\n\nTyrannosaurus\nAmargasaurus\nMamenchisaurus\nBrachiosaurus\nDeinonychus\nTyrannosaurus\nCompsognathus\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;): 5\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 3): 0\n\nArray.LastIndexOf(dinosaurs, &quot;Tyrannosaurus&quot;, 4, 4): -1\n */\n</code></pre></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Resize__1___0____System_Int32_\">\r\n    \r\n            <a id=\"System_Array_Resize_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Resize&lt;T&gt;(T[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Changes the number of elements of a one-dimensional array to the specified new size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Resize&lt;T&gt; (ref T[] array, int newSize);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based array to resize, or <code>null</code> to create a new array with the specified size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newSize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the new array.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>newSize</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method allocates a new array with the specified size, copies elements from the old array to the new one, and then replaces the old array with the new one.<code>array</code> must be a one-dimensional array.  </p>\n<p> If <code>array</code> is <code>null</code>, this method creates a new array with the specified size.  </p>\n<p> If <code>newSize</code> is greater than the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of the old array, a new array is allocated and all the elements are copied from the old array to the new one.  If <code>newSize</code> is less than the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of the old array, a new array is allocated and elements are copied from the old array to the new one until the new one is filled; the rest of the elements in the old array are ignored.  If <code>newSize</code> is equal to the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of the old array, this method does nothing.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>newSize</code>.  </p>\n<p> The Resize(T) method resizes a one-dimensional array only. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> class does not include a method for resizing multi-dimensional arrays. To do this, you must either provide your own code or call a special-purpose method in a third-party library. The following code illustrates one possible implementation for a method that resizes an array of <em>n</em> dimensions.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Array.Resize#2\">Module Example\n   Public Sub Main()\n      Dim arr(9, 1) As Integer\n      For n1 As Integer = 0 To arr.GetUpperBound(0)\n         arr(n1, 0) = n1\n         arr(n1, 1) = n1 * 2\n      Next \n\n      &#39; Make a 2-D array larger in the first dimension.\n      arr = CType(ResizeArray(arr, { 12, 2} ), Integer(,))\n      For ctr = 0 To arr.GetUpperBound(0)\n         Console.WriteLine(&quot;{0}: {1}, {2}&quot;, ctr, arr(ctr, 0), arr(ctr, 1))\n      Next\n      Console.WriteLine()\n      \n      &#39; Make a 2-D array smaller in the first dimension.\n      arr = CType(ResizeArray(arr, { 2, 2} ), Integer(,))\n      For ctr = 0 To arr.GetUpperBound(0)\n         Console.WriteLine(&quot;{0}: {1}, {2}&quot;, ctr, arr(ctr, 0), arr(ctr, 1))\n      Next\n   End Sub\n\n   Private Function ResizeArray(arr As Array, newSizes() As Integer) As Array\n      If newSizes.Length &lt;&gt; arr.Rank Then\n         Throw New ArgumentException(&quot;arr must have the same number of dimensions &quot; +\n                                     &quot;as there are elements in newSizes&quot;, &quot;newSizes&quot;) \n      End If \n\n      Dim temp As Array = Array.CreateInstance(arr.GetType().GetElementType(), newSizes)\n      Dim length As Integer = If(arr.Length &lt;= temp.Length, arr.Length, temp.Length )\n      Array.ConstrainedCopy(arr, 0, temp, 0, length)\n      Return temp\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       0: 0, 0\n&#39;       1: 1, 2\n&#39;       2: 2, 4\n&#39;       3: 3, 6\n&#39;       4: 4, 8\n&#39;       5: 5, 10\n&#39;       6: 6, 12\n&#39;       7: 7, 14\n&#39;       8: 8, 16\n&#39;       9: 9, 18\n&#39;       10: 0, 0\n&#39;       11: 0, 0\n&#39;       \n&#39;       0: 0, 0\n&#39;       1: 1, 2\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.Resize#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int[,] arr = new int[10,2];\n      for (int n1 = 0; n1 &lt;= arr.GetUpperBound(0); n1++) {\n         arr[n1, 0] = n1;\n         arr[n1, 1] = n1 * 2;\n      } \n\n      // Make a 2-D array larger in the first dimension.\n      arr = (int[,]) ResizeArray(arr, new int[] { 12, 2} );\n      for (int ctr = 0; ctr &lt;= arr.GetUpperBound(0); ctr++) \n         Console.WriteLine(&quot;{0}: {1}, {2}&quot;, ctr, arr[ctr, 0], arr[ctr, 1]);\n      Console.WriteLine();\n\n\n      // Make a 2-D array smaller in the first dimension.\n      arr = (int[,]) ResizeArray(arr, new int[] { 2, 2} );\n      for (int ctr = 0; ctr &lt;= arr.GetUpperBound(0); ctr++) \n         Console.WriteLine(&quot;{0}: {1}, {2}&quot;, ctr, arr[ctr, 0], arr[ctr, 1]);\n   }\n\n   private static Array ResizeArray(Array arr, int[] newSizes)\n   {\n      if (newSizes.Length != arr.Rank)\n         throw new ArgumentException(&quot;arr must have the same number of dimensions &quot; +\n                                     &quot;as there are elements in newSizes&quot;, &quot;newSizes&quot;); \n\n      var temp = Array.CreateInstance(arr.GetType().GetElementType(), newSizes);\n      int length = arr.Length &lt;= temp.Length ? arr.Length : temp.Length;\n      Array.ConstrainedCopy(arr, 0, temp, 0, length);\n      return temp;\n   }   \n}\n// The example displays the following output:\n//       0: 0, 0\n//       1: 1, 2\n//       2: 2, 4\n//       3: 3, 6\n//       4: 4, 8\n//       5: 5, 10\n//       6: 6, 12\n//       7: 7, 14\n//       8: 8, 16\n//       9: 9, 18\n//       10: 0, 0\n//       11: 0, 0\n//       \n//       0: 0, 0\n//       1: 1, 2\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how resizing affects the array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Array.Resize#1\">Imports System\n\nPublic Class SamplesArray\n\n    Public Shared Sub Main()\n\n        &#39; Create and initialize a new string array.\n        Dim myArr As String() =  {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, _\n            &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;}\n\n        &#39; Display the values of the array.\n        Console.WriteLine( _\n            &quot;The string array initially contains the following values:&quot;)\n        PrintIndexAndValues(myArr)\n\n        &#39; Resize the array to a bigger size (five elements larger).\n        Array.Resize(myArr, myArr.Length + 5)\n\n        &#39; Display the values of the array.\n        Console.WriteLine(&quot;After resizing to a larger size, &quot;)\n        Console.WriteLine(&quot;the string array contains the following values:&quot;)\n        PrintIndexAndValues(myArr)\n\n        &#39; Resize the array to a smaller size (four elements).\n        Array.Resize(myArr, 4)\n\n        &#39; Display the values of the array.\n        Console.WriteLine(&quot;After resizing to a smaller size, &quot;)\n        Console.WriteLine(&quot;the string array contains the following values:&quot;)\n        PrintIndexAndValues(myArr)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintIndexAndValues(myArr() As String)\n        Dim i As Integer\n        For i = 0 To myArr.Length - 1\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, myArr(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\nEnd Class &#39;SamplesArray\n\n&#39;This code produces the following output.\n&#39;\n&#39;The string array initially contains the following values:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;   [7] : lazy\n&#39;   [8] : dog\n&#39;\n&#39;After resizing to a larger size, \n&#39;the string array contains the following values:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n&#39;   [4] : jumps\n&#39;   [5] : over\n&#39;   [6] : the\n&#39;   [7] : lazy\n&#39;   [8] : dog\n&#39;   [9] :\n&#39;   [10] :\n&#39;   [11] :\n&#39;   [12] :\n&#39;   [13] :\n&#39;\n&#39;After resizing to a smaller size, \n&#39;the string array contains the following values:\n&#39;   [0] : The\n&#39;   [1] : quick\n&#39;   [2] : brown\n&#39;   [3] : fox\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.Resize#1\">using System;\n\npublic class SamplesArray  \n{\n    public static void Main()  {\n \n        // Create and initialize a new string array.\n        String[] myArr = {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, \n            &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;};\n \n        // Display the values of the array.\n        Console.WriteLine( \n            &quot;The string array initially contains the following values:&quot;);\n        PrintIndexAndValues(myArr);\n\n        // Resize the array to a bigger size (five elements larger).\n        Array.Resize(ref myArr, myArr.Length + 5);\n\n        // Display the values of the array.\n        Console.WriteLine(&quot;After resizing to a larger size, &quot;);\n        Console.WriteLine(&quot;the string array contains the following values:&quot;);\n        PrintIndexAndValues(myArr);\n\n        // Resize the array to a smaller size (four elements).\n        Array.Resize(ref myArr, 4);\n\n        // Display the values of the array.\n        Console.WriteLine(&quot;After resizing to a smaller size, &quot;);\n        Console.WriteLine(&quot;the string array contains the following values:&quot;);\n        PrintIndexAndValues(myArr);\n    }\n\n    public static void PrintIndexAndValues(String[] myArr)  {\n        for(int i = 0; i &lt; myArr.Length; i++)  \n        {\n            Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, myArr[i]);\n        }\n        Console.WriteLine();\n    }\n}\n\n/* \nThis code produces the following output.\n\nThe string array initially contains the following values:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter resizing to a larger size, \nthe string array contains the following values:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n   [9] :\n   [10] :\n   [11] :\n   [12] :\n   [13] :\n\nAfter resizing to a smaller size, \nthe string array contains the following values:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Array.Resize#1\">using namespace System;\nstatic void PrintIndexAndValues(array&lt;String^&gt;^myArr)\n{\n    for(int i = 0; i &lt; myArr-&gt;Length; i++)\n    {\n       Console::WriteLine(L&quot;   [{0}] : {1}&quot;, i, myArr[i]);\n    }\n    Console::WriteLine();\n}\n\nint main()\n{\n   \n    // Create and initialize a new string array.\n    array&lt;String^&gt;^myArr = {L&quot;The&quot;, L&quot;quick&quot;, L&quot;brown&quot;, L&quot;fox&quot;,\n        L&quot;jumps&quot;, L&quot;over&quot;, L&quot;the&quot;, L&quot;lazy&quot;, L&quot;dog&quot;};\n   \n    // Display the values of the array.\n    Console::WriteLine( \n        L&quot;The string array initially contains the following values:&quot;);\n    PrintIndexAndValues(myArr);\n   \n    // Resize the array to a bigger size (five elements larger).\n    Array::Resize(myArr, myArr-&gt;Length + 5);\n   \n    // Display the values of the array.\n    Console::WriteLine(L&quot;After resizing to a larger size, &quot;);\n    Console::WriteLine(L&quot;the string array contains the following values:&quot;);\n    PrintIndexAndValues(myArr);\n   \n    // Resize the array to a smaller size (four elements).\n    Array::Resize(myArr, 4);\n   \n    // Display the values of the array.\n    Console::WriteLine(L&quot;After resizing to a smaller size, &quot;);\n    Console::WriteLine(L&quot;the string array contains the following values:&quot;);\n    PrintIndexAndValues(myArr);\n    return 1;\n}\n\n/* \nThis code produces the following output.\n\nThe string array initially contains the following values:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter resizing to a larger size, \nthe string array contains the following values:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n   [9] :\n   [10] :\n   [11] :\n   [12] :\n   [13] :\n\nAfter resizing to a smaller size, \nthe string array contains the following values:\n   [0] : The\n   [1] : quick\n   [2] : brown\n   [3] : fox\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Reverse_System_Array_\">\r\n    \r\n            <a id=\"System_Array_Reverse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reverse(Array)</div>        \r\n          </div>\r\n    \r\n            <p>Reverses the sequence of the elements in the entire one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Reverse (Array array);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to reverse.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After a call to this method, the element at <code>myArray[i]</code>, where <code>i</code> is any index in the array, moves to <code>myArray[j]</code>, where <code>j</code> equals <code>(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1</code>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.  </p>\n<p> As the following example shows, the Reverse method can be used to reverse a jagged array. It initializes a jagged array with one element for each month of the current year in the current culture&#39;s calendar. Each element contains an array with as many elements as that month has days. The example displays the contents of the array, calls the Reverse method, and then displays the contents of the reversed array.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Array.Reverse#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      int nMonths = DateTimeFormatInfo.CurrentInfo.Calendar.GetMonthsInYear(DateTime.Now.Year);\n      int[][] months = new int[nMonths][];\n\n      // Populate elements with number of days in month.\n      for (int ctr = 0; ctr &lt;= months.GetUpperBound(0); ctr++) {\n         int daysInMonth = DateTime.DaysInMonth(DateTime.Now.Year, ctr + 1);\n         months[ctr] = new int[daysInMonth] ;\n         for (int ctr2 = 1; ctr2 &lt;= daysInMonth; ctr2++)\n            months[ctr][ctr2 - 1] = ctr2;\n\n      }\n\n      foreach (var month in months) {\n         foreach (var day in month)\n            Console.Write(&quot;{0} &quot;, day);\n\n         Console.WriteLine();\n      }\n      Console.WriteLine();\n               \n      Console.WriteLine(&quot;About to reverse array.\\n&quot;);\n      Array.Reverse(months);\n\n      foreach (var month in months) {\n         foreach (var day in month)\n            Console.Write(&quot;{0} &quot;, day);\n\n         Console.WriteLine();\n      }\n   }\n}\n// The example displays output similar to the following:\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    \n//    About to reverse array.\n//    \n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n//    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Reverse#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim nMonths As Integer = DateTimeFormatInfo.CurrentInfo.Calendar.GetMonthsInYear(Date.Now.Year)\n      Dim months()() As Integer = New Integer(nMonths - 1)() {}\n\n      &#39; Populate elements with number of days in month.\n      For ctr As Integer = 0 To months.GetUpperBound(0)\n         Dim daysInMonth As Integer = DateTime.DaysInMonth(Date.Now.Year, ctr + 1)\n         months(ctr) = New Integer(daysInMonth - 1) {}\n         For ctr2 As Integer = 1 To daysInMonth\n            months(ctr)(ctr2 - 1) = ctr2\n         Next\n      Next\n\n      For Each _month In months\n         For each _day In _month\n            Console.Write(&quot;{0} &quot;, _day)\n         Next   \n         Console.WriteLine()\n      Next\n      Console.WriteLine()\n               \n      Console.WriteLine(&quot;About to reverse array.&quot;)\n      Console.WriteLine()\n      Array.Reverse(months)\n\n      For Each _month In months\n         For each _day In _month\n            Console.Write(&quot;{0} &quot;, _day)\n         Next   \n         Console.WriteLine()\n      Next\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    \n&#39;    About to reverse array.\n&#39;    \n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n&#39;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to reverse the sort of the values in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Array.Reverse Example#1\">using namespace System;\nvoid PrintIndexAndValues( Array^ myArray );\nvoid main()\n{\n   // Creates and initializes a new Array instance.\n   Array^ myArray = Array::CreateInstance( String::typeid, 9 );\n   myArray-&gt;SetValue( &quot;The&quot;, 0 );\n   myArray-&gt;SetValue( &quot;quick&quot;, 1 );\n   myArray-&gt;SetValue( &quot;brown&quot;, 2 );\n   myArray-&gt;SetValue( &quot;fox&quot;, 3 );\n   myArray-&gt;SetValue( &quot;jumped&quot;, 4 );\n   myArray-&gt;SetValue( &quot;over&quot;, 5 );\n   myArray-&gt;SetValue( &quot;the&quot;, 6 );\n   myArray-&gt;SetValue( &quot;lazy&quot;, 7 );\n   myArray-&gt;SetValue( &quot;dog&quot;, 8 );\n\n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The Array instance initially contains the following values:&quot; );\n   PrintIndexAndValues( myArray );\n\n   // Reverses the sort of the values of the Array.\n   Array::Reverse( myArray );\n   \n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;After reversing:&quot; );\n   PrintIndexAndValues( myArray );\n}\n\nvoid PrintIndexAndValues( Array^ myArray )\n{\n   for ( int i = myArray-&gt;GetLowerBound( 0 ); i &lt;= myArray-&gt;GetUpperBound( 0 ); i++ )\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray-&gt;GetValue( i ) );\n}\n\n/* \n This code produces the following output.\n \n The Array instance initially contains the following values:\n     [0]:    The\n     [1]:    quick\n     [2]:    brown\n     [3]:    fox\n     [4]:    jumped\n     [5]:    over\n     [6]:    the\n     [7]:    lazy\n     [8]:    dog\n After reversing:\n     [0]:    dog\n     [1]:    lazy\n     [2]:    the\n     [3]:    over\n     [4]:    jumped\n     [5]:    fox\n     [6]:    brown\n     [7]:    quick\n     [8]:    The\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.Reverse Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Array.\n       Array myArray=Array.CreateInstance( typeof(String), 9 );\n       myArray.SetValue( &quot;The&quot;, 0 );\n       myArray.SetValue( &quot;quick&quot;, 1 );\n       myArray.SetValue( &quot;brown&quot;, 2 );\n       myArray.SetValue( &quot;fox&quot;, 3 );\n       myArray.SetValue( &quot;jumps&quot;, 4 );\n       myArray.SetValue( &quot;over&quot;, 5 );\n       myArray.SetValue( &quot;the&quot;, 6 );\n       myArray.SetValue( &quot;lazy&quot;, 7 );\n       myArray.SetValue( &quot;dog&quot;, 8 );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The Array initially contains the following values:&quot; );\n       PrintIndexAndValues( myArray );\n \n       // Reverses the sort of the values of the Array.\n       Array.Reverse( myArray );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;After reversing:&quot; );\n       PrintIndexAndValues( myArray );\n    }\n \n \n    public static void PrintIndexAndValues( Array myArray )  {\n       for ( int i = myArray.GetLowerBound(0); i &lt;= myArray.GetUpperBound(0); i++ )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray.GetValue( i ) );\n    }\n }\n /* \n This code produces the following output.\n \n The Array initially contains the following values:\n     [0]:    The\n     [1]:    quick\n     [2]:    brown\n     [3]:    fox\n     [4]:    jumps\n     [5]:    over\n     [6]:    the\n     [7]:    lazy\n     [8]:    dog\n After reversing:\n     [0]:    dog\n     [1]:    lazy\n     [2]:    the\n     [3]:    over\n     [4]:    jumps\n     [5]:    fox\n     [6]:    brown\n     [7]:    quick\n     [8]:    The\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Array.Reverse Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Array.\n        Dim myArray As Array = Array.CreateInstance(GetType(String), 9)\n        myArray.SetValue(&quot;The&quot;, 0)\n        myArray.SetValue(&quot;quick&quot;, 1)\n        myArray.SetValue(&quot;brown&quot;, 2)\n        myArray.SetValue(&quot;fox&quot;, 3)\n        myArray.SetValue(&quot;jumps&quot;, 4)\n        myArray.SetValue(&quot;over&quot;, 5)\n        myArray.SetValue(&quot;the&quot;, 6)\n        myArray.SetValue(&quot;lazy&quot;, 7)\n        myArray.SetValue(&quot;dog&quot;, 8)\n        \n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The Array initially contains the &quot; _\n           + &quot;following values:&quot;)\n        PrintIndexAndValues(myArray)\n        \n        &#39; Reverses the sort of the values of the Array.\n        Array.Reverse(myArray)\n        \n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;After reversing:&quot;)\n        PrintIndexAndValues(myArray)\n    End Sub &#39;Main\n    \n    \n    \n    Public Shared Sub PrintIndexAndValues(myArray As Array)\n        Dim i As Integer\n        For i = myArray.GetLowerBound(0) To myArray.GetUpperBound(0)\n            Console.WriteLine(ControlChars.Tab + &quot;[{0}]:&quot; + ControlChars.Tab _\n               + &quot;{1}&quot;, i, myArray.GetValue(i))\n        Next i\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The Array initially contains the following values:\n&#39;     [0]:    The\n&#39;     [1]:    quick\n&#39;     [2]:    brown\n&#39;     [3]:    fox\n&#39;     [4]:    jumps\n&#39;     [5]:    over\n&#39;     [6]:    the\n&#39;     [7]:    lazy\n&#39;     [8]:    dog\n&#39; After reversing:\n&#39;     [0]:    dog\n&#39;     [1]:    lazy\n&#39;     [2]:    the\n&#39;     [3]:    over\n&#39;     [4]:    jumps\n&#39;     [5]:    fox\n&#39;     [6]:    brown\n&#39;     [7]:    quick\n&#39;     [8]:    The \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Reverse_System_Array_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_Reverse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reverse(Array,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reverses the sequence of the elements in a range of elements in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Reverse (Array array, int index, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to reverse.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the section to reverse.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the section to reverse.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After a call to this method, the element at <code>myArray[i]</code>, where <code>i</code> is any index in the array, moves to <code>myArray[j]</code>, where <code>j</code> equals <code>(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1</code>.  </p>\n<p> The<a class=\"xref\" href=\"system.array#System_Array_Reverse_\" data-linktype=\"relative-path\">Reverse</a> method can be used to reverse a jagged array.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to reverse the sort of the values in a range of elements in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic Array.Reverse1 Example#1\">Imports System\nImports Microsoft.VisualBasic\n\nPublic Class SamplesArray    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new Array.\n        Dim myArray As Array = Array.CreateInstance(GetType(String), 9)\n        myArray.SetValue(&quot;The&quot;, 0)\n        myArray.SetValue(&quot;QUICK&quot;, 1)\n        myArray.SetValue(&quot;BROWN&quot;, 2)\n        myArray.SetValue(&quot;FOX&quot;, 3)\n        myArray.SetValue(&quot;jumps&quot;, 4)\n        myArray.SetValue(&quot;over&quot;, 5)\n        myArray.SetValue(&quot;the&quot;, 6)\n        myArray.SetValue(&quot;lazy&quot;, 7)\n        myArray.SetValue(&quot;dog&quot;, 8)\n        \n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;The Array initially contains the &quot; _\n           + &quot;following values:&quot;)\n        PrintIndexAndValues(myArray)\n        \n        &#39; Reverses the sort of the values of the Array.\n        Array.Reverse(myArray, 1, 3)\n        \n        &#39; Displays the values of the Array.\n        Console.WriteLine(&quot;After reversing:&quot;)\n        PrintIndexAndValues(myArray)\n    End Sub    \n    \n    \n    Public Shared Sub PrintIndexAndValues(myArray As Array)\n        Dim i As Integer\n        For i = myArray.GetLowerBound(0) To myArray.GetUpperBound(0)\n            Console.WriteLine(ControlChars.Tab + &quot;[{0}]:&quot; + ControlChars.Tab _\n               + &quot;{1}&quot;, i, myArray.GetValue(i))\n        Next i\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The Array initially contains the following values:\n&#39;     [0]:    The\n&#39;     [1]:    QUICK\n&#39;     [2]:    BROWN\n&#39;     [3]:    FOX\n&#39;     [4]:    jumps\n&#39;     [5]:    over\n&#39;     [6]:    the\n&#39;     [7]:    lazy\n&#39;     [8]:    dog\n&#39; After reversing:\n&#39;     [0]:    The\n&#39;     [1]:    FOX\n&#39;     [2]:    BROWN\n&#39;     [3]:    QUICK\n&#39;     [4]:    jumps\n&#39;     [5]:    over\n&#39;     [6]:    the\n&#39;     [7]:    lazy\n&#39;     [8]:    dog \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Array.Reverse1 Example#1\">using namespace System;\nvoid PrintIndexAndValues( Array^ myArray );\nvoid main()\n{\n   // Creates and initializes a new Array instance.\n   Array^ myArray = Array::CreateInstance( String::typeid, 9 );\n   myArray-&gt;SetValue( &quot;The&quot;, 0 );\n   myArray-&gt;SetValue( &quot;QUICK&quot;, 1 );\n   myArray-&gt;SetValue( &quot;BROWN&quot;, 2 );\n   myArray-&gt;SetValue( &quot;FOX&quot;, 3 );\n   myArray-&gt;SetValue( &quot;jumped&quot;, 4 );\n   myArray-&gt;SetValue( &quot;over&quot;, 5 );\n   myArray-&gt;SetValue( &quot;the&quot;, 6 );\n   myArray-&gt;SetValue( &quot;lazy&quot;, 7 );\n   myArray-&gt;SetValue( &quot;dog&quot;, 8 );\n\n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;The Array instance initially contains the following values:&quot; );\n   PrintIndexAndValues( myArray );\n\n   // Reverses the sort of the values of the Array.\n   Array::Reverse( myArray, 1, 3 );\n\n   // Displays the values of the Array.\n   Console::WriteLine(  &quot;After reversing:&quot; );\n   PrintIndexAndValues( myArray );\n}\n\nvoid PrintIndexAndValues( Array^ myArray )\n{\n   for ( int i = myArray-&gt;GetLowerBound( 0 ); i &lt;= myArray-&gt;GetUpperBound( 0 ); i++ )\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray-&gt;GetValue( i ) );\n}\n\n/* \n This code produces the following output.\n \n The Array instance initially contains the following values:\n     [0]:    The\n     [1]:    QUICK\n     [2]:    BROWN\n     [3]:    FOX\n     [4]:    jumped\n     [5]:    over\n     [6]:    the\n     [7]:    lazy\n     [8]:    dog\n After reversing:\n     [0]:    The\n     [1]:    FOX\n     [2]:    BROWN\n     [3]:    QUICK\n     [4]:    jumped\n     [5]:    over\n     [6]:    the\n     [7]:    lazy\n     [8]:    dog\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Array.Reverse1 Example#1\"> using System;\n public class SamplesArray  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new Array.\n       Array myArray=Array.CreateInstance( typeof(String), 9 );\n       myArray.SetValue( &quot;The&quot;, 0 );\n       myArray.SetValue( &quot;QUICK&quot;, 1 );\n       myArray.SetValue( &quot;BROWN&quot;, 2 );\n       myArray.SetValue( &quot;FOX&quot;, 3 );\n       myArray.SetValue( &quot;jumps&quot;, 4 );\n       myArray.SetValue( &quot;over&quot;, 5 );\n       myArray.SetValue( &quot;the&quot;, 6 );\n       myArray.SetValue( &quot;lazy&quot;, 7 );\n       myArray.SetValue( &quot;dog&quot;, 8 );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;The Array initially contains the following values:&quot; );\n       PrintIndexAndValues( myArray );\n \n       // Reverses the sort of the values of the Array.\n       Array.Reverse( myArray, 1, 3 );\n \n       // Displays the values of the Array.\n       Console.WriteLine( &quot;After reversing:&quot; );\n       PrintIndexAndValues( myArray );\n    }\n \n \n    public static void PrintIndexAndValues( Array myArray )  {\n       for ( int i = myArray.GetLowerBound(0); i &lt;= myArray.GetUpperBound(0); i++ )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, i, myArray.GetValue( i ) );\n    }\n }\n /* \n This code produces the following output.\n \n The Array initially contains the following values:\n     [0]:    The\n     [1]:    QUICK\n     [2]:    BROWN\n     [3]:    FOX\n     [4]:    jumps\n     [5]:    over\n     [6]:    the\n     [7]:    lazy\n     [8]:    dog\n After reversing:\n     [0]:    The\n     [1]:    FOX\n     [2]:    BROWN\n     [3]:    QUICK\n     [4]:    jumps\n     [5]:    over\n     [6]:    the\n     [7]:    lazy\n     [8]:    dog\n */ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_SetValue_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets a value to the element at the specified position in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The index is specified as a 32-bit integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (object value, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value for the specified element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the position of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly one dimension.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> cannot be cast to the element type of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether the value of <code>index</code> is out of bounds.  </p>\n<p> For more information about conversions, see <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> This method is an O(1) operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.array#System_Array_SetValue_\" data-linktype=\"relative-path\">SetValue</a> is used to assign <code>null</code> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_SetValue_System_Object_System_Int32___\">\r\n    \r\n            <a id=\"System_Array_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Int32[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets a value to the element at the specified position in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as an array of 32-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (object value, int[] indices);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value for the specified element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indices</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>indices</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number of dimensions in the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is not equal to the number of elements in <code>indices</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> cannot be cast to the element type of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Any element in <code>indices</code> is outside the range of valid indexes for the corresponding dimension of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The number of elements in <code>indices</code> must equal the number of dimensions in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. All elements in the <code>indices</code> array must collectively specify the position of the desired element in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether any of the values in the <code>indices</code> array is out of bounds.  </p>\n<p> For more information about conversions, see <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> This method is an O(1) operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.array#System_Array_SetValue_\" data-linktype=\"relative-path\">SetValue</a> is used to assign <code>null</code> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_SetValue_System_Object_System_Int64_\">\r\n    \r\n            <a id=\"System_Array_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Sets a value to the element at the specified position in the one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The index is specified as a 64-bit integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (object value, long index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value for the specified element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the position of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly one dimension.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> cannot be cast to the element type of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether the value of <code>index</code> is out of bounds.  </p>\n<p> For more information about conversions, see <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> This method is an O(1) operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.array#System_Array_SetValue_\" data-linktype=\"relative-path\">SetValue</a> is used to assign <code>null</code> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_SetValue_System_Object_System_Int64___\">\r\n    \r\n            <a id=\"System_Array_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Int64[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets a value to the element at the specified position in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as an array of 64-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (object value, long[] indices);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value for the specified element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>indices</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the element to set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>indices</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number of dimensions in the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is not equal to the number of elements in <code>indices</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> cannot be cast to the element type of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Any element in <code>indices</code> is outside the range of valid indexes for the corresponding dimension of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The number of elements in <code>indices</code> must equal the number of dimensions in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. All elements in the <code>indices</code> array must collectively specify the position of the desired element in the multidimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether any of the values in the <code>indices</code> array is out of bounds.  </p>\n<p> For more information about conversions, see <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> This method is an O(1) operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.array#System_Array_SetValue_\" data-linktype=\"relative-path\">SetValue</a> is used to assign <code>null</code> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_SetValue_System_Object_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets a value to the element at the specified position in the two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 32-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (object value, int index1, int index2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value for the specified element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the first-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the second-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly two dimensions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> cannot be cast to the element type of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Either <code>index1</code> or <code>index2</code> is outside the range of valid indexes for the corresponding dimension of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether any of the indexes is out of bounds.  </p>\n<p> For more information about conversions, see <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> This method is an O(1) operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.array#System_Array_SetValue_\" data-linktype=\"relative-path\">SetValue</a> is used to assign <code>null</code> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_SetValue_System_Object_System_Int64_System_Int64_\">\r\n    \r\n            <a id=\"System_Array_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Int64,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Sets a value to the element at the specified position in the two-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 64-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (object value, long index1, long index2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value for the specified element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the first-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the second-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly two dimensions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> cannot be cast to the element type of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Either <code>index1</code> or <code>index2</code> is outside the range of valid indexes for the corresponding dimension of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether any of the indexes is out of bounds.  </p>\n<p> For more information about conversions, see <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> This method is an O(1) operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.array#System_Array_SetValue_\" data-linktype=\"relative-path\">SetValue</a> is used to assign <code>null</code> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_SetValue_System_Object_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets a value to the element at the specified position in the three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 32-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (object value, int index1, int index2, int index3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value for the specified element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the first-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the second-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 32-bit integer that represents the third-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly three dimensions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> cannot be cast to the element type of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index1</code> or <code>index2</code> or <code>index3</code> is outside the range of valid indexes for the corresponding dimension of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether any of the indexes is out of bounds.  </p>\n<p> For more information about conversions, see <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> This method is an O(1) operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.array#System_Array_SetValue_\" data-linktype=\"relative-path\">SetValue</a> is used to assign <code>null</code> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_SetValue_System_Object_System_Int64_System_Int64_System_Int64_\">\r\n    \r\n            <a id=\"System_Array_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Int64,Int64,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Sets a value to the element at the specified position in the three-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. The indexes are specified as 64-bit integers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (object value, long index1, long index2, long index3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value for the specified element.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the first-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the second-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 64-bit integer that represents the third-dimension index of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> element to set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly three dimensions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> cannot be cast to the element type of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index1</code> or <code>index2</code> or <code>index3</code> is outside the range of valid indexes for the corresponding dimension of the current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.array#System_Array_GetLowerBound_\" data-linktype=\"relative-path\">GetLowerBound</a> and <a class=\"xref\" href=\"system.array#System_Array_GetUpperBound_\" data-linktype=\"relative-path\">GetUpperBound</a> methods can determine whether any of the indexes is out of bounds.  </p>\n<p> For more information about conversions, see <a class=\"xref\" href=\"system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> This method is an O(1) operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.array#System_Array_SetValue_\" data-linktype=\"relative-path\">SetValue</a> is used to assign <code>null</code> to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array_GetSetValue#1\">using namespace System;\nint main()\n{\n   \n   // Creates and initializes a one-dimensional array.\n   array&lt;String^&gt;^myArr1 = gcnew array&lt;String^&gt;(5);\n   \n   // Sets the element at index 3.\n   myArr1-&gt;SetValue( &quot;three&quot;, 3 );\n   Console::WriteLine( &quot;[3]:   {0}&quot;, myArr1-&gt;GetValue( 3 ) );\n   \n   // Creates and initializes a two-dimensional array.\n   array&lt;String^, 2&gt;^myArr2 = gcnew array&lt;String^,2&gt;(5,5);\n   \n   // Sets the element at index 1,3.\n   myArr2-&gt;SetValue( &quot;one-three&quot;, 1, 3 );\n   Console::WriteLine( &quot;[1,3]:   {0}&quot;, myArr2-&gt;GetValue( 1, 3 ) );\n   \n   // Creates and initializes a three-dimensional array.\n   array&lt;String^, 3&gt;^myArr3 = gcnew array&lt;String^,3&gt;(5,5,5);\n   \n   // Sets the element at index 1,2,3.\n   myArr3-&gt;SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n   Console::WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3-&gt;GetValue( 1, 2, 3 ) );\n   \n   // Creates and initializes a seven-dimensional array.\n   array&lt;String^, 7&gt;^myArr7 = gcnew array&lt;String^,7&gt;(5,5,5,5,5,5,5);\n   \n   // Sets the element at index 1,2,3,0,1,2,3.\n   array&lt;Int32&gt;^myIndices = {1,2,3,0,1,2,3};\n   myArr7-&gt;SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n   Console::WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7-&gt;GetValue( myIndices ) );\n}\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array_GetSetValue#1\">Imports System\n\nPublic Class SamplesArray\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a one-dimensional array.\n      Dim myArr1(4) As [String]\n\n      &#39; Sets the element at index 3.\n      myArr1.SetValue(&quot;three&quot;, 3)\n      Console.WriteLine(&quot;[3]:   {0}&quot;, myArr1.GetValue(3))\n\n\n      &#39; Creates and initializes a two-dimensional array.\n      Dim myArr2(5, 5) As [String]\n\n      &#39; Sets the element at index 1,3.\n      myArr2.SetValue(&quot;one-three&quot;, 1, 3)\n      Console.WriteLine(&quot;[1,3]:   {0}&quot;, myArr2.GetValue(1, 3))\n\n\n      &#39; Creates and initializes a three-dimensional array.\n      Dim myArr3(5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3.\n      myArr3.SetValue(&quot;one-two-three&quot;, 1, 2, 3)\n      Console.WriteLine(&quot;[1,2,3]:   {0}&quot;, myArr3.GetValue(1, 2, 3))\n\n\n      &#39; Creates and initializes a seven-dimensional array.\n      Dim myArr7(5, 5, 5, 5, 5, 5, 5) As [String]\n\n      &#39; Sets the element at index 1,2,3,0,1,2,3.\n      Dim myIndices() As Integer = {1, 2, 3, 0, 1, 2, 3}\n      myArr7.SetValue(&quot;one-two-three-zero-one-two-three&quot;, myIndices)\n      Console.WriteLine(&quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue(myIndices))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;[3]:   three\n&#39;[1,3]:   one-three\n&#39;[1,2,3]:   one-two-three\n&#39;[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array_GetSetValue#1\">using System;\n\npublic class SamplesArray  {\n\n   public static void Main()  {\n \n      // Creates and initializes a one-dimensional array.\n      String[] myArr1 = new String[5];\n\n      // Sets the element at index 3.\n      myArr1.SetValue( &quot;three&quot;, 3 );\n      Console.WriteLine( &quot;[3]:   {0}&quot;, myArr1.GetValue( 3 ) );\n\n\n      // Creates and initializes a two-dimensional array.\n      String[,] myArr2 = new String[5,5];\n\n      // Sets the element at index 1,3.\n      myArr2.SetValue( &quot;one-three&quot;, 1, 3 );\n      Console.WriteLine( &quot;[1,3]:   {0}&quot;, myArr2.GetValue( 1, 3 ) );\n\n\n      // Creates and initializes a three-dimensional array.\n      String[,,] myArr3 = new String[5,5,5];\n\n      // Sets the element at index 1,2,3.\n      myArr3.SetValue( &quot;one-two-three&quot;, 1, 2, 3 );\n      Console.WriteLine( &quot;[1,2,3]:   {0}&quot;, myArr3.GetValue( 1, 2, 3 ) );\n\n\n      // Creates and initializes a seven-dimensional array.\n      String[,,,,,,] myArr7 = new String[5,5,5,5,5,5,5];\n\n      // Sets the element at index 1,2,3,0,1,2,3.\n      int[] myIndices = new int[7] { 1, 2, 3, 0, 1, 2, 3 };\n      myArr7.SetValue( &quot;one-two-three-zero-one-two-three&quot;, myIndices );\n      Console.WriteLine( &quot;[1,2,3,0,1,2,3]:   {0}&quot;, myArr7.GetValue( myIndices ) );\n\n   }\n \n}\n\n\n/* \nThis code produces the following output.\n\n[3]:   three\n[1,3]:   one-three\n[1,2,3]:   one-two-three\n[1,2,3,0,1,2,3]:   one-two-three-zero-one-two-three\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort_System_Array_\">\r\n    \r\n            <a id=\"System_Array_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(Array)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in an entire one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort (Array array);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to sort.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>One or more elements in <code>array</code> do not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each element of <code>array</code> must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other element in <code>array</code>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an<a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sort the values in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.Sort#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ReverseComparer : IComparer\n{\npublic:\n   // Call CaseInsensitiveComparer::Compare with the parameters reversed.\n   virtual int Compare(Object^ x, Object^ y) = IComparer::Compare\n   {\n      return ((gcnew CaseInsensitiveComparer)-&gt;Compare(y, x));\n   }\n};\n\nvoid DisplayValues(array&lt;String^&gt;^ arr)\n{\n   for (int i = arr-&gt;GetLowerBound(0); i &lt;= arr-&gt;GetUpperBound(0); i++)\n      Console::WriteLine( &quot;   [{0}] : {1}&quot;, i, arr[ i ] );\n\n   Console::WriteLine();\n}\n\nint main()\n{\n   // Create and initialize a new array. and a new custom comparer.\n   array&lt;String^&gt;^ words = { &quot;The&quot;,&quot;QUICK&quot;,&quot;BROWN&quot;,&quot;FOX&quot;,&quot;jumps&quot;,\n                             &quot;over&quot;,&quot;the&quot;,&quot;lazy&quot;,&quot;dog&quot; };\n   // Instantiate the reverse comparer.\n   IComparer^ revComparer = gcnew ReverseComparer();\n   \n   // Display the values of the Array.\n   Console::WriteLine( &quot;The original order of elements in the array:&quot; );\n   DisplayValues(words);\n\n   // Sort a section of the array using the default comparer.\n   Array::Sort(words, 1, 3);\n   Console::WriteLine( &quot;After sorting elements 1-3 by using the default comparer:&quot;);\n   DisplayValues(words);\n\n   // Sort a section of the array using the reverse case-insensitive comparer.\n   Array::Sort(words, 1, 3, revComparer);\n   Console::WriteLine( &quot;After sorting elements 1-3 by using the reverse case-insensitive comparer:&quot;);\n   DisplayValues(words);\n\n   // Sort the entire array using the default comparer.\n   Array::Sort(words);\n   Console::WriteLine( &quot;After sorting the entire array by using the default comparer:&quot;);\n   DisplayValues(words);\n\n   // Sort the entire array by using the reverse case-insensitive comparer.\n   Array::Sort(words, revComparer);\n   Console::WriteLine( &quot;After sorting the entire array using the reverse case-insensitive comparer:&quot;);\n   DisplayValues(words);\n}\n\n/* \nThis code produces the following output.\n\nThe Array initially contains the following values:\n   [0] : The\n   [1] : QUICK\n   [2] : BROWN\n   [3] : FOX\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter sorting a section of the Array using the default comparer:\n   [0] : The\n   [1] : BROWN\n   [2] : FOX\n   [3] : QUICK\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter sorting a section of the Array using the reverse case-insensitive comparer:\n   [0] : The\n   [1] : QUICK\n   [2] : FOX\n   [3] : BROWN\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter sorting the entire Array using the default comparer:\n   [0] : BROWN\n   [1] : dog\n   [2] : FOX\n   [3] : jumps\n   [4] : lazy\n   [5] : over\n   [6] : QUICK\n   [7] : the\n   [8] : The\n\nAfter sorting the entire Array using the reverse case-insensitive comparer:\n   [0] : the\n   [1] : The\n   [2] : QUICK\n   [3] : over\n   [4] : lazy\n   [5] : jumps\n   [6] : FOX\n   [7] : dog\n   [8] : BROWN\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.Sort#1\">using System;\nusing System.Collections;\n\npublic class ReverseComparer : IComparer  \n{\n   // Call CaseInsensitiveComparer.Compare with the parameters reversed.\n   public int Compare(Object x, Object y)  \n   {\n       return (new CaseInsensitiveComparer()).Compare(y, x );\n   }\n}\n\npublic class Example \n{\n   public static void Main()  \n   {\n      // Create and initialize a new array. \n      String[] words = { &quot;The&quot;, &quot;QUICK&quot;, &quot;BROWN&quot;, &quot;FOX&quot;, &quot;jumps&quot;, \n                         &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; };\n      // Instantiate the reverse comparer.\n      IComparer revComparer = new ReverseComparer();\n \n      // Display the values of the array.\n      Console.WriteLine( &quot;The original order of elements in the array:&quot; );\n      DisplayValues(words);\n \n      // Sort a section of the array using the default comparer.\n      Array.Sort(words, 1, 3);\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the default comparer:&quot;);\n      DisplayValues(words);\n\n      // Sort a section of the array using the reverse case-insensitive comparer.\n      Array.Sort(words, 1, 3, revComparer);\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the reverse case-insensitive comparer:&quot;);\n      DisplayValues(words);\n\n      // Sort the entire array using the default comparer.\n      Array.Sort(words);\n      Console.WriteLine( &quot;After sorting the entire array by using the default comparer:&quot;);\n      DisplayValues(words);\n\n      // Sort the entire array by using the reverse case-insensitive comparer.\n      Array.Sort(words, revComparer);\n      Console.WriteLine( &quot;After sorting the entire array using the reverse case-insensitive comparer:&quot;);\n      DisplayValues(words);\n   }\n \n   public static void DisplayValues(String[] arr)  \n   {\n      for ( int i = arr.GetLowerBound(0); i &lt;= arr.GetUpperBound(0);\n            i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, arr[i] );\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    The original order of elements in the array:\n//       [0] : The\n//       [1] : QUICK\n//       [2] : BROWN\n//       [3] : FOX\n//       [4] : jumps\n//       [5] : over\n//       [6] : the\n//       [7] : lazy\n//       [8] : dog\n//    \n//    After sorting elements 1-3 by using the default comparer:\n//       [0] : The\n//       [1] : BROWN\n//       [2] : FOX\n//       [3] : QUICK\n//       [4] : jumps\n//       [5] : over\n//       [6] : the\n//       [7] : lazy\n//       [8] : dog\n//    \n//    After sorting elements 1-3 by using the reverse case-insensitive comparer:\n//       [0] : The\n//       [1] : QUICK\n//       [2] : FOX\n//       [3] : BROWN\n//       [4] : jumps\n//       [5] : over\n//       [6] : the\n//       [7] : lazy\n//       [8] : dog\n//    \n//    After sorting the entire array by using the default comparer:\n//       [0] : BROWN\n//       [1] : dog\n//       [2] : FOX\n//       [3] : jumps\n//       [4] : lazy\n//       [5] : over\n//       [6] : QUICK\n//       [7] : the\n//       [8] : The\n//    \n//    After sorting the entire array using the reverse case-insensitive comparer:\n//       [0] : the\n//       [1] : The\n//       [2] : QUICK\n//       [3] : over\n//       [4] : lazy\n//       [5] : jumps\n//       [6] : FOX\n//       [7] : dog\n//       [8] : BROWN    \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Sort#1\">Imports System.Collections\n\nPublic Class ReverseComparer : Implements IComparer\n   &#39; Call CaseInsensitiveComparer.Compare with the parameters reversed.\n   Function Compare(x As Object, y As Object) As Integer _\n            Implements IComparer.Compare\n      Return New CaseInsensitiveComparer().Compare(y, x)\n   End Function \nEnd Class\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Create and initialize a new array.\n      Dim words() As String =  { &quot;The&quot;, &quot;QUICK&quot;, &quot;BROWN&quot;, &quot;FOX&quot;, &quot;jumps&quot;, \n                                 &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; }\n      &#39; Instantiate a new custom comparer.\n      Dim revComparer As New ReverseComparer()\n\n      &#39; Display the values of the array.\n      Console.WriteLine( &quot;The original order of elements in the array:&quot; )\n      DisplayValues(words)\n\n      &#39; Sort a section of the array using the default comparer.\n      Array.Sort(words, 1, 3)\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the default comparer:&quot;)\n      DisplayValues(words)\n\n      &#39; Sort a section of the array using the reverse case-insensitive comparer.\n      Array.Sort(words, 1, 3, revComparer)\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the reverse case-insensitive comparer:&quot;)\n      DisplayValues(words)\n\n      &#39; Sort the entire array using the default comparer.\n      Array.Sort(words)\n      Console.WriteLine( &quot;After sorting the entire array by using the default comparer:&quot;)\n      DisplayValues(words)\n\n      &#39; Sort the entire array by using the reverse case-insensitive comparer.\n      Array.Sort(words, revComparer)\n      Console.WriteLine( &quot;After sorting the entire array using the reverse case-insensitive comparer:&quot;)\n      DisplayValues(words)\n   End Sub \n\n   Public Sub DisplayValues(arr() As String)\n      For i As Integer = arr.GetLowerBound(0) To arr.GetUpperBound(0)\n         Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, arr(i))\n      Next \n      Console.WriteLine()\n   End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;    The original order of elements in the array:\n&#39;       [0] : The\n&#39;       [1] : QUICK\n&#39;       [2] : BROWN\n&#39;       [3] : FOX\n&#39;       [4] : jumps\n&#39;       [5] : over\n&#39;       [6] : the\n&#39;       [7] : lazy\n&#39;       [8] : dog\n&#39;    \n&#39;    After sorting elements 1-3 by using the default comparer:\n&#39;       [0] : The\n&#39;       [1] : BROWN\n&#39;       [2] : FOX\n&#39;       [3] : QUICK\n&#39;       [4] : jumps\n&#39;       [5] : over\n&#39;       [6] : the\n&#39;       [7] : lazy\n&#39;       [8] : dog\n&#39;    \n&#39;    After sorting elements 1-3 by using the reverse case-insensitive comparer:\n&#39;       [0] : The\n&#39;       [1] : QUICK\n&#39;       [2] : FOX\n&#39;       [3] : BROWN\n&#39;       [4] : jumps\n&#39;       [5] : over\n&#39;       [6] : the\n&#39;       [7] : lazy\n&#39;       [8] : dog\n&#39;    \n&#39;    After sorting the entire array by using the default comparer:\n&#39;       [0] : BROWN\n&#39;       [1] : dog\n&#39;       [2] : FOX\n&#39;       [3] : jumps\n&#39;       [4] : lazy\n&#39;       [5] : over\n&#39;       [6] : QUICK\n&#39;       [7] : the\n&#39;       [8] : The\n&#39;    \n&#39;    After sorting the entire array using the reverse case-insensitive comparer:\n&#39;       [0] : the\n&#39;       [1] : The\n&#39;       [2] : QUICK\n&#39;       [3] : over\n&#39;       [4] : lazy\n&#39;       [5] : jumps\n&#39;       [6] : FOX\n&#39;       [7] : dog\n&#39;       [8] : BROWN\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort_System_Array_System_Array_\">\r\n    \r\n            <a id=\"System_Array_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(Array,Array)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts a pair of one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort (Array keys, Array items);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keys</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the keys to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>items</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the items that correspond to each of the keys in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to sort only the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>keys</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p>The <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>items</code> is not <code>null</code>, and the length of <code>keys</code> is greater than the length of <code>items</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>One or more elements in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> do not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each key in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> has a corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. When a key is repositioned during the sorting, the corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is similarly repositioned. Therefore, the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is sorted according to the arrangement of the corresponding keys in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> Each key in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other key.  </p>\n<p> You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>keys</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.Sort2#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class myReverserClass: public IComparer\n{\nprivate:\n\n   // Calls CaseInsensitiveComparer::Compare with the parameters reversed.\n   virtual int Compare( Object^ x, Object^ y ) = IComparer::Compare\n   {\n      return ((gcnew CaseInsensitiveComparer)-&gt;Compare( y, x ));\n   }\n};\n\nvoid PrintKeysAndValues( array&lt;String^&gt;^myKeys, array&lt;String^&gt;^myValues )\n{\n   for ( int i = 0; i &lt; myKeys-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot; {0, -10}: {1}&quot;, myKeys[ i ], myValues[ i ] );\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   // Creates and initializes a new Array and a new custom comparer.\n   array&lt;String^&gt;^myKeys = {&quot;red&quot;,&quot;GREEN&quot;,&quot;YELLOW&quot;,&quot;BLUE&quot;,&quot;purple&quot;,&quot;black&quot;,&quot;orange&quot;};\n   array&lt;String^&gt;^myValues = {&quot;strawberries&quot;,&quot;PEARS&quot;,&quot;LIMES&quot;,&quot;BERRIES&quot;,&quot;grapes&quot;,&quot;olives&quot;,&quot;cantaloupe&quot;};\n   IComparer^ myComparer = gcnew myReverserClass;\n\n   // Displays the values of the Array.\n   Console::WriteLine( &quot;The Array initially contains the following values:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n\n   // Sorts a section of the Array using the default comparer.\n   Array::Sort( myKeys, myValues, 1, 3 );\n   Console::WriteLine( &quot;After sorting a section of the Array using the default comparer:&quot; );\n\n   // Sorts a section of the Array using the reverse case-insensitive comparer.\n   Array::Sort( myKeys, myValues, 1, 3, myComparer );\n   Console::WriteLine( &quot;After sorting a section of the Array using the reverse case-insensitive comparer:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n\n   // Sorts the entire Array using the default comparer.\n   Array::Sort( myKeys, myValues );\n   Console::WriteLine( &quot;After sorting the entire Array using the default comparer:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n\n   // Sorts the entire Array using the reverse case-insensitive comparer.\n   Array::Sort( myKeys, myValues, myComparer );\n   Console::WriteLine( &quot;After sorting the entire Array using the reverse case-insensitive comparer:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n}\n\n/* \nThis code produces the following output.\n\nThe Array initially contains the following values:\n   red       : strawberries\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the default comparer:\n   red       : strawberries\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the reverse case-insensitive comparer:\n   red       : strawberries\n   YELLOW    : LIMES\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting the entire Array using the default comparer:\n   black     : olives\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   orange    : cantaloupe\n   purple    : grapes\n   red       : strawberries\n   YELLOW    : LIMES\n\nAfter sorting the entire Array using the reverse case-insensitive comparer:\n   YELLOW    : LIMES\n   red       : strawberries\n   purple    : grapes\n   orange    : cantaloupe\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   black     : olives\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.Sort2#1\">using System;\nusing System.Collections;\n\npublic class SamplesArray  {\n \n   public class myReverserClass : IComparer  {\n\n      // Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      int IComparer.Compare( Object x, Object y )  {\n          return( (new CaseInsensitiveComparer()).Compare( y, x ) );\n      }\n\n   }\n\n   public static void Main()  {\n \n      // Creates and initializes a new Array and a new custom comparer.\n      String[] myKeys = { &quot;red&quot;, &quot;GREEN&quot;, &quot;YELLOW&quot;, &quot;BLUE&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;orange&quot; };\n      String[] myValues = { &quot;strawberries&quot;, &quot;PEARS&quot;, &quot;LIMES&quot;, &quot;BERRIES&quot;, &quot;grapes&quot;, &quot;olives&quot;, &quot;cantaloupe&quot; };\n      IComparer myComparer = new myReverserClass();\n \n      // Displays the values of the Array.\n      Console.WriteLine( &quot;The Array initially contains the following values:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n \n      // Sorts a section of the Array using the default comparer.\n      Array.Sort( myKeys, myValues, 1, 3 );\n      Console.WriteLine( &quot;After sorting a section of the Array using the default comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n      // Sorts a section of the Array using the reverse case-insensitive comparer.\n      Array.Sort( myKeys, myValues, 1, 3, myComparer );\n      Console.WriteLine( &quot;After sorting a section of the Array using the reverse case-insensitive comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n      // Sorts the entire Array using the default comparer.\n      Array.Sort( myKeys, myValues );\n      Console.WriteLine( &quot;After sorting the entire Array using the default comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n      // Sorts the entire Array using the reverse case-insensitive comparer.\n      Array.Sort( myKeys, myValues, myComparer );\n      Console.WriteLine( &quot;After sorting the entire Array using the reverse case-insensitive comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n   }\n \n   public static void PrintKeysAndValues( String[] myKeys, String[] myValues )  {\n      for ( int i = 0; i &lt; myKeys.Length; i++ )  {\n         Console.WriteLine( &quot;   {0,-10}: {1}&quot;, myKeys[i], myValues[i] );\n      }\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nThe Array initially contains the following values:\n   red       : strawberries\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the default comparer:\n   red       : strawberries\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the reverse case-insensitive comparer:\n   red       : strawberries\n   YELLOW    : LIMES\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting the entire Array using the default comparer:\n   black     : olives\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   orange    : cantaloupe\n   purple    : grapes\n   red       : strawberries\n   YELLOW    : LIMES\n\nAfter sorting the entire Array using the reverse case-insensitive comparer:\n   YELLOW    : LIMES\n   red       : strawberries\n   purple    : grapes\n   orange    : cantaloupe\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   black     : olives\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Sort2#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArray\n\n   Public Class myReverserClass\n      Implements IComparer\n\n      &#39; Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      Function Compare(x As [Object], y As [Object]) As Integer _\n         Implements IComparer.Compare\n         Return New CaseInsensitiveComparer().Compare(y, x)\n      End Function &#39;IComparer.Compare\n\n   End Class &#39;myReverserClass\n\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new Array and a new custom comparer.\n      Dim myKeys As [String]() =  {&quot;red&quot;, &quot;GREEN&quot;, &quot;YELLOW&quot;, &quot;BLUE&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;orange&quot;}\n      Dim myValues As [String]() =  {&quot;strawberries&quot;, &quot;PEARS&quot;, &quot;LIMES&quot;, &quot;BERRIES&quot;, &quot;grapes&quot;, &quot;olives&quot;, &quot;cantaloupe&quot;}\n      Dim myComparer = New myReverserClass()\n\n      &#39; Displays the values of the Array.\n      Console.WriteLine(&quot;The Array initially contains the following values:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts a section of the Array using the default comparer.\n      Array.Sort(myKeys, myValues, 1, 3)\n      Console.WriteLine(&quot;After sorting a section of the Array using the default comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts a section of the Array using the reverse case-insensitive comparer.\n      Array.Sort(myKeys, myValues, 1, 3, myComparer)\n      Console.WriteLine(&quot;After sorting a section of the Array using the reverse case-insensitive comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts the entire Array using the default comparer.\n      Array.Sort(myKeys, myValues)\n      Console.WriteLine(&quot;After sorting the entire Array using the default comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts the entire Array using the reverse case-insensitive comparer.\n      Array.Sort(myKeys, myValues, myComparer)\n      Console.WriteLine(&quot;After sorting the entire Array using the reverse case-insensitive comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintKeysAndValues(myKeys() As [String], myValues() As [String])\n\n      Dim i As Integer\n      For i = 0 To myKeys.Length - 1\n         Console.WriteLine(&quot;   {0,-10}: {1}&quot;, myKeys(i), myValues(i))\n      Next i\n      Console.WriteLine()\n\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The Array initially contains the following values:\n&#39;   red       : strawberries\n&#39;   GREEN     : PEARS\n&#39;   YELLOW    : LIMES\n&#39;   BLUE      : BERRIES\n&#39;   purple    : grapes\n&#39;   black     : olives\n&#39;   orange    : cantaloupe\n&#39;\n&#39;After sorting a section of the Array using the default comparer:\n&#39;   red       : strawberries\n&#39;   BLUE      : BERRIES\n&#39;   GREEN     : PEARS\n&#39;   YELLOW    : LIMES\n&#39;   purple    : grapes\n&#39;   black     : olives\n&#39;   orange    : cantaloupe\n&#39;\n&#39;After sorting a section of the Array using the reverse case-insensitive comparer:\n&#39;   red       : strawberries\n&#39;   YELLOW    : LIMES\n&#39;   GREEN     : PEARS\n&#39;   BLUE      : BERRIES\n&#39;   purple    : grapes\n&#39;   black     : olives\n&#39;   orange    : cantaloupe\n&#39;\n&#39;After sorting the entire Array using the default comparer:\n&#39;   black     : olives\n&#39;   BLUE      : BERRIES\n&#39;   GREEN     : PEARS\n&#39;   orange    : cantaloupe\n&#39;   purple    : grapes\n&#39;   red       : strawberries\n&#39;   YELLOW    : LIMES\n&#39;\n&#39;After sorting the entire Array using the reverse case-insensitive comparer:\n&#39;   YELLOW    : LIMES\n&#39;   red       : strawberries\n&#39;   purple    : grapes\n&#39;   orange    : cantaloupe\n&#39;   GREEN     : PEARS\n&#39;   BLUE      : BERRIES\n&#39;   black     : olives\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort_System_Array_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Array_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(Array,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort (Array array, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and one or more elements in <code>array</code> do not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>comparer</code> is <code>null</code>, each element of <code>array</code> must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other element in <code>array</code>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.  </p>\n<p>The .NET Framework includes predefined <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementations listed in the following table.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Implementation</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">System.Collections.CaseInsensitiveComparer</a></td>\n<td>Compares any two objects, but performs a case-insensitive comparison of strings.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.comparer#System_Collections_Comparer_Default\" data-linktype=\"relative-path\">System.Collections.Comparer.Default</a></td>\n<td>Compares any two objects by using the sorting conventions of the current culture.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.comparer#System_Collections_Comparer_DefaultInvariant\" data-linktype=\"relative-path\">System.Collections.Comparer.DefaultInvariant</a></td>\n<td>Compares any two objects by using the sorting conventions of the invariant culture.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a></td>\n<td>Compares two objects of type <code>T</code> by using the type&#39;s default sort order.</td>\n</tr>\n</tbody>\n</table>\n<p> You can also support custom comparisons by providing an instance of your own <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to the <code>comparer</code> parameter. The example does this by defining a <code>ReverseComparer</code> class that reverses the default sort order for instances of a type and performs case-insensitive string comparison.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sorts the values in a string arrayby using the default comparer. It also defines a custom <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation named <code>ReverseComparer</code> that reverses an object&#39;s default sort order while performing a case-insensitive string comparison. Note that the output might vary depending on the current culture.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.Sort#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ReverseComparer : IComparer\n{\npublic:\n   // Call CaseInsensitiveComparer::Compare with the parameters reversed.\n   virtual int Compare(Object^ x, Object^ y) = IComparer::Compare\n   {\n      return ((gcnew CaseInsensitiveComparer)-&gt;Compare(y, x));\n   }\n};\n\nvoid DisplayValues(array&lt;String^&gt;^ arr)\n{\n   for (int i = arr-&gt;GetLowerBound(0); i &lt;= arr-&gt;GetUpperBound(0); i++)\n      Console::WriteLine( &quot;   [{0}] : {1}&quot;, i, arr[ i ] );\n\n   Console::WriteLine();\n}\n\nint main()\n{\n   // Create and initialize a new array. and a new custom comparer.\n   array&lt;String^&gt;^ words = { &quot;The&quot;,&quot;QUICK&quot;,&quot;BROWN&quot;,&quot;FOX&quot;,&quot;jumps&quot;,\n                             &quot;over&quot;,&quot;the&quot;,&quot;lazy&quot;,&quot;dog&quot; };\n   // Instantiate the reverse comparer.\n   IComparer^ revComparer = gcnew ReverseComparer();\n   \n   // Display the values of the Array.\n   Console::WriteLine( &quot;The original order of elements in the array:&quot; );\n   DisplayValues(words);\n\n   // Sort a section of the array using the default comparer.\n   Array::Sort(words, 1, 3);\n   Console::WriteLine( &quot;After sorting elements 1-3 by using the default comparer:&quot;);\n   DisplayValues(words);\n\n   // Sort a section of the array using the reverse case-insensitive comparer.\n   Array::Sort(words, 1, 3, revComparer);\n   Console::WriteLine( &quot;After sorting elements 1-3 by using the reverse case-insensitive comparer:&quot;);\n   DisplayValues(words);\n\n   // Sort the entire array using the default comparer.\n   Array::Sort(words);\n   Console::WriteLine( &quot;After sorting the entire array by using the default comparer:&quot;);\n   DisplayValues(words);\n\n   // Sort the entire array by using the reverse case-insensitive comparer.\n   Array::Sort(words, revComparer);\n   Console::WriteLine( &quot;After sorting the entire array using the reverse case-insensitive comparer:&quot;);\n   DisplayValues(words);\n}\n\n/* \nThis code produces the following output.\n\nThe Array initially contains the following values:\n   [0] : The\n   [1] : QUICK\n   [2] : BROWN\n   [3] : FOX\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter sorting a section of the Array using the default comparer:\n   [0] : The\n   [1] : BROWN\n   [2] : FOX\n   [3] : QUICK\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter sorting a section of the Array using the reverse case-insensitive comparer:\n   [0] : The\n   [1] : QUICK\n   [2] : FOX\n   [3] : BROWN\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter sorting the entire Array using the default comparer:\n   [0] : BROWN\n   [1] : dog\n   [2] : FOX\n   [3] : jumps\n   [4] : lazy\n   [5] : over\n   [6] : QUICK\n   [7] : the\n   [8] : The\n\nAfter sorting the entire Array using the reverse case-insensitive comparer:\n   [0] : the\n   [1] : The\n   [2] : QUICK\n   [3] : over\n   [4] : lazy\n   [5] : jumps\n   [6] : FOX\n   [7] : dog\n   [8] : BROWN\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.Sort#1\">using System;\nusing System.Collections;\n\npublic class ReverseComparer : IComparer  \n{\n   // Call CaseInsensitiveComparer.Compare with the parameters reversed.\n   public int Compare(Object x, Object y)  \n   {\n       return (new CaseInsensitiveComparer()).Compare(y, x );\n   }\n}\n\npublic class Example \n{\n   public static void Main()  \n   {\n      // Create and initialize a new array. \n      String[] words = { &quot;The&quot;, &quot;QUICK&quot;, &quot;BROWN&quot;, &quot;FOX&quot;, &quot;jumps&quot;, \n                         &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; };\n      // Instantiate the reverse comparer.\n      IComparer revComparer = new ReverseComparer();\n \n      // Display the values of the array.\n      Console.WriteLine( &quot;The original order of elements in the array:&quot; );\n      DisplayValues(words);\n \n      // Sort a section of the array using the default comparer.\n      Array.Sort(words, 1, 3);\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the default comparer:&quot;);\n      DisplayValues(words);\n\n      // Sort a section of the array using the reverse case-insensitive comparer.\n      Array.Sort(words, 1, 3, revComparer);\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the reverse case-insensitive comparer:&quot;);\n      DisplayValues(words);\n\n      // Sort the entire array using the default comparer.\n      Array.Sort(words);\n      Console.WriteLine( &quot;After sorting the entire array by using the default comparer:&quot;);\n      DisplayValues(words);\n\n      // Sort the entire array by using the reverse case-insensitive comparer.\n      Array.Sort(words, revComparer);\n      Console.WriteLine( &quot;After sorting the entire array using the reverse case-insensitive comparer:&quot;);\n      DisplayValues(words);\n   }\n \n   public static void DisplayValues(String[] arr)  \n   {\n      for ( int i = arr.GetLowerBound(0); i &lt;= arr.GetUpperBound(0);\n            i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, arr[i] );\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    The original order of elements in the array:\n//       [0] : The\n//       [1] : QUICK\n//       [2] : BROWN\n//       [3] : FOX\n//       [4] : jumps\n//       [5] : over\n//       [6] : the\n//       [7] : lazy\n//       [8] : dog\n//    \n//    After sorting elements 1-3 by using the default comparer:\n//       [0] : The\n//       [1] : BROWN\n//       [2] : FOX\n//       [3] : QUICK\n//       [4] : jumps\n//       [5] : over\n//       [6] : the\n//       [7] : lazy\n//       [8] : dog\n//    \n//    After sorting elements 1-3 by using the reverse case-insensitive comparer:\n//       [0] : The\n//       [1] : QUICK\n//       [2] : FOX\n//       [3] : BROWN\n//       [4] : jumps\n//       [5] : over\n//       [6] : the\n//       [7] : lazy\n//       [8] : dog\n//    \n//    After sorting the entire array by using the default comparer:\n//       [0] : BROWN\n//       [1] : dog\n//       [2] : FOX\n//       [3] : jumps\n//       [4] : lazy\n//       [5] : over\n//       [6] : QUICK\n//       [7] : the\n//       [8] : The\n//    \n//    After sorting the entire array using the reverse case-insensitive comparer:\n//       [0] : the\n//       [1] : The\n//       [2] : QUICK\n//       [3] : over\n//       [4] : lazy\n//       [5] : jumps\n//       [6] : FOX\n//       [7] : dog\n//       [8] : BROWN    \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Sort#1\">Imports System.Collections\n\nPublic Class ReverseComparer : Implements IComparer\n   &#39; Call CaseInsensitiveComparer.Compare with the parameters reversed.\n   Function Compare(x As Object, y As Object) As Integer _\n            Implements IComparer.Compare\n      Return New CaseInsensitiveComparer().Compare(y, x)\n   End Function \nEnd Class\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Create and initialize a new array.\n      Dim words() As String =  { &quot;The&quot;, &quot;QUICK&quot;, &quot;BROWN&quot;, &quot;FOX&quot;, &quot;jumps&quot;, \n                                 &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; }\n      &#39; Instantiate a new custom comparer.\n      Dim revComparer As New ReverseComparer()\n\n      &#39; Display the values of the array.\n      Console.WriteLine( &quot;The original order of elements in the array:&quot; )\n      DisplayValues(words)\n\n      &#39; Sort a section of the array using the default comparer.\n      Array.Sort(words, 1, 3)\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the default comparer:&quot;)\n      DisplayValues(words)\n\n      &#39; Sort a section of the array using the reverse case-insensitive comparer.\n      Array.Sort(words, 1, 3, revComparer)\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the reverse case-insensitive comparer:&quot;)\n      DisplayValues(words)\n\n      &#39; Sort the entire array using the default comparer.\n      Array.Sort(words)\n      Console.WriteLine( &quot;After sorting the entire array by using the default comparer:&quot;)\n      DisplayValues(words)\n\n      &#39; Sort the entire array by using the reverse case-insensitive comparer.\n      Array.Sort(words, revComparer)\n      Console.WriteLine( &quot;After sorting the entire array using the reverse case-insensitive comparer:&quot;)\n      DisplayValues(words)\n   End Sub \n\n   Public Sub DisplayValues(arr() As String)\n      For i As Integer = arr.GetLowerBound(0) To arr.GetUpperBound(0)\n         Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, arr(i))\n      Next \n      Console.WriteLine()\n   End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;    The original order of elements in the array:\n&#39;       [0] : The\n&#39;       [1] : QUICK\n&#39;       [2] : BROWN\n&#39;       [3] : FOX\n&#39;       [4] : jumps\n&#39;       [5] : over\n&#39;       [6] : the\n&#39;       [7] : lazy\n&#39;       [8] : dog\n&#39;    \n&#39;    After sorting elements 1-3 by using the default comparer:\n&#39;       [0] : The\n&#39;       [1] : BROWN\n&#39;       [2] : FOX\n&#39;       [3] : QUICK\n&#39;       [4] : jumps\n&#39;       [5] : over\n&#39;       [6] : the\n&#39;       [7] : lazy\n&#39;       [8] : dog\n&#39;    \n&#39;    After sorting elements 1-3 by using the reverse case-insensitive comparer:\n&#39;       [0] : The\n&#39;       [1] : QUICK\n&#39;       [2] : FOX\n&#39;       [3] : BROWN\n&#39;       [4] : jumps\n&#39;       [5] : over\n&#39;       [6] : the\n&#39;       [7] : lazy\n&#39;       [8] : dog\n&#39;    \n&#39;    After sorting the entire array by using the default comparer:\n&#39;       [0] : BROWN\n&#39;       [1] : dog\n&#39;       [2] : FOX\n&#39;       [3] : jumps\n&#39;       [4] : lazy\n&#39;       [5] : over\n&#39;       [6] : QUICK\n&#39;       [7] : the\n&#39;       [8] : The\n&#39;    \n&#39;    After sorting the entire array using the reverse case-insensitive comparer:\n&#39;       [0] : the\n&#39;       [1] : The\n&#39;       [2] : QUICK\n&#39;       [3] : over\n&#39;       [4] : lazy\n&#39;       [5] : jumps\n&#39;       [6] : FOX\n&#39;       [7] : dog\n&#39;       [8] : BROWN\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort_System_Array_System_Array_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Array_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(Array,Array,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts a pair of one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort (Array keys, Array items, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keys</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the keys to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>items</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the items that correspond to each of the keys in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to sort only the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>keys</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p>The <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>items</code> is not <code>null</code>, and the length of <code>keys</code> is greater than the length of <code>items</code>.  </p>\n<p> -or-  </p>\n<p> The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and one or more elements in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> do not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each key in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> has a corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. When a key is repositioned during the sorting, the corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is similarly repositioned. Therefore, the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is sorted according to the arrangement of the corresponding keys in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> If <code>comparer</code> is <code>null</code>, each key in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other key.  </p>\n<p> You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> The .NET Framework includes predefined <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementations listed in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Implementation</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">System.Collections.CaseInsensitiveComparer</a></td>\n<td>Compares any two objects, but performs a case-insensitive comparison of strings.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.comparer#System_Collections_Comparer_Default\" data-linktype=\"relative-path\">System.Collections.Comparer.Default</a></td>\n<td>Compares any two objects by using the sorting conventions of the current culture.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.comparer#System_Collections_Comparer_DefaultInvariant\" data-linktype=\"relative-path\">System.Collections.Comparer.DefaultInvariant</a></td>\n<td>Compares any two objects by using the sorting conventions of the invariant culture.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a></td>\n<td>Compares two objects of type <code>T</code> by using the type&#39;s default sort order.</td>\n</tr>\n</tbody>\n</table>\n<p> You can also support custom comparisons by providing an instance of your own <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to the <code>comparer</code> parameter. The example does this by defining an <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation that reverses the default sort order and performs case-insensitive string comparison.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>keys</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.Sort2#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class myReverserClass: public IComparer\n{\nprivate:\n\n   // Calls CaseInsensitiveComparer::Compare with the parameters reversed.\n   virtual int Compare( Object^ x, Object^ y ) = IComparer::Compare\n   {\n      return ((gcnew CaseInsensitiveComparer)-&gt;Compare( y, x ));\n   }\n};\n\nvoid PrintKeysAndValues( array&lt;String^&gt;^myKeys, array&lt;String^&gt;^myValues )\n{\n   for ( int i = 0; i &lt; myKeys-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot; {0, -10}: {1}&quot;, myKeys[ i ], myValues[ i ] );\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   // Creates and initializes a new Array and a new custom comparer.\n   array&lt;String^&gt;^myKeys = {&quot;red&quot;,&quot;GREEN&quot;,&quot;YELLOW&quot;,&quot;BLUE&quot;,&quot;purple&quot;,&quot;black&quot;,&quot;orange&quot;};\n   array&lt;String^&gt;^myValues = {&quot;strawberries&quot;,&quot;PEARS&quot;,&quot;LIMES&quot;,&quot;BERRIES&quot;,&quot;grapes&quot;,&quot;olives&quot;,&quot;cantaloupe&quot;};\n   IComparer^ myComparer = gcnew myReverserClass;\n\n   // Displays the values of the Array.\n   Console::WriteLine( &quot;The Array initially contains the following values:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n\n   // Sorts a section of the Array using the default comparer.\n   Array::Sort( myKeys, myValues, 1, 3 );\n   Console::WriteLine( &quot;After sorting a section of the Array using the default comparer:&quot; );\n\n   // Sorts a section of the Array using the reverse case-insensitive comparer.\n   Array::Sort( myKeys, myValues, 1, 3, myComparer );\n   Console::WriteLine( &quot;After sorting a section of the Array using the reverse case-insensitive comparer:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n\n   // Sorts the entire Array using the default comparer.\n   Array::Sort( myKeys, myValues );\n   Console::WriteLine( &quot;After sorting the entire Array using the default comparer:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n\n   // Sorts the entire Array using the reverse case-insensitive comparer.\n   Array::Sort( myKeys, myValues, myComparer );\n   Console::WriteLine( &quot;After sorting the entire Array using the reverse case-insensitive comparer:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n}\n\n/* \nThis code produces the following output.\n\nThe Array initially contains the following values:\n   red       : strawberries\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the default comparer:\n   red       : strawberries\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the reverse case-insensitive comparer:\n   red       : strawberries\n   YELLOW    : LIMES\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting the entire Array using the default comparer:\n   black     : olives\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   orange    : cantaloupe\n   purple    : grapes\n   red       : strawberries\n   YELLOW    : LIMES\n\nAfter sorting the entire Array using the reverse case-insensitive comparer:\n   YELLOW    : LIMES\n   red       : strawberries\n   purple    : grapes\n   orange    : cantaloupe\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   black     : olives\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.Sort2#1\">using System;\nusing System.Collections;\n\npublic class SamplesArray  {\n \n   public class myReverserClass : IComparer  {\n\n      // Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      int IComparer.Compare( Object x, Object y )  {\n          return( (new CaseInsensitiveComparer()).Compare( y, x ) );\n      }\n\n   }\n\n   public static void Main()  {\n \n      // Creates and initializes a new Array and a new custom comparer.\n      String[] myKeys = { &quot;red&quot;, &quot;GREEN&quot;, &quot;YELLOW&quot;, &quot;BLUE&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;orange&quot; };\n      String[] myValues = { &quot;strawberries&quot;, &quot;PEARS&quot;, &quot;LIMES&quot;, &quot;BERRIES&quot;, &quot;grapes&quot;, &quot;olives&quot;, &quot;cantaloupe&quot; };\n      IComparer myComparer = new myReverserClass();\n \n      // Displays the values of the Array.\n      Console.WriteLine( &quot;The Array initially contains the following values:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n \n      // Sorts a section of the Array using the default comparer.\n      Array.Sort( myKeys, myValues, 1, 3 );\n      Console.WriteLine( &quot;After sorting a section of the Array using the default comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n      // Sorts a section of the Array using the reverse case-insensitive comparer.\n      Array.Sort( myKeys, myValues, 1, 3, myComparer );\n      Console.WriteLine( &quot;After sorting a section of the Array using the reverse case-insensitive comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n      // Sorts the entire Array using the default comparer.\n      Array.Sort( myKeys, myValues );\n      Console.WriteLine( &quot;After sorting the entire Array using the default comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n      // Sorts the entire Array using the reverse case-insensitive comparer.\n      Array.Sort( myKeys, myValues, myComparer );\n      Console.WriteLine( &quot;After sorting the entire Array using the reverse case-insensitive comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n   }\n \n   public static void PrintKeysAndValues( String[] myKeys, String[] myValues )  {\n      for ( int i = 0; i &lt; myKeys.Length; i++ )  {\n         Console.WriteLine( &quot;   {0,-10}: {1}&quot;, myKeys[i], myValues[i] );\n      }\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nThe Array initially contains the following values:\n   red       : strawberries\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the default comparer:\n   red       : strawberries\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the reverse case-insensitive comparer:\n   red       : strawberries\n   YELLOW    : LIMES\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting the entire Array using the default comparer:\n   black     : olives\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   orange    : cantaloupe\n   purple    : grapes\n   red       : strawberries\n   YELLOW    : LIMES\n\nAfter sorting the entire Array using the reverse case-insensitive comparer:\n   YELLOW    : LIMES\n   red       : strawberries\n   purple    : grapes\n   orange    : cantaloupe\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   black     : olives\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Sort2#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArray\n\n   Public Class myReverserClass\n      Implements IComparer\n\n      &#39; Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      Function Compare(x As [Object], y As [Object]) As Integer _\n         Implements IComparer.Compare\n         Return New CaseInsensitiveComparer().Compare(y, x)\n      End Function &#39;IComparer.Compare\n\n   End Class &#39;myReverserClass\n\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new Array and a new custom comparer.\n      Dim myKeys As [String]() =  {&quot;red&quot;, &quot;GREEN&quot;, &quot;YELLOW&quot;, &quot;BLUE&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;orange&quot;}\n      Dim myValues As [String]() =  {&quot;strawberries&quot;, &quot;PEARS&quot;, &quot;LIMES&quot;, &quot;BERRIES&quot;, &quot;grapes&quot;, &quot;olives&quot;, &quot;cantaloupe&quot;}\n      Dim myComparer = New myReverserClass()\n\n      &#39; Displays the values of the Array.\n      Console.WriteLine(&quot;The Array initially contains the following values:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts a section of the Array using the default comparer.\n      Array.Sort(myKeys, myValues, 1, 3)\n      Console.WriteLine(&quot;After sorting a section of the Array using the default comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts a section of the Array using the reverse case-insensitive comparer.\n      Array.Sort(myKeys, myValues, 1, 3, myComparer)\n      Console.WriteLine(&quot;After sorting a section of the Array using the reverse case-insensitive comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts the entire Array using the default comparer.\n      Array.Sort(myKeys, myValues)\n      Console.WriteLine(&quot;After sorting the entire Array using the default comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts the entire Array using the reverse case-insensitive comparer.\n      Array.Sort(myKeys, myValues, myComparer)\n      Console.WriteLine(&quot;After sorting the entire Array using the reverse case-insensitive comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintKeysAndValues(myKeys() As [String], myValues() As [String])\n\n      Dim i As Integer\n      For i = 0 To myKeys.Length - 1\n         Console.WriteLine(&quot;   {0,-10}: {1}&quot;, myKeys(i), myValues(i))\n      Next i\n      Console.WriteLine()\n\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The Array initially contains the following values:\n&#39;   red       : strawberries\n&#39;   GREEN     : PEARS\n&#39;   YELLOW    : LIMES\n&#39;   BLUE      : BERRIES\n&#39;   purple    : grapes\n&#39;   black     : olives\n&#39;   orange    : cantaloupe\n&#39;\n&#39;After sorting a section of the Array using the default comparer:\n&#39;   red       : strawberries\n&#39;   BLUE      : BERRIES\n&#39;   GREEN     : PEARS\n&#39;   YELLOW    : LIMES\n&#39;   purple    : grapes\n&#39;   black     : olives\n&#39;   orange    : cantaloupe\n&#39;\n&#39;After sorting a section of the Array using the reverse case-insensitive comparer:\n&#39;   red       : strawberries\n&#39;   YELLOW    : LIMES\n&#39;   GREEN     : PEARS\n&#39;   BLUE      : BERRIES\n&#39;   purple    : grapes\n&#39;   black     : olives\n&#39;   orange    : cantaloupe\n&#39;\n&#39;After sorting the entire Array using the default comparer:\n&#39;   black     : olives\n&#39;   BLUE      : BERRIES\n&#39;   GREEN     : PEARS\n&#39;   orange    : cantaloupe\n&#39;   purple    : grapes\n&#39;   red       : strawberries\n&#39;   YELLOW    : LIMES\n&#39;\n&#39;After sorting the entire Array using the reverse case-insensitive comparer:\n&#39;   YELLOW    : LIMES\n&#39;   red       : strawberries\n&#39;   purple    : grapes\n&#39;   orange    : cantaloupe\n&#39;   GREEN     : PEARS\n&#39;   BLUE      : BERRIES\n&#39;   black     : olives\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort_System_Array_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(Array,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in a range of elements in a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort (Array array, int index, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range to sort.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>One or more elements in <code>array</code> do not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each element within the specified range of elements in <code>array</code> must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other element in <code>array</code>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sort the values in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.Sort#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ReverseComparer : IComparer\n{\npublic:\n   // Call CaseInsensitiveComparer::Compare with the parameters reversed.\n   virtual int Compare(Object^ x, Object^ y) = IComparer::Compare\n   {\n      return ((gcnew CaseInsensitiveComparer)-&gt;Compare(y, x));\n   }\n};\n\nvoid DisplayValues(array&lt;String^&gt;^ arr)\n{\n   for (int i = arr-&gt;GetLowerBound(0); i &lt;= arr-&gt;GetUpperBound(0); i++)\n      Console::WriteLine( &quot;   [{0}] : {1}&quot;, i, arr[ i ] );\n\n   Console::WriteLine();\n}\n\nint main()\n{\n   // Create and initialize a new array. and a new custom comparer.\n   array&lt;String^&gt;^ words = { &quot;The&quot;,&quot;QUICK&quot;,&quot;BROWN&quot;,&quot;FOX&quot;,&quot;jumps&quot;,\n                             &quot;over&quot;,&quot;the&quot;,&quot;lazy&quot;,&quot;dog&quot; };\n   // Instantiate the reverse comparer.\n   IComparer^ revComparer = gcnew ReverseComparer();\n   \n   // Display the values of the Array.\n   Console::WriteLine( &quot;The original order of elements in the array:&quot; );\n   DisplayValues(words);\n\n   // Sort a section of the array using the default comparer.\n   Array::Sort(words, 1, 3);\n   Console::WriteLine( &quot;After sorting elements 1-3 by using the default comparer:&quot;);\n   DisplayValues(words);\n\n   // Sort a section of the array using the reverse case-insensitive comparer.\n   Array::Sort(words, 1, 3, revComparer);\n   Console::WriteLine( &quot;After sorting elements 1-3 by using the reverse case-insensitive comparer:&quot;);\n   DisplayValues(words);\n\n   // Sort the entire array using the default comparer.\n   Array::Sort(words);\n   Console::WriteLine( &quot;After sorting the entire array by using the default comparer:&quot;);\n   DisplayValues(words);\n\n   // Sort the entire array by using the reverse case-insensitive comparer.\n   Array::Sort(words, revComparer);\n   Console::WriteLine( &quot;After sorting the entire array using the reverse case-insensitive comparer:&quot;);\n   DisplayValues(words);\n}\n\n/* \nThis code produces the following output.\n\nThe Array initially contains the following values:\n   [0] : The\n   [1] : QUICK\n   [2] : BROWN\n   [3] : FOX\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter sorting a section of the Array using the default comparer:\n   [0] : The\n   [1] : BROWN\n   [2] : FOX\n   [3] : QUICK\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter sorting a section of the Array using the reverse case-insensitive comparer:\n   [0] : The\n   [1] : QUICK\n   [2] : FOX\n   [3] : BROWN\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter sorting the entire Array using the default comparer:\n   [0] : BROWN\n   [1] : dog\n   [2] : FOX\n   [3] : jumps\n   [4] : lazy\n   [5] : over\n   [6] : QUICK\n   [7] : the\n   [8] : The\n\nAfter sorting the entire Array using the reverse case-insensitive comparer:\n   [0] : the\n   [1] : The\n   [2] : QUICK\n   [3] : over\n   [4] : lazy\n   [5] : jumps\n   [6] : FOX\n   [7] : dog\n   [8] : BROWN\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.Sort#1\">using System;\nusing System.Collections;\n\npublic class ReverseComparer : IComparer  \n{\n   // Call CaseInsensitiveComparer.Compare with the parameters reversed.\n   public int Compare(Object x, Object y)  \n   {\n       return (new CaseInsensitiveComparer()).Compare(y, x );\n   }\n}\n\npublic class Example \n{\n   public static void Main()  \n   {\n      // Create and initialize a new array. \n      String[] words = { &quot;The&quot;, &quot;QUICK&quot;, &quot;BROWN&quot;, &quot;FOX&quot;, &quot;jumps&quot;, \n                         &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; };\n      // Instantiate the reverse comparer.\n      IComparer revComparer = new ReverseComparer();\n \n      // Display the values of the array.\n      Console.WriteLine( &quot;The original order of elements in the array:&quot; );\n      DisplayValues(words);\n \n      // Sort a section of the array using the default comparer.\n      Array.Sort(words, 1, 3);\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the default comparer:&quot;);\n      DisplayValues(words);\n\n      // Sort a section of the array using the reverse case-insensitive comparer.\n      Array.Sort(words, 1, 3, revComparer);\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the reverse case-insensitive comparer:&quot;);\n      DisplayValues(words);\n\n      // Sort the entire array using the default comparer.\n      Array.Sort(words);\n      Console.WriteLine( &quot;After sorting the entire array by using the default comparer:&quot;);\n      DisplayValues(words);\n\n      // Sort the entire array by using the reverse case-insensitive comparer.\n      Array.Sort(words, revComparer);\n      Console.WriteLine( &quot;After sorting the entire array using the reverse case-insensitive comparer:&quot;);\n      DisplayValues(words);\n   }\n \n   public static void DisplayValues(String[] arr)  \n   {\n      for ( int i = arr.GetLowerBound(0); i &lt;= arr.GetUpperBound(0);\n            i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, arr[i] );\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    The original order of elements in the array:\n//       [0] : The\n//       [1] : QUICK\n//       [2] : BROWN\n//       [3] : FOX\n//       [4] : jumps\n//       [5] : over\n//       [6] : the\n//       [7] : lazy\n//       [8] : dog\n//    \n//    After sorting elements 1-3 by using the default comparer:\n//       [0] : The\n//       [1] : BROWN\n//       [2] : FOX\n//       [3] : QUICK\n//       [4] : jumps\n//       [5] : over\n//       [6] : the\n//       [7] : lazy\n//       [8] : dog\n//    \n//    After sorting elements 1-3 by using the reverse case-insensitive comparer:\n//       [0] : The\n//       [1] : QUICK\n//       [2] : FOX\n//       [3] : BROWN\n//       [4] : jumps\n//       [5] : over\n//       [6] : the\n//       [7] : lazy\n//       [8] : dog\n//    \n//    After sorting the entire array by using the default comparer:\n//       [0] : BROWN\n//       [1] : dog\n//       [2] : FOX\n//       [3] : jumps\n//       [4] : lazy\n//       [5] : over\n//       [6] : QUICK\n//       [7] : the\n//       [8] : The\n//    \n//    After sorting the entire array using the reverse case-insensitive comparer:\n//       [0] : the\n//       [1] : The\n//       [2] : QUICK\n//       [3] : over\n//       [4] : lazy\n//       [5] : jumps\n//       [6] : FOX\n//       [7] : dog\n//       [8] : BROWN    \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Sort#1\">Imports System.Collections\n\nPublic Class ReverseComparer : Implements IComparer\n   &#39; Call CaseInsensitiveComparer.Compare with the parameters reversed.\n   Function Compare(x As Object, y As Object) As Integer _\n            Implements IComparer.Compare\n      Return New CaseInsensitiveComparer().Compare(y, x)\n   End Function \nEnd Class\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Create and initialize a new array.\n      Dim words() As String =  { &quot;The&quot;, &quot;QUICK&quot;, &quot;BROWN&quot;, &quot;FOX&quot;, &quot;jumps&quot;, \n                                 &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; }\n      &#39; Instantiate a new custom comparer.\n      Dim revComparer As New ReverseComparer()\n\n      &#39; Display the values of the array.\n      Console.WriteLine( &quot;The original order of elements in the array:&quot; )\n      DisplayValues(words)\n\n      &#39; Sort a section of the array using the default comparer.\n      Array.Sort(words, 1, 3)\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the default comparer:&quot;)\n      DisplayValues(words)\n\n      &#39; Sort a section of the array using the reverse case-insensitive comparer.\n      Array.Sort(words, 1, 3, revComparer)\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the reverse case-insensitive comparer:&quot;)\n      DisplayValues(words)\n\n      &#39; Sort the entire array using the default comparer.\n      Array.Sort(words)\n      Console.WriteLine( &quot;After sorting the entire array by using the default comparer:&quot;)\n      DisplayValues(words)\n\n      &#39; Sort the entire array by using the reverse case-insensitive comparer.\n      Array.Sort(words, revComparer)\n      Console.WriteLine( &quot;After sorting the entire array using the reverse case-insensitive comparer:&quot;)\n      DisplayValues(words)\n   End Sub \n\n   Public Sub DisplayValues(arr() As String)\n      For i As Integer = arr.GetLowerBound(0) To arr.GetUpperBound(0)\n         Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, arr(i))\n      Next \n      Console.WriteLine()\n   End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;    The original order of elements in the array:\n&#39;       [0] : The\n&#39;       [1] : QUICK\n&#39;       [2] : BROWN\n&#39;       [3] : FOX\n&#39;       [4] : jumps\n&#39;       [5] : over\n&#39;       [6] : the\n&#39;       [7] : lazy\n&#39;       [8] : dog\n&#39;    \n&#39;    After sorting elements 1-3 by using the default comparer:\n&#39;       [0] : The\n&#39;       [1] : BROWN\n&#39;       [2] : FOX\n&#39;       [3] : QUICK\n&#39;       [4] : jumps\n&#39;       [5] : over\n&#39;       [6] : the\n&#39;       [7] : lazy\n&#39;       [8] : dog\n&#39;    \n&#39;    After sorting elements 1-3 by using the reverse case-insensitive comparer:\n&#39;       [0] : The\n&#39;       [1] : QUICK\n&#39;       [2] : FOX\n&#39;       [3] : BROWN\n&#39;       [4] : jumps\n&#39;       [5] : over\n&#39;       [6] : the\n&#39;       [7] : lazy\n&#39;       [8] : dog\n&#39;    \n&#39;    After sorting the entire array by using the default comparer:\n&#39;       [0] : BROWN\n&#39;       [1] : dog\n&#39;       [2] : FOX\n&#39;       [3] : jumps\n&#39;       [4] : lazy\n&#39;       [5] : over\n&#39;       [6] : QUICK\n&#39;       [7] : the\n&#39;       [8] : The\n&#39;    \n&#39;    After sorting the entire array using the reverse case-insensitive comparer:\n&#39;       [0] : the\n&#39;       [1] : The\n&#39;       [2] : QUICK\n&#39;       [3] : over\n&#39;       [4] : lazy\n&#39;       [5] : jumps\n&#39;       [6] : FOX\n&#39;       [7] : dog\n&#39;       [8] : BROWN\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort_System_Array_System_Array_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(Array,Array,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts a range of elements in a pair of one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort (Array keys, Array items, int index, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keys</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the keys to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>items</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the items that correspond to each of the keys in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to sort only the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range to sort.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>keys</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p>The <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>keys</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>items</code> is not <code>null</code>, and the length of <code>keys</code> is greater than the length of <code>items</code>.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>length</code> do not specify a valid range in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> -or-  </p>\n<p> <code>items</code> is not <code>null</code>, and <code>index</code> and <code>length</code> do not specify a valid range in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>One or more elements in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> do not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each key in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> has a corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. When a key is repositioned during the sorting, the corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is similarly repositioned. Therefore, the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is sorted according to the arrangement of the corresponding keys in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> Each key within the specified range of elements in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other key.  </p>\n<p> You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.Sort2#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class myReverserClass: public IComparer\n{\nprivate:\n\n   // Calls CaseInsensitiveComparer::Compare with the parameters reversed.\n   virtual int Compare( Object^ x, Object^ y ) = IComparer::Compare\n   {\n      return ((gcnew CaseInsensitiveComparer)-&gt;Compare( y, x ));\n   }\n};\n\nvoid PrintKeysAndValues( array&lt;String^&gt;^myKeys, array&lt;String^&gt;^myValues )\n{\n   for ( int i = 0; i &lt; myKeys-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot; {0, -10}: {1}&quot;, myKeys[ i ], myValues[ i ] );\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   // Creates and initializes a new Array and a new custom comparer.\n   array&lt;String^&gt;^myKeys = {&quot;red&quot;,&quot;GREEN&quot;,&quot;YELLOW&quot;,&quot;BLUE&quot;,&quot;purple&quot;,&quot;black&quot;,&quot;orange&quot;};\n   array&lt;String^&gt;^myValues = {&quot;strawberries&quot;,&quot;PEARS&quot;,&quot;LIMES&quot;,&quot;BERRIES&quot;,&quot;grapes&quot;,&quot;olives&quot;,&quot;cantaloupe&quot;};\n   IComparer^ myComparer = gcnew myReverserClass;\n\n   // Displays the values of the Array.\n   Console::WriteLine( &quot;The Array initially contains the following values:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n\n   // Sorts a section of the Array using the default comparer.\n   Array::Sort( myKeys, myValues, 1, 3 );\n   Console::WriteLine( &quot;After sorting a section of the Array using the default comparer:&quot; );\n\n   // Sorts a section of the Array using the reverse case-insensitive comparer.\n   Array::Sort( myKeys, myValues, 1, 3, myComparer );\n   Console::WriteLine( &quot;After sorting a section of the Array using the reverse case-insensitive comparer:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n\n   // Sorts the entire Array using the default comparer.\n   Array::Sort( myKeys, myValues );\n   Console::WriteLine( &quot;After sorting the entire Array using the default comparer:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n\n   // Sorts the entire Array using the reverse case-insensitive comparer.\n   Array::Sort( myKeys, myValues, myComparer );\n   Console::WriteLine( &quot;After sorting the entire Array using the reverse case-insensitive comparer:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n}\n\n/* \nThis code produces the following output.\n\nThe Array initially contains the following values:\n   red       : strawberries\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the default comparer:\n   red       : strawberries\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the reverse case-insensitive comparer:\n   red       : strawberries\n   YELLOW    : LIMES\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting the entire Array using the default comparer:\n   black     : olives\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   orange    : cantaloupe\n   purple    : grapes\n   red       : strawberries\n   YELLOW    : LIMES\n\nAfter sorting the entire Array using the reverse case-insensitive comparer:\n   YELLOW    : LIMES\n   red       : strawberries\n   purple    : grapes\n   orange    : cantaloupe\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   black     : olives\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.Sort2#1\">using System;\nusing System.Collections;\n\npublic class SamplesArray  {\n \n   public class myReverserClass : IComparer  {\n\n      // Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      int IComparer.Compare( Object x, Object y )  {\n          return( (new CaseInsensitiveComparer()).Compare( y, x ) );\n      }\n\n   }\n\n   public static void Main()  {\n \n      // Creates and initializes a new Array and a new custom comparer.\n      String[] myKeys = { &quot;red&quot;, &quot;GREEN&quot;, &quot;YELLOW&quot;, &quot;BLUE&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;orange&quot; };\n      String[] myValues = { &quot;strawberries&quot;, &quot;PEARS&quot;, &quot;LIMES&quot;, &quot;BERRIES&quot;, &quot;grapes&quot;, &quot;olives&quot;, &quot;cantaloupe&quot; };\n      IComparer myComparer = new myReverserClass();\n \n      // Displays the values of the Array.\n      Console.WriteLine( &quot;The Array initially contains the following values:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n \n      // Sorts a section of the Array using the default comparer.\n      Array.Sort( myKeys, myValues, 1, 3 );\n      Console.WriteLine( &quot;After sorting a section of the Array using the default comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n      // Sorts a section of the Array using the reverse case-insensitive comparer.\n      Array.Sort( myKeys, myValues, 1, 3, myComparer );\n      Console.WriteLine( &quot;After sorting a section of the Array using the reverse case-insensitive comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n      // Sorts the entire Array using the default comparer.\n      Array.Sort( myKeys, myValues );\n      Console.WriteLine( &quot;After sorting the entire Array using the default comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n      // Sorts the entire Array using the reverse case-insensitive comparer.\n      Array.Sort( myKeys, myValues, myComparer );\n      Console.WriteLine( &quot;After sorting the entire Array using the reverse case-insensitive comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n   }\n \n   public static void PrintKeysAndValues( String[] myKeys, String[] myValues )  {\n      for ( int i = 0; i &lt; myKeys.Length; i++ )  {\n         Console.WriteLine( &quot;   {0,-10}: {1}&quot;, myKeys[i], myValues[i] );\n      }\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nThe Array initially contains the following values:\n   red       : strawberries\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the default comparer:\n   red       : strawberries\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the reverse case-insensitive comparer:\n   red       : strawberries\n   YELLOW    : LIMES\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting the entire Array using the default comparer:\n   black     : olives\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   orange    : cantaloupe\n   purple    : grapes\n   red       : strawberries\n   YELLOW    : LIMES\n\nAfter sorting the entire Array using the reverse case-insensitive comparer:\n   YELLOW    : LIMES\n   red       : strawberries\n   purple    : grapes\n   orange    : cantaloupe\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   black     : olives\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Sort2#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArray\n\n   Public Class myReverserClass\n      Implements IComparer\n\n      &#39; Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      Function Compare(x As [Object], y As [Object]) As Integer _\n         Implements IComparer.Compare\n         Return New CaseInsensitiveComparer().Compare(y, x)\n      End Function &#39;IComparer.Compare\n\n   End Class &#39;myReverserClass\n\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new Array and a new custom comparer.\n      Dim myKeys As [String]() =  {&quot;red&quot;, &quot;GREEN&quot;, &quot;YELLOW&quot;, &quot;BLUE&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;orange&quot;}\n      Dim myValues As [String]() =  {&quot;strawberries&quot;, &quot;PEARS&quot;, &quot;LIMES&quot;, &quot;BERRIES&quot;, &quot;grapes&quot;, &quot;olives&quot;, &quot;cantaloupe&quot;}\n      Dim myComparer = New myReverserClass()\n\n      &#39; Displays the values of the Array.\n      Console.WriteLine(&quot;The Array initially contains the following values:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts a section of the Array using the default comparer.\n      Array.Sort(myKeys, myValues, 1, 3)\n      Console.WriteLine(&quot;After sorting a section of the Array using the default comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts a section of the Array using the reverse case-insensitive comparer.\n      Array.Sort(myKeys, myValues, 1, 3, myComparer)\n      Console.WriteLine(&quot;After sorting a section of the Array using the reverse case-insensitive comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts the entire Array using the default comparer.\n      Array.Sort(myKeys, myValues)\n      Console.WriteLine(&quot;After sorting the entire Array using the default comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts the entire Array using the reverse case-insensitive comparer.\n      Array.Sort(myKeys, myValues, myComparer)\n      Console.WriteLine(&quot;After sorting the entire Array using the reverse case-insensitive comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintKeysAndValues(myKeys() As [String], myValues() As [String])\n\n      Dim i As Integer\n      For i = 0 To myKeys.Length - 1\n         Console.WriteLine(&quot;   {0,-10}: {1}&quot;, myKeys(i), myValues(i))\n      Next i\n      Console.WriteLine()\n\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The Array initially contains the following values:\n&#39;   red       : strawberries\n&#39;   GREEN     : PEARS\n&#39;   YELLOW    : LIMES\n&#39;   BLUE      : BERRIES\n&#39;   purple    : grapes\n&#39;   black     : olives\n&#39;   orange    : cantaloupe\n&#39;\n&#39;After sorting a section of the Array using the default comparer:\n&#39;   red       : strawberries\n&#39;   BLUE      : BERRIES\n&#39;   GREEN     : PEARS\n&#39;   YELLOW    : LIMES\n&#39;   purple    : grapes\n&#39;   black     : olives\n&#39;   orange    : cantaloupe\n&#39;\n&#39;After sorting a section of the Array using the reverse case-insensitive comparer:\n&#39;   red       : strawberries\n&#39;   YELLOW    : LIMES\n&#39;   GREEN     : PEARS\n&#39;   BLUE      : BERRIES\n&#39;   purple    : grapes\n&#39;   black     : olives\n&#39;   orange    : cantaloupe\n&#39;\n&#39;After sorting the entire Array using the default comparer:\n&#39;   black     : olives\n&#39;   BLUE      : BERRIES\n&#39;   GREEN     : PEARS\n&#39;   orange    : cantaloupe\n&#39;   purple    : grapes\n&#39;   red       : strawberries\n&#39;   YELLOW    : LIMES\n&#39;\n&#39;After sorting the entire Array using the reverse case-insensitive comparer:\n&#39;   YELLOW    : LIMES\n&#39;   red       : strawberries\n&#39;   purple    : grapes\n&#39;   orange    : cantaloupe\n&#39;   GREEN     : PEARS\n&#39;   BLUE      : BERRIES\n&#39;   black     : olives\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort_System_Array_System_Int32_System_Int32_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Array_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(Array,Int32,Int32,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in a range of elements in a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort (Array array, int index, int length, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.  </p>\n<p> -or-  </p>\n<p> The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and one or more elements in <code>array</code> do not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>comparer</code> is <code>null</code>, each element within the specified range of elements in <code>array</code> must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other element in <code>array</code>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> The .NET Framework includes predefined <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementations listed in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Implementation</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">System.Collections.CaseInsensitiveComparer</a></td>\n<td>Compares any two objects, but performs a case-insensitive comparison of strings.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.comparer#System_Collections_Comparer_Default\" data-linktype=\"relative-path\">System.Collections.Comparer.Default</a></td>\n<td>Compares any two objects by using the sorting conventions of the current culture.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.comparer#System_Collections_Comparer_DefaultInvariant\" data-linktype=\"relative-path\">System.Collections.Comparer.DefaultInvariant</a></td>\n<td>Compares any two objects by using the sorting conventions of the invariant culture.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a></td>\n<td>Compares two objects of type <code>T</code> by using the type&#39;s default sort order.</td>\n</tr>\n</tbody>\n</table>\n<p> You can also support custom comparisons by providing an instance of your own <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to the <code>comparer</code> parameter. The example does this by defining a <code>ReverseComparer</code> class that reverses the default sort order for instances of a type and performs case-insensitive string comparison.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sort the values in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.Sort#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ReverseComparer : IComparer\n{\npublic:\n   // Call CaseInsensitiveComparer::Compare with the parameters reversed.\n   virtual int Compare(Object^ x, Object^ y) = IComparer::Compare\n   {\n      return ((gcnew CaseInsensitiveComparer)-&gt;Compare(y, x));\n   }\n};\n\nvoid DisplayValues(array&lt;String^&gt;^ arr)\n{\n   for (int i = arr-&gt;GetLowerBound(0); i &lt;= arr-&gt;GetUpperBound(0); i++)\n      Console::WriteLine( &quot;   [{0}] : {1}&quot;, i, arr[ i ] );\n\n   Console::WriteLine();\n}\n\nint main()\n{\n   // Create and initialize a new array. and a new custom comparer.\n   array&lt;String^&gt;^ words = { &quot;The&quot;,&quot;QUICK&quot;,&quot;BROWN&quot;,&quot;FOX&quot;,&quot;jumps&quot;,\n                             &quot;over&quot;,&quot;the&quot;,&quot;lazy&quot;,&quot;dog&quot; };\n   // Instantiate the reverse comparer.\n   IComparer^ revComparer = gcnew ReverseComparer();\n   \n   // Display the values of the Array.\n   Console::WriteLine( &quot;The original order of elements in the array:&quot; );\n   DisplayValues(words);\n\n   // Sort a section of the array using the default comparer.\n   Array::Sort(words, 1, 3);\n   Console::WriteLine( &quot;After sorting elements 1-3 by using the default comparer:&quot;);\n   DisplayValues(words);\n\n   // Sort a section of the array using the reverse case-insensitive comparer.\n   Array::Sort(words, 1, 3, revComparer);\n   Console::WriteLine( &quot;After sorting elements 1-3 by using the reverse case-insensitive comparer:&quot;);\n   DisplayValues(words);\n\n   // Sort the entire array using the default comparer.\n   Array::Sort(words);\n   Console::WriteLine( &quot;After sorting the entire array by using the default comparer:&quot;);\n   DisplayValues(words);\n\n   // Sort the entire array by using the reverse case-insensitive comparer.\n   Array::Sort(words, revComparer);\n   Console::WriteLine( &quot;After sorting the entire array using the reverse case-insensitive comparer:&quot;);\n   DisplayValues(words);\n}\n\n/* \nThis code produces the following output.\n\nThe Array initially contains the following values:\n   [0] : The\n   [1] : QUICK\n   [2] : BROWN\n   [3] : FOX\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter sorting a section of the Array using the default comparer:\n   [0] : The\n   [1] : BROWN\n   [2] : FOX\n   [3] : QUICK\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter sorting a section of the Array using the reverse case-insensitive comparer:\n   [0] : The\n   [1] : QUICK\n   [2] : FOX\n   [3] : BROWN\n   [4] : jumps\n   [5] : over\n   [6] : the\n   [7] : lazy\n   [8] : dog\n\nAfter sorting the entire Array using the default comparer:\n   [0] : BROWN\n   [1] : dog\n   [2] : FOX\n   [3] : jumps\n   [4] : lazy\n   [5] : over\n   [6] : QUICK\n   [7] : the\n   [8] : The\n\nAfter sorting the entire Array using the reverse case-insensitive comparer:\n   [0] : the\n   [1] : The\n   [2] : QUICK\n   [3] : over\n   [4] : lazy\n   [5] : jumps\n   [6] : FOX\n   [7] : dog\n   [8] : BROWN\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.Sort#1\">using System;\nusing System.Collections;\n\npublic class ReverseComparer : IComparer  \n{\n   // Call CaseInsensitiveComparer.Compare with the parameters reversed.\n   public int Compare(Object x, Object y)  \n   {\n       return (new CaseInsensitiveComparer()).Compare(y, x );\n   }\n}\n\npublic class Example \n{\n   public static void Main()  \n   {\n      // Create and initialize a new array. \n      String[] words = { &quot;The&quot;, &quot;QUICK&quot;, &quot;BROWN&quot;, &quot;FOX&quot;, &quot;jumps&quot;, \n                         &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; };\n      // Instantiate the reverse comparer.\n      IComparer revComparer = new ReverseComparer();\n \n      // Display the values of the array.\n      Console.WriteLine( &quot;The original order of elements in the array:&quot; );\n      DisplayValues(words);\n \n      // Sort a section of the array using the default comparer.\n      Array.Sort(words, 1, 3);\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the default comparer:&quot;);\n      DisplayValues(words);\n\n      // Sort a section of the array using the reverse case-insensitive comparer.\n      Array.Sort(words, 1, 3, revComparer);\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the reverse case-insensitive comparer:&quot;);\n      DisplayValues(words);\n\n      // Sort the entire array using the default comparer.\n      Array.Sort(words);\n      Console.WriteLine( &quot;After sorting the entire array by using the default comparer:&quot;);\n      DisplayValues(words);\n\n      // Sort the entire array by using the reverse case-insensitive comparer.\n      Array.Sort(words, revComparer);\n      Console.WriteLine( &quot;After sorting the entire array using the reverse case-insensitive comparer:&quot;);\n      DisplayValues(words);\n   }\n \n   public static void DisplayValues(String[] arr)  \n   {\n      for ( int i = arr.GetLowerBound(0); i &lt;= arr.GetUpperBound(0);\n            i++ )  {\n         Console.WriteLine( &quot;   [{0}] : {1}&quot;, i, arr[i] );\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    The original order of elements in the array:\n//       [0] : The\n//       [1] : QUICK\n//       [2] : BROWN\n//       [3] : FOX\n//       [4] : jumps\n//       [5] : over\n//       [6] : the\n//       [7] : lazy\n//       [8] : dog\n//    \n//    After sorting elements 1-3 by using the default comparer:\n//       [0] : The\n//       [1] : BROWN\n//       [2] : FOX\n//       [3] : QUICK\n//       [4] : jumps\n//       [5] : over\n//       [6] : the\n//       [7] : lazy\n//       [8] : dog\n//    \n//    After sorting elements 1-3 by using the reverse case-insensitive comparer:\n//       [0] : The\n//       [1] : QUICK\n//       [2] : FOX\n//       [3] : BROWN\n//       [4] : jumps\n//       [5] : over\n//       [6] : the\n//       [7] : lazy\n//       [8] : dog\n//    \n//    After sorting the entire array by using the default comparer:\n//       [0] : BROWN\n//       [1] : dog\n//       [2] : FOX\n//       [3] : jumps\n//       [4] : lazy\n//       [5] : over\n//       [6] : QUICK\n//       [7] : the\n//       [8] : The\n//    \n//    After sorting the entire array using the reverse case-insensitive comparer:\n//       [0] : the\n//       [1] : The\n//       [2] : QUICK\n//       [3] : over\n//       [4] : lazy\n//       [5] : jumps\n//       [6] : FOX\n//       [7] : dog\n//       [8] : BROWN    \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Sort#1\">Imports System.Collections\n\nPublic Class ReverseComparer : Implements IComparer\n   &#39; Call CaseInsensitiveComparer.Compare with the parameters reversed.\n   Function Compare(x As Object, y As Object) As Integer _\n            Implements IComparer.Compare\n      Return New CaseInsensitiveComparer().Compare(y, x)\n   End Function \nEnd Class\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Create and initialize a new array.\n      Dim words() As String =  { &quot;The&quot;, &quot;QUICK&quot;, &quot;BROWN&quot;, &quot;FOX&quot;, &quot;jumps&quot;, \n                                 &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; }\n      &#39; Instantiate a new custom comparer.\n      Dim revComparer As New ReverseComparer()\n\n      &#39; Display the values of the array.\n      Console.WriteLine( &quot;The original order of elements in the array:&quot; )\n      DisplayValues(words)\n\n      &#39; Sort a section of the array using the default comparer.\n      Array.Sort(words, 1, 3)\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the default comparer:&quot;)\n      DisplayValues(words)\n\n      &#39; Sort a section of the array using the reverse case-insensitive comparer.\n      Array.Sort(words, 1, 3, revComparer)\n      Console.WriteLine( &quot;After sorting elements 1-3 by using the reverse case-insensitive comparer:&quot;)\n      DisplayValues(words)\n\n      &#39; Sort the entire array using the default comparer.\n      Array.Sort(words)\n      Console.WriteLine( &quot;After sorting the entire array by using the default comparer:&quot;)\n      DisplayValues(words)\n\n      &#39; Sort the entire array by using the reverse case-insensitive comparer.\n      Array.Sort(words, revComparer)\n      Console.WriteLine( &quot;After sorting the entire array using the reverse case-insensitive comparer:&quot;)\n      DisplayValues(words)\n   End Sub \n\n   Public Sub DisplayValues(arr() As String)\n      For i As Integer = arr.GetLowerBound(0) To arr.GetUpperBound(0)\n         Console.WriteLine(&quot;   [{0}] : {1}&quot;, i, arr(i))\n      Next \n      Console.WriteLine()\n   End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;    The original order of elements in the array:\n&#39;       [0] : The\n&#39;       [1] : QUICK\n&#39;       [2] : BROWN\n&#39;       [3] : FOX\n&#39;       [4] : jumps\n&#39;       [5] : over\n&#39;       [6] : the\n&#39;       [7] : lazy\n&#39;       [8] : dog\n&#39;    \n&#39;    After sorting elements 1-3 by using the default comparer:\n&#39;       [0] : The\n&#39;       [1] : BROWN\n&#39;       [2] : FOX\n&#39;       [3] : QUICK\n&#39;       [4] : jumps\n&#39;       [5] : over\n&#39;       [6] : the\n&#39;       [7] : lazy\n&#39;       [8] : dog\n&#39;    \n&#39;    After sorting elements 1-3 by using the reverse case-insensitive comparer:\n&#39;       [0] : The\n&#39;       [1] : QUICK\n&#39;       [2] : FOX\n&#39;       [3] : BROWN\n&#39;       [4] : jumps\n&#39;       [5] : over\n&#39;       [6] : the\n&#39;       [7] : lazy\n&#39;       [8] : dog\n&#39;    \n&#39;    After sorting the entire array by using the default comparer:\n&#39;       [0] : BROWN\n&#39;       [1] : dog\n&#39;       [2] : FOX\n&#39;       [3] : jumps\n&#39;       [4] : lazy\n&#39;       [5] : over\n&#39;       [6] : QUICK\n&#39;       [7] : the\n&#39;       [8] : The\n&#39;    \n&#39;    After sorting the entire array using the reverse case-insensitive comparer:\n&#39;       [0] : the\n&#39;       [1] : The\n&#39;       [2] : QUICK\n&#39;       [3] : over\n&#39;       [4] : lazy\n&#39;       [5] : jumps\n&#39;       [6] : FOX\n&#39;       [7] : dog\n&#39;       [8] : BROWN\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort_System_Array_System_Array_System_Int32_System_Int32_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Array_Sort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort(Array,Array,Int32,Int32,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts a range of elements in a pair of one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort (Array keys, Array items, int index, int length, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keys</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the keys to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>items</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the items that correspond to each of the keys in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to sort only the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to use when comparing elements.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>keys</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.rankexception\" data-linktype=\"relative-path\">RankException</a></div>\r\n                  </div>\r\n                  <p>The <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is multidimensional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>keys</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>items</code> is not <code>null</code>, and the lower bound of <code>keys</code> does not match the lower bound of <code>items</code>.  </p>\n<p> -or-  </p>\n<p> <code>items</code> is not <code>null</code>, and the length of <code>keys</code> is greater than the length of <code>items</code>.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>length</code> do not specify a valid range in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> -or-  </p>\n<p> <code>items</code> is not <code>null</code>, and <code>index</code> and <code>length</code> do not specify a valid range in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> -or-  </p>\n<p> The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and one or more elements in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> do not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each key in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> has a corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. When a key is repositioned during the sorting, the corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is similarly repositioned. Therefore, the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is sorted according to the arrangement of the corresponding keys in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> If <code>comparer</code> is <code>null</code>, each key within the specified range of elements in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other key.  </p>\n<p> You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> The .NET Framework includes predefined <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementations listed in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Implementation</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.caseinsensitivecomparer\" data-linktype=\"relative-path\">System.Collections.CaseInsensitiveComparer</a></td>\n<td>Compares any two objects, but performs a case-insensitive comparison of strings.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.comparer#System_Collections_Comparer_Default\" data-linktype=\"relative-path\">System.Collections.Comparer.Default</a></td>\n<td>Compares any two objects by using the sorting conventions of the current culture.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.comparer#System_Collections_Comparer_DefaultInvariant\" data-linktype=\"relative-path\">System.Collections.Comparer.DefaultInvariant</a></td>\n<td>Compares any two objects by using the sorting conventions of the invariant culture.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a></td>\n<td>Compares two objects of type <code>T</code> by using the type&#39;s default sort order.</td>\n</tr>\n</tbody>\n</table>\n<p> You can also support custom comparisons by providing an instance of your own <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to the <code>comparer</code> parameter. The example does this by defining a custom <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation that reverses the default sort order and performs case-insensitive string comparison.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Array.Sort2#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class myReverserClass: public IComparer\n{\nprivate:\n\n   // Calls CaseInsensitiveComparer::Compare with the parameters reversed.\n   virtual int Compare( Object^ x, Object^ y ) = IComparer::Compare\n   {\n      return ((gcnew CaseInsensitiveComparer)-&gt;Compare( y, x ));\n   }\n};\n\nvoid PrintKeysAndValues( array&lt;String^&gt;^myKeys, array&lt;String^&gt;^myValues )\n{\n   for ( int i = 0; i &lt; myKeys-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot; {0, -10}: {1}&quot;, myKeys[ i ], myValues[ i ] );\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   // Creates and initializes a new Array and a new custom comparer.\n   array&lt;String^&gt;^myKeys = {&quot;red&quot;,&quot;GREEN&quot;,&quot;YELLOW&quot;,&quot;BLUE&quot;,&quot;purple&quot;,&quot;black&quot;,&quot;orange&quot;};\n   array&lt;String^&gt;^myValues = {&quot;strawberries&quot;,&quot;PEARS&quot;,&quot;LIMES&quot;,&quot;BERRIES&quot;,&quot;grapes&quot;,&quot;olives&quot;,&quot;cantaloupe&quot;};\n   IComparer^ myComparer = gcnew myReverserClass;\n\n   // Displays the values of the Array.\n   Console::WriteLine( &quot;The Array initially contains the following values:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n\n   // Sorts a section of the Array using the default comparer.\n   Array::Sort( myKeys, myValues, 1, 3 );\n   Console::WriteLine( &quot;After sorting a section of the Array using the default comparer:&quot; );\n\n   // Sorts a section of the Array using the reverse case-insensitive comparer.\n   Array::Sort( myKeys, myValues, 1, 3, myComparer );\n   Console::WriteLine( &quot;After sorting a section of the Array using the reverse case-insensitive comparer:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n\n   // Sorts the entire Array using the default comparer.\n   Array::Sort( myKeys, myValues );\n   Console::WriteLine( &quot;After sorting the entire Array using the default comparer:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n\n   // Sorts the entire Array using the reverse case-insensitive comparer.\n   Array::Sort( myKeys, myValues, myComparer );\n   Console::WriteLine( &quot;After sorting the entire Array using the reverse case-insensitive comparer:&quot; );\n   PrintKeysAndValues( myKeys, myValues );\n}\n\n/* \nThis code produces the following output.\n\nThe Array initially contains the following values:\n   red       : strawberries\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the default comparer:\n   red       : strawberries\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the reverse case-insensitive comparer:\n   red       : strawberries\n   YELLOW    : LIMES\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting the entire Array using the default comparer:\n   black     : olives\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   orange    : cantaloupe\n   purple    : grapes\n   red       : strawberries\n   YELLOW    : LIMES\n\nAfter sorting the entire Array using the reverse case-insensitive comparer:\n   YELLOW    : LIMES\n   red       : strawberries\n   purple    : grapes\n   orange    : cantaloupe\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   black     : olives\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Array.Sort2#1\">using System;\nusing System.Collections;\n\npublic class SamplesArray  {\n \n   public class myReverserClass : IComparer  {\n\n      // Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      int IComparer.Compare( Object x, Object y )  {\n          return( (new CaseInsensitiveComparer()).Compare( y, x ) );\n      }\n\n   }\n\n   public static void Main()  {\n \n      // Creates and initializes a new Array and a new custom comparer.\n      String[] myKeys = { &quot;red&quot;, &quot;GREEN&quot;, &quot;YELLOW&quot;, &quot;BLUE&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;orange&quot; };\n      String[] myValues = { &quot;strawberries&quot;, &quot;PEARS&quot;, &quot;LIMES&quot;, &quot;BERRIES&quot;, &quot;grapes&quot;, &quot;olives&quot;, &quot;cantaloupe&quot; };\n      IComparer myComparer = new myReverserClass();\n \n      // Displays the values of the Array.\n      Console.WriteLine( &quot;The Array initially contains the following values:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n \n      // Sorts a section of the Array using the default comparer.\n      Array.Sort( myKeys, myValues, 1, 3 );\n      Console.WriteLine( &quot;After sorting a section of the Array using the default comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n      // Sorts a section of the Array using the reverse case-insensitive comparer.\n      Array.Sort( myKeys, myValues, 1, 3, myComparer );\n      Console.WriteLine( &quot;After sorting a section of the Array using the reverse case-insensitive comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n      // Sorts the entire Array using the default comparer.\n      Array.Sort( myKeys, myValues );\n      Console.WriteLine( &quot;After sorting the entire Array using the default comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n      // Sorts the entire Array using the reverse case-insensitive comparer.\n      Array.Sort( myKeys, myValues, myComparer );\n      Console.WriteLine( &quot;After sorting the entire Array using the reverse case-insensitive comparer:&quot; );\n      PrintKeysAndValues( myKeys, myValues );\n\n   }\n \n   public static void PrintKeysAndValues( String[] myKeys, String[] myValues )  {\n      for ( int i = 0; i &lt; myKeys.Length; i++ )  {\n         Console.WriteLine( &quot;   {0,-10}: {1}&quot;, myKeys[i], myValues[i] );\n      }\n      Console.WriteLine();\n   }\n}\n\n\n/* \nThis code produces the following output.\n\nThe Array initially contains the following values:\n   red       : strawberries\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the default comparer:\n   red       : strawberries\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   YELLOW    : LIMES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting a section of the Array using the reverse case-insensitive comparer:\n   red       : strawberries\n   YELLOW    : LIMES\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   purple    : grapes\n   black     : olives\n   orange    : cantaloupe\n\nAfter sorting the entire Array using the default comparer:\n   black     : olives\n   BLUE      : BERRIES\n   GREEN     : PEARS\n   orange    : cantaloupe\n   purple    : grapes\n   red       : strawberries\n   YELLOW    : LIMES\n\nAfter sorting the entire Array using the reverse case-insensitive comparer:\n   YELLOW    : LIMES\n   red       : strawberries\n   purple    : grapes\n   orange    : cantaloupe\n   GREEN     : PEARS\n   BLUE      : BERRIES\n   black     : olives\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.Sort2#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesArray\n\n   Public Class myReverserClass\n      Implements IComparer\n\n      &#39; Calls CaseInsensitiveComparer.Compare with the parameters reversed.\n      Function Compare(x As [Object], y As [Object]) As Integer _\n         Implements IComparer.Compare\n         Return New CaseInsensitiveComparer().Compare(y, x)\n      End Function &#39;IComparer.Compare\n\n   End Class &#39;myReverserClass\n\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new Array and a new custom comparer.\n      Dim myKeys As [String]() =  {&quot;red&quot;, &quot;GREEN&quot;, &quot;YELLOW&quot;, &quot;BLUE&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;orange&quot;}\n      Dim myValues As [String]() =  {&quot;strawberries&quot;, &quot;PEARS&quot;, &quot;LIMES&quot;, &quot;BERRIES&quot;, &quot;grapes&quot;, &quot;olives&quot;, &quot;cantaloupe&quot;}\n      Dim myComparer = New myReverserClass()\n\n      &#39; Displays the values of the Array.\n      Console.WriteLine(&quot;The Array initially contains the following values:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts a section of the Array using the default comparer.\n      Array.Sort(myKeys, myValues, 1, 3)\n      Console.WriteLine(&quot;After sorting a section of the Array using the default comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts a section of the Array using the reverse case-insensitive comparer.\n      Array.Sort(myKeys, myValues, 1, 3, myComparer)\n      Console.WriteLine(&quot;After sorting a section of the Array using the reverse case-insensitive comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts the entire Array using the default comparer.\n      Array.Sort(myKeys, myValues)\n      Console.WriteLine(&quot;After sorting the entire Array using the default comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n      &#39; Sorts the entire Array using the reverse case-insensitive comparer.\n      Array.Sort(myKeys, myValues, myComparer)\n      Console.WriteLine(&quot;After sorting the entire Array using the reverse case-insensitive comparer:&quot;)\n      PrintKeysAndValues(myKeys, myValues)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintKeysAndValues(myKeys() As [String], myValues() As [String])\n\n      Dim i As Integer\n      For i = 0 To myKeys.Length - 1\n         Console.WriteLine(&quot;   {0,-10}: {1}&quot;, myKeys(i), myValues(i))\n      Next i\n      Console.WriteLine()\n\n   End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesArray\n\n\n&#39;This code produces the following output.\n&#39;\n&#39;The Array initially contains the following values:\n&#39;   red       : strawberries\n&#39;   GREEN     : PEARS\n&#39;   YELLOW    : LIMES\n&#39;   BLUE      : BERRIES\n&#39;   purple    : grapes\n&#39;   black     : olives\n&#39;   orange    : cantaloupe\n&#39;\n&#39;After sorting a section of the Array using the default comparer:\n&#39;   red       : strawberries\n&#39;   BLUE      : BERRIES\n&#39;   GREEN     : PEARS\n&#39;   YELLOW    : LIMES\n&#39;   purple    : grapes\n&#39;   black     : olives\n&#39;   orange    : cantaloupe\n&#39;\n&#39;After sorting a section of the Array using the reverse case-insensitive comparer:\n&#39;   red       : strawberries\n&#39;   YELLOW    : LIMES\n&#39;   GREEN     : PEARS\n&#39;   BLUE      : BERRIES\n&#39;   purple    : grapes\n&#39;   black     : olives\n&#39;   orange    : cantaloupe\n&#39;\n&#39;After sorting the entire Array using the default comparer:\n&#39;   black     : olives\n&#39;   BLUE      : BERRIES\n&#39;   GREEN     : PEARS\n&#39;   orange    : cantaloupe\n&#39;   purple    : grapes\n&#39;   red       : strawberries\n&#39;   YELLOW    : LIMES\n&#39;\n&#39;After sorting the entire Array using the reverse case-insensitive comparer:\n&#39;   YELLOW    : LIMES\n&#39;   red       : strawberries\n&#39;   purple    : grapes\n&#39;   orange    : cantaloupe\n&#39;   GREEN     : PEARS\n&#39;   BLUE      : BERRIES\n&#39;   black     : olives\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort__1___0___\">\r\n    \r\n            <a id=\"System_Array_Sort_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort&lt;T&gt;(T[])</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in an entire <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <span class=\"xref\">stem.IComparable`1</span> generic interface implementation of each element of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort&lt;T&gt; (T[] array);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to sort.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>One or more elements in <code>array</code> do not implement the <span class=\"xref\">stem.IComparable`1</span> generic interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each element of <code>array</code> must implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface to be capable of comparisons with every other element in <code>array</code>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the Sort(T) generic method overload and the[BinarySearch<t\\>(T&lt;xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29&gt; generic method overload. An array of strings is created, in no particular order.  <p>\n<p> The array is displayed, sorted, and displayed again.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The calls to the Sort(T) and <a class=\"xref\" href=\"system.array#System_Array_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  </p>\n</div>\n<p> The [BinarySearch<t\\>(T&lt;xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%29&gt; generic method overload is then used to search for two strings, one that is not in the array and one that is. The array and the return value of the <a class=\"xref\" href=\"system.array#System_Array_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> method are passed to the <code>ShowWhere</code> generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array. The index is negative if the string is not n the array, so the <code>ShowWhere</code> method takes the bitwise complement (the ~ operator in C# and Visual C++, <code>Xor</code> -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.  <p>\n<pre><code class=\"lang-cs\" name=\"Array_SortSearch#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = {&quot;Pachycephalosaurus&quot;, \n                              &quot;Amargasaurus&quot;, \n                              &quot;Tyrannosaurus&quot;, \n                              &quot;Mamenchisaurus&quot;, \n                              &quot;Deinonychus&quot;, \n                              &quot;Edmontosaurus&quot;};\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Sort&quot;);\n        Array.Sort(dinosaurs);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>BinarySearch for &#39;Coelophysis&#39;:&quot;);\n        int index = Array.BinarySearch(dinosaurs, &quot;Coelophysis&quot;);\n        ShowWhere(dinosaurs, index);\n\n        Console.WriteLine(&quot;<br>BinarySearch for &#39;Tyrannosaurus&#39;:&quot;);\n        index = Array.BinarySearch(dinosaurs, &quot;Tyrannosaurus&quot;);\n        ShowWhere(dinosaurs, index);\n    }\n\n    private static void ShowWhere&lt;T&gt;(T[] array, int index)\n    {\n        if (index&lt;0)\n        {\n            // If the index is negative, it represents the bitwise\n            // complement of the next larger element in the array.\n            //\n            index = ~index;\n\n            Console.Write(&quot;Not found. Sorts between: &quot;);\n\n            if (index == 0)\n                Console.Write(&quot;beginning of array and &quot;);\n            else\n                Console.Write(&quot;{0} and &quot;, array[index-1]);\n\n            if (index == array.Length)\n                Console.WriteLine(&quot;end of array.&quot;);\n            else\n                Console.WriteLine(&quot;{0}.&quot;, array[index]);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Found at index {0}.&quot;, index);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nTyrannosaurus\nMamenchisaurus\nDeinonychus\nEdmontosaurus\n\nSort\n\nAmargasaurus\nDeinonychus\nEdmontosaurus\nMamenchisaurus\nPachycephalosaurus\nTyrannosaurus\n\nBinarySearch for &#39;Coelophysis&#39;:\nNot found. Sorts between: Amargasaurus and Deinonychus.\n\nBinarySearch for &#39;Tyrannosaurus&#39;:\nFound at index 5.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_SortSearch#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\ngeneric&lt;typename T&gt; void ShowWhere(array&lt;T&gt;^ arr, int index)\n{\n    if (index&lt;0)\n    {\n        // If the index is negative, it represents the bitwise\n        // complement of the next larger element in the array.\n        //\n        index = ~index;\n\n        Console::Write(&quot;Not found. Sorts between: &quot;);\n\n        if (index == 0)\n            Console::Write(&quot;beginning of array and &quot;);\n        else\n            Console::Write(&quot;{0} and &quot;, arr[index-1]);\n\n        if (index == arr-&gt;Length)\n            Console::WriteLine(&quot;end of array.&quot;);\n        else\n            Console::WriteLine(&quot;{0}.&quot;, arr[index]);\n    }\n    else\n    {\n        Console::WriteLine(&quot;Found at index {0}.&quot;, index);\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = {&quot;Pachycephalosaurus&quot;, \n                                 &quot;Amargasaurus&quot;, \n                                 &quot;Tyrannosaurus&quot;, \n                                 &quot;Mamenchisaurus&quot;, \n                                 &quot;Deinonychus&quot;, \n                                 &quot;Edmontosaurus&quot;};\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Sort&quot;);\n    Array::Sort(dinosaurs);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>BinarySearch for &#39;Coelophysis&#39;:&quot;);\n    int index = Array::BinarySearch(dinosaurs, &quot;Coelophysis&quot;);\n    ShowWhere(dinosaurs, index);\n\n    Console::WriteLine(&quot;<br>BinarySearch for &#39;Tyrannosaurus&#39;:&quot;);\n    index = Array::BinarySearch(dinosaurs, &quot;Tyrannosaurus&quot;);\n    ShowWhere(dinosaurs, index);\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nTyrannosaurus\nMamenchisaurus\nDeinonychus\nEdmontosaurus\n\nSort\n\nAmargasaurus\nDeinonychus\nEdmontosaurus\nMamenchisaurus\nPachycephalosaurus\nTyrannosaurus\n\nBinarySearch for &#39;Coelophysis&#39;:\nNot found. Sorts between: Amargasaurus and Deinonychus.\n\nBinarySearch for &#39;Tyrannosaurus&#39;:\nFound at index 5.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_SortSearch#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { _\n            &quot;Pachycephalosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;Tyrannosaurus&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Deinonychus&quot;, _\n            &quot;Edmontosaurus&quot;  }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Sort&quot;)\n        Array.Sort(dinosaurs)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch for &#39;Coelophysis&#39;:&quot;)\n        Dim index As Integer = _\n            Array.BinarySearch(dinosaurs, &quot;Coelophysis&quot;)\n        ShowWhere(dinosaurs, index)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch for &#39;Tyrannosaurus&#39;:&quot;)\n        index = Array.BinarySearch(dinosaurs, &quot;Tyrannosaurus&quot;)\n        ShowWhere(dinosaurs, index)\n\n    End Sub\n\n    Private Shared Sub ShowWhere(Of T) _\n        (ByVal array() As T, ByVal index As Integer) \n\n        If index &lt; 0 Then\n            &#39; If the index is negative, it represents the bitwise\n            &#39; complement of the next larger element in the array.\n            &#39;\n            index = index Xor -1\n\n            Console.Write(&quot;Not found. Sorts between: &quot;)\n\n            If index = 0 Then\n                Console.Write(&quot;beginning of array and &quot;)\n            Else\n                Console.Write(&quot;{0} and &quot;, array(index - 1))\n            End If \n\n            If index = array.Length Then\n                Console.WriteLine(&quot;end of array.&quot;)\n            Else\n                Console.WriteLine(&quot;{0}.&quot;, array(index))\n            End If \n        Else\n            Console.WriteLine(&quot;Found at index {0}.&quot;, index)\n        End If\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Edmontosaurus\n&#39;\n&#39;Sort\n&#39;\n&#39;Amargasaurus\n&#39;Deinonychus\n&#39;Edmontosaurus\n&#39;Mamenchisaurus\n&#39;Pachycephalosaurus\n&#39;Tyrannosaurus\n&#39;\n&#39;BinarySearch for &#39;Coelophysis&#39;:\n&#39;Not found. Sorts between: Amargasaurus and Deinonychus.\n&#39;\n&#39;BinarySearch for &#39;Tyrannosaurus&#39;:\n&#39;Found at index 5.\n</code></pre></t\\></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort__1___0___System_Collections_Generic_IComparer___0__\">\r\n    \r\n            <a id=\"System_Array_Sort_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort&lt;T&gt;(T[],IComparer&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort&lt;T&gt; (T[] array, System.Collections.Generic.IComparer&lt;T&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-base <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to sort</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface implementation to use when comparing elements, or <code>null</code> to use the <span class=\"xref\">stem.IComparable`1</span> generic interface implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and one or more elements in <code>array</code> do not implement the <span class=\"xref\">stem.IComparable`1</span> generic interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>comparer</code> is <code>null</code>, each element of <code>array</code> must implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface to be capable of comparisons with every other element in <code>array</code>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the Sort(T) generic method overload and the [BinarySearch<t\\>(T&lt;xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic method overload.  <p>\n<p> The code example defines an alternative comparer for strings, named <code>ReverseCompare</code>, which implements the <code>IComparer&lt;string&gt;</code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer&lt;String^&gt;</code> in Visual C++) generic interface. The comparer calls the <a class=\"xref\" href=\"system.string#System_String_CompareTo_System_String_\" data-linktype=\"relative-path\">CompareTo(String)</a> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  </p>\n<p> The array is displayed, sorted, and displayed again. Arrays must be sorted in order to use the <a class=\"xref\" href=\"system.array#System_Array_BinarySearch_\" data-linktype=\"relative-path\">BinarySearch</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The calls to the Sort(T) and [BinarySearch<t\\>(T&lt;xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  <p>\n</t\\></div>\n<p> The [BinarySearch<t\\>(T&lt;xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic method overload is then used to search for two strings, one that is not in the array and one that is. The array and the return value of the [BinarySearch<t\\>(T&lt;xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; method are passed to the <code>ShowWhere</code> generic method, which displays the index value if the string is found, and otherwise the elements the search string would fall between if it were in the array. The index is negative if the string is not n the array, so the <code>ShowWhere</code> method takes the bitwise complement (the ~ operator in C# and Visual C++, <code>Xor</code> -1 in Visual Basic) to obtain the index of the first element in the list that is larger than the search string.  <p>\n<pre><code class=\"lang-cs\" name=\"Array_SortSearchComparer#1\">using System;\nusing System.Collections.Generic;\n\npublic class ReverseComparer: IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        // Compare y and x in reverse order.\n        return y.CompareTo(x);\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = {&quot;Pachycephalosaurus&quot;, \n                              &quot;Amargasaurus&quot;, \n                              &quot;Tyrannosaurus&quot;, \n                              &quot;Mamenchisaurus&quot;, \n                              &quot;Deinonychus&quot;, \n                              &quot;Edmontosaurus&quot;};\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        ReverseComparer rc = new ReverseComparer();\n\n        Console.WriteLine(&quot;<br>Sort&quot;);\n        Array.Sort(dinosaurs, rc);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>BinarySearch for &#39;Coelophysis&#39;:&quot;);\n        int index = Array.BinarySearch(dinosaurs, &quot;Coelophysis&quot;, rc);\n        ShowWhere(dinosaurs, index);\n\n        Console.WriteLine(&quot;<br>BinarySearch for &#39;Tyrannosaurus&#39;:&quot;);\n        index = Array.BinarySearch(dinosaurs, &quot;Tyrannosaurus&quot;, rc);\n        ShowWhere(dinosaurs, index);\n    }\n\n    private static void ShowWhere&lt;T&gt;(T[] array, int index)\n    {\n        if (index&lt;0)\n        {\n            // If the index is negative, it represents the bitwise\n            // complement of the next larger element in the array.\n            //\n            index = ~index;\n\n            Console.Write(&quot;Not found. Sorts between: &quot;);\n\n            if (index == 0)\n                Console.Write(&quot;beginning of array and &quot;);\n            else\n                Console.Write(&quot;{0} and &quot;, array[index-1]);\n\n            if (index == array.Length)\n                Console.WriteLine(&quot;end of array.&quot;);\n            else\n                Console.WriteLine(&quot;{0}.&quot;, array[index]);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Found at index {0}.&quot;, index);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nTyrannosaurus\nMamenchisaurus\nDeinonychus\nEdmontosaurus\n\nSort\n\nTyrannosaurus\nPachycephalosaurus\nMamenchisaurus\nEdmontosaurus\nDeinonychus\nAmargasaurus\n\nBinarySearch for &#39;Coelophysis&#39;:\nNot found. Sorts between: Deinonychus and Amargasaurus.\n\nBinarySearch for &#39;Tyrannosaurus&#39;:\nFound at index 0.\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_SortSearchComparer#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class ReverseComparer: IComparer&lt;String^&gt;\n{\npublic:\n    virtual int Compare(String^ x, String^ y)\n    {\n        // Compare y and x in reverse order.\n        return y-&gt;CompareTo(x);\n    }\n};\n\ngeneric&lt;typename T&gt; void ShowWhere(array&lt;T&gt;^ arr, int index)\n{\n    if (index&lt;0)\n    {\n        // If the index is negative, it represents the bitwise\n        // complement of the next larger element in the array.\n        //\n        index = ~index;\n\n        Console::Write(&quot;Not found. Sorts between: &quot;);\n\n        if (index == 0)\n            Console::Write(&quot;beginning of array and &quot;);\n        else\n            Console::Write(&quot;{0} and &quot;, arr[index-1]);\n\n        if (index == arr-&gt;Length)\n            Console::WriteLine(&quot;end of array.&quot;);\n        else\n            Console::WriteLine(&quot;{0}.&quot;, arr[index]);\n    }\n    else\n    {\n        Console::WriteLine(&quot;Found at index {0}.&quot;, index);\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = {&quot;Pachycephalosaurus&quot;, \n                                 &quot;Amargasaurus&quot;, \n                                 &quot;Tyrannosaurus&quot;, \n                                 &quot;Mamenchisaurus&quot;, \n                                 &quot;Deinonychus&quot;, \n                                 &quot;Edmontosaurus&quot;};\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    ReverseComparer^ rc = gcnew ReverseComparer();\n\n    Console::WriteLine(&quot;<br>Sort&quot;);\n    Array::Sort(dinosaurs, rc);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>BinarySearch for &#39;Coelophysis&#39;:&quot;);\n    int index = Array::BinarySearch(dinosaurs, &quot;Coelophysis&quot;, rc);\n    ShowWhere(dinosaurs, index);\n\n    Console::WriteLine(&quot;<br>BinarySearch for &#39;Tyrannosaurus&#39;:&quot;);\n    index = Array::BinarySearch(dinosaurs, &quot;Tyrannosaurus&quot;, rc);\n    ShowWhere(dinosaurs, index);\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nTyrannosaurus\nMamenchisaurus\nDeinonychus\nEdmontosaurus\n\nSort\n\nTyrannosaurus\nPachycephalosaurus\nMamenchisaurus\nEdmontosaurus\nDeinonychus\nAmargasaurus\n\nBinarySearch for &#39;Coelophysis&#39;:\nNot found. Sorts between: Deinonychus and Amargasaurus.\n\nBinarySearch for &#39;Tyrannosaurus&#39;:\nFound at index 0.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_SortSearchComparer#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class ReverseComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare(ByVal x As String, _\n        ByVal y As String) As Integer _\n        Implements IComparer(Of String).Compare\n\n        &#39; Compare y and x in reverse order.\n        Return y.CompareTo(x)\n\n    End Function\nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { _\n            &quot;Pachycephalosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;Tyrannosaurus&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Deinonychus&quot;, _\n            &quot;Edmontosaurus&quot;  }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Dim rc As New ReverseComparer()\n\n        Console.WriteLine(vbLf &amp; &quot;Sort&quot;)\n        Array.Sort(dinosaurs, rc)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch for &#39;Coelophysis&#39;:&quot;)\n        Dim index As Integer = _\n            Array.BinarySearch(dinosaurs, &quot;Coelophysis&quot;, rc)\n        ShowWhere(dinosaurs, index)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;BinarySearch for &#39;Tyrannosaurus&#39;:&quot;)\n        index = Array.BinarySearch(dinosaurs, &quot;Tyrannosaurus&quot;, rc)\n        ShowWhere(dinosaurs, index)\n\n    End Sub\n\n    Private Shared Sub ShowWhere(Of T) _\n        (ByVal array() As T, ByVal index As Integer) \n\n        If index &lt; 0 Then\n            &#39; If the index is negative, it represents the bitwise\n            &#39; complement of the next larger element in the array.\n            &#39;\n            index = index Xor -1\n\n            Console.Write(&quot;Not found. Sorts between: &quot;)\n\n            If index = 0 Then\n                Console.Write(&quot;beginning of array and &quot;)\n            Else\n                Console.Write(&quot;{0} and &quot;, array(index - 1))\n            End If \n\n            If index = array.Length Then\n                Console.WriteLine(&quot;end of array.&quot;)\n            Else\n                Console.WriteLine(&quot;{0}.&quot;, array(index))\n            End If \n        Else\n            Console.WriteLine(&quot;Found at index {0}.&quot;, index)\n        End If\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Tyrannosaurus\n&#39;Mamenchisaurus\n&#39;Deinonychus\n&#39;Edmontosaurus\n&#39;\n&#39;Sort\n&#39;\n&#39;Tyrannosaurus\n&#39;Pachycephalosaurus\n&#39;Mamenchisaurus\n&#39;Edmontosaurus\n&#39;Deinonychus\n&#39;Amargasaurus\n&#39;\n&#39;BinarySearch for &#39;Coelophysis&#39;:\n&#39;Not found. Sorts between: Deinonychus and Amargasaurus.\n&#39;\n&#39;BinarySearch for &#39;Tyrannosaurus&#39;:\n&#39;Found at index 0.\n</code></pre></t\\></t\\></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort__1___0___System_Comparison___0__\">\r\n    \r\n            <a id=\"System_Array_Sort_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort&lt;T&gt;(T[],Comparison&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <span class=\"xref\">stem.Comparison`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort&lt;T&gt; (T[] array, Comparison&lt;T&gt; comparison);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to sort</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparison</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.comparison-1\" data-linktype=\"relative-path\">Comparison<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Comparison`1</span> to use when comparing elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>comparison</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The implementation of <code>comparison</code> caused an error during the sort. For example, <code>comparison</code> might not return 0 when comparing an item with itself.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_System_Comparison__0__\" data-linktype=\"relative-path\">Sort(Comparison&lt;T&gt;)</a> method overload.  </p>\n<p> The code example defines an alternative comparison method for strings, named <code>CompareDinosByLength</code>. This method works as follows: First, the comparandsare tested for<code>null</code>, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  </p>\n<p> A array of strings is created and populated with four strings, in no particular order. The list also includes an empty string and a null reference. The list is displayed, sorted using a <a class=\"xref\" href=\"system.comparison-1\" data-linktype=\"relative-path\">Comparison&lt;T&gt;</a> generic delegate representing the <code>CompareDinosByLength</code> method, and displayed again.  </p>\n<pre><code class=\"lang-cpp\" name=\"Array_SortComparison#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\nint CompareDinosByLength(String^ x, String^ y)\n{\n    if (x == nullptr)\n    {\n        if (y == nullptr)\n        {\n            // If x is null and y is null, they&#39;re\n            // equal. \n            return 0;\n        }\n        else\n        {\n            // If x is null and y is not null, y\n            // is greater. \n            return -1;\n        }\n    }\n    else\n    {\n        // If x is not null...\n        //\n        if (y == nullptr)\n            // ...and y is null, x is greater.\n        {\n            return 1;\n        }\n        else\n        {\n            // ...and y is not null, compare the \n            // lengths of the two strings.\n            //\n            int retval = x-&gt;Length.CompareTo(y-&gt;Length);\n\n            if (retval != 0)\n            {\n                // If the strings are not of equal length,\n                // the longer string is greater.\n                //\n                return retval;\n            }\n            else\n            {\n                // If the strings are of equal length,\n                // sort them with ordinary string comparison.\n                //\n                return x-&gt;CompareTo(y);\n            }\n        }\n    }\n};\n\nvoid Display(array&lt;String^&gt;^ arr)\n{\n    Console::WriteLine();\n    for each(String^ s in arr)\n    {\n        if (s == nullptr)\n            Console::WriteLine(&quot;(null)&quot;);\n        else\n            Console::WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, s);\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = { \n        &quot;Pachycephalosaurus&quot;,\n        &quot;Amargasaurus&quot;,\n        &quot;&quot;,\n        nullptr,\n        &quot;Mamenchisaurus&quot;,\n        &quot;Deinonychus&quot; };\n    Display(dinosaurs);\n\n    Console::WriteLine(&quot;<br>Sort with generic Comparison&lt;String^&gt; delegate:&quot;);\n    Array::Sort(dinosaurs,\n        gcnew Comparison&lt;String^&gt;(CompareDinosByLength));\n    Display(dinosaurs);\n\n}\n\n/* This code example produces the following output:\n\n&quot;Pachycephalosaurus&quot;\n&quot;Amargasaurus&quot;\n&quot;&quot;\n(null)\n&quot;Mamenchisaurus&quot;\n&quot;Deinonychus&quot;\n\nSort with generic Comparison&lt;String^&gt; delegate:\n\n(null)\n&quot;&quot;\n&quot;Deinonychus&quot;\n&quot;Amargasaurus&quot;\n&quot;Mamenchisaurus&quot;\n&quot;Pachycephalosaurus&quot;\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_SortComparison#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class Example\n\n    Private Shared Function CompareDinosByLength( _\n        ByVal x As String, ByVal y As String) As Integer\n\n        If x Is Nothing Then\n            If y Is Nothing Then \n                &#39; If x is Nothing and y is Nothing, they&#39;re\n                &#39; equal. \n                Return 0\n            Else\n                &#39; If x is Nothing and y is not Nothing, y\n                &#39; is greater. \n                Return -1\n            End If\n        Else\n            &#39; If x is not Nothing...\n            &#39;\n            If y Is Nothing Then\n                &#39; ...and y is Nothing, x is greater.\n                Return 1\n            Else\n                &#39; ...and y is not Nothing, compare the \n                &#39; lengths of the two strings.\n                &#39;\n                Dim retval As Integer = _\n                    x.Length.CompareTo(y.Length)\n\n                If retval &lt;&gt; 0 Then \n                    &#39; If the strings are not of equal length,\n                    &#39; the longer string is greater.\n                    &#39;\n                    Return retval\n                Else\n                    &#39; If the strings are of equal length,\n                    &#39; sort them with ordinary string comparison.\n                    &#39;\n                    Return x.CompareTo(y)\n                End If\n            End If\n        End If\n\n    End Function\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { _\n            &quot;Pachycephalosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;&quot;, _\n            Nothing, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Deinonychus&quot; }\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;Sort with generic Comparison(Of String) delegate:&quot;)\n        Array.Sort(dinosaurs, AddressOf CompareDinosByLength)\n        Display(dinosaurs)\n\n    End Sub\n\n    Private Shared Sub Display(ByVal arr() As String)\n        Console.WriteLine()\n        For Each s As String In arr\n            If s Is Nothing Then\n                Console.WriteLine(&quot;(Nothing)&quot;)\n            Else\n                Console.WriteLine(&quot;&quot;&quot;{0}&quot;&quot;&quot;, s)\n            End If\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;&quot;Pachycephalosaurus&quot;\n&#39;&quot;Amargasaurus&quot;\n&#39;&quot;&quot;\n&#39;(Nothing)\n&#39;&quot;Mamenchisaurus&quot;\n&#39;&quot;Deinonychus&quot;\n&#39;\n&#39;Sort with generic Comparison(Of String) delegate:\n&#39;\n&#39;(Nothing)\n&#39;&quot;&quot;\n&#39;&quot;Deinonychus&quot;\n&#39;&quot;Amargasaurus&quot;\n&#39;&quot;Mamenchisaurus&quot;\n&#39;&quot;Pachycephalosaurus&quot;\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_SortComparison#1\">using System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    private static int CompareDinosByLength(string x, string y)\n    {\n        if (x == null)\n        {\n            if (y == null)\n            {\n                // If x is null and y is null, they&#39;re\n                // equal. \n                return 0;\n            }\n            else\n            {\n                // If x is null and y is not null, y\n                // is greater. \n                return -1;\n            }\n        }\n        else\n        {\n            // If x is not null...\n            //\n            if (y == null)\n                // ...and y is null, x is greater.\n            {\n                return 1;\n            }\n            else\n            {\n                // ...and y is not null, compare the \n                // lengths of the two strings.\n                //\n                int retval = x.Length.CompareTo(y.Length);\n\n                if (retval != 0)\n                {\n                    // If the strings are not of equal length,\n                    // the longer string is greater.\n                    //\n                    return retval;\n                }\n                else\n                {\n                    // If the strings are of equal length,\n                    // sort them with ordinary string comparison.\n                    //\n                    return x.CompareTo(y);\n                }\n            }\n        }\n    }\n\n    public static void Main()\n    {\n        string[] dinosaurs = {\n            &quot;Pachycephalosaurus&quot;,\n            &quot;Amargasaurus&quot;,\n            &quot;&quot;,\n            null,\n            &quot;Mamenchisaurus&quot;,\n            &quot;Deinonychus&quot; };\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>Sort with generic Comparison&lt;string&gt; delegate:&quot;);\n        Array.Sort(dinosaurs, CompareDinosByLength);\n        Display(dinosaurs);\n\n    }\n\n    private static void Display(string[] arr)\n    {\n        Console.WriteLine();\n        foreach( string s in arr )\n        {\n            if (s == null)\n                Console.WriteLine(&quot;(null)&quot;);\n            else\n                Console.WriteLine(&quot;\\&quot;{0}\\&quot;&quot;, s);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\n&quot;Pachycephalosaurus&quot;\n&quot;Amargasaurus&quot;\n&quot;&quot;\n(null)\n&quot;Mamenchisaurus&quot;\n&quot;Deinonychus&quot;\n\nSort with generic Comparison&lt;string&gt; delegate:\n\n(null)\n&quot;&quot;\n&quot;Deinonychus&quot;\n&quot;Amargasaurus&quot;\n&quot;Mamenchisaurus&quot;\n&quot;Pachycephalosaurus&quot;\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort__1___0___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_Sort_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort&lt;T&gt;(T[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in a range of elements in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <span class=\"xref\">stem.IComparable`1</span> generic interface implementation of each element of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort&lt;T&gt; (T[] array, int index, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to sort</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range to sort.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>One or more elements in <code>array</code> do not implement the <span class=\"xref\">stem.IComparable`1</span> generic interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each element within the specified range of elements in <code>array</code> must implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface to be capable of comparisons with every other element in <code>array</code>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the Sort(T) generic method overload and the [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic method overload for sorting a range in an array.  <p>\n<p> The code example defines an alternative comparer for strings, named <code>ReverseCompare</code>, which implements the <code>IComparer&lt;string&gt;</code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer\\&lt;String^&gt;</code> in Visual C++) generic interface. The comparer calls the <a class=\"xref\" href=\"system.string#System_String_CompareTo_System_String_\" data-linktype=\"relative-path\">CompareTo(String)</a> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  </p>\n<p> The code example creates and displays an array of dinosaur names, consisting of three herbivores followed by three carnivores (tyrannosaurids, to be precise). The Sort(T) generic method overload is used to sort the last three elements of the array, which is then displayed. The [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic method overload is used with <code>ReverseCompare</code> to sort the last three elements in reverse order. The thoroughly confused dinosaurs are displayed again.  <p>\n<div class=\"NOTE\"><h5>Note</h5><p> The calls to the [Sort&lt;T&gt;(T&lt;xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; and [BinarySearch<t\\>(T&lt;xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  <p>\n</t\\></div>\n<pre><code class=\"lang-cs\" name=\"Array_SortIntIntIComparer#1\">using System;\nusing System.Collections.Generic;\n\npublic class ReverseComparer: IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        // Compare y and x in reverse order.\n        return y.CompareTo(x);\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = {&quot;Pachycephalosaurus&quot;, \n                              &quot;Amargasaurus&quot;, \n                              &quot;Mamenchisaurus&quot;, \n                              &quot;Tarbosaurus&quot;,\n                              &quot;Tyrannosaurus&quot;, \n                              &quot;Albertasaurus&quot;};\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, 3, 3)&quot;);\n        Array.Sort(dinosaurs, 3, 3);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        ReverseComparer rc = new ReverseComparer();\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, 3, 3, rc)&quot;);\n        Array.Sort(dinosaurs, 3, 3, rc);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nTarbosaurus\nTyrannosaurus\nAlbertasaurus\n\nSort(dinosaurs, 3, 3)\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nAlbertasaurus\nTarbosaurus\nTyrannosaurus\n\nSort(dinosaurs, 3, 3, rc)\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nTyrannosaurus\nTarbosaurus\nAlbertasaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_SortIntIntIComparer#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class ReverseComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare(ByVal x As String, _\n        ByVal y As String) As Integer _\n        Implements IComparer(Of String).Compare\n\n        &#39; Compare y and x in reverse order.\n        Return y.CompareTo(x)\n\n    End Function\nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { _\n            &quot;Pachycephalosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Tarbosaurus&quot;, _\n            &quot;Tyrannosaurus&quot;, _\n            &quot;Albertasaurus&quot;  }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Sort(dinosaurs, 3, 3)&quot;)\n        Array.Sort(dinosaurs, 3, 3)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Dim rc As New ReverseComparer()\n\n        Console.WriteLine(vbLf &amp; &quot;Sort(dinosaurs, 3, 3, rc)&quot;)\n        Array.Sort(dinosaurs, 3, 3, rc)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Tarbosaurus\n&#39;Tyrannosaurus\n&#39;Albertasaurus\n&#39;\n&#39;Sort(dinosaurs, 3, 3)\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Albertasaurus\n&#39;Tarbosaurus\n&#39;Tyrannosaurus\n&#39;\n&#39;Sort(dinosaurs, 3, 3, rc)\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Tyrannosaurus\n&#39;Tarbosaurus\n&#39;Albertasaurus\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_SortIntIntIComparer#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class ReverseComparer: IComparer&lt;String^&gt;\n{\npublic:\n    virtual int Compare(String^ x, String^ y)\n    {\n        // Compare y and x in reverse order.\n        return y-&gt;CompareTo(x);\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = {&quot;Pachycephalosaurus&quot;, \n                                 &quot;Amargasaurus&quot;, \n                                 &quot;Mamenchisaurus&quot;,\n                                 &quot;Tarbosaurus&quot;,\n                                 &quot;Tyrannosaurus&quot;, \n                                 &quot;Albertasaurus&quot;};\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, 3, 3)&quot;);\n    Array::Sort(dinosaurs, 3, 3);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    ReverseComparer^ rc = gcnew ReverseComparer();\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, 3, 3, rc)&quot;);\n    Array::Sort(dinosaurs, 3, 3, rc);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nTarbosaurus\nTyrannosaurus\nAlbertasaurus\n\nSort(dinosaurs, 3, 3)\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nAlbertasaurus\nTarbosaurus\nTyrannosaurus\n\nSort(dinosaurs, 3, 3, rc)\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nTyrannosaurus\nTarbosaurus\nAlbertasaurus\n */\n</code></pre></tkey,â€‚tvalue></tkey,â€‚tvalue>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort__1___0___System_Int32_System_Int32_System_Collections_Generic_IComparer___0__\">\r\n    \r\n            <a id=\"System_Array_Sort_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort&lt;T&gt;(T[],Int32,Int32,IComparer&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts the elements in a range of elements in an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort&lt;T&gt; (T[] array, int index, int length, System.Collections.Generic.IComparer&lt;T&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface implementation to use when comparing elements, or <code>null</code> to use the <span class=\"xref\">stem.IComparable`1</span> generic interface implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> and <code>length</code> do not specify a valid range in <code>array</code>.  </p>\n<p> -or-  </p>\n<p> The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and one or more elements in <code>array</code> do not implement the <span class=\"xref\">stem.IComparable`1</span> generic interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>comparer</code> is <code>null</code>, each element within the specified range of elements in <code>array</code> must implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface to be capable of comparisons with every other element in <code>array</code>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the [Sort<t\\>(T&lt;xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; generic method overload and the [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic method overload for sorting a range in an array.  <p>\n<p> The code example defines an alternative comparer for strings, named <code>ReverseCompare</code>, which implements the <code>IComparer&lt;string&gt;</code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer&lt;String^&gt;</code> in Visual C++) generic interface. The comparer calls the <a class=\"xref\" href=\"system.string#System_String_CompareTo_System_String_\" data-linktype=\"relative-path\">CompareTo(String)</a> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  </p>\n<p> The code example creates and displays an array of dinosaur names, consisting of three herbivores followed by three carnivores (tyrannosaurids, to be precise). The [Sort<t\\>(T&lt;xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; generic method overload is used to sort the last three elements of the array, which is then displayed. The [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic method overload is used with <code>ReverseCompare</code> to sort the last three elements in reverse order. The thoroughly confused dinosaurs are displayed again.  <p>\n<div class=\"NOTE\"><h5>Note</h5><p> The calls to the [Sort<t\\>(T&lt;xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; and [BinarySearch&lt;T&gt;(T&lt;xref:System.Array.BinarySearch%60%601%28%60%600%5B%5D%2C%60%600%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first argument. If you use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  <p>\n</t\\></div>\n<pre><code class=\"lang-cs\" name=\"Array_SortIntIntIComparer#1\">using System;\nusing System.Collections.Generic;\n\npublic class ReverseComparer: IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        // Compare y and x in reverse order.\n        return y.CompareTo(x);\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = {&quot;Pachycephalosaurus&quot;, \n                              &quot;Amargasaurus&quot;, \n                              &quot;Mamenchisaurus&quot;, \n                              &quot;Tarbosaurus&quot;,\n                              &quot;Tyrannosaurus&quot;, \n                              &quot;Albertasaurus&quot;};\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, 3, 3)&quot;);\n        Array.Sort(dinosaurs, 3, 3);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n\n        ReverseComparer rc = new ReverseComparer();\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, 3, 3, rc)&quot;);\n        Array.Sort(dinosaurs, 3, 3, rc);\n\n        Console.WriteLine();\n        foreach( string dinosaur in dinosaurs )\n        {\n            Console.WriteLine(dinosaur);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nTarbosaurus\nTyrannosaurus\nAlbertasaurus\n\nSort(dinosaurs, 3, 3)\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nAlbertasaurus\nTarbosaurus\nTyrannosaurus\n\nSort(dinosaurs, 3, 3, rc)\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nTyrannosaurus\nTarbosaurus\nAlbertasaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Array_SortIntIntIComparer#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class ReverseComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare(ByVal x As String, _\n        ByVal y As String) As Integer _\n        Implements IComparer(Of String).Compare\n\n        &#39; Compare y and x in reverse order.\n        Return y.CompareTo(x)\n\n    End Function\nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { _\n            &quot;Pachycephalosaurus&quot;, _\n            &quot;Amargasaurus&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Tarbosaurus&quot;, _\n            &quot;Tyrannosaurus&quot;, _\n            &quot;Albertasaurus&quot;  }\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Sort(dinosaurs, 3, 3)&quot;)\n        Array.Sort(dinosaurs, 3, 3)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n        Dim rc As New ReverseComparer()\n\n        Console.WriteLine(vbLf &amp; &quot;Sort(dinosaurs, 3, 3, rc)&quot;)\n        Array.Sort(dinosaurs, 3, 3, rc)\n\n        Console.WriteLine()\n        For Each dinosaur As String In dinosaurs\n            Console.WriteLine(dinosaur)\n        Next\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Tarbosaurus\n&#39;Tyrannosaurus\n&#39;Albertasaurus\n&#39;\n&#39;Sort(dinosaurs, 3, 3)\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Albertasaurus\n&#39;Tarbosaurus\n&#39;Tyrannosaurus\n&#39;\n&#39;Sort(dinosaurs, 3, 3, rc)\n&#39;\n&#39;Pachycephalosaurus\n&#39;Amargasaurus\n&#39;Mamenchisaurus\n&#39;Tyrannosaurus\n&#39;Tarbosaurus\n&#39;Albertasaurus\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_SortIntIntIComparer#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class ReverseComparer: IComparer&lt;String^&gt;\n{\npublic:\n    virtual int Compare(String^ x, String^ y)\n    {\n        // Compare y and x in reverse order.\n        return y-&gt;CompareTo(x);\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = {&quot;Pachycephalosaurus&quot;, \n                                 &quot;Amargasaurus&quot;, \n                                 &quot;Mamenchisaurus&quot;,\n                                 &quot;Tarbosaurus&quot;,\n                                 &quot;Tyrannosaurus&quot;, \n                                 &quot;Albertasaurus&quot;};\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, 3, 3)&quot;);\n    Array::Sort(dinosaurs, 3, 3);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n\n    ReverseComparer^ rc = gcnew ReverseComparer();\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, 3, 3, rc)&quot;);\n    Array::Sort(dinosaurs, 3, 3, rc);\n\n    Console::WriteLine();\n    for each(String^ dinosaur in dinosaurs)\n    {\n        Console::WriteLine(dinosaur);\n    }\n}\n\n/* This code example produces the following output:\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nTarbosaurus\nTyrannosaurus\nAlbertasaurus\n\nSort(dinosaurs, 3, 3)\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nAlbertasaurus\nTarbosaurus\nTyrannosaurus\n\nSort(dinosaurs, 3, 3, rc)\n\nPachycephalosaurus\nAmargasaurus\nMamenchisaurus\nTyrannosaurus\nTarbosaurus\nAlbertasaurus\n */\n</code></pre></tkey,â€‚tvalue></t\\></tkey,â€‚tvalue></t\\>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort__2___0_____1___\">\r\n    \r\n            <a id=\"System_Array_Sort_TKey_TValue__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort&lt;TKey,TValue&gt;(TKey[],TValue[])</div>        \r\n          </div>\r\n    \r\n            <p>Sorts a pair of <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <span class=\"xref\">stem.IComparable`1</span> generic interface implementation of each key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keys</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the keys to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>items</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TValue[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the items that correspond to the keys in <code>keys</code>, or <code>null</code> to sort only <code>keys</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>keys</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>items</code> is not <code>null</code>, and the lower bound of <code>keys</code> does not match the lower bound of <code>items</code>.  </p>\n<p> -or-  </p>\n<p> <code>items</code> is not <code>null</code>, and the length of <code>keys</code> is greater than the length of <code>items</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>One or more elements in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> do not implement the <span class=\"xref\">stem.IComparable`1</span> generic interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each key in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> has a corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. When a key is repositioned during the sorting, the corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is similarly repositioned. Therefore, the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is sorted according to the arrangement of the corresponding keys in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> Each key in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface to be capable of comparisons with every other key.  </p>\n<p> You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an<a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the Sort(TKey,, [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt;, [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;, and [Sort&lt;TKey,â€‚TValue&gt;(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic method overloads, for sorting pairs of arrays that represent keys and values.  <p>\n<p> The code example defines an alternative comparer for strings, named <code>ReverseCompare</code>, which implements the <code>IComparer&lt;string&gt;</code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer&lt;String^&gt;</code> in Visual C++) generic interface. The comparer calls the <a class=\"xref\" href=\"system.string#System_String_CompareTo_System_String_\" data-linktype=\"relative-path\">CompareTo(String)</a> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  </p>\n<p> The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values). The arrays are then sorted and displayed several times:  </p>\n<ul>\n<li><p>The Sort(TKey, overload is used to sort both arrays in order of the dinosaur names in the first array.  </p>\n</li>\n<li><p>The [Sort&lt;TKey,â€‚TValue&gt;(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; overload and an instance of <code>ReverseCompare</code> are used to reverse the sort order of the paired arrays.  </p>\n</li>\n<li><p>The [Sort&lt;TKey,â€‚TValue&gt;(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; overload is used to sort the last three elements of both arrays.  </p>\n</li>\n<li><p>The [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; overload is used to sort the last three elements of both arrays in reverse order.  <p>\n</tkey,â€‚tvalue></li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments. If you use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"Array_Sort2IntIntIComparer#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class ReverseComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare(ByVal x As String, _\n        ByVal y As String) As Integer _\n        Implements IComparer(Of String).Compare\n\n        &#39; Compare y and x in reverse order.\n        Return y.CompareTo(x)\n\n    End Function\nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { _\n            &quot;Seismosaurus&quot;, _\n            &quot;Chasmosaurus&quot;, _\n            &quot;Coelophysis&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Caudipteryx&quot;, _\n            &quot;Cetiosaurus&quot;  }\n\n        Dim dinosaurSizes() As Integer = { 40, 5, 3, 22, 1, 18 }\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Dim rc As New ReverseComparer()\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes, rc)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes, rc)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes, 3, 3)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes, 3, 3, rc)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3, rc)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes)\n&#39;\n&#39;Caudipteryx: up to 1 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Seismosaurus: up to 40 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes, rc)\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes, 3, 3)\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes, 3, 3, rc)\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_Sort2IntIntIComparer#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class ReverseComparer: IComparer&lt;String^&gt;\n{\npublic:\n    virtual int Compare(String^ x, String^ y)\n    {\n        // Compare y and x in reverse order.\n        return y-&gt;CompareTo(x);\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = {\n            &quot;Seismosaurus&quot;, \n            &quot;Chasmosaurus&quot;, \n            &quot;Coelophysis&quot;, \n            &quot;Mamenchisaurus&quot;, \n            &quot;Caudipteryx&quot;, \n            &quot;Cetiosaurus&quot;  };\n\n    array&lt;int&gt;^ dinosaurSizes = { 40, 5, 3, 22, 1, 18 };\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    ReverseComparer^ rc = gcnew ReverseComparer();\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, rc)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes, rc);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes, 3, 3);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3, rc)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes, 3, 3, rc);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n}\n\n/* This code example produces the following output:\n\nSeismosaurus: up to 40 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\n\nSort(dinosaurs, dinosaurSizes)\n\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nSeismosaurus: up to 40 meters long.\n\nSort(dinosaurs, dinosaurSizes, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_Sort2IntIntIComparer#1\">using System;\nusing System.Collections.Generic;\n\npublic class ReverseComparer: IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        // Compare y and x in reverse order.\n        return y.CompareTo(x);\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = {\n            &quot;Seismosaurus&quot;, \n            &quot;Chasmosaurus&quot;, \n            &quot;Coelophysis&quot;, \n            &quot;Mamenchisaurus&quot;, \n            &quot;Caudipteryx&quot;, \n            &quot;Cetiosaurus&quot;  };\n\n        int[] dinosaurSizes = { 40, 5, 3, 22, 1, 18 };\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        ReverseComparer rc = new ReverseComparer();\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, rc)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes, rc);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3, rc)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3, rc);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nSeismosaurus: up to 40 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\n\nSort(dinosaurs, dinosaurSizes)\n\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nSeismosaurus: up to 40 meters long.\n\nSort(dinosaurs, dinosaurSizes, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n */\n</code></pre></tkey,â€‚tvalue></tkey,â€‚tvalue>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort__2___0_____1___System_Collections_Generic_IComparer___0__\">\r\n    \r\n            <a id=\"System_Array_Sort_TKey_TValue__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort&lt;TKey,TValue&gt;(TKey[],TValue[],IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts a pair of <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keys</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the keys to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>items</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TValue[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the items that correspond to the keys in <code>keys</code>, or <code>null</code> to sort only <code>keys</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface implementation to use when comparing elements, or <code>null</code> to use the <span class=\"xref\">stem.IComparable`1</span> generic interface implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>keys</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>items</code> is not <code>null</code>, and the lower bound of <code>keys</code> does not match the lower bound of <code>items</code>.  </p>\n<p> -or-  </p>\n<p> <code>items</code> is not <code>null</code>, and the length of <code>keys</code> is greater than the length of <code>items</code>.  </p>\n<p> -or-  </p>\n<p> The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and one or more elements in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> do not implement the <span class=\"xref\">stem.IComparable`1</span> generic interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each key in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> has a corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. When a key is repositioned during the sorting, the corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is similarly repositioned. Therefore, the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is sorted according to the arrangement of the corresponding keys in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> If <code>comparer</code> is <code>null</code>, each key in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface to be capable of comparisons with every other key.  </p>\n<p> You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29&gt;, Sort(TKey,,[Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;, and [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic method overloads, for sorting pairs of arrays that represent keys and values.  <p>\n<p> The code example defines an alternative comparer for strings, named <code>ReverseCompare</code>, which implements the <code>IComparer&lt;string&gt;</code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer\\&lt;String^&gt;</code> in Visual C++) generic interface. The comparer calls the <a class=\"xref\" href=\"system.string#System_String_CompareTo_System_String_\" data-linktype=\"relative-path\">CompareTo(String)</a> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  </p>\n<p> The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values). The arrays are then sorted and displayed several times:  </p>\n<ul>\n<li><p>The [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29&gt; overload is used to sort both arrays in order of the dinosaur names in the first array.  <p>\n</tkey,â€‚tvalue></li>\n<li><p>The Sort(TKey, overload and an instance of <code>ReverseCompare</code> are used to reverse the sort order of the paired arrays.  </p>\n</li>\n<li><p>The [Sort&lt;TKey,â€‚TValue&gt;(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; overload is used to sort the last three elements of both arrays.  </p>\n</li>\n<li><p>The [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; overload is used to sort the last three elements of both arrays in reverse order.  <p>\n</tkey,â€‚tvalue></li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments. If you use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"Array_Sort2IntIntIComparer#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class ReverseComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare(ByVal x As String, _\n        ByVal y As String) As Integer _\n        Implements IComparer(Of String).Compare\n\n        &#39; Compare y and x in reverse order.\n        Return y.CompareTo(x)\n\n    End Function\nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { _\n            &quot;Seismosaurus&quot;, _\n            &quot;Chasmosaurus&quot;, _\n            &quot;Coelophysis&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Caudipteryx&quot;, _\n            &quot;Cetiosaurus&quot;  }\n\n        Dim dinosaurSizes() As Integer = { 40, 5, 3, 22, 1, 18 }\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Dim rc As New ReverseComparer()\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes, rc)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes, rc)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes, 3, 3)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes, 3, 3, rc)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3, rc)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes)\n&#39;\n&#39;Caudipteryx: up to 1 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Seismosaurus: up to 40 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes, rc)\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes, 3, 3)\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes, 3, 3, rc)\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_Sort2IntIntIComparer#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class ReverseComparer: IComparer&lt;String^&gt;\n{\npublic:\n    virtual int Compare(String^ x, String^ y)\n    {\n        // Compare y and x in reverse order.\n        return y-&gt;CompareTo(x);\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = {\n            &quot;Seismosaurus&quot;, \n            &quot;Chasmosaurus&quot;, \n            &quot;Coelophysis&quot;, \n            &quot;Mamenchisaurus&quot;, \n            &quot;Caudipteryx&quot;, \n            &quot;Cetiosaurus&quot;  };\n\n    array&lt;int&gt;^ dinosaurSizes = { 40, 5, 3, 22, 1, 18 };\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    ReverseComparer^ rc = gcnew ReverseComparer();\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, rc)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes, rc);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes, 3, 3);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3, rc)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes, 3, 3, rc);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n}\n\n/* This code example produces the following output:\n\nSeismosaurus: up to 40 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\n\nSort(dinosaurs, dinosaurSizes)\n\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nSeismosaurus: up to 40 meters long.\n\nSort(dinosaurs, dinosaurSizes, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_Sort2IntIntIComparer#1\">using System;\nusing System.Collections.Generic;\n\npublic class ReverseComparer: IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        // Compare y and x in reverse order.\n        return y.CompareTo(x);\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = {\n            &quot;Seismosaurus&quot;, \n            &quot;Chasmosaurus&quot;, \n            &quot;Coelophysis&quot;, \n            &quot;Mamenchisaurus&quot;, \n            &quot;Caudipteryx&quot;, \n            &quot;Cetiosaurus&quot;  };\n\n        int[] dinosaurSizes = { 40, 5, 3, 22, 1, 18 };\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        ReverseComparer rc = new ReverseComparer();\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, rc)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes, rc);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3, rc)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3, rc);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nSeismosaurus: up to 40 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\n\nSort(dinosaurs, dinosaurSizes)\n\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nSeismosaurus: up to 40 meters long.\n\nSort(dinosaurs, dinosaurSizes, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n */\n</code></pre></tkey,â€‚tvalue></tkey,â€‚tvalue></tkey,â€‚tvalue>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort__2___0_____1___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_Sort_TKey_TValue__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort&lt;TKey,TValue&gt;(TKey[],TValue[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts a range of elements in a pair of <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the <span class=\"xref\">stem.IComparable`1</span> generic interface implementation of each key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items, int index, int length);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keys</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the keys to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>items</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TValue[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the items that correspond to the keys in <code>keys</code>, or <code>null</code> to sort only <code>keys</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range to sort.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>keys</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>keys</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>items</code> is not <code>null</code>, and the lower bound of <code>keys</code> does not match the lower bound of <code>items</code>.  </p>\n<p> -or-  </p>\n<p> <code>items</code> is not <code>null</code>, and the length of <code>keys</code> is greater than the length of <code>items</code>.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>length</code> do not specify a valid range in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> -or-  </p>\n<p> <code>items</code> is not <code>null</code>, and <code>index</code> and <code>length</code> do not specify a valid range in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>One or more elements in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> do not implement the <span class=\"xref\">stem.IComparable`1</span> generic interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each key in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> has a corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. When a key is repositioned during the sorting, the corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is similarly repositioned. Therefore, the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is sorted according to the arrangement of the corresponding keys in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> Each key within the specified range of elements in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface to be capable of comparisons with every other key.  </p>\n<p> You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the[Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29&gt;, [Sort&lt;TKey,â€‚TValue&gt;(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt;, Sort(TKey,, and [Sort&lt;TKey,â€‚TValue&gt;(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; generic method overloads, for sorting pairs of arrays that represent keys and values.  <p>\n<p> The code example defines an alternative comparer for strings, named <code>ReverseCompare</code>, which implements the <code>IComparer&lt;string&gt;</code> (<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer&lt;String^&gt;</code> in Visual C++) generic interface. The comparer calls the <a class=\"xref\" href=\"system.string#System_String_CompareTo_System_String_\" data-linktype=\"relative-path\">CompareTo(String)</a> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  </p>\n<p> The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values). The arrays are then sorted and displayed several times:  </p>\n<ul>\n<li><p>The [Sort&lt;TKey,â€‚TValue&gt;(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29&gt; overload is used to sort both arrays in order of the dinosaur names in the first array.  </p>\n</li>\n<li><p>The [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; overload and an instance of <code>ReverseCompare</code> are used to reverse the sort order of the paired arrays.  <p>\n</tkey,â€‚tvalue></li>\n<li><p>The Sort(TKey, overload is used to sort the last three elements of both arrays.  </p>\n</li>\n<li><p>The [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; overload is used to sort the last three elements of both arrays in reverse order.  <p>\n</tkey,â€‚tvalue></li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments. If you use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"Array_Sort2IntIntIComparer#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class ReverseComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare(ByVal x As String, _\n        ByVal y As String) As Integer _\n        Implements IComparer(Of String).Compare\n\n        &#39; Compare y and x in reverse order.\n        Return y.CompareTo(x)\n\n    End Function\nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { _\n            &quot;Seismosaurus&quot;, _\n            &quot;Chasmosaurus&quot;, _\n            &quot;Coelophysis&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Caudipteryx&quot;, _\n            &quot;Cetiosaurus&quot;  }\n\n        Dim dinosaurSizes() As Integer = { 40, 5, 3, 22, 1, 18 }\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Dim rc As New ReverseComparer()\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes, rc)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes, rc)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes, 3, 3)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes, 3, 3, rc)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3, rc)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes)\n&#39;\n&#39;Caudipteryx: up to 1 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Seismosaurus: up to 40 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes, rc)\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes, 3, 3)\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes, 3, 3, rc)\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_Sort2IntIntIComparer#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class ReverseComparer: IComparer&lt;String^&gt;\n{\npublic:\n    virtual int Compare(String^ x, String^ y)\n    {\n        // Compare y and x in reverse order.\n        return y-&gt;CompareTo(x);\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = {\n            &quot;Seismosaurus&quot;, \n            &quot;Chasmosaurus&quot;, \n            &quot;Coelophysis&quot;, \n            &quot;Mamenchisaurus&quot;, \n            &quot;Caudipteryx&quot;, \n            &quot;Cetiosaurus&quot;  };\n\n    array&lt;int&gt;^ dinosaurSizes = { 40, 5, 3, 22, 1, 18 };\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    ReverseComparer^ rc = gcnew ReverseComparer();\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, rc)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes, rc);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes, 3, 3);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3, rc)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes, 3, 3, rc);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n}\n\n/* This code example produces the following output:\n\nSeismosaurus: up to 40 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\n\nSort(dinosaurs, dinosaurSizes)\n\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nSeismosaurus: up to 40 meters long.\n\nSort(dinosaurs, dinosaurSizes, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_Sort2IntIntIComparer#1\">using System;\nusing System.Collections.Generic;\n\npublic class ReverseComparer: IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        // Compare y and x in reverse order.\n        return y.CompareTo(x);\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = {\n            &quot;Seismosaurus&quot;, \n            &quot;Chasmosaurus&quot;, \n            &quot;Coelophysis&quot;, \n            &quot;Mamenchisaurus&quot;, \n            &quot;Caudipteryx&quot;, \n            &quot;Cetiosaurus&quot;  };\n\n        int[] dinosaurSizes = { 40, 5, 3, 22, 1, 18 };\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        ReverseComparer rc = new ReverseComparer();\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, rc)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes, rc);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3, rc)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3, rc);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nSeismosaurus: up to 40 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\n\nSort(dinosaurs, dinosaurSizes)\n\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nSeismosaurus: up to 40 meters long.\n\nSort(dinosaurs, dinosaurSizes, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n */\n</code></pre></tkey,â€‚tvalue>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_Sort__2___0_____1___System_Int32_System_Int32_System_Collections_Generic_IComparer___0__\">\r\n    \r\n            <a id=\"System_Array_Sort_TKey_TValue__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sort&lt;TKey,TValue&gt;(TKey[],TValue[],Int32,Int32,IComparer&lt;TKey&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sorts a range of elements in a pair of <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> using the specified <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>keys</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TKey[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the keys to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>items</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">TValue[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that contains the items that correspond to the keys in <code>keys</code>, or <code>null</code> to sort only <code>keys</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting index of the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>length</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements in the range to sort.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer</a>&lt;<span class=\"xref\">TKey</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IComparer`1</span> generic interface implementation to use when comparing elements, or <code>null</code> to use the <span class=\"xref\">stem.IComparable`1</span> generic interface implementation of each element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>keys</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than the lower bound of <code>keys</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>items</code> is not <code>null</code>, and the lower bound of <code>keys</code> does not match the lower bound of <code>items</code>.  </p>\n<p> -or-  </p>\n<p> <code>items</code> is not <code>null</code>, and the length of <code>keys</code> is greater than the length of <code>items</code>.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>length</code> do not specify a valid range in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> -or-  </p>\n<p> <code>items</code> is not <code>null</code>, and <code>index</code> and <code>length</code> do not specify a valid range in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> -or-  </p>\n<p> The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and one or more elements in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> do not implement the <span class=\"xref\">stem.IComparable`1</span> generic interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each key in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> has a corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>. When a key is repositioned during the sorting, the corresponding item in the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is similarly repositioned. Therefore, the <code>items</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> is sorted according to the arrangement of the corresponding keys in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.  </p>\n<p> If <code>comparer</code> is <code>null</code>, each key within the specified range of elements in the <code>keys</code><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must implement the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> generic interface to be capable of comparisons with every other key.  </p>\n<p> You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n<p> If the sort is not successfully completed, the results are undefined.  </p>\n<p> This method uses the introspective sort (introsort) algorithm as follows:  </p>\n<ul>\n<li><p>If the partition size is fewer than 16 elements, it uses an <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" data-linktype=\"external\">insertion sort</a> algorithm.  </p>\n</li>\n<li><p>If the number of partitions exceeds 2 * Log<sup>N</sup>, where  <em>N</em> is the range of the input array, it uses a <a href=\"http://en.wikipedia.org/wiki/Heapsort\" data-linktype=\"external\">Heapsort</a> algorithm.  </p>\n</li>\n<li><p>Otherwise, it uses a <a href=\"http://en.wikipedia.org/wiki/Quicksort\" data-linktype=\"external\">Quicksort</a> algorithm.  </p>\n<p>This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  </p>\n<p>For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O(<code>n</code> log <code>n</code>) operation, where <code>n</code> is <code>length</code>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29&gt;, [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt;, [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;, and Sort(TKey, generic method overloads, for sorting pairs of arrays that represent keys and values.  <p>\n<p> The code example defines an alternative comparer for strings, named <code>ReverseCompare</code>, which implements the <code>IComparer&lt;string&gt;</code>(<code>IComparer(Of String)</code> in Visual Basic, <code>IComparer\\&lt;String^&gt;</code> in Visual C++) generic interface. The comparer calls the <a class=\"xref\" href=\"system.string#System_String_CompareTo_System_String_\" data-linktype=\"relative-path\">CompareTo(String)</a> method, reversing the order of the comparands so that the strings sort high-to-low instead of low-to-high.  </p>\n<p> The code example creates and displays an array of dinosaur names (the keys) and an array of integers representing the maximum length of each dinosaur in meters (the values). The arrays are then sorted and displayed several times:  </p>\n<ul>\n<li><p>The [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%29&gt; overload is used to sort both arrays in order of the dinosaur names in the first array.  <p>\n</tkey,â€‚tvalue></li>\n<li><p>The [Sort<tkey,â€‚tvalue>(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29&gt; overload and an instance of <code>ReverseCompare</code> are used to reverse the sort order of the paired arrays.  <p>\n</tkey,â€‚tvalue></li>\n<li><p>The [Sort&lt;TKey,â€‚TValue&gt;(TKey[],â€‚TValue&lt;xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt; overload is used to sort the last three elements of both arrays.  </p>\n</li>\n<li><p>The Sort(TKey, overload is used to sort the last three elements of both arrays in reverse order.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The calls to the generic methods do not look any different from calls to their nongeneric counterparts, because Visual Basic, C#, and C++ infer the type of the generic type parameter from the type of the first two arguments. If you use the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> to examine the Microsoft intermediate language (MSIL), you can see that the generic methods are being called.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"Array_Sort2IntIntIComparer#1\">Imports System\nImports System.Collections.Generic\n\nPublic Class ReverseComparer\n    Implements IComparer(Of String)\n\n    Public Function Compare(ByVal x As String, _\n        ByVal y As String) As Integer _\n        Implements IComparer(Of String).Compare\n\n        &#39; Compare y and x in reverse order.\n        Return y.CompareTo(x)\n\n    End Function\nEnd Class\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        Dim dinosaurs() As String = { _\n            &quot;Seismosaurus&quot;, _\n            &quot;Chasmosaurus&quot;, _\n            &quot;Coelophysis&quot;, _\n            &quot;Mamenchisaurus&quot;, _\n            &quot;Caudipteryx&quot;, _\n            &quot;Cetiosaurus&quot;  }\n\n        Dim dinosaurSizes() As Integer = { 40, 5, 3, 22, 1, 18 }\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Dim rc As New ReverseComparer()\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes, rc)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes, rc)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes, 3, 3)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Sort(dinosaurs, dinosaurSizes, 3, 3, rc)&quot;)\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3, rc)\n\n        Console.WriteLine()\n        For i As Integer = 0 To dinosaurs.Length - 1\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, _\n                dinosaurs(i), dinosaurSizes(i))\n        Next\n\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes)\n&#39;\n&#39;Caudipteryx: up to 1 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Seismosaurus: up to 40 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes, rc)\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes, 3, 3)\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;\n&#39;Sort(dinosaurs, dinosaurSizes, 3, 3, rc)\n&#39;\n&#39;Seismosaurus: up to 40 meters long.\n&#39;Mamenchisaurus: up to 22 meters long.\n&#39;Coelophysis: up to 3 meters long.\n&#39;Chasmosaurus: up to 5 meters long.\n&#39;Cetiosaurus: up to 18 meters long.\n&#39;Caudipteryx: up to 1 meters long.\n</code></pre><pre><code class=\"lang-cpp\" name=\"Array_Sort2IntIntIComparer#1\">using namespace System;\nusing namespace System::Collections::Generic;\n\npublic ref class ReverseComparer: IComparer&lt;String^&gt;\n{\npublic:\n    virtual int Compare(String^ x, String^ y)\n    {\n        // Compare y and x in reverse order.\n        return y-&gt;CompareTo(x);\n    }\n};\n\nvoid main()\n{\n    array&lt;String^&gt;^ dinosaurs = {\n            &quot;Seismosaurus&quot;, \n            &quot;Chasmosaurus&quot;, \n            &quot;Coelophysis&quot;, \n            &quot;Mamenchisaurus&quot;, \n            &quot;Caudipteryx&quot;, \n            &quot;Cetiosaurus&quot;  };\n\n    array&lt;int&gt;^ dinosaurSizes = { 40, 5, 3, 22, 1, 18 };\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    ReverseComparer^ rc = gcnew ReverseComparer();\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, rc)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes, rc);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes, 3, 3);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n\n    Console::WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3, rc)&quot;);\n    Array::Sort(dinosaurs, dinosaurSizes, 3, 3, rc);\n\n    Console::WriteLine();\n    for (int i = 0; i &lt; dinosaurs-&gt;Length; i++)\n    {\n        Console::WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n            dinosaurs[i], dinosaurSizes[i]);\n    }\n}\n\n/* This code example produces the following output:\n\nSeismosaurus: up to 40 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\n\nSort(dinosaurs, dinosaurSizes)\n\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nSeismosaurus: up to 40 meters long.\n\nSort(dinosaurs, dinosaurSizes, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"Array_Sort2IntIntIComparer#1\">using System;\nusing System.Collections.Generic;\n\npublic class ReverseComparer: IComparer&lt;string&gt;\n{\n    public int Compare(string x, string y)\n    {\n        // Compare y and x in reverse order.\n        return y.CompareTo(x);\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        string[] dinosaurs = {\n            &quot;Seismosaurus&quot;, \n            &quot;Chasmosaurus&quot;, \n            &quot;Coelophysis&quot;, \n            &quot;Mamenchisaurus&quot;, \n            &quot;Caudipteryx&quot;, \n            &quot;Cetiosaurus&quot;  };\n\n        int[] dinosaurSizes = { 40, 5, 3, 22, 1, 18 };\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        ReverseComparer rc = new ReverseComparer();\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, rc)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes, rc);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n\n        Console.WriteLine(&quot;<br>Sort(dinosaurs, dinosaurSizes, 3, 3, rc)&quot;);\n        Array.Sort(dinosaurs, dinosaurSizes, 3, 3, rc);\n\n        Console.WriteLine();\n        for (int i = 0; i &lt; dinosaurs.Length; i++)\n        {\n            Console.WriteLine(&quot;{0}: up to {1} meters long.&quot;, \n                dinosaurs[i], dinosaurSizes[i]);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nSeismosaurus: up to 40 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\n\nSort(dinosaurs, dinosaurSizes)\n\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\nCoelophysis: up to 3 meters long.\nMamenchisaurus: up to 22 meters long.\nSeismosaurus: up to 40 meters long.\n\nSort(dinosaurs, dinosaurSizes, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nCaudipteryx: up to 1 meters long.\nCetiosaurus: up to 18 meters long.\nChasmosaurus: up to 5 meters long.\n\nSort(dinosaurs, dinosaurSizes, 3, 3, rc)\n\nSeismosaurus: up to 40 meters long.\nMamenchisaurus: up to 22 meters long.\nCoelophysis: up to 3 meters long.\nChasmosaurus: up to 5 meters long.\nCetiosaurus: up to 18 meters long.\nCaudipteryx: up to 1 meters long.\n */\n</code></pre></tkey,â€‚tvalue></tkey,â€‚tvalue></tkey,â€‚tvalue>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_TrueForAll__1___0___System_Predicate___0__\">\r\n    \r\n            <a id=\"System_Array_TrueForAll_T__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrueForAll&lt;T&gt;(T[],Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether every element in the array matches the conditions defined by the specified predicate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TrueForAll&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional, zero-based <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> to check against the conditions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The predicate that defines the conditions to check against the elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if every element in <code>array</code> matches the conditions defined by the specified predicate; otherwise, <code>false</code>. If there are no elements in the array, the return value is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> is a delegate to a method that returns<code>true</code> if the object passed to it matches the conditions defined in the delegate.  The elements of <code>array</code> are individually passed to the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a>, and processing is stopped when the delegate returns <code>false</code> for any element.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> of <code>array</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example determines whether the last character of each element in a string array is a number. It creates two string arrays. The first arrayincludes both strings that end with alphabetic characters and strings that end with numeric characters.The second array consists only of strings that end with numeric characters. The example also defines an <code>EndWithANumber</code> method whose signature matches the <a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate. The example passes each array to the TrueForAll(T) method along with a delegate that represents the <code>EndsWithANumber</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Array.TrueForAll#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] values1 = { &quot;Y2K&quot;, &quot;A2000&quot;, &quot;DC2A6&quot;, &quot;MMXIV&quot;, &quot;0C3&quot; };\n      String[] values2 = { &quot;Y2&quot;, &quot;A2000&quot;, &quot;DC2A6&quot;, &quot;MMXIV_0&quot;, &quot;0C3&quot; };\n\n\n      if (Array.TrueForAll(values1, EndsWithANumber))\n         Console.WriteLine(&quot;All elements end with an integer.&quot;);\n      else\n         Console.WriteLine(&quot;Not all elements end with an integer.&quot;);\n       \n      if (Array.TrueForAll(values2, EndsWithANumber))\n         Console.WriteLine(&quot;All elements end with an integer.&quot;);\n      else\n         Console.WriteLine(&quot;Not all elements end with an integer.&quot;);\n   }\n\n   private static bool EndsWithANumber(String value) \n   {\n      int s;\n      return Int32.TryParse(value.Substring(value.Length - 1), out s);\n   }\n}\n// The example displays the following output:\n//       Not all elements end with an integer.\n//       All elements end with an integer.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.TrueForAll#2\">Module Example\n   Public Sub Main()\n      Dim values1() As String = { &quot;Y2K&quot;, &quot;A2000&quot;, &quot;DC2A6&quot;, &quot;MMXIV&quot;, &quot;0C3&quot; }\n      Dim values2() As String = { &quot;Y2&quot;, &quot;A2000&quot;, &quot;DC2A6&quot;, &quot;MMXIV_0&quot;, &quot;0C3&quot; }\n\n\n      If Array.TrueForAll(values1, AddressOf EndsWithANumber) Then\n         Console.WriteLine(&quot;All elements end with an integer.&quot;)\n      Else\n         Console.WriteLine(&quot;Not all elements end with an integer.&quot;)\n      End If  \n       \n      If Array.TrueForAll(values2, AddressOf EndsWithANumber) Then\n         Console.WriteLine(&quot;All elements end with an integer.&quot;)\n      Else\n         Console.WriteLine(&quot;Not all elements end with an integer.&quot;)\n      End If   \n   End Sub\n\n   Private Function EndsWithANumber(value As String) As Boolean\n      Dim s As Integer\n      Return Int32.TryParse(value.Substring(value.Length - 1), s)\n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Not all elements end with an integer.\n&#39;       All elements end with an integer.\n</code></pre><p> The following example is similar to the first, except that it passes the string array to the TrueForAll(T) method along with  a lambda expression that determines whether a particular array element ends with the string representation of a number.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Array.TrueForAll#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      String[] values = { &quot;Y2K&quot;, &quot;A2000&quot;, &quot;DC2A6&quot;, &quot;MMXIV&quot;, &quot;0C3&quot; };\n      if (Array.TrueForAll(values, value =&gt; {\n                                      int s; \n                                      return Int32.TryParse(value.Substring(value.Length - 1), out s); }\n                                   ))\n         Console.WriteLine(&quot;All elements end with an integer.&quot;);\n      else\n         Console.WriteLine(&quot;Not all elements end with an integer.&quot;);\n   }\n}\n// The example displays the following output:\n//        Not all elements end with an integer.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Array.TrueForAll#1\">Module Example\n   Public Sub Main()\n      Dim values() As String = { &quot;Y2K&quot;, &quot;A2000&quot;, &quot;DC2A6&quot;, &quot;MMXIV&quot;, &quot;0C3&quot; }\n      &#39;Dim values2() As String = { &quot;Y2&quot;, &quot;A2000&quot;, &quot;DC2A6&quot;, &quot;MMXIV_0&quot;, &quot;0C3&quot; }\n\n      If Array.TrueForAll(values, Function(value) \n                                     Dim s As Integer\n                                     Return Int32.TryParse(value.Substring(value.Length - 1), s)\n                                  End Function) Then\n         Console.WriteLine(&quot;All elements end with an integer.&quot;)\n      Else\n         Console.WriteLine(&quot;Not all elements end with an integer.&quot;)\n      End If   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Not all elements end with an integer.\n</code></pre><p> In both cases, the TrueForAll(T) method returns <code>false</code> as soon as it encounters the first array element that does not end in a number. Otherwise, it returns <code>true</code> after iterating all the elements in the array.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> As both examples show, in C# and Visual Basic, it is not necessary to create the <code>Predicate&lt;string&gt;</code> delegate (<code>Predicate(Of String)</code> in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.</p>\n</div>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Array_System_Collections_ICollection_Count\">\r\n    \r\n            <a id=\"System_Array_System_Collections_ICollection_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements contained in the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int System.Collections.ICollection.Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements contained in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance is cast to an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_System_Collections_IList_Add_System_Object_\">\r\n    \r\n            <a id=\"System_Array_System_Collections_IList_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Add(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Calling this method always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IList.Add (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to be added to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Adding a value to an array is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Ordinarily, an <a class=\"xref\" href=\"system.collections.ilist#System_Collections_IList_Add_\" data-linktype=\"relative-path\">Add</a> implementation adds a member to a collection. However, because arrays have a fixed size (the <a class=\"xref\" href=\"system.array#System_Array_IsFixedSize_\" data-linktype=\"relative-path\">IsFixedSize</a> property always returns <code>true</code>), this method always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception.  </p>\n<p> This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance is cast to an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_System_Collections_IList_Clear\">\r\n    \r\n            <a id=\"System_Array_System_Collections_IList_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all items from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList.Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance is cast to an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_System_Collections_IList_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Array_System_Collections_IList_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether an element is in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IList.Contains (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the current list. The element to locate can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is found in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance is cast to an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_System_Collections_IList_IndexOf_System_Object_\">\r\n    \r\n            <a id=\"System_Array_System_Collections_IList_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IndexOf(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines the index of a specific item in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IList.IndexOf (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the current list.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of value if found in the list; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance is cast to an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_System_Collections_IList_Insert_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Array_System_Collections_IList_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Insert(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts an item to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList.Insert (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index at which <code>value</code> should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a valid index in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is null reference in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance is cast to an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_System_Collections_IList_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_System_Collections_IList_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.IList.Item[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the element to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The element at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.ICollection.Count*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> does not have exactly one dimension.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance is cast to an<a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_System_Collections_IList_Remove_System_Object_\">\r\n    \r\n            <a id=\"System_Array_System_Collections_IList_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Remove(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList.Remove (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to remove from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance is cast to an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_System_Collections_IList_RemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Array_System_Collections_IList_RemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.RemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> item at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList.RemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>index is not a valid index in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance is cast to an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_System_Collections_IStructuralComparable_CompareTo_System_Object_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Array_System_Collections_IStructuralComparable_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralComparable.CompareTo(Object,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that compares the current object and <code>other</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that indicates the relationship of the current collection object to other, as shown in the following table.  </p>\n <table><thead><tr><th> Return value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> -1<br>\n </td><td> The current instance precedes <code>other</code>.<br>\n </td></tr><tr><td> 0<br>\n </td><td> The current instance and <code>other</code> are equal.<br>\n </td></tr><tr><td> 1<br>\n </td><td> The current instance follows <code>other</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance is cast to an <a class=\"xref\" href=\"system.collections.istructuralcomparable\" data-linktype=\"relative-path\">IStructuralComparable</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_System_Collections_IStructuralEquatable_Equals_System_Object_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Array_System_Collections_IStructuralEquatable_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.Equals(Object,IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether an object is equal to the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with the current instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that determines whether the current instance and <code>other</code> are equal.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the two objects are equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance is cast to an<a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a>interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Array_System_Collections_IStructuralEquatable_GetHashCode_System_Collections_IEqualityComparer_\">\r\n    \r\n            <a id=\"System_Array_System_Collections_IStructuralEquatable_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IStructuralEquatable.GetHashCode(IEqualityComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a hash code for the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that computes the hash code of the current object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The hash code for the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> instance is cast to an<a class=\"xref\" href=\"system.collections.istructuralequatable\" data-linktype=\"relative-path\">IStructuralEquatable</a>interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Array.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Array.yml\">\r\n<meta name=\"APIName\" content=\"System.Array\">\r\n<meta name=\"APIName\" content=\"System.Array.AsReadOnly&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.BinarySearch\">\r\n<meta name=\"APIName\" content=\"System.Array.BinarySearch&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.Clear\">\r\n<meta name=\"APIName\" content=\"System.Array.Clone\">\r\n<meta name=\"APIName\" content=\"System.Array.ConstrainedCopy\">\r\n<meta name=\"APIName\" content=\"System.Array.ConvertAll&lt;TInput,TOutput&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.Copy\">\r\n<meta name=\"APIName\" content=\"System.Array.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Array.CreateInstance\">\r\n<meta name=\"APIName\" content=\"System.Array.Empty&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.Exists&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.Find&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.FindAll&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.FindIndex&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.FindLast&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.FindLastIndex&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.ForEach&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Array.GetLength\">\r\n<meta name=\"APIName\" content=\"System.Array.GetLongLength\">\r\n<meta name=\"APIName\" content=\"System.Array.GetLowerBound\">\r\n<meta name=\"APIName\" content=\"System.Array.GetUpperBound\">\r\n<meta name=\"APIName\" content=\"System.Array.GetValue\">\r\n<meta name=\"APIName\" content=\"System.Array.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Array.IndexOf&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.Initialize\">\r\n<meta name=\"APIName\" content=\"System.Array.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Array.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Array.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Array.LastIndexOf\">\r\n<meta name=\"APIName\" content=\"System.Array.LastIndexOf&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.Length\">\r\n<meta name=\"APIName\" content=\"System.Array.LongLength\">\r\n<meta name=\"APIName\" content=\"System.Array.Rank\">\r\n<meta name=\"APIName\" content=\"System.Array.Resize&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.Reverse\">\r\n<meta name=\"APIName\" content=\"System.Array.SetValue\">\r\n<meta name=\"APIName\" content=\"System.Array.Sort\">\r\n<meta name=\"APIName\" content=\"System.Array.Sort&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.Sort&lt;TKey,TValue&gt;\">\r\n<meta name=\"APIName\" content=\"System.Array.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Array.ICollection.Count\">\r\n<meta name=\"APIName\" content=\"System.Array.IList.Add\">\r\n<meta name=\"APIName\" content=\"System.Array.IList.Clear\">\r\n<meta name=\"APIName\" content=\"System.Array.IList.Contains\">\r\n<meta name=\"APIName\" content=\"System.Array.IList.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Array.IList.Insert\">\r\n<meta name=\"APIName\" content=\"System.Array.IList.Item\">\r\n<meta name=\"APIName\" content=\"System.Array.IList.Remove\">\r\n<meta name=\"APIName\" content=\"System.Array.IList.RemoveAt\">\r\n<meta name=\"APIName\" content=\"System.Array.IStructuralComparable.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Array.IStructuralEquatable.Equals\">\r\n<meta name=\"APIName\" content=\"System.Array.IStructuralEquatable.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Array.TrueForAll&lt;T&gt;\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"cbc822cb-c0e6-e7ff-311e-33e4fa8c946e\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\Array.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.  \n To browse the .NET Framework source codâ€¦\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Array\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Array.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Array.yml","open_to_public_contributors":true,"api_name":["System.Array","System.Array.AsReadOnly<T>","System.Array.BinarySearch","System.Array.BinarySearch<T>","System.Array.Clear","System.Array.Clone","System.Array.ConstrainedCopy","System.Array.ConvertAll<TInput,TOutput>","System.Array.Copy","System.Array.CopyTo","System.Array.CreateInstance","System.Array.Empty<T>","System.Array.Exists<T>","System.Array.Find<T>","System.Array.FindAll<T>","System.Array.FindIndex<T>","System.Array.FindLast<T>","System.Array.FindLastIndex<T>","System.Array.ForEach<T>","System.Array.GetEnumerator","System.Array.GetLength","System.Array.GetLongLength","System.Array.GetLowerBound","System.Array.GetUpperBound","System.Array.GetValue","System.Array.IndexOf","System.Array.IndexOf<T>","System.Array.Initialize","System.Array.IsFixedSize","System.Array.IsReadOnly","System.Array.IsSynchronized","System.Array.LastIndexOf","System.Array.LastIndexOf<T>","System.Array.Length","System.Array.LongLength","System.Array.Rank","System.Array.Resize<T>","System.Array.Reverse","System.Array.SetValue","System.Array.Sort","System.Array.Sort<T>","System.Array.Sort<TKey,TValue>","System.Array.SyncRoot","System.Array.ICollection.Count","System.Array.IList.Add","System.Array.IList.Clear","System.Array.IList.Contains","System.Array.IList.IndexOf","System.Array.IList.Insert","System.Array.IList.Item","System.Array.IList.Remove","System.Array.IList.RemoveAt","System.Array.IStructuralComparable.CompareTo","System.Array.IStructuralEquatable.Equals","System.Array.IStructuralEquatable.GetHashCode","System.Array.TrueForAll<T>"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Array","System::Array","System.Array.AsReadOnly``1","System::Array::AsReadOnly``1","System.Array.BinarySearch","System::Array::BinarySearch","System.Array.BinarySearch``1","System::Array::BinarySearch``1","System.Array.Clear","System::Array::Clear","System.Array.Clone","System::Array::Clone","System.Array.ConstrainedCopy","System::Array::ConstrainedCopy","System.Array.ConvertAll``2","System::Array::ConvertAll``2","System.Array.Copy","System::Array::Copy","System.Array.CopyTo","System::Array::CopyTo","System.Array.CreateInstance","System::Array::CreateInstance","System.Array.Empty``1","System::Array::Empty``1","System.Array.Exists``1","System::Array::Exists``1","System.Array.Find``1","System::Array::Find``1","System.Array.FindAll``1","System::Array::FindAll``1","System.Array.FindIndex``1","System::Array::FindIndex``1","System.Array.FindLast``1","System::Array::FindLast``1","System.Array.FindLastIndex``1","System::Array::FindLastIndex``1","System.Array.ForEach``1","System::Array::ForEach``1","System.Array.GetEnumerator","System::Array::GetEnumerator","System.Array.GetLength","System::Array::GetLength","System.Array.GetLongLength","System::Array::GetLongLength","System.Array.GetLowerBound","System::Array::GetLowerBound","System.Array.GetUpperBound","System::Array::GetUpperBound","System.Array.GetValue","System::Array::GetValue","System.Array.IndexOf","System::Array::IndexOf","System.Array.IndexOf``1","System::Array::IndexOf``1","System.Array.Initialize","System::Array::Initialize","System.Array.IsFixedSize","System::Array::IsFixedSize","System.Array.IsReadOnly","System::Array::IsReadOnly","System.Array.IsSynchronized","System::Array::IsSynchronized","System.Array.LastIndexOf","System::Array::LastIndexOf","System.Array.LastIndexOf``1","System::Array::LastIndexOf``1","System.Array.Length","System::Array::Length","System.Array.LongLength","System::Array::LongLength","System.Array.Rank","System::Array::Rank","System.Array.Resize``1","System::Array::Resize``1","System.Array.Reverse","System::Array::Reverse","System.Array.SetValue","System::Array::SetValue","System.Array.Sort","System::Array::Sort","System.Array.Sort``1","System::Array::Sort``1","System.Array.Sort``2","System::Array::Sort``2","System.Array.SyncRoot","System::Array::SyncRoot","System.Array.System#Collections#ICollection#Count","System::Array::System#Collections#ICollection#Count","System.Array.System#Collections#IList#Add","System::Array::System#Collections#IList#Add","System.Array.System#Collections#IList#Clear","System::Array::System#Collections#IList#Clear","System.Array.System#Collections#IList#Contains","System::Array::System#Collections#IList#Contains","System.Array.System#Collections#IList#IndexOf","System::Array::System#Collections#IList#IndexOf","System.Array.System#Collections#IList#Insert","System::Array::System#Collections#IList#Insert","System.Array.System#Collections#IList#Item","System::Array::System#Collections#IList#Item","System.Array.System#Collections#IList#Remove","System::Array::System#Collections#IList#Remove","System.Array.System#Collections#IList#RemoveAt","System::Array::System#Collections#IList#RemoveAt","System.Array.System#Collections#IStructuralComparable#CompareTo","System::Array::System#Collections#IStructuralComparable#CompareTo","System.Array.System#Collections#IStructuralEquatable#Equals","System::Array::System#Collections#IStructuralEquatable#Equals","System.Array.System#Collections#IStructuralEquatable#GetHashCode","System::Array::System#Collections#IStructuralEquatable#GetHashCode","System.Array.TrueForAll``1","System::Array::TrueForAll``1"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"cbc822cb-c0e6-e7ff-311e-33e4fa8c946e","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\Array.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Array.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Array class | Microsoft Docs","_op_ogTitle":"Array class","description":"Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.  \n To browse the .NET Framework source codâ€¦","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Array","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.array","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.array","fileRelativePath":"System.Array.html"},"themesRelativePathToOutputRoot":"_themes/"}