{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Thread</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Creates and controls a thread, sets its priority, and gets its status.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Thread))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Runtime.InteropServices._Thread</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.constrainedexecution.criticalfinalizerobject\" data-linktype=\"relative-path\">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">Thread</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When a process starts, the common language runtime automatically creates a single foreground thread to execute application code. Along with this main foreground thread, a process can create one or more threads to execute a portion of the program code associated with the process. These threads can execute either in the foreground or in the background. In addition, you can use the <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> class to execute code on worker threads that are managed by the common language runtime.  </p>\n<p> In this section  </p>\n<p> <a href=\"#Starting\" data-linktype=\"self-bookmark\">Starting a thread</a><br> <a href=\"#Retrieving\" data-linktype=\"self-bookmark\">Retrieving Thread objects</a><br> <a href=\"#Foreground\" data-linktype=\"self-bookmark\">Foreground and background threads</a><br> <a href=\"#Culture\" data-linktype=\"self-bookmark\">Culture and threads</a><br> <a href=\"#Properties\" data-linktype=\"self-bookmark\">Getting information about and controlling threads</a><br> <a href=\"#Source\" data-linktype=\"self-bookmark\">Accessing the source code for the Thread class</a>  </p>\n<p><a name=\"Starting\"></a>   </p>\n<h2 id=\"starting-a-thread\">Starting a thread</h2>\n<p> You start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor. You then call the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_\" data-linktype=\"relative-path\">Start</a> method to begin execution.  </p>\n<p> The Thread constructors can take either of two delegate types, depending on whether you can pass an argument to the method to be executed:  </p>\n<ul>\n<li><p>If the method has no arguments, you pass a <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> delegate to  the constructor. It has the signature:  </p>\n<pre><code class=\"lang-c#\">public delegate void ThreadStart()  \n</code></pre><pre><code class=\"lang-vb\">Public Delegate Sub ThreadStart()  \n</code></pre><p> The following example creates and starts a thread that executes the <code>ExecuteInForeground</code> method. The method displays  information about some thread properties, then executes a loop in which it pauses for half a second and displays the elapsed number of seconds. When the thread has executed for at least five seconds, the loop ends and the thread terminates execution.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Thread#1\">using System;\nusing System.Diagnostics;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var th = new Thread(ExecuteInForeground);\n      th.Start();\n      Thread.Sleep(1000);\n      Console.WriteLine(&quot;Main thread ({0}) exiting...&quot;, \n                        Thread.CurrentThread.ManagedThreadId); \n   }\n   \n   private static void ExecuteInForeground()\n   {\n      DateTime start = DateTime.Now;\n      var sw = Stopwatch.StartNew();\n      Console.WriteLine(&quot;Thread {0}: {1}, Priority {2}&quot;, \n                        Thread.CurrentThread.ManagedThreadId,\n                        Thread.CurrentThread.ThreadState,\n                        Thread.CurrentThread.Priority);\n      do { \n         Console.WriteLine(&quot;Thread {0}: Elapsed {1:N2} seconds&quot;, \n                           Thread.CurrentThread.ManagedThreadId,\n                           sw.ElapsedMilliseconds / 1000.0);\n         Thread.Sleep(500);\n      } while (sw.ElapsedMilliseconds &lt;= 5000);\n      sw.Stop(); \n   }\n}\n// The example displays output like the following:\n//       Thread 3: Running, Priority Normal\n//       Thread 3: Elapsed 0.00 seconds\n//       Thread 3: Elapsed 0.51 seconds\n//       Main thread (1) exiting...\n//       Thread 3: Elapsed 1.02 seconds\n//       Thread 3: Elapsed 1.53 seconds\n//       Thread 3: Elapsed 2.05 seconds\n//       Thread 3: Elapsed 2.55 seconds\n//       Thread 3: Elapsed 3.07 seconds\n//       Thread 3: Elapsed 3.57 seconds\n//       Thread 3: Elapsed 4.07 seconds\n//       Thread 3: Elapsed 4.58 seconds\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Thread#1\">Imports System.Diagnostics\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Dim th As New Thread(AddressOf ExecuteInForeground)\n      th.Start()\n      Thread.Sleep(1000)\n      Console.WriteLine(&quot;Main thread ({0}) exiting...&quot;, Thread.CurrentThread.ManagedThreadId) \n   End Sub\n   \n   Private Sub ExecuteInForeground()\n      Dim start As DateTime = DateTime.Now\n      Dim sw As Stopwatch = Stopwatch.StartNew()\n      Console.WriteLine(&quot;Thread {0}: {1}, Priority {2}&quot;, \n                        Thread.CurrentThread.ManagedThreadId,\n                        Thread.CurrentThread.ThreadState,\n                        Thread.CurrentThread.Priority)\n      Do \n         Console.WriteLine(&quot;Thread {0}: Elapsed {1:N2} seconds&quot;, \n                           Thread.CurrentThread.ManagedThreadId,\n                           sw.ElapsedMilliseconds / 1000)\n         Thread.Sleep(500)\n      Loop While sw.ElapsedMilliseconds &lt;= 5000\n      sw.Stop() \n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Thread 3: Running, Priority Normal\n&#39;       Thread 3: Elapsed 0.00 seconds\n&#39;       Thread 3: Elapsed 0.51 seconds\n&#39;       Main thread (1) exiting...\n&#39;       Thread 3: Elapsed 1.02 seconds\n&#39;       Thread 3: Elapsed 1.53 seconds\n&#39;       Thread 3: Elapsed 2.05 seconds\n&#39;       Thread 3: Elapsed 2.55 seconds\n&#39;       Thread 3: Elapsed 3.07 seconds\n&#39;       Thread 3: Elapsed 3.57 seconds\n&#39;       Thread 3: Elapsed 4.07 seconds\n&#39;       Thread 3: Elapsed 4.58 seconds\n</code></pre></li>\n<li><p>If the method has an argument, you pass a <a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a> delegate to the constructor. It has the signature:  </p>\n<pre><code class=\"lang-c#\">public delegate void ParameterizedThreadStart(object obj)  \n</code></pre><pre><code class=\"lang-vb\">Public Delegate Sub ParameterizedThreadStart(obj As Object)  \n</code></pre><p> The method executed by the delegate can then cast (in C#) or convert (in Visual Basic) the parameter to the appropriate type.  </p>\n<p> The following example is identical to the previous one, except that it calls the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread__ctor_System_Threading_ParameterizedThreadStart_\" data-linktype=\"relative-path\">Thread(ParameterizedThreadStart)</a> constructor. This version of the <code>ExecuteInForeground</code> method has a single parameter that represents the approximate number of milliseconds the loop is to execute.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Thread#2\">using System;\nusing System.Diagnostics;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var th = new Thread(ExecuteInForeground);\n      th.Start(4500);\n      Thread.Sleep(1000);\n      Console.WriteLine(&quot;Main thread ({0}) exiting...&quot;, \n                        Thread.CurrentThread.ManagedThreadId); \n   }\n   \n   private static void ExecuteInForeground(Object obj)\n   {\n      int interval;\n      try {\n         interval = (int) obj;\n      }\n      catch (InvalidCastException) {\n         interval = 5000;\n      }\n      DateTime start = DateTime.Now;\n      var sw = Stopwatch.StartNew();\n      Console.WriteLine(&quot;Thread {0}: {1}, Priority {2}&quot;, \n                        Thread.CurrentThread.ManagedThreadId,\n                        Thread.CurrentThread.ThreadState,\n                        Thread.CurrentThread.Priority);\n      do { \n         Console.WriteLine(&quot;Thread {0}: Elapsed {1:N2} seconds&quot;, \n                           Thread.CurrentThread.ManagedThreadId,\n                           sw.ElapsedMilliseconds / 1000.0);\n         Thread.Sleep(500);\n      } while (sw.ElapsedMilliseconds &lt;= interval);\n      sw.Stop(); \n   }\n}\n// The example displays output like the following:\n//       Thread 3: Running, Priority Normal\n//       Thread 3: Elapsed 0.00 seconds\n//       Thread 3: Elapsed 0.52 seconds\n//       Main thread (1) exiting...\n//       Thread 3: Elapsed 1.03 seconds\n//       Thread 3: Elapsed 1.55 seconds\n//       Thread 3: Elapsed 2.06 seconds\n//       Thread 3: Elapsed 2.58 seconds\n//       Thread 3: Elapsed 3.09 seconds\n//       Thread 3: Elapsed 3.61 seconds\n//       Thread 3: Elapsed 4.12 seconds\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Thread#2\">Imports System.Diagnostics\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Dim th As New Thread(AddressOf ExecuteInForeground)\n      th.Start(4500)\n      Thread.Sleep(1000)\n      Console.WriteLine(&quot;Main thread ({0}) exiting...&quot;, Thread.CurrentThread.ManagedThreadId) \n   End Sub\n   \n   Private Sub ExecuteInForeground(obj As Object)\n      Dim interval As Integer\n      If IsNumeric(obj) Then\n         interval = CInt(obj)\n      Else\n         interval = 5000\n      End If   \n      Dim start As DateTime = DateTime.Now\n      Dim sw As Stopwatch = Stopwatch.StartNew()\n      Console.WriteLine(&quot;Thread {0}: {1}, Priority {2}&quot;, \n                        Thread.CurrentThread.ManagedThreadId,\n                        Thread.CurrentThread.ThreadState,\n                        Thread.CurrentThread.Priority)\n      Do \n         Console.WriteLine(&quot;Thread {0}: Elapsed {1:N2} seconds&quot;, \n                           Thread.CurrentThread.ManagedThreadId,\n                           sw.ElapsedMilliseconds / 1000)\n         Thread.Sleep(500)\n      Loop While sw.ElapsedMilliseconds &lt;= interval\n      sw.Stop() \n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Thread 3: Running, Priority Normal\n&#39;       Thread 3: Elapsed 0.00 seconds\n&#39;       Thread 3: Elapsed 0.52 seconds\n&#39;       Main thread (1) exiting...\n&#39;       Thread 3: Elapsed 1.03 seconds\n&#39;       Thread 3: Elapsed 1.55 seconds\n&#39;       Thread 3: Elapsed 2.06 seconds\n&#39;       Thread 3: Elapsed 2.58 seconds\n&#39;       Thread 3: Elapsed 3.09 seconds\n&#39;       Thread 3: Elapsed 3.61 seconds\n&#39;       Thread 3: Elapsed 4.12 seconds\n</code></pre><p>It is not necessary to retain a reference to a Thread object once you have started the thread. The thread continues to execute until the thread procedure is complete.  </p>\n</li>\n</ul>\n<p><a name=\"Retrieving\"></a>   </p>\n<h2 id=\"retrieving-thread-objects\">Retrieving Thread objects</h2>\n<p> You can use the static (<code>Shared</code> in Visual Basic)  <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentThread_\" data-linktype=\"relative-path\">CurrentThread</a> property to retrieve a reference to the currently executing thread from the code that the thread is executing. The following example uses the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentThread_\" data-linktype=\"relative-path\">CurrentThread</a> property to display information about the main application thread, another foreground thread, a background thread, and a thread pool thread.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Thread#4\">using System;\nusing System.Threading;\n\npublic class Example\n{\n   static Object obj = new Object();\n   \n   public static void Main()\n   {\n      ThreadPool.QueueUserWorkItem(ShowThreadInformation);\n      var th1 = new Thread(ShowThreadInformation);\n      th1.Start();\n      var th2 = new Thread(ShowThreadInformation);\n      th2.IsBackground = true;\n      th2.Start();\n      Thread.Sleep(500);\n      ShowThreadInformation(null); \n   }\n   \n   private static void ShowThreadInformation(Object state)\n   {\n      lock (obj) {\n         var th  = Thread.CurrentThread;\n         Console.WriteLine(&quot;Managed thread #{0}: &quot;, th.ManagedThreadId);\n         Console.WriteLine(&quot;   Background thread: {0}&quot;, th.IsBackground);\n         Console.WriteLine(&quot;   Thread pool thread: {0}&quot;, th.IsThreadPoolThread);\n         Console.WriteLine(&quot;   Priority: {0}&quot;, th.Priority);\n         Console.WriteLine(&quot;   Culture: {0}&quot;, th.CurrentCulture.Name);\n         Console.WriteLine(&quot;   UI culture: {0}&quot;, th.CurrentUICulture.Name);\n         Console.WriteLine();\n      }   \n   }\n}\n// The example displays output like the following:\n//       Managed thread #6:\n//          Background thread: True\n//          Thread pool thread: False\n//          Priority: Normal\n//          Culture: en-US\n//          UI culture: en-US\n//       \n//       Managed thread #3:\n//          Background thread: True\n//          Thread pool thread: True\n//          Priority: Normal\n//          Culture: en-US\n//          UI culture: en-US\n//       \n//       Managed thread #4:\n//          Background thread: False\n//          Thread pool thread: False\n//          Priority: Normal\n//          Culture: en-US\n//          UI culture: en-US\n//       \n//       Managed thread #1:\n//          Background thread: False\n//          Thread pool thread: False\n//          Priority: Normal\n//          Culture: en-US\n//          UI culture: en-US\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Thread#4\">Imports System.Threading\n\nModule Example\n   Private lock As New Object()\n                    \n   Public Sub Main()\n      ThreadPool.QueueUserWorkItem(AddressOf ShowThreadInformation)\n      Dim th1 As New Thread(AddressOf ShowThreadInformation)\n      th1.Start()\n      Dim th2 As New Thread(AddressOf ShowThreadInformation)\n      th2.IsBackground = True\n      th2.Start()\n      Thread.Sleep(500)\n      ShowThreadInformation(Nothing) \n   End Sub\n   \n   Private Sub ShowThreadInformation(state As Object)\n      SyncLock lock\n         Dim th As Thread = Thread.CurrentThread\n         Console.WriteLine(&quot;Managed thread #{0}: &quot;, th.ManagedThreadId)\n         Console.WriteLine(&quot;   Background thread: {0}&quot;, th.IsBackground)\n         Console.WriteLine(&quot;   Thread pool thread: {0}&quot;, th.IsThreadPoolThread)\n         Console.WriteLine(&quot;   Priority: {0}&quot;, th.Priority)\n         Console.WriteLine(&quot;   Culture: {0}&quot;, th.CurrentCulture.Name)\n         Console.WriteLine(&quot;   UI culture: {0}&quot;, th.CurrentUICulture.Name)\n         Console.WriteLine()\n      End SyncLock\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       &#39; Managed thread #6:\n&#39;          Background thread: True\n&#39;          Thread pool thread: False\n&#39;          Priority: Normal\n&#39;          Culture: en-US\n&#39;          UI culture: en-US\n&#39;       \n&#39;       Managed thread #3:\n&#39;          Background thread: True\n&#39;          Thread pool thread: True\n&#39;          Priority: Normal\n&#39;          Culture: en-US\n&#39;          UI culture: en-US\n&#39;       \n&#39;       Managed thread #4:\n&#39;          Background thread: False\n&#39;          Thread pool thread: False\n&#39;          Priority: Normal\n&#39;          Culture: en-US\n&#39;          UI culture: en-US\n&#39;       \n&#39;       Managed thread #1:\n&#39;          Background thread: False\n&#39;          Thread pool thread: False\n&#39;          Priority: Normal\n&#39;          Culture: en-US\n&#39;          UI culture: en-US\n</code></pre><p><a name=\"Foreground\"></a>   </p>\n<h2 id=\"foreground-and-background-threads\">Foreground and background threads</h2>\n<p> Instances of the Thread class represent either foreground threads or background threads. Background threads are identical to foreground threads with one exception: a background thread does not keep a process running if all foreground threads have terminated. Once all foreground threads have been stopped, the runtime stops all background threads and shuts down.  </p>\n<p> By default, the following threads execute in the foreground:  </p>\n<ul>\n<li><p>The main application thread.  </p>\n</li>\n<li><p>All threads created by calling a Thread class constructor.  </p>\n<p>The following threads execute in the background by default:  </p>\n</li>\n<li><p>Thread pool threads, which are a pool of worker threads maintained by the runtime.  You can configure the thread pool and schedule work on thread pool threads by using the <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Task-based asynchronous operations automatically execute on thread pool threads. Task-based asynchronous operations use the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> and <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> classes to implement the <a href=\"../Topic/Task-based%20Asynchronous%20Pattern%20(TAP).md\" data-linktype=\"relative-path\">task-based asynchronous pattern</a>.  </p>\n</div>\n</li>\n<li><p>All threads that enter the managed execution environment from unmanaged code.  </p>\n<p>You can change a thread to execute in the background by setting the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_IsBackground_\" data-linktype=\"relative-path\">IsBackground</a> property at any time.  Background threads are useful for any operation that should continue as long as an application is running but should not prevent the application from terminating, such as monitoring file system changes or incoming socket connections.  </p>\n<p>The following example illustrates the difference between foreground and background threads. It is like the first example in the <a href=\"#Starting\" data-linktype=\"self-bookmark\">Starting a thread</a> section, except that it sets the thread to execute in the background before starting it. As the output shows, the loop is interrupted before it executes for five seconds.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Thread#3\">using System;\nusing System.Diagnostics;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var th = new Thread(ExecuteInForeground);\n      th.IsBackground = true;\n      th.Start();\n      Thread.Sleep(1000);\n      Console.WriteLine(&quot;Main thread ({0}) exiting...&quot;, \n                        Thread.CurrentThread.ManagedThreadId); \n   }\n   \n   private static void ExecuteInForeground()\n   {\n      DateTime start = DateTime.Now;\n      var sw = Stopwatch.StartNew();\n      Console.WriteLine(&quot;Thread {0}: {1}, Priority {2}&quot;, \n                        Thread.CurrentThread.ManagedThreadId,\n                        Thread.CurrentThread.ThreadState,\n                        Thread.CurrentThread.Priority);\n      do { \n         Console.WriteLine(&quot;Thread {0}: Elapsed {1:N2} seconds&quot;, \n                           Thread.CurrentThread.ManagedThreadId,\n                           sw.ElapsedMilliseconds / 1000.0);\n         Thread.Sleep(500);\n      } while (sw.ElapsedMilliseconds &lt;= 5000);\n      sw.Stop(); \n   }\n}\n// The example displays output like the following:\n//       Thread 3: Background, Priority Normal\n//       Thread 3: Elapsed 0.00 seconds\n//       Thread 3: Elapsed 0.51 seconds\n//       Main thread (1) exiting...\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Thread#3\">Imports System.Diagnostics\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Dim th As New Thread(AddressOf ExecuteInForeground)\n      th.IsBackground = True\n      th.Start()\n      Thread.Sleep(1000)\n      Console.WriteLine(&quot;Main thread ({0}) exiting...&quot;, Thread.CurrentThread.ManagedThreadId) \n   End Sub\n   \n   Private Sub ExecuteInForeground()\n      Dim start As DateTime = DateTime.Now\n      Dim sw As Stopwatch = Stopwatch.StartNew()\n      Console.WriteLine(&quot;Thread {0}: {1}, Priority {2}&quot;, \n                        Thread.CurrentThread.ManagedThreadId,\n                        Thread.CurrentThread.ThreadState,\n                        Thread.CurrentThread.Priority)\n      Do \n         Console.WriteLine(&quot;Thread {0}: Elapsed {1:N2} seconds&quot;, \n                           Thread.CurrentThread.ManagedThreadId,\n                           sw.ElapsedMilliseconds / 1000)\n         Thread.Sleep(500)\n      Loop While sw.ElapsedMilliseconds &lt;= 5000\n      sw.Stop() \n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Thread 3: Background, Priority Normal\n&#39;       Thread 3: Elapsed 0.00 seconds\n&#39;       Thread 3: Elapsed 0.51 seconds\n&#39;       Main thread (1) exiting...\n</code></pre></li>\n</ul>\n<p><a name=\"Culture\"></a>   </p>\n<h2 id=\"culture-and-threads\">Culture and threads</h2>\n<p> Each thread has a culture, represented by the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> property, and a UI culture, represented by the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> property.  The current culture supports such culture-sensitive  operations as parsing and formatting, string comparison and sorting, and also controls the writing system and calendar used by a thread. The current UI culture provides for culture-sensitive retrieval of resources in resource files.  </p>\n<p> When a new thread is instantiated, its culture and UI culture are defined by the current system culture and UI culture, and not by the culture and UI culture of the thread from which the new thread is created. This means, for example, that if the current system culture is English (United States) and the current culture of the primary application thread is French (France), the culture of a new thread created by calling the   <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread__ctor_System_Threading_ParameterizedThreadStart_\" data-linktype=\"relative-path\">Thread(ParameterizedThreadStart)</a> constructor from the primary thread is English (United States), and not French (France). For more information, see the &quot;Culture and threads&quot; section of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class topic.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This is not true of threads that execute asynchronous operations for apps that target the .NET Framework 4.6 and later versions, In this case, the culture and UI culture is part of an asynchronous operations&#39; context; the thread on which an asynchronous operation executes by default inherits the culture and UI culture of the thread from which the asynchronous operation was launched. For more information, see the &quot;Culture and task-based asynchronous operations&quot; section of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class topic.  </p>\n</div>\n<p> You can do either of the following to ensure that all of the threads executing in an application share the same culture and UI culture:  </p>\n<ul>\n<li><p>You can pass a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents that culture to the <a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a> delegate or the <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_QueueUserWorkItem_System_Threading_WaitCallback_System_Object_\" data-linktype=\"relative-path\">System.Threading.ThreadPool.QueueUserWorkItem(WaitCallback,Object)</a> method.  </p>\n</li>\n<li><p>For apps running on the .NET Framework 4.5 and later versions, you can define the culture and UI culture that is to be assigned to all threads created in an application domain by setting the value of the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentCulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentCulture</a> and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_\" data-linktype=\"relative-path\">DefaultThreadCurrentUICulture</a> properties. Note that this is a per-application domain setting.  </p>\n<p>For more information and examples, see the &quot;Culture and threads&quot; section of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class topic.  </p>\n</li>\n</ul>\n<p><a name=\"Properties\"></a>   </p>\n<h2 id=\"getting-information-about-and-controlling-threads\">Getting information about and controlling threads</h2>\n<p> You can retrieve a number of property values that provide information about a thread. In some cases, you can also set these property values to control the operation of the thread. These thread properties include:  </p>\n<ul>\n<li><p>A name. <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Name_\" data-linktype=\"relative-path\">Name</a> is a write-once property that you can use to identify a thread.  Its default value is <code>null</code>.  </p>\n</li>\n<li><p>A hash code, which you can retrieve by calling the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> method. The hash code can be used to uniquely identify a thread; for the lifetime of your thread, its hash code will not collide with the value from any other thread, regardless of the application domain from which you obtain the value.  </p>\n</li>\n<li><p>A thread ID. The value of the read-only <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_ManagedThreadId_\" data-linktype=\"relative-path\">ManagedThreadId</a> property is assigned by the runtime and uniquely identifies a thread within its process.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An operating-system <a href=\"https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx\" data-linktype=\"external\">ThreadId</a> has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads. Specifically, a sophisticated host can use the <a href=\"https://msdn.microsoft.com/library/ms404385.aspx\" data-linktype=\"external\">CLR Hosting API</a> to schedule many managed threads against the same operating system thread, or to move a managed thread between different operating system threads.  </p>\n</div>\n</li>\n<li><p>The thread&#39;s current state. For the duration of its existence, a thread is always in one or more of the states defined by the <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a> property.  </p>\n</li>\n<li><p>A scheduling priority level, which is defined by the <a class=\"xref\" href=\"system.threading.threadpriority\" data-linktype=\"relative-path\">ThreadPriority</a> property. Although you can set this value to request a thread&#39;s priority, it is not guaranteed to be honored by the operating system.  </p>\n</li>\n<li><p>The read-only <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_IsThreadPoolThread_\" data-linktype=\"relative-path\">IsThreadPoolThread</a> property, which indicates whether a thread is  a thread pool thread.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_IsBackground_\" data-linktype=\"relative-path\">IsBackground</a> property. For more information, see the <a href=\"#Foreground\" data-linktype=\"self-bookmark\">Foreground and background threads</a> section.  </p>\n</li>\n</ul>\n<p><a name=\"Source\"></a>   </p>\n<h2 id=\"accessing-the-source-code-for-the-thread-class\">Accessing the source code for the Thread class</h2>\n<p> To view the .NET Framework source code for the Thread class, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/threading/thread.cs#3980e012bae82e96\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread__ctor_System_Threading_ParameterizedThreadStart_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Thread(ParameterizedThreadStart)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Thread (System.Threading.ParameterizedThreadStart start);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>start</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A delegate that represents the methods to be invoked when this thread begins executing.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>start</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A thread does not begin executing when it is created. To schedule the thread for execution, call the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_\" data-linktype=\"relative-path\">Start</a> method. To pass a data object to the thread, use the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_System_Object_\" data-linktype=\"relative-path\">Start(Object)</a> method overload.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Visual Basic users can omit the <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> constructor when creating a thread. Use the <code>AddressOf</code> operator when passing your method, for example <code>Dim t As New Thread(AddressOf ThreadProc)</code>. Visual Basic automatically calls the <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> constructor.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread__ctor_System_Threading_ThreadStart_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Thread(ThreadStart)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Thread (System.Threading.ThreadStart start);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>start</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> delegate that represents the methods to be invoked when this thread begins executing.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>start</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A thread does not begin executing when it is created. To schedule the thread for execution, call the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_\" data-linktype=\"relative-path\">Start</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Visual Basic users can omit the <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> constructor when creating a thread. Use the <code>AddressOf</code> operator when passing your method for example <code>Dim t As New Thread(AddressOf ThreadProc)</code>. Visual Basic automatically calls the <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> constructor.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread__ctor_System_Threading_ParameterizedThreadStart_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Thread(ParameterizedThreadStart,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Thread (System.Threading.ParameterizedThreadStart start, int maxStackSize);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>start</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a> delegate that represents the methods to be invoked when this thread begins executing.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>maxStackSize</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.  </p>\n<p> Important   For partially trusted code, <code>maxStackSize</code> is ignored if it is greater than the default stack size. No exception is thrown.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>start</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>maxStackSize</code> is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Avoid using this constructor overload. The default stack size used by the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread__ctor_System_Threading_ParameterizedThreadStart_\" data-linktype=\"relative-path\">Thread(ParameterizedThreadStart)</a> constructor overload is the recommended stack size for threads. If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Beginning with the .NET Framework 4, only fully trusted code can set <code>maxStackSize</code> to a value that is greater than the default stack size (1 megabyte). If a larger value is specified for <code>maxStackSize</code> when code is running with partial trust, <code>maxStackSize</code> is ignored and the default stack size is used. No exception is thrown. Code at any trust level can set <code>maxStackSize</code> to a value that is less than the default stack size.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used. Do not do this unless you fully control the code that runs on the thread.  </p>\n</div>\n<p> If <code>maxStackSize</code> is less than the minimum stack size, the minimum stack size is used. If <code>maxStackSize</code> is not a multiple of the page size, it is rounded to the next larger multiple of the page size. For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, <code>maxStackSize</code> is ignored, and the stack size specified in the executable header is used.  </p>\n</div>\n<p> If you specify a very small stack size, you might need to disable stack-overflow probing. When the stack is severely constrained, the probing can itself cause a stack overflow. To disable stack overflow probing, add the following to your application configuration file.  </p>\n<pre><code>&lt;configuration&gt;  \n  &lt;runtime&gt;  \n    &lt;disableStackOverflowProbing enabled=&quot;true&quot;/&gt;  \n  &lt;/runtime&gt;  \n&lt;/configuration&gt;  \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread__ctor_System_Threading_ThreadStart_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Thread(ThreadStart,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> class, specifying the maximum stack size for the thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Thread (System.Threading.ThreadStart start, int maxStackSize);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>start</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> delegate that represents the methods to be invoked when this thread begins executing.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>maxStackSize</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.  </p>\n<p> Important   For partially trusted code, <code>maxStackSize</code> is ignored if it is greater than the default stack size. No exception is thrown.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>start</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>maxStackSize</code> is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Avoid using this constructor overload. The default stack size used by the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread__ctor_System_Threading_ThreadStart_\" data-linktype=\"relative-path\">Thread(ThreadStart)</a> constructor overload is the recommended stack size for threads. If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Beginning with the .NET Framework 4, only fully trusted code can set <code>maxStackSize</code> to a value that is greater than the default stack size (1 megabyte). If a larger value is specified for <code>maxStackSize</code> when code is running with partial trust, <code>maxStackSize</code> is ignored and the default stack size is used. No exception is thrown. Code at any trust level can set <code>maxStackSize</code> to a value that is less than the default stack size.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used. Do not do this unless you fully control the code that runs on the thread.  </p>\n</div>\n<p> If <code>maxStackSize</code> is less than the minimum stack size, the minimum stack size is used. If <code>maxStackSize</code> is not a multiple of the page size, it is rounded to the next larger multiple of the page size. For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, <code>maxStackSize</code> is ignored, and the stack size specified in the executable header is used.  </p>\n</div>\n<p> If you specify a very small stack size, you might need to disable stack-overflow probing. When the stack is severely constrained, the probing can itself cause a stack overflow. To disable stack overflow probing, add the following to your application configuration file.  </p>\n<pre><code>&lt;configuration&gt;  \n  &lt;runtime&gt;  \n    &lt;disableStackOverflowProbing enabled=&quot;true&quot;/&gt;  \n  &lt;/runtime&gt;  \n&lt;/configuration&gt;  \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_ApartmentState\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ApartmentState</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the apartment state of this thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.ApartmentState ApartmentState { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">ApartmentState</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">ApartmentState</a> values. The initial value is <code>Unknown</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (<code>STA</code>) or multithreaded apartment (<code>MTA</code>)).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><strong>The ApartmentState property is obsolete.</strong>  The non-obsolete alternatives are the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_GetApartmentState_\" data-linktype=\"relative-path\">GetApartmentState</a> method to retrieve the apartment state and the   <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_SetApartmentState_\" data-linktype=\"relative-path\">SetApartmentState</a> method to set the apartment state.  </p>\n<p> In the .NET Framework versions 1.0 and 1.1, the <code>ApartmentState</code> property marks a thread to indicate that it will execute in a single-threaded or multithreaded apartment. This property can be set when the thread is in the <code>Unstarted</code> or <code>Running</code> thread state; however, it can be set only once for a thread. If the property has not been set, it returns <code>Unknown</code>.  </p>\n<p> An attempt to use the ApartmentState property to set the apartment state of a thread whose apartment state has already been set is ignored. However, the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_SetApartmentState_\" data-linktype=\"relative-path\">SetApartmentState</a> method throws a <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> in this case.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> In the .NET Framework version 2.0, new threads are initialized as <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">System.Threading.ApartmentState</a> if their apartment state has not been set before they are started. The main application thread is initialized to <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">System.Threading.ApartmentState</a> by default. You can no longer set the main application thread to <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">System.Threading.ApartmentState</a> by setting the <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">System.Threading.ApartmentState</a> property on the first line of code. Use the <a class=\"xref\" href=\"system.stathreadattribute\" data-linktype=\"relative-path\">STAThreadAttribute</a> instead.  </p>\n</div>\n<p> In the .NET Framework version 2.0, you can specify the COM threading model for a C++ application using the <a href=\"../Topic/-CLRTHREADATTRIBUTE%20(Set%20CLR%20Thread%20Attribute).md\" data-linktype=\"relative-path\">/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)</a> linker option.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_CurrentContext\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CurrentContext</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the current context in which the thread is executing.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Runtime.Remoting.Contexts.Context CurrentContext { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.contexts.context\" data-linktype=\"relative-path\">Context</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.runtime.remoting.contexts.context\" data-linktype=\"relative-path\">Context</a> representing the current thread context.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_CurrentCulture\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CurrentCulture</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the culture for the current thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Globalization.CultureInfo CurrentCulture { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that represents the culture for the current thread.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The property is set to <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that is returned by this property, together with its associated objects, determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons. See the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains. See the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> property to learn how a thread&#39;s default culture is determined, and how users set culture information for their computers.  </p>\n<p> Beginning with the .NET Framework 4, you can set the CurrentCulture property to a neutral culture. This is because the behavior of the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class has changed: When it represents a neutral culture, its property values (in particular, the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_Calendar_\" data-linktype=\"relative-path\">Calendar</a>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CompareInfo_\" data-linktype=\"relative-path\">CompareInfo</a>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat_\" data-linktype=\"relative-path\">DateTimeFormat</a>, <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_NumberFormat_\" data-linktype=\"relative-path\">NumberFormat</a>, and <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_TextInfo_\" data-linktype=\"relative-path\">TextInfo</a> properties) now reflect the specific culture that is associated with the neutral culture. In earlier versions of the .NET Framework, the CurrentCulture property threw a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception when a neutral culture was assigned.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_CurrentPrincipal\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CurrentPrincipal</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the thread&#39;s current principal (for role-based security).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.iprincipal\" data-linktype=\"relative-path\">IPrincipal</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.security.principal.iprincipal\" data-linktype=\"relative-path\">IPrincipal</a> value representing the security context.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the permission required to set the principal.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_CurrentThread\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CurrentThread</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the currently running thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Threading.Thread CurrentThread { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> that is the representation of the currently running thread.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_CurrentUICulture\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CurrentUICulture</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Globalization.CultureInfo CurrentUICulture { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that represents the current culture.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The property is set to <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The property is set to a culture name that cannot be used to locate a resource file. Resource filenames must include only letters, numbers, hyphens or underscores.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The UI culture specifies the resources an application needs to support user input and output, and by default is the same as the operating system culture. See the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains. See the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CurrentUICulture_\" data-linktype=\"relative-path\">CurrentUICulture</a> property to learn how a thread&#39;s default UI culture is determined.  </p>\n<p> The <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> returned by this property can be a neutral culture. Neutral cultures should not be used with formatting methods such as [String.Format(IFormatProvider, String, Object&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;, <a class=\"xref\" href=\"system.datetime#System_DateTime_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.DateTime.ToString(String,IFormatProvider)</a>, and <a class=\"xref\" href=\"system.convert#System_Convert_ToString_System_Char_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Convert.ToString(Char,IFormatProvider)</a>. Use the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CreateSpecificCulture_\" data-linktype=\"relative-path\">CreateSpecificCulture</a> method to get a specific culture, or use the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_CurrentCulture_\" data-linktype=\"relative-path\">CurrentCulture</a> property.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CreateSpecificCulture_\" data-linktype=\"relative-path\">CreateSpecificCulture</a> method throws <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> for the neutral cultures &quot;zh-Hant&quot; (&quot;zh-CHT&quot;) and &quot;zh-Hans&quot; (&quot;zh-CHS&quot;).</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_ExecutionContext\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ExecutionContext</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an <a class=\"xref\" href=\"system.threading.executioncontext\" data-linktype=\"relative-path\">ExecutionContext</a> object that contains information about the various contexts of the current thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.ExecutionContext ExecutionContext { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.executioncontext\" data-linktype=\"relative-path\">ExecutionContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.threading.executioncontext\" data-linktype=\"relative-path\">ExecutionContext</a> object that consolidates context information for the current thread.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.threading.executioncontext\" data-linktype=\"relative-path\">ExecutionContext</a> class provides a single container for all information relevant to a logical thread of execution. This includes security context, call context, synchronization context, localization context, and transaction context.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_IsAlive\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsAlive</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating the execution status of the current thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsAlive { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this thread has been started and has not terminated normally or aborted; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_IsBackground\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsBackground</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether or not a thread is a background thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsBackground { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this thread is or is to become a background thread; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The thread is dead.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A thread is either a background thread or a foreground thread. Background threads are identical to foreground threads, except that background threads do not prevent a process from terminating. Once all foreground threads belonging to a process have terminated, the common language runtime ends the process. Any remaining background threads are stopped and do not complete.  </p>\n<p> By default, the following threads execute in the foreground (that is, their IsBackground property returns <code>false</code>):  </p>\n<ul>\n<li><p>The primary thread (or main application thread).  </p>\n</li>\n<li><p>All threads created by calling a <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> class constructor.  </p>\n<p>By default, the following threads execute in the background  (that is, their IsBackground property returns <code>true</code>):  </p>\n</li>\n<li><p>Thread pool threads, which are a pool of worker threads maintained by the runtime. You can configure the thread pool and schedule work on thread pool threads by using the <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Task-based asynchronous operations automatically execute on thread pool threads.  </p>\n</div>\n</li>\n<li><p>All threads that enter the managed execution environment from unmanaged code.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_IsThreadPoolThread\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsThreadPoolThread</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether or not a thread belongs to the managed thread pool.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsThreadPoolThread { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this thread belongs to the managed thread pool; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information see <a href=\"../Topic/The%20Managed%20Thread%20Pool.md\" data-linktype=\"relative-path\">The Managed Thread Pool</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_ManagedThreadId\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ManagedThreadId</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a unique identifier for the current managed thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int ManagedThreadId { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer that represents a unique identifier for this managed thread.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A thread&#39;s ManagedThreadId property value serves to uniquely identify that thread within its process.  </p>\n<p> The value of the ManagedThreadId property does not vary over time, even if unmanaged code that hosts the common language runtime implements the thread as a fiber.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Name\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Name</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the name of the thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Name { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string containing the name of the thread, or <code>null</code> if no name was set.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A set operation was requested, but the <code>Name</code> property has already been set.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property is write-once. Because the default value of a thread&#39;s Name property is <code>null</code>, you can determine whether a name has already been explicitly assigned to the thread by comparing it with <code>null</code>.  </p>\n<p> The string assigned to the Name property can include any Unicode character.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Priority\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Priority</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating the scheduling priority of a thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.ThreadPriority Priority { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadpriority\" data-linktype=\"relative-path\">ThreadPriority</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the <a class=\"xref\" href=\"system.threading.threadpriority\" data-linktype=\"relative-path\">ThreadPriority</a> values. The default value is <a class=\"xref\" href=\"system.threading.threadpriority\" data-linktype=\"relative-path\">ThreadPriority</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The thread has reached a final state, such as <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value specified for a set operation is not a valid <a class=\"xref\" href=\"system.threading.threadpriority\" data-linktype=\"relative-path\">ThreadPriority</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A thread can be assigned any one of the following priority <a class=\"xref\" href=\"system.threading.threadpriority\" data-linktype=\"relative-path\">ThreadPriority</a> values:  </p>\n<ul>\n<li><p><code>Highest</code>  </p>\n</li>\n<li><p><code>AboveNormal</code>  </p>\n</li>\n<li><p><code>Normal</code>  </p>\n</li>\n<li><p><code>BelowNormal</code>  </p>\n</li>\n<li><p><code>Lowest</code>  </p>\n<p>Operating systems are not required to honor the priority of a thread.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_ThreadState\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ThreadState</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value containing the states of the current thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.ThreadState ThreadState { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a> values indicating the state of the current thread. The initial value is <code>Unstarted</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ThreadState property provides more specific information than the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_IsAlive_\" data-linktype=\"relative-path\">IsAlive</a> property.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Thread state is only of interest in debugging scenarios. Your code should never use thread state to synchronize the activities of threads.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Abort\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Abort()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises a <a class=\"xref\" href=\"system.threading.threadabortexception\" data-linktype=\"relative-path\">ThreadAbortException</a> in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Abort ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The thread that is being aborted is currently suspended.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When this method is invoked on a thread, the system throws a <a class=\"xref\" href=\"system.threading.threadabortexception\" data-linktype=\"relative-path\">ThreadAbortException</a> in the thread to abort it. <code>ThreadAbortException</code> is a special exception that can be caught by application code, but is re-thrown at the end of the <code>catch</code> block unless <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_ResetAbort_\" data-linktype=\"relative-path\">ResetAbort</a> is called. <code>ResetAbort</code> cancels the request to abort, and prevents the <code>ThreadAbortException</code> from terminating the thread. Unexecuted <code>finally</code> blocks are executed before the thread is aborted.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When a thread calls <code>Abort</code> on itself, the effect is similar to throwing an exception; the <a class=\"xref\" href=\"system.threading.threadabortexception\" data-linktype=\"relative-path\">ThreadAbortException</a> happens immediately, and the result is predictable. However, if one thread calls <code>Abort</code> on another thread, the abort interrupts whatever code is running. There is also a chance that a static constructor could be aborted. In rare cases, this might prevent instances of that class from being created in that application domain. In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a <code>finally</code> block is running, in which case the <code>finally</code> block is aborted.  </p>\n</div>\n<p> The thread is not guaranteed to abort immediately, or at all. This situation can occur if a thread does an unbounded amount of computation in the <code>finally</code> blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort. To wait until a thread has aborted, you can call the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join_\" data-linktype=\"relative-path\">Join</a> method on the thread after calling the Abort method, but there is no guarantee the wait will end.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The thread that calls Abort might block if the thread that is being aborted is in a protected region of code, such as a <code>catch</code> block, <code>finally</code> block, or constrained execution region. If the thread that calls Abort holds a lock that the aborted thread requires, a deadlock can occur.  </p>\n</div>\n<p> If <code>Abort</code> is called on a thread that has not been started, the thread will abort when <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_\" data-linktype=\"relative-path\">Start</a> is called. If <code>Abort</code> is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.  </p>\n<p> If <code>Abort</code> is called on a thread that has been suspended, a <a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a> is thrown in the thread that called <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Abort_\" data-linktype=\"relative-path\">Abort</a>, and <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a> is added to the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_ThreadState_\" data-linktype=\"relative-path\">ThreadState</a> property of the thread being aborted. A <a class=\"xref\" href=\"system.threading.threadabortexception\" data-linktype=\"relative-path\">ThreadAbortException</a> is not thrown in the suspended thread until <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Resume_\" data-linktype=\"relative-path\">Resume</a> is called.  </p>\n<p> If <code>Abort</code> is called on a managed thread while it is executing unmanaged code, a <code>ThreadAbortException</code> is not thrown until the thread returns to managed code.  </p>\n<p> If two calls to <code>Abort</code> come at the same time, it is possible for one call to set the state information and the other call to execute the <code>Abort</code>. However, an application cannot detect this situation.  </p>\n<p> After <code>Abort</code> is invoked on a thread, the state of the thread includes <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a>. After the thread has terminated as a result of a successful call to <code>Abort</code>, the state of the thread is changed to <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a>. With sufficient permissions, a thread that is the target of an <code>Abort</code> can cancel the abort using the <code>ResetAbort</code> method. For an example that demonstrates calling the <code>ResetAbort</code> method, see the <code>ThreadAbortException</code> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Abort_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Abort(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises a <a class=\"xref\" href=\"system.threading.threadabortexception\" data-linktype=\"relative-path\">ThreadAbortException</a> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination. Calling this method usually terminates the thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Abort (object stateInfo);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>stateInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that contains application-specific information, such as state, which can be used by the thread being aborted.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The thread that is being aborted is currently suspended.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When this method is invoked on a thread, the system throws a <a class=\"xref\" href=\"system.threading.threadabortexception\" data-linktype=\"relative-path\">ThreadAbortException</a> in the thread to abort it. <code>ThreadAbortException</code> is a special exception that can be caught by application code, but is re-thrown at the end of the <code>catch</code> block unless <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_ResetAbort_\" data-linktype=\"relative-path\">ResetAbort</a> is called. <code>ResetAbort</code> cancels the request to abort, and prevents the <code>ThreadAbortException</code> from terminating the thread. Unexecuted <code>finally</code> blocks are executed before the thread is aborted.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When a thread calls <code>Abort</code> on itself, the effect is similar to throwing an exception; the <a class=\"xref\" href=\"system.threading.threadabortexception\" data-linktype=\"relative-path\">ThreadAbortException</a> happens immediately, and the result is predictable. However, if one thread calls <code>Abort</code> on another thread, the abort interrupts whatever code is running. There is a chance that a static constructor could be aborted. In rare cases, this might prevent instances of that class from being created in that application domain. In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a <code>finally</code> block is running, in which case the <code>finally</code> block is aborted.  </p>\n</div>\n<p> The thread is not guaranteed to abort immediately, or at all. This situation can occur if a thread does an unbounded amount of computation in the <code>finally</code> blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort. To wait until a thread has aborted, you can call the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join_\" data-linktype=\"relative-path\">Join</a> method on the thread after calling the Abort method, but there is no guarantee that the wait will end.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The thread that calls <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Abort_\" data-linktype=\"relative-path\">Abort</a> might block if the thread that is being aborted is in a protected region of code, such as a <code>catch</code> block, <code>finally</code> block, or constrained execution region. If the thread that calls <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Abort_\" data-linktype=\"relative-path\">Abort</a> holds a lock that the aborted thread requires, a deadlock can occur.  </p>\n</div>\n<p> If <code>Abort</code> is called on a thread that has not been started, the thread will abort when <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_\" data-linktype=\"relative-path\">Start</a> is called. If <code>Abort</code> is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.  </p>\n<p> If <code>Abort</code> is called on a thread that has been suspended, a <a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a> is thrown in the thread that called <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Abort_\" data-linktype=\"relative-path\">Abort</a>, and <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a> is added to the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_ThreadState_\" data-linktype=\"relative-path\">ThreadState</a> property of the thread being aborted. A <a class=\"xref\" href=\"system.threading.threadabortexception\" data-linktype=\"relative-path\">ThreadAbortException</a> is not thrown in the suspended thread until <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Resume_\" data-linktype=\"relative-path\">Resume</a> is called.  </p>\n<p> If <code>Abort</code> is called on a managed thread while it is executing unmanaged code, a <code>ThreadAbortException</code> is not thrown until the thread returns to managed code.  </p>\n<p> If two calls to <code>Abort</code> come at the same time, it is possible for one call to set the state information and the other call to execute the <code>Abort</code>. However, an application cannot detect this situation.  </p>\n<p> After <code>Abort</code> is invoked on a thread, the state of the thread includes <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a>. After the thread has terminated as a result of a successful call to <code>Abort</code>, the state of the thread is changed to <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a>. With sufficient permissions, a thread that is the target of an <code>Abort</code> can cancel the abort using the <code>ResetAbort</code> method. For an example that demonstrates calling the <code>ResetAbort</code> method, see the <code>ThreadAbortException</code> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_AllocateDataSlot\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AllocateDataSlot()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Allocates an unnamed data slot on all the threads. For better performance, use fields that are marked with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static LocalDataStoreSlot AllocateDataSlot ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.localdatastoreslot\" data-linktype=\"relative-path\">LocalDataStoreSlot</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The allocated named data slot on all threads.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"IMPORTANT\"><h5>Important</h5><p> The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see <a href=\"../Topic/Thread%20Local%20Storage:%20Thread-Relative%20Static%20Fields%20and%20Data%20Slots.md\" data-linktype=\"relative-path\">Thread Local Storage: Thread-Relative Static Fields and Data Slots</a>.  </p>\n</div>\n<p> The slot is allocated on all threads.  </p>\n<p> Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_AllocateNamedDataSlot_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AllocateNamedDataSlot(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Allocates a named data slot on all threads. For better performance, use fields that are marked with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static LocalDataStoreSlot AllocateNamedDataSlot (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the data slot to be allocated.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.localdatastoreslot\" data-linktype=\"relative-path\">LocalDataStoreSlot</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The allocated named data slot on all threads.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A named data slot with the specified name already exists.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"IMPORTANT\"><h5>Important</h5><p> The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see <a href=\"../Topic/Thread%20Local%20Storage:%20Thread-Relative%20Static%20Fields%20and%20Data%20Slots.md\" data-linktype=\"relative-path\">Thread Local Storage: Thread-Relative Static Fields and Data Slots</a>.  </p>\n</div>\n<p> Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.  </p>\n<p> It is not necessary to use the AllocateNamedDataSlot method to allocate a named data slot, because the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_GetNamedDataSlot_\" data-linktype=\"relative-path\">GetNamedDataSlot</a> method allocates the slot if it has not already been allocated.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the AllocateNamedDataSlot method is used, it should be called in the main thread at program startup, because it throws an exception if a slot with the specified name has already been allocated. There is no way to test whether a slot has already been allocated.  </p>\n</div>\n<p> Slots allocated with this method must be freed with <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_FreeNamedDataSlot_\" data-linktype=\"relative-path\">FreeNamedDataSlot</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_BeginCriticalRegion\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BeginCriticalRegion()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void BeginCriticalRegion ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code. A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task. By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.  </p>\n<p> For example, consider a task that attempts to allocate memory while holding a lock. If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>, because there can be other tasks in the domain waiting for the same lock. If the current task is terminated, other tasks could be deadlocked.  </p>\n<p> When a failure occurs in a critical region, the host might decide to unload the entire <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> rather than take the risk of continuing execution in a potentially unstable state. To inform the host that your code is entering a critical region, call BeginCriticalRegion. Call <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_EndCriticalRegion_\" data-linktype=\"relative-path\">EndCriticalRegion</a> when execution returns to a non-critical region of code.  </p>\n<p> Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_BeginThreadAffinity\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BeginThreadAffinity()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void BeginThreadAffinity ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management. A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time. Most tasks are not affected by this switching. However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread. These tasks must inform the host when they execute code that should not be switched.  </p>\n<p> For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call BeginThreadAffinity before acquiring the lock, and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_EndThreadAffinity_\" data-linktype=\"relative-path\">EndThreadAffinity</a> after releasing the lock.  </p>\n<p> Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_DisableComObjectEagerCleanup\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DisableComObjectEagerCleanup()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void DisableComObjectEagerCleanup ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>By default, the common language runtime (CLR) cleans up runtime callable wrappers automatically. The CLR pumps messages during the cleanup, which might cause reentrancy problems for a few applications that meet the following unusual criteria:  </p>\n<ul>\n<li><p>The application does its own message pumping.  </p>\n</li>\n<li><p>The application needs to control precisely when message pumping occurs.  </p>\n<p>Such applications can use the DisableComObjectEagerCleanup method to prevent the CLR from doing automatic reclamation of runtime callable wrappers.  </p>\n<p>When this method has been called on a thread, automatic cleanup cannot be re-enabled for that thread. When your application is ready to clean up runtime callable wrappers, use the <a class=\"xref\" href=\"system.runtime.interopservices.marshal#System_Runtime_InteropServices_Marshal_CleanupUnusedObjectsInCurrentContext_\" data-linktype=\"relative-path\">CleanupUnusedObjectsInCurrentContext</a> method to instruct the runtime to clean up all runtime callable wrappers in the current context. Message pumping occurs while the method executes.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_EndCriticalRegion\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EndCriticalRegion()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void EndCriticalRegion ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code. A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task. By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.  </p>\n<p> For example, consider a task that attempts to allocate memory while holding a lock. If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>, because there can be other tasks in the domain waiting for the same lock. If the current task is terminated, other tasks could be deadlocked.  </p>\n<p> When a failure occurs in a critical region, the host might decide to unload the entire <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> rather than take the risk of continuing execution in a potentially unstable state. To inform the host that your code is entering a critical region, call <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_BeginCriticalRegion_\" data-linktype=\"relative-path\">BeginCriticalRegion</a>. Call EndCriticalRegion when execution returns to a non-critical region of code.  </p>\n<p> Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_EndThreadAffinity\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EndThreadAffinity()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void EndThreadAffinity ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management. A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time. Most tasks are not affected by this switching. However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread. These tasks must inform the host when they execute code that should not be switched.  </p>\n<p> For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_BeginThreadAffinity_\" data-linktype=\"relative-path\">BeginThreadAffinity</a> before acquiring the lock, and EndThreadAffinity after releasing the lock.  </p>\n<p> Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Finalize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Finalize()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">~Thread ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The garbage collector calls Finalize when the current object is ready to be finalized.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_FreeNamedDataSlot_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FreeNamedDataSlot(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Eliminates the association between a name and a slot, for all threads in the process. For better performance, use fields that are marked with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void FreeNamedDataSlot (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the data slot to be freed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"IMPORTANT\"><h5>Important</h5><p> The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see <a href=\"../Topic/Thread%20Local%20Storage:%20Thread-Relative%20Static%20Fields%20and%20Data%20Slots.md\" data-linktype=\"relative-path\">Thread Local Storage: Thread-Relative Static Fields and Data Slots</a>.  </p>\n</div>\n<p> After any thread calls <code>FreeNamedDataSlot</code>, any other thread that calls <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_GetNamedDataSlot_\" data-linktype=\"relative-path\">GetNamedDataSlot</a> with the same name will allocate a new slot associated with the name. Subsequent calls to <code>GetNamedDataSlot</code> by any thread will return the new slot. However, any thread that still has a <a class=\"xref\" href=\"system.localdatastoreslot\" data-linktype=\"relative-path\">System.LocalDataStoreSlot</a> returned by an earlier call to <code>GetNamedDataSlot</code> can continue to use the old slot.  </p>\n<p> A slot that has been associated with a name is released only when every <code>LocalDataStoreSlot</code> that was obtained prior to the call to <code>FreeNamedDataSlot</code> has been released and garbage-collected.  </p>\n<p> Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_GetApartmentState\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetApartmentState()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">ApartmentState</a> value indicating the apartment state.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.ApartmentState GetApartmentState ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">ApartmentState</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">ApartmentState</a> values indicating the apartment state of the managed thread. The default is <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">ApartmentState</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method, along with the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_SetApartmentState_\" data-linktype=\"relative-path\">SetApartmentState</a> method and the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_TrySetApartmentState_\" data-linktype=\"relative-path\">TrySetApartmentState</a> method, replaces the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_ApartmentState_\" data-linktype=\"relative-path\">ApartmentState</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_GetCompressedStack\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetCompressedStack()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a <a class=\"xref\" href=\"system.threading.compressedstack\" data-linktype=\"relative-path\">CompressedStack</a> object that can be used to capture the stack for the current thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.CompressedStack GetCompressedStack ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.compressedstack\" data-linktype=\"relative-path\">CompressedStack</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>None.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>In all cases.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is no longer supported.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_GetData_System_LocalDataStoreSlot_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetData(LocalDataStoreSlot)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves the value from the specified slot on the current thread, within the current thread&#39;s current domain. For better performance, use fields that are marked with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static object GetData (LocalDataStoreSlot slot);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>slot</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.localdatastoreslot\" data-linktype=\"relative-path\">LocalDataStoreSlot</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.localdatastoreslot\" data-linktype=\"relative-path\">LocalDataStoreSlot</a> from which to get the value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The retrieved value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"IMPORTANT\"><h5>Important</h5><p> The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see <a href=\"../Topic/Thread%20Local%20Storage:%20Thread-Relative%20Static%20Fields%20and%20Data%20Slots.md\" data-linktype=\"relative-path\">Thread Local Storage: Thread-Relative Static Fields and Data Slots</a>.  </p>\n</div>\n<p> Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> GetData is a <code>Shared</code> method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread. To avoid confusion, use the class name when calling <code>Shared</code> methods: <code>Dim test As Object = Thread.GetData(testSlot)</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_GetDomain\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetDomain()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the current domain in which the current thread is running.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static AppDomain GetDomain ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> representing the current application domain of the running thread.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_GetDomainID\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetDomainID()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a unique application domain identifier.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int GetDomainID ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer uniquely identifying the application domain.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a hash code for the current thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer hash code value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The hash code is not guaranteed to be unique. Use the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_ManagedThreadId_\" data-linktype=\"relative-path\">ManagedThreadId</a> property if you need a unique identifier for a managed thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_GetNamedDataSlot_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetNamedDataSlot(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Looks up a named data slot. For better performance, use fields that are marked with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static LocalDataStoreSlot GetNamedDataSlot (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the local data slot.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.localdatastoreslot\" data-linktype=\"relative-path\">LocalDataStoreSlot</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.localdatastoreslot\" data-linktype=\"relative-path\">LocalDataStoreSlot</a> allocated for this thread.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"IMPORTANT\"><h5>Important</h5><p> The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see <a href=\"../Topic/Thread%20Local%20Storage:%20Thread-Relative%20Static%20Fields%20and%20Data%20Slots.md\" data-linktype=\"relative-path\">Thread Local Storage: Thread-Relative Static Fields and Data Slots</a>.  </p>\n</div>\n<p> Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires. Data slots are unique per thread. No other thread (not even a child thread) can get that data.  </p>\n<p> If the named slot does not exist, a new slot is allocated. Named data slots are public and can be manipulated by anyone.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Interrupt\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Interrupt()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Interrupts a thread that is in the <code>WaitSleepJoin</code> thread state.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Interrupt ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the appropriate <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If this thread is not currently blocked in a wait, sleep, or join state, it will be interrupted when it next begins to block.  </p>\n<p> <a class=\"xref\" href=\"system.threading.threadinterruptedexception\" data-linktype=\"relative-path\">ThreadInterruptedException</a> is thrown in the interrupted thread, but not until the thread blocks. If the thread never blocks, the exception is never thrown, and thus the thread might complete without ever being interrupted.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Join\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Join()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <code>SendMessage</code> pumping.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Join ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller attempted to join a thread that is in the <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a> state.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadinterruptedexception\" data-linktype=\"relative-path\">ThreadInterruptedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The thread is interrupted while waiting.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until the thread whose Join method is called has completed. Use this method to ensure that a thread has been terminated. The caller will block indefinitely if the thread does not terminate. In the following example, the <code>Thread1</code> thread calls the Join method of <code>Thread2</code>, which causes <code>Thread1</code> to block until <code>Thread2</code> has completed.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Thread.Join#1\">using System;\nusing System.Threading;\n\npublic class Example\n{\n   static Thread thread1, thread2;\n   \n   public static void Main()\n   {\n      thread1 = new Thread(ThreadProc);\n      thread1.Name = &quot;Thread1&quot;;\n      thread1.Start();\n      \n      thread2 = new Thread(ThreadProc);\n      thread2.Name = &quot;Thread2&quot;;\n      thread2.Start();   \n   }\n\n   private static void ThreadProc()\n   {\n      Console.WriteLine(&quot;\\nCurrent thread: {0}&quot;, Thread.CurrentThread.Name);\n      if (Thread.CurrentThread.Name == &quot;Thread1&quot; &amp;&amp; \n          thread2.ThreadState != ThreadState.Unstarted)\n         thread2.Join();\n      \n      Thread.Sleep(4000);\n      Console.WriteLine(&quot;\\nCurrent thread: {0}&quot;, Thread.CurrentThread.Name);\n      Console.WriteLine(&quot;Thread1: {0}&quot;, thread1.ThreadState);\n      Console.WriteLine(&quot;Thread2: {0}\\n&quot;, thread2.ThreadState);\n   }\n}\n// The example displays output like the following:\n//       Current thread: Thread1\n//       \n//       Current thread: Thread2\n//       \n//       Current thread: Thread2\n//       Thread1: WaitSleepJoin\n//       Thread2: Running\n//       \n//       \n//       Current thread: Thread1\n//       Thread1: Running\n//       Thread2: Stopped\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Thread.Join#1\">Imports System.Threading\n\nModule Example\n   Dim thread1, thread2 As Thread\n\n   Public Sub Main()\n      thread1 = new Thread(AddressOf ThreadProc)\n      thread1.Name = &quot;Thread1&quot;\n      thread1.Start()\n      \n      thread2 = New Thread(AddressOf ThreadProc)\n      thread2.Name = &quot;Thread2&quot;\n      thread2.Start()   \n   End Sub\n\n   Private Sub ThreadProc()\n      Console.WriteLine()\n      Console.WriteLine(&quot;Current thread: {0}&quot;, Thread.CurrentThread.Name)\n      If (Thread.CurrentThread.Name = &quot;Thread1&quot; And \n          thread2.ThreadState &lt;&gt; ThreadState.Unstarted)\n         thread2.Join()\n      End If\n      Thread.Sleep(4000)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Current thread: {0}&quot;, Thread.CurrentThread.Name)\n      Console.WriteLine(&quot;Thread1: {0}&quot;, thread1.ThreadState)\n      Console.WriteLine(&quot;Thread2: {0}&quot;, thread2.ThreadState)\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays output like the following :\n&#39;       Current thread: Thread1\n&#39;       \n&#39;       Current thread: Thread2\n&#39;       \n&#39;       Current thread: Thread2\n&#39;       Thread1: WaitSleepJoin\n&#39;       Thread2: Running\n&#39;       \n&#39;       \n&#39;       Current thread: Thread1\n&#39;       Thread1: Running\n&#39;       Thread2: Stopped\n</code></pre><p> If the thread has already terminated when <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join_\" data-linktype=\"relative-path\">Join</a> is called, the method returns immediately.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> You should never call the Join method of the <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> object that represents the current thread from the current thread. This causes your app to hang because the current thread waits upon itself indefinitely,  </p>\n</div>\n<p> This method changes the state of the calling thread to include <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">System.Threading.ThreadState</a>. You cannot invoke <code>Join</code> on a thread that is in the <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">System.Threading.ThreadState</a> state.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Join_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Join(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Join (int millisecondsTimeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>millisecondsTimeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of milliseconds to wait for the thread to terminate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the thread has terminated; <code>false</code> if the thread has not terminated after the amount of time specified by the <code>millisecondsTimeout</code> parameter has elapsed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of <code>millisecondsTimeout</code> is negative and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> in milliseconds.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The thread has not been started.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join_\" data-linktype=\"relative-path\">Join</a> method is called has completed or the time-out interval has elapsed. In the following example, the <code>Thread1</code> thread calls the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join\" data-linktype=\"relative-path\">Join()</a> method of <code>Thread2</code>, which causes <code>Thread1</code> to block either until <code>Thread2</code> has completed or 2 seconds have elapsed.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Thread.Join#2\">using System;\nusing System.Threading;\n\npublic class Example\n{\n   static Thread thread1, thread2;\n   \n   public static void Main()\n   {\n      thread1 = new Thread(ThreadProc);\n      thread1.Name = &quot;Thread1&quot;;\n      thread1.Start();\n      \n      thread2 = new Thread(ThreadProc);\n      thread2.Name = &quot;Thread2&quot;;\n      thread2.Start();   \n   }\n\n   private static void ThreadProc()\n   {\n      Console.WriteLine(&quot;\\nCurrent thread: {0}&quot;, Thread.CurrentThread.Name);\n      if (Thread.CurrentThread.Name == &quot;Thread1&quot; &amp;&amp; \n          thread2.ThreadState != ThreadState.Unstarted)\n         if (thread2.Join(2000))\n            Console.WriteLine(&quot;Thread2 has termminated.&quot;);\n         else\n            Console.WriteLine(&quot;The timeout has elapsed and Thread1 will resume.&quot;);   \n      \n      Thread.Sleep(4000);\n      Console.WriteLine(&quot;\\nCurrent thread: {0}&quot;, Thread.CurrentThread.Name);\n      Console.WriteLine(&quot;Thread1: {0}&quot;, thread1.ThreadState);\n      Console.WriteLine(&quot;Thread2: {0}\\n&quot;, thread2.ThreadState);\n   }\n}\n// The example displays the following output:\n//       Current thread: Thread1\n//       \n//       Current thread: Thread2\n//       The timeout has elapsed and Thread1 will resume.\n//       \n//       Current thread: Thread2\n//       Thread1: WaitSleepJoin\n//       Thread2: Running\n//       \n//       \n//       Current thread: Thread1\n//       Thread1: Running\n//       Thread2: Stopped\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Thread.Join#2\">Imports System.Threading\n\nModule Example\n   Dim thread1, thread2 As Thread\n\n   Public Sub Main()\n      thread1 = new Thread(AddressOf ThreadProc)\n      thread1.Name = &quot;Thread1&quot;\n      thread1.Start()\n      \n      thread2 = New Thread(AddressOf ThreadProc)\n      thread2.Name = &quot;Thread2&quot;\n      thread2.Start()   \n   End Sub\n\n   Private Sub ThreadProc()\n      Console.WriteLine()\n      Console.WriteLine(&quot;Current thread: {0}&quot;, Thread.CurrentThread.Name)\n      If (Thread.CurrentThread.Name = &quot;Thread1&quot; And \n          thread2.ThreadState &lt;&gt; ThreadState.Unstarted)\n         If thread2.Join(TimeSpan.FromSeconds(2))\n            Console.WriteLine(&quot;Thread2 has termminated.&quot;)\n         Else\n            Console.WriteLine(&quot;The timeout has elapsed and Thread1 will resume.&quot;)\n         End If      \n      End If\n      Thread.Sleep(4000)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Current thread: {0}&quot;, Thread.CurrentThread.Name)\n      Console.WriteLine(&quot;Thread1: {0}&quot;, thread1.ThreadState)\n      Console.WriteLine(&quot;Thread2: {0}&quot;, thread2.ThreadState)\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Current thread: Thread1\n&#39;       \n&#39;       Current thread: Thread2\n&#39;       \n&#39;       Current thread: Thread2\n&#39;       Thread1: WaitSleepJoin\n&#39;       Thread2: Running\n&#39;       \n&#39;       \n&#39;       Current thread: Thread1\n&#39;       Thread1: Running\n&#39;       Thread2: Stopped\n</code></pre><p> If <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a> is specified for the <code>millisecondsTimeout</code> parameter, this method behaves identically to the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join\" data-linktype=\"relative-path\">Join()</a> method overload, except for the return value.  </p>\n<p> If the thread has already terminated when <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join_\" data-linktype=\"relative-path\">Join</a> is called, the method returns immediately.  </p>\n<p> This method changes the state of the calling thread to include <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">System.Threading.ThreadState</a>. You cannot invoke <code>Join</code> on a thread that is in the <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">System.Threading.ThreadState</a> state.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Join_System_TimeSpan_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Join(TimeSpan)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Join (TimeSpan timeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>timeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> set to the amount of time to wait for the thread to terminate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the thread terminated; <code>false</code> if the thread has not terminated after the amount of time specified by the <code>timeout</code> parameter has elapsed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of <code>timeout</code> is negative and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> in milliseconds, or is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> milliseconds.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller attempted to join a thread that is in the <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a> state.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Join is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join_\" data-linktype=\"relative-path\">Join</a> method is called has completed or the time-out interval has elapsed. In the following example, the <code>Thread1</code> thread calls the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join\" data-linktype=\"relative-path\">Join()</a> method of <code>Thread2</code>, which causes <code>Thread1</code> to block either until <code>Thread2</code> has completed or 2 seconds have elapsed.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Thread.Join#3\">using System;\nusing System.Threading;\n\npublic class Example\n{\n   static Thread thread1, thread2;\n   \n   public static void Main()\n   {\n      thread1 = new Thread(ThreadProc);\n      thread1.Name = &quot;Thread1&quot;;\n      thread1.Start();\n      \n      thread2 = new Thread(ThreadProc);\n      thread2.Name = &quot;Thread2&quot;;\n      thread2.Start();   \n   }\n\n   private static void ThreadProc()\n   {\n      Console.WriteLine(&quot;\\nCurrent thread: {0}&quot;, Thread.CurrentThread.Name);\n      if (Thread.CurrentThread.Name == &quot;Thread1&quot; &amp;&amp; \n          thread2.ThreadState != ThreadState.Unstarted)\n         if (thread2.Join(TimeSpan.FromSeconds(2)))\n            Console.WriteLine(&quot;Thread2 has termminated.&quot;);\n         else\n            Console.WriteLine(&quot;The timeout has elapsed and Thread1 will resume.&quot;);   \n      \n      Thread.Sleep(4000);\n      Console.WriteLine(&quot;\\nCurrent thread: {0}&quot;, Thread.CurrentThread.Name);\n      Console.WriteLine(&quot;Thread1: {0}&quot;, thread1.ThreadState);\n      Console.WriteLine(&quot;Thread2: {0}\\n&quot;, thread2.ThreadState);\n   }\n}\n// The example displays the following output:\n//       Current thread: Thread1\n//       \n//       Current thread: Thread2\n//       The timeout has elapsed and Thread1 will resume.\n//       \n//       Current thread: Thread2\n//       Thread1: WaitSleepJoin\n//       Thread2: Running\n//       \n//       \n//       Current thread: Thread1\n//       Thread1: Running\n//       Thread2: Stopped\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Thread.Join#3\">Imports System.Threading\n\nModule Example\n   Dim thread1, thread2 As Thread\n\n   Public Sub Main()\n      thread1 = new Thread(AddressOf ThreadProc)\n      thread1.Name = &quot;Thread1&quot;\n      thread1.Start()\n      \n      thread2 = New Thread(AddressOf ThreadProc)\n      thread2.Name = &quot;Thread2&quot;\n      thread2.Start()   \n   End Sub\n\n   Private Sub ThreadProc()\n      Console.WriteLine()\n      Console.WriteLine(&quot;Current thread: {0}&quot;, Thread.CurrentThread.Name)\n      If (Thread.CurrentThread.Name = &quot;Thread1&quot; And \n          thread2.ThreadState &lt;&gt; ThreadState.Unstarted)\n         If thread2.Join(2000)\n            Console.WriteLine(&quot;Thread2 has termminated.&quot;)\n         Else\n            Console.WriteLine(&quot;The timeout has elapsed and Thread1 will resume.&quot;)\n         End If      \n      End If\n      Thread.Sleep(4000)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Current thread: {0}&quot;, Thread.CurrentThread.Name)\n      Console.WriteLine(&quot;Thread1: {0}&quot;, thread1.ThreadState)\n      Console.WriteLine(&quot;Thread2: {0}&quot;, thread2.ThreadState)\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Current thread: Thread1\n&#39;       \n&#39;       Current thread: Thread2\n&#39;       \n&#39;       Current thread: Thread2\n&#39;       Thread1: WaitSleepJoin\n&#39;       Thread2: Running\n&#39;       \n&#39;       \n&#39;       Current thread: Thread1\n&#39;       Thread1: Running\n&#39;       Thread2: Stopped\n</code></pre><p> If <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a> is specified for <code>timeout</code>, this method behaves identically to the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join\" data-linktype=\"relative-path\">Join()</a> method overload, except for the return value.  </p>\n<p> If the thread has already terminated when <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join_\" data-linktype=\"relative-path\">Join</a> is called, the method returns immediately.  </p>\n<p> This method changes the state of the current thread to include <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a>. You cannot invoke <code>Join</code> on a thread that is in the <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">System.Threading.ThreadState</a> state.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_MemoryBarrier\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MemoryBarrier()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to MemoryBarrier execute after memory accesses that follow the call to MemoryBarrier.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void MemoryBarrier ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>MemoryBarrier is required only on multiprocessor systems with weak memory ordering (for example, a system employing multiple Intel Itanium processors).  </p>\n<p> For most purposes, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, or the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier ways to synchronize data.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_ResetAbort\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ResetAbort()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Cancels an <span class=\"xref\">stem.Threading.Thread.Abort*</span> requested for the current thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void ResetAbort ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>Abort</code> was not invoked on the current thread.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required security permission for the current thread.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can only be called by code with the proper permissions.  </p>\n<p> When a call is made to <code>Abort</code> to terminate a thread, the system throws a <a class=\"xref\" href=\"system.threading.threadabortexception\" data-linktype=\"relative-path\">ThreadAbortException</a>. <code>ThreadAbortException</code> is a special exception that can be caught by application code, but is rethrown at the end of the catch block unless <code>ResetAbort</code> is called. <code>ResetAbort</code> cancels the request to abort, and prevents the <code>ThreadAbortException</code> from terminating the thread.  </p>\n<p> See <a class=\"xref\" href=\"system.threading.threadabortexception\" data-linktype=\"relative-path\">ThreadAbortException</a> for an example that demonstrates calling the <code>ResetAbort</code> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Resume\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Resume()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Resumes a thread that has been suspended.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Resume ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The thread has not been started, is dead, or is not in the suspended state.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the appropriate <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"CAUTION\"><h5>Caution</h5><p> Do not use the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Suspend_\" data-linktype=\"relative-path\">Suspend</a> and Resume methods to synchronize the activities of threads. You have no way of knowing what code a thread is executing when you suspend it. If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> might be blocked. If you suspend a thread while it is executing a class constructor, other threads in the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> that attempt to use that class are blocked. Deadlocks can occur very easily.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_SetApartmentState_System_Threading_ApartmentState_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SetApartmentState(ApartmentState)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Sets the apartment state of a thread before it is started.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void SetApartmentState (System.Threading.ApartmentState state);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>state</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">ApartmentState</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The new apartment state.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>state</code> is not a valid apartment state.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The thread has already been started.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The apartment state has already been initialized.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>New threads are initialized as <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">System.Threading.ApartmentState</a> if their apartment state has not been set before they are started. Apartment state must be set before a thread is started.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The main application thread is initialized to <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">System.Threading.ApartmentState</a> by default. The only way to set the apartment state of the main application thread to <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">System.Threading.ApartmentState</a> is to apply the <a class=\"xref\" href=\"system.stathreadattribute\" data-linktype=\"relative-path\">STAThreadAttribute</a> attribute to the entry point method.  </p>\n</div>\n<p> The SetApartmentState method, along with the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_GetApartmentState_\" data-linktype=\"relative-path\">GetApartmentState</a> method and the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_TrySetApartmentState_\" data-linktype=\"relative-path\">TrySetApartmentState</a> method, replaces the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_ApartmentState_\" data-linktype=\"relative-path\">ApartmentState</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_SetCompressedStack_System_Threading_CompressedStack_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SetCompressedStack(CompressedStack)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Applies a captured <a class=\"xref\" href=\"system.threading.compressedstack\" data-linktype=\"relative-path\">CompressedStack</a> to the current thread.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void SetCompressedStack (System.Threading.CompressedStack stack);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>stack</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.compressedstack\" data-linktype=\"relative-path\">CompressedStack</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.threading.compressedstack\" data-linktype=\"relative-path\">CompressedStack</a> object to be applied to the current thread.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>In all cases.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is no longer supported.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_SetData_System_LocalDataStoreSlot_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SetData(LocalDataStoreSlot,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Sets the data in the specified slot on the currently running thread, for that thread&#39;s current domain. For better performance, use fields marked with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute instead.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void SetData (LocalDataStoreSlot slot, object data);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>slot</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.localdatastoreslot\" data-linktype=\"relative-path\">LocalDataStoreSlot</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.localdatastoreslot\" data-linktype=\"relative-path\">LocalDataStoreSlot</a> in which to set the value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>data</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be set.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"IMPORTANT\"><h5>Important</h5><p> The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <a class=\"xref\" href=\"system.threadstaticattribute\" data-linktype=\"relative-path\">ThreadStaticAttribute</a> attribute) and data slots. Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking. For more information about using TLS, see <a href=\"../Topic/Thread%20Local%20Storage:%20Thread-Relative%20Static%20Fields%20and%20Data%20Slots.md\" data-linktype=\"relative-path\">Thread Local Storage: Thread-Relative Static Fields and Data Slots</a>.  </p>\n</div>\n<p> Threads use a local store memory mechanism to store thread-specific data. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread procedure ends and the <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a> object has been reclaimed by garbage collection. Data slots are unique per thread. No other thread (not even a child thread) can get that data.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> SetData is a <code>Shared</code> method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread. To avoid confusion, use the class name when calling <code>Shared</code> methods: <code>Thread.SetData(testSlot, &quot;test data&quot;)</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Sleep_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Sleep(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Suspends the current thread for the specified number of milliseconds.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Sleep (int millisecondsTimeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>millisecondsTimeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of milliseconds for which the thread is suspended. If the value of the <code>millisecondsTimeout</code> argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The time-out value is negative and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The thread will not be scheduled for execution by the operating system for the amount of time specified. This method changes the state of the thread to include <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a>.  </p>\n<p> You can specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a> for the <code>millisecondsTimeout</code> parameter to suspend the thread indefinitely. However, we recommend that you use other <a class=\"xref\" href=\"system.threading\" data-linktype=\"relative-path\">System.Threading</a> classes such as <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a>, <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a>, <a class=\"xref\" href=\"system.threading.eventwaithandle\" data-linktype=\"relative-path\">EventWaitHandle</a>, or <a class=\"xref\" href=\"system.threading.semaphore\" data-linktype=\"relative-path\">Semaphore</a> instead to sychronize threads or manage resources.  </p>\n<p> The system clock ticks at a specific rate called the clock resolution. The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks. For more information on clock resolution and the waiting time, see the <a href=\"http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx\" data-linktype=\"external\">Sleep function</a> topic. This method calls the <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms686298.aspx\" data-linktype=\"external\">Sleep function</a> from the Windows system APIs.  </p>\n<p> This method does not perform standard COM and SendMessage pumping.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you need to sleep on a thread that has <a class=\"xref\" href=\"system.stathreadattribute\" data-linktype=\"relative-path\">STAThreadAttribute</a>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join_\" data-linktype=\"relative-path\">Join</a> method that specifies a timeout interval.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Sleep_System_TimeSpan_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Sleep(TimeSpan)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Suspends the current thread for the specified amount of time.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void Sleep (TimeSpan timeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>timeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The amount of time for which the thread is suspended. If the value of the <code>millisecondsTimeout</code> argument is <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of <code>timeout</code> is negative and is not equal to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> in milliseconds, or is greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> milliseconds.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The thread will not be scheduled for execution by the operating system for the amount of time specified. This method changes the state of the thread to include <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a>.  </p>\n<p> You can specify <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_InfiniteTimeSpan\" data-linktype=\"relative-path\">System.Threading.Timeout.InfiniteTimeSpan</a> for the <code>timeout</code> parameter to suspend the thread indefinitely. However, we recommend that you use other <a class=\"xref\" href=\"system.threading\" data-linktype=\"relative-path\">System.Threading</a> classes such as <a class=\"xref\" href=\"system.threading.mutex\" data-linktype=\"relative-path\">Mutex</a>, <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a>, <a class=\"xref\" href=\"system.threading.eventwaithandle\" data-linktype=\"relative-path\">EventWaitHandle</a>, or <a class=\"xref\" href=\"system.threading.semaphore\" data-linktype=\"relative-path\">Semaphore</a> instead to sychronize threads or manage resources.  </p>\n<p> This overload of <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Sleep_\" data-linktype=\"relative-path\">Sleep</a> uses the total number of whole milliseconds in <code>timeout</code>. Fractional milliseconds are discarded.  </p>\n<p> This method does not perform standard COM and SendMessage pumping.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you need to sleep on a thread that has <a class=\"xref\" href=\"system.stathreadattribute\" data-linktype=\"relative-path\">STAThreadAttribute</a>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Join_\" data-linktype=\"relative-path\">Join</a> method that specifies a timeout interval.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_SpinWait_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SpinWait(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Causes a thread to wait the number of times defined by the <code>iterations</code> parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void SpinWait (int iterations);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>iterations</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer that defines how long a thread is to wait.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The SpinWait method is useful for implementing locks. Classes in the .NET Framework, such as <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> and <a class=\"xref\" href=\"system.threading.readerwriterlock\" data-linktype=\"relative-path\">ReaderWriterLock</a>, use this method internally. SpinWait essentially puts the processor into a very tight loop, with the loop count specified by the <code>iterations</code> parameter. The duration of the wait therefore depends on the speed of the processor.  </p>\n<p> Contrast this with the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Sleep_\" data-linktype=\"relative-path\">Sleep</a> method. A thread that calls <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Sleep_\" data-linktype=\"relative-path\">Sleep</a> yields the rest of its current slice of processor time, even if the specified interval is zero. Specifying a non-zero interval for <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Sleep_\" data-linktype=\"relative-path\">Sleep</a> removes the thread from consideration by the thread scheduler until the time interval has elapsed.  </p>\n<p> SpinWait is not generally useful for ordinary applications. In most cases, you should use the synchronization classes provided by the .NET Framework; for example, call <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> or a statement that wraps <a class=\"xref\" href=\"system.threading.monitor#System_Threading_Monitor_Enter_\" data-linktype=\"relative-path\">Enter</a> (<code>lock</code> in C# or <code>SyncLock</code> in Visual Basic).  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> In the rare case where it is advantageous to avoid a context switch, such as when you know that a state change is imminent, make a call to the SpinWait method in your loop. The code SpinWait executes is designed to prevent problems that can occur on computers with multiple processors. For example, on computers with multiple Intel processors employing Hyper-Threading technology, SpinWait prevents processor starvation in certain situations.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Start\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Start()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Causes the operating system to change the state of the current instance to <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Start ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The thread has already been started.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>There is not enough memory available to start this thread.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Once a thread is in the <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">System.Threading.ThreadState</a> state, the operating system can schedule it for execution. The thread begins executing at the first line of the method represented by the <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> or <a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a> delegate supplied to the thread constructor. Note that the call to Start does not block the calling thread.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If this overload is used with a thread created using a <a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a> delegate, <code>null</code> is passed to the method executed by the thread.  </p>\n</div>\n<p> Once the thread terminates, it cannot be restarted with another call to <code>Start</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Start_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Start(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Causes the operating system to change the state of the current instance to <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">ThreadState</a>, and optionally supplies an object containing data to be used by the method the thread executes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Start (object parameter);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>parameter</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that contains data to be used by the method the thread executes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The thread has already been started.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>There is not enough memory available to start this thread.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>This thread was created using a <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> delegate instead of a <a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a> delegate.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Once a thread is in the <a class=\"xref\" href=\"system.threading.threadstate\" data-linktype=\"relative-path\">System.Threading.ThreadState</a> state, the operating system can schedule it for execution. The thread begins executing at the first line of the method represented by the <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> or <a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a> delegate supplied to the thread constructor. Note that the call to Start does not block the calling thread.  </p>\n<p> Once the thread terminates, it cannot be restarted with another call to <code>Start</code>.  </p>\n<p> This overload and the <a class=\"xref\" href=\"system.threading.parameterizedthreadstart\" data-linktype=\"relative-path\">ParameterizedThreadStart</a> delegate make it easy to pass data to a thread procedure, but the technique is not type safe because any object can be passed to this overload. A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object. For more information, see <a href=\"../Topic/Creating%20Threads%20and%20Passing%20Data%20at%20Start%20Time.md\" data-linktype=\"relative-path\">Creating Threads and Passing Data at Start Time</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Suspend\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Suspend()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Either suspends the thread, or if the thread is already suspended, has no effect.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Suspend ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The thread has not been started or is dead.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the appropriate <a class=\"xref\" href=\"system.security.permissions.securitypermission\" data-linktype=\"relative-path\">SecurityPermission</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the thread is already suspended, this method has no effect.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not use the Suspend and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Resume_\" data-linktype=\"relative-path\">Resume</a> methods to synchronize the activities of threads. You have no way of knowing what code a thread is executing when you suspend it. If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> might be blocked. If you suspend a thread while it is executing a class constructor, other threads in the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> that attempt to use that class are blocked. Deadlocks can occur very easily.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_TrySetApartmentState_System_Threading_ApartmentState_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TrySetApartmentState(ApartmentState)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Sets the apartment state of a thread before it is started.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool TrySetApartmentState (System.Threading.ApartmentState state);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>state</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">ApartmentState</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The new apartment state.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the apartment state is set; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>state</code> is not a valid apartment state.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.threadstateexception\" data-linktype=\"relative-path\">ThreadStateException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The thread has already been started.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>New threads are initialized as <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">System.Threading.ApartmentState</a> if their apartment state has not been set before they are started. Apartment state must be set before a thread is started.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The main application thread is initialized to <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">System.Threading.ApartmentState</a> by default. The only way to set the apartment state of the main application thread to <a class=\"xref\" href=\"system.threading.apartmentstate\" data-linktype=\"relative-path\">System.Threading.ApartmentState</a> is to apply the <a class=\"xref\" href=\"system.stathreadattribute\" data-linktype=\"relative-path\">STAThreadAttribute</a> attribute to the entry point method.  </p>\n</div>\n<p> The TrySetApartmentState method, along with the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_GetApartmentState_\" data-linktype=\"relative-path\">GetApartmentState</a> method and the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_SetApartmentState_\" data-linktype=\"relative-path\">SetApartmentState</a> method, replaces the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_ApartmentState_\" data-linktype=\"relative-path\">ApartmentState</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_Byte__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(Byte)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static byte VolatileRead (ref byte address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>VolatileRead and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, VolatileRead obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, VolatileRead and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use VolatileRead or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses VolatileRead or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_Double__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(Double)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static double VolatileRead (ref double address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_Int16__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(Int16)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static short VolatileRead (ref short address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_Int32__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int VolatileRead (ref int address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_Int64__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static long VolatileRead (ref long address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_IntPtr__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(IntPtr)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static IntPtr VolatileRead (ref IntPtr address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_Object__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static object VolatileRead (ref object address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_SByte__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(SByte)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static sbyte VolatileRead (ref sbyte address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_Single__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(Single)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static float VolatileRead (ref float address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_UInt16__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(UInt16)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static ushort VolatileRead (ref ushort address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_UInt32__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(UInt32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static uint VolatileRead (ref uint address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_UInt64__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(UInt64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static ulong VolatileRead (ref ulong address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileRead_System_UIntPtr__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileRead(UIntPtr)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Reads the value of a field. The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static UIntPtr VolatileRead (ref UIntPtr address);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uintptr\" data-linktype=\"relative-path\">UIntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to be read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uintptr\" data-linktype=\"relative-path\">UIntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The latest value written to the field by any processor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> obtains the very latest value written to a memory location by any processor. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_Byte__System_Byte_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(Byte,Byte)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref byte address, byte value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and VolatileWrite are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, VolatileWrite ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and VolatileWrite ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or VolatileWrite.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or VolatileWrite.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_Double__System_Double_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(Double,Double)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref double address, double value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_Int16__System_Int16_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(Int16,Int16)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref short address, short value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_Int32__System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref int address, int value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_Int64__System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(Int64,Int64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref long address, long value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_IntPtr__System_IntPtr_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(IntPtr,IntPtr)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref IntPtr address, IntPtr value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_Object__System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(Object,Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref object address, object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_SByte__System_SByte_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(SByte,SByte)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref sbyte address, sbyte value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_Single__System_Single_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(Single,Single)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref float address, float value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_UInt16__System_UInt16_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(UInt16,UInt16)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref ushort address, ushort value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_UInt32__System_UInt32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(UInt32,UInt32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref uint address, uint value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_UInt64__System_UInt64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(UInt64,UInt64)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref ulong address, ulong value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_VolatileWrite_System_UIntPtr__System_UIntPtr_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">VolatileWrite(UIntPtr,UIntPtr)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Writes a value to a field immediately, so that the value is visible to all processors in the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void VolatileWrite (ref UIntPtr address, UIntPtr value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uintptr\" data-linktype=\"relative-path\">UIntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The field to which the value is to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uintptr\" data-linktype=\"relative-path\">UIntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to be written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> are for special cases of synchronization. Under normal circumstances, the C# <code>lock</code> statement, the Visual Basic <code>SyncLock</code> statement, and the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class provide easier alternatives.  </p>\n<p> On a multiprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensures that a value written to a memory location is immediately visible to all processors. This might require flushing processor caches.  </p>\n<p> Even on a uniprocessor system, <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> and <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a> ensure that a value is read or written to memory, and not cached (for example, in a processor register). Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.  </p>\n<p> Calling this method affects only a single memory access. To provide effective synchronization for a field, all access to the field must use <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In C#, using the <code>volatile</code> modifier on a field guarantees that all access to that field uses <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileRead_\" data-linktype=\"relative-path\">VolatileRead</a> or <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_VolatileWrite_\" data-linktype=\"relative-path\">VolatileWrite</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_Yield\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Yield()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the thread to yield to.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool Yield ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the operating system switched execution to another thread; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If this method succeeds, the rest of the thread&#39;s current time slice is yielded. The operating system schedules the calling thread for another time slice, according to its priority and the status of other threads that are available to run.  </p>\n<p> Yielding is limited to the processor that is executing the calling thread. The operating system will not switch execution to another processor, even if that processor is idle or is running a thread of lower priority. If there are no other threads that are ready to execute on the current processor, the operating system does not yield execution, and this method returns <code>false</code>.  </p>\n<p> This method is equivalent to using platform invoke to call the native Win32 <code>SwitchToThread</code> function. You should call the Yield method instead of using platform invoke, because platform invoke bypasses any custom threading behavior the host has requested.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Explicit Interface Implementations\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_System_Runtime_InteropServices__Thread_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">_Thread.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">void _Thread.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>riid</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Reserved for future use. Must be IID_NULL.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rgszNames</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Passed-in array of names to be mapped.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>cNames</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Count of the names to be mapped.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>lcid</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The locale context in which to interpret the names.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rgDispId</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_System_Runtime_InteropServices__Thread_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">_Thread.GetTypeInfo(UInt32,UInt32,IntPtr)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">void _Thread.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>iTInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type information to return.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>lcid</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The locale identifier for the type information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ppTInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Receives a pointer to the requested type information object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_System_Runtime_InteropServices__Thread_GetTypeInfoCount_System_UInt32__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">_Thread.GetTypeInfoCount(UInt32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">void _Thread.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pcTInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Thread_System_Runtime_InteropServices__Thread_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">_Thread.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides access to properties and methods exposed by an object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">void _Thread.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dispIdMember</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Identifies the member.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>riid</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Reserved for future use. Must be IID_NULL.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>lcid</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The locale context in which to interpret arguments.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>wFlags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Flags describing the context of the call.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pDispParams</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pVarResult</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Pointer to the location where the result is to be stored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pExcepInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Pointer to a structure that contains exception information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>puArgErr</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first argument that has an error.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.Thread.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Thread.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.Abort\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.AllocateDataSlot\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.AllocateNamedDataSlot\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.ApartmentState\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.BeginCriticalRegion\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.BeginThreadAffinity\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.CurrentContext\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.CurrentCulture\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.CurrentPrincipal\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.CurrentThread\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.CurrentUICulture\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.DisableComObjectEagerCleanup\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.EndCriticalRegion\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.EndThreadAffinity\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.ExecutionContext\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.Finalize\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.FreeNamedDataSlot\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.GetApartmentState\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.GetCompressedStack\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.GetData\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.GetDomain\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.GetDomainID\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.GetNamedDataSlot\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.Interrupt\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.IsAlive\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.IsBackground\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.IsThreadPoolThread\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.Join\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.ManagedThreadId\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.MemoryBarrier\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.Name\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.Priority\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.ResetAbort\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.Resume\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.SetApartmentState\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.SetCompressedStack\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.SetData\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.Sleep\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.SpinWait\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.Start\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.Suspend\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread._Thread.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread._Thread.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread._Thread.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread._Thread.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.ThreadState\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.TrySetApartmentState\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.VolatileRead\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.VolatileWrite\">\r\n<meta name=\"APIName\" content=\"System.Threading.Thread.Yield\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d798ec92-58a8-4ed7-34dd-9dc273e34788\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Creates and controls a thread, sets its priority, and gets its status.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.Thread\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.Thread.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Thread.yml","open_to_public_contributors":true,"api_name":["System.Threading.Thread","System.Threading.Thread..ctor","System.Threading.Thread.Abort","System.Threading.Thread.AllocateDataSlot","System.Threading.Thread.AllocateNamedDataSlot","System.Threading.Thread.ApartmentState","System.Threading.Thread.BeginCriticalRegion","System.Threading.Thread.BeginThreadAffinity","System.Threading.Thread.CurrentContext","System.Threading.Thread.CurrentCulture","System.Threading.Thread.CurrentPrincipal","System.Threading.Thread.CurrentThread","System.Threading.Thread.CurrentUICulture","System.Threading.Thread.DisableComObjectEagerCleanup","System.Threading.Thread.EndCriticalRegion","System.Threading.Thread.EndThreadAffinity","System.Threading.Thread.ExecutionContext","System.Threading.Thread.Finalize","System.Threading.Thread.FreeNamedDataSlot","System.Threading.Thread.GetApartmentState","System.Threading.Thread.GetCompressedStack","System.Threading.Thread.GetData","System.Threading.Thread.GetDomain","System.Threading.Thread.GetDomainID","System.Threading.Thread.GetHashCode","System.Threading.Thread.GetNamedDataSlot","System.Threading.Thread.Interrupt","System.Threading.Thread.IsAlive","System.Threading.Thread.IsBackground","System.Threading.Thread.IsThreadPoolThread","System.Threading.Thread.Join","System.Threading.Thread.ManagedThreadId","System.Threading.Thread.MemoryBarrier","System.Threading.Thread.Name","System.Threading.Thread.Priority","System.Threading.Thread.ResetAbort","System.Threading.Thread.Resume","System.Threading.Thread.SetApartmentState","System.Threading.Thread.SetCompressedStack","System.Threading.Thread.SetData","System.Threading.Thread.Sleep","System.Threading.Thread.SpinWait","System.Threading.Thread.Start","System.Threading.Thread.Suspend","System.Threading.Thread._Thread.GetIDsOfNames","System.Threading.Thread._Thread.GetTypeInfo","System.Threading.Thread._Thread.GetTypeInfoCount","System.Threading.Thread._Thread.Invoke","System.Threading.Thread.ThreadState","System.Threading.Thread.TrySetApartmentState","System.Threading.Thread.VolatileRead","System.Threading.Thread.VolatileWrite","System.Threading.Thread.Yield"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.Thread","System::Threading::Thread","System.Threading.Thread.#ctor","System::Threading::Thread::#ctor","System.Threading.Thread.Abort","System::Threading::Thread::Abort","System.Threading.Thread.AllocateDataSlot","System::Threading::Thread::AllocateDataSlot","System.Threading.Thread.AllocateNamedDataSlot","System::Threading::Thread::AllocateNamedDataSlot","System.Threading.Thread.ApartmentState","System::Threading::Thread::ApartmentState","System.Threading.Thread.BeginCriticalRegion","System::Threading::Thread::BeginCriticalRegion","System.Threading.Thread.BeginThreadAffinity","System::Threading::Thread::BeginThreadAffinity","System.Threading.Thread.CurrentContext","System::Threading::Thread::CurrentContext","System.Threading.Thread.CurrentCulture","System::Threading::Thread::CurrentCulture","System.Threading.Thread.CurrentPrincipal","System::Threading::Thread::CurrentPrincipal","System.Threading.Thread.CurrentThread","System::Threading::Thread::CurrentThread","System.Threading.Thread.CurrentUICulture","System::Threading::Thread::CurrentUICulture","System.Threading.Thread.DisableComObjectEagerCleanup","System::Threading::Thread::DisableComObjectEagerCleanup","System.Threading.Thread.EndCriticalRegion","System::Threading::Thread::EndCriticalRegion","System.Threading.Thread.EndThreadAffinity","System::Threading::Thread::EndThreadAffinity","System.Threading.Thread.ExecutionContext","System::Threading::Thread::ExecutionContext","System.Threading.Thread.Finalize","System::Threading::Thread::Finalize","System.Threading.Thread.FreeNamedDataSlot","System::Threading::Thread::FreeNamedDataSlot","System.Threading.Thread.GetApartmentState","System::Threading::Thread::GetApartmentState","System.Threading.Thread.GetCompressedStack","System::Threading::Thread::GetCompressedStack","System.Threading.Thread.GetData","System::Threading::Thread::GetData","System.Threading.Thread.GetDomain","System::Threading::Thread::GetDomain","System.Threading.Thread.GetDomainID","System::Threading::Thread::GetDomainID","System.Threading.Thread.GetHashCode","System::Threading::Thread::GetHashCode","System.Threading.Thread.GetNamedDataSlot","System::Threading::Thread::GetNamedDataSlot","System.Threading.Thread.Interrupt","System::Threading::Thread::Interrupt","System.Threading.Thread.IsAlive","System::Threading::Thread::IsAlive","System.Threading.Thread.IsBackground","System::Threading::Thread::IsBackground","System.Threading.Thread.IsThreadPoolThread","System::Threading::Thread::IsThreadPoolThread","System.Threading.Thread.Join","System::Threading::Thread::Join","System.Threading.Thread.ManagedThreadId","System::Threading::Thread::ManagedThreadId","System.Threading.Thread.MemoryBarrier","System::Threading::Thread::MemoryBarrier","System.Threading.Thread.Name","System::Threading::Thread::Name","System.Threading.Thread.Priority","System::Threading::Thread::Priority","System.Threading.Thread.ResetAbort","System::Threading::Thread::ResetAbort","System.Threading.Thread.Resume","System::Threading::Thread::Resume","System.Threading.Thread.SetApartmentState","System::Threading::Thread::SetApartmentState","System.Threading.Thread.SetCompressedStack","System::Threading::Thread::SetCompressedStack","System.Threading.Thread.SetData","System::Threading::Thread::SetData","System.Threading.Thread.Sleep","System::Threading::Thread::Sleep","System.Threading.Thread.SpinWait","System::Threading::Thread::SpinWait","System.Threading.Thread.Start","System::Threading::Thread::Start","System.Threading.Thread.Suspend","System::Threading::Thread::Suspend","System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames","System::Threading::Thread::System#Runtime#InteropServices#_Thread#GetIDsOfNames","System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo","System::Threading::Thread::System#Runtime#InteropServices#_Thread#GetTypeInfo","System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount","System::Threading::Thread::System#Runtime#InteropServices#_Thread#GetTypeInfoCount","System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke","System::Threading::Thread::System#Runtime#InteropServices#_Thread#Invoke","System.Threading.Thread.ThreadState","System::Threading::Thread::ThreadState","System.Threading.Thread.TrySetApartmentState","System::Threading::Thread::TrySetApartmentState","System.Threading.Thread.VolatileRead","System::Threading::Thread::VolatileRead","System.Threading.Thread.VolatileWrite","System::Threading::Thread::VolatileWrite","System.Threading.Thread.Yield","System::Threading::Thread::Yield"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d798ec92-58a8-4ed7-34dd-9dc273e34788","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading/Thread.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Thread class | Microsoft Docs","_op_ogTitle":"Thread class","description":"Creates and controls a thread, sets its priority, and gets its status.\n","toc_asset_id":"_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.Thread","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.thread","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.thread","fileRelativePath":"System.Threading.Thread.html"},"themesRelativePathToOutputRoot":"_themes/"}