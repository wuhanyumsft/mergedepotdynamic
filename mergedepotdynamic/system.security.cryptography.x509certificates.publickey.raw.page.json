{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_X509Certificates_PublicKey\">\r\n      <span class=\"lang-csharp\">PublicKey</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a certificate&#39;s public key information. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class PublicKey</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">PublicKey</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The PublicKey object contains the object identifier (<a class=\"xref\" href=\"system.security.cryptography.x509certificates.publickey#System_Security_Cryptography_X509Certificates_PublicKey_Oid_\" data-linktype=\"relative-path\">Oid</a>) representing the public key algorithm, the ASN-encoded parameters, and the ASN.1-encoded key value.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_PublicKey__ctor_System_Security_Cryptography_Oid_System_Security_Cryptography_AsnEncodedData_System_Security_Cryptography_AsnEncodedData_\" data-linktype=\"self-bookmark\">PublicKey(Oid,AsnEncodedData,AsnEncodedData)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.publickey\" data-linktype=\"relative-path\">PublicKey</a> class using an object identifier (OID) object of the public key, an ASN.1-encoded representation of the public key parameters, and an ASN.1-encoded representation of the public key value.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_PublicKey_EncodedKeyValue\" data-linktype=\"self-bookmark\">EncodedKeyValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the ASN.1-encoded representation of the public key value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_PublicKey_EncodedParameters\" data-linktype=\"self-bookmark\">EncodedParameters</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the ASN.1-encoded representation of the public key parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_PublicKey_Key\" data-linktype=\"self-bookmark\">Key</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> or <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider\" data-linktype=\"relative-path\">DSACryptoServiceProvider</a> object representing the public key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_X509Certificates_PublicKey_Oid\" data-linktype=\"self-bookmark\">Oid</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object identifier (OID) object of the public key.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_PublicKey__ctor_System_Security_Cryptography_Oid_System_Security_Cryptography_AsnEncodedData_System_Security_Cryptography_AsnEncodedData_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_PublicKey__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PublicKey(Oid,AsnEncodedData,AsnEncodedData)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.publickey\" data-linktype=\"relative-path\">PublicKey</a> class using an object identifier (OID) object of the public key, an ASN.1-encoded representation of the public key parameters, and an ASN.1-encoded representation of the public key value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PublicKey (System.Security.Cryptography.Oid oid, System.Security.Cryptography.AsnEncodedData parameters, System.Security.Cryptography.AsnEncodedData keyValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>oid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.oid\" data-linktype=\"relative-path\">Oid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object identifier (OID) object that represents the public key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>parameters</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asnencodeddata\" data-linktype=\"relative-path\">AsnEncodedData</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An ASN.1-encoded representation of the public key parameters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keyValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asnencodeddata\" data-linktype=\"relative-path\">AsnEncodedData</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An ASN.1-encoded representation of the public key value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_PublicKey_EncodedKeyValue\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_PublicKey_EncodedKeyValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EncodedKeyValue</div>        \r\n          </div>\r\n    \r\n            <p>Gets the ASN.1-encoded representation of the public key value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.AsnEncodedData EncodedKeyValue { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asnencodeddata\" data-linktype=\"relative-path\">AsnEncodedData</a></div>\r\n                  </div>\r\n                  <p>The ASN.1-encoded representation of the public key value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_PublicKey_EncodedParameters\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_PublicKey_EncodedParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EncodedParameters</div>        \r\n          </div>\r\n    \r\n            <p>Gets the ASN.1-encoded representation of the public key parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.AsnEncodedData EncodedParameters { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asnencodeddata\" data-linktype=\"relative-path\">AsnEncodedData</a></div>\r\n                  </div>\r\n                  <p>The ASN.1-encoded representation of the public key parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_PublicKey_Key\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_PublicKey_Key_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Key</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> or <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider\" data-linktype=\"relative-path\">DSACryptoServiceProvider</a> object representing the public key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.AsymmetricAlgorithm Key { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object representing the public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The key algorithm is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns the public key. Both <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> and <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> keys are supported. Call this property to obtain a certificate&#39;s public key. Repeated calls to this property will return the same key.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example opens the current user certificate store, selects only active certificates, and then allows the user to select one or more certificates. The example then writes certificate information to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"CertSelect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"CertSelect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"CertSelect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_X509Certificates_PublicKey_Oid\">\r\n    \r\n            <a id=\"System_Security_Cryptography_X509Certificates_PublicKey_Oid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Oid</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object identifier (OID) object of the public key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.Oid Oid { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.oid\" data-linktype=\"relative-path\">Oid</a></div>\r\n                  </div>\r\n                  <p>An object identifier (OID) object of the public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An object identifier (OID) is a number that uniquely identifies an object class or attribute. An object identifier is represented as a dotted decimal string, such as &quot;1.2.3.4.&quot; Object identifiers are organized into a global hierarchy. National registration authorities issue root object identifiers to individuals or organizations, who manage the hierarchy of OIDs grouped below their root object identifier.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.X509Certificates.PublicKey.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.X509Certificates.PublicKey.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.PublicKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.PublicKey..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.PublicKey.EncodedKeyValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.PublicKey.EncodedParameters\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.PublicKey.Key\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.PublicKey.Oid\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"61584190-cea8-327e-4818-d2777abea9c6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a certificate&amp;#39;s public key information. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography.X509Certificates/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.X509Certificates.PublicKey\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.X509Certificates.PublicKey.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.X509Certificates.PublicKey.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.X509Certificates.PublicKey","System.Security.Cryptography.X509Certificates.PublicKey..ctor","System.Security.Cryptography.X509Certificates.PublicKey.EncodedKeyValue","System.Security.Cryptography.X509Certificates.PublicKey.EncodedParameters","System.Security.Cryptography.X509Certificates.PublicKey.Key","System.Security.Cryptography.X509Certificates.PublicKey.Oid"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.X509Certificates.PublicKey","System::Security::Cryptography::X509Certificates::PublicKey","System.Security.Cryptography.X509Certificates.PublicKey.#ctor","System::Security::Cryptography::X509Certificates::PublicKey::#ctor","System.Security.Cryptography.X509Certificates.PublicKey.EncodedKeyValue","System::Security::Cryptography::X509Certificates::PublicKey::EncodedKeyValue","System.Security.Cryptography.X509Certificates.PublicKey.EncodedParameters","System::Security::Cryptography::X509Certificates::PublicKey::EncodedParameters","System.Security.Cryptography.X509Certificates.PublicKey.Key","System::Security::Cryptography::X509Certificates::PublicKey::Key","System.Security.Cryptography.X509Certificates.PublicKey.Oid","System::Security::Cryptography::X509Certificates::PublicKey::Oid"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"61584190-cea8-327e-4818-d2777abea9c6","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography.X509Certificates/PublicKey.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PublicKey class | Microsoft Docs","_op_ogTitle":"PublicKey class","description":"Represents a certificate&#39;s public key information. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Security.Cryptography.X509Certificates/toc.json","toc_rel":"_splitted/System.Security.Cryptography.X509Certificates/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.X509Certificates.PublicKey","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.x509certificates.publickey","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.x509certificates.publickey","fileRelativePath":"System.Security.Cryptography.X509Certificates.PublicKey.html"},"themesRelativePathToOutputRoot":"_themes/"}