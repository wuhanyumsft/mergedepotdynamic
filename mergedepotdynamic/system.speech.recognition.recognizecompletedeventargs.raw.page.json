{"content":"    \r\n    <h1 id=\"System_Speech_Recognition_RecognizeCompletedEventArgs\">\r\n      <span class=\"lang-csharp\">RecognizeCompletedEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides data for the <code>RecognizeCompleted</code> event raised by a <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine\" data-linktype=\"relative-path\">SpeechRecognitionEngine</a> or a <a class=\"xref\" href=\"system.speech.recognition.speechrecognizer\" data-linktype=\"relative-path\">SpeechRecognizer</a> object.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class RecognizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.AsyncCompletedEventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">RecognizeCompletedEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled\" data-linktype=\"relative-path\">Cancelled</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error\" data-linktype=\"relative-path\">Error</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_RaiseExceptionIfNecessary\" data-linktype=\"relative-path\">RaiseExceptionIfNecessary()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_UserState\" data-linktype=\"relative-path\">UserState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>An instance of <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">RecognizeCompleted</a> is created when the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine\" data-linktype=\"relative-path\">SpeechRecognitionEngine</a> or the <a class=\"xref\" href=\"system.speech.recognition.speechrecognizer\" data-linktype=\"relative-path\">SpeechRecognizer</a> object raises its <code>SpeechRecognized</code> event after completing a <code>RecognizeAsync</code> operation. For more information about speech recognition events, see <a href=\"http://msdn.microsoft.com/en-us/01c598ca-2e0e-4e89-b303-cd1cef9e8482\" data-linktype=\"external\">Using Speech Recognition Events</a>.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Speech_Recognition_RecognizeCompletedEventArgs_AudioPosition\" data-linktype=\"self-bookmark\">AudioPosition</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the location in the input device&#39;s audio stream associated with the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">RecognizeCompleted</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Speech_Recognition_RecognizeCompletedEventArgs_BabbleTimeout\" data-linktype=\"self-bookmark\">BabbleTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether a babble timeout generated the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">RecognizeCompleted</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Speech_Recognition_RecognizeCompletedEventArgs_InitialSilenceTimeout\" data-linktype=\"self-bookmark\">InitialSilenceTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether an initial silence timeout generated the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">RecognizeCompleted</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Speech_Recognition_RecognizeCompletedEventArgs_InputStreamEnded\" data-linktype=\"self-bookmark\">InputStreamEnded</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the input stream ended.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Speech_Recognition_RecognizeCompletedEventArgs_Result\" data-linktype=\"self-bookmark\">Result</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the recognition result.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Speech_Recognition_RecognizeCompletedEventArgs_AudioPosition\">\r\n    \r\n            <a id=\"System_Speech_Recognition_RecognizeCompletedEventArgs_AudioPosition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AudioPosition</div>        \r\n          </div>\r\n    \r\n            <p>Gets the location in the input device&#39;s audio stream associated with the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">RecognizeCompleted</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TimeSpan AudioPosition { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>The location in the input device&#39;s audio stream associated with the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">RecognizeCompleted</a> event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property references the position at the beginning of the recognized phrase in the input device&#39;s generated audio stream. By contrast, the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizerAudioPosition_\" data-linktype=\"relative-path\">RecognizerAudioPosition</a> property references the recognizer&#39;s position within its audio input. These positions can be different. For more information, see <a href=\"http://msdn.microsoft.com/en-us/01c598ca-2e0e-4e89-b303-cd1cef9e8482\" data-linktype=\"external\">Using Speech Recognition Events</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example performs asynchronous speech recognition on a speech recognition grammar, using the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeAsync_\" data-linktype=\"relative-path\">RecognizeAsync</a> method with the in-process recognizer. The example uses <a class=\"xref\" href=\"system.speech.recognition.choices\" data-linktype=\"relative-path\">Choices</a> and <a class=\"xref\" href=\"system.speech.recognition.grammarbuilder\" data-linktype=\"relative-path\">GrammarBuilder</a> objects to create the speech recognition grammar before building it into a <a class=\"xref\" href=\"system.speech.recognition.grammar\" data-linktype=\"relative-path\">Grammar</a> object. A handler for the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted</a> event outputs information about the recognition operation to the console.  </p>\n<pre><code>using System;  \nusing System.Speech.Recognition;  \n\nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognitionEngine recognizer;  \n    public static void Main(string[] args)  \n    {  \n\n      // Initialize a SpeechRecognitionEngine object and set its input.  \n      recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(&quot;en-US&quot;));  \n      recognizer.SetInputToDefaultAudioDevice();  \n\n      // Configure recognition parameters.  \n      recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5.0);  \n      recognizer.BabbleTimeout = TimeSpan.FromSeconds(3.0);  \n      recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1.0);  \n      recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.0);  \n\n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted +=  \n        new EventHandler&lt;LoadGrammarCompletedEventArgs&gt;(recognizer_LoadGrammarCompleted);  \n\n      // Add a handler for the RecognizeCompleted event.  \n      recognizer.RecognizeCompleted +=   \n        new EventHandler&lt;RecognizeCompletedEventArgs&gt;(recognizer_RecognizeCompleted);  \n\n      // Create a speech recognition grammar and build it into a Grammar object.  \n      Choices bankingMenu = new Choices(new string[]   \n      { &quot;Access accounts&quot;, &quot;Transfer funds&quot;, &quot;Pay bills&quot;, &quot;Get loan balance&quot; });  \n      GrammarBuilder banking = new GrammarBuilder(bankingMenu);  \n      Grammar bankGrammar = new Grammar(banking);  \n      bankGrammar.Name = &quot;Banking Menu&quot;;  \n\n      // Load the Grammar objects to the recognizer.  \n      recognizer.LoadGrammarAsync(bankGrammar);  \n\n      // Start asynchronous, continuous recognition.  \n      recognizer.RecognizeAsync();  \n\n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n\n    // Handle the RecognizeCompleted event.  \n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \n    {  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted, error occurred during recognition: {0}&quot;, e.Error);  \n        return;  \n      }  \n\n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).&quot;,  \n          e.BabbleTimeout, e.InitialSilenceTimeout);  \n        return;  \n      }  \n\n      if (e.InputStreamEnded)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).&quot;,  \n          e.AudioPosition, e.InputStreamEnded);  \n      }  \n\n      if (e.Result != null)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: Grammar ({0}), Text ({1}), Confidence ({2}), AudioPosition ({3}).&quot;,  \n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence, e.AudioPosition);  \n      }  \n\n      else  \n      {  \n        Console.WriteLine(&quot;RecognizeCompleted: No result.&quot;);  \n      }   \n\n      Console.WriteLine();  \n      Console.WriteLine(&quot;Press any key to exit...&quot;);  \n      Console.ReadKey();  \n    }  \n\n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      bool grammarEnabled = e.Grammar.Enabled;  \n\n      if (e.Error != null)  \n      {  \n        Console.WriteLine(&quot;LoadGrammar for {0} failed with a {1}.&quot;,  \n        grammarName, e.Error.GetType().Name);  \n\n        // Add exception handling code here.  \n      }  \n\n      Console.WriteLine(&quot;Grammar {0} {1} loaded and {2} enabled.&quot;, grammarName,   \n        (grammarLoaded) ? &quot;is&quot; : &quot;is not&quot;, (grammarEnabled) ? &quot;is&quot; : &quot;is not&quot;);  \n    }  \n  }            \n}  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Speech_Recognition_RecognizeCompletedEventArgs_BabbleTimeout\">\r\n    \r\n            <a id=\"System_Speech_Recognition_RecognizeCompletedEventArgs_BabbleTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BabbleTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether a babble timeout generated the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">RecognizeCompleted</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool BabbleTimeout { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine\" data-linktype=\"relative-path\">SpeechRecognitionEngine</a> has detected only background noise for longer than was specified by its <span class=\"xref\">stem.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout*</span> property; otherwise <code>false.</code></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example performs asynchronous speech recognition on a speech recognition grammar, using the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeAsync_\" data-linktype=\"relative-path\">RecognizeAsync</a> method with the in-process recognizer. The example uses <a class=\"xref\" href=\"system.speech.recognition.choices\" data-linktype=\"relative-path\">Choices</a> and <a class=\"xref\" href=\"system.speech.recognition.grammarbuilder\" data-linktype=\"relative-path\">GrammarBuilder</a> objects to create the speech recognition grammar before building it into a <a class=\"xref\" href=\"system.speech.recognition.grammar\" data-linktype=\"relative-path\">Grammar</a> object. A handler for the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted</a> event outputs information about the recognition operation to the console.  </p>\n<pre><code>using System;  \nusing System.Speech.Recognition;  \n\nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognitionEngine recognizer;  \n    public static void Main(string[] args)  \n    {  \n\n      // Initialize a SpeechRecognitionEngine object and set its input.  \n      recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(&quot;en-US&quot;));  \n      recognizer.SetInputToDefaultAudioDevice();  \n\n      // Configure recognition parameters.  \n      recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5.0);  \n      recognizer.BabbleTimeout = TimeSpan.FromSeconds(3.0);  \n      recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1.0);  \n      recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.0);  \n\n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted +=  \n        new EventHandler&lt;LoadGrammarCompletedEventArgs&gt;(recognizer_LoadGrammarCompleted);  \n\n      // Add a handler for the RecognizeCompleted event.  \n      recognizer.RecognizeCompleted +=   \n        new EventHandler&lt;RecognizeCompletedEventArgs&gt;(recognizer_RecognizeCompleted);  \n\n      // Create a speech recognition grammar and build it into a Grammar object.  \n      Choices bankingMenu = new Choices(new string[]   \n      { &quot;Access accounts&quot;, &quot;Transfer funds&quot;, &quot;Pay bills&quot;, &quot;Get loan balance&quot; });  \n      GrammarBuilder banking = new GrammarBuilder(bankingMenu);  \n      Grammar bankGrammar = new Grammar(banking);  \n      bankGrammar.Name = &quot;Banking Menu&quot;;  \n\n      // Load the Grammar objects to the recognizer.  \n      recognizer.LoadGrammarAsync(bankGrammar);  \n\n      // Start asynchronous, continuous recognition.  \n      recognizer.RecognizeAsync();  \n\n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n\n    // Handle the RecognizeCompleted event.  \n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \n    {  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted, error occurred during recognition: {0}&quot;, e.Error);  \n        return;  \n      }  \n\n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).&quot;,  \n          e.BabbleTimeout, e.InitialSilenceTimeout);  \n        return;  \n      }  \n\n      if (e.InputStreamEnded)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).&quot;,  \n          e.AudioPosition, e.InputStreamEnded);  \n      }  \n\n      if (e.Result != null)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: Grammar ({0}), Text ({1}), Confidence ({2}), AudioPosition ({3}).&quot;,  \n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence, e.AudioPosition);  \n      }  \n\n      else  \n      {  \n        Console.WriteLine(&quot;RecognizeCompleted: No result.&quot;);  \n      }   \n\n      Console.WriteLine();  \n      Console.WriteLine(&quot;Press any key to exit...&quot;);  \n      Console.ReadKey();  \n    }  \n\n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      bool grammarEnabled = e.Grammar.Enabled;  \n\n      if (e.Error != null)  \n      {  \n        Console.WriteLine(&quot;LoadGrammar for {0} failed with a {1}.&quot;,  \n        grammarName, e.Error.GetType().Name);  \n\n        // Add exception handling code here.  \n      }  \n\n      Console.WriteLine(&quot;Grammar {0} {1} loaded and {2} enabled.&quot;, grammarName,   \n        (grammarLoaded) ? &quot;is&quot; : &quot;is not&quot;, (grammarEnabled) ? &quot;is&quot; : &quot;is not&quot;);  \n    }  \n  }            \n}  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Speech_Recognition_RecognizeCompletedEventArgs_InitialSilenceTimeout\">\r\n    \r\n            <a id=\"System_Speech_Recognition_RecognizeCompletedEventArgs_InitialSilenceTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InitialSilenceTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether an initial silence timeout generated the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">RecognizeCompleted</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool InitialSilenceTimeout { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine\" data-linktype=\"relative-path\">SpeechRecognitionEngine</a> has detected only silence for a longer time period than was specified by its <span class=\"xref\">stem.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout*</span> property; otherwise <code>false.</code></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example performs asynchronous speech recognition on a speech recognition grammar, using the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeAsync_\" data-linktype=\"relative-path\">RecognizeAsync</a> method with the in-process recognizer. The example uses <a class=\"xref\" href=\"system.speech.recognition.choices\" data-linktype=\"relative-path\">Choices</a> and <a class=\"xref\" href=\"system.speech.recognition.grammarbuilder\" data-linktype=\"relative-path\">GrammarBuilder</a> objects to create the speech recognition grammar before building it into a <a class=\"xref\" href=\"system.speech.recognition.grammar\" data-linktype=\"relative-path\">Grammar</a> object. A handler for the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted</a> event outputs information about the recognition operation to the console.  </p>\n<pre><code>using System;  \nusing System.Speech.Recognition;  \n\nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognitionEngine recognizer;  \n    public static void Main(string[] args)  \n    {  \n\n      // Initialize a SpeechRecognitionEngine object and set its input.  \n      recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(&quot;en-US&quot;));  \n      recognizer.SetInputToDefaultAudioDevice();  \n\n      // Configure recognition parameters.  \n      recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5.0);  \n      recognizer.BabbleTimeout = TimeSpan.FromSeconds(3.0);  \n      recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1.0);  \n      recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.0);  \n\n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted +=  \n        new EventHandler&lt;LoadGrammarCompletedEventArgs&gt;(recognizer_LoadGrammarCompleted);  \n\n      // Add a handler for the RecognizeCompleted event.  \n      recognizer.RecognizeCompleted +=   \n        new EventHandler&lt;RecognizeCompletedEventArgs&gt;(recognizer_RecognizeCompleted);  \n\n      // Create a speech recognition grammar and build it into a Grammar object.  \n      Choices bankingMenu = new Choices(new string[]   \n      { &quot;Access accounts&quot;, &quot;Transfer funds&quot;, &quot;Pay bills&quot;, &quot;Get loan balance&quot; });  \n      GrammarBuilder banking = new GrammarBuilder(bankingMenu);  \n      Grammar bankGrammar = new Grammar(banking);  \n      bankGrammar.Name = &quot;Banking Menu&quot;;  \n\n      // Load the Grammar objects to the recognizer.  \n      recognizer.LoadGrammarAsync(bankGrammar);  \n\n      // Start asynchronous, continuous recognition.  \n      recognizer.RecognizeAsync();  \n\n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n\n    // Handle the RecognizeCompleted event.  \n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \n    {  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted, error occurred during recognition: {0}&quot;, e.Error);  \n        return;  \n      }  \n\n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).&quot;,  \n          e.BabbleTimeout, e.InitialSilenceTimeout);  \n        return;  \n      }  \n\n      if (e.InputStreamEnded)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).&quot;,  \n          e.AudioPosition, e.InputStreamEnded);  \n      }  \n\n      if (e.Result != null)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: Grammar ({0}), Text ({1}), Confidence ({2}), AudioPosition ({3}).&quot;,  \n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence, e.AudioPosition);  \n      }  \n\n      else  \n      {  \n        Console.WriteLine(&quot;RecognizeCompleted: No result.&quot;);  \n      }   \n\n      Console.WriteLine();  \n      Console.WriteLine(&quot;Press any key to exit...&quot;);  \n      Console.ReadKey();  \n    }  \n\n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      bool grammarEnabled = e.Grammar.Enabled;  \n\n      if (e.Error != null)  \n      {  \n        Console.WriteLine(&quot;LoadGrammar for {0} failed with a {1}.&quot;,  \n        grammarName, e.Error.GetType().Name);  \n\n        // Add exception handling code here.  \n      }  \n\n      Console.WriteLine(&quot;Grammar {0} {1} loaded and {2} enabled.&quot;, grammarName,   \n        (grammarLoaded) ? &quot;is&quot; : &quot;is not&quot;, (grammarEnabled) ? &quot;is&quot; : &quot;is not&quot;);  \n    }  \n  }            \n}  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Speech_Recognition_RecognizeCompletedEventArgs_InputStreamEnded\">\r\n    \r\n            <a id=\"System_Speech_Recognition_RecognizeCompletedEventArgs_InputStreamEnded_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InputStreamEnded</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the input stream ended.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool InputStreamEnded { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the recognizer no longer has audio input; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The recognizer sets this property to <code>true</code> when a file provides the input stream for the recognizer and the end of the file is reached. The end of the input stream can coincide with a successful recognition operation. For more information about using a file as the input stream, see the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_SetInputToAudioStream_\" data-linktype=\"relative-path\">SetInputToAudioStream</a> and <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_SetInputToWaveFile_\" data-linktype=\"relative-path\">SetInputToWaveFile</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example performs asynchronous speech recognition on a speech recognition grammar, using the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeAsync_\" data-linktype=\"relative-path\">RecognizeAsync</a> method with the in-process recognizer. The example uses <a class=\"xref\" href=\"system.speech.recognition.choices\" data-linktype=\"relative-path\">Choices</a> and <a class=\"xref\" href=\"system.speech.recognition.grammarbuilder\" data-linktype=\"relative-path\">GrammarBuilder</a> objects to create the speech recognition grammar before building it into a <a class=\"xref\" href=\"system.speech.recognition.grammar\" data-linktype=\"relative-path\">Grammar</a> object. A handler for the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted</a> event outputs information about the recognition operation to the console.  </p>\n<pre><code>using System;  \nusing System.Speech.Recognition;  \n\nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognitionEngine recognizer;  \n    public static void Main(string[] args)  \n    {  \n\n      // Initialize a SpeechRecognitionEngine object and set its input.  \n      recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(&quot;en-US&quot;));  \n      recognizer.SetInputToDefaultAudioDevice();  \n\n      // Configure recognition parameters.  \n      recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5.0);  \n      recognizer.BabbleTimeout = TimeSpan.FromSeconds(3.0);  \n      recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1.0);  \n      recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.0);  \n\n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted +=  \n        new EventHandler&lt;LoadGrammarCompletedEventArgs&gt;(recognizer_LoadGrammarCompleted);  \n\n      // Add a handler for the RecognizeCompleted event.  \n      recognizer.RecognizeCompleted +=   \n        new EventHandler&lt;RecognizeCompletedEventArgs&gt;(recognizer_RecognizeCompleted);  \n\n      // Create a speech recognition grammar and build it into a Grammar object.  \n      Choices bankingMenu = new Choices(new string[]   \n      { &quot;Access accounts&quot;, &quot;Transfer funds&quot;, &quot;Pay bills&quot;, &quot;Get loan balance&quot; });  \n      GrammarBuilder banking = new GrammarBuilder(bankingMenu);  \n      Grammar bankGrammar = new Grammar(banking);  \n      bankGrammar.Name = &quot;Banking Menu&quot;;  \n\n      // Load the Grammar objects to the recognizer.  \n      recognizer.LoadGrammarAsync(bankGrammar);  \n\n      // Start asynchronous, continuous recognition.  \n      recognizer.RecognizeAsync();  \n\n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n\n    // Handle the RecognizeCompleted event.  \n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \n    {  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted, error occurred during recognition: {0}&quot;, e.Error);  \n        return;  \n      }  \n\n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).&quot;,  \n          e.BabbleTimeout, e.InitialSilenceTimeout);  \n        return;  \n      }  \n\n      if (e.InputStreamEnded)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).&quot;,  \n          e.AudioPosition, e.InputStreamEnded);  \n      }  \n\n      if (e.Result != null)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: Grammar ({0}), Text ({1}), Confidence ({2}), AudioPosition ({3}).&quot;,  \n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence, e.AudioPosition);  \n      }  \n\n      else  \n      {  \n        Console.WriteLine(&quot;RecognizeCompleted: No result.&quot;);  \n      }   \n\n      Console.WriteLine();  \n      Console.WriteLine(&quot;Press any key to exit...&quot;);  \n      Console.ReadKey();  \n    }  \n\n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      bool grammarEnabled = e.Grammar.Enabled;  \n\n      if (e.Error != null)  \n      {  \n        Console.WriteLine(&quot;LoadGrammar for {0} failed with a {1}.&quot;,  \n        grammarName, e.Error.GetType().Name);  \n\n        // Add exception handling code here.  \n      }  \n\n      Console.WriteLine(&quot;Grammar {0} {1} loaded and {2} enabled.&quot;, grammarName,   \n        (grammarLoaded) ? &quot;is&quot; : &quot;is not&quot;, (grammarEnabled) ? &quot;is&quot; : &quot;is not&quot;);  \n    }  \n  }            \n}  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Speech_Recognition_RecognizeCompletedEventArgs_Result\">\r\n    \r\n            <a id=\"System_Speech_Recognition_RecognizeCompletedEventArgs_Result_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Result</div>        \r\n          </div>\r\n    \r\n            <p>Gets the recognition result.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Speech.Recognition.RecognitionResult Result { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.speech.recognition.recognitionresult\" data-linktype=\"relative-path\">RecognitionResult</a></div>\r\n                  </div>\r\n                  <p>The recognition result if the recognition operation succeeded; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.speech.recognition.recognitionresult\" data-linktype=\"relative-path\">RecognitionResult</a> object derives from <a class=\"xref\" href=\"system.speech.recognition.recognizedphrase\" data-linktype=\"relative-path\">RecognizedPhrase</a> and contains full information about a phrase returned by a recognition operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example performs asynchronous speech recognition on a speech recognition grammar, using the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeAsync_\" data-linktype=\"relative-path\">RecognizeAsync</a> method with the in-process recognizer. The example uses <a class=\"xref\" href=\"system.speech.recognition.choices\" data-linktype=\"relative-path\">Choices</a> and <a class=\"xref\" href=\"system.speech.recognition.grammarbuilder\" data-linktype=\"relative-path\">GrammarBuilder</a> objects to create the speech recognition grammar before building it into a <a class=\"xref\" href=\"system.speech.recognition.grammar\" data-linktype=\"relative-path\">Grammar</a> object. A handler for the <a class=\"xref\" href=\"system.speech.recognition.speechrecognitionengine#System_Speech_Recognition_SpeechRecognitionEngine_RecognizeCompleted\" data-linktype=\"relative-path\">System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted</a> event outputs information about the recognition operation to the console.  </p>\n<pre><code>using System;  \nusing System.Speech.Recognition;  \n\nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognitionEngine recognizer;  \n    public static void Main(string[] args)  \n    {  \n\n      // Initialize a SpeechRecognitionEngine object and set its input.  \n      recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(&quot;en-US&quot;));  \n      recognizer.SetInputToDefaultAudioDevice();  \n\n      // Configure recognition parameters.  \n      recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5.0);  \n      recognizer.BabbleTimeout = TimeSpan.FromSeconds(3.0);  \n      recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1.0);  \n      recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.0);  \n\n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted +=  \n        new EventHandler&lt;LoadGrammarCompletedEventArgs&gt;(recognizer_LoadGrammarCompleted);  \n\n      // Add a handler for the RecognizeCompleted event.  \n      recognizer.RecognizeCompleted +=   \n        new EventHandler&lt;RecognizeCompletedEventArgs&gt;(recognizer_RecognizeCompleted);  \n\n      // Create a speech recognition grammar and build it into a Grammar object.  \n      Choices bankingMenu = new Choices(new string[]   \n      { &quot;Access accounts&quot;, &quot;Transfer funds&quot;, &quot;Pay bills&quot;, &quot;Get loan balance&quot; });  \n      GrammarBuilder banking = new GrammarBuilder(bankingMenu);  \n      Grammar bankGrammar = new Grammar(banking);  \n      bankGrammar.Name = &quot;Banking Menu&quot;;  \n\n      // Load the Grammar objects to the recognizer.  \n      recognizer.LoadGrammarAsync(bankGrammar);  \n\n      // Start asynchronous, continuous recognition.  \n      recognizer.RecognizeAsync();  \n\n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n\n    // Handle the RecognizeCompleted event.  \n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \n    {  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted, error occurred during recognition: {0}&quot;, e.Error);  \n        return;  \n      }  \n\n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).&quot;,  \n          e.BabbleTimeout, e.InitialSilenceTimeout);  \n        return;  \n      }  \n\n      if (e.InputStreamEnded)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).&quot;,  \n          e.AudioPosition, e.InputStreamEnded);  \n      }  \n\n      if (e.Result != null)  \n      {  \n        Console.WriteLine(  \n          &quot;RecognizeCompleted: Grammar ({0}), Text ({1}), Confidence ({2}), AudioPosition ({3}).&quot;,  \n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence, e.AudioPosition);  \n      }  \n\n      else  \n      {  \n        Console.WriteLine(&quot;RecognizeCompleted: No result.&quot;);  \n      }   \n\n      Console.WriteLine();  \n      Console.WriteLine(&quot;Press any key to exit...&quot;);  \n      Console.ReadKey();  \n    }  \n\n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      bool grammarEnabled = e.Grammar.Enabled;  \n\n      if (e.Error != null)  \n      {  \n        Console.WriteLine(&quot;LoadGrammar for {0} failed with a {1}.&quot;,  \n        grammarName, e.Error.GetType().Name);  \n\n        // Add exception handling code here.  \n      }  \n\n      Console.WriteLine(&quot;Grammar {0} {1} loaded and {2} enabled.&quot;, grammarName,   \n        (grammarLoaded) ? &quot;is&quot; : &quot;is not&quot;, (grammarEnabled) ? &quot;is&quot; : &quot;is not&quot;);  \n    }  \n  }            \n}  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Speech.Recognition.RecognizeCompletedEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Speech.Recognition.RecognizeCompletedEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Speech.Recognition.RecognizeCompletedEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition\">\r\n<meta name=\"APIName\" content=\"System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout\">\r\n<meta name=\"APIName\" content=\"System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout\">\r\n<meta name=\"APIName\" content=\"System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded\">\r\n<meta name=\"APIName\" content=\"System.Speech.Recognition.RecognizeCompletedEventArgs.Result\">\r\n<meta name=\"APILocation\" content=\"System.Speech.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"ddffa797-a4b7-51ad-ba77-707a2bb02b0f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the RecognizeCompleted event raised by a  or a  object.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Speech.Recognition/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Speech.Recognition.RecognizeCompletedEventArgs\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Speech.Recognition.RecognizeCompletedEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Speech.Recognition.RecognizeCompletedEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Speech.Recognition.RecognizeCompletedEventArgs","System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition","System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout","System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout","System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded","System.Speech.Recognition.RecognizeCompletedEventArgs.Result"],"api_location":["System.Speech.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Speech.Recognition.RecognizeCompletedEventArgs","System::Speech::Recognition::RecognizeCompletedEventArgs","System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition","System::Speech::Recognition::RecognizeCompletedEventArgs::AudioPosition","System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout","System::Speech::Recognition::RecognizeCompletedEventArgs::BabbleTimeout","System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout","System::Speech::Recognition::RecognizeCompletedEventArgs::InitialSilenceTimeout","System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded","System::Speech::Recognition::RecognizeCompletedEventArgs::InputStreamEnded","System.Speech.Recognition.RecognizeCompletedEventArgs.Result","System::Speech::Recognition::RecognizeCompletedEventArgs::Result"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"ddffa797-a4b7-51ad-ba77-707a2bb02b0f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Speech.Recognition/RecognizeCompletedEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RecognizeCompletedEventArgs class | Microsoft Docs","_op_ogTitle":"RecognizeCompletedEventArgs class","description":"Provides data for the RecognizeCompleted event raised by a  or a  object.\n","toc_asset_id":"_splitted/System.Speech.Recognition/toc.json","toc_rel":"_splitted/System.Speech.Recognition/toc.json","source_url":"","ms.assetid":"System.Speech.Recognition.RecognizeCompletedEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.speech.recognition.recognizecompletedeventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.speech.recognition.recognizecompletedeventargs","fileRelativePath":"System.Speech.Recognition.RecognizeCompletedEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}