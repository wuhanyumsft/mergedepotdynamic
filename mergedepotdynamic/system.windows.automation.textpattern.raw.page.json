{"content":"    \r\n    <h1 id=\"System_Windows_Automation_TextPattern\">\r\n      <span class=\"lang-csharp\">TextPattern</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents controls that contain text.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class TextPattern : System.Windows.Automation.BasePattern</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.automation.basepattern\" data-linktype=\"relative-path\">System.Windows.Automation.BasePattern</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TextPattern</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The TextPattern class may not provide for text features that exist only in a particular UI Automation provider. For these unique and often advanced features, the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> class provides methods for a UI Automation client to access the corresponding native object model.</p>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_AnimationStyleAttribute\" data-linktype=\"self-bookmark\">AnimationStyleAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.text.animationstyle\" data-linktype=\"relative-path\">AnimationStyle</a> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_BackgroundColorAttribute\" data-linktype=\"self-bookmark\">BackgroundColorAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/gdi/colors_9xiq.asp\" data-linktype=\"external\">BackgroundColor</a> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_BulletStyleAttribute\" data-linktype=\"self-bookmark\">BulletStyleAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.text.bulletstyle\" data-linktype=\"relative-path\">BulletStyle</a> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_CapStyleAttribute\" data-linktype=\"self-bookmark\">CapStyleAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.text.capstyle\" data-linktype=\"relative-path\">CapStyle</a> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_CultureAttribute\" data-linktype=\"self-bookmark\">CultureAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>Culture</code> (<a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>) attribute of a text range down to the sub-language level; for example, Frenchâ€“Switzerland (fr-CH) instead of French (fr).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_FontNameAttribute\" data-linktype=\"self-bookmark\">FontNameAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>FontName</code> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_FontSizeAttribute\" data-linktype=\"self-bookmark\">FontSizeAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>FontSize</code> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_FontWeightAttribute\" data-linktype=\"self-bookmark\">FontWeightAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>FontWeight</code> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_ForegroundColorAttribute\" data-linktype=\"self-bookmark\">ForegroundColorAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>ForegroundColor</code> (<a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/gdi/colors_9xiq.asp\" data-linktype=\"external\">COLORREF</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_HorizontalTextAlignmentAttribute\" data-linktype=\"self-bookmark\">HorizontalTextAlignmentAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.text.horizontaltextalignment\" data-linktype=\"relative-path\">HorizontalTextAlignment</a> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_IndentationFirstLineAttribute\" data-linktype=\"self-bookmark\">IndentationFirstLineAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>IndentationFirstLine</code> (<span class=\"xref\">stem.Windows.Documents.Paragraph.TextIndent*</span>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_IndentationLeadingAttribute\" data-linktype=\"self-bookmark\">IndentationLeadingAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>IndentationLeading</code>(<span class=\"xref\">stem.Windows.Documents.Paragraph.TextIndent*</span>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_IndentationTrailingAttribute\" data-linktype=\"self-bookmark\">IndentationTrailingAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>IndentationTrailing</code>(<span class=\"xref\">stem.Windows.Documents.Paragraph.TextIndent*</span>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_IsHiddenAttribute\" data-linktype=\"self-bookmark\">IsHiddenAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>IsHidden</code> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_IsItalicAttribute\" data-linktype=\"self-bookmark\">IsItalicAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>IsItalic</code> (<a class=\"xref\" href=\"system.windows.fontstyle\" data-linktype=\"relative-path\">FontStyle</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_IsReadOnlyAttribute\" data-linktype=\"self-bookmark\">IsReadOnlyAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>IsReadOnly</code> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_IsSubscriptAttribute\" data-linktype=\"self-bookmark\">IsSubscriptAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>IsSubscript</code> (<a class=\"xref\" href=\"system.windows.fontvariants\" data-linktype=\"relative-path\">FontVariants</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_IsSuperscriptAttribute\" data-linktype=\"self-bookmark\">IsSuperscriptAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>IsSuperscript</code> (<a class=\"xref\" href=\"system.windows.fontvariants\" data-linktype=\"relative-path\">FontVariants</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_MarginBottomAttribute\" data-linktype=\"self-bookmark\">MarginBottomAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>MarginBottom</code> (<a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_MarginLeadingAttribute\" data-linktype=\"self-bookmark\">MarginLeadingAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>MarginLeading</code> (<a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_MarginTopAttribute\" data-linktype=\"self-bookmark\">MarginTopAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>MarginTop</code> (<a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_MarginTrailingAttribute\" data-linktype=\"self-bookmark\">MarginTrailingAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>MarginTrailing</code> (<a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_MixedAttributeValue\" data-linktype=\"self-bookmark\">MixedAttributeValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies whether the value of a given attribute varies over a text range in a rich edit control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_OutlineStylesAttribute\" data-linktype=\"self-bookmark\">OutlineStylesAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>OutlineStyles</code> (<a class=\"xref\" href=\"system.windows.automation.text.outlinestyles\" data-linktype=\"relative-path\">OutlineStyles</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_OverlineColorAttribute\" data-linktype=\"self-bookmark\">OverlineColorAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>OverlineColor</code> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_OverlineStyleAttribute\" data-linktype=\"self-bookmark\">OverlineStyleAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>OverlineStyle</code> (<a class=\"xref\" href=\"system.windows.automation.text.textdecorationlinestyle\" data-linktype=\"relative-path\">TextDecorationLineStyle</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_Pattern\" data-linktype=\"self-bookmark\">Pattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.textpattern\" data-linktype=\"relative-path\">TextPattern</a> pattern.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_StrikethroughColorAttribute\" data-linktype=\"self-bookmark\">StrikethroughColorAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>StrikethroughColor</code> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_StrikethroughStyleAttribute\" data-linktype=\"self-bookmark\">StrikethroughStyleAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>StrikethroughStyle</code> (<a class=\"xref\" href=\"system.windows.automation.text.textdecorationlinestyle\" data-linktype=\"relative-path\">TextDecorationLineStyle</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_TabsAttribute\" data-linktype=\"self-bookmark\">TabsAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>Tabs</code> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_TextChangedEvent\" data-linktype=\"self-bookmark\">TextChangedEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the event raised whenever textual content is modified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_TextFlowDirectionsAttribute\" data-linktype=\"self-bookmark\">TextFlowDirectionsAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>TextFlowDirections</code> (<a class=\"xref\" href=\"system.windows.automation.text.flowdirections\" data-linktype=\"relative-path\">FlowDirections</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_TextSelectionChangedEvent\" data-linktype=\"self-bookmark\">TextSelectionChangedEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the event raised when the text selection is modified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_UnderlineColorAttribute\" data-linktype=\"self-bookmark\">UnderlineColorAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>UnderlineColor</code> attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_UnderlineStyleAttribute\" data-linktype=\"self-bookmark\">UnderlineStyleAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <code>UnderlineStyle</code> (<a class=\"xref\" href=\"system.windows.automation.text.textdecorationlinestyle\" data-linktype=\"relative-path\">TextDecorationLineStyle</a>) attribute of a text range.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_DocumentRange\" data-linktype=\"self-bookmark\">DocumentRange</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a text range that encloses the main text of a document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_SupportedTextSelection\" data-linktype=\"self-bookmark\">SupportedTextSelection</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that specifies whether a text provider supports selection and, if so, the type of selection supported.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_GetSelection\" data-linktype=\"self-bookmark\">GetSelection()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a collection of disjoint text ranges associated with the current text selection or selections.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_GetVisibleRanges\" data-linktype=\"self-bookmark\">GetVisibleRanges()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves an array of disjoint text ranges from a text container where each text range begins with the first partially visible line through to the end of the last partially visible line.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_RangeFromChild_System_Windows_Automation_AutomationElement_\" data-linktype=\"self-bookmark\">RangeFromChild(AutomationElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a text range enclosing a child element such as an image, hyperlink, Microsoft Excel spreadsheet, or other embedded object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_TextPattern_RangeFromPoint_System_Windows_Point_\" data-linktype=\"self-bookmark\">RangeFromPoint(Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the degenerate (empty) text range nearest to the specified screen coordinates.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_AnimationStyleAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AnimationStyleAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.text.animationstyle\" data-linktype=\"relative-path\">AnimationStyle</a> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute AnimationStyleAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Animations appear on the screen only; the animated text prints, but the animation effect does not.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.windows.automation.text.animationstyle\" data-linktype=\"relative-path\">AnimationStyle</a>. The default value is <a class=\"xref\" href=\"system.windows.automation.text.animationstyle\" data-linktype=\"relative-path\">AnimationStyle</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1000\">private void GetAnimationStyleAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;,&quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.AnimationStyleAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed animation styles.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2000\">Private Sub GetAnimationStyleAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.AnimationStyleAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed animation styles.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_BackgroundColorAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BackgroundColorAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/gdi/colors_9xiq.asp\" data-linktype=\"external\">BackgroundColor</a> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute BackgroundColorAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1001\">private void GetBackgroundColorAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.BackgroundColorAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed background colors.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2001\">Private Sub GetBackgroundColorAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.BackgroundColorAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed background colors.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_BulletStyleAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BulletStyleAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.text.bulletstyle\" data-linktype=\"relative-path\">BulletStyle</a> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute BulletStyleAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.windows.automation.text.bulletstyle\" data-linktype=\"relative-path\">BulletStyle</a>. The default value is <a class=\"xref\" href=\"system.windows.automation.text.bulletstyle\" data-linktype=\"relative-path\">BulletStyle</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1002\">private void GetBulletStyleAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.BulletStyleAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed bullet styles.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2002\">Private Sub GetBulletStyleAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.BulletStyleAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed bullet styles.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_CapStyleAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CapStyleAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.text.capstyle\" data-linktype=\"relative-path\">CapStyle</a> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute CapStyleAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.windows.automation.text.capstyle\" data-linktype=\"relative-path\">CapStyle</a>. The default value is <a class=\"xref\" href=\"system.windows.automation.text.capstyle\" data-linktype=\"relative-path\">CapStyle</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1003\">private void GetCapStyleAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.CapStyleAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed cap styles.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2003\">Private Sub GetCapStyleAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.CapStyleAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed cap styles.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_CultureAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CultureAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>Culture</code> (<a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>) attribute of a text range down to the sub-language level; for example, Frenchâ€“Switzerland (fr-CH) instead of French (fr).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute CultureAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>. The default value is the language of the application user interface (UI).  </p>\n<p> See <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> in the Microsoft .NET Framework for more detail on the language code format.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> There might be cases where the server does not support the language tag or authors cannot use it. In those cases the default applies.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1005\">private void GetCultureAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.CultureAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed culture info.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2005\">Private Sub GetCultureAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.CultureAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed culture info.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_FontNameAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FontNameAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>FontName</code> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute FontNameAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Example values for this attribute include &quot;Arial Black&quot; and &quot;Arial Narrow&quot;.  </p>\n<p> The values for this attribute are non-localized.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. The default value is an <code>empty string</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#FontName\">&#39;&#39;&#39; -------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Outputs the FontNameAttribute value for a range of text.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetTextElement&quot;&gt;\n&#39;&#39;&#39; The AutomationElement. that represents the text provider.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; -------------------------------------------------------------------\nPrivate Sub GetFontNameAttribute( _\nByVal targetTextElement As AutomationElement)\n    Dim targetTextPattern As TextPattern = _\n        DirectCast(targetTextElement.GetCurrentPattern( _\n        TextPattern.Pattern), TextPattern)\n\n    If (targetTextPattern Is Nothing) Then\n        &#39; Target control doesn&#39;t support TextPattern.\n        Return\n    End If\n\n    &#39; If the target control doesn&#39;t support selection then return.\n    &#39; Otherwise, get the text attribute for the selected text.\n    &#39; If there are currently no selections then the text attribute \n    &#39; will be obtained from the insertion point.\n    Dim textRanges() As TextPatternRange\n    If (targetTextPattern.SupportedTextSelection = SupportedTextSelection.None) Then\n        Return\n    Else\n        textRanges = targetTextPattern.GetSelection()\n    End If\n\n    Dim textRange As TextPatternRange\n    For Each textRange In textRanges\n        Dim textAttribute As Object = _\n            textRange.GetAttributeValue( _\n            TextPattern.FontNameAttribute)\n\n        If (textAttribute = TextPattern.MixedAttributeValue) Then\n            &#39; Returns MixedAttributeValue if the value of the \n            &#39; specified attribute varies over the text range. \n            Console.WriteLine(&quot;Mixed fonts.&quot;)\n        ElseIf (textAttribute = AutomationElement.NotSupported) Then\n            &#39; Returns NotSupported if the specified attribute is \n            &#39; not supported by the provider or the control. \n            Console.WriteLine( _\n            &quot;FontNameAttribute not supported by provider.&quot;)\n        Else\n            Console.WriteLine(textAttribute.ToString())\n        End If\n    Next\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#FontName\">/// -------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Outputs the FontNameAttribute value for a range of text.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetTextElement&quot;&gt;\n/// The AutomationElment that represents a text control.\n/// &lt;/param&gt;\n/// -------------------------------------------------------------------\nprivate void GetFontNameAttribute(AutomationElement targetTextElement)\n{\n    TextPattern textPattern = \n        targetTextElement.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textPattern == null)\n    {\n        // Target control doesn&#39;t support TextPattern.\n        return;\n    }\n\n    // If the target control doesn&#39;t support selection then return.\n    // Otherwise, get the text attribute for the selected text.\n    // If there are currently no selections then the text attribute \n    // will be obtained from the insertion point.\n    TextPatternRange[] textRanges;\n    if (textPattern.SupportedTextSelection == SupportedTextSelection.None)\n    {\n        return;\n    }\n    else\n    {\n        textRanges = textPattern.GetSelection();\n    }\n\n    foreach (TextPatternRange textRange in textRanges)\n    {\n        Object textAttribute =\n            textRange.GetAttributeValue(\n            TextPattern.FontNameAttribute);\n\n        if (textAttribute == TextPattern.MixedAttributeValue)\n        {\n            // Returns MixedAttributeValue if the value of the \n            // specified attribute varies over the text range. \n            Console.WriteLine(&quot;Mixed fonts.&quot;);\n        }\n        else if (textAttribute == AutomationElement.NotSupported)\n        {\n            // Returns NotSupported if the specified attribute is \n            // not supported by the provider or the control. \n            Console.WriteLine(\n                &quot;FontNameAttribute not supported by provider.&quot;);\n        }\n        else\n        {\n            Console.WriteLine(textAttribute.ToString());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_FontSizeAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FontSizeAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>FontSize</code> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute FontSizeAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1007\">private void GetFontSizeAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.FontSizeAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed font sizes.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2007\">Private Sub GetFontSizeAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.FontSizeAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed font sizes.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_FontWeightAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FontWeightAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>FontWeight</code> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute FontWeightAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This attribute refers to the relative stroke, thickness, or boldness of a font.  </p>\n<p> This attribute is modeled after the <code>lfWeight</code> field in <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/gdi/fontext_1wmq.asp\" data-linktype=\"external\">GDI LOGFONT</a>. For consistency, the following values have been adopted from LOGFONT: 0=DontCare, 100=Thin, 200=ExtraLight or UltraLight, 300=Light, 400=Normal or Regular, 500=Medium, 600=SemiBold or DemiBold, 700=Bold, 800=ExtraBold or UltraBold, and 900=Heavy or Black.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1008\">private void GetFontWeightAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.FontWeightAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed font weights.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2008\">Private Sub GetFontWeightAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.FontWeightAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed font weights.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_ForegroundColorAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ForegroundColorAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>ForegroundColor</code> (<a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/gdi/colors_9xiq.asp\" data-linktype=\"external\">COLORREF</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute ForegroundColorAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this attribute is equivalent to the text or font color.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1009\">private void GetForegroundColorAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.ForegroundColorAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed foreground colors.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2009\">Private Sub GetForegroundColorAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.ForegroundColorAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed foreground colors.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_HorizontalTextAlignmentAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HorizontalTextAlignmentAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.text.horizontaltextalignment\" data-linktype=\"relative-path\">HorizontalTextAlignment</a> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute HorizontalTextAlignmentAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This attribute represents the horizontal text alignment applied to the paragraph(s) associated with the calling text range.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.windows.automation.text.horizontaltextalignment\" data-linktype=\"relative-path\">HorizontalTextAlignment</a>. The default value is <a class=\"xref\" href=\"system.windows.automation.text.horizontaltextalignment\" data-linktype=\"relative-path\">HorizontalTextAlignment</a></p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1011\">private void GetHorizontalTextAlignmentAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.HorizontalTextAlignmentAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed horizontal alignments.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2011\">Private Sub GetHorizontalTextAlignmentAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.HorizontalTextAlignmentAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed horizontal alignments.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_IndentationFirstLineAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndentationFirstLineAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>IndentationFirstLine</code> (<span class=\"xref\">stem.Windows.Documents.Paragraph.TextIndent*</span>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute IndentationFirstLineAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This attribute represents the first-line indentation in points (<a class=\"xref\" href=\"system.drawing.graphicsunit\" data-linktype=\"relative-path\">GraphicsUnit</a>) applied to the paragraph(s) associated with the calling text range.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1012\">private void GetIndentationFirstLineAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IndentationFirstLineAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed first line indents.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2012\">Private Sub GetIndentationFirstLineAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IndentationFirstLineAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed first line indentations.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_IndentationLeadingAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndentationLeadingAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>IndentationLeading</code>(<span class=\"xref\">stem.Windows.Documents.Paragraph.TextIndent*</span>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute IndentationLeadingAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This attribute represents the leading indentation in points (<a class=\"xref\" href=\"system.drawing.graphicsunit\" data-linktype=\"relative-path\">GraphicsUnit</a>) applied to the paragraph(s) associated with the calling text range.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1013\">private void GetIndentationLeadingAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IndentationLeadingAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed leading indentation.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2013\">Private Sub GetIndentationLeadingAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IndentationLeadingAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed leading indentations.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_IndentationTrailingAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndentationTrailingAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>IndentationTrailing</code>(<span class=\"xref\">stem.Windows.Documents.Paragraph.TextIndent*</span>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute IndentationTrailingAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This attribute represents the trailing indentation in points (<a class=\"xref\" href=\"system.drawing.graphicsunit\" data-linktype=\"relative-path\">GraphicsUnit</a>) applied to the paragraph(s) associated with the calling text range.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1014\">private void GetIndentationTrailingAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IndentationTrailingAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed trailing indentation.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2014\">Private Sub GetIndentationTrailingAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IndentationTrailingAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed trailing indentations.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_IsHiddenAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsHiddenAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>IsHidden</code> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute IsHiddenAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>. The default value is <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1015\">private void GetIsHiddenAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IsHiddenAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixture of hidden and visible.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2015\">Private Sub GetIsHiddenAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IsHiddenAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixture of hidden and visible.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_IsItalicAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsItalicAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>IsItalic</code> (<a class=\"xref\" href=\"system.windows.fontstyle\" data-linktype=\"relative-path\">FontStyle</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute IsItalicAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>. The default value is <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1016\">private void GetIsItalicAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IsItalicAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixture of italic and non-italic.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2016\">Private Sub GetIsItalicAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IsItalicAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixture of italic and non-italic.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_IsReadOnlyAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnlyAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>IsReadOnly</code> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute IsReadOnlyAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This attribute represents the read-only state of the document associated with the calling text range.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a document or file is read-only, but you can still edit it and save it as another file, the text is not considered read-only.  </p>\n</div>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>. The default value is <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1022\">private void GetIsReadOnlyAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IsReadOnlyAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixture of readonly and non-readonly.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2022\">Private Sub GetIsReadOnlyAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IsReadOnlyAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixture of readonly and non-readonly.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_IsSubscriptAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSubscriptAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>IsSubscript</code> (<a class=\"xref\" href=\"system.windows.fontvariants\" data-linktype=\"relative-path\">FontVariants</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute IsSubscriptAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>. The default value is <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1023\">private void GetIsSubscriptAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IsSubscriptAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixture of subscript and non-subscript.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2023\">Private Sub GetIsSubscriptAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IsSubscriptAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixture of subscript and non-subscript.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_IsSuperscriptAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSuperscriptAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>IsSuperscript</code> (<a class=\"xref\" href=\"system.windows.fontvariants\" data-linktype=\"relative-path\">FontVariants</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute IsSuperscriptAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>. The default value is <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1024\">private void GetIsSuperscriptAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IsSuperscriptAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixture of superscript and non-superscript.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2024\">Private Sub GetIsSuperscriptAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.IsSuperscriptAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixture of superscript and non-superscript.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_MarginBottomAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MarginBottomAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>MarginBottom</code> (<a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute MarginBottomAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This attribute represents the bottom margin applied to the page(s) associated with the calling text range.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1025\">private void GetMarginBottomAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.MarginBottomAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed bottom margins.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2025\">Private Sub GetMarginBottomAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.MarginBottomAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed bottom margins.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_MarginLeadingAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MarginLeadingAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>MarginLeading</code> (<a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute MarginLeadingAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This attribute represents the leading margin applied to the page(s) associated with the calling text range.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1026\">private void GetMarginLeadingAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.MarginLeadingAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed leading margins.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2026\">Private Sub GetMarginLeadingAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.MarginLeadingAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed leading margins.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_MarginTopAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MarginTopAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>MarginTop</code> (<a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute MarginTopAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This attribute represents the top margin applied to the page(s) associated with the calling text range.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1027\">private void GetMarginTopAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.MarginTopAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed top margins.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2027\">Private Sub GetMarginTopAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.MarginTopAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed top margins.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_MarginTrailingAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MarginTrailingAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>MarginTrailing</code> (<a class=\"xref\" href=\"system.drawing.printing.pagesettings\" data-linktype=\"relative-path\">PageSettings</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute MarginTrailingAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This attribute represents the trailing margin applied to the page(s) associated with the calling text range.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1028\">private void GetMarginTrailingAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.MarginTrailingAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed trailing margins.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2028\">Private Sub GetMarginTrailingAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.MarginTrailingAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed trailing margins.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_MixedAttributeValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MixedAttributeValue</div>        \r\n          </div>\r\n    \r\n            <p>Identifies whether the value of a given attribute varies over a text range in a rich edit control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly object MixedAttributeValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a> returns <code>TextPattern.MixedAttributeValue</code> to indicate this variation instead of a collection of attribute values.  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1000\">private void GetAnimationStyleAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;,&quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.AnimationStyleAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed animation styles.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2000\">Private Sub GetAnimationStyleAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.AnimationStyleAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed animation styles.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_OutlineStylesAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OutlineStylesAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>OutlineStyles</code> (<a class=\"xref\" href=\"system.windows.automation.text.outlinestyles\" data-linktype=\"relative-path\">OutlineStyles</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute OutlineStylesAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.windows.automation.text.outlinestyles\" data-linktype=\"relative-path\">OutlineStyles</a>. The default value is <a class=\"xref\" href=\"system.windows.automation.text.outlinestyles\" data-linktype=\"relative-path\">OutlineStyles</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1031\">private void GetOutlineStylesAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.OutlineStylesAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed outline styles.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2031\">Private Sub GetOutlineStylesAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.OutlineStylesAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed outline styles.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_OverlineColorAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OverlineColorAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>OverlineColor</code> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute OverlineColorAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1032\">private void GetOverlineColorAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.OverlineColorAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed overline color.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2032\">Private Sub GetOverlineColorAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.OverlineColorAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed overline colors.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_OverlineStyleAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OverlineStyleAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>OverlineStyle</code> (<a class=\"xref\" href=\"system.windows.automation.text.textdecorationlinestyle\" data-linktype=\"relative-path\">TextDecorationLineStyle</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute OverlineStyleAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.windows.automation.text.textdecorationlinestyle\" data-linktype=\"relative-path\">TextDecorationLineStyle</a>. The default value is <a class=\"xref\" href=\"system.windows.automation.text.textdecorationlinestyle\" data-linktype=\"relative-path\">TextDecorationLineStyle</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1033\">private void GetOverlineStyleAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.OverlineStyleAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed overline style.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2033\">Private Sub GetOverlineStyleAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.OverlineStyleAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed overline styles.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_Pattern\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pattern</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.textpattern\" data-linktype=\"relative-path\">TextPattern</a> pattern.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationPattern Pattern;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> The pattern identifier is passed to methods such as <a class=\"xref\" href=\"system.windows.automation.automationelement#System_Windows_Automation_AutomationElement_GetCurrentPattern_\" data-linktype=\"relative-path\">GetCurrentPattern</a> to retrieve the control pattern of interest from the specified <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"FindText#TextPatternPattern\">&#39; Set up the conditions for finding the text control.\nDim documentControl As New PropertyCondition( _\nAutomationElement.ControlTypeProperty, ControlType.Document)\nDim textPatternAvailable As New PropertyCondition( _\nAutomationElement.IsTextPatternAvailableProperty, True)\nDim findControl As New AndCondition(documentControl, textPatternAvailable)\n\n&#39; Get the Automation Element for the first text control found.\n&#39; For the purposes of this sample it is sufficient to find the \n&#39; first text control. In other cases there may be multiple text\n&#39; controls to sort through.\ntargetDocument = targetWindow.FindFirst(TreeScope.Descendants, findControl)\n\n&#39; Didn&#39;t find a text control.\nIf targetDocument Is Nothing Then\n    targetResult.Content = _\n    WPFTarget + &quot; does not contain a Document control type.&quot;\n    targetResult.Background = Brushes.Salmon\n    startWPFTargetButton.IsEnabled = False\n    Return\nEnd If\n\n&#39; Get required control patterns \ntargetTextPattern = DirectCast( _\ntargetDocument.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n&#39; Didn&#39;t find a text control that supports TextPattern.\nIf targetTextPattern Is Nothing Then\n    targetResult.Content = WPFTarget + _\n    &quot; does not contain an element that supports TextPattern.&quot;\n    targetResult.Background = Brushes.Salmon\n    startWPFTargetButton.IsEnabled = False\n    Return\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"FindText#TextPatternPattern\">// Set up the conditions for finding the text control.\nPropertyCondition documentControl = new PropertyCondition(\n    AutomationElement.ControlTypeProperty,\n    ControlType.Document);\nPropertyCondition textPatternAvailable = new PropertyCondition(\n    AutomationElement.IsTextPatternAvailableProperty, true);\nAndCondition findControl =\n    new AndCondition(documentControl, textPatternAvailable);\n\n// Get the Automation Element for the first text control found.\n// For the purposes of this sample it is sufficient to find the \n// first text control. In other cases there may be multiple text\n// controls to sort through.\ntargetDocument =\n    targetWindow.FindFirst(TreeScope.Descendants, findControl);\n\n// Didn&#39;t find a text control.\nif (targetDocument == null)\n{\n    targetResult.Content =\n        WPFTarget +\n        &quot; does not contain a Document control type.&quot;;\n    targetResult.Background = Brushes.Salmon;\n    startWPFTargetButton.IsEnabled = false;\n    return;\n}\n\n// Get required control patterns \ntargetTextPattern =\n    targetDocument.GetCurrentPattern(\n    TextPattern.Pattern) as TextPattern;\n\n// Didn&#39;t find a text control that supports TextPattern.\nif (targetTextPattern == null)\n{\n    targetResult.Content =\n        WPFTarget +\n        &quot; does not contain an element that supports TextPattern.&quot;;\n    targetResult.Background = Brushes.Salmon;\n    startWPFTargetButton.IsEnabled = false;\n    return;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_StrikethroughColorAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StrikethroughColorAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>StrikethroughColor</code> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute StrikethroughColorAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1038\">private void GetStrikethroughColorAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.StrikethroughColorAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed strikethrough colors.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2038\">Private Sub GetStrikethroughColorAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.StrikethroughColorAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed strikethrough colors.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_StrikethroughStyleAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StrikethroughStyleAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>StrikethroughStyle</code> (<a class=\"xref\" href=\"system.windows.automation.text.textdecorationlinestyle\" data-linktype=\"relative-path\">TextDecorationLineStyle</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute StrikethroughStyleAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.windows.automation.text.textdecorationlinestyle\" data-linktype=\"relative-path\">TextDecorationLineStyle</a>. The default value is <a class=\"xref\" href=\"system.windows.automation.text.textdecorationlinestyle\" data-linktype=\"relative-path\">TextDecorationLineStyle</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1039\">private void GetStrikethroughStyleAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.StrikethroughStyleAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed strikethrough styles.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2039\">Private Sub GetStrikethroughStyleAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.StrikethroughStyleAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed strikethrough styles.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_TabsAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TabsAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>Tabs</code> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute TabsAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This attribute represents the collection of tab stops in points (<a class=\"xref\" href=\"system.drawing.graphicsunit\" data-linktype=\"relative-path\">GraphicsUnit</a>).  </p>\n<p> This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are an array of type <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>. The default value is an <code>empty</code> array.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1040\">private void GetTabsAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.TabsAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed tabs.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2040\">Private Sub GetTabsAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.TabsAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed tabs.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_TextChangedEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextChangedEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the event raised whenever textual content is modified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationEvent TextChangedEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"FindText#TextChanged\">&#39; Initialize a text changed listener.\n&#39; An instance of TextPatternRange will become invalid if \n&#39; one of the following occurs:\n&#39; 1) The text in the provider changes via some user activity.\n&#39; 2) ValuePattern.SetValue is used to programatically change \n&#39; the value of the text in the provider.\n&#39; The only way the client application can detect if the text \n&#39; has changed (to ensure that the ranges are still valid), \n&#39; is by setting a listener for the TextChanged event of \n&#39; the TextPattern. If this event is raised, the client needs \n&#39; to update the targetDocumentRange member data to ensure the \n&#39; user is working with the updated text. \n&#39; Clients must always anticipate the possibility that the text \n&#39; can change underneath them.\nDim onTextChanged As AutomationEventHandler = _\nNew AutomationEventHandler(AddressOf TextChanged)\nAutomation.AddAutomationEventHandler( _\nTextPattern.TextChangedEvent, targetDocument, TreeScope.Element, onTextChanged)\n</code></pre><pre><code class=\"lang-cs\" name=\"FindText#TextChanged\">// Initialize a text changed listener.\n// An instance of TextPatternRange will become invalid if \n// one of the following occurs:\n// 1) The text in the provider changes via some user activity.\n// 2) ValuePattern.SetValue is used to programatically change \n// the value of the text in the provider.\n// The only way the client application can detect if the text \n// has changed (to ensure that the ranges are still valid), \n// is by setting a listener for the TextChanged event of \n// the TextPattern. If this event is raised, the client needs \n// to update the targetDocumentRange member data to ensure the \n// user is working with the updated text. \n// Clients must always anticipate the possibility that the text \n// can change underneath them.\nAutomation.AddAutomationEventHandler(\n    TextPattern.TextChangedEvent,\n    targetDocument,\n    TreeScope.Element,\n    TextChanged);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_TextFlowDirectionsAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextFlowDirectionsAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>TextFlowDirections</code> (<a class=\"xref\" href=\"system.windows.automation.text.flowdirections\" data-linktype=\"relative-path\">FlowDirections</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute TextFlowDirectionsAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.windows.automation.text.flowdirections\" data-linktype=\"relative-path\">FlowDirections</a>. The default value is <a class=\"xref\" href=\"system.windows.automation.text.flowdirections\" data-linktype=\"relative-path\">FlowDirections</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1041\">private void GetTextFlowDirectionsAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.TextFlowDirectionsAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed text flow directions.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2041\">Private Sub GetTextFlowDirectionsAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.TextFlowDirectionsAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed text flow directions.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_TextSelectionChangedEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TextSelectionChangedEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the event raised when the text selection is modified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationEvent TextSelectionChangedEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some text controls handle the text insertion point (cursor) as a zero-width text selection and might raise <code>TextSelectionChangedEvent</code> when the cursor is moved.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To follow cursor movements, UI Automation clients are advised to keep track of insertion point changes by listening for corresponding UI Automation element events rather than depending on TextSelectionChangedEvent.  </p>\n</div>\n<p> This identifier is used by UI Automation client applications UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"FindText#SelectionChanged\">&#39; Initialize a selection changed listener.\n&#39; The target selection is reflected in the client.\nDim onSelectionChanged As AutomationEventHandler = _\nNew AutomationEventHandler(AddressOf OnTextSelectionChange)\nAutomation.AddAutomationEventHandler( _\nTextPattern.TextSelectionChangedEvent, targetDocument, _\nTreeScope.Element, onSelectionChanged)\n</code></pre><pre><code class=\"lang-cs\" name=\"FindText#SelectionChanged\">// Initialize a selection changed listener.\n// The target selection is reflected in the client.\nAutomation.AddAutomationEventHandler(\n    TextPattern.TextSelectionChangedEvent,\n    targetDocument,\n    TreeScope.Element,\n    OnTextSelectionChange);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_UnderlineColorAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnderlineColorAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>UnderlineColor</code> attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute UnderlineColorAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. The default value is <code>zero</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1043\">private void GetUnderlineColorAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.UnderlineColorAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed underline colors.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2043\">Private Sub GetUnderlineColorAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.UnderlineColorAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed underline colors.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_UnderlineStyleAttribute\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnderlineStyleAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <code>UnderlineStyle</code> (<a class=\"xref\" href=\"system.windows.automation.text.textdecorationlinestyle\" data-linktype=\"relative-path\">TextDecorationLineStyle</a>) attribute of a text range.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationTextAttribute UnderlineStyleAttribute;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.textpatternidentifiers\" data-linktype=\"relative-path\">TextPatternIdentifiers</a>.  </p>\n<p> UI Automation clients get the value of the attribute by calling <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange#System_Windows_Automation_Text_TextPatternRange_GetAttributeValue_\" data-linktype=\"relative-path\">GetAttributeValue</a>.  </p>\n<p> Values for this attribute are of type <a class=\"xref\" href=\"system.windows.automation.text.textdecorationlinestyle\" data-linktype=\"relative-path\">TextDecorationLineStyle</a>. The default value is <a class=\"xref\" href=\"system.windows.automation.text.textdecorationlinestyle\" data-linktype=\"relative-path\">TextDecorationLineStyle</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to obtain an attribute value for a range of text in Microsoft Notepad.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Microsoft Notepad is used as the text provider for example purposes only. Microsoft Notepad is not guaranteed to support the attribute value being requested.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1044\">private void GetUnderlineStyleAttribute()\n{\n    // Start application.\n    Process p = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement target = AutomationElement.FromHandle(p.MainWindowHandle);\n\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return;\n    }\n\n    Object oAttribute = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.UnderlineStyleAttribute);\n    if (oAttribute == TextPattern.MixedAttributeValue)\n    {\n        Console.WriteLine(&quot;Mixed underline styles.&quot;);\n    }\n    else\n    {\n        Console.WriteLine(oAttribute.ToString());\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2044\">Private Sub GetUnderlineStyleAttribute()\n    &#39; Start application.\n    Dim p As Process = Process.Start(&quot;Notepad.exe&quot;, &quot;text.txt&quot;)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim target As AutomationElement = AutomationElement.FromHandle(p.MainWindowHandle)\n\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return\n    End If\n\n    Dim oAttribute As Object = textpatternPattern.DocumentRange.GetAttributeValue(TextPattern.UnderlineStyleAttribute)\n    If (oAttribute = TextPattern.MixedAttributeValue) Then\n        Console.WriteLine(&quot;Mixed underline styles.&quot;)\n    Else\n        Console.WriteLine(oAttribute.ToString())\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_DocumentRange\">\r\n    \r\n            <a id=\"System_Windows_Automation_TextPattern_DocumentRange_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DocumentRange</div>        \r\n          </div>\r\n    \r\n            <p>Gets a text range that encloses the main text of a document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.Text.TextPatternRange DocumentRange { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some auxiliary text such as headers, footnotes, or annotations might not be included.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following code example, the targetTextPattern member variable is a <a class=\"xref\" href=\"system.windows.automation.textpattern\" data-linktype=\"relative-path\">TextPattern</a> object obtained from a text provider of interest.  </p>\n<pre><code class=\"lang-vb\" name=\"FindText#DocumentRange\">&#39; Initialize the document range for the text of the document.\ndocumentRange = targetTextPattern.DocumentRange\n</code></pre><pre><code class=\"lang-cs\" name=\"FindText#DocumentRange\">// Initialize the document range for the text of the document.\ndocumentRange = targetTextPattern.DocumentRange;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_SupportedTextSelection\">\r\n    \r\n            <a id=\"System_Windows_Automation_TextPattern_SupportedTextSelection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SupportedTextSelection</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that specifies whether a text provider supports selection and, if so, the type of selection supported.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.SupportedTextSelection SupportedTextSelection { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.supportedtextselection\" data-linktype=\"relative-path\">SupportedTextSelection</a></div>\r\n                  </div>\r\n                  <p>One of <code>None</code>, <code>Single</code>, or <code>Multiple</code> from <a class=\"xref\" href=\"system.windows.automation.supportedtextselection\" data-linktype=\"relative-path\">SupportedTextSelection</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"FindText#SupportedTextSelection\">&#39; Does target range support text selection?\nIf targetTextPattern.SupportedTextSelection = SupportedTextSelection.None Then\n    targetResult.Content = &quot;Unable to select text.&quot;\n    targetResult.Background = Brushes.Salmon\n    Return\nEnd If\n&#39; Does target range support multiple selections?\nIf targetTextPattern.SupportedTextSelection = SupportedTextSelection.Multiple Then\n    targetResult.Content = &quot;Multiple selections present.&quot;\n    targetResult.Background = Brushes.Salmon\n    Return\nEnd If\n</code></pre><pre><code class=\"lang-cs\" name=\"FindText#SupportedTextSelection\">// Does target range support text selection?\nif (targetTextPattern.SupportedTextSelection ==\n    SupportedTextSelection.None)\n{\n    targetResult.Content = &quot;Unable to select text.&quot;;\n    targetResult.Background = Brushes.Salmon;\n    return;\n}\n// Does target range support multiple selections?\nif (targetTextPattern.SupportedTextSelection ==\n    SupportedTextSelection.Multiple)\n{\n    targetResult.Content = &quot;Multiple selections present.&quot;;\n    targetResult.Background = Brushes.Salmon;\n    return;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_GetSelection\">\r\n    \r\n            <a id=\"System_Windows_Automation_TextPattern_GetSelection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSelection()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a collection of disjoint text ranges associated with the current text selection or selections.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.Text.TextPatternRange[] GetSelection ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a>[]</div>\r\n                  </div>\r\n                  <p>A collection of disjoint text ranges.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The text container does not support text selection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If no text is selected, GetSelection returns the degenerate text range (empty range) at the position of the system cursor (text insertion point).  </p>\n<p> If the system cursor (text insertion point) is not present, GetSelection might return <code>null</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use the <a class=\"xref\" href=\"system.windows.automation.textpattern#System_Windows_Automation_TextPattern_SupportedTextSelection_\" data-linktype=\"relative-path\">SupportedTextSelection</a> property to test if text selection or positioning of the text insertion point is supported by the control.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1046\">private TextPatternRange CurrentSelection(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return null;\n    }\n    TextPatternRange[] currentSelection = textpatternPattern.GetSelection();\n    return currentSelection[0];\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#2046\">Private Function CurrentSelection(ByVal target As AutomationElement) As TextPatternRange\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n    Dim currentTextSelection As TextPatternRange() = textpatternPattern.GetSelection()\n    Return currentTextSelection(0)\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_GetVisibleRanges\">\r\n    \r\n            <a id=\"System_Windows_Automation_TextPattern_GetVisibleRanges_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetVisibleRanges()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves an array of disjoint text ranges from a text container where each text range begins with the first partially visible line through to the end of the last partially visible line.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.Text.TextPatternRange[] GetVisibleRanges ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a>[]</div>\r\n                  </div>\r\n                  <p>The collection of visible text ranges within the container or an empty array. <code>Null</code> is never returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Disjoint text ranges may occur when any content of a text container is obscured by an overlapping window or other object, or when a text container with a multi-column layout has one or more columns partially scrolled out of view.  </p>\n<p> If no text is visible, a degenerate (empty) text range is returned. This empty range can be returned if the text container is empty or when all text is scrolled out of view.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#VisibleRanges\">Private Function CurrentVisibleRanges(ByVal target As AutomationElement) As TextPatternRange()\n    &#39; Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    Dim cond As PropertyCondition = New PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document)\n\n    &#39; target --&gt; The root AutomationElement.\n    Dim textProvider As AutomationElement = target.FindFirst(TreeScope.Descendants, cond)\n\n    Dim textpatternPattern As TextPattern = CType(textProvider.GetCurrentPattern(TextPattern.Pattern), TextPattern)\n\n    If (textpatternPattern Is Nothing) Then\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;)\n        Return Nothing\n    End If\n\n    Return textpatternPattern.GetVisibleRanges()\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#VisibleRanges\">private TextPatternRange[] CurrentVisibleRanges(AutomationElement target)\n{\n    // Specify the control type we&#39;re looking for, in this case &#39;Document&#39;\n    PropertyCondition cond = new PropertyCondition(AutomationElement.ControlTypeProperty, ControlType.Document);\n\n    // target --&gt; The root AutomationElement.\n    AutomationElement textProvider = target.FindFirst(TreeScope.Descendants, cond);\n\n    TextPattern textpatternPattern = textProvider.GetCurrentPattern(TextPattern.Pattern) as TextPattern;\n\n    if (textpatternPattern == null)\n    {\n        Console.WriteLine(&quot;Root element does not contain a descendant that supports TextPattern.&quot;);\n        return null;\n    }\n    return textpatternPattern.GetVisibleRanges();\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_RangeFromChild_System_Windows_Automation_AutomationElement_\">\r\n    \r\n            <a id=\"System_Windows_Automation_TextPattern_RangeFromChild_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RangeFromChild(AutomationElement)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a text range enclosing a child element such as an image, hyperlink, Microsoft Excel spreadsheet, or other embedded object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.Text.TextPatternRange RangeFromChild (System.Windows.Automation.AutomationElement childElement);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>childElement</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The enclosed object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a></div>\r\n                  </div>\r\n                  <p>A range that spans the child element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The child element is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The element is not a child of the text container.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there is no text in the range where the child element exists, a degenerate (empty) range is returned.  </p>\n<p> The <code>childElement</code> parameter is either a child of the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> associated with a <a class=\"xref\" href=\"system.windows.automation.textpattern\" data-linktype=\"relative-path\">TextPattern</a> or from the array of children of a <a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#GetTextElement\">&#39;&#39;&#39; -------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtain the text control of interest from the target application.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetApp&quot;&gt;\n&#39;&#39;&#39; The target application.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; An AutomationElement. representing a text control.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39; -------------------------------------------------------------------\nPrivate Function GetTextElement(ByVal targetApp As AutomationElement) As AutomationElement\n    &#39; The control type we&#39;re looking for; in this case &#39;Document&#39;\n    Dim cond1 As PropertyCondition = _\n        New PropertyCondition( _\n        AutomationElement.ControlTypeProperty, _\n        ControlType.Document)\n\n    &#39; The control pattern of interest; in this case &#39;TextPattern&#39;.\n    Dim cond2 As PropertyCondition = _\n        New PropertyCondition( _\n        AutomationElement.IsTextPatternAvailableProperty, _\n        True)\n\n    Dim textCondition As AndCondition = New AndCondition(cond1, cond2)\n\n    Dim targetTextElement As AutomationElement = _\n        targetApp.FindFirst(TreeScope.Descendants, textCondition)\n\n    &#39; If targetText is null then a suitable text control was not found.\n    Return targetTextElement\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#GetTextElement\">/// -------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtain the text control of interest from the target application.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetApp&quot;&gt;\n/// The target application.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// An AutomationElement that represents a text provider..\n/// &lt;/returns&gt;\n/// -------------------------------------------------------------------\nprivate AutomationElement GetTextElement(AutomationElement targetApp)\n{\n    // The control type we&#39;re looking for; in this case &#39;Document&#39;\n    PropertyCondition cond1 =\n        new PropertyCondition(\n        AutomationElement.ControlTypeProperty,\n        ControlType.Document);\n\n    // The control pattern of interest; in this case &#39;TextPattern&#39;.\n    PropertyCondition cond2 = \n        new PropertyCondition(\n        AutomationElement.IsTextPatternAvailableProperty, \n        true);\n\n    AndCondition textCondition = new AndCondition(cond1, cond2);\n\n    AutomationElement targetTextElement =\n        targetApp.FindFirst(TreeScope.Descendants, textCondition);\n\n    // If targetText is null then a suitable text control was not found.\n    return targetTextElement;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#GetRangeFromChild\">&#39;&#39;&#39; -------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a text range spanning an embedded child \n&#39;&#39;&#39; of a document control and displays the content of the range.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetTextElement&quot;&gt;\n&#39;&#39;&#39; The AutomationElement. representing a text control.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; -------------------------------------------------------------------\nPrivate Sub GetRangeFromChild( _\nByVal targetTextElement As AutomationElement)\n    Dim textPattern As TextPattern = _\n    DirectCast( _\n    targetTextElement.GetCurrentPattern(textPattern.Pattern), _\n    TextPattern)\n\n    If (textPattern Is Nothing) Then\n        &#39; Target control doesn&#39;t support TextPattern.\n        Return\n    End If\n\n    &#39; Obtain a text range spanning the entire document.\n    Dim textRange As TextPatternRange = textPattern.DocumentRange\n\n    &#39; Retrieve the embedded objects within the range.\n    Dim embeddedObjects() As AutomationElement = textRange.GetChildren()\n\n    Dim embeddedObject As AutomationElement\n    For Each embeddedObject In embeddedObjects\n        If (embeddedObject.GetCurrentPropertyValue( _\n            AutomationElement.IsTextPatternAvailableProperty) = True) Then\n            &#39; For full functionality a secondary TextPattern should\n            &#39; be obtained from the embedded object.\n            &#39; embeddedObject must be a child of the text provider.\n            Dim embeddedObjectRange As TextPatternRange = _\n            textPattern.RangeFromChild(embeddedObject)\n            &#39; GetText(-1) retrieves all text in the range.\n            &#39; Typically a more limited amount of text would be \n            &#39; retrieved for performance and security reasons.\n            Console.WriteLine(embeddedObjectRange.GetText(-1))\n        End If\n    Next\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#GetRangeFromChild\">/// -------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a text range spanning an embedded child \n/// of a document control and displays the content of the range.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetTextElement&quot;&gt;\n/// The AutomationElment that represents a text control.\n/// &lt;/param&gt;\n/// -------------------------------------------------------------------\nprivate void GetRangeFromChild(AutomationElement targetTextElement)\n{\n    TextPattern textPattern =\n        targetTextElement.GetCurrentPattern(TextPattern.Pattern)\n        as TextPattern;\n\n    if (textPattern == null)\n    {\n        // Target control doesn&#39;t support TextPattern.\n        return;\n    }\n\n    // Obtain a text range spanning the entire document.\n    TextPatternRange textRange = textPattern.DocumentRange;\n\n    // Retrieve the embedded objects within the range.\n    AutomationElement[] embeddedObjects = textRange.GetChildren();\n\n    // Retrieve and display text value of embedded object.\n    foreach (AutomationElement embeddedObject in embeddedObjects)\n    {\n        if ((bool)embeddedObject.GetCurrentPropertyValue(\n            AutomationElement.IsTextPatternAvailableProperty))\n        {\n           // For full functionality a secondary TextPattern should\n           // be obtained from the embedded object.\n           // embeddedObject must be a child of the text provider.\n            TextPatternRange embeddedObjectRange =\n                textPattern.RangeFromChild(embeddedObject);\n            // GetText(-1) retrieves all text in the range.\n            // Typically a more limited amount of text would be \n            // retrieved for performance and security reasons.\n            Console.WriteLine(embeddedObjectRange.GetText(-1));\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_TextPattern_RangeFromPoint_System_Windows_Point_\">\r\n    \r\n            <a id=\"System_Windows_Automation_TextPattern_RangeFromPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RangeFromPoint(Point)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the degenerate (empty) text range nearest to the specified screen coordinates.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.Text.TextPatternRange RangeFromPoint (System.Windows.Point screenLocation);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>screenLocation</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The location in screen coordinates.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.text.textpatternrange\" data-linktype=\"relative-path\">TextPatternRange</a></div>\r\n                  </div>\r\n                  <p>A degenerate range nearest the specified location. <code>Null</code> is never returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A given point is outside the <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> associated with the text pattern.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A text range that wraps a child object is returned if the screen coordinates are within the coordinates of an image, hyperlink, Microsoft Excel spreadsheet, or other embedded object.  </p>\n<p> Because hidden text is not ignored by RangeFromPoint, a degenerate range from the visible text closest to the given point is returned.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"UIATextPattern_snip#1049\">Private Function GetRangeFromPoint() As TextPatternRange\n    Return targetTextPattern.RangeFromPoint( _\n    _root.Current.BoundingRectangle.TopLeft)\nEnd Function\n</code></pre><pre><code class=\"lang-cs\" name=\"UIATextPattern_snip#1049\">private TextPatternRange GetRangeFromPoint()\n{\n    return targetTextPattern.RangeFromPoint(\n        _root.Current.BoundingRectangle.TopLeft);\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.TextPattern.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.TextPattern.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.AnimationStyleAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.BackgroundColorAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.BulletStyleAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.CapStyleAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.CultureAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.DocumentRange\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.FontNameAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.FontSizeAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.FontWeightAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.ForegroundColorAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.GetSelection\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.GetVisibleRanges\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.HorizontalTextAlignmentAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.IndentationFirstLineAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.IndentationLeadingAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.IndentationTrailingAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.IsHiddenAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.IsItalicAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.IsReadOnlyAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.IsSubscriptAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.IsSuperscriptAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.MarginBottomAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.MarginLeadingAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.MarginTopAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.MarginTrailingAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.MixedAttributeValue\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.OutlineStylesAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.OverlineColorAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.OverlineStyleAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.Pattern\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.RangeFromChild\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.RangeFromPoint\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.StrikethroughColorAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.StrikethroughStyleAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.SupportedTextSelection\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.TabsAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.TextChangedEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.TextFlowDirectionsAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.TextSelectionChangedEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.UnderlineColorAttribute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.TextPattern.UnderlineStyleAttribute\">\r\n<meta name=\"APILocation\" content=\"UIAutomationClient.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"b1ec0f43-e9f7-dc42-d15b-0ed0fbbea32f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents controls that contain text.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Automation/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Automation.TextPattern\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.TextPattern.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.TextPattern.yml","open_to_public_contributors":true,"api_name":["System.Windows.Automation.TextPattern","System.Windows.Automation.TextPattern.AnimationStyleAttribute","System.Windows.Automation.TextPattern.BackgroundColorAttribute","System.Windows.Automation.TextPattern.BulletStyleAttribute","System.Windows.Automation.TextPattern.CapStyleAttribute","System.Windows.Automation.TextPattern.CultureAttribute","System.Windows.Automation.TextPattern.DocumentRange","System.Windows.Automation.TextPattern.FontNameAttribute","System.Windows.Automation.TextPattern.FontSizeAttribute","System.Windows.Automation.TextPattern.FontWeightAttribute","System.Windows.Automation.TextPattern.ForegroundColorAttribute","System.Windows.Automation.TextPattern.GetSelection","System.Windows.Automation.TextPattern.GetVisibleRanges","System.Windows.Automation.TextPattern.HorizontalTextAlignmentAttribute","System.Windows.Automation.TextPattern.IndentationFirstLineAttribute","System.Windows.Automation.TextPattern.IndentationLeadingAttribute","System.Windows.Automation.TextPattern.IndentationTrailingAttribute","System.Windows.Automation.TextPattern.IsHiddenAttribute","System.Windows.Automation.TextPattern.IsItalicAttribute","System.Windows.Automation.TextPattern.IsReadOnlyAttribute","System.Windows.Automation.TextPattern.IsSubscriptAttribute","System.Windows.Automation.TextPattern.IsSuperscriptAttribute","System.Windows.Automation.TextPattern.MarginBottomAttribute","System.Windows.Automation.TextPattern.MarginLeadingAttribute","System.Windows.Automation.TextPattern.MarginTopAttribute","System.Windows.Automation.TextPattern.MarginTrailingAttribute","System.Windows.Automation.TextPattern.MixedAttributeValue","System.Windows.Automation.TextPattern.OutlineStylesAttribute","System.Windows.Automation.TextPattern.OverlineColorAttribute","System.Windows.Automation.TextPattern.OverlineStyleAttribute","System.Windows.Automation.TextPattern.Pattern","System.Windows.Automation.TextPattern.RangeFromChild","System.Windows.Automation.TextPattern.RangeFromPoint","System.Windows.Automation.TextPattern.StrikethroughColorAttribute","System.Windows.Automation.TextPattern.StrikethroughStyleAttribute","System.Windows.Automation.TextPattern.SupportedTextSelection","System.Windows.Automation.TextPattern.TabsAttribute","System.Windows.Automation.TextPattern.TextChangedEvent","System.Windows.Automation.TextPattern.TextFlowDirectionsAttribute","System.Windows.Automation.TextPattern.TextSelectionChangedEvent","System.Windows.Automation.TextPattern.UnderlineColorAttribute","System.Windows.Automation.TextPattern.UnderlineStyleAttribute"],"api_location":["UIAutomationClient.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Automation.TextPattern","System::Windows::Automation::TextPattern","System.Windows.Automation.TextPattern.AnimationStyleAttribute","System::Windows::Automation::TextPattern::AnimationStyleAttribute","System.Windows.Automation.TextPattern.BackgroundColorAttribute","System::Windows::Automation::TextPattern::BackgroundColorAttribute","System.Windows.Automation.TextPattern.BulletStyleAttribute","System::Windows::Automation::TextPattern::BulletStyleAttribute","System.Windows.Automation.TextPattern.CapStyleAttribute","System::Windows::Automation::TextPattern::CapStyleAttribute","System.Windows.Automation.TextPattern.CultureAttribute","System::Windows::Automation::TextPattern::CultureAttribute","System.Windows.Automation.TextPattern.DocumentRange","System::Windows::Automation::TextPattern::DocumentRange","System.Windows.Automation.TextPattern.FontNameAttribute","System::Windows::Automation::TextPattern::FontNameAttribute","System.Windows.Automation.TextPattern.FontSizeAttribute","System::Windows::Automation::TextPattern::FontSizeAttribute","System.Windows.Automation.TextPattern.FontWeightAttribute","System::Windows::Automation::TextPattern::FontWeightAttribute","System.Windows.Automation.TextPattern.ForegroundColorAttribute","System::Windows::Automation::TextPattern::ForegroundColorAttribute","System.Windows.Automation.TextPattern.GetSelection","System::Windows::Automation::TextPattern::GetSelection","System.Windows.Automation.TextPattern.GetVisibleRanges","System::Windows::Automation::TextPattern::GetVisibleRanges","System.Windows.Automation.TextPattern.HorizontalTextAlignmentAttribute","System::Windows::Automation::TextPattern::HorizontalTextAlignmentAttribute","System.Windows.Automation.TextPattern.IndentationFirstLineAttribute","System::Windows::Automation::TextPattern::IndentationFirstLineAttribute","System.Windows.Automation.TextPattern.IndentationLeadingAttribute","System::Windows::Automation::TextPattern::IndentationLeadingAttribute","System.Windows.Automation.TextPattern.IndentationTrailingAttribute","System::Windows::Automation::TextPattern::IndentationTrailingAttribute","System.Windows.Automation.TextPattern.IsHiddenAttribute","System::Windows::Automation::TextPattern::IsHiddenAttribute","System.Windows.Automation.TextPattern.IsItalicAttribute","System::Windows::Automation::TextPattern::IsItalicAttribute","System.Windows.Automation.TextPattern.IsReadOnlyAttribute","System::Windows::Automation::TextPattern::IsReadOnlyAttribute","System.Windows.Automation.TextPattern.IsSubscriptAttribute","System::Windows::Automation::TextPattern::IsSubscriptAttribute","System.Windows.Automation.TextPattern.IsSuperscriptAttribute","System::Windows::Automation::TextPattern::IsSuperscriptAttribute","System.Windows.Automation.TextPattern.MarginBottomAttribute","System::Windows::Automation::TextPattern::MarginBottomAttribute","System.Windows.Automation.TextPattern.MarginLeadingAttribute","System::Windows::Automation::TextPattern::MarginLeadingAttribute","System.Windows.Automation.TextPattern.MarginTopAttribute","System::Windows::Automation::TextPattern::MarginTopAttribute","System.Windows.Automation.TextPattern.MarginTrailingAttribute","System::Windows::Automation::TextPattern::MarginTrailingAttribute","System.Windows.Automation.TextPattern.MixedAttributeValue","System::Windows::Automation::TextPattern::MixedAttributeValue","System.Windows.Automation.TextPattern.OutlineStylesAttribute","System::Windows::Automation::TextPattern::OutlineStylesAttribute","System.Windows.Automation.TextPattern.OverlineColorAttribute","System::Windows::Automation::TextPattern::OverlineColorAttribute","System.Windows.Automation.TextPattern.OverlineStyleAttribute","System::Windows::Automation::TextPattern::OverlineStyleAttribute","System.Windows.Automation.TextPattern.Pattern","System::Windows::Automation::TextPattern::Pattern","System.Windows.Automation.TextPattern.RangeFromChild","System::Windows::Automation::TextPattern::RangeFromChild","System.Windows.Automation.TextPattern.RangeFromPoint","System::Windows::Automation::TextPattern::RangeFromPoint","System.Windows.Automation.TextPattern.StrikethroughColorAttribute","System::Windows::Automation::TextPattern::StrikethroughColorAttribute","System.Windows.Automation.TextPattern.StrikethroughStyleAttribute","System::Windows::Automation::TextPattern::StrikethroughStyleAttribute","System.Windows.Automation.TextPattern.SupportedTextSelection","System::Windows::Automation::TextPattern::SupportedTextSelection","System.Windows.Automation.TextPattern.TabsAttribute","System::Windows::Automation::TextPattern::TabsAttribute","System.Windows.Automation.TextPattern.TextChangedEvent","System::Windows::Automation::TextPattern::TextChangedEvent","System.Windows.Automation.TextPattern.TextFlowDirectionsAttribute","System::Windows::Automation::TextPattern::TextFlowDirectionsAttribute","System.Windows.Automation.TextPattern.TextSelectionChangedEvent","System::Windows::Automation::TextPattern::TextSelectionChangedEvent","System.Windows.Automation.TextPattern.UnderlineColorAttribute","System::Windows::Automation::TextPattern::UnderlineColorAttribute","System.Windows.Automation.TextPattern.UnderlineStyleAttribute","System::Windows::Automation::TextPattern::UnderlineStyleAttribute"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"b1ec0f43-e9f7-dc42-d15b-0ed0fbbea32f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Automation/TextPattern.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TextPattern class | Microsoft Docs","_op_ogTitle":"TextPattern class","description":"Represents controls that contain text.\n","toc_asset_id":"_splitted/System.Windows.Automation/toc.json","toc_rel":"_splitted/System.Windows.Automation/toc.json","source_url":"","ms.assetid":"System.Windows.Automation.TextPattern","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.textpattern","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.textpattern","fileRelativePath":"System.Windows.Automation.TextPattern.html"},"themesRelativePathToOutputRoot":"_themes/"}