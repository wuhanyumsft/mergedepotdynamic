{"content":"    \r\n    <h1 id=\"System_Collections_DictionaryBase\">\r\n      <span class=\"lang-csharp\">DictionaryBase</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides the <code>abstract</code> base class for a strongly typed collection of key/value pairs.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class DictionaryBase : System.Collections.IDictionary</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DictionaryBase</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The foreach statement of the C# language (for each in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the DictionaryBase is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a>.  </p>\n<p> The <code>foreach</code> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <a class=\"xref\" href=\"system.type#System_Type_Equals_\" data-linktype=\"relative-path\">Equals</a> method.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase__ctor\" data-linktype=\"self-bookmark\">DictionaryBase()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements contained in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_Dictionary\" data-linktype=\"self-bookmark\">Dictionary</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the list of elements contained in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_InnerHashtable\" data-linktype=\"self-bookmark\">InnerHashtable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the list of elements contained in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Clears the contents of the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> elements to a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> that iterates through the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_OnClear\" data-linktype=\"self-bookmark\">OnClear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes before clearing the contents of the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_OnClearComplete\" data-linktype=\"self-bookmark\">OnClearComplete()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes after clearing the contents of the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_OnGet_System_Object_System_Object_\" data-linktype=\"self-bookmark\">OnGet(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the element with the specified key and value in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_OnInsert_System_Object_System_Object_\" data-linktype=\"self-bookmark\">OnInsert(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes before inserting a new element into the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_OnInsertComplete_System_Object_System_Object_\" data-linktype=\"self-bookmark\">OnInsertComplete(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes after inserting a new element into the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_OnRemove_System_Object_System_Object_\" data-linktype=\"self-bookmark\">OnRemove(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes before removing an element from the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_OnRemoveComplete_System_Object_System_Object_\" data-linktype=\"self-bookmark\">OnRemoveComplete(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes after removing an element from the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_OnSet_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">OnSet(Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes before setting a value in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_OnSetComplete_System_Object_System_Object_System_Object_\" data-linktype=\"self-bookmark\">OnSetComplete(Object,Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes after setting a value in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_OnValidate_System_Object_System_Object_\" data-linktype=\"self-bookmark\">OnValidate(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs additional custom processes when validating the element with the specified key and value.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_System_Collections_ICollection_IsSynchronized\" data-linktype=\"self-bookmark\">ICollection.IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to a <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_System_Collections_ICollection_SyncRoot\" data-linktype=\"self-bookmark\">ICollection.SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to a <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_System_Collections_IDictionary_Add_System_Object_System_Object_\" data-linktype=\"self-bookmark\">IDictionary.Add(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an element with the specified key and value into the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_System_Collections_IDictionary_Contains_System_Object_\" data-linktype=\"self-bookmark\">IDictionary.Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> contains a specific key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_System_Collections_IDictionary_IsFixedSize\" data-linktype=\"self-bookmark\">IDictionary.IsFixedSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object has a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_System_Collections_IDictionary_IsReadOnly\" data-linktype=\"self-bookmark\">IDictionary.IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_System_Collections_IDictionary_Item_System_Object_\" data-linktype=\"self-bookmark\">IDictionary.Item(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value associated with the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_System_Collections_IDictionary_Keys\" data-linktype=\"self-bookmark\">IDictionary.Keys</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the keys in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_System_Collections_IDictionary_Remove_System_Object_\" data-linktype=\"self-bookmark\">IDictionary.Remove(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element with the specified key from the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_System_Collections_IDictionary_Values\" data-linktype=\"self-bookmark\">IDictionary.Values</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the values in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_DictionaryBase_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that iterates through the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase__ctor\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DictionaryBase()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected DictionaryBase ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_Count\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements contained in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements contained in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_Dictionary\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_Dictionary_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dictionary</div>        \r\n          </div>\r\n    \r\n            <p>Gets the list of elements contained in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Collections.IDictionary Dictionary { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> representing the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance itself.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The On* methods are invoked only on the instance returned by the Dictionary property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_InnerHashtable_\" data-linktype=\"relative-path\">InnerHashtable</a> property.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class and uses that implementation to create a dictionary of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and values that have a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> of 5 characters or less.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ShortStringDictionary: public DictionaryBase\n{\npublic:\n\n   property String^ Item [String^]\n   {\n      String^ get( String^ key )\n      {\n         return (dynamic_cast&lt;String^&gt;(Dictionary[ key ]));\n      }\n\n      void set( String^ value, String^ key )\n      {\n         Dictionary[ key ] = value;\n      }\n   }\n\n   property ICollection^ Keys \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Keys);\n      }\n   }\n\n   property ICollection^ Values \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Values);\n      }\n   }\n   void Add( String^ key, String^ value )\n   {\n      Dictionary-&gt;Add( key, value );\n   }\n\n   bool Contains( String^ key )\n   {\n      return (Dictionary-&gt;Contains( key ));\n   }\n\n   void Remove( String^ key )\n   {\n      Dictionary-&gt;Remove( key );\n   }\n\n\nprotected:\n   virtual void OnInsert( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n   virtual void OnRemove( Object^ key, Object^ /*value*/ ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n   }\n\n   virtual void OnSet( Object^ key, Object^ /*oldValue*/, Object^ newValue ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( newValue-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;newValue must be of type String.&quot;,&quot;newValue&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(newValue);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;,&quot;newValue&quot; );\n      }\n   }\n\n   virtual void OnValidate( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n};\n\nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol );\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol );\nint main()\n{\n   // Creates and initializes a new DictionaryBase.\n   ShortStringDictionary^ mySSC = gcnew ShortStringDictionary;\n\n   // Adds elements to the collection.\n   mySSC-&gt;Add( &quot;One&quot;, &quot;a&quot; );\n   mySSC-&gt;Add( &quot;Two&quot;, &quot;ab&quot; );\n   mySSC-&gt;Add( &quot;Three&quot;, &quot;abc&quot; );\n   mySSC-&gt;Add( &quot;Four&quot;, &quot;abcd&quot; );\n   mySSC-&gt;Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintKeysAndValues2( mySSC );\n\n   // Display the contents of the collection using the Keys property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n   PrintKeysAndValues3( mySSC );\n\n   // Tries to add a value that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   // Tries to add a key that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n\n   // Searches the collection with Contains.\n   Console::WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Three&quot; ) );\n   Console::WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Twelve&quot; ) );\n   Console::WriteLine();\n\n   // Removes an element from the collection.\n   mySSC-&gt;Remove( &quot;Two&quot; );\n\n   // Displays the contents of the collection.\n   Console::WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n   PrintKeysAndValues2( mySSC );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol )\n{\n   DictionaryEntry myDE;\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      if ( myEnumerator-&gt;Current != nullptr )\n   {\n      myDE =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n   }\n\n   Console::WriteLine();\n}\n\n\n// Uses the Keys property and the Item property.\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol )\n{\n   ICollection^ myKeys = myCol-&gt;Keys;\n   IEnumerator^ myEnum1 = myKeys-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ k = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol-&gt;Item[ k ] );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#1\">using System;\nusing System.Collections;\n\npublic class ShortStringDictionary : DictionaryBase  {\n\n   public String this[ String key ]  {\n      get  {\n         return( (String) Dictionary[key] );\n      }\n      set  {\n         Dictionary[key] = value;\n      }\n   }\n\n   public ICollection Keys  {\n      get  {\n         return( Dictionary.Keys );\n      }\n   }\n\n   public ICollection Values  {\n      get  {\n         return( Dictionary.Values );\n      }\n   }\n\n   public void Add( String key, String value )  {\n      Dictionary.Add( key, value );\n   }\n\n   public bool Contains( String key )  {\n      return( Dictionary.Contains( key ) );\n   }\n\n   public void Remove( String key )  {\n      Dictionary.Remove( key );\n   }\n\n   protected override void OnInsert( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n   protected override void OnRemove( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n   }\n\n   protected override void OnSet( Object key, Object oldValue, Object newValue )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( newValue.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;newValue must be of type String.&quot;, &quot;newValue&quot; );\n      else  {\n         String strValue = (String) newValue;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot; );\n      }\n   }\n\n   protected override void OnValidate( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n}\n\n\npublic class SamplesDictionaryBase  {\n\n   public static void Main()  {\n \n      // Creates and initializes a new DictionaryBase.\n      ShortStringDictionary mySSC = new ShortStringDictionary();\n\n      // Adds elements to the collection.\n      mySSC.Add( &quot;One&quot;, &quot;a&quot; );\n      mySSC.Add( &quot;Two&quot;, &quot;ab&quot; );\n      mySSC.Add( &quot;Three&quot;, &quot;abc&quot; );\n      mySSC.Add( &quot;Four&quot;, &quot;abcd&quot; );\n      mySSC.Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintKeysAndValues1( mySSC );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintKeysAndValues2( mySSC );\n\n      // Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n      PrintKeysAndValues3( mySSC );\n\n      // Tries to add a value that is too long.\n      try  {\n         mySSC.Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Tries to add a key that is too long.\n      try  {\n         mySSC.Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      Console.WriteLine();\n\n      // Searches the collection with Contains.\n      Console.WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC.Contains( &quot;Three&quot; ) );\n      Console.WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC.Contains( &quot;Twelve&quot; ) );\n      Console.WriteLine();\n\n      // Removes an element from the collection.\n      mySSC.Remove( &quot;Two&quot; );\n\n      // Displays the contents of the collection.\n      Console.WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n      PrintKeysAndValues1( mySSC );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( ShortStringDictionary myCol )  {\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( ShortStringDictionary myCol )  {\n      DictionaryEntry myDE;\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         if ( myEnumerator.Current != null )  {\n            myDE = (DictionaryEntry) myEnumerator.Current;\n            Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n         }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys property and the Item property.\n   public static void PrintKeysAndValues3( ShortStringDictionary myCol )  {\n      ICollection myKeys = myCol.Keys;\n      foreach ( String k in myKeys )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol[k] );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#1\">Imports System\nImports System.Collections\n\nPublic Class ShortStringDictionary\n   Inherits DictionaryBase\n\n   Default Public Property Item(key As String) As String\n      Get\n         Return CType(Dictionary(key), String)\n      End Get\n      Set\n         Dictionary(key) = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Keys() As ICollection\n      Get\n         Return Dictionary.Keys\n      End Get\n   End Property\n\n   Public ReadOnly Property Values() As ICollection\n      Get\n         Return Dictionary.Values\n      End Get\n   End Property\n\n   Public Sub Add(key As String, value As String)\n      Dictionary.Add(key, value)\n   End Sub &#39;Add\n\n   Public Function Contains(key As String) As Boolean\n      Return Dictionary.Contains(key)\n   End Function &#39;Contains\n\n   Public Sub Remove(key As String)\n      Dictionary.Remove(key)\n   End Sub &#39;Remove\n\n   Protected Overrides Sub OnInsert(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnInsert\n\n   Protected Overrides Sub OnRemove(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If\n   End Sub &#39;OnRemove\n\n   Protected Overrides Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(newValue.GetType()) Then\n         Throw New ArgumentException(&quot;newValue must be of type String.&quot;, &quot;newValue&quot;)\n      Else\n         Dim strValue As String = CType(newValue, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot;)\n         End If\n      End If\n   End Sub &#39;OnSet\n\n   Protected Overrides Sub OnValidate(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;ShortStringDictionary\n\n\nPublic Class SamplesDictionaryBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new DictionaryBase.\n      Dim mySSC As New ShortStringDictionary()\n\n      &#39; Adds elements to the collection.\n      mySSC.Add(&quot;One&quot;, &quot;a&quot;)\n      mySSC.Add(&quot;Two&quot;, &quot;ab&quot;)\n      mySSC.Add(&quot;Three&quot;, &quot;abc&quot;)\n      mySSC.Add(&quot;Four&quot;, &quot;abcd&quot;)\n      mySSC.Add(&quot;Five&quot;, &quot;abcde&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintKeysAndValues1(mySSC)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintKeysAndValues2(mySSC)\n\n      &#39; Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Keys and Item):&quot;)\n      PrintKeysAndValues3(mySSC)\n\n      &#39; Tries to add a value that is too long.\n      Try\n          mySSC.Add(&quot;Ten&quot;, &quot;abcdefghij&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Tries to add a key that is too long.\n      Try\n          mySSC.Add(&quot;Eleven&quot;, &quot;ijk&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      Console.WriteLine()\n\n      &#39; Searches the collection with Contains.\n      Console.WriteLine(&quot;Contains &quot;&quot;Three&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Three&quot;))\n      Console.WriteLine(&quot;Contains &quot;&quot;Twelve&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Twelve&quot;))\n      Console.WriteLine()\n\n      &#39; Removes an element from the collection.\n      mySSC.Remove(&quot;Two&quot;)\n\n      &#39; Displays the contents of the collection.\n      Console.WriteLine(&quot;After removing &quot;&quot;Two&quot;&quot;:&quot;)\n      PrintKeysAndValues1(mySSC)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues1(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues2(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          If Not (myEnumerator.Current Is Nothing) Then\n            myDE = CType(myEnumerator.Current, DictionaryEntry)\n            Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n          End If\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues2\n\n\n    &#39; Uses the Keys property and the Item property.\n    Public Shared Sub PrintKeysAndValues3(myCol As ShortStringDictionary)\n      Dim myKeys As ICollection = myCol.Keys\n      Dim k As String\n      For Each k In  myKeys\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, k, myCol(k))\n      Next k\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesDictionaryBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Initial contents of the collection (using Keys and Item):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;System.ArgumentException: value must be no more than 5 characters in length.\n&#39;Parameter name: value\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;System.ArgumentException: key must be no more than 5 characters in length.\n&#39;Parameter name: key\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;\n&#39;Contains &quot;Three&quot;: True\n&#39;Contains &quot;Twelve&quot;: False\n&#39;\n&#39;After removing &quot;Two&quot;:\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   One   : a\n&#39;   Four  : abcd\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_InnerHashtable\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_InnerHashtable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InnerHashtable</div>        \r\n          </div>\r\n    \r\n            <p>Gets the list of elements contained in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Collections.Hashtable InnerHashtable { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> representing the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance itself.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Dictionary_\" data-linktype=\"relative-path\">Dictionary</a> property, but not on the instance returned by the InnerHashtable property.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_Clear\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Clears the contents of the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero, and references to other objects from elements of the collection are also released.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> elements to a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (Array array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> objects copied from the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> that iterates through the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IDictionaryEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> for the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class and uses that implementation to create a dictionary of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and values that have a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> of 5 characters or less.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ShortStringDictionary: public DictionaryBase\n{\npublic:\n\n   property String^ Item [String^]\n   {\n      String^ get( String^ key )\n      {\n         return (dynamic_cast&lt;String^&gt;(Dictionary[ key ]));\n      }\n\n      void set( String^ value, String^ key )\n      {\n         Dictionary[ key ] = value;\n      }\n   }\n\n   property ICollection^ Keys \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Keys);\n      }\n   }\n\n   property ICollection^ Values \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Values);\n      }\n   }\n   void Add( String^ key, String^ value )\n   {\n      Dictionary-&gt;Add( key, value );\n   }\n\n   bool Contains( String^ key )\n   {\n      return (Dictionary-&gt;Contains( key ));\n   }\n\n   void Remove( String^ key )\n   {\n      Dictionary-&gt;Remove( key );\n   }\n\n\nprotected:\n   virtual void OnInsert( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n   virtual void OnRemove( Object^ key, Object^ /*value*/ ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n   }\n\n   virtual void OnSet( Object^ key, Object^ /*oldValue*/, Object^ newValue ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( newValue-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;newValue must be of type String.&quot;,&quot;newValue&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(newValue);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;,&quot;newValue&quot; );\n      }\n   }\n\n   virtual void OnValidate( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n};\n\nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol );\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol );\nint main()\n{\n   // Creates and initializes a new DictionaryBase.\n   ShortStringDictionary^ mySSC = gcnew ShortStringDictionary;\n\n   // Adds elements to the collection.\n   mySSC-&gt;Add( &quot;One&quot;, &quot;a&quot; );\n   mySSC-&gt;Add( &quot;Two&quot;, &quot;ab&quot; );\n   mySSC-&gt;Add( &quot;Three&quot;, &quot;abc&quot; );\n   mySSC-&gt;Add( &quot;Four&quot;, &quot;abcd&quot; );\n   mySSC-&gt;Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintKeysAndValues2( mySSC );\n\n   // Display the contents of the collection using the Keys property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n   PrintKeysAndValues3( mySSC );\n\n   // Tries to add a value that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   // Tries to add a key that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n\n   // Searches the collection with Contains.\n   Console::WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Three&quot; ) );\n   Console::WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Twelve&quot; ) );\n   Console::WriteLine();\n\n   // Removes an element from the collection.\n   mySSC-&gt;Remove( &quot;Two&quot; );\n\n   // Displays the contents of the collection.\n   Console::WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n   PrintKeysAndValues2( mySSC );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol )\n{\n   DictionaryEntry myDE;\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      if ( myEnumerator-&gt;Current != nullptr )\n   {\n      myDE =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n   }\n\n   Console::WriteLine();\n}\n\n\n// Uses the Keys property and the Item property.\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol )\n{\n   ICollection^ myKeys = myCol-&gt;Keys;\n   IEnumerator^ myEnum1 = myKeys-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ k = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol-&gt;Item[ k ] );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#1\">using System;\nusing System.Collections;\n\npublic class ShortStringDictionary : DictionaryBase  {\n\n   public String this[ String key ]  {\n      get  {\n         return( (String) Dictionary[key] );\n      }\n      set  {\n         Dictionary[key] = value;\n      }\n   }\n\n   public ICollection Keys  {\n      get  {\n         return( Dictionary.Keys );\n      }\n   }\n\n   public ICollection Values  {\n      get  {\n         return( Dictionary.Values );\n      }\n   }\n\n   public void Add( String key, String value )  {\n      Dictionary.Add( key, value );\n   }\n\n   public bool Contains( String key )  {\n      return( Dictionary.Contains( key ) );\n   }\n\n   public void Remove( String key )  {\n      Dictionary.Remove( key );\n   }\n\n   protected override void OnInsert( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n   protected override void OnRemove( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n   }\n\n   protected override void OnSet( Object key, Object oldValue, Object newValue )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( newValue.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;newValue must be of type String.&quot;, &quot;newValue&quot; );\n      else  {\n         String strValue = (String) newValue;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot; );\n      }\n   }\n\n   protected override void OnValidate( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n}\n\n\npublic class SamplesDictionaryBase  {\n\n   public static void Main()  {\n \n      // Creates and initializes a new DictionaryBase.\n      ShortStringDictionary mySSC = new ShortStringDictionary();\n\n      // Adds elements to the collection.\n      mySSC.Add( &quot;One&quot;, &quot;a&quot; );\n      mySSC.Add( &quot;Two&quot;, &quot;ab&quot; );\n      mySSC.Add( &quot;Three&quot;, &quot;abc&quot; );\n      mySSC.Add( &quot;Four&quot;, &quot;abcd&quot; );\n      mySSC.Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintKeysAndValues1( mySSC );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintKeysAndValues2( mySSC );\n\n      // Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n      PrintKeysAndValues3( mySSC );\n\n      // Tries to add a value that is too long.\n      try  {\n         mySSC.Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Tries to add a key that is too long.\n      try  {\n         mySSC.Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      Console.WriteLine();\n\n      // Searches the collection with Contains.\n      Console.WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC.Contains( &quot;Three&quot; ) );\n      Console.WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC.Contains( &quot;Twelve&quot; ) );\n      Console.WriteLine();\n\n      // Removes an element from the collection.\n      mySSC.Remove( &quot;Two&quot; );\n\n      // Displays the contents of the collection.\n      Console.WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n      PrintKeysAndValues1( mySSC );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( ShortStringDictionary myCol )  {\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( ShortStringDictionary myCol )  {\n      DictionaryEntry myDE;\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         if ( myEnumerator.Current != null )  {\n            myDE = (DictionaryEntry) myEnumerator.Current;\n            Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n         }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys property and the Item property.\n   public static void PrintKeysAndValues3( ShortStringDictionary myCol )  {\n      ICollection myKeys = myCol.Keys;\n      foreach ( String k in myKeys )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol[k] );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#1\">Imports System\nImports System.Collections\n\nPublic Class ShortStringDictionary\n   Inherits DictionaryBase\n\n   Default Public Property Item(key As String) As String\n      Get\n         Return CType(Dictionary(key), String)\n      End Get\n      Set\n         Dictionary(key) = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Keys() As ICollection\n      Get\n         Return Dictionary.Keys\n      End Get\n   End Property\n\n   Public ReadOnly Property Values() As ICollection\n      Get\n         Return Dictionary.Values\n      End Get\n   End Property\n\n   Public Sub Add(key As String, value As String)\n      Dictionary.Add(key, value)\n   End Sub &#39;Add\n\n   Public Function Contains(key As String) As Boolean\n      Return Dictionary.Contains(key)\n   End Function &#39;Contains\n\n   Public Sub Remove(key As String)\n      Dictionary.Remove(key)\n   End Sub &#39;Remove\n\n   Protected Overrides Sub OnInsert(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnInsert\n\n   Protected Overrides Sub OnRemove(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If\n   End Sub &#39;OnRemove\n\n   Protected Overrides Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(newValue.GetType()) Then\n         Throw New ArgumentException(&quot;newValue must be of type String.&quot;, &quot;newValue&quot;)\n      Else\n         Dim strValue As String = CType(newValue, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot;)\n         End If\n      End If\n   End Sub &#39;OnSet\n\n   Protected Overrides Sub OnValidate(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;ShortStringDictionary\n\n\nPublic Class SamplesDictionaryBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new DictionaryBase.\n      Dim mySSC As New ShortStringDictionary()\n\n      &#39; Adds elements to the collection.\n      mySSC.Add(&quot;One&quot;, &quot;a&quot;)\n      mySSC.Add(&quot;Two&quot;, &quot;ab&quot;)\n      mySSC.Add(&quot;Three&quot;, &quot;abc&quot;)\n      mySSC.Add(&quot;Four&quot;, &quot;abcd&quot;)\n      mySSC.Add(&quot;Five&quot;, &quot;abcde&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintKeysAndValues1(mySSC)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintKeysAndValues2(mySSC)\n\n      &#39; Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Keys and Item):&quot;)\n      PrintKeysAndValues3(mySSC)\n\n      &#39; Tries to add a value that is too long.\n      Try\n          mySSC.Add(&quot;Ten&quot;, &quot;abcdefghij&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Tries to add a key that is too long.\n      Try\n          mySSC.Add(&quot;Eleven&quot;, &quot;ijk&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      Console.WriteLine()\n\n      &#39; Searches the collection with Contains.\n      Console.WriteLine(&quot;Contains &quot;&quot;Three&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Three&quot;))\n      Console.WriteLine(&quot;Contains &quot;&quot;Twelve&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Twelve&quot;))\n      Console.WriteLine()\n\n      &#39; Removes an element from the collection.\n      mySSC.Remove(&quot;Two&quot;)\n\n      &#39; Displays the contents of the collection.\n      Console.WriteLine(&quot;After removing &quot;&quot;Two&quot;&quot;:&quot;)\n      PrintKeysAndValues1(mySSC)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues1(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues2(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          If Not (myEnumerator.Current Is Nothing) Then\n            myDE = CType(myEnumerator.Current, DictionaryEntry)\n            Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n          End If\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues2\n\n\n    &#39; Uses the Keys property and the Item property.\n    Public Shared Sub PrintKeysAndValues3(myCol As ShortStringDictionary)\n      Dim myKeys As ICollection = myCol.Keys\n      Dim k As String\n      For Each k In  myKeys\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, k, myCol(k))\n      Next k\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesDictionaryBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Initial contents of the collection (using Keys and Item):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;System.ArgumentException: value must be no more than 5 characters in length.\n&#39;Parameter name: value\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;System.ArgumentException: key must be no more than 5 characters in length.\n&#39;Parameter name: key\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;\n&#39;Contains &quot;Three&quot;: True\n&#39;Contains &quot;Twelve&quot;: False\n&#39;\n&#39;After removing &quot;Two&quot;:\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   One   : a\n&#39;   Four  : abcd\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_OnClear\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_OnClear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnClear()</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes before clearing the contents of the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnClear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Dictionary_\" data-linktype=\"relative-path\">Dictionary</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_InnerHashtable_\" data-linktype=\"relative-path\">InnerHashtable</a> property.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_OnClearComplete\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_OnClearComplete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnClearComplete()</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes after clearing the contents of the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnClearComplete ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Dictionary_\" data-linktype=\"relative-path\">Dictionary</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_InnerHashtable_\" data-linktype=\"relative-path\">InnerHashtable</a> property.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_OnGet_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_OnGet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnGet(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the element with the specified key and value in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual object OnGet (object key, object currentValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to get.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>currentValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The current value of the element associated with <code>key</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> containing the element with the specified key and value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method returns <code>currentValue</code>. It is intended to be overridden by a derived class to perform additional action when the specified element is retrieved.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Dictionary_\" data-linktype=\"relative-path\">Dictionary</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_InnerHashtable_\" data-linktype=\"relative-path\">InnerHashtable</a> property.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_OnInsert_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_OnInsert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnInsert(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes before inserting a new element into the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnInsert (object key, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to insert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the element to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Dictionary_\" data-linktype=\"relative-path\">Dictionary</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_InnerHashtable_\" data-linktype=\"relative-path\">InnerHashtable</a> property.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class and uses that implementation to create a dictionary of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and values that have a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> of 5 characters or less.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ShortStringDictionary: public DictionaryBase\n{\npublic:\n\n   property String^ Item [String^]\n   {\n      String^ get( String^ key )\n      {\n         return (dynamic_cast&lt;String^&gt;(Dictionary[ key ]));\n      }\n\n      void set( String^ value, String^ key )\n      {\n         Dictionary[ key ] = value;\n      }\n   }\n\n   property ICollection^ Keys \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Keys);\n      }\n   }\n\n   property ICollection^ Values \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Values);\n      }\n   }\n   void Add( String^ key, String^ value )\n   {\n      Dictionary-&gt;Add( key, value );\n   }\n\n   bool Contains( String^ key )\n   {\n      return (Dictionary-&gt;Contains( key ));\n   }\n\n   void Remove( String^ key )\n   {\n      Dictionary-&gt;Remove( key );\n   }\n\n\nprotected:\n   virtual void OnInsert( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n   virtual void OnRemove( Object^ key, Object^ /*value*/ ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n   }\n\n   virtual void OnSet( Object^ key, Object^ /*oldValue*/, Object^ newValue ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( newValue-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;newValue must be of type String.&quot;,&quot;newValue&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(newValue);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;,&quot;newValue&quot; );\n      }\n   }\n\n   virtual void OnValidate( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n};\n\nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol );\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol );\nint main()\n{\n   // Creates and initializes a new DictionaryBase.\n   ShortStringDictionary^ mySSC = gcnew ShortStringDictionary;\n\n   // Adds elements to the collection.\n   mySSC-&gt;Add( &quot;One&quot;, &quot;a&quot; );\n   mySSC-&gt;Add( &quot;Two&quot;, &quot;ab&quot; );\n   mySSC-&gt;Add( &quot;Three&quot;, &quot;abc&quot; );\n   mySSC-&gt;Add( &quot;Four&quot;, &quot;abcd&quot; );\n   mySSC-&gt;Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintKeysAndValues2( mySSC );\n\n   // Display the contents of the collection using the Keys property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n   PrintKeysAndValues3( mySSC );\n\n   // Tries to add a value that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   // Tries to add a key that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n\n   // Searches the collection with Contains.\n   Console::WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Three&quot; ) );\n   Console::WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Twelve&quot; ) );\n   Console::WriteLine();\n\n   // Removes an element from the collection.\n   mySSC-&gt;Remove( &quot;Two&quot; );\n\n   // Displays the contents of the collection.\n   Console::WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n   PrintKeysAndValues2( mySSC );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol )\n{\n   DictionaryEntry myDE;\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      if ( myEnumerator-&gt;Current != nullptr )\n   {\n      myDE =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n   }\n\n   Console::WriteLine();\n}\n\n\n// Uses the Keys property and the Item property.\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol )\n{\n   ICollection^ myKeys = myCol-&gt;Keys;\n   IEnumerator^ myEnum1 = myKeys-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ k = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol-&gt;Item[ k ] );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#1\">using System;\nusing System.Collections;\n\npublic class ShortStringDictionary : DictionaryBase  {\n\n   public String this[ String key ]  {\n      get  {\n         return( (String) Dictionary[key] );\n      }\n      set  {\n         Dictionary[key] = value;\n      }\n   }\n\n   public ICollection Keys  {\n      get  {\n         return( Dictionary.Keys );\n      }\n   }\n\n   public ICollection Values  {\n      get  {\n         return( Dictionary.Values );\n      }\n   }\n\n   public void Add( String key, String value )  {\n      Dictionary.Add( key, value );\n   }\n\n   public bool Contains( String key )  {\n      return( Dictionary.Contains( key ) );\n   }\n\n   public void Remove( String key )  {\n      Dictionary.Remove( key );\n   }\n\n   protected override void OnInsert( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n   protected override void OnRemove( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n   }\n\n   protected override void OnSet( Object key, Object oldValue, Object newValue )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( newValue.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;newValue must be of type String.&quot;, &quot;newValue&quot; );\n      else  {\n         String strValue = (String) newValue;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot; );\n      }\n   }\n\n   protected override void OnValidate( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n}\n\n\npublic class SamplesDictionaryBase  {\n\n   public static void Main()  {\n \n      // Creates and initializes a new DictionaryBase.\n      ShortStringDictionary mySSC = new ShortStringDictionary();\n\n      // Adds elements to the collection.\n      mySSC.Add( &quot;One&quot;, &quot;a&quot; );\n      mySSC.Add( &quot;Two&quot;, &quot;ab&quot; );\n      mySSC.Add( &quot;Three&quot;, &quot;abc&quot; );\n      mySSC.Add( &quot;Four&quot;, &quot;abcd&quot; );\n      mySSC.Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintKeysAndValues1( mySSC );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintKeysAndValues2( mySSC );\n\n      // Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n      PrintKeysAndValues3( mySSC );\n\n      // Tries to add a value that is too long.\n      try  {\n         mySSC.Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Tries to add a key that is too long.\n      try  {\n         mySSC.Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      Console.WriteLine();\n\n      // Searches the collection with Contains.\n      Console.WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC.Contains( &quot;Three&quot; ) );\n      Console.WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC.Contains( &quot;Twelve&quot; ) );\n      Console.WriteLine();\n\n      // Removes an element from the collection.\n      mySSC.Remove( &quot;Two&quot; );\n\n      // Displays the contents of the collection.\n      Console.WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n      PrintKeysAndValues1( mySSC );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( ShortStringDictionary myCol )  {\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( ShortStringDictionary myCol )  {\n      DictionaryEntry myDE;\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         if ( myEnumerator.Current != null )  {\n            myDE = (DictionaryEntry) myEnumerator.Current;\n            Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n         }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys property and the Item property.\n   public static void PrintKeysAndValues3( ShortStringDictionary myCol )  {\n      ICollection myKeys = myCol.Keys;\n      foreach ( String k in myKeys )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol[k] );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#1\">Imports System\nImports System.Collections\n\nPublic Class ShortStringDictionary\n   Inherits DictionaryBase\n\n   Default Public Property Item(key As String) As String\n      Get\n         Return CType(Dictionary(key), String)\n      End Get\n      Set\n         Dictionary(key) = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Keys() As ICollection\n      Get\n         Return Dictionary.Keys\n      End Get\n   End Property\n\n   Public ReadOnly Property Values() As ICollection\n      Get\n         Return Dictionary.Values\n      End Get\n   End Property\n\n   Public Sub Add(key As String, value As String)\n      Dictionary.Add(key, value)\n   End Sub &#39;Add\n\n   Public Function Contains(key As String) As Boolean\n      Return Dictionary.Contains(key)\n   End Function &#39;Contains\n\n   Public Sub Remove(key As String)\n      Dictionary.Remove(key)\n   End Sub &#39;Remove\n\n   Protected Overrides Sub OnInsert(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnInsert\n\n   Protected Overrides Sub OnRemove(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If\n   End Sub &#39;OnRemove\n\n   Protected Overrides Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(newValue.GetType()) Then\n         Throw New ArgumentException(&quot;newValue must be of type String.&quot;, &quot;newValue&quot;)\n      Else\n         Dim strValue As String = CType(newValue, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot;)\n         End If\n      End If\n   End Sub &#39;OnSet\n\n   Protected Overrides Sub OnValidate(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;ShortStringDictionary\n\n\nPublic Class SamplesDictionaryBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new DictionaryBase.\n      Dim mySSC As New ShortStringDictionary()\n\n      &#39; Adds elements to the collection.\n      mySSC.Add(&quot;One&quot;, &quot;a&quot;)\n      mySSC.Add(&quot;Two&quot;, &quot;ab&quot;)\n      mySSC.Add(&quot;Three&quot;, &quot;abc&quot;)\n      mySSC.Add(&quot;Four&quot;, &quot;abcd&quot;)\n      mySSC.Add(&quot;Five&quot;, &quot;abcde&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintKeysAndValues1(mySSC)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintKeysAndValues2(mySSC)\n\n      &#39; Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Keys and Item):&quot;)\n      PrintKeysAndValues3(mySSC)\n\n      &#39; Tries to add a value that is too long.\n      Try\n          mySSC.Add(&quot;Ten&quot;, &quot;abcdefghij&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Tries to add a key that is too long.\n      Try\n          mySSC.Add(&quot;Eleven&quot;, &quot;ijk&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      Console.WriteLine()\n\n      &#39; Searches the collection with Contains.\n      Console.WriteLine(&quot;Contains &quot;&quot;Three&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Three&quot;))\n      Console.WriteLine(&quot;Contains &quot;&quot;Twelve&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Twelve&quot;))\n      Console.WriteLine()\n\n      &#39; Removes an element from the collection.\n      mySSC.Remove(&quot;Two&quot;)\n\n      &#39; Displays the contents of the collection.\n      Console.WriteLine(&quot;After removing &quot;&quot;Two&quot;&quot;:&quot;)\n      PrintKeysAndValues1(mySSC)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues1(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues2(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          If Not (myEnumerator.Current Is Nothing) Then\n            myDE = CType(myEnumerator.Current, DictionaryEntry)\n            Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n          End If\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues2\n\n\n    &#39; Uses the Keys property and the Item property.\n    Public Shared Sub PrintKeysAndValues3(myCol As ShortStringDictionary)\n      Dim myKeys As ICollection = myCol.Keys\n      Dim k As String\n      For Each k In  myKeys\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, k, myCol(k))\n      Next k\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesDictionaryBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Initial contents of the collection (using Keys and Item):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;System.ArgumentException: value must be no more than 5 characters in length.\n&#39;Parameter name: value\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;System.ArgumentException: key must be no more than 5 characters in length.\n&#39;Parameter name: key\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;\n&#39;Contains &quot;Three&quot;: True\n&#39;Contains &quot;Twelve&quot;: False\n&#39;\n&#39;After removing &quot;Two&quot;:\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   One   : a\n&#39;   Four  : abcd\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_OnInsertComplete_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_OnInsertComplete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnInsertComplete(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes after inserting a new element into the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnInsertComplete (object key, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to insert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the element to insert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Dictionary_\" data-linktype=\"relative-path\">Dictionary</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_InnerHashtable_\" data-linktype=\"relative-path\">InnerHashtable</a> property.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_OnRemove_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_OnRemove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRemove(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes before removing an element from the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRemove (object key, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to remove.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Dictionary_\" data-linktype=\"relative-path\">Dictionary</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_InnerHashtable_\" data-linktype=\"relative-path\">InnerHashtable</a> property.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class and uses that implementation to create a dictionary of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and values that have a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> of 5 characters or less.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ShortStringDictionary: public DictionaryBase\n{\npublic:\n\n   property String^ Item [String^]\n   {\n      String^ get( String^ key )\n      {\n         return (dynamic_cast&lt;String^&gt;(Dictionary[ key ]));\n      }\n\n      void set( String^ value, String^ key )\n      {\n         Dictionary[ key ] = value;\n      }\n   }\n\n   property ICollection^ Keys \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Keys);\n      }\n   }\n\n   property ICollection^ Values \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Values);\n      }\n   }\n   void Add( String^ key, String^ value )\n   {\n      Dictionary-&gt;Add( key, value );\n   }\n\n   bool Contains( String^ key )\n   {\n      return (Dictionary-&gt;Contains( key ));\n   }\n\n   void Remove( String^ key )\n   {\n      Dictionary-&gt;Remove( key );\n   }\n\n\nprotected:\n   virtual void OnInsert( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n   virtual void OnRemove( Object^ key, Object^ /*value*/ ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n   }\n\n   virtual void OnSet( Object^ key, Object^ /*oldValue*/, Object^ newValue ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( newValue-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;newValue must be of type String.&quot;,&quot;newValue&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(newValue);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;,&quot;newValue&quot; );\n      }\n   }\n\n   virtual void OnValidate( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n};\n\nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol );\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol );\nint main()\n{\n   // Creates and initializes a new DictionaryBase.\n   ShortStringDictionary^ mySSC = gcnew ShortStringDictionary;\n\n   // Adds elements to the collection.\n   mySSC-&gt;Add( &quot;One&quot;, &quot;a&quot; );\n   mySSC-&gt;Add( &quot;Two&quot;, &quot;ab&quot; );\n   mySSC-&gt;Add( &quot;Three&quot;, &quot;abc&quot; );\n   mySSC-&gt;Add( &quot;Four&quot;, &quot;abcd&quot; );\n   mySSC-&gt;Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintKeysAndValues2( mySSC );\n\n   // Display the contents of the collection using the Keys property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n   PrintKeysAndValues3( mySSC );\n\n   // Tries to add a value that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   // Tries to add a key that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n\n   // Searches the collection with Contains.\n   Console::WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Three&quot; ) );\n   Console::WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Twelve&quot; ) );\n   Console::WriteLine();\n\n   // Removes an element from the collection.\n   mySSC-&gt;Remove( &quot;Two&quot; );\n\n   // Displays the contents of the collection.\n   Console::WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n   PrintKeysAndValues2( mySSC );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol )\n{\n   DictionaryEntry myDE;\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      if ( myEnumerator-&gt;Current != nullptr )\n   {\n      myDE =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n   }\n\n   Console::WriteLine();\n}\n\n\n// Uses the Keys property and the Item property.\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol )\n{\n   ICollection^ myKeys = myCol-&gt;Keys;\n   IEnumerator^ myEnum1 = myKeys-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ k = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol-&gt;Item[ k ] );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#1\">using System;\nusing System.Collections;\n\npublic class ShortStringDictionary : DictionaryBase  {\n\n   public String this[ String key ]  {\n      get  {\n         return( (String) Dictionary[key] );\n      }\n      set  {\n         Dictionary[key] = value;\n      }\n   }\n\n   public ICollection Keys  {\n      get  {\n         return( Dictionary.Keys );\n      }\n   }\n\n   public ICollection Values  {\n      get  {\n         return( Dictionary.Values );\n      }\n   }\n\n   public void Add( String key, String value )  {\n      Dictionary.Add( key, value );\n   }\n\n   public bool Contains( String key )  {\n      return( Dictionary.Contains( key ) );\n   }\n\n   public void Remove( String key )  {\n      Dictionary.Remove( key );\n   }\n\n   protected override void OnInsert( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n   protected override void OnRemove( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n   }\n\n   protected override void OnSet( Object key, Object oldValue, Object newValue )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( newValue.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;newValue must be of type String.&quot;, &quot;newValue&quot; );\n      else  {\n         String strValue = (String) newValue;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot; );\n      }\n   }\n\n   protected override void OnValidate( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n}\n\n\npublic class SamplesDictionaryBase  {\n\n   public static void Main()  {\n \n      // Creates and initializes a new DictionaryBase.\n      ShortStringDictionary mySSC = new ShortStringDictionary();\n\n      // Adds elements to the collection.\n      mySSC.Add( &quot;One&quot;, &quot;a&quot; );\n      mySSC.Add( &quot;Two&quot;, &quot;ab&quot; );\n      mySSC.Add( &quot;Three&quot;, &quot;abc&quot; );\n      mySSC.Add( &quot;Four&quot;, &quot;abcd&quot; );\n      mySSC.Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintKeysAndValues1( mySSC );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintKeysAndValues2( mySSC );\n\n      // Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n      PrintKeysAndValues3( mySSC );\n\n      // Tries to add a value that is too long.\n      try  {\n         mySSC.Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Tries to add a key that is too long.\n      try  {\n         mySSC.Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      Console.WriteLine();\n\n      // Searches the collection with Contains.\n      Console.WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC.Contains( &quot;Three&quot; ) );\n      Console.WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC.Contains( &quot;Twelve&quot; ) );\n      Console.WriteLine();\n\n      // Removes an element from the collection.\n      mySSC.Remove( &quot;Two&quot; );\n\n      // Displays the contents of the collection.\n      Console.WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n      PrintKeysAndValues1( mySSC );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( ShortStringDictionary myCol )  {\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( ShortStringDictionary myCol )  {\n      DictionaryEntry myDE;\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         if ( myEnumerator.Current != null )  {\n            myDE = (DictionaryEntry) myEnumerator.Current;\n            Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n         }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys property and the Item property.\n   public static void PrintKeysAndValues3( ShortStringDictionary myCol )  {\n      ICollection myKeys = myCol.Keys;\n      foreach ( String k in myKeys )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol[k] );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#1\">Imports System\nImports System.Collections\n\nPublic Class ShortStringDictionary\n   Inherits DictionaryBase\n\n   Default Public Property Item(key As String) As String\n      Get\n         Return CType(Dictionary(key), String)\n      End Get\n      Set\n         Dictionary(key) = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Keys() As ICollection\n      Get\n         Return Dictionary.Keys\n      End Get\n   End Property\n\n   Public ReadOnly Property Values() As ICollection\n      Get\n         Return Dictionary.Values\n      End Get\n   End Property\n\n   Public Sub Add(key As String, value As String)\n      Dictionary.Add(key, value)\n   End Sub &#39;Add\n\n   Public Function Contains(key As String) As Boolean\n      Return Dictionary.Contains(key)\n   End Function &#39;Contains\n\n   Public Sub Remove(key As String)\n      Dictionary.Remove(key)\n   End Sub &#39;Remove\n\n   Protected Overrides Sub OnInsert(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnInsert\n\n   Protected Overrides Sub OnRemove(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If\n   End Sub &#39;OnRemove\n\n   Protected Overrides Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(newValue.GetType()) Then\n         Throw New ArgumentException(&quot;newValue must be of type String.&quot;, &quot;newValue&quot;)\n      Else\n         Dim strValue As String = CType(newValue, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot;)\n         End If\n      End If\n   End Sub &#39;OnSet\n\n   Protected Overrides Sub OnValidate(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;ShortStringDictionary\n\n\nPublic Class SamplesDictionaryBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new DictionaryBase.\n      Dim mySSC As New ShortStringDictionary()\n\n      &#39; Adds elements to the collection.\n      mySSC.Add(&quot;One&quot;, &quot;a&quot;)\n      mySSC.Add(&quot;Two&quot;, &quot;ab&quot;)\n      mySSC.Add(&quot;Three&quot;, &quot;abc&quot;)\n      mySSC.Add(&quot;Four&quot;, &quot;abcd&quot;)\n      mySSC.Add(&quot;Five&quot;, &quot;abcde&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintKeysAndValues1(mySSC)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintKeysAndValues2(mySSC)\n\n      &#39; Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Keys and Item):&quot;)\n      PrintKeysAndValues3(mySSC)\n\n      &#39; Tries to add a value that is too long.\n      Try\n          mySSC.Add(&quot;Ten&quot;, &quot;abcdefghij&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Tries to add a key that is too long.\n      Try\n          mySSC.Add(&quot;Eleven&quot;, &quot;ijk&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      Console.WriteLine()\n\n      &#39; Searches the collection with Contains.\n      Console.WriteLine(&quot;Contains &quot;&quot;Three&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Three&quot;))\n      Console.WriteLine(&quot;Contains &quot;&quot;Twelve&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Twelve&quot;))\n      Console.WriteLine()\n\n      &#39; Removes an element from the collection.\n      mySSC.Remove(&quot;Two&quot;)\n\n      &#39; Displays the contents of the collection.\n      Console.WriteLine(&quot;After removing &quot;&quot;Two&quot;&quot;:&quot;)\n      PrintKeysAndValues1(mySSC)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues1(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues2(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          If Not (myEnumerator.Current Is Nothing) Then\n            myDE = CType(myEnumerator.Current, DictionaryEntry)\n            Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n          End If\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues2\n\n\n    &#39; Uses the Keys property and the Item property.\n    Public Shared Sub PrintKeysAndValues3(myCol As ShortStringDictionary)\n      Dim myKeys As ICollection = myCol.Keys\n      Dim k As String\n      For Each k In  myKeys\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, k, myCol(k))\n      Next k\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesDictionaryBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Initial contents of the collection (using Keys and Item):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;System.ArgumentException: value must be no more than 5 characters in length.\n&#39;Parameter name: value\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;System.ArgumentException: key must be no more than 5 characters in length.\n&#39;Parameter name: key\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;\n&#39;Contains &quot;Three&quot;: True\n&#39;Contains &quot;Twelve&quot;: False\n&#39;\n&#39;After removing &quot;Two&quot;:\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   One   : a\n&#39;   Four  : abcd\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_OnRemoveComplete_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_OnRemoveComplete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnRemoveComplete(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes after removing an element from the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnRemoveComplete (object key, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to remove.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Dictionary_\" data-linktype=\"relative-path\">Dictionary</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_InnerHashtable_\" data-linktype=\"relative-path\">InnerHashtable</a> property.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_OnSet_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_OnSet_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnSet(Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes before setting a value in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnSet (object key, object oldValue, object newValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to locate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The old value of the element associated with <code>key</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value of the element associated with <code>key</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Dictionary_\" data-linktype=\"relative-path\">Dictionary</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_InnerHashtable_\" data-linktype=\"relative-path\">InnerHashtable</a> property.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class and uses that implementation to create a dictionary of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and values that have a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> of 5 characters or less.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ShortStringDictionary: public DictionaryBase\n{\npublic:\n\n   property String^ Item [String^]\n   {\n      String^ get( String^ key )\n      {\n         return (dynamic_cast&lt;String^&gt;(Dictionary[ key ]));\n      }\n\n      void set( String^ value, String^ key )\n      {\n         Dictionary[ key ] = value;\n      }\n   }\n\n   property ICollection^ Keys \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Keys);\n      }\n   }\n\n   property ICollection^ Values \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Values);\n      }\n   }\n   void Add( String^ key, String^ value )\n   {\n      Dictionary-&gt;Add( key, value );\n   }\n\n   bool Contains( String^ key )\n   {\n      return (Dictionary-&gt;Contains( key ));\n   }\n\n   void Remove( String^ key )\n   {\n      Dictionary-&gt;Remove( key );\n   }\n\n\nprotected:\n   virtual void OnInsert( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n   virtual void OnRemove( Object^ key, Object^ /*value*/ ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n   }\n\n   virtual void OnSet( Object^ key, Object^ /*oldValue*/, Object^ newValue ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( newValue-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;newValue must be of type String.&quot;,&quot;newValue&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(newValue);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;,&quot;newValue&quot; );\n      }\n   }\n\n   virtual void OnValidate( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n};\n\nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol );\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol );\nint main()\n{\n   // Creates and initializes a new DictionaryBase.\n   ShortStringDictionary^ mySSC = gcnew ShortStringDictionary;\n\n   // Adds elements to the collection.\n   mySSC-&gt;Add( &quot;One&quot;, &quot;a&quot; );\n   mySSC-&gt;Add( &quot;Two&quot;, &quot;ab&quot; );\n   mySSC-&gt;Add( &quot;Three&quot;, &quot;abc&quot; );\n   mySSC-&gt;Add( &quot;Four&quot;, &quot;abcd&quot; );\n   mySSC-&gt;Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintKeysAndValues2( mySSC );\n\n   // Display the contents of the collection using the Keys property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n   PrintKeysAndValues3( mySSC );\n\n   // Tries to add a value that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   // Tries to add a key that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n\n   // Searches the collection with Contains.\n   Console::WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Three&quot; ) );\n   Console::WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Twelve&quot; ) );\n   Console::WriteLine();\n\n   // Removes an element from the collection.\n   mySSC-&gt;Remove( &quot;Two&quot; );\n\n   // Displays the contents of the collection.\n   Console::WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n   PrintKeysAndValues2( mySSC );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol )\n{\n   DictionaryEntry myDE;\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      if ( myEnumerator-&gt;Current != nullptr )\n   {\n      myDE =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n   }\n\n   Console::WriteLine();\n}\n\n\n// Uses the Keys property and the Item property.\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol )\n{\n   ICollection^ myKeys = myCol-&gt;Keys;\n   IEnumerator^ myEnum1 = myKeys-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ k = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol-&gt;Item[ k ] );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#1\">using System;\nusing System.Collections;\n\npublic class ShortStringDictionary : DictionaryBase  {\n\n   public String this[ String key ]  {\n      get  {\n         return( (String) Dictionary[key] );\n      }\n      set  {\n         Dictionary[key] = value;\n      }\n   }\n\n   public ICollection Keys  {\n      get  {\n         return( Dictionary.Keys );\n      }\n   }\n\n   public ICollection Values  {\n      get  {\n         return( Dictionary.Values );\n      }\n   }\n\n   public void Add( String key, String value )  {\n      Dictionary.Add( key, value );\n   }\n\n   public bool Contains( String key )  {\n      return( Dictionary.Contains( key ) );\n   }\n\n   public void Remove( String key )  {\n      Dictionary.Remove( key );\n   }\n\n   protected override void OnInsert( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n   protected override void OnRemove( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n   }\n\n   protected override void OnSet( Object key, Object oldValue, Object newValue )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( newValue.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;newValue must be of type String.&quot;, &quot;newValue&quot; );\n      else  {\n         String strValue = (String) newValue;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot; );\n      }\n   }\n\n   protected override void OnValidate( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n}\n\n\npublic class SamplesDictionaryBase  {\n\n   public static void Main()  {\n \n      // Creates and initializes a new DictionaryBase.\n      ShortStringDictionary mySSC = new ShortStringDictionary();\n\n      // Adds elements to the collection.\n      mySSC.Add( &quot;One&quot;, &quot;a&quot; );\n      mySSC.Add( &quot;Two&quot;, &quot;ab&quot; );\n      mySSC.Add( &quot;Three&quot;, &quot;abc&quot; );\n      mySSC.Add( &quot;Four&quot;, &quot;abcd&quot; );\n      mySSC.Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintKeysAndValues1( mySSC );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintKeysAndValues2( mySSC );\n\n      // Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n      PrintKeysAndValues3( mySSC );\n\n      // Tries to add a value that is too long.\n      try  {\n         mySSC.Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Tries to add a key that is too long.\n      try  {\n         mySSC.Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      Console.WriteLine();\n\n      // Searches the collection with Contains.\n      Console.WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC.Contains( &quot;Three&quot; ) );\n      Console.WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC.Contains( &quot;Twelve&quot; ) );\n      Console.WriteLine();\n\n      // Removes an element from the collection.\n      mySSC.Remove( &quot;Two&quot; );\n\n      // Displays the contents of the collection.\n      Console.WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n      PrintKeysAndValues1( mySSC );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( ShortStringDictionary myCol )  {\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( ShortStringDictionary myCol )  {\n      DictionaryEntry myDE;\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         if ( myEnumerator.Current != null )  {\n            myDE = (DictionaryEntry) myEnumerator.Current;\n            Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n         }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys property and the Item property.\n   public static void PrintKeysAndValues3( ShortStringDictionary myCol )  {\n      ICollection myKeys = myCol.Keys;\n      foreach ( String k in myKeys )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol[k] );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#1\">Imports System\nImports System.Collections\n\nPublic Class ShortStringDictionary\n   Inherits DictionaryBase\n\n   Default Public Property Item(key As String) As String\n      Get\n         Return CType(Dictionary(key), String)\n      End Get\n      Set\n         Dictionary(key) = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Keys() As ICollection\n      Get\n         Return Dictionary.Keys\n      End Get\n   End Property\n\n   Public ReadOnly Property Values() As ICollection\n      Get\n         Return Dictionary.Values\n      End Get\n   End Property\n\n   Public Sub Add(key As String, value As String)\n      Dictionary.Add(key, value)\n   End Sub &#39;Add\n\n   Public Function Contains(key As String) As Boolean\n      Return Dictionary.Contains(key)\n   End Function &#39;Contains\n\n   Public Sub Remove(key As String)\n      Dictionary.Remove(key)\n   End Sub &#39;Remove\n\n   Protected Overrides Sub OnInsert(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnInsert\n\n   Protected Overrides Sub OnRemove(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If\n   End Sub &#39;OnRemove\n\n   Protected Overrides Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(newValue.GetType()) Then\n         Throw New ArgumentException(&quot;newValue must be of type String.&quot;, &quot;newValue&quot;)\n      Else\n         Dim strValue As String = CType(newValue, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot;)\n         End If\n      End If\n   End Sub &#39;OnSet\n\n   Protected Overrides Sub OnValidate(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;ShortStringDictionary\n\n\nPublic Class SamplesDictionaryBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new DictionaryBase.\n      Dim mySSC As New ShortStringDictionary()\n\n      &#39; Adds elements to the collection.\n      mySSC.Add(&quot;One&quot;, &quot;a&quot;)\n      mySSC.Add(&quot;Two&quot;, &quot;ab&quot;)\n      mySSC.Add(&quot;Three&quot;, &quot;abc&quot;)\n      mySSC.Add(&quot;Four&quot;, &quot;abcd&quot;)\n      mySSC.Add(&quot;Five&quot;, &quot;abcde&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintKeysAndValues1(mySSC)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintKeysAndValues2(mySSC)\n\n      &#39; Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Keys and Item):&quot;)\n      PrintKeysAndValues3(mySSC)\n\n      &#39; Tries to add a value that is too long.\n      Try\n          mySSC.Add(&quot;Ten&quot;, &quot;abcdefghij&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Tries to add a key that is too long.\n      Try\n          mySSC.Add(&quot;Eleven&quot;, &quot;ijk&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      Console.WriteLine()\n\n      &#39; Searches the collection with Contains.\n      Console.WriteLine(&quot;Contains &quot;&quot;Three&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Three&quot;))\n      Console.WriteLine(&quot;Contains &quot;&quot;Twelve&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Twelve&quot;))\n      Console.WriteLine()\n\n      &#39; Removes an element from the collection.\n      mySSC.Remove(&quot;Two&quot;)\n\n      &#39; Displays the contents of the collection.\n      Console.WriteLine(&quot;After removing &quot;&quot;Two&quot;&quot;:&quot;)\n      PrintKeysAndValues1(mySSC)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues1(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues2(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          If Not (myEnumerator.Current Is Nothing) Then\n            myDE = CType(myEnumerator.Current, DictionaryEntry)\n            Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n          End If\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues2\n\n\n    &#39; Uses the Keys property and the Item property.\n    Public Shared Sub PrintKeysAndValues3(myCol As ShortStringDictionary)\n      Dim myKeys As ICollection = myCol.Keys\n      Dim k As String\n      For Each k In  myKeys\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, k, myCol(k))\n      Next k\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesDictionaryBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Initial contents of the collection (using Keys and Item):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;System.ArgumentException: value must be no more than 5 characters in length.\n&#39;Parameter name: value\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;System.ArgumentException: key must be no more than 5 characters in length.\n&#39;Parameter name: key\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;\n&#39;Contains &quot;Three&quot;: True\n&#39;Contains &quot;Twelve&quot;: False\n&#39;\n&#39;After removing &quot;Two&quot;:\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   One   : a\n&#39;   Four  : abcd\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_OnSetComplete_System_Object_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_OnSetComplete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnSetComplete(Object,Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes after setting a value in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnSetComplete (object key, object oldValue, object newValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to locate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>oldValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The old value of the element associated with <code>key</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>newValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value of the element associated with <code>key</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Dictionary_\" data-linktype=\"relative-path\">Dictionary</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_InnerHashtable_\" data-linktype=\"relative-path\">InnerHashtable</a> property.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_OnValidate_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_OnValidate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnValidate(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Performs additional custom processes when validating the element with the specified key and value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void OnValidate (object key, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to validate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the element to validate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default implementation of this method is intended to be overridden by a derived class to perform some action when the specified element is validated.  </p>\n<p> The On* methods are invoked only on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_Dictionary_\" data-linktype=\"relative-path\">Dictionary</a> property, but not on the instance returned by the <a class=\"xref\" href=\"system.collections.dictionarybase#System_Collections_DictionaryBase_InnerHashtable_\" data-linktype=\"relative-path\">InnerHashtable</a> property.  </p>\n<p> The default implementation of this method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class and uses that implementation to create a dictionary of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and values that have a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> of 5 characters or less.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ShortStringDictionary: public DictionaryBase\n{\npublic:\n\n   property String^ Item [String^]\n   {\n      String^ get( String^ key )\n      {\n         return (dynamic_cast&lt;String^&gt;(Dictionary[ key ]));\n      }\n\n      void set( String^ value, String^ key )\n      {\n         Dictionary[ key ] = value;\n      }\n   }\n\n   property ICollection^ Keys \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Keys);\n      }\n   }\n\n   property ICollection^ Values \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Values);\n      }\n   }\n   void Add( String^ key, String^ value )\n   {\n      Dictionary-&gt;Add( key, value );\n   }\n\n   bool Contains( String^ key )\n   {\n      return (Dictionary-&gt;Contains( key ));\n   }\n\n   void Remove( String^ key )\n   {\n      Dictionary-&gt;Remove( key );\n   }\n\n\nprotected:\n   virtual void OnInsert( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n   virtual void OnRemove( Object^ key, Object^ /*value*/ ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n   }\n\n   virtual void OnSet( Object^ key, Object^ /*oldValue*/, Object^ newValue ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( newValue-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;newValue must be of type String.&quot;,&quot;newValue&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(newValue);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;,&quot;newValue&quot; );\n      }\n   }\n\n   virtual void OnValidate( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n};\n\nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol );\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol );\nint main()\n{\n   // Creates and initializes a new DictionaryBase.\n   ShortStringDictionary^ mySSC = gcnew ShortStringDictionary;\n\n   // Adds elements to the collection.\n   mySSC-&gt;Add( &quot;One&quot;, &quot;a&quot; );\n   mySSC-&gt;Add( &quot;Two&quot;, &quot;ab&quot; );\n   mySSC-&gt;Add( &quot;Three&quot;, &quot;abc&quot; );\n   mySSC-&gt;Add( &quot;Four&quot;, &quot;abcd&quot; );\n   mySSC-&gt;Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintKeysAndValues2( mySSC );\n\n   // Display the contents of the collection using the Keys property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n   PrintKeysAndValues3( mySSC );\n\n   // Tries to add a value that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   // Tries to add a key that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n\n   // Searches the collection with Contains.\n   Console::WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Three&quot; ) );\n   Console::WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Twelve&quot; ) );\n   Console::WriteLine();\n\n   // Removes an element from the collection.\n   mySSC-&gt;Remove( &quot;Two&quot; );\n\n   // Displays the contents of the collection.\n   Console::WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n   PrintKeysAndValues2( mySSC );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol )\n{\n   DictionaryEntry myDE;\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      if ( myEnumerator-&gt;Current != nullptr )\n   {\n      myDE =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n   }\n\n   Console::WriteLine();\n}\n\n\n// Uses the Keys property and the Item property.\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol )\n{\n   ICollection^ myKeys = myCol-&gt;Keys;\n   IEnumerator^ myEnum1 = myKeys-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ k = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol-&gt;Item[ k ] );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#1\">using System;\nusing System.Collections;\n\npublic class ShortStringDictionary : DictionaryBase  {\n\n   public String this[ String key ]  {\n      get  {\n         return( (String) Dictionary[key] );\n      }\n      set  {\n         Dictionary[key] = value;\n      }\n   }\n\n   public ICollection Keys  {\n      get  {\n         return( Dictionary.Keys );\n      }\n   }\n\n   public ICollection Values  {\n      get  {\n         return( Dictionary.Values );\n      }\n   }\n\n   public void Add( String key, String value )  {\n      Dictionary.Add( key, value );\n   }\n\n   public bool Contains( String key )  {\n      return( Dictionary.Contains( key ) );\n   }\n\n   public void Remove( String key )  {\n      Dictionary.Remove( key );\n   }\n\n   protected override void OnInsert( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n   protected override void OnRemove( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n   }\n\n   protected override void OnSet( Object key, Object oldValue, Object newValue )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( newValue.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;newValue must be of type String.&quot;, &quot;newValue&quot; );\n      else  {\n         String strValue = (String) newValue;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot; );\n      }\n   }\n\n   protected override void OnValidate( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n}\n\n\npublic class SamplesDictionaryBase  {\n\n   public static void Main()  {\n \n      // Creates and initializes a new DictionaryBase.\n      ShortStringDictionary mySSC = new ShortStringDictionary();\n\n      // Adds elements to the collection.\n      mySSC.Add( &quot;One&quot;, &quot;a&quot; );\n      mySSC.Add( &quot;Two&quot;, &quot;ab&quot; );\n      mySSC.Add( &quot;Three&quot;, &quot;abc&quot; );\n      mySSC.Add( &quot;Four&quot;, &quot;abcd&quot; );\n      mySSC.Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintKeysAndValues1( mySSC );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintKeysAndValues2( mySSC );\n\n      // Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n      PrintKeysAndValues3( mySSC );\n\n      // Tries to add a value that is too long.\n      try  {\n         mySSC.Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Tries to add a key that is too long.\n      try  {\n         mySSC.Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      Console.WriteLine();\n\n      // Searches the collection with Contains.\n      Console.WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC.Contains( &quot;Three&quot; ) );\n      Console.WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC.Contains( &quot;Twelve&quot; ) );\n      Console.WriteLine();\n\n      // Removes an element from the collection.\n      mySSC.Remove( &quot;Two&quot; );\n\n      // Displays the contents of the collection.\n      Console.WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n      PrintKeysAndValues1( mySSC );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( ShortStringDictionary myCol )  {\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( ShortStringDictionary myCol )  {\n      DictionaryEntry myDE;\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         if ( myEnumerator.Current != null )  {\n            myDE = (DictionaryEntry) myEnumerator.Current;\n            Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n         }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys property and the Item property.\n   public static void PrintKeysAndValues3( ShortStringDictionary myCol )  {\n      ICollection myKeys = myCol.Keys;\n      foreach ( String k in myKeys )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol[k] );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#1\">Imports System\nImports System.Collections\n\nPublic Class ShortStringDictionary\n   Inherits DictionaryBase\n\n   Default Public Property Item(key As String) As String\n      Get\n         Return CType(Dictionary(key), String)\n      End Get\n      Set\n         Dictionary(key) = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Keys() As ICollection\n      Get\n         Return Dictionary.Keys\n      End Get\n   End Property\n\n   Public ReadOnly Property Values() As ICollection\n      Get\n         Return Dictionary.Values\n      End Get\n   End Property\n\n   Public Sub Add(key As String, value As String)\n      Dictionary.Add(key, value)\n   End Sub &#39;Add\n\n   Public Function Contains(key As String) As Boolean\n      Return Dictionary.Contains(key)\n   End Function &#39;Contains\n\n   Public Sub Remove(key As String)\n      Dictionary.Remove(key)\n   End Sub &#39;Remove\n\n   Protected Overrides Sub OnInsert(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnInsert\n\n   Protected Overrides Sub OnRemove(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If\n   End Sub &#39;OnRemove\n\n   Protected Overrides Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(newValue.GetType()) Then\n         Throw New ArgumentException(&quot;newValue must be of type String.&quot;, &quot;newValue&quot;)\n      Else\n         Dim strValue As String = CType(newValue, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot;)\n         End If\n      End If\n   End Sub &#39;OnSet\n\n   Protected Overrides Sub OnValidate(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;ShortStringDictionary\n\n\nPublic Class SamplesDictionaryBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new DictionaryBase.\n      Dim mySSC As New ShortStringDictionary()\n\n      &#39; Adds elements to the collection.\n      mySSC.Add(&quot;One&quot;, &quot;a&quot;)\n      mySSC.Add(&quot;Two&quot;, &quot;ab&quot;)\n      mySSC.Add(&quot;Three&quot;, &quot;abc&quot;)\n      mySSC.Add(&quot;Four&quot;, &quot;abcd&quot;)\n      mySSC.Add(&quot;Five&quot;, &quot;abcde&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintKeysAndValues1(mySSC)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintKeysAndValues2(mySSC)\n\n      &#39; Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Keys and Item):&quot;)\n      PrintKeysAndValues3(mySSC)\n\n      &#39; Tries to add a value that is too long.\n      Try\n          mySSC.Add(&quot;Ten&quot;, &quot;abcdefghij&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Tries to add a key that is too long.\n      Try\n          mySSC.Add(&quot;Eleven&quot;, &quot;ijk&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      Console.WriteLine()\n\n      &#39; Searches the collection with Contains.\n      Console.WriteLine(&quot;Contains &quot;&quot;Three&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Three&quot;))\n      Console.WriteLine(&quot;Contains &quot;&quot;Twelve&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Twelve&quot;))\n      Console.WriteLine()\n\n      &#39; Removes an element from the collection.\n      mySSC.Remove(&quot;Two&quot;)\n\n      &#39; Displays the contents of the collection.\n      Console.WriteLine(&quot;After removing &quot;&quot;Two&quot;&quot;:&quot;)\n      PrintKeysAndValues1(mySSC)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues1(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues2(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          If Not (myEnumerator.Current Is Nothing) Then\n            myDE = CType(myEnumerator.Current, DictionaryEntry)\n            Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n          End If\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues2\n\n\n    &#39; Uses the Keys property and the Item property.\n    Public Shared Sub PrintKeysAndValues3(myCol As ShortStringDictionary)\n      Dim myKeys As ICollection = myCol.Keys\n      Dim k As String\n      For Each k In  myKeys\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, k, myCol(k))\n      Next k\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesDictionaryBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Initial contents of the collection (using Keys and Item):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;System.ArgumentException: value must be no more than 5 characters in length.\n&#39;Parameter name: value\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;System.ArgumentException: key must be no more than 5 characters in length.\n&#39;Parameter name: key\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;\n&#39;Contains &quot;Three&quot;: True\n&#39;Contains &quot;Twelve&quot;: False\n&#39;\n&#39;After removing &quot;Two&quot;:\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   One   : a\n&#39;   Four  : abcd\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_System_Collections_ICollection_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_System_Collections_ICollection_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to a <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.ICollection.IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object is synchronized (thread safe); otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object is not synchronized. Derived classes can provide a synchronized version of the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property during the entire enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#3\">        ICollection myCollection = new ShortStringDictionary();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (Object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#3\">        ICollection^ myCollection = gcnew ShortStringDictionary();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#3\">        Dim myCollection As ICollection = New ShortStringDictionary()\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_System_Collections_ICollection_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_System_Collections_ICollection_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to a <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.ICollection.SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Derived classes can provide their own synchronized version of the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property. The synchronizing code must perform operations on the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property of the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object, not directly on the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property during the entire enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#3\">        ICollection myCollection = new ShortStringDictionary();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (Object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#3\">        ICollection^ myCollection = gcnew ShortStringDictionary();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#3\">        Dim myCollection As ICollection = New ShortStringDictionary()\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_Add_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.Add(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an element with the specified key and value into the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDictionary.Add (object key, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the element to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element with the same key already exists in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> objects are better than <a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> objects for use as keys.  </p>\n<p> You can also use the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Item_\" data-linktype=\"relative-path\">Item</a> property to add new elements by setting the value of a key that does not exist in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>; for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>. However, if the specified key already exists in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>, setting the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Item_\" data-linktype=\"relative-path\">Item</a> property overwrites the old value. In contrast, the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Add_\" data-linktype=\"relative-path\">Add</a> method does not modify existing elements.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class and uses that implementation to create a dictionary of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and values that have a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> of 5 characters or less.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ShortStringDictionary: public DictionaryBase\n{\npublic:\n\n   property String^ Item [String^]\n   {\n      String^ get( String^ key )\n      {\n         return (dynamic_cast&lt;String^&gt;(Dictionary[ key ]));\n      }\n\n      void set( String^ value, String^ key )\n      {\n         Dictionary[ key ] = value;\n      }\n   }\n\n   property ICollection^ Keys \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Keys);\n      }\n   }\n\n   property ICollection^ Values \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Values);\n      }\n   }\n   void Add( String^ key, String^ value )\n   {\n      Dictionary-&gt;Add( key, value );\n   }\n\n   bool Contains( String^ key )\n   {\n      return (Dictionary-&gt;Contains( key ));\n   }\n\n   void Remove( String^ key )\n   {\n      Dictionary-&gt;Remove( key );\n   }\n\n\nprotected:\n   virtual void OnInsert( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n   virtual void OnRemove( Object^ key, Object^ /*value*/ ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n   }\n\n   virtual void OnSet( Object^ key, Object^ /*oldValue*/, Object^ newValue ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( newValue-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;newValue must be of type String.&quot;,&quot;newValue&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(newValue);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;,&quot;newValue&quot; );\n      }\n   }\n\n   virtual void OnValidate( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n};\n\nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol );\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol );\nint main()\n{\n   // Creates and initializes a new DictionaryBase.\n   ShortStringDictionary^ mySSC = gcnew ShortStringDictionary;\n\n   // Adds elements to the collection.\n   mySSC-&gt;Add( &quot;One&quot;, &quot;a&quot; );\n   mySSC-&gt;Add( &quot;Two&quot;, &quot;ab&quot; );\n   mySSC-&gt;Add( &quot;Three&quot;, &quot;abc&quot; );\n   mySSC-&gt;Add( &quot;Four&quot;, &quot;abcd&quot; );\n   mySSC-&gt;Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintKeysAndValues2( mySSC );\n\n   // Display the contents of the collection using the Keys property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n   PrintKeysAndValues3( mySSC );\n\n   // Tries to add a value that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   // Tries to add a key that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n\n   // Searches the collection with Contains.\n   Console::WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Three&quot; ) );\n   Console::WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Twelve&quot; ) );\n   Console::WriteLine();\n\n   // Removes an element from the collection.\n   mySSC-&gt;Remove( &quot;Two&quot; );\n\n   // Displays the contents of the collection.\n   Console::WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n   PrintKeysAndValues2( mySSC );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol )\n{\n   DictionaryEntry myDE;\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      if ( myEnumerator-&gt;Current != nullptr )\n   {\n      myDE =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n   }\n\n   Console::WriteLine();\n}\n\n\n// Uses the Keys property and the Item property.\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol )\n{\n   ICollection^ myKeys = myCol-&gt;Keys;\n   IEnumerator^ myEnum1 = myKeys-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ k = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol-&gt;Item[ k ] );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#1\">using System;\nusing System.Collections;\n\npublic class ShortStringDictionary : DictionaryBase  {\n\n   public String this[ String key ]  {\n      get  {\n         return( (String) Dictionary[key] );\n      }\n      set  {\n         Dictionary[key] = value;\n      }\n   }\n\n   public ICollection Keys  {\n      get  {\n         return( Dictionary.Keys );\n      }\n   }\n\n   public ICollection Values  {\n      get  {\n         return( Dictionary.Values );\n      }\n   }\n\n   public void Add( String key, String value )  {\n      Dictionary.Add( key, value );\n   }\n\n   public bool Contains( String key )  {\n      return( Dictionary.Contains( key ) );\n   }\n\n   public void Remove( String key )  {\n      Dictionary.Remove( key );\n   }\n\n   protected override void OnInsert( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n   protected override void OnRemove( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n   }\n\n   protected override void OnSet( Object key, Object oldValue, Object newValue )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( newValue.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;newValue must be of type String.&quot;, &quot;newValue&quot; );\n      else  {\n         String strValue = (String) newValue;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot; );\n      }\n   }\n\n   protected override void OnValidate( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n}\n\n\npublic class SamplesDictionaryBase  {\n\n   public static void Main()  {\n \n      // Creates and initializes a new DictionaryBase.\n      ShortStringDictionary mySSC = new ShortStringDictionary();\n\n      // Adds elements to the collection.\n      mySSC.Add( &quot;One&quot;, &quot;a&quot; );\n      mySSC.Add( &quot;Two&quot;, &quot;ab&quot; );\n      mySSC.Add( &quot;Three&quot;, &quot;abc&quot; );\n      mySSC.Add( &quot;Four&quot;, &quot;abcd&quot; );\n      mySSC.Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintKeysAndValues1( mySSC );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintKeysAndValues2( mySSC );\n\n      // Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n      PrintKeysAndValues3( mySSC );\n\n      // Tries to add a value that is too long.\n      try  {\n         mySSC.Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Tries to add a key that is too long.\n      try  {\n         mySSC.Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      Console.WriteLine();\n\n      // Searches the collection with Contains.\n      Console.WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC.Contains( &quot;Three&quot; ) );\n      Console.WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC.Contains( &quot;Twelve&quot; ) );\n      Console.WriteLine();\n\n      // Removes an element from the collection.\n      mySSC.Remove( &quot;Two&quot; );\n\n      // Displays the contents of the collection.\n      Console.WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n      PrintKeysAndValues1( mySSC );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( ShortStringDictionary myCol )  {\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( ShortStringDictionary myCol )  {\n      DictionaryEntry myDE;\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         if ( myEnumerator.Current != null )  {\n            myDE = (DictionaryEntry) myEnumerator.Current;\n            Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n         }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys property and the Item property.\n   public static void PrintKeysAndValues3( ShortStringDictionary myCol )  {\n      ICollection myKeys = myCol.Keys;\n      foreach ( String k in myKeys )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol[k] );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#1\">Imports System\nImports System.Collections\n\nPublic Class ShortStringDictionary\n   Inherits DictionaryBase\n\n   Default Public Property Item(key As String) As String\n      Get\n         Return CType(Dictionary(key), String)\n      End Get\n      Set\n         Dictionary(key) = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Keys() As ICollection\n      Get\n         Return Dictionary.Keys\n      End Get\n   End Property\n\n   Public ReadOnly Property Values() As ICollection\n      Get\n         Return Dictionary.Values\n      End Get\n   End Property\n\n   Public Sub Add(key As String, value As String)\n      Dictionary.Add(key, value)\n   End Sub &#39;Add\n\n   Public Function Contains(key As String) As Boolean\n      Return Dictionary.Contains(key)\n   End Function &#39;Contains\n\n   Public Sub Remove(key As String)\n      Dictionary.Remove(key)\n   End Sub &#39;Remove\n\n   Protected Overrides Sub OnInsert(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnInsert\n\n   Protected Overrides Sub OnRemove(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If\n   End Sub &#39;OnRemove\n\n   Protected Overrides Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(newValue.GetType()) Then\n         Throw New ArgumentException(&quot;newValue must be of type String.&quot;, &quot;newValue&quot;)\n      Else\n         Dim strValue As String = CType(newValue, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot;)\n         End If\n      End If\n   End Sub &#39;OnSet\n\n   Protected Overrides Sub OnValidate(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;ShortStringDictionary\n\n\nPublic Class SamplesDictionaryBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new DictionaryBase.\n      Dim mySSC As New ShortStringDictionary()\n\n      &#39; Adds elements to the collection.\n      mySSC.Add(&quot;One&quot;, &quot;a&quot;)\n      mySSC.Add(&quot;Two&quot;, &quot;ab&quot;)\n      mySSC.Add(&quot;Three&quot;, &quot;abc&quot;)\n      mySSC.Add(&quot;Four&quot;, &quot;abcd&quot;)\n      mySSC.Add(&quot;Five&quot;, &quot;abcde&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintKeysAndValues1(mySSC)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintKeysAndValues2(mySSC)\n\n      &#39; Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Keys and Item):&quot;)\n      PrintKeysAndValues3(mySSC)\n\n      &#39; Tries to add a value that is too long.\n      Try\n          mySSC.Add(&quot;Ten&quot;, &quot;abcdefghij&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Tries to add a key that is too long.\n      Try\n          mySSC.Add(&quot;Eleven&quot;, &quot;ijk&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      Console.WriteLine()\n\n      &#39; Searches the collection with Contains.\n      Console.WriteLine(&quot;Contains &quot;&quot;Three&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Three&quot;))\n      Console.WriteLine(&quot;Contains &quot;&quot;Twelve&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Twelve&quot;))\n      Console.WriteLine()\n\n      &#39; Removes an element from the collection.\n      mySSC.Remove(&quot;Two&quot;)\n\n      &#39; Displays the contents of the collection.\n      Console.WriteLine(&quot;After removing &quot;&quot;Two&quot;&quot;:&quot;)\n      PrintKeysAndValues1(mySSC)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues1(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues2(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          If Not (myEnumerator.Current Is Nothing) Then\n            myDE = CType(myEnumerator.Current, DictionaryEntry)\n            Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n          End If\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues2\n\n\n    &#39; Uses the Keys property and the Item property.\n    Public Shared Sub PrintKeysAndValues3(myCol As ShortStringDictionary)\n      Dim myKeys As ICollection = myCol.Keys\n      Dim k As String\n      For Each k In  myKeys\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, k, myCol(k))\n      Next k\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesDictionaryBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Initial contents of the collection (using Keys and Item):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;System.ArgumentException: value must be no more than 5 characters in length.\n&#39;Parameter name: value\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;System.ArgumentException: key must be no more than 5 characters in length.\n&#39;Parameter name: key\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;\n&#39;Contains &quot;Three&quot;: True\n&#39;Contains &quot;Twelve&quot;: False\n&#39;\n&#39;After removing &quot;Two&quot;:\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   One   : a\n&#39;   Four  : abcd\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> contains a specific key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IDictionary.Contains (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to locate in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> contains an element with the specified key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(1) operation.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>key</code> to determine whether <code>item</code> exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>key</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class and uses that implementation to create a dictionary of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and values that have a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> of 5 characters or less.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ShortStringDictionary: public DictionaryBase\n{\npublic:\n\n   property String^ Item [String^]\n   {\n      String^ get( String^ key )\n      {\n         return (dynamic_cast&lt;String^&gt;(Dictionary[ key ]));\n      }\n\n      void set( String^ value, String^ key )\n      {\n         Dictionary[ key ] = value;\n      }\n   }\n\n   property ICollection^ Keys \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Keys);\n      }\n   }\n\n   property ICollection^ Values \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Values);\n      }\n   }\n   void Add( String^ key, String^ value )\n   {\n      Dictionary-&gt;Add( key, value );\n   }\n\n   bool Contains( String^ key )\n   {\n      return (Dictionary-&gt;Contains( key ));\n   }\n\n   void Remove( String^ key )\n   {\n      Dictionary-&gt;Remove( key );\n   }\n\n\nprotected:\n   virtual void OnInsert( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n   virtual void OnRemove( Object^ key, Object^ /*value*/ ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n   }\n\n   virtual void OnSet( Object^ key, Object^ /*oldValue*/, Object^ newValue ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( newValue-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;newValue must be of type String.&quot;,&quot;newValue&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(newValue);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;,&quot;newValue&quot; );\n      }\n   }\n\n   virtual void OnValidate( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n};\n\nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol );\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol );\nint main()\n{\n   // Creates and initializes a new DictionaryBase.\n   ShortStringDictionary^ mySSC = gcnew ShortStringDictionary;\n\n   // Adds elements to the collection.\n   mySSC-&gt;Add( &quot;One&quot;, &quot;a&quot; );\n   mySSC-&gt;Add( &quot;Two&quot;, &quot;ab&quot; );\n   mySSC-&gt;Add( &quot;Three&quot;, &quot;abc&quot; );\n   mySSC-&gt;Add( &quot;Four&quot;, &quot;abcd&quot; );\n   mySSC-&gt;Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintKeysAndValues2( mySSC );\n\n   // Display the contents of the collection using the Keys property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n   PrintKeysAndValues3( mySSC );\n\n   // Tries to add a value that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   // Tries to add a key that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n\n   // Searches the collection with Contains.\n   Console::WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Three&quot; ) );\n   Console::WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Twelve&quot; ) );\n   Console::WriteLine();\n\n   // Removes an element from the collection.\n   mySSC-&gt;Remove( &quot;Two&quot; );\n\n   // Displays the contents of the collection.\n   Console::WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n   PrintKeysAndValues2( mySSC );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol )\n{\n   DictionaryEntry myDE;\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      if ( myEnumerator-&gt;Current != nullptr )\n   {\n      myDE =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n   }\n\n   Console::WriteLine();\n}\n\n\n// Uses the Keys property and the Item property.\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol )\n{\n   ICollection^ myKeys = myCol-&gt;Keys;\n   IEnumerator^ myEnum1 = myKeys-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ k = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol-&gt;Item[ k ] );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#1\">using System;\nusing System.Collections;\n\npublic class ShortStringDictionary : DictionaryBase  {\n\n   public String this[ String key ]  {\n      get  {\n         return( (String) Dictionary[key] );\n      }\n      set  {\n         Dictionary[key] = value;\n      }\n   }\n\n   public ICollection Keys  {\n      get  {\n         return( Dictionary.Keys );\n      }\n   }\n\n   public ICollection Values  {\n      get  {\n         return( Dictionary.Values );\n      }\n   }\n\n   public void Add( String key, String value )  {\n      Dictionary.Add( key, value );\n   }\n\n   public bool Contains( String key )  {\n      return( Dictionary.Contains( key ) );\n   }\n\n   public void Remove( String key )  {\n      Dictionary.Remove( key );\n   }\n\n   protected override void OnInsert( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n   protected override void OnRemove( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n   }\n\n   protected override void OnSet( Object key, Object oldValue, Object newValue )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( newValue.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;newValue must be of type String.&quot;, &quot;newValue&quot; );\n      else  {\n         String strValue = (String) newValue;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot; );\n      }\n   }\n\n   protected override void OnValidate( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n}\n\n\npublic class SamplesDictionaryBase  {\n\n   public static void Main()  {\n \n      // Creates and initializes a new DictionaryBase.\n      ShortStringDictionary mySSC = new ShortStringDictionary();\n\n      // Adds elements to the collection.\n      mySSC.Add( &quot;One&quot;, &quot;a&quot; );\n      mySSC.Add( &quot;Two&quot;, &quot;ab&quot; );\n      mySSC.Add( &quot;Three&quot;, &quot;abc&quot; );\n      mySSC.Add( &quot;Four&quot;, &quot;abcd&quot; );\n      mySSC.Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintKeysAndValues1( mySSC );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintKeysAndValues2( mySSC );\n\n      // Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n      PrintKeysAndValues3( mySSC );\n\n      // Tries to add a value that is too long.\n      try  {\n         mySSC.Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Tries to add a key that is too long.\n      try  {\n         mySSC.Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      Console.WriteLine();\n\n      // Searches the collection with Contains.\n      Console.WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC.Contains( &quot;Three&quot; ) );\n      Console.WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC.Contains( &quot;Twelve&quot; ) );\n      Console.WriteLine();\n\n      // Removes an element from the collection.\n      mySSC.Remove( &quot;Two&quot; );\n\n      // Displays the contents of the collection.\n      Console.WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n      PrintKeysAndValues1( mySSC );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( ShortStringDictionary myCol )  {\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( ShortStringDictionary myCol )  {\n      DictionaryEntry myDE;\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         if ( myEnumerator.Current != null )  {\n            myDE = (DictionaryEntry) myEnumerator.Current;\n            Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n         }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys property and the Item property.\n   public static void PrintKeysAndValues3( ShortStringDictionary myCol )  {\n      ICollection myKeys = myCol.Keys;\n      foreach ( String k in myKeys )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol[k] );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#1\">Imports System\nImports System.Collections\n\nPublic Class ShortStringDictionary\n   Inherits DictionaryBase\n\n   Default Public Property Item(key As String) As String\n      Get\n         Return CType(Dictionary(key), String)\n      End Get\n      Set\n         Dictionary(key) = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Keys() As ICollection\n      Get\n         Return Dictionary.Keys\n      End Get\n   End Property\n\n   Public ReadOnly Property Values() As ICollection\n      Get\n         Return Dictionary.Values\n      End Get\n   End Property\n\n   Public Sub Add(key As String, value As String)\n      Dictionary.Add(key, value)\n   End Sub &#39;Add\n\n   Public Function Contains(key As String) As Boolean\n      Return Dictionary.Contains(key)\n   End Function &#39;Contains\n\n   Public Sub Remove(key As String)\n      Dictionary.Remove(key)\n   End Sub &#39;Remove\n\n   Protected Overrides Sub OnInsert(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnInsert\n\n   Protected Overrides Sub OnRemove(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If\n   End Sub &#39;OnRemove\n\n   Protected Overrides Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(newValue.GetType()) Then\n         Throw New ArgumentException(&quot;newValue must be of type String.&quot;, &quot;newValue&quot;)\n      Else\n         Dim strValue As String = CType(newValue, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot;)\n         End If\n      End If\n   End Sub &#39;OnSet\n\n   Protected Overrides Sub OnValidate(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;ShortStringDictionary\n\n\nPublic Class SamplesDictionaryBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new DictionaryBase.\n      Dim mySSC As New ShortStringDictionary()\n\n      &#39; Adds elements to the collection.\n      mySSC.Add(&quot;One&quot;, &quot;a&quot;)\n      mySSC.Add(&quot;Two&quot;, &quot;ab&quot;)\n      mySSC.Add(&quot;Three&quot;, &quot;abc&quot;)\n      mySSC.Add(&quot;Four&quot;, &quot;abcd&quot;)\n      mySSC.Add(&quot;Five&quot;, &quot;abcde&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintKeysAndValues1(mySSC)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintKeysAndValues2(mySSC)\n\n      &#39; Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Keys and Item):&quot;)\n      PrintKeysAndValues3(mySSC)\n\n      &#39; Tries to add a value that is too long.\n      Try\n          mySSC.Add(&quot;Ten&quot;, &quot;abcdefghij&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Tries to add a key that is too long.\n      Try\n          mySSC.Add(&quot;Eleven&quot;, &quot;ijk&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      Console.WriteLine()\n\n      &#39; Searches the collection with Contains.\n      Console.WriteLine(&quot;Contains &quot;&quot;Three&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Three&quot;))\n      Console.WriteLine(&quot;Contains &quot;&quot;Twelve&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Twelve&quot;))\n      Console.WriteLine()\n\n      &#39; Removes an element from the collection.\n      mySSC.Remove(&quot;Two&quot;)\n\n      &#39; Displays the contents of the collection.\n      Console.WriteLine(&quot;After removing &quot;&quot;Two&quot;&quot;:&quot;)\n      PrintKeysAndValues1(mySSC)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues1(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues2(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          If Not (myEnumerator.Current Is Nothing) Then\n            myDE = CType(myEnumerator.Current, DictionaryEntry)\n            Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n          End If\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues2\n\n\n    &#39; Uses the Keys property and the Item property.\n    Public Shared Sub PrintKeysAndValues3(myCol As ShortStringDictionary)\n      Dim myKeys As ICollection = myCol.Keys\n      Dim k As String\n      For Each k In  myKeys\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, k, myCol(k))\n      Next k\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesDictionaryBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Initial contents of the collection (using Keys and Item):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;System.ArgumentException: value must be no more than 5 characters in length.\n&#39;Parameter name: value\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;System.ArgumentException: key must be no more than 5 characters in length.\n&#39;Parameter name: key\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;\n&#39;Contains &quot;Three&quot;: True\n&#39;Contains &quot;Twelve&quot;: False\n&#39;\n&#39;After removing &quot;Two&quot;:\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   One   : a\n&#39;   Four  : abcd\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_IsFixedSize\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_IsFixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.IsFixedSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object has a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.IDictionary.IsFixedSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object has a fixed size; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.IDictionary.IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object is read-only; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_Item_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.Item(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value associated with the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.IDictionary.Item[object key] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key whose value to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value associated with the specified key. If the specified key is not found, attempting to get it returns <code>null</code>, and attempting to set it creates a new element using the specified key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The property is set and the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The property is set, <code>key</code> does not exist in the collection, and the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code>.  </p>\n<p> You can also use the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Item_\" data-linktype=\"relative-path\">Item</a> property to add new elements by setting the value of a key that does not exist in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>; for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>. However, if the specified key already exists in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>, setting the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Item_\" data-linktype=\"relative-path\">Item</a> property overwrites the old value. In contrast, the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Add_\" data-linktype=\"relative-path\">Add</a> method does not modify existing elements.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class and uses that implementation to create a dictionary of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and values that have a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> of 5 characters or less.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ShortStringDictionary: public DictionaryBase\n{\npublic:\n\n   property String^ Item [String^]\n   {\n      String^ get( String^ key )\n      {\n         return (dynamic_cast&lt;String^&gt;(Dictionary[ key ]));\n      }\n\n      void set( String^ value, String^ key )\n      {\n         Dictionary[ key ] = value;\n      }\n   }\n\n   property ICollection^ Keys \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Keys);\n      }\n   }\n\n   property ICollection^ Values \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Values);\n      }\n   }\n   void Add( String^ key, String^ value )\n   {\n      Dictionary-&gt;Add( key, value );\n   }\n\n   bool Contains( String^ key )\n   {\n      return (Dictionary-&gt;Contains( key ));\n   }\n\n   void Remove( String^ key )\n   {\n      Dictionary-&gt;Remove( key );\n   }\n\n\nprotected:\n   virtual void OnInsert( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n   virtual void OnRemove( Object^ key, Object^ /*value*/ ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n   }\n\n   virtual void OnSet( Object^ key, Object^ /*oldValue*/, Object^ newValue ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( newValue-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;newValue must be of type String.&quot;,&quot;newValue&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(newValue);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;,&quot;newValue&quot; );\n      }\n   }\n\n   virtual void OnValidate( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n};\n\nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol );\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol );\nint main()\n{\n   // Creates and initializes a new DictionaryBase.\n   ShortStringDictionary^ mySSC = gcnew ShortStringDictionary;\n\n   // Adds elements to the collection.\n   mySSC-&gt;Add( &quot;One&quot;, &quot;a&quot; );\n   mySSC-&gt;Add( &quot;Two&quot;, &quot;ab&quot; );\n   mySSC-&gt;Add( &quot;Three&quot;, &quot;abc&quot; );\n   mySSC-&gt;Add( &quot;Four&quot;, &quot;abcd&quot; );\n   mySSC-&gt;Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintKeysAndValues2( mySSC );\n\n   // Display the contents of the collection using the Keys property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n   PrintKeysAndValues3( mySSC );\n\n   // Tries to add a value that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   // Tries to add a key that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n\n   // Searches the collection with Contains.\n   Console::WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Three&quot; ) );\n   Console::WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Twelve&quot; ) );\n   Console::WriteLine();\n\n   // Removes an element from the collection.\n   mySSC-&gt;Remove( &quot;Two&quot; );\n\n   // Displays the contents of the collection.\n   Console::WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n   PrintKeysAndValues2( mySSC );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol )\n{\n   DictionaryEntry myDE;\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      if ( myEnumerator-&gt;Current != nullptr )\n   {\n      myDE =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n   }\n\n   Console::WriteLine();\n}\n\n\n// Uses the Keys property and the Item property.\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol )\n{\n   ICollection^ myKeys = myCol-&gt;Keys;\n   IEnumerator^ myEnum1 = myKeys-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ k = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol-&gt;Item[ k ] );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#1\">using System;\nusing System.Collections;\n\npublic class ShortStringDictionary : DictionaryBase  {\n\n   public String this[ String key ]  {\n      get  {\n         return( (String) Dictionary[key] );\n      }\n      set  {\n         Dictionary[key] = value;\n      }\n   }\n\n   public ICollection Keys  {\n      get  {\n         return( Dictionary.Keys );\n      }\n   }\n\n   public ICollection Values  {\n      get  {\n         return( Dictionary.Values );\n      }\n   }\n\n   public void Add( String key, String value )  {\n      Dictionary.Add( key, value );\n   }\n\n   public bool Contains( String key )  {\n      return( Dictionary.Contains( key ) );\n   }\n\n   public void Remove( String key )  {\n      Dictionary.Remove( key );\n   }\n\n   protected override void OnInsert( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n   protected override void OnRemove( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n   }\n\n   protected override void OnSet( Object key, Object oldValue, Object newValue )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( newValue.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;newValue must be of type String.&quot;, &quot;newValue&quot; );\n      else  {\n         String strValue = (String) newValue;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot; );\n      }\n   }\n\n   protected override void OnValidate( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n}\n\n\npublic class SamplesDictionaryBase  {\n\n   public static void Main()  {\n \n      // Creates and initializes a new DictionaryBase.\n      ShortStringDictionary mySSC = new ShortStringDictionary();\n\n      // Adds elements to the collection.\n      mySSC.Add( &quot;One&quot;, &quot;a&quot; );\n      mySSC.Add( &quot;Two&quot;, &quot;ab&quot; );\n      mySSC.Add( &quot;Three&quot;, &quot;abc&quot; );\n      mySSC.Add( &quot;Four&quot;, &quot;abcd&quot; );\n      mySSC.Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintKeysAndValues1( mySSC );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintKeysAndValues2( mySSC );\n\n      // Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n      PrintKeysAndValues3( mySSC );\n\n      // Tries to add a value that is too long.\n      try  {\n         mySSC.Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Tries to add a key that is too long.\n      try  {\n         mySSC.Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      Console.WriteLine();\n\n      // Searches the collection with Contains.\n      Console.WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC.Contains( &quot;Three&quot; ) );\n      Console.WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC.Contains( &quot;Twelve&quot; ) );\n      Console.WriteLine();\n\n      // Removes an element from the collection.\n      mySSC.Remove( &quot;Two&quot; );\n\n      // Displays the contents of the collection.\n      Console.WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n      PrintKeysAndValues1( mySSC );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( ShortStringDictionary myCol )  {\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( ShortStringDictionary myCol )  {\n      DictionaryEntry myDE;\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         if ( myEnumerator.Current != null )  {\n            myDE = (DictionaryEntry) myEnumerator.Current;\n            Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n         }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys property and the Item property.\n   public static void PrintKeysAndValues3( ShortStringDictionary myCol )  {\n      ICollection myKeys = myCol.Keys;\n      foreach ( String k in myKeys )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol[k] );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#1\">Imports System\nImports System.Collections\n\nPublic Class ShortStringDictionary\n   Inherits DictionaryBase\n\n   Default Public Property Item(key As String) As String\n      Get\n         Return CType(Dictionary(key), String)\n      End Get\n      Set\n         Dictionary(key) = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Keys() As ICollection\n      Get\n         Return Dictionary.Keys\n      End Get\n   End Property\n\n   Public ReadOnly Property Values() As ICollection\n      Get\n         Return Dictionary.Values\n      End Get\n   End Property\n\n   Public Sub Add(key As String, value As String)\n      Dictionary.Add(key, value)\n   End Sub &#39;Add\n\n   Public Function Contains(key As String) As Boolean\n      Return Dictionary.Contains(key)\n   End Function &#39;Contains\n\n   Public Sub Remove(key As String)\n      Dictionary.Remove(key)\n   End Sub &#39;Remove\n\n   Protected Overrides Sub OnInsert(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnInsert\n\n   Protected Overrides Sub OnRemove(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If\n   End Sub &#39;OnRemove\n\n   Protected Overrides Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(newValue.GetType()) Then\n         Throw New ArgumentException(&quot;newValue must be of type String.&quot;, &quot;newValue&quot;)\n      Else\n         Dim strValue As String = CType(newValue, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot;)\n         End If\n      End If\n   End Sub &#39;OnSet\n\n   Protected Overrides Sub OnValidate(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;ShortStringDictionary\n\n\nPublic Class SamplesDictionaryBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new DictionaryBase.\n      Dim mySSC As New ShortStringDictionary()\n\n      &#39; Adds elements to the collection.\n      mySSC.Add(&quot;One&quot;, &quot;a&quot;)\n      mySSC.Add(&quot;Two&quot;, &quot;ab&quot;)\n      mySSC.Add(&quot;Three&quot;, &quot;abc&quot;)\n      mySSC.Add(&quot;Four&quot;, &quot;abcd&quot;)\n      mySSC.Add(&quot;Five&quot;, &quot;abcde&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintKeysAndValues1(mySSC)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintKeysAndValues2(mySSC)\n\n      &#39; Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Keys and Item):&quot;)\n      PrintKeysAndValues3(mySSC)\n\n      &#39; Tries to add a value that is too long.\n      Try\n          mySSC.Add(&quot;Ten&quot;, &quot;abcdefghij&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Tries to add a key that is too long.\n      Try\n          mySSC.Add(&quot;Eleven&quot;, &quot;ijk&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      Console.WriteLine()\n\n      &#39; Searches the collection with Contains.\n      Console.WriteLine(&quot;Contains &quot;&quot;Three&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Three&quot;))\n      Console.WriteLine(&quot;Contains &quot;&quot;Twelve&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Twelve&quot;))\n      Console.WriteLine()\n\n      &#39; Removes an element from the collection.\n      mySSC.Remove(&quot;Two&quot;)\n\n      &#39; Displays the contents of the collection.\n      Console.WriteLine(&quot;After removing &quot;&quot;Two&quot;&quot;:&quot;)\n      PrintKeysAndValues1(mySSC)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues1(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues2(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          If Not (myEnumerator.Current Is Nothing) Then\n            myDE = CType(myEnumerator.Current, DictionaryEntry)\n            Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n          End If\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues2\n\n\n    &#39; Uses the Keys property and the Item property.\n    Public Shared Sub PrintKeysAndValues3(myCol As ShortStringDictionary)\n      Dim myKeys As ICollection = myCol.Keys\n      Dim k As String\n      For Each k In  myKeys\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, k, myCol(k))\n      Next k\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesDictionaryBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Initial contents of the collection (using Keys and Item):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;System.ArgumentException: value must be no more than 5 characters in length.\n&#39;Parameter name: value\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;System.ArgumentException: key must be no more than 5 characters in length.\n&#39;Parameter name: key\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;\n&#39;Contains &quot;Three&quot;: True\n&#39;Contains &quot;Twelve&quot;: False\n&#39;\n&#39;After removing &quot;Two&quot;:\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   One   : a\n&#39;   Four  : abcd\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_Keys\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_Keys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.Keys</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the keys in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.ICollection System.Collections.IDictionary.Keys { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the keys in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the keys in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object is unspecified, but is the same order as the associated values in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object returned by the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Values_\" data-linktype=\"relative-path\">Values</a> property.  </p>\n<p> The returned <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is not a static copy; instead, the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> refers back to the keys in the original <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object. Therefore, changes to the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> continue to be reflected in the returned <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class and uses that implementation to create a dictionary of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and values that have a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> property of 5 characters or less.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ShortStringDictionary: public DictionaryBase\n{\npublic:\n\n   property String^ Item [String^]\n   {\n      String^ get( String^ key )\n      {\n         return (dynamic_cast&lt;String^&gt;(Dictionary[ key ]));\n      }\n\n      void set( String^ value, String^ key )\n      {\n         Dictionary[ key ] = value;\n      }\n   }\n\n   property ICollection^ Keys \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Keys);\n      }\n   }\n\n   property ICollection^ Values \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Values);\n      }\n   }\n   void Add( String^ key, String^ value )\n   {\n      Dictionary-&gt;Add( key, value );\n   }\n\n   bool Contains( String^ key )\n   {\n      return (Dictionary-&gt;Contains( key ));\n   }\n\n   void Remove( String^ key )\n   {\n      Dictionary-&gt;Remove( key );\n   }\n\n\nprotected:\n   virtual void OnInsert( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n   virtual void OnRemove( Object^ key, Object^ /*value*/ ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n   }\n\n   virtual void OnSet( Object^ key, Object^ /*oldValue*/, Object^ newValue ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( newValue-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;newValue must be of type String.&quot;,&quot;newValue&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(newValue);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;,&quot;newValue&quot; );\n      }\n   }\n\n   virtual void OnValidate( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n};\n\nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol );\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol );\nint main()\n{\n   // Creates and initializes a new DictionaryBase.\n   ShortStringDictionary^ mySSC = gcnew ShortStringDictionary;\n\n   // Adds elements to the collection.\n   mySSC-&gt;Add( &quot;One&quot;, &quot;a&quot; );\n   mySSC-&gt;Add( &quot;Two&quot;, &quot;ab&quot; );\n   mySSC-&gt;Add( &quot;Three&quot;, &quot;abc&quot; );\n   mySSC-&gt;Add( &quot;Four&quot;, &quot;abcd&quot; );\n   mySSC-&gt;Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintKeysAndValues2( mySSC );\n\n   // Display the contents of the collection using the Keys property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n   PrintKeysAndValues3( mySSC );\n\n   // Tries to add a value that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   // Tries to add a key that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n\n   // Searches the collection with Contains.\n   Console::WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Three&quot; ) );\n   Console::WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Twelve&quot; ) );\n   Console::WriteLine();\n\n   // Removes an element from the collection.\n   mySSC-&gt;Remove( &quot;Two&quot; );\n\n   // Displays the contents of the collection.\n   Console::WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n   PrintKeysAndValues2( mySSC );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol )\n{\n   DictionaryEntry myDE;\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      if ( myEnumerator-&gt;Current != nullptr )\n   {\n      myDE =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n   }\n\n   Console::WriteLine();\n}\n\n\n// Uses the Keys property and the Item property.\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol )\n{\n   ICollection^ myKeys = myCol-&gt;Keys;\n   IEnumerator^ myEnum1 = myKeys-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ k = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol-&gt;Item[ k ] );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#1\">using System;\nusing System.Collections;\n\npublic class ShortStringDictionary : DictionaryBase  {\n\n   public String this[ String key ]  {\n      get  {\n         return( (String) Dictionary[key] );\n      }\n      set  {\n         Dictionary[key] = value;\n      }\n   }\n\n   public ICollection Keys  {\n      get  {\n         return( Dictionary.Keys );\n      }\n   }\n\n   public ICollection Values  {\n      get  {\n         return( Dictionary.Values );\n      }\n   }\n\n   public void Add( String key, String value )  {\n      Dictionary.Add( key, value );\n   }\n\n   public bool Contains( String key )  {\n      return( Dictionary.Contains( key ) );\n   }\n\n   public void Remove( String key )  {\n      Dictionary.Remove( key );\n   }\n\n   protected override void OnInsert( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n   protected override void OnRemove( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n   }\n\n   protected override void OnSet( Object key, Object oldValue, Object newValue )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( newValue.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;newValue must be of type String.&quot;, &quot;newValue&quot; );\n      else  {\n         String strValue = (String) newValue;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot; );\n      }\n   }\n\n   protected override void OnValidate( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n}\n\n\npublic class SamplesDictionaryBase  {\n\n   public static void Main()  {\n \n      // Creates and initializes a new DictionaryBase.\n      ShortStringDictionary mySSC = new ShortStringDictionary();\n\n      // Adds elements to the collection.\n      mySSC.Add( &quot;One&quot;, &quot;a&quot; );\n      mySSC.Add( &quot;Two&quot;, &quot;ab&quot; );\n      mySSC.Add( &quot;Three&quot;, &quot;abc&quot; );\n      mySSC.Add( &quot;Four&quot;, &quot;abcd&quot; );\n      mySSC.Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintKeysAndValues1( mySSC );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintKeysAndValues2( mySSC );\n\n      // Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n      PrintKeysAndValues3( mySSC );\n\n      // Tries to add a value that is too long.\n      try  {\n         mySSC.Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Tries to add a key that is too long.\n      try  {\n         mySSC.Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      Console.WriteLine();\n\n      // Searches the collection with Contains.\n      Console.WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC.Contains( &quot;Three&quot; ) );\n      Console.WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC.Contains( &quot;Twelve&quot; ) );\n      Console.WriteLine();\n\n      // Removes an element from the collection.\n      mySSC.Remove( &quot;Two&quot; );\n\n      // Displays the contents of the collection.\n      Console.WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n      PrintKeysAndValues1( mySSC );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( ShortStringDictionary myCol )  {\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( ShortStringDictionary myCol )  {\n      DictionaryEntry myDE;\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         if ( myEnumerator.Current != null )  {\n            myDE = (DictionaryEntry) myEnumerator.Current;\n            Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n         }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys property and the Item property.\n   public static void PrintKeysAndValues3( ShortStringDictionary myCol )  {\n      ICollection myKeys = myCol.Keys;\n      foreach ( String k in myKeys )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol[k] );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#1\">Imports System\nImports System.Collections\n\nPublic Class ShortStringDictionary\n   Inherits DictionaryBase\n\n   Default Public Property Item(key As String) As String\n      Get\n         Return CType(Dictionary(key), String)\n      End Get\n      Set\n         Dictionary(key) = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Keys() As ICollection\n      Get\n         Return Dictionary.Keys\n      End Get\n   End Property\n\n   Public ReadOnly Property Values() As ICollection\n      Get\n         Return Dictionary.Values\n      End Get\n   End Property\n\n   Public Sub Add(key As String, value As String)\n      Dictionary.Add(key, value)\n   End Sub &#39;Add\n\n   Public Function Contains(key As String) As Boolean\n      Return Dictionary.Contains(key)\n   End Function &#39;Contains\n\n   Public Sub Remove(key As String)\n      Dictionary.Remove(key)\n   End Sub &#39;Remove\n\n   Protected Overrides Sub OnInsert(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnInsert\n\n   Protected Overrides Sub OnRemove(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If\n   End Sub &#39;OnRemove\n\n   Protected Overrides Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(newValue.GetType()) Then\n         Throw New ArgumentException(&quot;newValue must be of type String.&quot;, &quot;newValue&quot;)\n      Else\n         Dim strValue As String = CType(newValue, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot;)\n         End If\n      End If\n   End Sub &#39;OnSet\n\n   Protected Overrides Sub OnValidate(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;ShortStringDictionary\n\n\nPublic Class SamplesDictionaryBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new DictionaryBase.\n      Dim mySSC As New ShortStringDictionary()\n\n      &#39; Adds elements to the collection.\n      mySSC.Add(&quot;One&quot;, &quot;a&quot;)\n      mySSC.Add(&quot;Two&quot;, &quot;ab&quot;)\n      mySSC.Add(&quot;Three&quot;, &quot;abc&quot;)\n      mySSC.Add(&quot;Four&quot;, &quot;abcd&quot;)\n      mySSC.Add(&quot;Five&quot;, &quot;abcde&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintKeysAndValues1(mySSC)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintKeysAndValues2(mySSC)\n\n      &#39; Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Keys and Item):&quot;)\n      PrintKeysAndValues3(mySSC)\n\n      &#39; Tries to add a value that is too long.\n      Try\n          mySSC.Add(&quot;Ten&quot;, &quot;abcdefghij&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Tries to add a key that is too long.\n      Try\n          mySSC.Add(&quot;Eleven&quot;, &quot;ijk&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      Console.WriteLine()\n\n      &#39; Searches the collection with Contains.\n      Console.WriteLine(&quot;Contains &quot;&quot;Three&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Three&quot;))\n      Console.WriteLine(&quot;Contains &quot;&quot;Twelve&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Twelve&quot;))\n      Console.WriteLine()\n\n      &#39; Removes an element from the collection.\n      mySSC.Remove(&quot;Two&quot;)\n\n      &#39; Displays the contents of the collection.\n      Console.WriteLine(&quot;After removing &quot;&quot;Two&quot;&quot;:&quot;)\n      PrintKeysAndValues1(mySSC)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues1(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues2(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          If Not (myEnumerator.Current Is Nothing) Then\n            myDE = CType(myEnumerator.Current, DictionaryEntry)\n            Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n          End If\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues2\n\n\n    &#39; Uses the Keys property and the Item property.\n    Public Shared Sub PrintKeysAndValues3(myCol As ShortStringDictionary)\n      Dim myKeys As ICollection = myCol.Keys\n      Dim k As String\n      For Each k In  myKeys\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, k, myCol(k))\n      Next k\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesDictionaryBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Initial contents of the collection (using Keys and Item):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;System.ArgumentException: value must be no more than 5 characters in length.\n&#39;Parameter name: value\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;System.ArgumentException: key must be no more than 5 characters in length.\n&#39;Parameter name: key\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;\n&#39;Contains &quot;Three&quot;: True\n&#39;Contains &quot;Twelve&quot;: False\n&#39;\n&#39;After removing &quot;Two&quot;:\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   One   : a\n&#39;   Four  : abcd\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_Remove_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.Remove(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element with the specified key from the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDictionary.Remove (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> does not contain an element with the specified key, the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> remains unchanged. No exception is thrown.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class and uses that implementation to create a dictionary of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and values that have a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> of 5 characters or less.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ShortStringDictionary: public DictionaryBase\n{\npublic:\n\n   property String^ Item [String^]\n   {\n      String^ get( String^ key )\n      {\n         return (dynamic_cast&lt;String^&gt;(Dictionary[ key ]));\n      }\n\n      void set( String^ value, String^ key )\n      {\n         Dictionary[ key ] = value;\n      }\n   }\n\n   property ICollection^ Keys \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Keys);\n      }\n   }\n\n   property ICollection^ Values \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Values);\n      }\n   }\n   void Add( String^ key, String^ value )\n   {\n      Dictionary-&gt;Add( key, value );\n   }\n\n   bool Contains( String^ key )\n   {\n      return (Dictionary-&gt;Contains( key ));\n   }\n\n   void Remove( String^ key )\n   {\n      Dictionary-&gt;Remove( key );\n   }\n\n\nprotected:\n   virtual void OnInsert( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n   virtual void OnRemove( Object^ key, Object^ /*value*/ ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n   }\n\n   virtual void OnSet( Object^ key, Object^ /*oldValue*/, Object^ newValue ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( newValue-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;newValue must be of type String.&quot;,&quot;newValue&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(newValue);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;,&quot;newValue&quot; );\n      }\n   }\n\n   virtual void OnValidate( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n};\n\nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol );\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol );\nint main()\n{\n   // Creates and initializes a new DictionaryBase.\n   ShortStringDictionary^ mySSC = gcnew ShortStringDictionary;\n\n   // Adds elements to the collection.\n   mySSC-&gt;Add( &quot;One&quot;, &quot;a&quot; );\n   mySSC-&gt;Add( &quot;Two&quot;, &quot;ab&quot; );\n   mySSC-&gt;Add( &quot;Three&quot;, &quot;abc&quot; );\n   mySSC-&gt;Add( &quot;Four&quot;, &quot;abcd&quot; );\n   mySSC-&gt;Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintKeysAndValues2( mySSC );\n\n   // Display the contents of the collection using the Keys property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n   PrintKeysAndValues3( mySSC );\n\n   // Tries to add a value that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   // Tries to add a key that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n\n   // Searches the collection with Contains.\n   Console::WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Three&quot; ) );\n   Console::WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Twelve&quot; ) );\n   Console::WriteLine();\n\n   // Removes an element from the collection.\n   mySSC-&gt;Remove( &quot;Two&quot; );\n\n   // Displays the contents of the collection.\n   Console::WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n   PrintKeysAndValues2( mySSC );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol )\n{\n   DictionaryEntry myDE;\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      if ( myEnumerator-&gt;Current != nullptr )\n   {\n      myDE =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n   }\n\n   Console::WriteLine();\n}\n\n\n// Uses the Keys property and the Item property.\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol )\n{\n   ICollection^ myKeys = myCol-&gt;Keys;\n   IEnumerator^ myEnum1 = myKeys-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ k = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol-&gt;Item[ k ] );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#1\">using System;\nusing System.Collections;\n\npublic class ShortStringDictionary : DictionaryBase  {\n\n   public String this[ String key ]  {\n      get  {\n         return( (String) Dictionary[key] );\n      }\n      set  {\n         Dictionary[key] = value;\n      }\n   }\n\n   public ICollection Keys  {\n      get  {\n         return( Dictionary.Keys );\n      }\n   }\n\n   public ICollection Values  {\n      get  {\n         return( Dictionary.Values );\n      }\n   }\n\n   public void Add( String key, String value )  {\n      Dictionary.Add( key, value );\n   }\n\n   public bool Contains( String key )  {\n      return( Dictionary.Contains( key ) );\n   }\n\n   public void Remove( String key )  {\n      Dictionary.Remove( key );\n   }\n\n   protected override void OnInsert( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n   protected override void OnRemove( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n   }\n\n   protected override void OnSet( Object key, Object oldValue, Object newValue )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( newValue.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;newValue must be of type String.&quot;, &quot;newValue&quot; );\n      else  {\n         String strValue = (String) newValue;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot; );\n      }\n   }\n\n   protected override void OnValidate( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n}\n\n\npublic class SamplesDictionaryBase  {\n\n   public static void Main()  {\n \n      // Creates and initializes a new DictionaryBase.\n      ShortStringDictionary mySSC = new ShortStringDictionary();\n\n      // Adds elements to the collection.\n      mySSC.Add( &quot;One&quot;, &quot;a&quot; );\n      mySSC.Add( &quot;Two&quot;, &quot;ab&quot; );\n      mySSC.Add( &quot;Three&quot;, &quot;abc&quot; );\n      mySSC.Add( &quot;Four&quot;, &quot;abcd&quot; );\n      mySSC.Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintKeysAndValues1( mySSC );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintKeysAndValues2( mySSC );\n\n      // Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n      PrintKeysAndValues3( mySSC );\n\n      // Tries to add a value that is too long.\n      try  {\n         mySSC.Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Tries to add a key that is too long.\n      try  {\n         mySSC.Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      Console.WriteLine();\n\n      // Searches the collection with Contains.\n      Console.WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC.Contains( &quot;Three&quot; ) );\n      Console.WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC.Contains( &quot;Twelve&quot; ) );\n      Console.WriteLine();\n\n      // Removes an element from the collection.\n      mySSC.Remove( &quot;Two&quot; );\n\n      // Displays the contents of the collection.\n      Console.WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n      PrintKeysAndValues1( mySSC );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( ShortStringDictionary myCol )  {\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( ShortStringDictionary myCol )  {\n      DictionaryEntry myDE;\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         if ( myEnumerator.Current != null )  {\n            myDE = (DictionaryEntry) myEnumerator.Current;\n            Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n         }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys property and the Item property.\n   public static void PrintKeysAndValues3( ShortStringDictionary myCol )  {\n      ICollection myKeys = myCol.Keys;\n      foreach ( String k in myKeys )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol[k] );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#1\">Imports System\nImports System.Collections\n\nPublic Class ShortStringDictionary\n   Inherits DictionaryBase\n\n   Default Public Property Item(key As String) As String\n      Get\n         Return CType(Dictionary(key), String)\n      End Get\n      Set\n         Dictionary(key) = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Keys() As ICollection\n      Get\n         Return Dictionary.Keys\n      End Get\n   End Property\n\n   Public ReadOnly Property Values() As ICollection\n      Get\n         Return Dictionary.Values\n      End Get\n   End Property\n\n   Public Sub Add(key As String, value As String)\n      Dictionary.Add(key, value)\n   End Sub &#39;Add\n\n   Public Function Contains(key As String) As Boolean\n      Return Dictionary.Contains(key)\n   End Function &#39;Contains\n\n   Public Sub Remove(key As String)\n      Dictionary.Remove(key)\n   End Sub &#39;Remove\n\n   Protected Overrides Sub OnInsert(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnInsert\n\n   Protected Overrides Sub OnRemove(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If\n   End Sub &#39;OnRemove\n\n   Protected Overrides Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(newValue.GetType()) Then\n         Throw New ArgumentException(&quot;newValue must be of type String.&quot;, &quot;newValue&quot;)\n      Else\n         Dim strValue As String = CType(newValue, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot;)\n         End If\n      End If\n   End Sub &#39;OnSet\n\n   Protected Overrides Sub OnValidate(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;ShortStringDictionary\n\n\nPublic Class SamplesDictionaryBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new DictionaryBase.\n      Dim mySSC As New ShortStringDictionary()\n\n      &#39; Adds elements to the collection.\n      mySSC.Add(&quot;One&quot;, &quot;a&quot;)\n      mySSC.Add(&quot;Two&quot;, &quot;ab&quot;)\n      mySSC.Add(&quot;Three&quot;, &quot;abc&quot;)\n      mySSC.Add(&quot;Four&quot;, &quot;abcd&quot;)\n      mySSC.Add(&quot;Five&quot;, &quot;abcde&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintKeysAndValues1(mySSC)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintKeysAndValues2(mySSC)\n\n      &#39; Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Keys and Item):&quot;)\n      PrintKeysAndValues3(mySSC)\n\n      &#39; Tries to add a value that is too long.\n      Try\n          mySSC.Add(&quot;Ten&quot;, &quot;abcdefghij&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Tries to add a key that is too long.\n      Try\n          mySSC.Add(&quot;Eleven&quot;, &quot;ijk&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      Console.WriteLine()\n\n      &#39; Searches the collection with Contains.\n      Console.WriteLine(&quot;Contains &quot;&quot;Three&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Three&quot;))\n      Console.WriteLine(&quot;Contains &quot;&quot;Twelve&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Twelve&quot;))\n      Console.WriteLine()\n\n      &#39; Removes an element from the collection.\n      mySSC.Remove(&quot;Two&quot;)\n\n      &#39; Displays the contents of the collection.\n      Console.WriteLine(&quot;After removing &quot;&quot;Two&quot;&quot;:&quot;)\n      PrintKeysAndValues1(mySSC)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues1(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues2(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          If Not (myEnumerator.Current Is Nothing) Then\n            myDE = CType(myEnumerator.Current, DictionaryEntry)\n            Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n          End If\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues2\n\n\n    &#39; Uses the Keys property and the Item property.\n    Public Shared Sub PrintKeysAndValues3(myCol As ShortStringDictionary)\n      Dim myKeys As ICollection = myCol.Keys\n      Dim k As String\n      For Each k In  myKeys\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, k, myCol(k))\n      Next k\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesDictionaryBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Initial contents of the collection (using Keys and Item):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;System.ArgumentException: value must be no more than 5 characters in length.\n&#39;Parameter name: value\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;System.ArgumentException: key must be no more than 5 characters in length.\n&#39;Parameter name: key\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;\n&#39;Contains &quot;Three&quot;: True\n&#39;Contains &quot;Twelve&quot;: False\n&#39;\n&#39;After removing &quot;Two&quot;:\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   One   : a\n&#39;   Four  : abcd\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_Values\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_System_Collections_IDictionary_Values_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDictionary.Values</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the values in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.ICollection System.Collections.IDictionary.Values { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the values in the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the values in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object is unspecified, but is the same order as the associated keys in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object returned by the <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Keys_\" data-linktype=\"relative-path\">Keys</a> property.  </p>\n<p> The returned <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is not a static copy; instead, the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> refers back to the values in the original <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> object. Therefore, changes to the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> continue to be reflected in the returned <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a> class and uses that implementation to create a dictionary of <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> keys and values that have a <a class=\"xref\" href=\"system.string#System_String_Length_\" data-linktype=\"relative-path\">Length</a> property of 5 characters or less.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.DictionaryBase#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class ShortStringDictionary: public DictionaryBase\n{\npublic:\n\n   property String^ Item [String^]\n   {\n      String^ get( String^ key )\n      {\n         return (dynamic_cast&lt;String^&gt;(Dictionary[ key ]));\n      }\n\n      void set( String^ value, String^ key )\n      {\n         Dictionary[ key ] = value;\n      }\n   }\n\n   property ICollection^ Keys \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Keys);\n      }\n   }\n\n   property ICollection^ Values \n   {\n      ICollection^ get()\n      {\n         return (Dictionary-&gt;Values);\n      }\n   }\n   void Add( String^ key, String^ value )\n   {\n      Dictionary-&gt;Add( key, value );\n   }\n\n   bool Contains( String^ key )\n   {\n      return (Dictionary-&gt;Contains( key ));\n   }\n\n   void Remove( String^ key )\n   {\n      Dictionary-&gt;Remove( key );\n   }\n\n\nprotected:\n   virtual void OnInsert( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n   virtual void OnRemove( Object^ key, Object^ /*value*/ ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n   }\n\n   virtual void OnSet( Object^ key, Object^ /*oldValue*/, Object^ newValue ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( newValue-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;newValue must be of type String.&quot;,&quot;newValue&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(newValue);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;,&quot;newValue&quot; );\n      }\n   }\n\n   virtual void OnValidate( Object^ key, Object^ value ) override\n   {\n      if ( key-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;key must be of type String.&quot;,&quot;key&quot; );\n      else\n      {\n         String^ strKey = dynamic_cast&lt;String^&gt;(key);\n         if ( strKey-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;key must be no more than 5 characters in length.&quot;,&quot;key&quot; );\n      }\n\n      if ( value-&gt;GetType() != Type::GetType( &quot;System.String&quot; ) )\n            throw gcnew ArgumentException( &quot;value must be of type String.&quot;,&quot;value&quot; );\n      else\n      {\n         String^ strValue = dynamic_cast&lt;String^&gt;(value);\n         if ( strValue-&gt;Length &gt; 5 )\n                  throw gcnew ArgumentException( &quot;value must be no more than 5 characters in length.&quot;,&quot;value&quot; );\n      }\n   }\n\n};\n\nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol );\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol );\nint main()\n{\n   // Creates and initializes a new DictionaryBase.\n   ShortStringDictionary^ mySSC = gcnew ShortStringDictionary;\n\n   // Adds elements to the collection.\n   mySSC-&gt;Add( &quot;One&quot;, &quot;a&quot; );\n   mySSC-&gt;Add( &quot;Two&quot;, &quot;ab&quot; );\n   mySSC-&gt;Add( &quot;Three&quot;, &quot;abc&quot; );\n   mySSC-&gt;Add( &quot;Four&quot;, &quot;abcd&quot; );\n   mySSC-&gt;Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintKeysAndValues2( mySSC );\n\n   // Display the contents of the collection using the Keys property and the Item property.\n   Console::WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n   PrintKeysAndValues3( mySSC );\n\n   // Tries to add a value that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   // Tries to add a key that is too long.\n   try\n   {\n      mySSC-&gt;Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n\n   // Searches the collection with Contains.\n   Console::WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Three&quot; ) );\n   Console::WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC-&gt;Contains( &quot;Twelve&quot; ) );\n   Console::WriteLine();\n\n   // Removes an element from the collection.\n   mySSC-&gt;Remove( &quot;Two&quot; );\n\n   // Displays the contents of the collection.\n   Console::WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n   PrintKeysAndValues2( mySSC );\n}\n\n// Uses the enumerator. \nvoid PrintKeysAndValues2( ShortStringDictionary^ myCol )\n{\n   DictionaryEntry myDE;\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      if ( myEnumerator-&gt;Current != nullptr )\n   {\n      myDE =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEnumerator-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n   }\n\n   Console::WriteLine();\n}\n\n\n// Uses the Keys property and the Item property.\nvoid PrintKeysAndValues3( ShortStringDictionary^ myCol )\n{\n   ICollection^ myKeys = myCol-&gt;Keys;\n   IEnumerator^ myEnum1 = myKeys-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      String^ k = safe_cast&lt;String^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol-&gt;Item[ k ] );\n   }\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.DictionaryBase#1\">using System;\nusing System.Collections;\n\npublic class ShortStringDictionary : DictionaryBase  {\n\n   public String this[ String key ]  {\n      get  {\n         return( (String) Dictionary[key] );\n      }\n      set  {\n         Dictionary[key] = value;\n      }\n   }\n\n   public ICollection Keys  {\n      get  {\n         return( Dictionary.Keys );\n      }\n   }\n\n   public ICollection Values  {\n      get  {\n         return( Dictionary.Values );\n      }\n   }\n\n   public void Add( String key, String value )  {\n      Dictionary.Add( key, value );\n   }\n\n   public bool Contains( String key )  {\n      return( Dictionary.Contains( key ) );\n   }\n\n   public void Remove( String key )  {\n      Dictionary.Remove( key );\n   }\n\n   protected override void OnInsert( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n   protected override void OnRemove( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n   }\n\n   protected override void OnSet( Object key, Object oldValue, Object newValue )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( newValue.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;newValue must be of type String.&quot;, &quot;newValue&quot; );\n      else  {\n         String strValue = (String) newValue;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot; );\n      }\n   }\n\n   protected override void OnValidate( Object key, Object value )  {\n      if ( key.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;key must be of type String.&quot;, &quot;key&quot; );\n      else  {\n         String strKey = (String) key;\n         if ( strKey.Length &gt; 5 )\n            throw new ArgumentException( &quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot; );\n      }\n\n      if ( value.GetType() != typeof(System.String) )\n         throw new ArgumentException( &quot;value must be of type String.&quot;, &quot;value&quot; );\n      else  {\n         String strValue = (String) value;\n         if ( strValue.Length &gt; 5 )\n            throw new ArgumentException( &quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot; );\n      }\n   }\n\n}\n\n\npublic class SamplesDictionaryBase  {\n\n   public static void Main()  {\n \n      // Creates and initializes a new DictionaryBase.\n      ShortStringDictionary mySSC = new ShortStringDictionary();\n\n      // Adds elements to the collection.\n      mySSC.Add( &quot;One&quot;, &quot;a&quot; );\n      mySSC.Add( &quot;Two&quot;, &quot;ab&quot; );\n      mySSC.Add( &quot;Three&quot;, &quot;abc&quot; );\n      mySSC.Add( &quot;Four&quot;, &quot;abcd&quot; );\n      mySSC.Add( &quot;Five&quot;, &quot;abcde&quot; );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintKeysAndValues1( mySSC );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintKeysAndValues2( mySSC );\n\n      // Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine( &quot;Initial contents of the collection (using Keys and Item):&quot; );\n      PrintKeysAndValues3( mySSC );\n\n      // Tries to add a value that is too long.\n      try  {\n         mySSC.Add( &quot;Ten&quot;, &quot;abcdefghij&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      // Tries to add a key that is too long.\n      try  {\n         mySSC.Add( &quot;Eleven&quot;, &quot;ijk&quot; );\n      }\n      catch ( ArgumentException e )  {\n         Console.WriteLine( e.ToString() );\n      }\n\n      Console.WriteLine();\n\n      // Searches the collection with Contains.\n      Console.WriteLine( &quot;Contains \\&quot;Three\\&quot;: {0}&quot;, mySSC.Contains( &quot;Three&quot; ) );\n      Console.WriteLine( &quot;Contains \\&quot;Twelve\\&quot;: {0}&quot;, mySSC.Contains( &quot;Twelve&quot; ) );\n      Console.WriteLine();\n\n      // Removes an element from the collection.\n      mySSC.Remove( &quot;Two&quot; );\n\n      // Displays the contents of the collection.\n      Console.WriteLine( &quot;After removing \\&quot;Two\\&quot;:&quot; );\n      PrintKeysAndValues1( mySSC );\n\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues1( ShortStringDictionary myCol )  {\n      foreach ( DictionaryEntry myDE in myCol )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintKeysAndValues2( ShortStringDictionary myCol )  {\n      DictionaryEntry myDE;\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         if ( myEnumerator.Current != null )  {\n            myDE = (DictionaryEntry) myEnumerator.Current;\n            Console.WriteLine( &quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value );\n         }\n      Console.WriteLine();\n   }\n\n   // Uses the Keys property and the Item property.\n   public static void PrintKeysAndValues3( ShortStringDictionary myCol )  {\n      ICollection myKeys = myCol.Keys;\n      foreach ( String k in myKeys )\n         Console.WriteLine( &quot;   {0,-5} : {1}&quot;, k, myCol[k] );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nContents of the collection (using enumerator):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nInitial contents of the collection (using Keys and Item):\n   Three : abc\n   Five  : abcde\n   Two   : ab\n   One   : a\n   Four  : abcd\n\nSystem.ArgumentException: value must be no more than 5 characters in length.\nParameter name: value\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\nSystem.ArgumentException: key must be no more than 5 characters in length.\nParameter name: key\n   at ShortStringDictionary.OnValidate(Object key, Object value)\n   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n   at SamplesDictionaryBase.Main()\n\nContains &quot;Three&quot;: True\nContains &quot;Twelve&quot;: False\n\nAfter removing &quot;Two&quot;:\n   Three : abc\n   Five  : abcde\n   One   : a\n   Four  : abcd\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.DictionaryBase#1\">Imports System\nImports System.Collections\n\nPublic Class ShortStringDictionary\n   Inherits DictionaryBase\n\n   Default Public Property Item(key As String) As String\n      Get\n         Return CType(Dictionary(key), String)\n      End Get\n      Set\n         Dictionary(key) = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Keys() As ICollection\n      Get\n         Return Dictionary.Keys\n      End Get\n   End Property\n\n   Public ReadOnly Property Values() As ICollection\n      Get\n         Return Dictionary.Values\n      End Get\n   End Property\n\n   Public Sub Add(key As String, value As String)\n      Dictionary.Add(key, value)\n   End Sub &#39;Add\n\n   Public Function Contains(key As String) As Boolean\n      Return Dictionary.Contains(key)\n   End Function &#39;Contains\n\n   Public Sub Remove(key As String)\n      Dictionary.Remove(key)\n   End Sub &#39;Remove\n\n   Protected Overrides Sub OnInsert(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnInsert\n\n   Protected Overrides Sub OnRemove(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If\n   End Sub &#39;OnRemove\n\n   Protected Overrides Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(newValue.GetType()) Then\n         Throw New ArgumentException(&quot;newValue must be of type String.&quot;, &quot;newValue&quot;)\n      Else\n         Dim strValue As String = CType(newValue, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;newValue must be no more than 5 characters in length.&quot;, &quot;newValue&quot;)\n         End If\n      End If\n   End Sub &#39;OnSet\n\n   Protected Overrides Sub OnValidate(key As Object, value As Object)\n      If Not GetType(System.String).IsAssignableFrom(key.GetType()) Then\n         Throw New ArgumentException(&quot;key must be of type String.&quot;, &quot;key&quot;)\n      Else\n         Dim strKey As String = CType(key, String)\n         If strKey.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;key must be no more than 5 characters in length.&quot;, &quot;key&quot;)\n         End If\n      End If \n      If Not GetType(System.String).IsAssignableFrom(value.GetType()) Then\n         Throw New ArgumentException(&quot;value must be of type String.&quot;, &quot;value&quot;)\n      Else\n         Dim strValue As String = CType(value, String)\n         If strValue.Length &gt; 5 Then\n            Throw New ArgumentException(&quot;value must be no more than 5 characters in length.&quot;, &quot;value&quot;)\n         End If\n      End If\n   End Sub &#39;OnValidate \n\nEnd Class &#39;ShortStringDictionary\n\n\nPublic Class SamplesDictionaryBase\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a new DictionaryBase.\n      Dim mySSC As New ShortStringDictionary()\n\n      &#39; Adds elements to the collection.\n      mySSC.Add(&quot;One&quot;, &quot;a&quot;)\n      mySSC.Add(&quot;Two&quot;, &quot;ab&quot;)\n      mySSC.Add(&quot;Three&quot;, &quot;abc&quot;)\n      mySSC.Add(&quot;Four&quot;, &quot;abcd&quot;)\n      mySSC.Add(&quot;Five&quot;, &quot;abcde&quot;)\n\n      &#39; Display the contents of the collection using For Each. This is the preferred method.\n      Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n      PrintKeysAndValues1(mySSC)\n\n      &#39; Display the contents of the collection using the enumerator.\n      Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n      PrintKeysAndValues2(mySSC)\n\n      &#39; Display the contents of the collection using the Keys property and the Item property.\n      Console.WriteLine(&quot;Initial contents of the collection (using Keys and Item):&quot;)\n      PrintKeysAndValues3(mySSC)\n\n      &#39; Tries to add a value that is too long.\n      Try\n          mySSC.Add(&quot;Ten&quot;, &quot;abcdefghij&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      &#39; Tries to add a key that is too long.\n      Try\n          mySSC.Add(&quot;Eleven&quot;, &quot;ijk&quot;)\n      Catch e As ArgumentException\n          Console.WriteLine(e.ToString())\n      End Try\n\n      Console.WriteLine()\n\n      &#39; Searches the collection with Contains.\n      Console.WriteLine(&quot;Contains &quot;&quot;Three&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Three&quot;))\n      Console.WriteLine(&quot;Contains &quot;&quot;Twelve&quot;&quot;: {0}&quot;, mySSC.Contains(&quot;Twelve&quot;))\n      Console.WriteLine()\n\n      &#39; Removes an element from the collection.\n      mySSC.Remove(&quot;Two&quot;)\n\n      &#39; Displays the contents of the collection.\n      Console.WriteLine(&quot;After removing &quot;&quot;Two&quot;&quot;:&quot;)\n      PrintKeysAndValues1(mySSC)\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues1(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      For Each myDE In  myCol\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n      Next myDE\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintKeysAndValues2(myCol As ShortStringDictionary)\n      Dim myDE As DictionaryEntry\n      Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n      While myEnumerator.MoveNext()\n          If Not (myEnumerator.Current Is Nothing) Then\n            myDE = CType(myEnumerator.Current, DictionaryEntry)\n            Console.WriteLine(&quot;   {0,-5} : {1}&quot;, myDE.Key, myDE.Value)\n          End If\n      End While\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues2\n\n\n    &#39; Uses the Keys property and the Item property.\n    Public Shared Sub PrintKeysAndValues3(myCol As ShortStringDictionary)\n      Dim myKeys As ICollection = myCol.Keys\n      Dim k As String\n      For Each k In  myKeys\n          Console.WriteLine(&quot;   {0,-5} : {1}&quot;, k, myCol(k))\n      Next k\n      Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues3\n\nEnd Class &#39;SamplesDictionaryBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;Initial contents of the collection (using Keys and Item):\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   Two   : ab\n&#39;   One   : a\n&#39;   Four  : abcd\n&#39;\n&#39;System.ArgumentException: value must be no more than 5 characters in length.\n&#39;Parameter name: value\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;System.ArgumentException: key must be no more than 5 characters in length.\n&#39;Parameter name: key\n&#39;   at ShortStringDictionary.OnValidate(Object key, Object value)\n&#39;   at System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object key, Object value)\n&#39;   at SamplesDictionaryBase.Main()\n&#39;\n&#39;Contains &quot;Three&quot;: True\n&#39;Contains &quot;Twelve&quot;: False\n&#39;\n&#39;After removing &quot;Two&quot;:\n&#39;   Three : abc\n&#39;   Five  : abcde\n&#39;   One   : a\n&#39;   Four  : abcd\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_DictionaryBase_System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_DictionaryBase_System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that iterates through the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the <a class=\"xref\" href=\"system.collections.dictionarybase\" data-linktype=\"relative-path\">DictionaryBase</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators. Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position. At this position, calling <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, calling <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>. If the collection is modified between <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the element that it is set to, even if the enumerator is already invalidated.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.DictionaryBase.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.DictionaryBase.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.Dictionary\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.InnerHashtable\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.OnClear\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.OnClearComplete\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.OnGet\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.OnInsert\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.OnInsertComplete\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.OnRemove\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.OnRemoveComplete\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.OnSet\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.OnSetComplete\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.OnValidate\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.ICollection.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.ICollection.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.IDictionary.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.IDictionary.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.IDictionary.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.IDictionary.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.IDictionary.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.IDictionary.Keys\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.IDictionary.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.IDictionary.Values\">\r\n<meta name=\"APIName\" content=\"System.Collections.DictionaryBase.IEnumerable.GetEnumerator\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"96bd8af3-b7fa-e8eb-339b-b5d17aa9d996\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the abstract base class for a strongly typed collection of key/value pairs.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.DictionaryBase\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.DictionaryBase.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.DictionaryBase.yml","open_to_public_contributors":true,"api_name":["System.Collections.DictionaryBase","System.Collections.DictionaryBase..ctor","System.Collections.DictionaryBase.Clear","System.Collections.DictionaryBase.CopyTo","System.Collections.DictionaryBase.Count","System.Collections.DictionaryBase.Dictionary","System.Collections.DictionaryBase.GetEnumerator","System.Collections.DictionaryBase.InnerHashtable","System.Collections.DictionaryBase.OnClear","System.Collections.DictionaryBase.OnClearComplete","System.Collections.DictionaryBase.OnGet","System.Collections.DictionaryBase.OnInsert","System.Collections.DictionaryBase.OnInsertComplete","System.Collections.DictionaryBase.OnRemove","System.Collections.DictionaryBase.OnRemoveComplete","System.Collections.DictionaryBase.OnSet","System.Collections.DictionaryBase.OnSetComplete","System.Collections.DictionaryBase.OnValidate","System.Collections.DictionaryBase.ICollection.IsSynchronized","System.Collections.DictionaryBase.ICollection.SyncRoot","System.Collections.DictionaryBase.IDictionary.Add","System.Collections.DictionaryBase.IDictionary.Contains","System.Collections.DictionaryBase.IDictionary.IsFixedSize","System.Collections.DictionaryBase.IDictionary.IsReadOnly","System.Collections.DictionaryBase.IDictionary.Item","System.Collections.DictionaryBase.IDictionary.Keys","System.Collections.DictionaryBase.IDictionary.Remove","System.Collections.DictionaryBase.IDictionary.Values","System.Collections.DictionaryBase.IEnumerable.GetEnumerator"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.DictionaryBase","System::Collections::DictionaryBase","System.Collections.DictionaryBase.#ctor","System::Collections::DictionaryBase::#ctor","System.Collections.DictionaryBase.Clear","System::Collections::DictionaryBase::Clear","System.Collections.DictionaryBase.CopyTo","System::Collections::DictionaryBase::CopyTo","System.Collections.DictionaryBase.Count","System::Collections::DictionaryBase::Count","System.Collections.DictionaryBase.Dictionary","System::Collections::DictionaryBase::Dictionary","System.Collections.DictionaryBase.GetEnumerator","System::Collections::DictionaryBase::GetEnumerator","System.Collections.DictionaryBase.InnerHashtable","System::Collections::DictionaryBase::InnerHashtable","System.Collections.DictionaryBase.OnClear","System::Collections::DictionaryBase::OnClear","System.Collections.DictionaryBase.OnClearComplete","System::Collections::DictionaryBase::OnClearComplete","System.Collections.DictionaryBase.OnGet","System::Collections::DictionaryBase::OnGet","System.Collections.DictionaryBase.OnInsert","System::Collections::DictionaryBase::OnInsert","System.Collections.DictionaryBase.OnInsertComplete","System::Collections::DictionaryBase::OnInsertComplete","System.Collections.DictionaryBase.OnRemove","System::Collections::DictionaryBase::OnRemove","System.Collections.DictionaryBase.OnRemoveComplete","System::Collections::DictionaryBase::OnRemoveComplete","System.Collections.DictionaryBase.OnSet","System::Collections::DictionaryBase::OnSet","System.Collections.DictionaryBase.OnSetComplete","System::Collections::DictionaryBase::OnSetComplete","System.Collections.DictionaryBase.OnValidate","System::Collections::DictionaryBase::OnValidate","System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized","System::Collections::DictionaryBase::System#Collections#ICollection#IsSynchronized","System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot","System::Collections::DictionaryBase::System#Collections#ICollection#SyncRoot","System.Collections.DictionaryBase.System#Collections#IDictionary#Add","System::Collections::DictionaryBase::System#Collections#IDictionary#Add","System.Collections.DictionaryBase.System#Collections#IDictionary#Contains","System::Collections::DictionaryBase::System#Collections#IDictionary#Contains","System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize","System::Collections::DictionaryBase::System#Collections#IDictionary#IsFixedSize","System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly","System::Collections::DictionaryBase::System#Collections#IDictionary#IsReadOnly","System.Collections.DictionaryBase.System#Collections#IDictionary#Item","System::Collections::DictionaryBase::System#Collections#IDictionary#Item","System.Collections.DictionaryBase.System#Collections#IDictionary#Keys","System::Collections::DictionaryBase::System#Collections#IDictionary#Keys","System.Collections.DictionaryBase.System#Collections#IDictionary#Remove","System::Collections::DictionaryBase::System#Collections#IDictionary#Remove","System.Collections.DictionaryBase.System#Collections#IDictionary#Values","System::Collections::DictionaryBase::System#Collections#IDictionary#Values","System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator","System::Collections::DictionaryBase::System#Collections#IEnumerable#GetEnumerator"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"96bd8af3-b7fa-e8eb-339b-b5d17aa9d996","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/DictionaryBase.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DictionaryBase class | Microsoft Docs","_op_ogTitle":"DictionaryBase class","description":"Provides the abstract base class for a strongly typed collection of key/value pairs.\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.DictionaryBase","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.dictionarybase","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.dictionarybase","fileRelativePath":"System.Collections.DictionaryBase.html"},"themesRelativePathToOutputRoot":"_themes/"}