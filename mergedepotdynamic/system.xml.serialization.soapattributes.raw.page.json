{"content":"    \r\n    <h1 id=\"System_Xml_Serialization_SoapAttributes\">\r\n      <span class=\"lang-csharp\">SoapAttributes</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a collection of attribute objects that control how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes and deserializes SOAP methods.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class SoapAttributes</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SoapAttributes</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Creating a SoapAttributes is part of a process that overrides the default way the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes class instances. For example, suppose you want to serialize an object that is created from a DLL that has an inaccessible source. By using the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> class, you can augment or otherwise control how the object is serialized.  </p>\n<p> The members of the SoapAttributes class correspond directly to a family of attribute classes that control serialization. For example, the <a class=\"xref\" href=\"system.xml.serialization.soapattributes#System_Xml_Serialization_SoapAttributes_SoapAttribute_\" data-linktype=\"relative-path\">SoapAttribute</a> property must be set to a <a class=\"xref\" href=\"system.xml.serialization.soapattributeattribute\" data-linktype=\"relative-path\">SoapAttributeAttribute</a>, which allows you to override serialization of a field or property by instructing the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> to serialize the property value as an encoded SOAP attribute. For a complete list of attributes that control encoded SOAP serialization, see <a href=\"../Topic/Attributes%20That%20Control%20Encoded%20SOAP%20Serialization.md\" data-linktype=\"relative-path\">Attributes That Control Encoded SOAP Serialization</a>.  </p>\n<p> For more details about adding an instance of the SoapAttributes class to an instance of the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> class, see the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> class overview.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_SoapAttributes__ctor\" data-linktype=\"self-bookmark\">SoapAttributes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_SoapAttributes__ctor_System_Reflection_ICustomAttributeProvider_\" data-linktype=\"self-bookmark\">SoapAttributes(ICustomAttributeProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> class using the specified custom type.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_SoapAttributes_SoapAttribute\" data-linktype=\"self-bookmark\">SoapAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.xml.serialization.soapattributeattribute\" data-linktype=\"relative-path\">SoapAttributeAttribute</a> to override.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_SoapAttributes_SoapDefaultValue\" data-linktype=\"self-bookmark\">SoapDefaultValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the default value of an XML element or attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_SoapAttributes_SoapElement\" data-linktype=\"self-bookmark\">SoapElement</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.xml.serialization.soapelementattribute\" data-linktype=\"relative-path\">SoapElementAttribute</a> to override.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_SoapAttributes_SoapEnum\" data-linktype=\"self-bookmark\">SoapEnum</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a SOAP enumeration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_SoapAttributes_SoapIgnore\" data-linktype=\"self-bookmark\">SoapIgnore</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that specifies whether the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a public field or property as encoded SOAP XML.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Serialization_SoapAttributes_SoapType\" data-linktype=\"self-bookmark\">SoapType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an object that instructs the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> how to serialize an object type into encoded SOAP XML.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_SoapAttributes__ctor\">\r\n    \r\n            <a id=\"System_Xml_Serialization_SoapAttributes__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SoapAttributes()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SoapAttributes ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For each member or class instance whose serialization is being overridden, you must create a new <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a>. Set the properties for the <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> as appropriate to the member or object, then add the <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> to an instance of the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes a class named <code>Group</code>. The serialization of the <code>GroupName</code> and <code>IgnoreThis</code> fields and the members of the <code>GroupType</code> enumeration are overridden. In the <code>CreateOverrideSerializer</code> method, a <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> is created, and for each overridden member or enumeration, a <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> is created with the appropriate property set and added to the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>. An <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> is created using the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>, and that <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> is used to create the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> that overrides the default serialization.  </p>\n<pre><code class=\"lang-cpp\" name=\"SoapAttributesOverrides#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\nusing namespace System::Xml::Schema;\nref class Car;\n\n// SoapInclude allows Vehicle to accept Car type.\n\n[SoapInclude(Car::typeid)]\npublic ref class Vehicle abstract\n{\npublic:\n   String^ licenseNumber;\n   DateTime makeDate;\n};\n\npublic ref class Car: public Vehicle{};\n\npublic enum class GroupType\n{\n   // These enums can be overridden.\n   [SoapEnum(&quot;Small&quot;)]\n   A,\n   [SoapEnum(&quot;Large&quot;)]\n   B\n};\n\npublic ref class Group\n{\npublic:\n\n   [SoapAttributeAttribute(Namespace=&quot;http://www.cpandl.com&quot;)]\n   String^ GroupName;\n\n   [SoapAttributeAttribute(DataType=&quot;base64Binary&quot;)]\n   array&lt;Byte&gt;^GroupNumber;\n\n   [SoapAttributeAttribute(DataType=&quot;date&quot;,AttributeName=&quot;CreationDate&quot;)]\n   DateTime Today;\n\n   [SoapElement(DataType=&quot;nonNegativeInteger&quot;,ElementName=&quot;PosInt&quot;)]\n   String^ PostitiveInt;\n\n   // This is ignored when serialized unless it&#39;s overridden.\n\n   [SoapIgnore]\n   bool IgnoreThis;\n   GroupType Grouptype;\n   Vehicle^ MyVehicle;\n\n   // The SoapInclude allows the method to return a Car.\n\n   [SoapInclude(Car::typeid)]\n   Vehicle^ myCar( String^ licNumber )\n   {\n      Vehicle^ v;\n      if ( licNumber-&gt;Equals( &quot;&quot; ) )\n      {\n         v = gcnew Car;\n         v-&gt;licenseNumber = &quot;!!!!!!&quot;;\n      }\n      else\n      {\n         v = gcnew Car;\n         v-&gt;licenseNumber = licNumber;\n      }\n\n      return v;\n   }\n};\n\npublic ref class Run\n{\npublic:\n   static void main()\n   {\n      Run^ test = gcnew Run;\n      test-&gt;SerializeOriginal( &quot;SoapOriginal.xml&quot; );\n      test-&gt;SerializeOverride( &quot;SoapOverrides.xml&quot; );\n      test-&gt;DeserializeOriginal( &quot;SoapOriginal.xml&quot; );\n      test-&gt;DeserializeOverride( &quot;SoapOverrides.xml&quot; );\n   }\n\n   void SerializeOriginal( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter)-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( myMapping );\n      Group^ myGroup = MakeGroup();\n\n      // Writing the file requires a TextWriter.\n      XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n      writer-&gt;Formatting = Formatting::Indented;\n      writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n\n      // Serialize the class, and close the TextWriter.\n      mySerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;WriteEndElement();\n      writer-&gt;Close();\n   }\n\n   void SerializeOverride( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class\n      // that overrides the serialization.\n      XmlSerializer^ overRideSerializer = CreateOverrideSerializer();\n      Group^ myGroup = MakeGroup();\n\n      // Writing the file requires a TextWriter.\n      XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n      writer-&gt;Formatting = Formatting::Indented;\n      writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n\n      // Serialize the class, and close the TextWriter.\n      overRideSerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;WriteEndElement();\n      writer-&gt;Close();\n   }\n\nprivate:\n   Group^ MakeGroup()\n   {\n      // Create an instance of the class that will be serialized.\n      Group^ myGroup = gcnew Group;\n\n      // Set the object properties.\n      myGroup-&gt;GroupName = &quot;.NET&quot;;\n      array&lt;Byte&gt;^hexByte = {Convert::ToByte( 100 ),Convert::ToByte( 50 )};\n      myGroup-&gt;GroupNumber = hexByte;\n      DateTime myDate = DateTime(2002,5,2);\n      myGroup-&gt;Today = myDate;\n      myGroup-&gt;PostitiveInt = &quot;10000&quot;;\n      myGroup-&gt;IgnoreThis = true;\n      myGroup-&gt;Grouptype = GroupType::B;\n      Car^ thisCar = dynamic_cast&lt;Car^&gt;(myGroup-&gt;myCar( &quot;1234566&quot; ));\n      myGroup-&gt;MyVehicle = thisCar;\n      return myGroup;\n   }\n\npublic:\n   void DeserializeOriginal( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter)-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( myMapping );\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader^ reader = gcnew XmlTextReader( filename );\n      reader-&gt;ReadStartElement( &quot;wrapper&quot; );\n\n      // Deserialize and cast the object.\n      Group^ myGroup;\n      myGroup = dynamic_cast&lt;Group^&gt;(mySerializer-&gt;Deserialize( reader ));\n      reader-&gt;ReadEndElement();\n      reader-&gt;Close();\n   }\n\n   void DeserializeOverride( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer^ overRideSerializer = CreateOverrideSerializer();\n\n      // Reading the file requires an XmlTextReader.\n      XmlTextReader^ reader = gcnew XmlTextReader( filename );\n      reader-&gt;ReadStartElement( &quot;wrapper&quot; );\n\n      // Deserialize and cast the object.\n      Group^ myGroup;\n      myGroup = dynamic_cast&lt;Group^&gt;(overRideSerializer-&gt;Deserialize( reader ));\n      reader-&gt;ReadEndElement();\n      reader-&gt;Close();\n      ReadGroup( myGroup );\n   }\n\nprivate:\n   void ReadGroup( Group^ myGroup )\n   {\n      Console::WriteLine( myGroup-&gt;GroupName );\n      Console::WriteLine( myGroup-&gt;GroupNumber[ 0 ] );\n      Console::WriteLine( myGroup-&gt;GroupNumber[ 1 ] );\n      Console::WriteLine( myGroup-&gt;Today );\n      Console::WriteLine( myGroup-&gt;PostitiveInt );\n      Console::WriteLine( myGroup-&gt;IgnoreThis );\n      Console::WriteLine();\n   }\n\n   XmlSerializer^ CreateOverrideSerializer()\n   {\n      SoapAttributeOverrides^ mySoapAttributeOverrides = gcnew SoapAttributeOverrides;\n      SoapAttributes^ soapAtts = gcnew SoapAttributes;\n      SoapElementAttribute^ mySoapElement = gcnew SoapElementAttribute;\n      mySoapElement-&gt;ElementName = &quot;xxxx&quot;;\n      soapAtts-&gt;SoapElement = mySoapElement;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, &quot;PostitiveInt&quot;, soapAtts );\n\n      // Override the IgnoreThis property.\n      SoapIgnoreAttribute^ myIgnore = gcnew SoapIgnoreAttribute;\n      soapAtts = gcnew SoapAttributes;\n      soapAtts-&gt;SoapIgnore = false;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, &quot;IgnoreThis&quot;, soapAtts );\n\n      // Override the GroupType enumeration. \n      soapAtts = gcnew SoapAttributes;\n      SoapEnumAttribute^ xSoapEnum = gcnew SoapEnumAttribute;\n      xSoapEnum-&gt;Name = &quot;Over1000&quot;;\n      soapAtts-&gt;GroupType::SoapEnum = xSoapEnum;\n\n      // Add the SoapAttributes to the \n      // mySoapAttributeOverridesrides object.\n      mySoapAttributeOverrides-&gt;Add( GroupType::typeid, &quot;A&quot;, soapAtts );\n\n      // Create second enumeration and add it.\n      soapAtts = gcnew SoapAttributes;\n      xSoapEnum = gcnew SoapEnumAttribute;\n      xSoapEnum-&gt;Name = &quot;ZeroTo1000&quot;;\n      soapAtts-&gt;GroupType::SoapEnum = xSoapEnum;\n      mySoapAttributeOverrides-&gt;Add( GroupType::typeid, &quot;B&quot;, soapAtts );\n\n      // Override the Group type.\n      soapAtts = gcnew SoapAttributes;\n      SoapTypeAttribute^ soapType = gcnew SoapTypeAttribute;\n      soapType-&gt;TypeName = &quot;Team&quot;;\n      soapAtts-&gt;SoapType = soapType;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, soapAtts );\n\n      // Create an XmlTypeMapping that is used to create an instance \n      // of the XmlSerializer. Then return the XmlSerializer object.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter( mySoapAttributeOverrides ))-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ ser = gcnew XmlSerializer( myMapping );\n      return ser;\n   }\n};\n\nint main()\n{\n   Run::main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"SoapAttributesOverrides#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Xml\nImports System.Xml.Serialization\nImports System.Xml.Schema\n\nPublic Class Group\n   &lt;SoapAttribute (Namespace:= &quot;http:&#39;www.cpandl.com&quot;)&gt; _\n   Public GroupName As String \n   \n   &lt;SoapAttribute(DataType:= &quot;base64Binary&quot;)&gt; _\n   Public GroupNumber() As Byte\n\n   &lt;SoapAttribute(DataType:= &quot;date&quot;, _\n   AttributeName:= &quot;CreationDate&quot;)&gt; _\n   Public Today As DateTime \n   &lt;SoapElement(DataType:= &quot;nonNegativeInteger&quot;, _\n   ElementName:= &quot;PosInt&quot;)&gt; _\n   Public PostitiveInt As String \n   &#39; This is ignored when serialized unless it&#39;s overridden.\n   &lt;SoapIgnore&gt; _ \n   Public IgnoreThis As Boolean \n   \n   Public Grouptype As GroupType \n\n   Public MyVehicle As Vehicle \n\n   &#39;  The SoapInclude allows the method to return a Car.\n   &lt;SoapInclude(GetType(Car))&gt; _\n   Public Function myCar(licNumber As String ) As Vehicle \n      Dim v As Vehicle \n      if licNumber = &quot;&quot; Then\n         v = New Car()\n         v.licenseNumber = &quot;!!!!!!&quot;\n      else  \n   \t   v = New Car()\n   \t   v.licenseNumber = licNumber\n      End If\n      \n      return v\n   End Function\nEnd Class\n  \n&#39; SoapInclude allows Vehicle to accept Car type.\n&lt;SoapInclude(GetType(Car))&gt; _\nPublic MustInherit  class Vehicle\n   Public licenseNumber As String \n   Public makeDate As DateTime \nEnd Class\n\nPublic Class Car\n   Inherits Vehicle\n\nEnd Class\n\nPublic enum GroupType\n   &#39; These enums can be overridden.\n   &lt;SoapEnum(&quot;Small&quot;)&gt; _\n   A\n   &lt;SoapEnum(&quot;Large&quot;)&gt; _ \n   B\nEnd Enum\n \nPublic Class Run\n\n   Shared Sub Main()\n      Dim test As Run = New Run()\n      test.SerializeOriginal(&quot;SoapOriginal.xml&quot;)\n      test.SerializeOverride(&quot;SoapOverrides.xml&quot;)\n      test.DeserializeOriginal(&quot;SoapOriginal.xml&quot;)\n      test.DeserializeOverride(&quot;SoapOverrides.xml&quot;)\n   End SUb\n   \n   Public Sub SerializeOriginal(filename As String)\n\n      &#39; Create an instance of the XmlSerializer class.\n      Dim myMapping As XmlTypeMapping = _\n      (New SoapReflectionImporter().ImportTypeMapping _\n      (GetType(Group)))\n      Dim mySerializer As XmlSerializer =  _\n      New XmlSerializer(myMapping)\n      \n      Dim myGroup As Group =MakeGroup()\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As XmlTextWriter  = _\n      New XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      &#39; Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup)\n      writer.WriteEndElement()\n      writer.Close()\n   End Sub\n\n   Public Sub SerializeOverride(filename As String)\n      &#39; Create an instance of the XmlSerializer class\n      &#39; that overrides the serialization.\n      Dim overRideSerializer As XmlSerializer = _\n      CreateOverrideSerializer()\n      Dim myGroup As Group =MakeGroup()\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As XmlTextWriter  = _\n      New XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      &#39; Serialize the class, and close the TextWriter.\n      overRideSerializer.Serialize(writer, myGroup)\n      writer.WriteEndElement()\n      writer.Close()\n    End Sub\n\n   private Function MakeGroup() As Group \n      &#39; Create an instance of the class that will be serialized.\n      Dim myGroup As Group  = New Group()\n\n      &#39; Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;\n\n      Dim hexByte()As Byte = new Byte(1){Convert.ToByte(100), _\n      Convert.ToByte(50)}\n      myGroup.GroupNumber = hexByte\n\n      Dim myDate As DateTime  = new DateTime(2002,5,2)\n      myGroup.Today = myDate\n\n      myGroup.PostitiveInt = &quot;10000&quot;\n\tmyGroup.IgnoreThis = true\n\tmyGroup.Grouptype = GroupType.B\n\tDim thisCar As Car \n\tthisCar =CType(myGroup.myCar(&quot;1234566&quot;), Car)\n\tmyGroup.myVehicle=thisCar\n      return myGroup\n   End Function   \t\n\n   Public Sub DeserializeOriginal(filename As String)\n      &#39; Create an instance of the XmlSerializer class.\n      Dim myMapping As XmlTypeMapping = _\n      (New SoapReflectionImporter().ImportTypeMapping _\n      (GetType(Group)))\n      Dim mySerializer As XmlSerializer =  _\n      New XmlSerializer(myMapping)\n\n      &#39; Reading the file requires an  XmlTextReader.\n      Dim reader As XmlTextReader = _\n      New XmlTextReader(filename)\n      reader.ReadStartElement(&quot;wrapper&quot;)\n\n      &#39; Deserialize and cast the object.\n      Dim myGroup As Group  = _\n      CType(mySerializer.Deserialize(reader), Group)\n      reader.ReadEndElement()\n      reader.Close()\n   End Sub\n\n   Public Sub DeserializeOverride(filename As String)\n      &#39; Create an instance of the XmlSerializer class.\n      Dim overRideSerializer As XmlSerializer  = _\n      CreateOverrideSerializer()\n\n      &#39; Reading the file requires an  XmlTextReader.\n      Dim reader As XmlTextReader = _\n      New XmlTextReader(filename)\n      reader.ReadStartElement(&quot;wrapper&quot;)\n\n      &#39; Deserialize and cast the object.\n      Dim myGroup As Group = _\n      CType(overRideSerializer.Deserialize(reader), Group)\n      reader.ReadEndElement()\n      reader.Close()\n      ReadGroup(myGroup)\n   End Sub\n\n   private Sub ReadGroup(myGroup As Group)\n      Console.WriteLine(myGroup.GroupName)\n      Console.WriteLine(myGroup.GroupNumber(0))\n      Console.WriteLine(myGroup.GroupNumber(1))\n      Console.WriteLine(myGroup.Today)\n      Console.WriteLine(myGroup.PostitiveInt)\n      Console.WriteLine(myGroup.IgnoreThis)\n      Console.WriteLine()\n   End Sub\n   \n   Private Function CreateOverrideSerializer() As XmlSerializer\n      Dim soapOver As SoapAttributeOverrides = New SoapAttributeOverrides()\n      Dim soapAtts As SoapAttributes = New SoapAttributes()\n\n      Dim mySoapElement As SoapElementAttribute = New SoapElementAttribute()\n      mySoapElement.ElementName = &quot;xxxx&quot;\n      soapAtts.SoapElement = mySoapElement\n      soapOver.Add(GetType(Group), &quot;PostitiveInt&quot;, soapAtts)\n\n      &#39; Override the IgnoreThis property.\n      Dim myIgnore As SoapIgnoreAttribute  = new SoapIgnoreAttribute()\n      soapAtts = New SoapAttributes()\n      soapAtts.SoapIgnore = false\n      soapOver.Add(GetType(Group), &quot;IgnoreThis&quot;, soapAtts)\n\n      &#39; Override the GroupType enumeration.\n      soapAtts = New SoapAttributes()\n      Dim xSoapEnum As SoapEnumAttribute = new SoapEnumAttribute()\n      xSoapEnum.Name = &quot;Over1000&quot;\n      soapAtts.SoapEnum = xSoapEnum\n      &#39; Add the SoapAttributes to the SoapOverrides object.\n      soapOver.Add(GetType(GroupType), &quot;A&quot;, soapAtts)\n\n      &#39; Create second enumeration and add it.\n      soapAtts = New SoapAttributes()\n      xSoapEnum = New SoapEnumAttribute()\n      xSoapEnum.Name = &quot;ZeroTo1000&quot;\n      soapAtts.SoapEnum = xSoapEnum\n      soapOver.Add(GetType(GroupType), &quot;B&quot;, soapAtts)\n\n      &#39; Override the Group type.\n      soapAtts = New SoapAttributes()\n      Dim soapType As SoapTypeAttribute = New SoapTypeAttribute()\n      soapType.TypeName = &quot;Team&quot;\n      soapAtts.SoapType = soapType\n      soapOver.Add(GetType(Group),soapAtts)\n\t\n      Dim myMapping As XmlTypeMapping = (New SoapReflectionImporter( _\n      soapOver)).ImportTypeMapping(GetType(Group))\n\t\n       Dim ser As XmlSerializer = new XmlSerializer(myMapping)\n      return ser\n   End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"SoapAttributesOverrides#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing System.Xml.Schema;\n\npublic class Group\n{\n   [SoapAttribute (Namespace = &quot;http://www.cpandl.com&quot;)]\n   public string GroupName;\n   \n   [SoapAttribute(DataType = &quot;base64Binary&quot;)]\n   public Byte [] GroupNumber;\n\n   [SoapAttribute(DataType = &quot;date&quot;, AttributeName = &quot;CreationDate&quot;)]\n   public DateTime Today;\n   [SoapElement(DataType = &quot;nonNegativeInteger&quot;, ElementName = &quot;PosInt&quot;)]\n   public string PostitiveInt;\n   // This is ignored when serialized unless it&#39;s overridden.\n   [SoapIgnore] \n   public bool IgnoreThis;\n   \n   public GroupType Grouptype;\n\n   public Vehicle MyVehicle;\n\n   // The SoapInclude allows the method to return a Car.\n   [SoapInclude(typeof(Car))]\n   public Vehicle myCar(string licNumber)\n   {\n      Vehicle v;\n      if(licNumber == &quot;&quot;)\n         {\n            v = new Car();\n   \t    v.licenseNumber = &quot;!!!!!!&quot;;\n   \t }\n      else\n   \t {\n   \t   v = new Car();\n   \t   v.licenseNumber = licNumber;\n   \t }\n      return v;\n   }\n}\n  \n// SoapInclude allows Vehicle to accept Car type.\n[SoapInclude(typeof(Car))]\npublic abstract class Vehicle\n{\n   public string licenseNumber;\n   public DateTime makeDate;\n}\n\npublic class Car: Vehicle\n{\n}\n\npublic enum GroupType\n{\n   // These enums can be overridden.\n   [SoapEnum(&quot;Small&quot;)]\n   A,\n   [SoapEnum(&quot;Large&quot;)]\n   B\n}\n \npublic class Run\n{\n   public static void Main()\n   {\n      Run test = new Run();\n      test.SerializeOriginal(&quot;SoapOriginal.xml&quot;);\n      test.SerializeOverride(&quot;SoapOverrides.xml&quot;);\n      test.DeserializeOriginal(&quot;SoapOriginal.xml&quot;);\n      test.DeserializeOverride(&quot;SoapOverrides.xml&quot;);\n   \n   }\n   public void SerializeOriginal(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping myMapping = \n      (new SoapReflectionImporter().ImportTypeMapping(\n      typeof(Group)));\n      XmlSerializer mySerializer =  \n      new XmlSerializer(myMapping);\n      Group myGroup=MakeGroup();\n      // Writing the file requires a TextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      // Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup);\n      writer.WriteEndElement();\n      writer.Close();\n   }\n\n   public void SerializeOverride(string filename)\n   {\n      // Create an instance of the XmlSerializer class\n      // that overrides the serialization.\n      XmlSerializer overRideSerializer = CreateOverrideSerializer();\n      Group myGroup=MakeGroup();\n      // Writing the file requires a TextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      // Serialize the class, and close the TextWriter.\n      overRideSerializer.Serialize(writer, myGroup);\n      writer.WriteEndElement();\n      writer.Close();\n\n   }\n\n   private Group MakeGroup(){\n      // Create an instance of the class that will be serialized.\n      Group myGroup = new Group();\n\n      // Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;;\n\n      Byte [] hexByte = new Byte[2]{Convert.ToByte(100),\n      Convert.ToByte(50)};\n      myGroup.GroupNumber = hexByte;\n\n      DateTime myDate = new DateTime(2002,5,2);\n      myGroup.Today = myDate;\n      myGroup.PostitiveInt= &quot;10000&quot;;\n      myGroup.IgnoreThis=true;\n      myGroup.Grouptype= GroupType.B;\n      Car thisCar =(Car)  myGroup.myCar(&quot;1234566&quot;);\n      myGroup.MyVehicle=thisCar;\n      return myGroup;\n   }   \t\n\n   public void DeserializeOriginal(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping myMapping = \n      (new SoapReflectionImporter().ImportTypeMapping(\n      typeof(Group)));\n      XmlSerializer mySerializer =  \n      new XmlSerializer(myMapping);\n\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader reader= \n      new XmlTextReader(filename);\n      reader.ReadStartElement(&quot;wrapper&quot;);\n\n      // Deserialize and cast the object.\n      Group myGroup; \n      myGroup = (Group) mySerializer.Deserialize(reader);\n      reader.ReadEndElement();\n      reader.Close();\n\n   }\n\n   public void DeserializeOverride(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer overRideSerializer = CreateOverrideSerializer();\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader reader= \n      new XmlTextReader(filename);\n      reader.ReadStartElement(&quot;wrapper&quot;);\n\n      // Deserialize and cast the object.\n      Group myGroup; \n      myGroup = (Group) overRideSerializer.Deserialize(reader);\n      reader.ReadEndElement();\n      reader.Close();\n      ReadGroup(myGroup);\n   }\n\n   private void ReadGroup(Group myGroup){\n      Console.WriteLine(myGroup.GroupName);\n      Console.WriteLine(myGroup.GroupNumber[0]);\n      Console.WriteLine(myGroup.GroupNumber[1]);\n      Console.WriteLine(myGroup.Today);\n      Console.WriteLine(myGroup.PostitiveInt);\n      Console.WriteLine(myGroup.IgnoreThis);\n      Console.WriteLine();\n   }\n   private XmlSerializer CreateOverrideSerializer()\n   {\n      SoapAttributeOverrides mySoapAttributeOverrides = \n      new SoapAttributeOverrides();\n      SoapAttributes soapAtts = new SoapAttributes();\n\n      SoapElementAttribute mySoapElement = new SoapElementAttribute();\n      mySoapElement.ElementName = &quot;xxxx&quot;;\n      soapAtts.SoapElement = mySoapElement;\n      mySoapAttributeOverrides.Add(typeof(Group), &quot;PostitiveInt&quot;, \n      soapAtts);\n\n      // Override the IgnoreThis property.\n      SoapIgnoreAttribute myIgnore = new SoapIgnoreAttribute();\n      soapAtts = new SoapAttributes();\n      soapAtts.SoapIgnore = false;      \n      mySoapAttributeOverrides.Add(typeof(Group), &quot;IgnoreThis&quot;, \n      soapAtts);\n\n      // Override the GroupType enumeration.\t\n      soapAtts = new SoapAttributes();\n      SoapEnumAttribute xSoapEnum = new SoapEnumAttribute();\n      xSoapEnum.Name = &quot;Over1000&quot;;\n      soapAtts.SoapEnum = xSoapEnum;\n\n      // Add the SoapAttributes to the \n      // mySoapAttributeOverridesrides object.\n      mySoapAttributeOverrides.Add(typeof(GroupType), &quot;A&quot;, \n      soapAtts);\n\n      // Create second enumeration and add it.\n      soapAtts = new SoapAttributes();\n      xSoapEnum = new SoapEnumAttribute();\n      xSoapEnum.Name = &quot;ZeroTo1000&quot;;\n      soapAtts.SoapEnum = xSoapEnum;\n      mySoapAttributeOverrides.Add(typeof(GroupType), &quot;B&quot;, \n      soapAtts);\n\n      // Override the Group type.\n      soapAtts = new SoapAttributes();\n      SoapTypeAttribute soapType = new SoapTypeAttribute();\n      soapType.TypeName = &quot;Team&quot;;\n      soapAtts.SoapType = soapType;\n      mySoapAttributeOverrides.Add(typeof(Group),soapAtts);\n\n      // Create an XmlTypeMapping that is used to create an instance \n      // of the XmlSerializer. Then return the XmlSerializer object.\n      XmlTypeMapping myMapping = (new SoapReflectionImporter(\n      mySoapAttributeOverrides)).ImportTypeMapping(typeof(Group));\n\t\n      XmlSerializer ser = new XmlSerializer(myMapping);\n      return ser;\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_SoapAttributes__ctor_System_Reflection_ICustomAttributeProvider_\">\r\n    \r\n            <a id=\"System_Xml_Serialization_SoapAttributes__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SoapAttributes(ICustomAttributeProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> class using the specified custom type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SoapAttributes (System.Reflection.ICustomAttributeProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Any object that implements the <a class=\"xref\" href=\"system.reflection.icustomattributeprovider\" data-linktype=\"relative-path\">ICustomAttributeProvider</a> interface, such as the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_SoapAttributes_SoapAttribute\">\r\n    \r\n            <a id=\"System_Xml_Serialization_SoapAttributes_SoapAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SoapAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.xml.serialization.soapattributeattribute\" data-linktype=\"relative-path\">SoapAttributeAttribute</a> to override.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.SoapAttributeAttribute SoapAttribute { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.soapattributeattribute\" data-linktype=\"relative-path\">SoapAttributeAttribute</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.serialization.soapattributeattribute\" data-linktype=\"relative-path\">SoapAttributeAttribute</a> that overrides the behavior of the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> when the member is serialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, if no attribute is applied to a public field or public read/write property, it is serialized as an XML element. You can also instruct the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> to serialize a member as an encoded SOAP XML attribute by applying a <a class=\"xref\" href=\"system.xml.serialization.soapattributeattribute\" data-linktype=\"relative-path\">SoapAttributeAttribute</a> to the field or property. (The <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> must be created with an <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> in order to serialize an object as an encoded SOAP XML stream.)  </p>\n<p> The SoapAttribute property allows you to override the serialization controlled by applying a <a class=\"xref\" href=\"system.xml.serialization.soapattributeattribute\" data-linktype=\"relative-path\">SoapAttributeAttribute</a> to the member. For more details on this process, see the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> class overview.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes a class named <code>Group</code>. The serialization of the <code>GroupName</code> and <code>IgnoreThis</code> fields and the members of the <code>GroupType</code> enumeration are overridden. In the <code>CreateOverrideSerializer</code> method, a <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> is created, and for each overridden member or enumeration, a <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> is created with the appropriate property set and added to the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>. An <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> is created using the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>, and that <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> is used to create the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> that overrides the default serialization.  </p>\n<pre><code class=\"lang-cpp\" name=\"SoapAttributesOverrides#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\nusing namespace System::Xml::Schema;\nref class Car;\n\n// SoapInclude allows Vehicle to accept Car type.\n\n[SoapInclude(Car::typeid)]\npublic ref class Vehicle abstract\n{\npublic:\n   String^ licenseNumber;\n   DateTime makeDate;\n};\n\npublic ref class Car: public Vehicle{};\n\npublic enum class GroupType\n{\n   // These enums can be overridden.\n   [SoapEnum(&quot;Small&quot;)]\n   A,\n   [SoapEnum(&quot;Large&quot;)]\n   B\n};\n\npublic ref class Group\n{\npublic:\n\n   [SoapAttributeAttribute(Namespace=&quot;http://www.cpandl.com&quot;)]\n   String^ GroupName;\n\n   [SoapAttributeAttribute(DataType=&quot;base64Binary&quot;)]\n   array&lt;Byte&gt;^GroupNumber;\n\n   [SoapAttributeAttribute(DataType=&quot;date&quot;,AttributeName=&quot;CreationDate&quot;)]\n   DateTime Today;\n\n   [SoapElement(DataType=&quot;nonNegativeInteger&quot;,ElementName=&quot;PosInt&quot;)]\n   String^ PostitiveInt;\n\n   // This is ignored when serialized unless it&#39;s overridden.\n\n   [SoapIgnore]\n   bool IgnoreThis;\n   GroupType Grouptype;\n   Vehicle^ MyVehicle;\n\n   // The SoapInclude allows the method to return a Car.\n\n   [SoapInclude(Car::typeid)]\n   Vehicle^ myCar( String^ licNumber )\n   {\n      Vehicle^ v;\n      if ( licNumber-&gt;Equals( &quot;&quot; ) )\n      {\n         v = gcnew Car;\n         v-&gt;licenseNumber = &quot;!!!!!!&quot;;\n      }\n      else\n      {\n         v = gcnew Car;\n         v-&gt;licenseNumber = licNumber;\n      }\n\n      return v;\n   }\n};\n\npublic ref class Run\n{\npublic:\n   static void main()\n   {\n      Run^ test = gcnew Run;\n      test-&gt;SerializeOriginal( &quot;SoapOriginal.xml&quot; );\n      test-&gt;SerializeOverride( &quot;SoapOverrides.xml&quot; );\n      test-&gt;DeserializeOriginal( &quot;SoapOriginal.xml&quot; );\n      test-&gt;DeserializeOverride( &quot;SoapOverrides.xml&quot; );\n   }\n\n   void SerializeOriginal( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter)-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( myMapping );\n      Group^ myGroup = MakeGroup();\n\n      // Writing the file requires a TextWriter.\n      XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n      writer-&gt;Formatting = Formatting::Indented;\n      writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n\n      // Serialize the class, and close the TextWriter.\n      mySerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;WriteEndElement();\n      writer-&gt;Close();\n   }\n\n   void SerializeOverride( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class\n      // that overrides the serialization.\n      XmlSerializer^ overRideSerializer = CreateOverrideSerializer();\n      Group^ myGroup = MakeGroup();\n\n      // Writing the file requires a TextWriter.\n      XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n      writer-&gt;Formatting = Formatting::Indented;\n      writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n\n      // Serialize the class, and close the TextWriter.\n      overRideSerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;WriteEndElement();\n      writer-&gt;Close();\n   }\n\nprivate:\n   Group^ MakeGroup()\n   {\n      // Create an instance of the class that will be serialized.\n      Group^ myGroup = gcnew Group;\n\n      // Set the object properties.\n      myGroup-&gt;GroupName = &quot;.NET&quot;;\n      array&lt;Byte&gt;^hexByte = {Convert::ToByte( 100 ),Convert::ToByte( 50 )};\n      myGroup-&gt;GroupNumber = hexByte;\n      DateTime myDate = DateTime(2002,5,2);\n      myGroup-&gt;Today = myDate;\n      myGroup-&gt;PostitiveInt = &quot;10000&quot;;\n      myGroup-&gt;IgnoreThis = true;\n      myGroup-&gt;Grouptype = GroupType::B;\n      Car^ thisCar = dynamic_cast&lt;Car^&gt;(myGroup-&gt;myCar( &quot;1234566&quot; ));\n      myGroup-&gt;MyVehicle = thisCar;\n      return myGroup;\n   }\n\npublic:\n   void DeserializeOriginal( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter)-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( myMapping );\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader^ reader = gcnew XmlTextReader( filename );\n      reader-&gt;ReadStartElement( &quot;wrapper&quot; );\n\n      // Deserialize and cast the object.\n      Group^ myGroup;\n      myGroup = dynamic_cast&lt;Group^&gt;(mySerializer-&gt;Deserialize( reader ));\n      reader-&gt;ReadEndElement();\n      reader-&gt;Close();\n   }\n\n   void DeserializeOverride( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer^ overRideSerializer = CreateOverrideSerializer();\n\n      // Reading the file requires an XmlTextReader.\n      XmlTextReader^ reader = gcnew XmlTextReader( filename );\n      reader-&gt;ReadStartElement( &quot;wrapper&quot; );\n\n      // Deserialize and cast the object.\n      Group^ myGroup;\n      myGroup = dynamic_cast&lt;Group^&gt;(overRideSerializer-&gt;Deserialize( reader ));\n      reader-&gt;ReadEndElement();\n      reader-&gt;Close();\n      ReadGroup( myGroup );\n   }\n\nprivate:\n   void ReadGroup( Group^ myGroup )\n   {\n      Console::WriteLine( myGroup-&gt;GroupName );\n      Console::WriteLine( myGroup-&gt;GroupNumber[ 0 ] );\n      Console::WriteLine( myGroup-&gt;GroupNumber[ 1 ] );\n      Console::WriteLine( myGroup-&gt;Today );\n      Console::WriteLine( myGroup-&gt;PostitiveInt );\n      Console::WriteLine( myGroup-&gt;IgnoreThis );\n      Console::WriteLine();\n   }\n\n   XmlSerializer^ CreateOverrideSerializer()\n   {\n      SoapAttributeOverrides^ mySoapAttributeOverrides = gcnew SoapAttributeOverrides;\n      SoapAttributes^ soapAtts = gcnew SoapAttributes;\n      SoapElementAttribute^ mySoapElement = gcnew SoapElementAttribute;\n      mySoapElement-&gt;ElementName = &quot;xxxx&quot;;\n      soapAtts-&gt;SoapElement = mySoapElement;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, &quot;PostitiveInt&quot;, soapAtts );\n\n      // Override the IgnoreThis property.\n      SoapIgnoreAttribute^ myIgnore = gcnew SoapIgnoreAttribute;\n      soapAtts = gcnew SoapAttributes;\n      soapAtts-&gt;SoapIgnore = false;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, &quot;IgnoreThis&quot;, soapAtts );\n\n      // Override the GroupType enumeration. \n      soapAtts = gcnew SoapAttributes;\n      SoapEnumAttribute^ xSoapEnum = gcnew SoapEnumAttribute;\n      xSoapEnum-&gt;Name = &quot;Over1000&quot;;\n      soapAtts-&gt;GroupType::SoapEnum = xSoapEnum;\n\n      // Add the SoapAttributes to the \n      // mySoapAttributeOverridesrides object.\n      mySoapAttributeOverrides-&gt;Add( GroupType::typeid, &quot;A&quot;, soapAtts );\n\n      // Create second enumeration and add it.\n      soapAtts = gcnew SoapAttributes;\n      xSoapEnum = gcnew SoapEnumAttribute;\n      xSoapEnum-&gt;Name = &quot;ZeroTo1000&quot;;\n      soapAtts-&gt;GroupType::SoapEnum = xSoapEnum;\n      mySoapAttributeOverrides-&gt;Add( GroupType::typeid, &quot;B&quot;, soapAtts );\n\n      // Override the Group type.\n      soapAtts = gcnew SoapAttributes;\n      SoapTypeAttribute^ soapType = gcnew SoapTypeAttribute;\n      soapType-&gt;TypeName = &quot;Team&quot;;\n      soapAtts-&gt;SoapType = soapType;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, soapAtts );\n\n      // Create an XmlTypeMapping that is used to create an instance \n      // of the XmlSerializer. Then return the XmlSerializer object.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter( mySoapAttributeOverrides ))-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ ser = gcnew XmlSerializer( myMapping );\n      return ser;\n   }\n};\n\nint main()\n{\n   Run::main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"SoapAttributesOverrides#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Xml\nImports System.Xml.Serialization\nImports System.Xml.Schema\n\nPublic Class Group\n   &lt;SoapAttribute (Namespace:= &quot;http:&#39;www.cpandl.com&quot;)&gt; _\n   Public GroupName As String \n   \n   &lt;SoapAttribute(DataType:= &quot;base64Binary&quot;)&gt; _\n   Public GroupNumber() As Byte\n\n   &lt;SoapAttribute(DataType:= &quot;date&quot;, _\n   AttributeName:= &quot;CreationDate&quot;)&gt; _\n   Public Today As DateTime \n   &lt;SoapElement(DataType:= &quot;nonNegativeInteger&quot;, _\n   ElementName:= &quot;PosInt&quot;)&gt; _\n   Public PostitiveInt As String \n   &#39; This is ignored when serialized unless it&#39;s overridden.\n   &lt;SoapIgnore&gt; _ \n   Public IgnoreThis As Boolean \n   \n   Public Grouptype As GroupType \n\n   Public MyVehicle As Vehicle \n\n   &#39;  The SoapInclude allows the method to return a Car.\n   &lt;SoapInclude(GetType(Car))&gt; _\n   Public Function myCar(licNumber As String ) As Vehicle \n      Dim v As Vehicle \n      if licNumber = &quot;&quot; Then\n         v = New Car()\n         v.licenseNumber = &quot;!!!!!!&quot;\n      else  \n   \t   v = New Car()\n   \t   v.licenseNumber = licNumber\n      End If\n      \n      return v\n   End Function\nEnd Class\n  \n&#39; SoapInclude allows Vehicle to accept Car type.\n&lt;SoapInclude(GetType(Car))&gt; _\nPublic MustInherit  class Vehicle\n   Public licenseNumber As String \n   Public makeDate As DateTime \nEnd Class\n\nPublic Class Car\n   Inherits Vehicle\n\nEnd Class\n\nPublic enum GroupType\n   &#39; These enums can be overridden.\n   &lt;SoapEnum(&quot;Small&quot;)&gt; _\n   A\n   &lt;SoapEnum(&quot;Large&quot;)&gt; _ \n   B\nEnd Enum\n \nPublic Class Run\n\n   Shared Sub Main()\n      Dim test As Run = New Run()\n      test.SerializeOriginal(&quot;SoapOriginal.xml&quot;)\n      test.SerializeOverride(&quot;SoapOverrides.xml&quot;)\n      test.DeserializeOriginal(&quot;SoapOriginal.xml&quot;)\n      test.DeserializeOverride(&quot;SoapOverrides.xml&quot;)\n   End SUb\n   \n   Public Sub SerializeOriginal(filename As String)\n\n      &#39; Create an instance of the XmlSerializer class.\n      Dim myMapping As XmlTypeMapping = _\n      (New SoapReflectionImporter().ImportTypeMapping _\n      (GetType(Group)))\n      Dim mySerializer As XmlSerializer =  _\n      New XmlSerializer(myMapping)\n      \n      Dim myGroup As Group =MakeGroup()\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As XmlTextWriter  = _\n      New XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      &#39; Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup)\n      writer.WriteEndElement()\n      writer.Close()\n   End Sub\n\n   Public Sub SerializeOverride(filename As String)\n      &#39; Create an instance of the XmlSerializer class\n      &#39; that overrides the serialization.\n      Dim overRideSerializer As XmlSerializer = _\n      CreateOverrideSerializer()\n      Dim myGroup As Group =MakeGroup()\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As XmlTextWriter  = _\n      New XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      &#39; Serialize the class, and close the TextWriter.\n      overRideSerializer.Serialize(writer, myGroup)\n      writer.WriteEndElement()\n      writer.Close()\n    End Sub\n\n   private Function MakeGroup() As Group \n      &#39; Create an instance of the class that will be serialized.\n      Dim myGroup As Group  = New Group()\n\n      &#39; Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;\n\n      Dim hexByte()As Byte = new Byte(1){Convert.ToByte(100), _\n      Convert.ToByte(50)}\n      myGroup.GroupNumber = hexByte\n\n      Dim myDate As DateTime  = new DateTime(2002,5,2)\n      myGroup.Today = myDate\n\n      myGroup.PostitiveInt = &quot;10000&quot;\n\tmyGroup.IgnoreThis = true\n\tmyGroup.Grouptype = GroupType.B\n\tDim thisCar As Car \n\tthisCar =CType(myGroup.myCar(&quot;1234566&quot;), Car)\n\tmyGroup.myVehicle=thisCar\n      return myGroup\n   End Function   \t\n\n   Public Sub DeserializeOriginal(filename As String)\n      &#39; Create an instance of the XmlSerializer class.\n      Dim myMapping As XmlTypeMapping = _\n      (New SoapReflectionImporter().ImportTypeMapping _\n      (GetType(Group)))\n      Dim mySerializer As XmlSerializer =  _\n      New XmlSerializer(myMapping)\n\n      &#39; Reading the file requires an  XmlTextReader.\n      Dim reader As XmlTextReader = _\n      New XmlTextReader(filename)\n      reader.ReadStartElement(&quot;wrapper&quot;)\n\n      &#39; Deserialize and cast the object.\n      Dim myGroup As Group  = _\n      CType(mySerializer.Deserialize(reader), Group)\n      reader.ReadEndElement()\n      reader.Close()\n   End Sub\n\n   Public Sub DeserializeOverride(filename As String)\n      &#39; Create an instance of the XmlSerializer class.\n      Dim overRideSerializer As XmlSerializer  = _\n      CreateOverrideSerializer()\n\n      &#39; Reading the file requires an  XmlTextReader.\n      Dim reader As XmlTextReader = _\n      New XmlTextReader(filename)\n      reader.ReadStartElement(&quot;wrapper&quot;)\n\n      &#39; Deserialize and cast the object.\n      Dim myGroup As Group = _\n      CType(overRideSerializer.Deserialize(reader), Group)\n      reader.ReadEndElement()\n      reader.Close()\n      ReadGroup(myGroup)\n   End Sub\n\n   private Sub ReadGroup(myGroup As Group)\n      Console.WriteLine(myGroup.GroupName)\n      Console.WriteLine(myGroup.GroupNumber(0))\n      Console.WriteLine(myGroup.GroupNumber(1))\n      Console.WriteLine(myGroup.Today)\n      Console.WriteLine(myGroup.PostitiveInt)\n      Console.WriteLine(myGroup.IgnoreThis)\n      Console.WriteLine()\n   End Sub\n   \n   Private Function CreateOverrideSerializer() As XmlSerializer\n      Dim soapOver As SoapAttributeOverrides = New SoapAttributeOverrides()\n      Dim soapAtts As SoapAttributes = New SoapAttributes()\n\n      Dim mySoapElement As SoapElementAttribute = New SoapElementAttribute()\n      mySoapElement.ElementName = &quot;xxxx&quot;\n      soapAtts.SoapElement = mySoapElement\n      soapOver.Add(GetType(Group), &quot;PostitiveInt&quot;, soapAtts)\n\n      &#39; Override the IgnoreThis property.\n      Dim myIgnore As SoapIgnoreAttribute  = new SoapIgnoreAttribute()\n      soapAtts = New SoapAttributes()\n      soapAtts.SoapIgnore = false\n      soapOver.Add(GetType(Group), &quot;IgnoreThis&quot;, soapAtts)\n\n      &#39; Override the GroupType enumeration.\n      soapAtts = New SoapAttributes()\n      Dim xSoapEnum As SoapEnumAttribute = new SoapEnumAttribute()\n      xSoapEnum.Name = &quot;Over1000&quot;\n      soapAtts.SoapEnum = xSoapEnum\n      &#39; Add the SoapAttributes to the SoapOverrides object.\n      soapOver.Add(GetType(GroupType), &quot;A&quot;, soapAtts)\n\n      &#39; Create second enumeration and add it.\n      soapAtts = New SoapAttributes()\n      xSoapEnum = New SoapEnumAttribute()\n      xSoapEnum.Name = &quot;ZeroTo1000&quot;\n      soapAtts.SoapEnum = xSoapEnum\n      soapOver.Add(GetType(GroupType), &quot;B&quot;, soapAtts)\n\n      &#39; Override the Group type.\n      soapAtts = New SoapAttributes()\n      Dim soapType As SoapTypeAttribute = New SoapTypeAttribute()\n      soapType.TypeName = &quot;Team&quot;\n      soapAtts.SoapType = soapType\n      soapOver.Add(GetType(Group),soapAtts)\n\t\n      Dim myMapping As XmlTypeMapping = (New SoapReflectionImporter( _\n      soapOver)).ImportTypeMapping(GetType(Group))\n\t\n       Dim ser As XmlSerializer = new XmlSerializer(myMapping)\n      return ser\n   End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"SoapAttributesOverrides#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing System.Xml.Schema;\n\npublic class Group\n{\n   [SoapAttribute (Namespace = &quot;http://www.cpandl.com&quot;)]\n   public string GroupName;\n   \n   [SoapAttribute(DataType = &quot;base64Binary&quot;)]\n   public Byte [] GroupNumber;\n\n   [SoapAttribute(DataType = &quot;date&quot;, AttributeName = &quot;CreationDate&quot;)]\n   public DateTime Today;\n   [SoapElement(DataType = &quot;nonNegativeInteger&quot;, ElementName = &quot;PosInt&quot;)]\n   public string PostitiveInt;\n   // This is ignored when serialized unless it&#39;s overridden.\n   [SoapIgnore] \n   public bool IgnoreThis;\n   \n   public GroupType Grouptype;\n\n   public Vehicle MyVehicle;\n\n   // The SoapInclude allows the method to return a Car.\n   [SoapInclude(typeof(Car))]\n   public Vehicle myCar(string licNumber)\n   {\n      Vehicle v;\n      if(licNumber == &quot;&quot;)\n         {\n            v = new Car();\n   \t    v.licenseNumber = &quot;!!!!!!&quot;;\n   \t }\n      else\n   \t {\n   \t   v = new Car();\n   \t   v.licenseNumber = licNumber;\n   \t }\n      return v;\n   }\n}\n  \n// SoapInclude allows Vehicle to accept Car type.\n[SoapInclude(typeof(Car))]\npublic abstract class Vehicle\n{\n   public string licenseNumber;\n   public DateTime makeDate;\n}\n\npublic class Car: Vehicle\n{\n}\n\npublic enum GroupType\n{\n   // These enums can be overridden.\n   [SoapEnum(&quot;Small&quot;)]\n   A,\n   [SoapEnum(&quot;Large&quot;)]\n   B\n}\n \npublic class Run\n{\n   public static void Main()\n   {\n      Run test = new Run();\n      test.SerializeOriginal(&quot;SoapOriginal.xml&quot;);\n      test.SerializeOverride(&quot;SoapOverrides.xml&quot;);\n      test.DeserializeOriginal(&quot;SoapOriginal.xml&quot;);\n      test.DeserializeOverride(&quot;SoapOverrides.xml&quot;);\n   \n   }\n   public void SerializeOriginal(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping myMapping = \n      (new SoapReflectionImporter().ImportTypeMapping(\n      typeof(Group)));\n      XmlSerializer mySerializer =  \n      new XmlSerializer(myMapping);\n      Group myGroup=MakeGroup();\n      // Writing the file requires a TextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      // Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup);\n      writer.WriteEndElement();\n      writer.Close();\n   }\n\n   public void SerializeOverride(string filename)\n   {\n      // Create an instance of the XmlSerializer class\n      // that overrides the serialization.\n      XmlSerializer overRideSerializer = CreateOverrideSerializer();\n      Group myGroup=MakeGroup();\n      // Writing the file requires a TextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      // Serialize the class, and close the TextWriter.\n      overRideSerializer.Serialize(writer, myGroup);\n      writer.WriteEndElement();\n      writer.Close();\n\n   }\n\n   private Group MakeGroup(){\n      // Create an instance of the class that will be serialized.\n      Group myGroup = new Group();\n\n      // Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;;\n\n      Byte [] hexByte = new Byte[2]{Convert.ToByte(100),\n      Convert.ToByte(50)};\n      myGroup.GroupNumber = hexByte;\n\n      DateTime myDate = new DateTime(2002,5,2);\n      myGroup.Today = myDate;\n      myGroup.PostitiveInt= &quot;10000&quot;;\n      myGroup.IgnoreThis=true;\n      myGroup.Grouptype= GroupType.B;\n      Car thisCar =(Car)  myGroup.myCar(&quot;1234566&quot;);\n      myGroup.MyVehicle=thisCar;\n      return myGroup;\n   }   \t\n\n   public void DeserializeOriginal(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping myMapping = \n      (new SoapReflectionImporter().ImportTypeMapping(\n      typeof(Group)));\n      XmlSerializer mySerializer =  \n      new XmlSerializer(myMapping);\n\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader reader= \n      new XmlTextReader(filename);\n      reader.ReadStartElement(&quot;wrapper&quot;);\n\n      // Deserialize and cast the object.\n      Group myGroup; \n      myGroup = (Group) mySerializer.Deserialize(reader);\n      reader.ReadEndElement();\n      reader.Close();\n\n   }\n\n   public void DeserializeOverride(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer overRideSerializer = CreateOverrideSerializer();\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader reader= \n      new XmlTextReader(filename);\n      reader.ReadStartElement(&quot;wrapper&quot;);\n\n      // Deserialize and cast the object.\n      Group myGroup; \n      myGroup = (Group) overRideSerializer.Deserialize(reader);\n      reader.ReadEndElement();\n      reader.Close();\n      ReadGroup(myGroup);\n   }\n\n   private void ReadGroup(Group myGroup){\n      Console.WriteLine(myGroup.GroupName);\n      Console.WriteLine(myGroup.GroupNumber[0]);\n      Console.WriteLine(myGroup.GroupNumber[1]);\n      Console.WriteLine(myGroup.Today);\n      Console.WriteLine(myGroup.PostitiveInt);\n      Console.WriteLine(myGroup.IgnoreThis);\n      Console.WriteLine();\n   }\n   private XmlSerializer CreateOverrideSerializer()\n   {\n      SoapAttributeOverrides mySoapAttributeOverrides = \n      new SoapAttributeOverrides();\n      SoapAttributes soapAtts = new SoapAttributes();\n\n      SoapElementAttribute mySoapElement = new SoapElementAttribute();\n      mySoapElement.ElementName = &quot;xxxx&quot;;\n      soapAtts.SoapElement = mySoapElement;\n      mySoapAttributeOverrides.Add(typeof(Group), &quot;PostitiveInt&quot;, \n      soapAtts);\n\n      // Override the IgnoreThis property.\n      SoapIgnoreAttribute myIgnore = new SoapIgnoreAttribute();\n      soapAtts = new SoapAttributes();\n      soapAtts.SoapIgnore = false;      \n      mySoapAttributeOverrides.Add(typeof(Group), &quot;IgnoreThis&quot;, \n      soapAtts);\n\n      // Override the GroupType enumeration.\t\n      soapAtts = new SoapAttributes();\n      SoapEnumAttribute xSoapEnum = new SoapEnumAttribute();\n      xSoapEnum.Name = &quot;Over1000&quot;;\n      soapAtts.SoapEnum = xSoapEnum;\n\n      // Add the SoapAttributes to the \n      // mySoapAttributeOverridesrides object.\n      mySoapAttributeOverrides.Add(typeof(GroupType), &quot;A&quot;, \n      soapAtts);\n\n      // Create second enumeration and add it.\n      soapAtts = new SoapAttributes();\n      xSoapEnum = new SoapEnumAttribute();\n      xSoapEnum.Name = &quot;ZeroTo1000&quot;;\n      soapAtts.SoapEnum = xSoapEnum;\n      mySoapAttributeOverrides.Add(typeof(GroupType), &quot;B&quot;, \n      soapAtts);\n\n      // Override the Group type.\n      soapAtts = new SoapAttributes();\n      SoapTypeAttribute soapType = new SoapTypeAttribute();\n      soapType.TypeName = &quot;Team&quot;;\n      soapAtts.SoapType = soapType;\n      mySoapAttributeOverrides.Add(typeof(Group),soapAtts);\n\n      // Create an XmlTypeMapping that is used to create an instance \n      // of the XmlSerializer. Then return the XmlSerializer object.\n      XmlTypeMapping myMapping = (new SoapReflectionImporter(\n      mySoapAttributeOverrides)).ImportTypeMapping(typeof(Group));\n\t\n      XmlSerializer ser = new XmlSerializer(myMapping);\n      return ser;\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_SoapAttributes_SoapDefaultValue\">\r\n    \r\n            <a id=\"System_Xml_Serialization_SoapAttributes_SoapDefaultValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SoapDefaultValue</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the default value of an XML element or attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object SoapDefaultValue { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that represents the default value of an XML element or attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default value of a member can be set by applying a <a class=\"xref\" href=\"system.componentmodel.defaultvalueattribute\" data-linktype=\"relative-path\">DefaultValueAttribute</a> attribute to the member. If the member is being serialized as an encoded SOAP message, you can change the default value by creating a new <a class=\"xref\" href=\"system.componentmodel.defaultvalueattribute\" data-linktype=\"relative-path\">DefaultValueAttribute</a>, setting its <a class=\"xref\" href=\"system.componentmodel.defaultvalueattribute#System_ComponentModel_DefaultValueAttribute_Value_\" data-linktype=\"relative-path\">Value</a> property, and setting the SoapDefaultValue property to the object. Add the <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> to a <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>. For more details, see the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> class overview.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes a class named <code>Group</code> that includes a field named <code>GroupName</code>. The default value is set with the <a class=\"xref\" href=\"system.componentmodel.defaultvalueattribute\" data-linktype=\"relative-path\">DefaultValueAttribute</a> to &quot;.NET&quot;. By either not setting the field, or by setting it to &quot;.NET&quot;, the value is not serialized (because the default value is already known). The sample also overrides the default value in the <code>CreateOverrideSerializer</code> method, which is called by the <code>SerializeOverride</code> method. The example calls both methods, <code>SerializeOriginal</code> and <code>SerializeOverride</code>, and sets the same value (&quot;.NET&quot;) for the <code>GroupName</code> field. Because of the override, the value is serialized only when calling the <code>SerializeOverride</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"SoapAttribues.SoapDefaultValue#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing System.Xml.Schema;\nusing System.ComponentModel;\n\npublic class Group\n{\n   // The default is set to .NET.\n   [DefaultValue(&quot;.NET&quot;)]\n   public string GroupName;\n}\n \npublic class Run\n{\n   public static void Main()\n   {\n      Run test = new Run();\n      test.SerializeOriginal(&quot;SoapOriginal.xml&quot;);\n      test.SerializeOverride(&quot;mySoapAttributeOverridesideAttributes.xml&quot;);\n      test.DeserializeOriginal(&quot;SoapOriginal.xml&quot;);\n      test.DeserializeOverride(&quot;mySoapAttributeOverridesideAttributes.xml&quot;);\n   }\n   public void SerializeOriginal(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer mySerializer =  \n      new XmlSerializer(typeof(Group));\n\n      // Writing the file requires a TextWriter.\n      TextWriter writer = new StreamWriter(filename);\n\n      // Create an instance of the class that will be serialized.\n      Group myGroup = new Group();\n\n      // Setting the GroupName to &#39;.NET&#39; is like not setting it at all\n      // because it is the default value. So no value will be \n      // serialized, and on deserialization it will appear as a blank.\n      myGroup.GroupName = &quot;.NET&quot;;\n\n      // Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup);\n      writer.Close();\n   }\n\n   public void SerializeOverride(string filename)\n   {\n      // Create an instance of the XmlSerializer class\n      // that overrides the serialization.\n      XmlSerializer overRideSerializer = CreateOverrideSerializer();\n\n      // Writing the file requires a TextWriter.\n      TextWriter writer = new StreamWriter(filename);\n\n      // Create an instance of the class that will be serialized.\n      Group myGroup = new Group();\n\n      // The override specifies that the default value is now \n      // &#39;Team1&#39;. So setting the GroupName to &#39;.NET&#39; means\n      // the value will be serialized.\n      myGroup.GroupName = &quot;.NET&quot;;\n      // Serialize the class, and close the TextWriter.\n      overRideSerializer.Serialize(writer, myGroup);\n       writer.Close();\n\n   }\n\n\n   public void DeserializeOriginal(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer mySerializer= new XmlSerializer(typeof(Group));\n      // Reading the file requires a TextReader.\n      TextReader reader = new StreamReader(filename);\n\n      // Deserialize and cast the object.\n      Group myGroup; \n      myGroup = (Group) mySerializer.Deserialize(reader);\n\n      Console.WriteLine(myGroup.GroupName);\n      Console.WriteLine();\n   }\n\n   public void DeserializeOverride(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer overRideSerializer = CreateOverrideSerializer();\n      // Reading the file requires a TextReader.\n      TextReader reader = new StreamReader(filename);\n\n      // Deserialize and cast the object.\n      Group myGroup; \n      myGroup = (Group) overRideSerializer.Deserialize(reader);\n\n      Console.WriteLine(myGroup.GroupName);\n\n   }\n\n   private XmlSerializer CreateOverrideSerializer()\n   {\n      SoapAttributeOverrides mySoapAttributeOverrides = \n      new SoapAttributeOverrides();\n      SoapAttributes soapAtts = new SoapAttributes();\n      // Create a new DefaultValueAttribute object for the GroupName\n      // property.\n      DefaultValueAttribute newDefault = \n      new DefaultValueAttribute(&quot;Team1&quot;);\n      soapAtts.SoapDefaultValue = newDefault;\n\n      mySoapAttributeOverrides.Add(typeof(Group), &quot;GroupName&quot;, \n      soapAtts);\n      \n      // Create an XmlTypeMapping that is used to create an instance \n      // of the XmlSerializer. Then return the XmlSerializer object.\n      XmlTypeMapping myMapping = (new SoapReflectionImporter(\n      mySoapAttributeOverrides)).ImportTypeMapping(typeof(Group));\n\t\n      XmlSerializer ser = new XmlSerializer(myMapping);\n      return ser;\n   }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"SoapAttribues.SoapDefaultValue#1\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\nusing namespace System::Xml::Schema;\nusing namespace System::ComponentModel;\npublic ref class Group\n{\npublic:\n\n   // The default is set to .NET.\n\n   [DefaultValue(&quot;.NET&quot;)]\n   String^ GroupName;\n};\n\npublic ref class Run\n{\npublic:\n   void SerializeOriginal( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( Group::typeid );\n\n      // Writing the file requires a TextWriter.\n      TextWriter^ writer = gcnew StreamWriter( filename );\n\n      // Create an instance of the class that will be serialized.\n      Group^ myGroup = gcnew Group;\n\n      // Setting the GroupName to &#39;.NET&#39; is like not setting it at all\n      // because it is the default value. So no value will be \n      // serialized, and on deserialization it will appear as a blank.\n      myGroup-&gt;GroupName = &quot;.NET&quot;;\n\n      // Serialize the class, and close the TextWriter.\n      mySerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;Close();\n   }\n\n   void SerializeOverride( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class\n      // that overrides the serialization.\n      XmlSerializer^ overRideSerializer = CreateOverrideSerializer();\n\n      // Writing the file requires a TextWriter.\n      TextWriter^ writer = gcnew StreamWriter( filename );\n\n      // Create an instance of the class that will be serialized.\n      Group^ myGroup = gcnew Group;\n\n      // The  specifies that the default value is now \n      // &#39;Team1&#39;. So setting the GroupName to &#39;.NET&#39; means\n      // the value will be serialized.\n      myGroup-&gt;GroupName = &quot;.NET&quot;;\n\n      // Serialize the class, and close the TextWriter.\n      overRideSerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;Close();\n   }\n\n   void DeserializeOriginal( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( Group::typeid );\n\n      // Reading the file requires a TextReader.\n      TextReader^ reader = gcnew StreamReader( filename );\n\n      // Deserialize and cast the Object*.\n      Group^ myGroup;\n      myGroup = safe_cast&lt;Group^&gt;(mySerializer-&gt;Deserialize( reader ));\n      Console::WriteLine( myGroup-&gt;GroupName );\n      Console::WriteLine();\n   }\n\n   void DeserializeOverride( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer^ overRideSerializer = CreateOverrideSerializer();\n\n      // Reading the file requires a TextReader.\n      TextReader^ reader = gcnew StreamReader( filename );\n\n      // Deserialize and cast the Object*.\n      Group^ myGroup;\n      myGroup = safe_cast&lt;Group^&gt;(overRideSerializer-&gt;Deserialize( reader ));\n      Console::WriteLine( myGroup-&gt;GroupName );\n   }\n\nprivate:\n   XmlSerializer^ CreateOverrideSerializer()\n   {\n      SoapAttributeOverrides^ mySoapAttributeOverrides = gcnew SoapAttributeOverrides;\n      SoapAttributes^ soapAtts = gcnew SoapAttributes;\n\n      // Create a new DefaultValueAttribute Object* for the GroupName\n      // property.\n      DefaultValueAttribute^ newDefault = gcnew DefaultValueAttribute( &quot;Team1&quot; );\n      soapAtts-&gt;SoapDefaultValue = newDefault;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, &quot;GroupName&quot;, soapAtts );\n\n      // Create an XmlTypeMapping that is used to create an instance \n      // of the XmlSerializer. Then return the XmlSerializer Object*.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter( mySoapAttributeOverrides ))-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ ser = gcnew XmlSerializer( myMapping );\n      return ser;\n   }\n};\n\nint main()\n{\n   Run^ test = gcnew Run;\n   test-&gt;SerializeOriginal( &quot;SoapOriginal.xml&quot; );\n   test-&gt;SerializeOverride( &quot;mySoapAttributeOverridesideAttributes.xml&quot; );\n   test-&gt;DeserializeOriginal( &quot;SoapOriginal.xml&quot; );\n   test-&gt;DeserializeOverride( &quot;mySoapAttributeOverridesideAttributes.xml&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"SoapAttribues.SoapDefaultValue#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Serialization\nImports System.Xml.Schema\nImports System.ComponentModel\n\nPublic Class Group\n   &#39; The default is set to .NET.\n   &lt;DefaultValue(&quot;.NET&quot;)&gt; _\n   Public GroupName As String\nEnd Class\n \nPublic Class Run\n\n   Public Shared Sub Main()\n   \n      Dim test As Run = new Run()\n      test.SerializeOriginal(&quot;SoapOriginal.xml&quot;)\n      test.SerializeOverride _\n      (&quot;mySoapAttributeOverridesideAttributes.xml&quot;)\n      test.DeserializeOriginal(&quot;SoapOriginal.xml&quot;)\n      test.DeserializeOverride _\n      (&quot;mySoapAttributeOverridesideAttributes.xml&quot;)\n   End Sub\n   \n   public Sub SerializeOriginal(filename As String)\n       &#39; Create an instance of the XmlSerializer class.\n      Dim mySerializer As XmlSerializer =  _\n      new XmlSerializer(GetType(Group))\n\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As TextWriter = new StreamWriter(filename)\n\n      &#39; Create an instance of the class that will be serialized.\n      Dim myGroup As Group = new Group()\n\n      &#39; Setting the GroupName to &#39;.NET&#39; is like not setting it at all\n      &#39; because it is the default value. So no value will be \n      &#39; serialized, and on deserialization it will appear as a blank.\n      myGroup.GroupName = &quot;.NET&quot;\n\n      &#39; Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup)\n      writer.Close()\n   End Sub\n\n   Public Sub SerializeOverride(filename As String)\n   \n      &#39; Create an instance of the XmlSerializer class\n      &#39; that overrides the serialization.\n      Dim overRideSerializer As XmlSerializer = CreateOverrideSerializer()\n\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As TextWriter = new StreamWriter(filename)\n\n      &#39; Create an instance of the class that will be serialized.\n      Dim myGroup As Group = new Group()\n\n      &#39; The override specifies that the default value is now \n      &#39; &#39;Team1&#39;. So setting the GroupName to &#39;.NET&#39; means\n      &#39; the value will be serialized.\n      myGroup.GroupName = &quot;.NET&quot;\n      &#39; Serialize the class, and close the TextWriter.\n      overRideSerializer.Serialize(writer, myGroup)\n       writer.Close()\n\n   End Sub\n\n\n   Public Sub DeserializeOriginal(filename As String)\n   \n      &#39; Create an instance of the XmlSerializer class.\n      Dim mySerializer As XmlSerializer = new XmlSerializer(GetType(Group))\n      &#39; Reading the file requires a TextReader.\n      Dim reader As TextReader = new StreamReader(filename)\n\n      &#39; Deserialize and cast the object.\n      Dim myGroup As Group = CType(mySerializer.Deserialize(reader), Group)\n\n      Console.WriteLine(myGroup.GroupName)\n      Console.WriteLine()\n   End Sub\n\n   Public Sub DeserializeOverride(filename As String)\n   \n      &#39; Create an instance of the XmlSerializer class.\n      Dim overRideSerializer As XmlSerializer = CreateOverrideSerializer()\n      &#39; Reading the file requires a TextReader.\n      Dim reader As TextReader = new StreamReader(filename)\n\n      &#39; Deserialize and cast the object.\n      Dim myGroup As Group = CType(overRideSerializer.Deserialize(reader), Group)\n\n      Console.WriteLine(myGroup.GroupName)\n\n   End Sub\n\n   Private Function CreateOverrideSerializer() As XmlSerializer \n   \n      Dim mySoapAttributeOverrides As SoapAttributeOverrides  = _\n      New SoapAttributeOverrides()\n      Dim soapAtts As SoapAttributes = New SoapAttributes()\n      &#39; Create a new DefaultValueAttribute object for the GroupName\n      &#39; property.\n      Dim newDefault As DefaultValueAttribute = _\n      new DefaultValueAttribute(&quot;Team1&quot;)\n      soapAtts.SoapDefaultValue = newDefault\n\n     mySoapAttributeOverrides.Add(GetType(Group), &quot;GroupName&quot;, _\n     soapAtts)\n      \n      &#39; Create an XmlTypeMapping that is used to create an instance \n      &#39; of the XmlSerializer. Then return the XmlSerializer object.\n      Dim myMapping As XmlTypeMapping = _\n      (New SoapReflectionImporter( _\n      mySoapAttributeOverrides)).ImportTypeMapping(GetType(Group))\n\t\n      Dim ser As XmlSerializer = new XmlSerializer(myMapping)\n      return ser\n   End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_SoapAttributes_SoapElement\">\r\n    \r\n            <a id=\"System_Xml_Serialization_SoapAttributes_SoapElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SoapElement</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.xml.serialization.soapelementattribute\" data-linktype=\"relative-path\">SoapElementAttribute</a> to override.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.SoapElementAttribute SoapElement { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.soapelementattribute\" data-linktype=\"relative-path\">SoapElementAttribute</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.serialization.soapelementattribute\" data-linktype=\"relative-path\">SoapElementAttribute</a> to override.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.xml.serialization.soapelementattribute\" data-linktype=\"relative-path\">SoapElementAttribute</a> is used to control the serialization of a class member as an XML element. Set the SoapElement property to a new <a class=\"xref\" href=\"system.xml.serialization.soapelementattribute\" data-linktype=\"relative-path\">SoapElementAttribute</a> to override the serialization of a class member as an XML element by creating a new <a class=\"xref\" href=\"system.xml.serialization.soapelementattribute\" data-linktype=\"relative-path\">SoapElementAttribute</a> and assigning it to the property. Then add the <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> to a <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>. Create an <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> with the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>, then construct an <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> with the <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a>.  </p>\n<p> For more information, see the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> class overview.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes a class named <code>Transportation</code>. The serialization of the <code>Vehicle</code> field is overridden. In the <code>CreateOverrideSerializer</code> method, a <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> is created, and for each overridden member or enumeration, a <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> is created with the appropriate property set and added to the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>. An <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> is created using the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>, and that <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> is used to create the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> that overrides the default serialization.  </p>\n<pre><code class=\"lang-cpp\" name=\"SoapElementOverrides#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml::Serialization;\nusing namespace System::Collections;\nusing namespace System::Xml;\nusing namespace System::Text;\npublic ref class Thing\n{\npublic:\n\n   [SoapElement(IsNullable=true)]\n   String^ ThingName;\n};\n\npublic ref class Transportation\n{\npublic:\n\n   // The SoapElementAttribute specifies that the\n   // generated XML element name will be S&quot;Wheels&quot;\n   // instead of S&quot;Vehicle&quot;.\n\n   [SoapElement(&quot;Wheels&quot;)]\n   String^ Vehicle;\n\n   [SoapElement(DataType=&quot;dateTime&quot;)]\n   DateTime CreationDate;\n\n   [SoapElement(IsNullable=true)]\n   Thing^ thing;\n};\n\npublic ref class Test\n{\npublic:\n\n   // Return an XmlSerializer used for overriding.\n   XmlSerializer^ CreateSoapOverrider()\n   {\n      // Create the SoapAttributes and SoapAttributeOverrides objects.\n      SoapAttributes^ soapAttrs = gcnew SoapAttributes;\n      SoapAttributeOverrides^ soapOverrides = gcnew SoapAttributeOverrides;\n\n      // Create an SoapElementAttribute to the Vehicles property.\n      SoapElementAttribute^ soapElement1 = gcnew SoapElementAttribute( &quot;Truck&quot; );\n\n      // Set the SoapElement to the Object*.\n      soapAttrs-&gt;SoapElement = soapElement1;\n\n      // Add the SoapAttributes to the SoapAttributeOverrides,specifying the member to.\n      soapOverrides-&gt;Add( Transportation::typeid, &quot;Vehicle&quot;, soapAttrs );\n\n      // Create the XmlSerializer, and return it.\n      XmlTypeMapping^ myTypeMapping = (gcnew SoapReflectionImporter( soapOverrides ))-&gt;ImportTypeMapping( Transportation::typeid );\n      return gcnew XmlSerializer( myTypeMapping );\n   }\n\n   void SerializeOverride( String^ filename )\n   {\n      // Create an XmlSerializer instance.\n      XmlSerializer^ ser = CreateSoapOverrider();\n\n      // Create the Object* and serialize it.\n      Transportation^ myTransportation = gcnew Transportation;\n      myTransportation-&gt;Vehicle = &quot;MyCar&quot;;\n      myTransportation-&gt;CreationDate = DateTime::Now;\n      myTransportation-&gt;thing = gcnew Thing;\n      XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n      writer-&gt;Formatting = Formatting::Indented;\n      writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n      ser-&gt;Serialize( writer, myTransportation );\n      writer-&gt;WriteEndElement();\n      writer-&gt;Close();\n   }\n\n   void SerializeObject( String^ filename )\n   {\n      // Create an XmlSerializer instance.\n      XmlSerializer^ ser = gcnew XmlSerializer( Transportation::typeid );\n      Transportation^ myTransportation = gcnew Transportation;\n      myTransportation-&gt;Vehicle = &quot;MyCar&quot;;\n      myTransportation-&gt;CreationDate = DateTime::Now;\n      myTransportation-&gt;thing = gcnew Thing;\n      XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n      writer-&gt;Formatting = Formatting::Indented;\n      writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n      ser-&gt;Serialize( writer, myTransportation );\n      writer-&gt;WriteEndElement();\n      writer-&gt;Close();\n   }\n};\n\nint main()\n{\n   Test^ t = gcnew Test;\n   t-&gt;SerializeObject( &quot;SoapElementOriginal.xml&quot; );\n   t-&gt;SerializeOverride( &quot;SoapElementOverride.xml&quot; );\n   Console::WriteLine( &quot;Finished writing two XML files.&quot; );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"SoapElementOverrides#1\">using System;\nusing System.IO;\nusing System.Xml.Serialization;\nusing System.Collections;\nusing System.Xml;\nusing System.Text;\npublic class Transportation\n{\n   // The SoapElementAttribute specifies that the\n   // generated XML element name will be &quot;Wheels&quot;\n   // instead of &quot;Vehicle&quot;.\n   [SoapElement(&quot;Wheels&quot;)]\n   public string Vehicle;\n   [SoapElement(DataType = &quot;dateTime&quot;)]\n   public DateTime CreationDate;\n   [SoapElement(IsNullable = true)]\n   public Thing thing;\n   \n}\n\npublic class Thing{ \n   [SoapElement(IsNullable=true)] public string ThingName;\n}\n\npublic class Test\n{\n   public static void Main()\n   {\n      Test t = new Test();\n      t.SerializeObject(&quot;SoapElementOriginal.xml&quot;);\n      t.SerializeOverride(&quot;SoapElementOverride.xml&quot;);\n      Console.WriteLine(&quot;Finished writing two XML files.&quot;);\n   }\n\n   // Return an XmlSerializer used for overriding.\n   public XmlSerializer CreateSoapOverrider()\n   {\n      // Create the SoapAttributes and SoapAttributeOverrides objects.\n      SoapAttributes soapAttrs = new SoapAttributes();\n\n      SoapAttributeOverrides soapOverrides = \n      new SoapAttributeOverrides();\n            \n      /* Create an SoapElementAttribute to override \n      the Vehicles property. */\n      SoapElementAttribute soapElement1 = \n      new SoapElementAttribute(&quot;Truck&quot;);\n      // Set the SoapElement to the object.\n      soapAttrs.SoapElement= soapElement1;\n\n      /* Add the SoapAttributes to the SoapAttributeOverrides,\n      specifying the member to override. */\n      soapOverrides.Add(typeof(Transportation), &quot;Vehicle&quot;, soapAttrs);\n      \n      // Create the XmlSerializer, and return it.\n      XmlTypeMapping myTypeMapping = (new SoapReflectionImporter\n      (soapOverrides)).ImportTypeMapping(typeof(Transportation));\n      return new XmlSerializer(myTypeMapping);\n   }\n\n   public void SerializeOverride(string filename)\n   {\n      // Create an XmlSerializer instance.\n      XmlSerializer ser = CreateSoapOverrider();\n\n      // Create the object and serialize it.\n      Transportation myTransportation = \n      new Transportation();\n\n      myTransportation.Vehicle = &quot;MyCar&quot;;\n      myTransportation.CreationDate=DateTime.Now;\n      myTransportation.thing = new Thing();\n\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      ser.Serialize(writer, myTransportation);\n      writer.WriteEndElement();\n      writer.Close();\n   }\n   public void SerializeObject(string filename){\n      // Create an XmlSerializer instance.\n      XmlSerializer ser = new XmlSerializer(typeof(Transportation));\n      Transportation myTransportation = \n      new Transportation();\n      myTransportation.Vehicle = &quot;MyCar&quot;;\n      myTransportation.CreationDate = DateTime.Now;\n      myTransportation.thing = new Thing();\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      ser.Serialize(writer, myTransportation);\n      writer.WriteEndElement();\n      writer.Close();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"SoapElementOverrides#1\">Imports System\nImports System.IO\nImports System.Xml.Serialization\nImports System.Collections\nImports System.Xml\nImports System.Text\nPublic Class Transportation\n   &#39; The SoapElementAttribute specifies that the\n   &#39; generated XML element name will be &quot;Wheels&quot;\n   &#39; instead of &quot;Vehicle&quot;.\n   &lt;SoapElement(&quot;Wheels&quot;)&gt; Public Vehicle As String \n   &lt;SoapElement(DataType:= &quot;dateTime&quot;)&gt; _\n   public CreationDate As DateTime    \n   &lt;SoapElement(IsNullable:= true)&gt; _\n   public thing As Thing\nEnd Class\n\nPublic Class Thing\n   &lt;SoapElement(IsNullable:=true)&gt; public ThingName As string \nEnd Class\n\nPublic Class Test\n\n   Shared Sub Main()\n      Dim t As Test = New Test()\n      t.SerializeObject(&quot;SoapElementOriginalVb.xml&quot;)\n      t.SerializeOverride(&quot;SoapElementOverrideVb.xml&quot;)\n      Console.WriteLine(&quot;Finished writing two XML files.&quot;)\n   End Sub\n\n   &#39; Return an XmlSerializer used for overriding.\n   Public Function CreateSoapOverrider() As XmlSerializer \n      &#39; Create the SoapAttributes and SoapAttributeOverrides objects.\n      Dim soapAttrs As SoapAttributes = New SoapAttributes()\n\n      Dim soapOverrides As SoapAttributeOverrides = _\n      New SoapAttributeOverrides()\n            \n      &#39; Create a SoapElementAttribute to override \n      &#39; the Vehicles property. \n      Dim soapElement1 As SoapElementAttribute = _\n      New SoapElementAttribute(&quot;Truck&quot;)\n      &#39; Set the SoapElement to the object.\n      soapAttrs.SoapElement= soapElement1\n\n      &#39; Add the SoapAttributes to the SoapAttributeOverrides,\n      &#39; specifying the member to override. \n      soapOverrides.Add(GetType(Transportation), &quot;Vehicle&quot;, soapAttrs)\n      \n      &#39; Create the XmlSerializer, and return it.\n      Dim myTypeMapping As XmlTypeMapping = (New _\n      SoapReflectionImporter (soapOverrides)).ImportTypeMapping _\n      (GetType(Transportation))\n      return New XmlSerializer(myTypeMapping)\n   End Function\n\n   Public Sub SerializeOverride(filename As String)\n      &#39; Create an XmlSerializer instance.\n      Dim ser As XmlSerializer = CreateSoapOverrider()\n\n      &#39; Create the object and serialize it.\n      Dim myTransportation As Transportation = _\n      New Transportation()\n\n      myTransportation.Vehicle = &quot;MyCar&quot;\n      myTransportation.CreationDate = DateTime.Now\n      myTransportation.thing= new Thing()\n      \n      Dim writer As XmlTextWriter = _\n      New XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      ser.Serialize(writer, myTransportation)\n      writer.WriteEndElement()\n      writer.Close()\n   End Sub\n\n   Public Sub SerializeObject(filename As String)\n      &#39; Create an XmlSerializer instance.\n      Dim ser As XmlSerializer = _\n      New XmlSerializer(GetType(Transportation))\n      \n      Dim myTransportation As Transportation = _\n      New Transportation()\n      \n      myTransportation.Vehicle = &quot;MyCar&quot;\n      myTransportation.CreationDate=DateTime.Now\n      myTransportation.thing= new Thing()\n\n      Dim writer As XmlTextWriter = _\n      new XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      ser.Serialize(writer, myTransportation)\n      writer.WriteEndElement()\n      writer.Close()\n   End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_SoapAttributes_SoapEnum\">\r\n    \r\n            <a id=\"System_Xml_Serialization_SoapAttributes_SoapEnum_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SoapEnum</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a SOAP enumeration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.SoapEnumAttribute SoapEnum { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.soapenumattribute\" data-linktype=\"relative-path\">SoapEnumAttribute</a></div>\r\n                  </div>\r\n                  <p>An object that specifies how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes an enumeration member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.xml.serialization.soapenumattribute\" data-linktype=\"relative-path\">SoapEnumAttribute</a> is used to control the serialization of an enumeration member. Set the SoapEnum property to a new <a class=\"xref\" href=\"system.xml.serialization.soapenumattribute\" data-linktype=\"relative-path\">SoapEnumAttribute</a> to override the serialization of such a member.  </p>\n<p> For more information, see the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> class overview.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes two classes named <code>Food</code> and <code>FoodType</code>. The <code>FoodType</code> class contains two enumerations that are overridden, and for each enumeration, the example creates a <a class=\"xref\" href=\"system.xml.serialization.soapenumattribute\" data-linktype=\"relative-path\">SoapEnumAttribute</a> that it assigns to the SoapEnum property of a <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a>. The example then adds the <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> to a <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>, which is used to create an <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"SoapEnumOverrides#1\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Serialization;\n\npublic class Group{\n   public string GroupName;\n   public GroupType Grouptype;\n}\n\npublic enum GroupType{\n   // Use the SoapEnumAttribute to instruct the XmlSerializer\n   // to generate Small and Large instead of A and B.\n   [SoapEnum(&quot;Small&quot;)]\n   A,\n   [SoapEnum(&quot;Large&quot;)]\n   B\n}\n \npublic class Run {\n   static void Main(){\n      Run test= new Run();\n      test.SerializeObject(&quot;SoapEnum.xml&quot;);\n      test.SerializeOverride(&quot;SoapOverride.xml&quot;);\n      Console.WriteLine(&quot;Fininished writing two files&quot;);\n   }\n\n     private void SerializeObject(string filename){\n      // Create an instance of the XmlSerializer Class.\n      XmlTypeMapping mapp  =\n      (new SoapReflectionImporter()).ImportTypeMapping(typeof(Group));\n      XmlSerializer mySerializer =  new XmlSerializer(mapp);\n\n      // Writing the file requires a TextWriter.\n      TextWriter writer = new StreamWriter(filename);\n\n      // Create an instance of the Class that will be serialized.\n      Group myGroup = new Group();\n\n      // Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;;\n      myGroup.Grouptype= GroupType.A;\n\n      // Serialize the Class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup);\n       writer.Close();\n   }\n\n   private void SerializeOverride(string fileName){\n      SoapAttributeOverrides soapOver = new SoapAttributeOverrides();\n      SoapAttributes SoapAtts = new SoapAttributes();\n\n      // Add a SoapEnumAttribute for the GroupType.A enumerator.       \n      // Instead of &#39;A&#39;  it will be &quot;West&quot;.\n      SoapEnumAttribute soapEnum = new SoapEnumAttribute(&quot;West&quot;);\n      // Override the &quot;A&quot; enumerator.\n      SoapAtts.SoapEnum = soapEnum;\n      soapOver.Add(typeof(GroupType), &quot;A&quot;, SoapAtts);\n\n      // Add another SoapEnumAttribute for the GroupType.B enumerator.\n      // Instead of //B// it will be &quot;East&quot;.\n      SoapAtts= new SoapAttributes();\n      soapEnum = new SoapEnumAttribute();\n      soapEnum.Name = &quot;East&quot;;\n      SoapAtts.SoapEnum = soapEnum;\n      soapOver.Add(typeof(GroupType), &quot;B&quot;, SoapAtts);\n\n      // Create an XmlSerializer used for overriding.\n      XmlTypeMapping map = \n      new SoapReflectionImporter(soapOver).\n      ImportTypeMapping(typeof(Group));\n      XmlSerializer ser = new XmlSerializer(map);\n      Group myGroup = new Group();\n      myGroup.GroupName = &quot;.NET&quot;;\n      myGroup.Grouptype = GroupType.B;\n      // Writing the file requires a TextWriter.\n      TextWriter writer = new StreamWriter(fileName);\n      ser.Serialize(writer, myGroup);\n      writer.Close();\n   \t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"SoapEnumOverrides#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\npublic enum class GroupType\n{\n   // Use the SoapEnumAttribute to instruct the XmlSerializer\n   // to generate Small and Large instead of A and B.\n   [SoapEnum(&quot;Small&quot;)]\n   A,\n   [SoapEnum(&quot;Large&quot;)]\n   B\n};\n\npublic ref class Group\n{\npublic:\n   String^ GroupName;\n   GroupType Grouptype;\n};\n\npublic ref class Run\n{\npublic:\n   void SerializeObject( String^ filename )\n   {\n      // Create an instance of the XmlSerializer Class.\n      XmlTypeMapping^ mapp = (gcnew SoapReflectionImporter)-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( mapp );\n\n      // Writing the file requires a TextWriter.\n      TextWriter^ writer = gcnew StreamWriter( filename );\n\n      // Create an instance of the Class that will be serialized.\n      Group^ myGroup = gcnew Group;\n\n      // Set the Object* properties.\n      myGroup-&gt;GroupName = &quot;.NET&quot;;\n      myGroup-&gt;Grouptype = GroupType::A;\n\n      // Serialize the Class, and close the TextWriter.\n      mySerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;Close();\n   }\n\n   void SerializeOverride( String^ fileName )\n   {\n      SoapAttributeOverrides^ soapOver = gcnew SoapAttributeOverrides;\n      SoapAttributes^ SoapAtts = gcnew SoapAttributes;\n\n      // Add a SoapEnumAttribute for the GroupType::A enumerator.       \n      // Instead of &#39;A&#39;  it will be S&quot;West&quot;.\n      SoapEnumAttribute^ soapEnum = gcnew SoapEnumAttribute( &quot;West&quot; );\n\n      // Override the S&quot;A&quot; enumerator.\n      SoapAtts-&gt;GroupType::SoapEnum = soapEnum;\n      soapOver-&gt;Add( GroupType::typeid, &quot;A&quot;, SoapAtts );\n\n      // Add another SoapEnumAttribute for the GroupType::B enumerator.\n      // Instead of //B// it will be S&quot;East&quot;.\n      SoapAtts = gcnew SoapAttributes;\n      soapEnum = gcnew SoapEnumAttribute;\n      soapEnum-&gt;Name = &quot;East&quot;;\n      SoapAtts-&gt;GroupType::SoapEnum = soapEnum;\n      soapOver-&gt;Add( GroupType::typeid, &quot;B&quot;, SoapAtts );\n\n      // Create an XmlSerializer used for overriding.\n      XmlTypeMapping^ map = (gcnew SoapReflectionImporter( soapOver ))-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ ser = gcnew XmlSerializer( map );\n      Group^ myGroup = gcnew Group;\n      myGroup-&gt;GroupName = &quot;.NET&quot;;\n      myGroup-&gt;Grouptype = GroupType::B;\n\n      // Writing the file requires a TextWriter.\n      TextWriter^ writer = gcnew StreamWriter( fileName );\n      ser-&gt;Serialize( writer, myGroup );\n      writer-&gt;Close();\n   }\n};\n\nint main()\n{\n   Run^ test = gcnew Run;\n   test-&gt;SerializeObject( &quot;SoapEnum.xml&quot; );\n   test-&gt;SerializeOverride( &quot;SoapOverride.xml&quot; );\n   Console::WriteLine( &quot;Fininished writing two files&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"SoapEnumOverrides#1\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Xml.Serialization\n\nPublic Class Group\n   Public GroupName As String \n   Public Grouptype As GroupType \nEnd Class\n\nPublic enum GroupType\n&#39; Use the SoapEnumAttribute to instruct the XmlSerializer\n&#39; to generate Small and Large instead of A and B.\n   &lt;SoapEnum(&quot;Small&quot;)&gt; _\n   A\n   &lt;SoapEnum(&quot;Large&quot;)&gt; _\n   B\nEnd enum\n \nPublic Class Run\n   Public Shared Sub Main()\n      Dim test As Run = new Run()\n      test.SerializeObject(&quot;SoapEnum.xml&quot;)\n      test.SerializeOverride(&quot;SoapOverride.xml&quot;)\n      Console.WriteLine(&quot;Fininished writing two files&quot;)\n   End Sub\n\n   Private Shared Sub SerializeObject(filename As string)\n      &#39; Create an instance of the XmlSerializer Class.\n      Dim mapp  As XmlTypeMapping = _\n      (New SoapReflectionImporter()).ImportTypeMapping(GetType(Group))\n      Dim mySerializer As XmlSerializer =  New XmlSerializer(mapp)\n\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As TextWriter = New StreamWriter(filename)\n\n      &#39; Create an instance of the Class that will be serialized.\n      Dim myGroup As Group = New Group()\n\n      &#39; Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;\n      myGroup.Grouptype= GroupType.A\n\n      &#39; Serialize the Class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup)\n       writer.Close()\n   End Sub\n\n   Private  Sub SerializeOverride(fileName As String)\n      Dim soapOver As SoapAttributeOverrides = new SoapAttributeOverrides()\n      Dim SoapAtts As SoapAttributes = new SoapAttributes()\n\n      &#39; Add a SoapEnumAttribute for the GroupType.A enumerator. Instead\n      &#39; of &#39;A&#39; it will be &quot;West&quot;.\n      Dim soapEnum As SoapEnumAttribute = new SoapEnumAttribute(&quot;West&quot;)\n      &#39; Override the &quot;A&quot; enumerator.\n      SoapAtts.SoapEnum = soapEnum\n      soapOver.Add(GetType(GroupType), &quot;A&quot;, SoapAtts)\n\n      &#39; Add another SoapEnumAttribute for the GroupType.B enumerator.\n      &#39; Instead of &#39;B&#39; it will be &quot;East&quot;.\n      SoapAtts= New SoapAttributes()\n      soapEnum = new SoapEnumAttribute()\n      soapEnum.Name = &quot;East&quot;\n      SoapAtts.SoapEnum = soapEnum\n      soapOver.Add(GetType(GroupType), &quot;B&quot;, SoapAtts)\n\n      &#39; Create an XmlSerializer used for overriding.\n      Dim map As XmlTypeMapping = New SoapReflectionImporter _\n      (soapOver).ImportTypeMapping(GetType(Group))\n      Dim ser As XmlSerializer = New XmlSerializer(map)\n      Dim myGroup As Group = New Group()\n      myGroup.GroupName = &quot;.NET&quot;\n      myGroup.Grouptype = GroupType.B\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As TextWriter = New StreamWriter(fileName)\n      ser.Serialize(writer, myGroup)\n      writer.Close\n\n   End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_SoapAttributes_SoapIgnore\">\r\n    \r\n            <a id=\"System_Xml_Serialization_SoapAttributes_SoapIgnore_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SoapIgnore</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that specifies whether the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes a public field or property as encoded SOAP XML.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SoapIgnore { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> must not serialize the field or property; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, all public fields and public read/write properties are serialized by the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a>. That is, the value of each public field or property is persisted as an XML element or XML attribute in an XML document.  </p>\n<p> To override the default serialization of a field or property, create a <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a>, and set its SoapIgnore property to <code>true</code>. Use the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides#System_Xml_Serialization_SoapAttributeOverrides_Add_\" data-linktype=\"relative-path\">Add</a> method to add the object to a <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> and specify the type of the object that contains the field or property to ignore and the name of the field or property to ignore.  </p>\n<p> If a <a class=\"xref\" href=\"system.xml.serialization.soapignoreattribute\" data-linktype=\"relative-path\">SoapIgnoreAttribute</a> is applied to a field or property, the field or property is ignored. However you can override that behavior by creating a <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a>, setting its SoapIgnore property to <code>false</code>, and adding it to a <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>, specifying the type of the object that contains the field or property and the name of the field or property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes a class named <code>Group</code>. The serialization of the <code>GroupName</code> and <code>IgnoreThis</code> fields and the members of the <code>GroupType</code> enumeration are overridden. In the <code>CreateOverrideSerializer</code> method, a <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> is created, and for each overridden member or enumeration, a <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> is created with the appropriate property set and added to the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>. An <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> is created using the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>, and that <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> is used to create the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> that overrides the default serialization.  </p>\n<pre><code class=\"lang-cpp\" name=\"SoapAttributesOverrides#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\nusing namespace System::Xml::Schema;\nref class Car;\n\n// SoapInclude allows Vehicle to accept Car type.\n\n[SoapInclude(Car::typeid)]\npublic ref class Vehicle abstract\n{\npublic:\n   String^ licenseNumber;\n   DateTime makeDate;\n};\n\npublic ref class Car: public Vehicle{};\n\npublic enum class GroupType\n{\n   // These enums can be overridden.\n   [SoapEnum(&quot;Small&quot;)]\n   A,\n   [SoapEnum(&quot;Large&quot;)]\n   B\n};\n\npublic ref class Group\n{\npublic:\n\n   [SoapAttributeAttribute(Namespace=&quot;http://www.cpandl.com&quot;)]\n   String^ GroupName;\n\n   [SoapAttributeAttribute(DataType=&quot;base64Binary&quot;)]\n   array&lt;Byte&gt;^GroupNumber;\n\n   [SoapAttributeAttribute(DataType=&quot;date&quot;,AttributeName=&quot;CreationDate&quot;)]\n   DateTime Today;\n\n   [SoapElement(DataType=&quot;nonNegativeInteger&quot;,ElementName=&quot;PosInt&quot;)]\n   String^ PostitiveInt;\n\n   // This is ignored when serialized unless it&#39;s overridden.\n\n   [SoapIgnore]\n   bool IgnoreThis;\n   GroupType Grouptype;\n   Vehicle^ MyVehicle;\n\n   // The SoapInclude allows the method to return a Car.\n\n   [SoapInclude(Car::typeid)]\n   Vehicle^ myCar( String^ licNumber )\n   {\n      Vehicle^ v;\n      if ( licNumber-&gt;Equals( &quot;&quot; ) )\n      {\n         v = gcnew Car;\n         v-&gt;licenseNumber = &quot;!!!!!!&quot;;\n      }\n      else\n      {\n         v = gcnew Car;\n         v-&gt;licenseNumber = licNumber;\n      }\n\n      return v;\n   }\n};\n\npublic ref class Run\n{\npublic:\n   static void main()\n   {\n      Run^ test = gcnew Run;\n      test-&gt;SerializeOriginal( &quot;SoapOriginal.xml&quot; );\n      test-&gt;SerializeOverride( &quot;SoapOverrides.xml&quot; );\n      test-&gt;DeserializeOriginal( &quot;SoapOriginal.xml&quot; );\n      test-&gt;DeserializeOverride( &quot;SoapOverrides.xml&quot; );\n   }\n\n   void SerializeOriginal( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter)-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( myMapping );\n      Group^ myGroup = MakeGroup();\n\n      // Writing the file requires a TextWriter.\n      XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n      writer-&gt;Formatting = Formatting::Indented;\n      writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n\n      // Serialize the class, and close the TextWriter.\n      mySerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;WriteEndElement();\n      writer-&gt;Close();\n   }\n\n   void SerializeOverride( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class\n      // that overrides the serialization.\n      XmlSerializer^ overRideSerializer = CreateOverrideSerializer();\n      Group^ myGroup = MakeGroup();\n\n      // Writing the file requires a TextWriter.\n      XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n      writer-&gt;Formatting = Formatting::Indented;\n      writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n\n      // Serialize the class, and close the TextWriter.\n      overRideSerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;WriteEndElement();\n      writer-&gt;Close();\n   }\n\nprivate:\n   Group^ MakeGroup()\n   {\n      // Create an instance of the class that will be serialized.\n      Group^ myGroup = gcnew Group;\n\n      // Set the object properties.\n      myGroup-&gt;GroupName = &quot;.NET&quot;;\n      array&lt;Byte&gt;^hexByte = {Convert::ToByte( 100 ),Convert::ToByte( 50 )};\n      myGroup-&gt;GroupNumber = hexByte;\n      DateTime myDate = DateTime(2002,5,2);\n      myGroup-&gt;Today = myDate;\n      myGroup-&gt;PostitiveInt = &quot;10000&quot;;\n      myGroup-&gt;IgnoreThis = true;\n      myGroup-&gt;Grouptype = GroupType::B;\n      Car^ thisCar = dynamic_cast&lt;Car^&gt;(myGroup-&gt;myCar( &quot;1234566&quot; ));\n      myGroup-&gt;MyVehicle = thisCar;\n      return myGroup;\n   }\n\npublic:\n   void DeserializeOriginal( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter)-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( myMapping );\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader^ reader = gcnew XmlTextReader( filename );\n      reader-&gt;ReadStartElement( &quot;wrapper&quot; );\n\n      // Deserialize and cast the object.\n      Group^ myGroup;\n      myGroup = dynamic_cast&lt;Group^&gt;(mySerializer-&gt;Deserialize( reader ));\n      reader-&gt;ReadEndElement();\n      reader-&gt;Close();\n   }\n\n   void DeserializeOverride( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer^ overRideSerializer = CreateOverrideSerializer();\n\n      // Reading the file requires an XmlTextReader.\n      XmlTextReader^ reader = gcnew XmlTextReader( filename );\n      reader-&gt;ReadStartElement( &quot;wrapper&quot; );\n\n      // Deserialize and cast the object.\n      Group^ myGroup;\n      myGroup = dynamic_cast&lt;Group^&gt;(overRideSerializer-&gt;Deserialize( reader ));\n      reader-&gt;ReadEndElement();\n      reader-&gt;Close();\n      ReadGroup( myGroup );\n   }\n\nprivate:\n   void ReadGroup( Group^ myGroup )\n   {\n      Console::WriteLine( myGroup-&gt;GroupName );\n      Console::WriteLine( myGroup-&gt;GroupNumber[ 0 ] );\n      Console::WriteLine( myGroup-&gt;GroupNumber[ 1 ] );\n      Console::WriteLine( myGroup-&gt;Today );\n      Console::WriteLine( myGroup-&gt;PostitiveInt );\n      Console::WriteLine( myGroup-&gt;IgnoreThis );\n      Console::WriteLine();\n   }\n\n   XmlSerializer^ CreateOverrideSerializer()\n   {\n      SoapAttributeOverrides^ mySoapAttributeOverrides = gcnew SoapAttributeOverrides;\n      SoapAttributes^ soapAtts = gcnew SoapAttributes;\n      SoapElementAttribute^ mySoapElement = gcnew SoapElementAttribute;\n      mySoapElement-&gt;ElementName = &quot;xxxx&quot;;\n      soapAtts-&gt;SoapElement = mySoapElement;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, &quot;PostitiveInt&quot;, soapAtts );\n\n      // Override the IgnoreThis property.\n      SoapIgnoreAttribute^ myIgnore = gcnew SoapIgnoreAttribute;\n      soapAtts = gcnew SoapAttributes;\n      soapAtts-&gt;SoapIgnore = false;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, &quot;IgnoreThis&quot;, soapAtts );\n\n      // Override the GroupType enumeration. \n      soapAtts = gcnew SoapAttributes;\n      SoapEnumAttribute^ xSoapEnum = gcnew SoapEnumAttribute;\n      xSoapEnum-&gt;Name = &quot;Over1000&quot;;\n      soapAtts-&gt;GroupType::SoapEnum = xSoapEnum;\n\n      // Add the SoapAttributes to the \n      // mySoapAttributeOverridesrides object.\n      mySoapAttributeOverrides-&gt;Add( GroupType::typeid, &quot;A&quot;, soapAtts );\n\n      // Create second enumeration and add it.\n      soapAtts = gcnew SoapAttributes;\n      xSoapEnum = gcnew SoapEnumAttribute;\n      xSoapEnum-&gt;Name = &quot;ZeroTo1000&quot;;\n      soapAtts-&gt;GroupType::SoapEnum = xSoapEnum;\n      mySoapAttributeOverrides-&gt;Add( GroupType::typeid, &quot;B&quot;, soapAtts );\n\n      // Override the Group type.\n      soapAtts = gcnew SoapAttributes;\n      SoapTypeAttribute^ soapType = gcnew SoapTypeAttribute;\n      soapType-&gt;TypeName = &quot;Team&quot;;\n      soapAtts-&gt;SoapType = soapType;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, soapAtts );\n\n      // Create an XmlTypeMapping that is used to create an instance \n      // of the XmlSerializer. Then return the XmlSerializer object.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter( mySoapAttributeOverrides ))-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ ser = gcnew XmlSerializer( myMapping );\n      return ser;\n   }\n};\n\nint main()\n{\n   Run::main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"SoapAttributesOverrides#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Xml\nImports System.Xml.Serialization\nImports System.Xml.Schema\n\nPublic Class Group\n   &lt;SoapAttribute (Namespace:= &quot;http:&#39;www.cpandl.com&quot;)&gt; _\n   Public GroupName As String \n   \n   &lt;SoapAttribute(DataType:= &quot;base64Binary&quot;)&gt; _\n   Public GroupNumber() As Byte\n\n   &lt;SoapAttribute(DataType:= &quot;date&quot;, _\n   AttributeName:= &quot;CreationDate&quot;)&gt; _\n   Public Today As DateTime \n   &lt;SoapElement(DataType:= &quot;nonNegativeInteger&quot;, _\n   ElementName:= &quot;PosInt&quot;)&gt; _\n   Public PostitiveInt As String \n   &#39; This is ignored when serialized unless it&#39;s overridden.\n   &lt;SoapIgnore&gt; _ \n   Public IgnoreThis As Boolean \n   \n   Public Grouptype As GroupType \n\n   Public MyVehicle As Vehicle \n\n   &#39;  The SoapInclude allows the method to return a Car.\n   &lt;SoapInclude(GetType(Car))&gt; _\n   Public Function myCar(licNumber As String ) As Vehicle \n      Dim v As Vehicle \n      if licNumber = &quot;&quot; Then\n         v = New Car()\n         v.licenseNumber = &quot;!!!!!!&quot;\n      else  \n   \t   v = New Car()\n   \t   v.licenseNumber = licNumber\n      End If\n      \n      return v\n   End Function\nEnd Class\n  \n&#39; SoapInclude allows Vehicle to accept Car type.\n&lt;SoapInclude(GetType(Car))&gt; _\nPublic MustInherit  class Vehicle\n   Public licenseNumber As String \n   Public makeDate As DateTime \nEnd Class\n\nPublic Class Car\n   Inherits Vehicle\n\nEnd Class\n\nPublic enum GroupType\n   &#39; These enums can be overridden.\n   &lt;SoapEnum(&quot;Small&quot;)&gt; _\n   A\n   &lt;SoapEnum(&quot;Large&quot;)&gt; _ \n   B\nEnd Enum\n \nPublic Class Run\n\n   Shared Sub Main()\n      Dim test As Run = New Run()\n      test.SerializeOriginal(&quot;SoapOriginal.xml&quot;)\n      test.SerializeOverride(&quot;SoapOverrides.xml&quot;)\n      test.DeserializeOriginal(&quot;SoapOriginal.xml&quot;)\n      test.DeserializeOverride(&quot;SoapOverrides.xml&quot;)\n   End SUb\n   \n   Public Sub SerializeOriginal(filename As String)\n\n      &#39; Create an instance of the XmlSerializer class.\n      Dim myMapping As XmlTypeMapping = _\n      (New SoapReflectionImporter().ImportTypeMapping _\n      (GetType(Group)))\n      Dim mySerializer As XmlSerializer =  _\n      New XmlSerializer(myMapping)\n      \n      Dim myGroup As Group =MakeGroup()\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As XmlTextWriter  = _\n      New XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      &#39; Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup)\n      writer.WriteEndElement()\n      writer.Close()\n   End Sub\n\n   Public Sub SerializeOverride(filename As String)\n      &#39; Create an instance of the XmlSerializer class\n      &#39; that overrides the serialization.\n      Dim overRideSerializer As XmlSerializer = _\n      CreateOverrideSerializer()\n      Dim myGroup As Group =MakeGroup()\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As XmlTextWriter  = _\n      New XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      &#39; Serialize the class, and close the TextWriter.\n      overRideSerializer.Serialize(writer, myGroup)\n      writer.WriteEndElement()\n      writer.Close()\n    End Sub\n\n   private Function MakeGroup() As Group \n      &#39; Create an instance of the class that will be serialized.\n      Dim myGroup As Group  = New Group()\n\n      &#39; Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;\n\n      Dim hexByte()As Byte = new Byte(1){Convert.ToByte(100), _\n      Convert.ToByte(50)}\n      myGroup.GroupNumber = hexByte\n\n      Dim myDate As DateTime  = new DateTime(2002,5,2)\n      myGroup.Today = myDate\n\n      myGroup.PostitiveInt = &quot;10000&quot;\n\tmyGroup.IgnoreThis = true\n\tmyGroup.Grouptype = GroupType.B\n\tDim thisCar As Car \n\tthisCar =CType(myGroup.myCar(&quot;1234566&quot;), Car)\n\tmyGroup.myVehicle=thisCar\n      return myGroup\n   End Function   \t\n\n   Public Sub DeserializeOriginal(filename As String)\n      &#39; Create an instance of the XmlSerializer class.\n      Dim myMapping As XmlTypeMapping = _\n      (New SoapReflectionImporter().ImportTypeMapping _\n      (GetType(Group)))\n      Dim mySerializer As XmlSerializer =  _\n      New XmlSerializer(myMapping)\n\n      &#39; Reading the file requires an  XmlTextReader.\n      Dim reader As XmlTextReader = _\n      New XmlTextReader(filename)\n      reader.ReadStartElement(&quot;wrapper&quot;)\n\n      &#39; Deserialize and cast the object.\n      Dim myGroup As Group  = _\n      CType(mySerializer.Deserialize(reader), Group)\n      reader.ReadEndElement()\n      reader.Close()\n   End Sub\n\n   Public Sub DeserializeOverride(filename As String)\n      &#39; Create an instance of the XmlSerializer class.\n      Dim overRideSerializer As XmlSerializer  = _\n      CreateOverrideSerializer()\n\n      &#39; Reading the file requires an  XmlTextReader.\n      Dim reader As XmlTextReader = _\n      New XmlTextReader(filename)\n      reader.ReadStartElement(&quot;wrapper&quot;)\n\n      &#39; Deserialize and cast the object.\n      Dim myGroup As Group = _\n      CType(overRideSerializer.Deserialize(reader), Group)\n      reader.ReadEndElement()\n      reader.Close()\n      ReadGroup(myGroup)\n   End Sub\n\n   private Sub ReadGroup(myGroup As Group)\n      Console.WriteLine(myGroup.GroupName)\n      Console.WriteLine(myGroup.GroupNumber(0))\n      Console.WriteLine(myGroup.GroupNumber(1))\n      Console.WriteLine(myGroup.Today)\n      Console.WriteLine(myGroup.PostitiveInt)\n      Console.WriteLine(myGroup.IgnoreThis)\n      Console.WriteLine()\n   End Sub\n   \n   Private Function CreateOverrideSerializer() As XmlSerializer\n      Dim soapOver As SoapAttributeOverrides = New SoapAttributeOverrides()\n      Dim soapAtts As SoapAttributes = New SoapAttributes()\n\n      Dim mySoapElement As SoapElementAttribute = New SoapElementAttribute()\n      mySoapElement.ElementName = &quot;xxxx&quot;\n      soapAtts.SoapElement = mySoapElement\n      soapOver.Add(GetType(Group), &quot;PostitiveInt&quot;, soapAtts)\n\n      &#39; Override the IgnoreThis property.\n      Dim myIgnore As SoapIgnoreAttribute  = new SoapIgnoreAttribute()\n      soapAtts = New SoapAttributes()\n      soapAtts.SoapIgnore = false\n      soapOver.Add(GetType(Group), &quot;IgnoreThis&quot;, soapAtts)\n\n      &#39; Override the GroupType enumeration.\n      soapAtts = New SoapAttributes()\n      Dim xSoapEnum As SoapEnumAttribute = new SoapEnumAttribute()\n      xSoapEnum.Name = &quot;Over1000&quot;\n      soapAtts.SoapEnum = xSoapEnum\n      &#39; Add the SoapAttributes to the SoapOverrides object.\n      soapOver.Add(GetType(GroupType), &quot;A&quot;, soapAtts)\n\n      &#39; Create second enumeration and add it.\n      soapAtts = New SoapAttributes()\n      xSoapEnum = New SoapEnumAttribute()\n      xSoapEnum.Name = &quot;ZeroTo1000&quot;\n      soapAtts.SoapEnum = xSoapEnum\n      soapOver.Add(GetType(GroupType), &quot;B&quot;, soapAtts)\n\n      &#39; Override the Group type.\n      soapAtts = New SoapAttributes()\n      Dim soapType As SoapTypeAttribute = New SoapTypeAttribute()\n      soapType.TypeName = &quot;Team&quot;\n      soapAtts.SoapType = soapType\n      soapOver.Add(GetType(Group),soapAtts)\n\t\n      Dim myMapping As XmlTypeMapping = (New SoapReflectionImporter( _\n      soapOver)).ImportTypeMapping(GetType(Group))\n\t\n       Dim ser As XmlSerializer = new XmlSerializer(myMapping)\n      return ser\n   End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"SoapAttributesOverrides#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing System.Xml.Schema;\n\npublic class Group\n{\n   [SoapAttribute (Namespace = &quot;http://www.cpandl.com&quot;)]\n   public string GroupName;\n   \n   [SoapAttribute(DataType = &quot;base64Binary&quot;)]\n   public Byte [] GroupNumber;\n\n   [SoapAttribute(DataType = &quot;date&quot;, AttributeName = &quot;CreationDate&quot;)]\n   public DateTime Today;\n   [SoapElement(DataType = &quot;nonNegativeInteger&quot;, ElementName = &quot;PosInt&quot;)]\n   public string PostitiveInt;\n   // This is ignored when serialized unless it&#39;s overridden.\n   [SoapIgnore] \n   public bool IgnoreThis;\n   \n   public GroupType Grouptype;\n\n   public Vehicle MyVehicle;\n\n   // The SoapInclude allows the method to return a Car.\n   [SoapInclude(typeof(Car))]\n   public Vehicle myCar(string licNumber)\n   {\n      Vehicle v;\n      if(licNumber == &quot;&quot;)\n         {\n            v = new Car();\n   \t    v.licenseNumber = &quot;!!!!!!&quot;;\n   \t }\n      else\n   \t {\n   \t   v = new Car();\n   \t   v.licenseNumber = licNumber;\n   \t }\n      return v;\n   }\n}\n  \n// SoapInclude allows Vehicle to accept Car type.\n[SoapInclude(typeof(Car))]\npublic abstract class Vehicle\n{\n   public string licenseNumber;\n   public DateTime makeDate;\n}\n\npublic class Car: Vehicle\n{\n}\n\npublic enum GroupType\n{\n   // These enums can be overridden.\n   [SoapEnum(&quot;Small&quot;)]\n   A,\n   [SoapEnum(&quot;Large&quot;)]\n   B\n}\n \npublic class Run\n{\n   public static void Main()\n   {\n      Run test = new Run();\n      test.SerializeOriginal(&quot;SoapOriginal.xml&quot;);\n      test.SerializeOverride(&quot;SoapOverrides.xml&quot;);\n      test.DeserializeOriginal(&quot;SoapOriginal.xml&quot;);\n      test.DeserializeOverride(&quot;SoapOverrides.xml&quot;);\n   \n   }\n   public void SerializeOriginal(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping myMapping = \n      (new SoapReflectionImporter().ImportTypeMapping(\n      typeof(Group)));\n      XmlSerializer mySerializer =  \n      new XmlSerializer(myMapping);\n      Group myGroup=MakeGroup();\n      // Writing the file requires a TextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      // Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup);\n      writer.WriteEndElement();\n      writer.Close();\n   }\n\n   public void SerializeOverride(string filename)\n   {\n      // Create an instance of the XmlSerializer class\n      // that overrides the serialization.\n      XmlSerializer overRideSerializer = CreateOverrideSerializer();\n      Group myGroup=MakeGroup();\n      // Writing the file requires a TextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      // Serialize the class, and close the TextWriter.\n      overRideSerializer.Serialize(writer, myGroup);\n      writer.WriteEndElement();\n      writer.Close();\n\n   }\n\n   private Group MakeGroup(){\n      // Create an instance of the class that will be serialized.\n      Group myGroup = new Group();\n\n      // Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;;\n\n      Byte [] hexByte = new Byte[2]{Convert.ToByte(100),\n      Convert.ToByte(50)};\n      myGroup.GroupNumber = hexByte;\n\n      DateTime myDate = new DateTime(2002,5,2);\n      myGroup.Today = myDate;\n      myGroup.PostitiveInt= &quot;10000&quot;;\n      myGroup.IgnoreThis=true;\n      myGroup.Grouptype= GroupType.B;\n      Car thisCar =(Car)  myGroup.myCar(&quot;1234566&quot;);\n      myGroup.MyVehicle=thisCar;\n      return myGroup;\n   }   \t\n\n   public void DeserializeOriginal(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping myMapping = \n      (new SoapReflectionImporter().ImportTypeMapping(\n      typeof(Group)));\n      XmlSerializer mySerializer =  \n      new XmlSerializer(myMapping);\n\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader reader= \n      new XmlTextReader(filename);\n      reader.ReadStartElement(&quot;wrapper&quot;);\n\n      // Deserialize and cast the object.\n      Group myGroup; \n      myGroup = (Group) mySerializer.Deserialize(reader);\n      reader.ReadEndElement();\n      reader.Close();\n\n   }\n\n   public void DeserializeOverride(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer overRideSerializer = CreateOverrideSerializer();\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader reader= \n      new XmlTextReader(filename);\n      reader.ReadStartElement(&quot;wrapper&quot;);\n\n      // Deserialize and cast the object.\n      Group myGroup; \n      myGroup = (Group) overRideSerializer.Deserialize(reader);\n      reader.ReadEndElement();\n      reader.Close();\n      ReadGroup(myGroup);\n   }\n\n   private void ReadGroup(Group myGroup){\n      Console.WriteLine(myGroup.GroupName);\n      Console.WriteLine(myGroup.GroupNumber[0]);\n      Console.WriteLine(myGroup.GroupNumber[1]);\n      Console.WriteLine(myGroup.Today);\n      Console.WriteLine(myGroup.PostitiveInt);\n      Console.WriteLine(myGroup.IgnoreThis);\n      Console.WriteLine();\n   }\n   private XmlSerializer CreateOverrideSerializer()\n   {\n      SoapAttributeOverrides mySoapAttributeOverrides = \n      new SoapAttributeOverrides();\n      SoapAttributes soapAtts = new SoapAttributes();\n\n      SoapElementAttribute mySoapElement = new SoapElementAttribute();\n      mySoapElement.ElementName = &quot;xxxx&quot;;\n      soapAtts.SoapElement = mySoapElement;\n      mySoapAttributeOverrides.Add(typeof(Group), &quot;PostitiveInt&quot;, \n      soapAtts);\n\n      // Override the IgnoreThis property.\n      SoapIgnoreAttribute myIgnore = new SoapIgnoreAttribute();\n      soapAtts = new SoapAttributes();\n      soapAtts.SoapIgnore = false;      \n      mySoapAttributeOverrides.Add(typeof(Group), &quot;IgnoreThis&quot;, \n      soapAtts);\n\n      // Override the GroupType enumeration.\t\n      soapAtts = new SoapAttributes();\n      SoapEnumAttribute xSoapEnum = new SoapEnumAttribute();\n      xSoapEnum.Name = &quot;Over1000&quot;;\n      soapAtts.SoapEnum = xSoapEnum;\n\n      // Add the SoapAttributes to the \n      // mySoapAttributeOverridesrides object.\n      mySoapAttributeOverrides.Add(typeof(GroupType), &quot;A&quot;, \n      soapAtts);\n\n      // Create second enumeration and add it.\n      soapAtts = new SoapAttributes();\n      xSoapEnum = new SoapEnumAttribute();\n      xSoapEnum.Name = &quot;ZeroTo1000&quot;;\n      soapAtts.SoapEnum = xSoapEnum;\n      mySoapAttributeOverrides.Add(typeof(GroupType), &quot;B&quot;, \n      soapAtts);\n\n      // Override the Group type.\n      soapAtts = new SoapAttributes();\n      SoapTypeAttribute soapType = new SoapTypeAttribute();\n      soapType.TypeName = &quot;Team&quot;;\n      soapAtts.SoapType = soapType;\n      mySoapAttributeOverrides.Add(typeof(Group),soapAtts);\n\n      // Create an XmlTypeMapping that is used to create an instance \n      // of the XmlSerializer. Then return the XmlSerializer object.\n      XmlTypeMapping myMapping = (new SoapReflectionImporter(\n      mySoapAttributeOverrides)).ImportTypeMapping(typeof(Group));\n\t\n      XmlSerializer ser = new XmlSerializer(myMapping);\n      return ser;\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Serialization_SoapAttributes_SoapType\">\r\n    \r\n            <a id=\"System_Xml_Serialization_SoapAttributes_SoapType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SoapType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an object that instructs the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> how to serialize an object type into encoded SOAP XML.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Serialization.SoapTypeAttribute SoapType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.serialization.soaptypeattribute\" data-linktype=\"relative-path\">SoapTypeAttribute</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.serialization.soaptypeattribute\" data-linktype=\"relative-path\">SoapTypeAttribute</a> that either overrides a <a class=\"xref\" href=\"system.xml.serialization.soaptypeattribute\" data-linktype=\"relative-path\">SoapTypeAttribute</a> applied to a class declaration, or is applied to a class declaration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.xml.serialization.soaptypeattribute\" data-linktype=\"relative-path\">SoapTypeAttribute</a> can be used to control the XML stream generated by the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a>. Set the SoapType property to a new <a class=\"xref\" href=\"system.xml.serialization.soaptypeattribute\" data-linktype=\"relative-path\">SoapTypeAttribute</a> to control the schema for the XML that is generated when a class is serialized.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example serializes a class named <code>Group</code>. The serialization of the <code>GroupName</code> and <code>IgnoreThis</code> fields and the members of the <code>GroupType</code> enumeration are overridden. In the <code>CreateOverrideSerializer</code> method, a <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> is created, and for each overridden member or enumeration, a <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> is created with the appropriate property set and added to the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>. An <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> is created using the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>, and that <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> is used to create the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> that overrides the default serialization.  </p>\n<pre><code class=\"lang-cpp\" name=\"SoapAttributesOverrides#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\nusing namespace System::Xml::Schema;\nref class Car;\n\n// SoapInclude allows Vehicle to accept Car type.\n\n[SoapInclude(Car::typeid)]\npublic ref class Vehicle abstract\n{\npublic:\n   String^ licenseNumber;\n   DateTime makeDate;\n};\n\npublic ref class Car: public Vehicle{};\n\npublic enum class GroupType\n{\n   // These enums can be overridden.\n   [SoapEnum(&quot;Small&quot;)]\n   A,\n   [SoapEnum(&quot;Large&quot;)]\n   B\n};\n\npublic ref class Group\n{\npublic:\n\n   [SoapAttributeAttribute(Namespace=&quot;http://www.cpandl.com&quot;)]\n   String^ GroupName;\n\n   [SoapAttributeAttribute(DataType=&quot;base64Binary&quot;)]\n   array&lt;Byte&gt;^GroupNumber;\n\n   [SoapAttributeAttribute(DataType=&quot;date&quot;,AttributeName=&quot;CreationDate&quot;)]\n   DateTime Today;\n\n   [SoapElement(DataType=&quot;nonNegativeInteger&quot;,ElementName=&quot;PosInt&quot;)]\n   String^ PostitiveInt;\n\n   // This is ignored when serialized unless it&#39;s overridden.\n\n   [SoapIgnore]\n   bool IgnoreThis;\n   GroupType Grouptype;\n   Vehicle^ MyVehicle;\n\n   // The SoapInclude allows the method to return a Car.\n\n   [SoapInclude(Car::typeid)]\n   Vehicle^ myCar( String^ licNumber )\n   {\n      Vehicle^ v;\n      if ( licNumber-&gt;Equals( &quot;&quot; ) )\n      {\n         v = gcnew Car;\n         v-&gt;licenseNumber = &quot;!!!!!!&quot;;\n      }\n      else\n      {\n         v = gcnew Car;\n         v-&gt;licenseNumber = licNumber;\n      }\n\n      return v;\n   }\n};\n\npublic ref class Run\n{\npublic:\n   static void main()\n   {\n      Run^ test = gcnew Run;\n      test-&gt;SerializeOriginal( &quot;SoapOriginal.xml&quot; );\n      test-&gt;SerializeOverride( &quot;SoapOverrides.xml&quot; );\n      test-&gt;DeserializeOriginal( &quot;SoapOriginal.xml&quot; );\n      test-&gt;DeserializeOverride( &quot;SoapOverrides.xml&quot; );\n   }\n\n   void SerializeOriginal( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter)-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( myMapping );\n      Group^ myGroup = MakeGroup();\n\n      // Writing the file requires a TextWriter.\n      XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n      writer-&gt;Formatting = Formatting::Indented;\n      writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n\n      // Serialize the class, and close the TextWriter.\n      mySerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;WriteEndElement();\n      writer-&gt;Close();\n   }\n\n   void SerializeOverride( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class\n      // that overrides the serialization.\n      XmlSerializer^ overRideSerializer = CreateOverrideSerializer();\n      Group^ myGroup = MakeGroup();\n\n      // Writing the file requires a TextWriter.\n      XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n      writer-&gt;Formatting = Formatting::Indented;\n      writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n\n      // Serialize the class, and close the TextWriter.\n      overRideSerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;WriteEndElement();\n      writer-&gt;Close();\n   }\n\nprivate:\n   Group^ MakeGroup()\n   {\n      // Create an instance of the class that will be serialized.\n      Group^ myGroup = gcnew Group;\n\n      // Set the object properties.\n      myGroup-&gt;GroupName = &quot;.NET&quot;;\n      array&lt;Byte&gt;^hexByte = {Convert::ToByte( 100 ),Convert::ToByte( 50 )};\n      myGroup-&gt;GroupNumber = hexByte;\n      DateTime myDate = DateTime(2002,5,2);\n      myGroup-&gt;Today = myDate;\n      myGroup-&gt;PostitiveInt = &quot;10000&quot;;\n      myGroup-&gt;IgnoreThis = true;\n      myGroup-&gt;Grouptype = GroupType::B;\n      Car^ thisCar = dynamic_cast&lt;Car^&gt;(myGroup-&gt;myCar( &quot;1234566&quot; ));\n      myGroup-&gt;MyVehicle = thisCar;\n      return myGroup;\n   }\n\npublic:\n   void DeserializeOriginal( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter)-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( myMapping );\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader^ reader = gcnew XmlTextReader( filename );\n      reader-&gt;ReadStartElement( &quot;wrapper&quot; );\n\n      // Deserialize and cast the object.\n      Group^ myGroup;\n      myGroup = dynamic_cast&lt;Group^&gt;(mySerializer-&gt;Deserialize( reader ));\n      reader-&gt;ReadEndElement();\n      reader-&gt;Close();\n   }\n\n   void DeserializeOverride( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer^ overRideSerializer = CreateOverrideSerializer();\n\n      // Reading the file requires an XmlTextReader.\n      XmlTextReader^ reader = gcnew XmlTextReader( filename );\n      reader-&gt;ReadStartElement( &quot;wrapper&quot; );\n\n      // Deserialize and cast the object.\n      Group^ myGroup;\n      myGroup = dynamic_cast&lt;Group^&gt;(overRideSerializer-&gt;Deserialize( reader ));\n      reader-&gt;ReadEndElement();\n      reader-&gt;Close();\n      ReadGroup( myGroup );\n   }\n\nprivate:\n   void ReadGroup( Group^ myGroup )\n   {\n      Console::WriteLine( myGroup-&gt;GroupName );\n      Console::WriteLine( myGroup-&gt;GroupNumber[ 0 ] );\n      Console::WriteLine( myGroup-&gt;GroupNumber[ 1 ] );\n      Console::WriteLine( myGroup-&gt;Today );\n      Console::WriteLine( myGroup-&gt;PostitiveInt );\n      Console::WriteLine( myGroup-&gt;IgnoreThis );\n      Console::WriteLine();\n   }\n\n   XmlSerializer^ CreateOverrideSerializer()\n   {\n      SoapAttributeOverrides^ mySoapAttributeOverrides = gcnew SoapAttributeOverrides;\n      SoapAttributes^ soapAtts = gcnew SoapAttributes;\n      SoapElementAttribute^ mySoapElement = gcnew SoapElementAttribute;\n      mySoapElement-&gt;ElementName = &quot;xxxx&quot;;\n      soapAtts-&gt;SoapElement = mySoapElement;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, &quot;PostitiveInt&quot;, soapAtts );\n\n      // Override the IgnoreThis property.\n      SoapIgnoreAttribute^ myIgnore = gcnew SoapIgnoreAttribute;\n      soapAtts = gcnew SoapAttributes;\n      soapAtts-&gt;SoapIgnore = false;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, &quot;IgnoreThis&quot;, soapAtts );\n\n      // Override the GroupType enumeration. \n      soapAtts = gcnew SoapAttributes;\n      SoapEnumAttribute^ xSoapEnum = gcnew SoapEnumAttribute;\n      xSoapEnum-&gt;Name = &quot;Over1000&quot;;\n      soapAtts-&gt;GroupType::SoapEnum = xSoapEnum;\n\n      // Add the SoapAttributes to the \n      // mySoapAttributeOverridesrides object.\n      mySoapAttributeOverrides-&gt;Add( GroupType::typeid, &quot;A&quot;, soapAtts );\n\n      // Create second enumeration and add it.\n      soapAtts = gcnew SoapAttributes;\n      xSoapEnum = gcnew SoapEnumAttribute;\n      xSoapEnum-&gt;Name = &quot;ZeroTo1000&quot;;\n      soapAtts-&gt;GroupType::SoapEnum = xSoapEnum;\n      mySoapAttributeOverrides-&gt;Add( GroupType::typeid, &quot;B&quot;, soapAtts );\n\n      // Override the Group type.\n      soapAtts = gcnew SoapAttributes;\n      SoapTypeAttribute^ soapType = gcnew SoapTypeAttribute;\n      soapType-&gt;TypeName = &quot;Team&quot;;\n      soapAtts-&gt;SoapType = soapType;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, soapAtts );\n\n      // Create an XmlTypeMapping that is used to create an instance \n      // of the XmlSerializer. Then return the XmlSerializer object.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter( mySoapAttributeOverrides ))-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ ser = gcnew XmlSerializer( myMapping );\n      return ser;\n   }\n};\n\nint main()\n{\n   Run::main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"SoapAttributesOverrides#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Xml\nImports System.Xml.Serialization\nImports System.Xml.Schema\n\nPublic Class Group\n   &lt;SoapAttribute (Namespace:= &quot;http:&#39;www.cpandl.com&quot;)&gt; _\n   Public GroupName As String \n   \n   &lt;SoapAttribute(DataType:= &quot;base64Binary&quot;)&gt; _\n   Public GroupNumber() As Byte\n\n   &lt;SoapAttribute(DataType:= &quot;date&quot;, _\n   AttributeName:= &quot;CreationDate&quot;)&gt; _\n   Public Today As DateTime \n   &lt;SoapElement(DataType:= &quot;nonNegativeInteger&quot;, _\n   ElementName:= &quot;PosInt&quot;)&gt; _\n   Public PostitiveInt As String \n   &#39; This is ignored when serialized unless it&#39;s overridden.\n   &lt;SoapIgnore&gt; _ \n   Public IgnoreThis As Boolean \n   \n   Public Grouptype As GroupType \n\n   Public MyVehicle As Vehicle \n\n   &#39;  The SoapInclude allows the method to return a Car.\n   &lt;SoapInclude(GetType(Car))&gt; _\n   Public Function myCar(licNumber As String ) As Vehicle \n      Dim v As Vehicle \n      if licNumber = &quot;&quot; Then\n         v = New Car()\n         v.licenseNumber = &quot;!!!!!!&quot;\n      else  \n   \t   v = New Car()\n   \t   v.licenseNumber = licNumber\n      End If\n      \n      return v\n   End Function\nEnd Class\n  \n&#39; SoapInclude allows Vehicle to accept Car type.\n&lt;SoapInclude(GetType(Car))&gt; _\nPublic MustInherit  class Vehicle\n   Public licenseNumber As String \n   Public makeDate As DateTime \nEnd Class\n\nPublic Class Car\n   Inherits Vehicle\n\nEnd Class\n\nPublic enum GroupType\n   &#39; These enums can be overridden.\n   &lt;SoapEnum(&quot;Small&quot;)&gt; _\n   A\n   &lt;SoapEnum(&quot;Large&quot;)&gt; _ \n   B\nEnd Enum\n \nPublic Class Run\n\n   Shared Sub Main()\n      Dim test As Run = New Run()\n      test.SerializeOriginal(&quot;SoapOriginal.xml&quot;)\n      test.SerializeOverride(&quot;SoapOverrides.xml&quot;)\n      test.DeserializeOriginal(&quot;SoapOriginal.xml&quot;)\n      test.DeserializeOverride(&quot;SoapOverrides.xml&quot;)\n   End SUb\n   \n   Public Sub SerializeOriginal(filename As String)\n\n      &#39; Create an instance of the XmlSerializer class.\n      Dim myMapping As XmlTypeMapping = _\n      (New SoapReflectionImporter().ImportTypeMapping _\n      (GetType(Group)))\n      Dim mySerializer As XmlSerializer =  _\n      New XmlSerializer(myMapping)\n      \n      Dim myGroup As Group =MakeGroup()\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As XmlTextWriter  = _\n      New XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      &#39; Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup)\n      writer.WriteEndElement()\n      writer.Close()\n   End Sub\n\n   Public Sub SerializeOverride(filename As String)\n      &#39; Create an instance of the XmlSerializer class\n      &#39; that overrides the serialization.\n      Dim overRideSerializer As XmlSerializer = _\n      CreateOverrideSerializer()\n      Dim myGroup As Group =MakeGroup()\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As XmlTextWriter  = _\n      New XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      &#39; Serialize the class, and close the TextWriter.\n      overRideSerializer.Serialize(writer, myGroup)\n      writer.WriteEndElement()\n      writer.Close()\n    End Sub\n\n   private Function MakeGroup() As Group \n      &#39; Create an instance of the class that will be serialized.\n      Dim myGroup As Group  = New Group()\n\n      &#39; Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;\n\n      Dim hexByte()As Byte = new Byte(1){Convert.ToByte(100), _\n      Convert.ToByte(50)}\n      myGroup.GroupNumber = hexByte\n\n      Dim myDate As DateTime  = new DateTime(2002,5,2)\n      myGroup.Today = myDate\n\n      myGroup.PostitiveInt = &quot;10000&quot;\n\tmyGroup.IgnoreThis = true\n\tmyGroup.Grouptype = GroupType.B\n\tDim thisCar As Car \n\tthisCar =CType(myGroup.myCar(&quot;1234566&quot;), Car)\n\tmyGroup.myVehicle=thisCar\n      return myGroup\n   End Function   \t\n\n   Public Sub DeserializeOriginal(filename As String)\n      &#39; Create an instance of the XmlSerializer class.\n      Dim myMapping As XmlTypeMapping = _\n      (New SoapReflectionImporter().ImportTypeMapping _\n      (GetType(Group)))\n      Dim mySerializer As XmlSerializer =  _\n      New XmlSerializer(myMapping)\n\n      &#39; Reading the file requires an  XmlTextReader.\n      Dim reader As XmlTextReader = _\n      New XmlTextReader(filename)\n      reader.ReadStartElement(&quot;wrapper&quot;)\n\n      &#39; Deserialize and cast the object.\n      Dim myGroup As Group  = _\n      CType(mySerializer.Deserialize(reader), Group)\n      reader.ReadEndElement()\n      reader.Close()\n   End Sub\n\n   Public Sub DeserializeOverride(filename As String)\n      &#39; Create an instance of the XmlSerializer class.\n      Dim overRideSerializer As XmlSerializer  = _\n      CreateOverrideSerializer()\n\n      &#39; Reading the file requires an  XmlTextReader.\n      Dim reader As XmlTextReader = _\n      New XmlTextReader(filename)\n      reader.ReadStartElement(&quot;wrapper&quot;)\n\n      &#39; Deserialize and cast the object.\n      Dim myGroup As Group = _\n      CType(overRideSerializer.Deserialize(reader), Group)\n      reader.ReadEndElement()\n      reader.Close()\n      ReadGroup(myGroup)\n   End Sub\n\n   private Sub ReadGroup(myGroup As Group)\n      Console.WriteLine(myGroup.GroupName)\n      Console.WriteLine(myGroup.GroupNumber(0))\n      Console.WriteLine(myGroup.GroupNumber(1))\n      Console.WriteLine(myGroup.Today)\n      Console.WriteLine(myGroup.PostitiveInt)\n      Console.WriteLine(myGroup.IgnoreThis)\n      Console.WriteLine()\n   End Sub\n   \n   Private Function CreateOverrideSerializer() As XmlSerializer\n      Dim soapOver As SoapAttributeOverrides = New SoapAttributeOverrides()\n      Dim soapAtts As SoapAttributes = New SoapAttributes()\n\n      Dim mySoapElement As SoapElementAttribute = New SoapElementAttribute()\n      mySoapElement.ElementName = &quot;xxxx&quot;\n      soapAtts.SoapElement = mySoapElement\n      soapOver.Add(GetType(Group), &quot;PostitiveInt&quot;, soapAtts)\n\n      &#39; Override the IgnoreThis property.\n      Dim myIgnore As SoapIgnoreAttribute  = new SoapIgnoreAttribute()\n      soapAtts = New SoapAttributes()\n      soapAtts.SoapIgnore = false\n      soapOver.Add(GetType(Group), &quot;IgnoreThis&quot;, soapAtts)\n\n      &#39; Override the GroupType enumeration.\n      soapAtts = New SoapAttributes()\n      Dim xSoapEnum As SoapEnumAttribute = new SoapEnumAttribute()\n      xSoapEnum.Name = &quot;Over1000&quot;\n      soapAtts.SoapEnum = xSoapEnum\n      &#39; Add the SoapAttributes to the SoapOverrides object.\n      soapOver.Add(GetType(GroupType), &quot;A&quot;, soapAtts)\n\n      &#39; Create second enumeration and add it.\n      soapAtts = New SoapAttributes()\n      xSoapEnum = New SoapEnumAttribute()\n      xSoapEnum.Name = &quot;ZeroTo1000&quot;\n      soapAtts.SoapEnum = xSoapEnum\n      soapOver.Add(GetType(GroupType), &quot;B&quot;, soapAtts)\n\n      &#39; Override the Group type.\n      soapAtts = New SoapAttributes()\n      Dim soapType As SoapTypeAttribute = New SoapTypeAttribute()\n      soapType.TypeName = &quot;Team&quot;\n      soapAtts.SoapType = soapType\n      soapOver.Add(GetType(Group),soapAtts)\n\t\n      Dim myMapping As XmlTypeMapping = (New SoapReflectionImporter( _\n      soapOver)).ImportTypeMapping(GetType(Group))\n\t\n       Dim ser As XmlSerializer = new XmlSerializer(myMapping)\n      return ser\n   End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"SoapAttributesOverrides#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing System.Xml.Schema;\n\npublic class Group\n{\n   [SoapAttribute (Namespace = &quot;http://www.cpandl.com&quot;)]\n   public string GroupName;\n   \n   [SoapAttribute(DataType = &quot;base64Binary&quot;)]\n   public Byte [] GroupNumber;\n\n   [SoapAttribute(DataType = &quot;date&quot;, AttributeName = &quot;CreationDate&quot;)]\n   public DateTime Today;\n   [SoapElement(DataType = &quot;nonNegativeInteger&quot;, ElementName = &quot;PosInt&quot;)]\n   public string PostitiveInt;\n   // This is ignored when serialized unless it&#39;s overridden.\n   [SoapIgnore] \n   public bool IgnoreThis;\n   \n   public GroupType Grouptype;\n\n   public Vehicle MyVehicle;\n\n   // The SoapInclude allows the method to return a Car.\n   [SoapInclude(typeof(Car))]\n   public Vehicle myCar(string licNumber)\n   {\n      Vehicle v;\n      if(licNumber == &quot;&quot;)\n         {\n            v = new Car();\n   \t    v.licenseNumber = &quot;!!!!!!&quot;;\n   \t }\n      else\n   \t {\n   \t   v = new Car();\n   \t   v.licenseNumber = licNumber;\n   \t }\n      return v;\n   }\n}\n  \n// SoapInclude allows Vehicle to accept Car type.\n[SoapInclude(typeof(Car))]\npublic abstract class Vehicle\n{\n   public string licenseNumber;\n   public DateTime makeDate;\n}\n\npublic class Car: Vehicle\n{\n}\n\npublic enum GroupType\n{\n   // These enums can be overridden.\n   [SoapEnum(&quot;Small&quot;)]\n   A,\n   [SoapEnum(&quot;Large&quot;)]\n   B\n}\n \npublic class Run\n{\n   public static void Main()\n   {\n      Run test = new Run();\n      test.SerializeOriginal(&quot;SoapOriginal.xml&quot;);\n      test.SerializeOverride(&quot;SoapOverrides.xml&quot;);\n      test.DeserializeOriginal(&quot;SoapOriginal.xml&quot;);\n      test.DeserializeOverride(&quot;SoapOverrides.xml&quot;);\n   \n   }\n   public void SerializeOriginal(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping myMapping = \n      (new SoapReflectionImporter().ImportTypeMapping(\n      typeof(Group)));\n      XmlSerializer mySerializer =  \n      new XmlSerializer(myMapping);\n      Group myGroup=MakeGroup();\n      // Writing the file requires a TextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      // Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup);\n      writer.WriteEndElement();\n      writer.Close();\n   }\n\n   public void SerializeOverride(string filename)\n   {\n      // Create an instance of the XmlSerializer class\n      // that overrides the serialization.\n      XmlSerializer overRideSerializer = CreateOverrideSerializer();\n      Group myGroup=MakeGroup();\n      // Writing the file requires a TextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      // Serialize the class, and close the TextWriter.\n      overRideSerializer.Serialize(writer, myGroup);\n      writer.WriteEndElement();\n      writer.Close();\n\n   }\n\n   private Group MakeGroup(){\n      // Create an instance of the class that will be serialized.\n      Group myGroup = new Group();\n\n      // Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;;\n\n      Byte [] hexByte = new Byte[2]{Convert.ToByte(100),\n      Convert.ToByte(50)};\n      myGroup.GroupNumber = hexByte;\n\n      DateTime myDate = new DateTime(2002,5,2);\n      myGroup.Today = myDate;\n      myGroup.PostitiveInt= &quot;10000&quot;;\n      myGroup.IgnoreThis=true;\n      myGroup.Grouptype= GroupType.B;\n      Car thisCar =(Car)  myGroup.myCar(&quot;1234566&quot;);\n      myGroup.MyVehicle=thisCar;\n      return myGroup;\n   }   \t\n\n   public void DeserializeOriginal(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping myMapping = \n      (new SoapReflectionImporter().ImportTypeMapping(\n      typeof(Group)));\n      XmlSerializer mySerializer =  \n      new XmlSerializer(myMapping);\n\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader reader= \n      new XmlTextReader(filename);\n      reader.ReadStartElement(&quot;wrapper&quot;);\n\n      // Deserialize and cast the object.\n      Group myGroup; \n      myGroup = (Group) mySerializer.Deserialize(reader);\n      reader.ReadEndElement();\n      reader.Close();\n\n   }\n\n   public void DeserializeOverride(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer overRideSerializer = CreateOverrideSerializer();\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader reader= \n      new XmlTextReader(filename);\n      reader.ReadStartElement(&quot;wrapper&quot;);\n\n      // Deserialize and cast the object.\n      Group myGroup; \n      myGroup = (Group) overRideSerializer.Deserialize(reader);\n      reader.ReadEndElement();\n      reader.Close();\n      ReadGroup(myGroup);\n   }\n\n   private void ReadGroup(Group myGroup){\n      Console.WriteLine(myGroup.GroupName);\n      Console.WriteLine(myGroup.GroupNumber[0]);\n      Console.WriteLine(myGroup.GroupNumber[1]);\n      Console.WriteLine(myGroup.Today);\n      Console.WriteLine(myGroup.PostitiveInt);\n      Console.WriteLine(myGroup.IgnoreThis);\n      Console.WriteLine();\n   }\n   private XmlSerializer CreateOverrideSerializer()\n   {\n      SoapAttributeOverrides mySoapAttributeOverrides = \n      new SoapAttributeOverrides();\n      SoapAttributes soapAtts = new SoapAttributes();\n\n      SoapElementAttribute mySoapElement = new SoapElementAttribute();\n      mySoapElement.ElementName = &quot;xxxx&quot;;\n      soapAtts.SoapElement = mySoapElement;\n      mySoapAttributeOverrides.Add(typeof(Group), &quot;PostitiveInt&quot;, \n      soapAtts);\n\n      // Override the IgnoreThis property.\n      SoapIgnoreAttribute myIgnore = new SoapIgnoreAttribute();\n      soapAtts = new SoapAttributes();\n      soapAtts.SoapIgnore = false;      \n      mySoapAttributeOverrides.Add(typeof(Group), &quot;IgnoreThis&quot;, \n      soapAtts);\n\n      // Override the GroupType enumeration.\t\n      soapAtts = new SoapAttributes();\n      SoapEnumAttribute xSoapEnum = new SoapEnumAttribute();\n      xSoapEnum.Name = &quot;Over1000&quot;;\n      soapAtts.SoapEnum = xSoapEnum;\n\n      // Add the SoapAttributes to the \n      // mySoapAttributeOverridesrides object.\n      mySoapAttributeOverrides.Add(typeof(GroupType), &quot;A&quot;, \n      soapAtts);\n\n      // Create second enumeration and add it.\n      soapAtts = new SoapAttributes();\n      xSoapEnum = new SoapEnumAttribute();\n      xSoapEnum.Name = &quot;ZeroTo1000&quot;;\n      soapAtts.SoapEnum = xSoapEnum;\n      mySoapAttributeOverrides.Add(typeof(GroupType), &quot;B&quot;, \n      soapAtts);\n\n      // Override the Group type.\n      soapAtts = new SoapAttributes();\n      SoapTypeAttribute soapType = new SoapTypeAttribute();\n      soapType.TypeName = &quot;Team&quot;;\n      soapAtts.SoapType = soapType;\n      mySoapAttributeOverrides.Add(typeof(Group),soapAtts);\n\n      // Create an XmlTypeMapping that is used to create an instance \n      // of the XmlSerializer. Then return the XmlSerializer object.\n      XmlTypeMapping myMapping = (new SoapReflectionImporter(\n      mySoapAttributeOverrides)).ImportTypeMapping(typeof(Group));\n\t\n      XmlSerializer ser = new XmlSerializer(myMapping);\n      return ser;\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Serialization.SoapAttributes.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Serialization.SoapAttributes.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.SoapAttributes\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.SoapAttributes..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.SoapAttributes.SoapAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.SoapAttributes.SoapDefaultValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.SoapAttributes.SoapElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.SoapAttributes.SoapEnum\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.SoapAttributes.SoapIgnore\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.SoapAttributes.SoapType\">\r\n<meta name=\"APILocation\" content=\"System.Xml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"f9b83193-8ac6-9833-6877-f186678cb102\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Xml.Serialization\\SoapAttributes.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a collection of attribute objects that control how the  serializes and deserializes SOAP methods.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Serialization/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Serialization.SoapAttributes\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Serialization.SoapAttributes.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Serialization.SoapAttributes.yml","open_to_public_contributors":true,"api_name":["System.Xml.Serialization.SoapAttributes","System.Xml.Serialization.SoapAttributes..ctor","System.Xml.Serialization.SoapAttributes.SoapAttribute","System.Xml.Serialization.SoapAttributes.SoapDefaultValue","System.Xml.Serialization.SoapAttributes.SoapElement","System.Xml.Serialization.SoapAttributes.SoapEnum","System.Xml.Serialization.SoapAttributes.SoapIgnore","System.Xml.Serialization.SoapAttributes.SoapType"],"api_location":["System.Xml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Serialization.SoapAttributes","System::Xml::Serialization::SoapAttributes","System.Xml.Serialization.SoapAttributes.#ctor","System::Xml::Serialization::SoapAttributes::#ctor","System.Xml.Serialization.SoapAttributes.SoapAttribute","System::Xml::Serialization::SoapAttributes::SoapAttribute","System.Xml.Serialization.SoapAttributes.SoapDefaultValue","System::Xml::Serialization::SoapAttributes::SoapDefaultValue","System.Xml.Serialization.SoapAttributes.SoapElement","System::Xml::Serialization::SoapAttributes::SoapElement","System.Xml.Serialization.SoapAttributes.SoapEnum","System::Xml::Serialization::SoapAttributes::SoapEnum","System.Xml.Serialization.SoapAttributes.SoapIgnore","System::Xml::Serialization::SoapAttributes::SoapIgnore","System.Xml.Serialization.SoapAttributes.SoapType","System::Xml::Serialization::SoapAttributes::SoapType"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"f9b83193-8ac6-9833-6877-f186678cb102","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Xml.Serialization\\SoapAttributes.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Serialization/SoapAttributes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SoapAttributes class | Microsoft Docs","_op_ogTitle":"SoapAttributes class","description":"Represents a collection of attribute objects that control how the  serializes and deserializes SOAP methods.\n","toc_asset_id":"_splitted/System.Xml.Serialization/toc.json","toc_rel":"_splitted/System.Xml.Serialization/toc.json","source_url":"","ms.assetid":"System.Xml.Serialization.SoapAttributes","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.serialization.soapattributes","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.serialization.soapattributes","fileRelativePath":"System.Xml.Serialization.SoapAttributes.html"},"themesRelativePathToOutputRoot":"_themes/"}