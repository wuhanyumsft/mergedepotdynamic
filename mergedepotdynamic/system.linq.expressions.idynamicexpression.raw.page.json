{"content":"    \r\n    <h1 id=\"System_Linq_Expressions_IDynamicExpression\">\r\n      <span class=\"lang-csharp\">IDynamicExpression</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides an internal interface for accessing the arguments of DynamicExpression tree nodes as well as CallSite and Rewriting functionality.  You should not use this API.  It is only public due to DLL refactoring and exists only for internal performance optimizations.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IDynamicExpression : System.Linq.Expressions.IArgumentProvider</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_IDynamicExpression_DelegateType\" data-linktype=\"self-bookmark\">DelegateType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the delegate type used by the CallSite, which is the type of the rules used in the dynamic expression’s polymorhphic inline cache.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_IDynamicExpression_CreateCallSite\" data-linktype=\"self-bookmark\">CreateCallSite()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Optionally creates the CallSite and returns the CallSite for the DynamicExpression’s polymorphic inline cache.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Linq_Expressions_IDynamicExpression_Rewrite_System_Linq_Expressions_Expression___\" data-linktype=\"self-bookmark\">Rewrite(Expression[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Rewrites this node replacing the dynamic expression’s arguments with the provided values.  The number of <code>args</code> needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_IDynamicExpression_DelegateType\">\r\n    \r\n            <a id=\"System_Linq_Expressions_IDynamicExpression_DelegateType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DelegateType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the delegate type used by the CallSite, which is the type of the rules used in the dynamic expression’s polymorhphic inline cache.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Type DelegateType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The delegate type used by the CallSite.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_IDynamicExpression_CreateCallSite\">\r\n    \r\n            <a id=\"System_Linq_Expressions_IDynamicExpression_CreateCallSite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateCallSite()</div>        \r\n          </div>\r\n    \r\n            <p>Optionally creates the CallSite and returns the CallSite for the DynamicExpression’s polymorphic inline cache.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object CreateCallSite ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The CallSite for the DynamicExpression’s polymorphic inline cache.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Linq_Expressions_IDynamicExpression_Rewrite_System_Linq_Expressions_Expression___\">\r\n    \r\n            <a id=\"System_Linq_Expressions_IDynamicExpression_Rewrite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rewrite(Expression[])</div>        \r\n          </div>\r\n    \r\n            <p>Rewrites this node replacing the dynamic expression’s arguments with the provided values.  The number of <code>args</code> needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Linq.Expressions.Expression Rewrite (System.Linq.Expressions.Expression[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The arguments used to replace this node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></div>\r\n                  </div>\r\n                  <p>The rewritten node, but if no changes were made, then returns the same node.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.Expressions.IDynamicExpression.yml\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.IDynamicExpression\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.IDynamicExpression.CreateCallSite\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.IDynamicExpression.DelegateType\">\r\n<meta name=\"APIName\" content=\"System.Linq.Expressions.IDynamicExpression.Rewrite\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-16 06:20 AM\">\r\n<meta name=\"document_id\" content=\"078c777c-cd64-cf17-5cfb-19f6b60d0814\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides an internal interface for accessing the arguments of DynamicExpression tree nodes as well as CallSite and Rewriting functionality.  You should not use this API.  It is only public due to DLL…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Linq.Expressions/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Linq.Expressions.IDynamicExpression\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.Expressions.IDynamicExpression.yml","open_to_public_contributors":true,"api_name":["System.Linq.Expressions.IDynamicExpression","System.Linq.Expressions.IDynamicExpression.CreateCallSite","System.Linq.Expressions.IDynamicExpression.DelegateType","System.Linq.Expressions.IDynamicExpression.Rewrite"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Linq.Expressions.IDynamicExpression","System::Linq::Expressions::IDynamicExpression","System.Linq.Expressions.IDynamicExpression.CreateCallSite","System::Linq::Expressions::IDynamicExpression::CreateCallSite","System.Linq.Expressions.IDynamicExpression.DelegateType","System::Linq::Expressions::IDynamicExpression::DelegateType","System.Linq.Expressions.IDynamicExpression.Rewrite","System::Linq::Expressions::IDynamicExpression::Rewrite"],"dev_langs":["csharp"],"updated_at":"2017-03-16 06:20 AM","document_id":"078c777c-cd64-cf17-5cfb-19f6b60d0814","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Linq.Expressions/IDynamicExpression.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IDynamicExpression interface | Microsoft Docs","_op_ogTitle":"IDynamicExpression interface","description":"Provides an internal interface for accessing the arguments of DynamicExpression tree nodes as well as CallSite and Rewriting functionality.  You should not use this API.  It is only public due to DLL…","toc_asset_id":"_splitted/System.Linq.Expressions/toc.json","toc_rel":"_splitted/System.Linq.Expressions/toc.json","source_url":"","ms.assetid":"System.Linq.Expressions.IDynamicExpression","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.expressions.idynamicexpression","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.expressions.idynamicexpression","fileRelativePath":"System.Linq.Expressions.IDynamicExpression.html"},"themesRelativePathToOutputRoot":"_themes/"}