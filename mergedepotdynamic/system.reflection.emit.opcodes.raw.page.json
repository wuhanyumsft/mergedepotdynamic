{"content":"    \r\n    <h1 id=\"System_Reflection_Emit_OpCodes\">\r\n      <span class=\"lang-csharp\">OpCodes</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <a class=\"xref\" href=\"system.reflection.emit.ilgenerator\" data-linktype=\"relative-path\">ILGenerator</a> class members (such as <span class=\"xref\">stem.Reflection.Emit.ILGenerator.Emit*</span>).</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class OpCodes</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">OpCodes</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>For a detailed description of the member opcodes, see the Common Language Infrastructure (CLI) documentation, especially &quot;Partition III: CIL Instruction Set&quot; and &quot;Partition II: Metadata Definition and Semantics&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Add\" data-linktype=\"self-bookmark\">Add</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds two values and pushes the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Add_Ovf\" data-linktype=\"self-bookmark\">Add_Ovf</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Add_Ovf_Un\" data-linktype=\"self-bookmark\">Add_Ovf_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_And\" data-linktype=\"self-bookmark\">And</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Arglist\" data-linktype=\"self-bookmark\">Arglist</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an unmanaged pointer to the argument list of the current method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Beq\" data-linktype=\"self-bookmark\">Beq</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction if two values are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Beq_S\" data-linktype=\"self-bookmark\">Beq_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction (short form) if two values are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Bge\" data-linktype=\"self-bookmark\">Bge</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction if the first value is greater than or equal to the second value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Bge_S\" data-linktype=\"self-bookmark\">Bge_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Bge_Un\" data-linktype=\"self-bookmark\">Bge_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Bge_Un_S\" data-linktype=\"self-bookmark\">Bge_Un_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Bgt\" data-linktype=\"self-bookmark\">Bgt</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction if the first value is greater than the second value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Bgt_S\" data-linktype=\"self-bookmark\">Bgt_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction (short form) if the first value is greater than the second value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Bgt_Un\" data-linktype=\"self-bookmark\">Bgt_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Bgt_Un_S\" data-linktype=\"self-bookmark\">Bgt_Un_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ble\" data-linktype=\"self-bookmark\">Ble</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction if the first value is less than or equal to the second value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ble_S\" data-linktype=\"self-bookmark\">Ble_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ble_Un\" data-linktype=\"self-bookmark\">Ble_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ble_Un_S\" data-linktype=\"self-bookmark\">Ble_Un_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Blt\" data-linktype=\"self-bookmark\">Blt</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction if the first value is less than the second value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Blt_S\" data-linktype=\"self-bookmark\">Blt_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction (short form) if the first value is less than the second value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Blt_Un\" data-linktype=\"self-bookmark\">Blt_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Blt_Un_S\" data-linktype=\"self-bookmark\">Blt_Un_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Bne_Un\" data-linktype=\"self-bookmark\">Bne_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Bne_Un_S\" data-linktype=\"self-bookmark\">Bne_Un_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Box\" data-linktype=\"self-bookmark\">Box</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a value type to an object reference (type <code>O</code>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Br\" data-linktype=\"self-bookmark\">Br</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Unconditionally transfers control to a target instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Br_S\" data-linktype=\"self-bookmark\">Br_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Unconditionally transfers control to a target instruction (short form).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Break\" data-linktype=\"self-bookmark\">Break</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Brfalse\" data-linktype=\"self-bookmark\">Brfalse</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction if <code>value</code> is <code>false</code>, a null reference (<code>Nothing</code> in Visual Basic), or zero.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Brfalse_S\" data-linktype=\"self-bookmark\">Brfalse_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction if <code>value</code> is <code>false</code>, a null reference, or zero.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Brtrue\" data-linktype=\"self-bookmark\">Brtrue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction if <code>value</code> is <code>true</code>, not null, or non-zero.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Brtrue_S\" data-linktype=\"self-bookmark\">Brtrue_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control to a target instruction (short form) if <code>value</code> is <code>true</code>, not null, or non-zero.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Call\" data-linktype=\"self-bookmark\">Call</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calls the method indicated by the passed method descriptor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Calli\" data-linktype=\"self-bookmark\">Calli</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Callvirt\" data-linktype=\"self-bookmark\">Callvirt</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Castclass\" data-linktype=\"self-bookmark\">Castclass</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Attempts to cast an object passed by reference to the specified class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ceq\" data-linktype=\"self-bookmark\">Ceq</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two values. If they are equal, the integer value 1 <code>(int32</code>) is pushed onto the evaluation stack; otherwise 0 (<code>int32</code>) is pushed onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Cgt\" data-linktype=\"self-bookmark\">Cgt</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two values. If the first value is greater than the second, the integer value 1 <code>(int32</code>) is pushed onto the evaluation stack; otherwise 0 (<code>int32</code>) is pushed onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Cgt_Un\" data-linktype=\"self-bookmark\">Cgt_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 <code>(int32</code>) is pushed onto the evaluation stack; otherwise 0 (<code>int32</code>) is pushed onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ckfinite\" data-linktype=\"self-bookmark\">Ckfinite</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Throws <a class=\"xref\" href=\"system.arithmeticexception\" data-linktype=\"relative-path\">ArithmeticException</a> if value is not a finite number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Clt\" data-linktype=\"self-bookmark\">Clt</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two values. If the first value is less than the second, the integer value 1 <code>(int32</code>) is pushed onto the evaluation stack; otherwise 0 (<code>int32</code>) is pushed onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Clt_Un\" data-linktype=\"self-bookmark\">Clt_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares the unsigned or unordered values <code>value1</code> and <code>value2</code>. If <code>value1</code> is less than <code>value2</code>, then the integer value 1 <code>(int32</code>) is pushed onto the evaluation stack; otherwise 0 (<code>int32</code>) is pushed onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Constrained\" data-linktype=\"self-bookmark\">Constrained</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Constrains the type on which a virtual method call is made.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_I\" data-linktype=\"self-bookmark\">Conv_I</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value on top of the evaluation stack to <code>native int</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_I1\" data-linktype=\"self-bookmark\">Conv_I1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value on top of the evaluation stack to <code>int8</code>, then extends (pads) it to <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_I2\" data-linktype=\"self-bookmark\">Conv_I2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value on top of the evaluation stack to <code>int16</code>, then extends (pads) it to <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_I4\" data-linktype=\"self-bookmark\">Conv_I4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value on top of the evaluation stack to <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_I8\" data-linktype=\"self-bookmark\">Conv_I8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value on top of the evaluation stack to <code>int64</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_I\" data-linktype=\"self-bookmark\">Conv_Ovf_I</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the signed value on top of the evaluation stack to signed <code>native int</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_I_Un\" data-linktype=\"self-bookmark\">Conv_Ovf_I_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the unsigned value on top of the evaluation stack to signed <code>native int</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_I1\" data-linktype=\"self-bookmark\">Conv_Ovf_I1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the signed value on top of the evaluation stack to signed <code>int8</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_I1_Un\" data-linktype=\"self-bookmark\">Conv_Ovf_I1_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the unsigned value on top of the evaluation stack to signed <code>int8</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_I2\" data-linktype=\"self-bookmark\">Conv_Ovf_I2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the signed value on top of the evaluation stack to signed <code>int16</code> and extending it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_I2_Un\" data-linktype=\"self-bookmark\">Conv_Ovf_I2_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the unsigned value on top of the evaluation stack to signed <code>int16</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_I4\" data-linktype=\"self-bookmark\">Conv_Ovf_I4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the signed value on top of the evaluation stack to signed <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_I4_Un\" data-linktype=\"self-bookmark\">Conv_Ovf_I4_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the unsigned value on top of the evaluation stack to signed <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_I8\" data-linktype=\"self-bookmark\">Conv_Ovf_I8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the signed value on top of the evaluation stack to signed <code>int64</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_I8_Un\" data-linktype=\"self-bookmark\">Conv_Ovf_I8_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the unsigned value on top of the evaluation stack to signed <code>int64</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_U\" data-linktype=\"self-bookmark\">Conv_Ovf_U</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the signed value on top of the evaluation stack to <code>unsigned native int</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_U_Un\" data-linktype=\"self-bookmark\">Conv_Ovf_U_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the unsigned value on top of the evaluation stack to <code>unsigned native int</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_U1\" data-linktype=\"self-bookmark\">Conv_Ovf_U1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the signed value on top of the evaluation stack to <code>unsigned int8</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_U1_Un\" data-linktype=\"self-bookmark\">Conv_Ovf_U1_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the unsigned value on top of the evaluation stack to <code>unsigned int8</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_U2\" data-linktype=\"self-bookmark\">Conv_Ovf_U2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the signed value on top of the evaluation stack to <code>unsigned int16</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_U2_Un\" data-linktype=\"self-bookmark\">Conv_Ovf_U2_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the unsigned value on top of the evaluation stack to <code>unsigned int16</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_U4\" data-linktype=\"self-bookmark\">Conv_Ovf_U4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the signed value on top of the evaluation stack to <code>unsigned int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_U4_Un\" data-linktype=\"self-bookmark\">Conv_Ovf_U4_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the unsigned value on top of the evaluation stack to <code>unsigned int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_U8\" data-linktype=\"self-bookmark\">Conv_Ovf_U8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the signed value on top of the evaluation stack to <code>unsigned int64</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_Ovf_U8_Un\" data-linktype=\"self-bookmark\">Conv_Ovf_U8_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the unsigned value on top of the evaluation stack to <code>unsigned int64</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_R_Un\" data-linktype=\"self-bookmark\">Conv_R_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the unsigned integer value on top of the evaluation stack to <code>float32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_R4\" data-linktype=\"self-bookmark\">Conv_R4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value on top of the evaluation stack to <code>float32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_R8\" data-linktype=\"self-bookmark\">Conv_R8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value on top of the evaluation stack to <code>float64</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_U\" data-linktype=\"self-bookmark\">Conv_U</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value on top of the evaluation stack to <code>unsigned native int</code>, and extends it to <code>native int</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_U1\" data-linktype=\"self-bookmark\">Conv_U1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value on top of the evaluation stack to <code>unsigned int8</code>, and extends it to <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_U2\" data-linktype=\"self-bookmark\">Conv_U2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value on top of the evaluation stack to <code>unsigned int16</code>, and extends it to <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_U4\" data-linktype=\"self-bookmark\">Conv_U4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value on top of the evaluation stack to <code>unsigned int32</code>, and extends it to <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Conv_U8\" data-linktype=\"self-bookmark\">Conv_U8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value on top of the evaluation stack to <code>unsigned int64</code>, and extends it to <code>int64</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Cpblk\" data-linktype=\"self-bookmark\">Cpblk</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a specified number bytes from a source address to a destination address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Cpobj\" data-linktype=\"self-bookmark\">Cpobj</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the value type located at the address of an object (type <code>&amp;</code>, <code>*</code> or <code>native int</code>) to the address of the destination object (type <code>&amp;</code>, <code>*</code> or <code>native int</code>).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Div\" data-linktype=\"self-bookmark\">Div</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Divides two values and pushes the result as a floating-point (type <code>F</code>) or quotient (type <code>int32</code>) onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Div_Un\" data-linktype=\"self-bookmark\">Div_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Divides two unsigned integer values and pushes the result (<code>int32</code>) onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Dup\" data-linktype=\"self-bookmark\">Dup</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Endfilter\" data-linktype=\"self-bookmark\">Endfilter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control from the <code>filter</code> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Endfinally\" data-linktype=\"self-bookmark\">Endfinally</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transfers control from the <code>fault</code> or <code>finally</code> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Initblk\" data-linktype=\"self-bookmark\">Initblk</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a specified block of memory at a specific address to a given size and initial value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Initobj\" data-linktype=\"self-bookmark\">Initobj</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Isinst\" data-linktype=\"self-bookmark\">Isinst</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Tests whether an object reference (type <code>O</code>) is an instance of a particular class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Jmp\" data-linktype=\"self-bookmark\">Jmp</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Exits current method and jumps to specified method.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldarg\" data-linktype=\"self-bookmark\">Ldarg</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an argument (referenced by a specified index value) onto the stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldarg_0\" data-linktype=\"self-bookmark\">Ldarg_0</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the argument at index 0 onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldarg_1\" data-linktype=\"self-bookmark\">Ldarg_1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the argument at index 1 onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldarg_2\" data-linktype=\"self-bookmark\">Ldarg_2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the argument at index 2 onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldarg_3\" data-linktype=\"self-bookmark\">Ldarg_3</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the argument at index 3 onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldarg_S\" data-linktype=\"self-bookmark\">Ldarg_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the argument (referenced by a specified short form index) onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldarga\" data-linktype=\"self-bookmark\">Ldarga</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Load an argument address onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldarga_S\" data-linktype=\"self-bookmark\">Ldarga_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Load an argument address, in short form, onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I4\" data-linktype=\"self-bookmark\">Ldc_I4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes a supplied value of type <code>int32</code> onto the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I4_0\" data-linktype=\"self-bookmark\">Ldc_I4_0</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the integer value of 0 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I4_1\" data-linktype=\"self-bookmark\">Ldc_I4_1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the integer value of 1 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I4_2\" data-linktype=\"self-bookmark\">Ldc_I4_2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the integer value of 2 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I4_3\" data-linktype=\"self-bookmark\">Ldc_I4_3</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the integer value of 3 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I4_4\" data-linktype=\"self-bookmark\">Ldc_I4_4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the integer value of 4 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I4_5\" data-linktype=\"self-bookmark\">Ldc_I4_5</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the integer value of 5 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I4_6\" data-linktype=\"self-bookmark\">Ldc_I4_6</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the integer value of 6 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I4_7\" data-linktype=\"self-bookmark\">Ldc_I4_7</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the integer value of 7 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I4_8\" data-linktype=\"self-bookmark\">Ldc_I4_8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the integer value of 8 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I4_M1\" data-linktype=\"self-bookmark\">Ldc_I4_M1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the integer value of -1 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I4_S\" data-linktype=\"self-bookmark\">Ldc_I4_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the supplied <code>int8</code> value onto the evaluation stack as an <code>int32</code>, short form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_I8\" data-linktype=\"self-bookmark\">Ldc_I8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes a supplied value of type <code>int64</code> onto the evaluation stack as an <code>int64</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_R4\" data-linktype=\"self-bookmark\">Ldc_R4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes a supplied value of type <code>float32</code> onto the evaluation stack as type <code>F</code> (float).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldc_R8\" data-linktype=\"self-bookmark\">Ldc_R8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes a supplied value of type <code>float64</code> onto the evaluation stack as type <code>F</code> (float).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelem\" data-linktype=\"self-bookmark\">Ldelem</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelem_I\" data-linktype=\"self-bookmark\">Ldelem_I</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the element with type <code>native int</code> at a specified array index onto the top of the evaluation stack as a <code>native int</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelem_I1\" data-linktype=\"self-bookmark\">Ldelem_I1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the element with type <code>int8</code> at a specified array index onto the top of the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelem_I2\" data-linktype=\"self-bookmark\">Ldelem_I2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the element with type <code>int16</code> at a specified array index onto the top of the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelem_I4\" data-linktype=\"self-bookmark\">Ldelem_I4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the element with type <code>int32</code> at a specified array index onto the top of the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelem_I8\" data-linktype=\"self-bookmark\">Ldelem_I8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the element with type <code>int64</code> at a specified array index onto the top of the evaluation stack as an <code>int64</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelem_R4\" data-linktype=\"self-bookmark\">Ldelem_R4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the element with type <code>float32</code> at a specified array index onto the top of the evaluation stack as type <code>F</code> (float).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelem_R8\" data-linktype=\"self-bookmark\">Ldelem_R8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the element with type <code>float64</code> at a specified array index onto the top of the evaluation stack as type <code>F</code> (float).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelem_Ref\" data-linktype=\"self-bookmark\">Ldelem_Ref</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <code>O</code> (object reference).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelem_U1\" data-linktype=\"self-bookmark\">Ldelem_U1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the element with type <code>unsigned int8</code> at a specified array index onto the top of the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelem_U2\" data-linktype=\"self-bookmark\">Ldelem_U2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the element with type <code>unsigned int16</code> at a specified array index onto the top of the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelem_U4\" data-linktype=\"self-bookmark\">Ldelem_U4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the element with type <code>unsigned int32</code> at a specified array index onto the top of the evaluation stack as an <code>int32</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldelema\" data-linktype=\"self-bookmark\">Ldelema</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <code>&amp;</code> (managed pointer).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldfld\" data-linktype=\"self-bookmark\">Ldfld</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Finds the value of a field in the object whose reference is currently on the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldflda\" data-linktype=\"self-bookmark\">Ldflda</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Finds the address of a field in the object whose reference is currently on the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldftn\" data-linktype=\"self-bookmark\">Ldftn</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes an unmanaged pointer (type <code>native int</code>) to the native code implementing a specific method onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldind_I\" data-linktype=\"self-bookmark\">Ldind_I</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a value of type <code>native int</code> as a <code>native int</code> onto the evaluation stack indirectly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldind_I1\" data-linktype=\"self-bookmark\">Ldind_I1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a value of type <code>int8</code> as an <code>int32</code> onto the evaluation stack indirectly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldind_I2\" data-linktype=\"self-bookmark\">Ldind_I2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a value of type <code>int16</code> as an <code>int32</code> onto the evaluation stack indirectly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldind_I4\" data-linktype=\"self-bookmark\">Ldind_I4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a value of type <code>int32</code> as an <code>int32</code> onto the evaluation stack indirectly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldind_I8\" data-linktype=\"self-bookmark\">Ldind_I8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a value of type <code>int64</code> as an <code>int64</code> onto the evaluation stack indirectly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldind_R4\" data-linktype=\"self-bookmark\">Ldind_R4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a value of type <code>float32</code> as a type <code>F</code> (float) onto the evaluation stack indirectly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldind_R8\" data-linktype=\"self-bookmark\">Ldind_R8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a value of type <code>float64</code> as a type <code>F</code> (float) onto the evaluation stack indirectly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldind_Ref\" data-linktype=\"self-bookmark\">Ldind_Ref</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an object reference as a type <code>O</code> (object reference) onto the evaluation stack indirectly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldind_U1\" data-linktype=\"self-bookmark\">Ldind_U1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a value of type <code>unsigned int8</code> as an <code>int32</code> onto the evaluation stack indirectly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldind_U2\" data-linktype=\"self-bookmark\">Ldind_U2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a value of type <code>unsigned int16</code> as an <code>int32</code> onto the evaluation stack indirectly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldind_U4\" data-linktype=\"self-bookmark\">Ldind_U4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a value of type <code>unsigned int32</code> as an <code>int32</code> onto the evaluation stack indirectly.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldlen\" data-linktype=\"self-bookmark\">Ldlen</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldloc\" data-linktype=\"self-bookmark\">Ldloc</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the local variable at a specific index onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldloc_0\" data-linktype=\"self-bookmark\">Ldloc_0</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the local variable at index 0 onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldloc_1\" data-linktype=\"self-bookmark\">Ldloc_1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the local variable at index 1 onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldloc_2\" data-linktype=\"self-bookmark\">Ldloc_2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the local variable at index 2 onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldloc_3\" data-linktype=\"self-bookmark\">Ldloc_3</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the local variable at index 3 onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldloc_S\" data-linktype=\"self-bookmark\">Ldloc_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the local variable at a specific index onto the evaluation stack, short form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldloca\" data-linktype=\"self-bookmark\">Ldloca</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the address of the local variable at a specific index onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldloca_S\" data-linktype=\"self-bookmark\">Ldloca_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads the address of the local variable at a specific index onto the evaluation stack, short form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldnull\" data-linktype=\"self-bookmark\">Ldnull</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes a null reference (type <code>O</code>) onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldobj\" data-linktype=\"self-bookmark\">Ldobj</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the value type object pointed to by an address to the top of the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldsfld\" data-linktype=\"self-bookmark\">Ldsfld</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the value of a static field onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldsflda\" data-linktype=\"self-bookmark\">Ldsflda</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the address of a static field onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldstr\" data-linktype=\"self-bookmark\">Ldstr</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes a new object reference to a string literal stored in the metadata.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldtoken\" data-linktype=\"self-bookmark\">Ldtoken</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ldvirtftn\" data-linktype=\"self-bookmark\">Ldvirtftn</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes an unmanaged pointer (type <code>native int</code>) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Leave\" data-linktype=\"self-bookmark\">Leave</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Exits a protected region of code, unconditionally transferring control to a specific target instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Leave_S\" data-linktype=\"self-bookmark\">Leave_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Localloc\" data-linktype=\"self-bookmark\">Localloc</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <code>*</code>) of the first allocated byte onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Mkrefany\" data-linktype=\"self-bookmark\">Mkrefany</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes a typed reference to an instance of a specific type onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Mul\" data-linktype=\"self-bookmark\">Mul</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Multiplies two values and pushes the result on the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Mul_Ovf\" data-linktype=\"self-bookmark\">Mul_Ovf</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Mul_Ovf_Un\" data-linktype=\"self-bookmark\">Mul_Ovf_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Neg\" data-linktype=\"self-bookmark\">Neg</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Negates a value and pushes the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Newarr\" data-linktype=\"self-bookmark\">Newarr</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Newobj\" data-linktype=\"self-bookmark\">Newobj</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new object or a new instance of a value type, pushing an object reference (type <code>O</code>) onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Nop\" data-linktype=\"self-bookmark\">Nop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Not\" data-linktype=\"self-bookmark\">Not</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Or\" data-linktype=\"self-bookmark\">Or</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Pop\" data-linktype=\"self-bookmark\">Pop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the value currently on top of the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Prefix1\" data-linktype=\"self-bookmark\">Prefix1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This is a reserved instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Prefix2\" data-linktype=\"self-bookmark\">Prefix2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This is a reserved instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Prefix3\" data-linktype=\"self-bookmark\">Prefix3</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This is a reserved instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Prefix4\" data-linktype=\"self-bookmark\">Prefix4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This is a reserved instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Prefix5\" data-linktype=\"self-bookmark\">Prefix5</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This is a reserved instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Prefix6\" data-linktype=\"self-bookmark\">Prefix6</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This is a reserved instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Prefix7\" data-linktype=\"self-bookmark\">Prefix7</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This is a reserved instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Prefixref\" data-linktype=\"self-bookmark\">Prefixref</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This is a reserved instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Readonly\" data-linktype=\"self-bookmark\">Readonly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Refanytype\" data-linktype=\"self-bookmark\">Refanytype</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type token embedded in a typed reference.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Refanyval\" data-linktype=\"self-bookmark\">Refanyval</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the address (type <code>&amp;</code>) embedded in a typed reference.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Rem\" data-linktype=\"self-bookmark\">Rem</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Divides two values and pushes the remainder onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Rem_Un\" data-linktype=\"self-bookmark\">Rem_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Divides two unsigned values and pushes the remainder onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Ret\" data-linktype=\"self-bookmark\">Ret</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns from the current method, pushing a return value (if present) from the callee&#39;s evaluation stack onto the caller&#39;s evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Rethrow\" data-linktype=\"self-bookmark\">Rethrow</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Rethrows the current exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Shl\" data-linktype=\"self-bookmark\">Shl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Shr\" data-linktype=\"self-bookmark\">Shr</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Shr_Un\" data-linktype=\"self-bookmark\">Shr_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Sizeof\" data-linktype=\"self-bookmark\">Sizeof</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Starg\" data-linktype=\"self-bookmark\">Starg</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores the value on top of the evaluation stack in the argument slot at a specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Starg_S\" data-linktype=\"self-bookmark\">Starg_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stelem\" data-linktype=\"self-bookmark\">Stelem</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stelem_I\" data-linktype=\"self-bookmark\">Stelem_I</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the array element at a given index with the <code>native int</code> value on the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stelem_I1\" data-linktype=\"self-bookmark\">Stelem_I1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the array element at a given index with the <code>int8</code> value on the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stelem_I2\" data-linktype=\"self-bookmark\">Stelem_I2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the array element at a given index with the <code>int16</code> value on the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stelem_I4\" data-linktype=\"self-bookmark\">Stelem_I4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the array element at a given index with the <code>int32</code> value on the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stelem_I8\" data-linktype=\"self-bookmark\">Stelem_I8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the array element at a given index with the <code>int64</code> value on the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stelem_R4\" data-linktype=\"self-bookmark\">Stelem_R4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the array element at a given index with the <code>float32</code> value on the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stelem_R8\" data-linktype=\"self-bookmark\">Stelem_R8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the array element at a given index with the <code>float64</code> value on the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stelem_Ref\" data-linktype=\"self-bookmark\">Stelem_Ref</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the array element at a given index with the object ref value (type <code>O</code>) on the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stfld\" data-linktype=\"self-bookmark\">Stfld</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the value stored in the field of an object reference or pointer with a new value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stind_I\" data-linktype=\"self-bookmark\">Stind_I</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores a value of type <code>native int</code> at a supplied address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stind_I1\" data-linktype=\"self-bookmark\">Stind_I1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores a value of type <code>int8</code> at a supplied address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stind_I2\" data-linktype=\"self-bookmark\">Stind_I2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores a value of type <code>int16</code> at a supplied address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stind_I4\" data-linktype=\"self-bookmark\">Stind_I4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores a value of type <code>int32</code> at a supplied address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stind_I8\" data-linktype=\"self-bookmark\">Stind_I8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores a value of type <code>int64</code> at a supplied address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stind_R4\" data-linktype=\"self-bookmark\">Stind_R4</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores a value of type <code>float32</code> at a supplied address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stind_R8\" data-linktype=\"self-bookmark\">Stind_R8</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores a value of type <code>float64</code> at a supplied address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stind_Ref\" data-linktype=\"self-bookmark\">Stind_Ref</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Stores a object reference value at a supplied address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stloc\" data-linktype=\"self-bookmark\">Stloc</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stloc_0\" data-linktype=\"self-bookmark\">Stloc_0</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stloc_1\" data-linktype=\"self-bookmark\">Stloc_1</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stloc_2\" data-linktype=\"self-bookmark\">Stloc_2</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stloc_3\" data-linktype=\"self-bookmark\">Stloc_3</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stloc_S\" data-linktype=\"self-bookmark\">Stloc_S</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <code>index</code> (short form).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stobj\" data-linktype=\"self-bookmark\">Stobj</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies a value of a specified type from the evaluation stack into a supplied memory address.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Stsfld\" data-linktype=\"self-bookmark\">Stsfld</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the value of a static field with a value from the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Sub\" data-linktype=\"self-bookmark\">Sub</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subtracts one value from another and pushes the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Sub_Ovf\" data-linktype=\"self-bookmark\">Sub_Ovf</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Sub_Ovf_Un\" data-linktype=\"self-bookmark\">Sub_Ovf_Un</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Switch\" data-linktype=\"self-bookmark\">Switch</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Implements a jump table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Tailcall\" data-linktype=\"self-bookmark\">Tailcall</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Performs a postfixed method call instruction such that the current method&#39;s stack frame is removed before the actual call instruction is executed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Throw\" data-linktype=\"self-bookmark\">Throw</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Throws the exception object currently on the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"self-bookmark\">Unaligned</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <code>ldind</code>, <code>stind</code>, <code>ldfld</code>, <code>stfld</code>, <code>ldobj</code>, <code>stobj</code>, <code>initblk</code>, or <code>cpblk</code> instruction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Unbox\" data-linktype=\"self-bookmark\">Unbox</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the boxed representation of a value type to its unboxed form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Unbox_Any\" data-linktype=\"self-bookmark\">Unbox_Any</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the boxed representation of a type specified in the instruction to its unboxed form.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"self-bookmark\">Volatile</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_Xor\" data-linktype=\"self-bookmark\">Xor</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_OpCodes_TakesSingleByteArgument_System_Reflection_Emit_OpCode_\" data-linktype=\"self-bookmark\">TakesSingleByteArgument(OpCode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns true or false if the supplied opcode takes a single byte argument.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Add\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add</div>        \r\n          </div>\r\n    \r\n            <p>Adds two values and pushes the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Add;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>58</td>\n<td>add</td>\n<td>Adds two numeric values, returning a new numeric value.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>value1</code> is added to <code>value2</code>.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>Overflow is not detected for integer operations (for proper overflow handling, see <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Add_Ovf\" data-linktype=\"relative-path\">Add_Ovf</a>).  </p>\n<p>Integer addition wraps, rather than saturates. For example, assuming 8-bit integers where <code>value1</code> is set to 255 and <code>value2</code> is set to 1, the wrapped result is 0 rather than 256.  </p>\n<p>Floating-point overflow returns <code>+inf</code> (<code>PositiveInfinity</code>) or <code>-inf</code> (<code>NegativeInfinity</code>).  </p>\n<p>The acceptable operand types and their corresponding result data type are listed in the table below. If there is no entry for a particular type combination (for example, <code>int32</code> and <code>float</code>; <code>int32</code> and <code>int64</code>), it is an invalid Microsoft Intermediate Language (MSIL) and generates an error.  </p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>operand</th>\n<th>value1 type</th>\n<th>value2 type</th>\n<th>result type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>add</td>\n<td><code>int32</code></td>\n<td><code>int32</code></td>\n<td><code>int32</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>int32</code></td>\n<td><code>native int</code></td>\n<td><code>native int</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>int32</code></td>\n<td><code>&amp;</code></td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>int32</code></td>\n<td><code>*</code></td>\n<td><code>*</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>int64</code></td>\n<td><code>int64</code></td>\n<td><code>int64</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>native int</code></td>\n<td><code>int32</code></td>\n<td><code>native int</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>native int</code></td>\n<td><code>native int</code></td>\n<td><code>native int</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>native int</code></td>\n<td><code>&amp;</code></td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>native int</code></td>\n<td><code>*</code></td>\n<td><code>*</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>F</code></td>\n<td><code>F</code></td>\n<td><code>F</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>&amp;</code></td>\n<td><code>int32</code></td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>&amp;</code></td>\n<td><code>native int</code></td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>*</code></td>\n<td><code>int32</code></td>\n<td><code>*</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>*</code></td>\n<td><code>native int</code></td>\n<td><code>*</code></td>\n</tr>\n</tbody>\n</table>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>add</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Add_Ovf\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add_Ovf</div>        \r\n          </div>\r\n    \r\n            <p>Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Add_Ovf;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D6</td>\n<td>add.ovf</td>\n<td>Adds two signed integer values with an overflow check.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>value1</code> is added to <code>value2</code> with a check for overflow.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result is not represented in the result type.  </p>\n<p>You can perform this operation on signed integers. For floating-point values, use <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Add\" data-linktype=\"relative-path\">Add</a>.  </p>\n<p>The acceptable operand types and their corresponding result data type are listed in the table below. If there is no entry for a particular type combination (for example, <code>int32</code> and <code>float</code>; <code>int32</code> and <code>int64</code>), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.  </p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>operand</th>\n<th>value1 type</th>\n<th>value2 type</th>\n<th>result type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>add</td>\n<td><code>int32</code></td>\n<td><code>int32</code></td>\n<td><code>int32</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>int32</code></td>\n<td><code>native int</code></td>\n<td><code>native int</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>int32</code></td>\n<td><code>&amp;</code></td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>int32</code></td>\n<td><code>*</code></td>\n<td><code>*</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>int64</code></td>\n<td><code>int64</code></td>\n<td><code>int64</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>native int</code></td>\n<td><code>int32</code></td>\n<td><code>native int</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>native int</code></td>\n<td><code>native int</code></td>\n<td><code>native int</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>native int</code></td>\n<td><code>&amp;</code></td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>native int</code></td>\n<td><code>*</code></td>\n<td><code>*</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>F</code></td>\n<td><code>F</code></td>\n<td><code>F</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>&amp;</code></td>\n<td><code>int32</code></td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>&amp;</code></td>\n<td><code>native int</code></td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>*</code></td>\n<td><code>int32</code></td>\n<td><code>*</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>*</code></td>\n<td><code>native int</code></td>\n<td><code>*</code></td>\n</tr>\n</tbody>\n</table>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>add.ovf</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Add_Ovf_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add_Ovf_Un</div>        \r\n          </div>\r\n    \r\n            <p>Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D7</td>\n<td>add.ovf.un</td>\n<td>Adds two unsigned integer values with an overflow check.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>value1</code> is added to <code>value2</code> with a check for overflow.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result is not represented in the result type.  </p>\n<p>You can perform this operation on signed integers. For floating-point values, use <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Add\" data-linktype=\"relative-path\">Add</a>.  </p>\n<p>The acceptable operand types and their corresponding result data type are listed in the table below. If there is no entry for a particular type combination (for example, <code>int32</code> and <code>float</code>; <code>int32</code> and <code>int64</code>), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.  </p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>operand</th>\n<th>value1 type</th>\n<th>value2 type</th>\n<th>result type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>add</td>\n<td><code>int32</code></td>\n<td><code>int32</code></td>\n<td><code>int32</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>int32</code></td>\n<td><code>native int</code></td>\n<td><code>native int</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>int32</code></td>\n<td><code>&amp;</code></td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>int32</code></td>\n<td><code>*</code></td>\n<td><code>*</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>int64</code></td>\n<td><code>int64</code></td>\n<td><code>int64</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>native int</code></td>\n<td><code>int32</code></td>\n<td><code>native int</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>native int</code></td>\n<td><code>native int</code></td>\n<td><code>native int</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>native int</code></td>\n<td><code>&amp;</code></td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>native int</code></td>\n<td><code>*</code></td>\n<td><code>*</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>F</code></td>\n<td><code>F</code></td>\n<td><code>F</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>&amp;</code></td>\n<td><code>int32</code></td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>&amp;</code></td>\n<td><code>native int</code></td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>*</code></td>\n<td><code>int32</code></td>\n<td><code>*</code></td>\n</tr>\n<tr>\n<td>add</td>\n<td><code>*</code></td>\n<td><code>native int</code></td>\n<td><code>*</code></td>\n</tr>\n</tbody>\n</table>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>add.ovf.un</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_And\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">And</div>        \r\n          </div>\r\n    \r\n            <p>Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode And;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Instruction</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5F</td>\n<td>and</td>\n<td>Determines the bitwise AND of two integer values.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value1</code> and <code>value2</code> are popped from the stack; the bitwise AND of the two values is computed.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>The <code>and</code> instruction computes the bitwise AND of the top two values on the stack and leaves the result on the stack.  </p>\n<p><code>And</code> is an integer-specific operation.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>and</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Arglist\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Arglist</div>        \r\n          </div>\r\n    \r\n            <p>Returns an unmanaged pointer to the argument list of the current method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Arglist;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 00</td>\n<td>arglist</td>\n<td>Returns an argument list handle for the current method.</td>\n</tr>\n</tbody>\n</table>\n<p> No evaluation stack behaviors are performed by this operation.  </p>\n<p> The <code>arglist</code> instruction returns an opaque handle (an unmanaged pointer, of type <code>native int</code>) that represents the argument list of the current method. This handle is valid only during the lifetime of the current method. You can, however, pass the handle to other methods as long as the current method is on the thread of control. You can only execute the <code>arglist</code> instruction within a method that takes a variable number of arguments.  </p>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>arglist</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Beq\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Beq</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction if two values are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Beq;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3B &lt; <code>int32</code> &gt;</td>\n<td>beq <code>target</code></td>\n<td>Branch to the target instruction at offset <code>target</code> if the two values are equal.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is equal to <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>beq</code> instruction transfers control to the specified target instruction if <code>value1</code> is equal to <code>value2</code>. The effect is the same as performing a <code>ceq</code> instruction followed by a <code>brtrue</code> branch to the specific target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>The acceptable operand types are encapsulated below:  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.  </p>\n<p>Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Leave\" data-linktype=\"relative-path\">Leave</a> instruction instead).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>beq</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Beq_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Beq_S</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction (short form) if two values are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Beq_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2E &lt; <code>int8</code> &gt;</td>\n<td>beq.s <code>target</code></td>\n<td>Branch to the target instruction at offset <code>target</code> if equal, short form</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is equal to <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>beq.s</code> instruction transfers control to the specified target instruction if <code>value1</code> is equal to <code>value2</code>. The effect is the same as performing a <code>ceq</code> instruction followed by a <code>brtrue</code> branch to the specific target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>The acceptable operand types are encapsulated below:  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.  </p>\n<p>Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Leave\" data-linktype=\"relative-path\">Leave</a> instruction instead).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>beq.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Bge\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bge</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction if the first value is greater than or equal to the second value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Bge;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3C <code>&lt;int32&gt;</code></td>\n<td>bge <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is greater than or equal to <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>bge</code> instruction transfers control to the specified target instruction if <code>value1</code> is greater than or equal to <code>value2</code>. The effect is identical to performing a <code>clt.un</code> instruction followed by a <code>brfalse</code> branch to the specific target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>bge</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Bge_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bge_S</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Bge_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2F <code>&lt;int8&gt;</code></td>\n<td>bge.s <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is greater than or equal to <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>bge.s</code> instruction transfers control to the specified target instruction if <code>value1</code> is greater than or equal to <code>value2</code>. The effect is identical to performing a <code>clt.un</code> instruction followed by a <code>brfalse</code> branch to the specific target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>bge.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Bge_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bge_Un</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Bge_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>41 <code>&lt;int32&gt;</code></td>\n<td>bge.un <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values).</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is greater than or equal to <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>bge.un</code> instruction transfers control to the specified target instruction if <code>value1</code> is greater than or equal to <code>value2</code>, when compared using unsigned integer or unordered float values. The effect is identical to performing a <code>clt</code> instruction followed by a <code>brfalse</code> branch to the specific target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>bge.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Bge_Un_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bge_Un_S</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Bge_Un_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>34 &lt; <code>int8</code> &gt;</td>\n<td>bge.un.s <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values), short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is greater than or equal to <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>bge.un.s</code> instruction transfers control to the specified target instruction if <code>value1</code> is greater than or equal to <code>value2</code>, when compared using unsigned integer or unordered float values. The effect is identical to performing a <code>clt</code> instruction followed by a <code>brfalse</code> branch to the specific target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>bge.un.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Bgt\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bgt</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction if the first value is greater than the second value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Bgt;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3D &lt; <code>int32</code> &gt;</td>\n<td>bgt <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is greater than the second value.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is greater than <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>bgt</code> instruction transfers control to the specified target instruction if <code>value1</code> is greater than <code>value2</code>. The effect is identical to performing a <code>cgt</code> instruction followed by a <code>brtrue</code> branch to the specific target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>bgt</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Bgt_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bgt_S</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction (short form) if the first value is greater than the second value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Bgt_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>30 &lt; <code>int8</code> &gt;</td>\n<td>bgt.s <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is greater than the second value, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is greater than <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>bgt.s</code> instruction transfers control to the specified target instruction if <code>value1</code> is greater than <code>value2</code>. The effect is identical to performing a <code>cgt</code> instruction followed by a <code>brtrue</code> branch to the specific target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>bgt.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Bgt_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bgt_Un</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Bgt_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>42 &lt; <code>int32</code> &gt;</td>\n<td>bgt.un <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values).</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is greater than <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>bgt.un</code> instruction transfers control to the specified target instruction if <code>value1</code> is greater than <code>value2</code>, when compared using unsigned integer or unordered float values. The effect is identical to performing a <code>cgt.un</code> instruction followed by a <code>brtrue</code> branch to the specific target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>bgt.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Bgt_Un_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bgt_Un_S</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>35 &lt; <code>int8</code> &gt;</td>\n<td>bgt.un.s <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values), short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is greater than <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>bgt.un.s</code> instruction transfers control to the specified target instruction if <code>value1</code> is greater than <code>value2</code>, when compared using unsigned integer or unordered float values. The effect is identical to performing a <code>cgt.un</code> instruction followed by a <code>brtrue</code> branch to the specific target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>bgt.un.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ble\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ble</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction if the first value is less than or equal to the second value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ble;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3E <code>&lt;int32&gt;</code></td>\n<td>ble <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is less than or equal to the second value.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is less than or equal to <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>ble</code> instruction transfers control to the specified target instruction if <code>value1</code> is less than or equal to <code>value2</code>. The effect is identical to performing a <code>cgt</code> instruction (<code>cgt.un</code> for floats) followed by a <code>brfalse</code> branch to the specific target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ble</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ble_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ble_S</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ble_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>31 <code>&lt;int8&gt;</code></td>\n<td>ble.s <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is less than or equal to the second value, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is less than or equal to <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>ble.s</code> instruction transfers control to the specified target instruction if <code>value1</code> is less than or equal to <code>value2</code>. The effect is identical to performing a <code>cgt</code> instruction (<code>cgt.un</code> for floats) instruction followed by a<code>brfalse</code> branch to the specific target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ble.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ble_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ble_Un</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ble_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>43 <code>&lt;int32&gt;</code></td>\n<td>ble.un <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values).</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is less than or equal to <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>ble.un</code> instruction transfers control to the specified target instruction if <code>value1</code> is less than or equal to <code>value2</code>, when compared using unsigned integer or unordered float values. The effect is identical to performing a <code>cgt.un</code> instruction (<code>cgt</code> for floats) followed by a <code>brfalse</code> branch to the specific target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ble.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ble_Un_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ble_Un_S</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ble_Un_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>36 <code>&lt;int8&gt;</code></td>\n<td>ble.un.s <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values), short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is less than or equal to <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>ble.un.s</code> instruction transfers control to the specified target instruction if <code>value1</code> is less than or equal to <code>value2</code>, when compared using unsigned integer or unordered float values. The effect is identical to performing a <code>cgt.un</code> instruction (<code>cgt</code> for floats) followed by a <code>brfalse</code> branch to the specific target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ble.un.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Blt\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Blt</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction if the first value is less than the second value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Blt;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3F &lt; <code>int32</code> &gt;</td>\n<td>blt <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is less than the second value.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is less than <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>blt</code> instruction transfers control to the specified target instruction if <code>value1</code> is less than or equal to <code>value2</code>. The effect is identical to performing a <code>clt</code> instruction followed by a <code>brtrue</code> branch to the specific target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>blt</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Blt_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Blt_S</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction (short form) if the first value is less than the second value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Blt_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>32 &lt; <code>int8</code> &gt;</td>\n<td>blt.s <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is less than the second value, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is less than <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>blt.s</code> instruction transfers control to the specified target instruction if <code>value1</code> is less than <code>value2</code>. The effect is identical to performing a <code>clt</code> instruction followed by a <code>brtrue</code> branch to the specific target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>blt.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Blt_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Blt_Un</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Blt_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>44 &lt; <code>int32</code> &gt;</td>\n<td>blt.un <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values).</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is less than <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>blt.un</code> instruction transfers control to the specified target instruction if <code>value1</code> is less than <code>value2</code>, when compared using unsigned integer or unordered float values. The effect is identical to performing a <code>clt.un</code> instruction followed by a <code>brtrue</code> branch to the specific target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>blt.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Blt_Un_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Blt_Un_S</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Blt_Un_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>37 &lt; <code>int8</code> &gt;</td>\n<td>blt.un.s <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values), short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is less than <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>blt.un</code> instruction transfers control to the specified target instruction if <code>value1</code> is less than <code>value2</code>, when compared using unsigned integer or unordered float values. The effect is identical to performing a <code>clt.un</code> instruction followed by a <code>brtrue</code> branch to the specific target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>blt.un.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Bne_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bne_Un</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Bne_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>40 &lt; <code>int32</code> &gt;</td>\n<td>bne.un <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values).</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is not equal to <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>bne.un</code> instruction transfers control to the specified target instruction if <code>value1</code> is not equal to <code>value2</code>, when compared using unsigned integer or unordered float values. The effect is identical to performing a <code>ceq</code> instruction followed by a <code>brfalse</code> branch to the specific target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>bne.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Bne_Un_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bne_Un_S</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Bne_Un_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>33 &lt; <code>int8</code> &gt;</td>\n<td>bne.un.s <code>target</code></td>\n<td>Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values), short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; if <code>value1</code> is not equal to <code>value2</code>, the branch operation is performed.  </p>\n<p>The <code>bne.un</code> instruction transfers control to the specified target instruction if <code>value1</code> is not equal to <code>value2</code>, when compared using unsigned integer or unordered float values. The effect is identical to performing a <code>ceq</code> instruction followed by a <code>brfalse</code> branch to the specific target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>bne.un.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Box\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Box</div>        \r\n          </div>\r\n    \r\n            <p>Converts a value type to an object reference (type <code>O</code>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Box;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8C &lt; <code>T</code> &gt;</td>\n<td>box <code>valTypeToken</code></td>\n<td>Convert a value type (of the type specified in <code>valTypeToken</code>) to a true object reference.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value type is pushed onto the stack.  </p>\n</li>\n<li><p>The value type is popped from the stack; the <code>box</code> operation is performed.  </p>\n</li>\n<li><p>An object reference to the resulting &quot;boxed&quot; value type is pushed onto the stack.  </p>\n<p>A value type has two separate representations within the Common Language Infrastructure (CLI):  </p>\n</li>\n</ol>\n<ul>\n<li><p>A &#39;raw&#39; form used when a value type is embedded within another object or on the stack.  </p>\n</li>\n<li><p>A &#39;boxed&#39; form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.  </p>\n<p>The <code>box</code> instruction converts the &#39;raw&#39; (unboxed) value type into an object reference (type <code>O</code>). This is accomplished by creating a new object and copying the data from the value type into the newly allocated object. <code>valTypeToken</code> is a metadata token indicating the type of the value type on the stack.  </p>\n<p><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> is thrown if there is insufficient memory to satisfy the request.  </p>\n<p><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown if the class cannot be found. This is typically detected when Microsoft Intermediate Language (MSIL) is converted to native code, rather than at runtime.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>box</code> opcode:  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode, Type)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Br\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Br</div>        \r\n          </div>\r\n    \r\n            <p>Unconditionally transfers control to a target instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Br;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>38 &lt; <code>int32</code> &gt;</td>\n<td>br <code>target</code></td>\n<td>Branches to a target instruction at the specified offset.</td>\n</tr>\n</tbody>\n</table>\n<p> No evaluation stack behaviors are performed by this operation.  </p>\n<p> The <code>br</code> instruction unconditionally transfers control to a target instruction. The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p> If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>br</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Br_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Br_S</div>        \r\n          </div>\r\n    \r\n            <p>Unconditionally transfers control to a target instruction (short form).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Br_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2B &lt; <code>int8</code> &gt;</td>\n<td>br.s <code>target</code></td>\n<td>Branches to a target instruction at the specified offset, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> No evaluation stack behaviors are performed by this operation.  </p>\n<p> The <code>br.s</code> instruction unconditionally transfers control to a target instruction. The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p> If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>br.s</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Break\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Break</div>        \r\n          </div>\r\n    \r\n            <p>Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Break;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>break</td>\n<td>inform a debugger that a breakpoint has been reached.</td>\n</tr>\n</tbody>\n</table>\n<p> No evaluation stack behaviors are performed by this operation.  </p>\n<p> The <code>break</code> instruction is for debugging support. It signals the CLI to inform the debugger that a break point has been tripped. It has no other effect on the interpreter state.  </p>\n<p> The <code>break</code> instruction has the smallest possible instruction size enabling code patching with a break point and generating minimal disturbance to the surrounding code.  </p>\n<p> The <code>break</code> instruction can trap to a debugger, do nothing, or raise a security exception. The exact behavior is implementation-defined.  </p>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>break</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Brfalse\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Brfalse</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction if <code>value</code> is <code>false</code>, a null reference (<code>Nothing</code> in Visual Basic), or zero.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Brfalse;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>39 &lt; <code>int32</code> &gt;</td>\n<td>brfalse <code>target</code><br><br> brnull <code>target</code><br><br> brzero <code>target</code></td>\n<td>Branches to a target instruction at the specified offset if <code>false</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack by a previous operation.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack; if <code>value</code> is <code>false</code>, branch to <code>target</code>.  </p>\n<p>The <code>brfalse</code> instruction (and its aliases <code>brnull</code> and <code>brzero</code>) transfers control to the specified target instruction if <code>value</code> (of type <code>int32</code>, <code>int64</code>, object reference <code>O</code>, managed pointer <code>&amp;</code>, transient pointer <code>*</code>, <code>native int</code>) is zero (<code>false</code>). If <code>value</code> is non-zero (<code>true</code>) execution continues at the next instruction.  </p>\n<p>The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>brfalse</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Brfalse_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Brfalse_S</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction if <code>value</code> is <code>false</code>, a null reference, or zero.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Brfalse_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2C &lt;<code>int8</code> &gt;</td>\n<td>brfalse.s <code>target</code><br><br> brnull.s <code>target</code><br><br> brzero.s <code>target</code></td>\n<td>Branches to a target instruction at the specified offset if <code>false</code>, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack by a previous operation.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack; if <code>value</code> is <code>false</code>, branch to <code>target</code>.  </p>\n<p>The <code>brfalse.s</code> instruction (and its aliases <code>brnull</code> and <code>brzero</code>) transfers control to the specified target instruction if <code>value</code> (of type <code>int32</code>, <code>int64</code>, object reference <code>O</code>, managed pointer <code>&amp;</code>, transient pointer <code>*</code>, <code>native int</code>) is zero (<code>false</code>). If <code>value</code> is non-zero (<code>true</code>) execution continues at the next instruction.  </p>\n<p>The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>brfalse.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Brtrue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Brtrue</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction if <code>value</code> is <code>true</code>, not null, or non-zero.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Brtrue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3A &lt; <code>int32</code> &gt;</td>\n<td>brtrue <code>target</code><br><br> brinst <code>target</code></td>\n<td>Branch to a target instruction at the specified offset if non-zero (<code>true</code>).</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack by a previous operation.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack; if <code>value</code> is <code>true</code>, branch to <code>target</code>.  </p>\n<p>The <code>brtrue</code> instruction transfers control to the specified target instruction if <code>value</code> (type <code>native int</code>) is nonzero (<code>true</code>). If <code>value</code> is zero (<code>false</code>) execution continues at the next instruction.  </p>\n<p>If <code>value</code> is an object reference (type <code>O</code>) then <code>brinst</code> (an alias for <code>brtrue</code>) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldnull\" data-linktype=\"relative-path\">Ldnull</a>).  </p>\n<p>The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>brtrue</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Brtrue_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Brtrue_S</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control to a target instruction (short form) if <code>value</code> is <code>true</code>, not null, or non-zero.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Brtrue_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2D &lt; <code>int8</code> &gt;</td>\n<td>brtrue.s <code>target</code><br><br> brinst.s <code>target</code></td>\n<td>Branch to a target instruction at the specified offset if non-zero (<code>true</code>), short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack by a previous operation.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack; if <code>value</code> is <code>true</code>, branch to <code>target</code>.  </p>\n<p>The <code>brtrue.s</code> instruction transfers control to the specified target instruction if <code>value</code> (type <code>native int</code>) is nonzero (<code>true</code>). If <code>value</code> is zero (<code>false</code>) execution continues at the next instruction.  </p>\n<p>If <code>value</code> is an object reference (type <code>O</code>) then <code>brinst</code> (an alias for <code>brtrue</code>) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldnull\" data-linktype=\"relative-path\">Ldnull</a>).  </p>\n<p>The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes. Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>brtrue.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Call\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Call</div>        \r\n          </div>\r\n    \r\n            <p>Calls the method indicated by the passed method descriptor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Call;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>28 &lt; <code>T</code> &gt;</td>\n<td>call <code>methodDesc</code></td>\n<td>Call the method described by <code>methodDesc</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>Method arguments <code>arg1</code> through <code>argN</code> are pushed onto the stack.  </p>\n</li>\n<li><p>Method arguments <code>arg1</code> through <code>argN</code> are popped from the stack; the method call is performed with these arguments and control is transferred to the method referred to by the method descriptor. When complete, a return value is generated by the callee method and sent to the caller.  </p>\n</li>\n<li><p>The return value is pushed onto the stack.  </p>\n<p>The <code>call</code> instruction calls the method indicated by the method descriptor passed with the instruction. The method descriptor is a metadata token that indicates the method to call and the number, type, and order of the arguments that have been placed on the stack to be passed to that method as well as the calling convention to be used. The <code>call</code> instruction can be immediately preceded by a <code>tail</code> (<a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Tailcall\" data-linktype=\"relative-path\">Tailcall</a>) prefix instruction to specify that the current method state should be released before transferring control. If the call transfers control to a method of higher trust than the origin method, the stack frame is not released. Instead, the execution continues silently as if the <code>tail</code> had not been supplied. The metadata token carries sufficient information to determine whether the call is to a static method, an instance method, a virtual method, or a global function. In all of these cases the destination address is determined entirely from the method descriptor (contrast this with the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Callvirt\" data-linktype=\"relative-path\">Callvirt</a> instruction for calling virtual methods, where the destination address also depends upon the runtime type of the instance reference pushed before the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Callvirt\" data-linktype=\"relative-path\">Callvirt</a>).  </p>\n<p>The arguments are placed on the stack in left-to-right order. That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order. There are three important special cases:  </p>\n<ol>\n<li><p>Calls to an instance (or virtual) method must push that instance reference before any of the user-visible arguments. The instance reference must not be a null reference. The signature carried in the metadata does not contain an entry in the parameter list for the <code>this</code> pointer; instead, it uses a bit to indicate whether the method requires passing the <code>this</code> pointer.  </p>\n</li>\n<li><p>It is valid to call a virtual method using <code>call</code> (rather than <code>callvirt</code>); this indicates that the method is to be resolved using the class specified by method rather than as specified dynamically from the object being invoked.  </p>\n</li>\n<li><p>Note that a delegate&#39;s <code>Invoke</code> method can be called with either the <code>call</code> or <code>callvirt</code> instruction.  </p>\n</li>\n</ol>\n<p><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> may be thrown if system security does not grant the caller access to the called method. The security check may occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> When calling methods of System.Object on value types, consider using the <code>constrained</code> prefix with the <code>callvirt</code> instruction instead of emitting a <code>call</code> instruction. This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem. Consider using the <code>constrained</code> prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a <code>MethodImpl</code>. These issues are described in more detail in the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Constrained\" data-linktype=\"relative-path\">Constrained</a> opcode.  </p>\n</div>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overloads can use the <code>call</code> opcode:  </p>\n<ul>\n<li><p>ILGenerator.Emit(OpCode, MethodInfo)  </p>\n</li>\n<li><p>ILGenerator.EmitCall(OpCode, MethodInfo, Type[])  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_EmitCall_\" data-linktype=\"relative-path\">EmitCall</a> method is provided for <code>varargs</code> calls. Use the <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method for normal calls.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Calli\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Calli</div>        \r\n          </div>\r\n    \r\n            <p>Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Calli;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>29 &lt; <code>T</code> &gt;</td>\n<td>calli <code>callSiteDescr</code></td>\n<td>Calls the method pointed to with arguments described by the calling convention.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>Method arguments <code>arg1</code> through <code>argN</code> are pushed onto the stack.  </p>\n</li>\n<li><p>The method entry pointer is pushed onto the stack.  </p>\n</li>\n<li><p>Method arguments <code>arg1</code> through <code>argN</code> and the method entry pointer are popped from the stack; the call to the method is performed. When complete, a return value is generated by the callee method and sent to the caller.  </p>\n</li>\n<li><p>The return value is pushed onto the stack.  </p>\n<p>The <code>calli</code> instruction calls the method entry pointer with the arguments <code>arg1</code> through <code>argN</code>. The types of these arguments are described by the specific calling convention (<code>callSiteDesc</code>). The <code>calli</code> instruction may be immediately preceded by a <code>tail</code> prefix (<a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Tailcall\" data-linktype=\"relative-path\">Tailcall</a>) to specify that the current method state should be released before transferring control. If the call would transfer control to a method of higher trust than the origin method the stack frame will not be released; instead, the execution will continue silently as if the <code>tail</code> had not been supplied.  </p>\n<p>The method entry pointer is assumed to be a specific pointer to native code (of the target machine) that can be legitimately called with the arguments described by the calling convention (a metadata token for a stand-alone signature). Such a pointer can be created using the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldftn\" data-linktype=\"relative-path\">Ldftn</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldvirtftn\" data-linktype=\"relative-path\">Ldvirtftn</a> instructions, or passed in from native code.  </p>\n<p>The calling convention is not checked dynamically, so code that uses a <code>calli</code> instruction does not work correctly if the destination does not actually use the specified calling convention.  </p>\n<p>The arguments are placed on the stack in left-to-right order. That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order. The argument-building code sequence for an instance or virtual method must push that instance reference (which must not be a null reference) before any of the user-visible arguments.  </p>\n<p><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> may be thrown if the system security does not grant the caller access to the called method. The security check can occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_EmitCalli_\" data-linktype=\"relative-path\">EmitCalli</a> methods can be used to perform a <code>calli</code> instruction on the stack. Note that <code>calli</code> should be called through the below methods rather than using the <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> class to place the instruction directly on the stack.  </p>\n</li>\n</ol>\n<ul>\n<li><p>ILGenerator.EmitCalli(Opcode, CallingConventions, Type, Type[], Type[]) for calls using a managed calling convention.  </p>\n</li>\n<li><p>ILGenerator.EmitCalli(Opcode, CallingConvention, Type, Type[]) for calls using an unmanaged calling convention.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Callvirt\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Callvirt</div>        \r\n          </div>\r\n    \r\n            <p>Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Callvirt;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6F &lt; <code>T</code> &gt;</td>\n<td>callvirt <code>method</code></td>\n<td>Calls a specific method associated with <code>obj</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>obj</code> is pushed onto the stack.  </p>\n</li>\n<li><p>Method arguments <code>arg1</code> through <code>argN</code> are pushed onto the stack.  </p>\n</li>\n<li><p>Method arguments <code>arg1</code> through <code>argN</code> and the object reference <code>obj</code> are popped from the stack; the method call is performed with these arguments and control is transferred to the method in <code>obj</code> referred to by the method metadata token. When complete, a return value is generated by the callee method and sent to the caller.  </p>\n</li>\n<li><p>The return value is pushed onto the stack.  </p>\n<p>The <code>callvirt</code> instruction calls a late-bound method on an object. That is, the method is chosen based on the runtime type of <code>obj</code> rather than the compile-time class visible in the method pointer. <code>Callvirt</code> can be used to call both virtual and instance methods. The <code>callvirt</code> instruction may be immediately preceded by a <code>tail</code> (<a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Tailcall\" data-linktype=\"relative-path\">Tailcall</a>) prefix to specify that the current stack frame should be released before transferring control. If the call would transfer control to a method of higher trust than the original method the stack frame will not be released.  </p>\n<p>The method metadata token provides the name, class and signature of the method to call. The class associated with <code>obj</code> is the class of which it is an instance. If the class defines a non-static method that matches the indicated method name and signature, this method is called. Otherwise all classes in the base class chain of this class are checked in order. It is an error if no method is found.  </p>\n<p><code>Callvirt</code> pops the object and the associated arguments off the evaluation stack before calling the method. If the method has a return value, it is pushed on the stack upon method completion. On the callee side, the <code>obj</code> parameter is accessed as argument 0, <code>arg1</code> as argument 1, and so on.  </p>\n<p>The arguments are placed on the stack in left-to-right order. That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order. The instance reference <code>obj</code> (always required for <code>callvirt</code>) must be pushed before any of the user-visible arguments. The signature (carried in the metadata token) need not contain an entry in the parameter list for the this pointer.  </p>\n<p>Note that a virtual method can also be called using the<a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Call\" data-linktype=\"relative-path\">Call</a> instruction.  </p>\n<p><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a> is thrown if a non-static method with the indicated name and signature could not be found in the class associated with <code>obj</code> or any of its base classes. This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if obj is null.  </p>\n<p><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown if system security does not grant the caller access to the called method. The security check may occur when the CIL is converted to native code rather than at run time.  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> When calling methods of System.Object on value types, consider using the <code>constrained</code> prefix with the <code>callvirt</code> instruction. This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem. Consider using the <code>constrained</code> prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a <code>MethodImpl</code>. These issues are described in more detail in the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Constrained\" data-linktype=\"relative-path\">Constrained</a> opcode.  </p>\n</div>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>callvirt</code> opcode:  </p>\n<ul>\n<li><p>ILGenerator.Emit(OpCode, MethodInfo)  </p>\n</li>\n<li><p>ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Castclass\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Castclass</div>        \r\n          </div>\r\n    \r\n            <p>Attempts to cast an object passed by reference to the specified class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Castclass;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>74 &lt; <code>T</code> &gt;</td>\n<td>castclass <code>class</code></td>\n<td>Casts an object to a new object of type <code>class</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference is pushed onto the stack.  </p>\n</li>\n<li><p>The object reference is popped from the stack; the referenced object is cast as the specified <code>class</code>.  </p>\n</li>\n<li><p>If successful, a new object reference is pushed onto the stack.  </p>\n<p>The <code>castclass</code> instruction attempts to cast the object reference (type <code>O</code>) atop the stack to a specified class. The new class is specified by a metadata token indicating the desired class. If the class of the object on the top of the stack does not implement the new class (assuming the new class is an interface) and is not a derived class of the new class then an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown. If the object reference is a null reference, <code>castclass</code> succeeds and returns the new object as a null reference.  </p>\n<p><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown if obj cannot be cast to class.  </p>\n<p><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown if class cannot be found. This is typically detected when a Microsoft Intermediate Language (MSIL)instruction is converted to native code rather than at runtime.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>castclass</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ceq\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ceq</div>        \r\n          </div>\r\n    \r\n            <p>Compares two values. If they are equal, the integer value 1 <code>(int32</code>) is pushed onto the evaluation stack; otherwise 0 (<code>int32</code>) is pushed onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ceq;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 01</td>\n<td>ceq</td>\n<td>Pushes 1 if <code>value1</code> equals <code>value2</code>; else pushes 0.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>value1</code> is compared to <code>value2</code>.  </p>\n</li>\n<li><p>If <code>value1</code> is equal to <code>value2</code>, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.  </p>\n<p>The <code>ceq</code> instruction compares <code>value1</code> and <code>value2</code>. If <code>value1</code> is equal to <code>value2</code>, then 1 (of type <code>int32</code>) is pushed on the stack. Otherwise 0 (of type <code>int32</code>) is pushed on the stack.  </p>\n<p>For floating-point number, <code>ceq</code> will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ceq</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Cgt\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cgt</div>        \r\n          </div>\r\n    \r\n            <p>Compares two values. If the first value is greater than the second, the integer value 1 <code>(int32</code>) is pushed onto the evaluation stack; otherwise 0 (<code>int32</code>) is pushed onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Cgt;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 02</td>\n<td>cgt</td>\n<td>Pushes 1 if <code>value1</code> is greater than <code>value2</code>; else pushes 0.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>cgt</code> tests if <code>value1</code> is greater than <code>value2</code>.  </p>\n</li>\n<li><p>If <code>value1</code> is greater than <code>value2</code>, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.  </p>\n<p>The <code>cgt</code> instruction compares <code>value1</code> and <code>value2</code>. If <code>value1</code> is strictly greater than <code>value2</code>, then an <code>int32</code> value of 1 is pushed on the stack. Otherwise, an <code>int32</code> value of 0 is pushed on the stack.  </p>\n</li>\n</ol>\n<ul>\n<li><p>For floating-point numbers, <code>cgt</code> returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>cgt</code> opcode:  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Cgt_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cgt_Un</div>        \r\n          </div>\r\n    \r\n            <p>Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 <code>(int32</code>) is pushed onto the evaluation stack; otherwise 0 (<code>int32</code>) is pushed onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Cgt_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 03</td>\n<td>cgt.un</td>\n<td>Pushes 1 if <code>value1</code> is greater than <code>value2</code>; else pushes 0 (unsigned values).</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>cgt.un</code> tests if <code>value1</code> is greater than <code>value2</code>.  </p>\n</li>\n<li><p>If <code>value1</code> is greater than <code>value2</code>, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.  </p>\n<p>An <code>int32</code> value of 1 is pushed on the stack if any of the following is <code>true</code> :  </p>\n<p>For floating-point numbers, <code>value1</code> is not ordered with respect to <code>value2</code>.  </p>\n<p>For integer values, <code>value1</code> is strictly greater than <code>value2</code> when considered as unsigned numbers.  </p>\n<p>Otherwise an <code>int32</code> value of 0 is pushed on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>cgt.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ckfinite\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ckfinite</div>        \r\n          </div>\r\n    \r\n            <p>Throws <a class=\"xref\" href=\"system.arithmeticexception\" data-linktype=\"relative-path\">ArithmeticException</a> if value is not a finite number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ckfinite;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C3</td>\n<td>ckfinite</td>\n<td>throw <a class=\"xref\" href=\"system.arithmeticexception\" data-linktype=\"relative-path\">ArithmeticException</a> if value is not a finite number.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack..  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the <code>ckfinite</code> instruction is performed on it.  </p>\n</li>\n<li><p><code>value</code> is pushed back onto the stack if no exception is thrown.  </p>\n<p>The <code>ckfinite instruction</code> throws <a class=\"xref\" href=\"system.arithmeticexception\" data-linktype=\"relative-path\">ArithmeticException</a> if <code>value</code> (a floating-point number) is either a &quot;not a number&quot; value (NaN) or a <code>+-</code> infinity value. <code>Ckfinite</code> leaves the value on the stack if no exception is thrown. Execution is unspecified if <code>value</code> is not a floating-point number.  </p>\n<p><a class=\"xref\" href=\"system.arithmeticexception\" data-linktype=\"relative-path\">ArithmeticException</a> is thrown if <code>value</code> is not a &#39;normal&#39; number.  </p>\n<p>Note that a special exception or a derived class of <a class=\"xref\" href=\"system.arithmeticexception\" data-linktype=\"relative-path\">ArithmeticException</a> may be more appropriate, passing the incorrect value to the exception handler.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ckfinite</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Clt\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clt</div>        \r\n          </div>\r\n    \r\n            <p>Compares two values. If the first value is less than the second, the integer value 1 <code>(int32</code>) is pushed onto the evaluation stack; otherwise 0 (<code>int32</code>) is pushed onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Clt;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 04</td>\n<td>clt</td>\n<td>Pushes 1 if <code>value1</code> is less than <code>value2</code>; else pushes 0.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is: <code>value1</code> is pushed onto the stack.  </p>\n<ol>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>clt</code> tests if <code>value1</code> is less than <code>value2</code>.  </p>\n</li>\n<li><p>If <code>value1</code> is less than <code>value2</code>, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.  </p>\n<p>The <code>clt</code> instruction compares <code>value1</code> and <code>value2</code>. If <code>value1</code> is strictly less than <code>value2</code>, then an <code>int32</code> value of 1 is pushed on the stack. Otherwise, an <code>int32</code> value of 0 is pushed on the stack.  </p>\n</li>\n</ol>\n<ul>\n<li><p>For floating-point numbers, <code>clt</code> returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>clt</code> opcode:  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Clt_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clt_Un</div>        \r\n          </div>\r\n    \r\n            <p>Compares the unsigned or unordered values <code>value1</code> and <code>value2</code>. If <code>value1</code> is less than <code>value2</code>, then the integer value 1 <code>(int32</code>) is pushed onto the evaluation stack; otherwise 0 (<code>int32</code>) is pushed onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Clt_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 05</td>\n<td>clt.un</td>\n<td>Pushes 1 if <code>value1</code> is less than <code>value2</code>; else pushes 0 (unsigned values).</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>clt.un</code> tests if <code>value1</code> is less than <code>value2</code>.  </p>\n</li>\n<li><p>If <code>value1</code> is less than <code>value2</code>, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.  </p>\n<p>The <code>clt.un</code> instruction compares <code>value1</code> and <code>value2</code>. An <code>int32</code> value of 1 is pushed on the stack if any of the following is true:  </p>\n</li>\n</ol>\n<ul>\n<li><p><code>value1</code> is strictly less than <code>value2</code> (as for <code>clt</code>).  </p>\n</li>\n<li><p>For floating-point numbers, <code>value1</code> is not ordered with respect to <code>value2</code>.  </p>\n</li>\n<li><p>For integer values, <code>value1</code> is strictly less than <code>value2</code> when considered as unsigned numbers.  </p>\n<p>Otherwise, an <code>int32</code> value of 0 is pushed on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>clt.un</code> opcode:  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Constrained\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Constrained</div>        \r\n          </div>\r\n    \r\n            <p>Constrains the type on which a virtual method call is made.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Constrained;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 16 &lt; <code>T</code> &gt;</td>\n<td>constrained. <code>thisType</code></td>\n<td>Call a virtual method on a type constrained to be type <code>T</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>constrained</code> prefix is permitted only on a <code>callvirt</code> instruction.  </p>\n<p> The state of the MSIL stack at this point must be as follows:  </p>\n<ol>\n<li><p>A managed pointer, <code>ptr</code>, is pushed onto the stack. The type of <code>ptr</code> must be a managed pointer (<code>&amp;</code>) to <code>thisType</code>. Note that this is different from the case of an unprefixed <code>callvirt</code> instruction, which expects a reference of <code>thisType</code>.  </p>\n</li>\n<li><p>Method arguments <code>arg1</code> through <code>argN</code> are pushed onto the stack, just as with an unprefixed <code>callvirt</code> instruction.  </p>\n<p>The <code>constrained</code> prefix is designed to allow <code>callvirt</code> instructions to be made in a uniform way independent of whether <code>thisType</code> is a value type or a reference type.  </p>\n<p>When a <code>callvirt</code> <code>method</code> instruction has been prefixed by <code>constrained</code> <code>thisType</code>, the instruction is executed as follows:  </p>\n</li>\n</ol>\n<ul>\n<li><p>If <code>thisType</code> is a reference type (as opposed to a value type) then <code>ptr</code> is dereferenced and passed as the &#39;this&#39; pointer to the <code>callvirt</code> of <code>method</code>.  </p>\n</li>\n<li><p>If <code>thisType</code> is a value type and <code>thisType</code> implements <code>method</code> then <code>ptr</code> is passed unmodified as the &#39;this&#39; pointer to a <code>call</code> <code>method</code> instruction, for the implementation of <code>method</code> by <code>thisType</code>.  </p>\n</li>\n<li><p>If <code>thisType</code> is a value type and <code>thisType</code> does not implement <code>method</code> then <code>ptr</code> is dereferenced, boxed, and passed as the &#39;this&#39; pointer to the <code>callvirt</code> <code>method</code> instruction.  </p>\n<p>This last case can occur only when <code>method</code> was defined on <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a>, or<a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> and not overridden by <code>thisType</code>. In this case, the boxing causes a copy of the original object to be made. However, because none of the methods of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a>, and <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> modify the state of the object, this fact cannot be detected.  </p>\n<p>The <code>constrained</code> prefix supports IL generators that create generic code. Normally the <code>callvirt</code> instruction is not valid on value types. Instead it is required that IL compilers effectively perform the &#39;this&#39; transformation outlined above at compile time, depending on the type of <code>ptr</code> and the method being called. However, when <code>ptr</code> is a generic type that is unknown at compile time, it is not possible to make this transformation at compile time.  </p>\n<p>The <code>constrained</code>opcode allows IL compilers to make a call to a virtual function in a uniform way independent of whether <code>ptr</code> is a value type or a reference type. Although it is intended for the case where <code>thisType</code> is a generic type variable, the <code>constrained</code> prefix also works for nongeneric types and can reduce the complexity of generating virtual calls in languages that hide the distinction between value types and reference types.  </p>\n<p>Using the <code>constrained</code> prefix also avoids potential versioning problems with value types. If the <code>constrained</code> prefix is not used, different IL must be emitted depending on whether or not a value type overrides a method of System.Object. For example, if a value type <code>V</code> overrides the Object.ToString() method, a <code>call</code> <code>V.ToString()</code> instruction is emitted; if it does not, a <code>box</code> instruction and a <code>callvirt</code> <code>Object.ToString()</code> instruction are emitted. A versioning problem can arise in the former case if the override is later removed, and in the latter case if an override is later added.  </p>\n<p>The <code>constrained</code> prefix can also be used for invocation of interface methods on value types, because the value type method implementing the interface method can be changed using a <code>MethodImpl</code>. If the <code>constrained</code>prefix is not used, the compiler is forced to choose which of the value type&#39;s methods to bind to at compile time. Using the <code>constrained</code> prefix allows the MSIL to bind to the method that implements the interface method at run time, rather than at compile time.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>constrained</code> opcode:  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode, Type)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_I\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_I</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value on top of the evaluation stack to <code>native int</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_I;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D3</td>\n<td>conv.i</td>\n<td>Convert to <code>native int</code>, pushing <code>native int</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.i</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from a <code>float64</code> to a <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the value returned is unspecified.  </p>\n<p>No exceptions are ever thrown when using this field. See <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I\" data-linktype=\"relative-path\">Conv_Ovf_I</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I_Un\" data-linktype=\"relative-path\">Conv_Ovf_I_Un</a> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.i</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_I1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_I1</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value on top of the evaluation stack to <code>int8</code>, then extends (pads) it to <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_I1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>67</td>\n<td>conv.i1</td>\n<td>Convert to <code>int8</code>, pushing <code>int32</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.i1</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from a <code>float64</code> to a <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the value returned is unspecified.  </p>\n<p>No exceptions are ever thrown when using this field. See <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I1\" data-linktype=\"relative-path\">Conv_Ovf_I1</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I1_Un\" data-linktype=\"relative-path\">Conv_Ovf_I1_Un</a> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.i1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_I2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_I2</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value on top of the evaluation stack to <code>int16</code>, then extends (pads) it to <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_I2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>68</td>\n<td>conv.i2</td>\n<td>Convert to <code>int16</code>, pushing <code>int32</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.i2</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from a <code>float64</code> to a <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the value returned is unspecified.  </p>\n<p>No exceptions are ever thrown when using this field. See <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I2\" data-linktype=\"relative-path\">Conv_Ovf_I2</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I2_Un\" data-linktype=\"relative-path\">Conv_Ovf_I2_Un</a> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.i2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_I4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_I4</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value on top of the evaluation stack to <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_I4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>69</td>\n<td>conv.i4</td>\n<td>Convert to <code>int32</code>, pushing <code>int32</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.i4</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from a <code>float64</code> to a <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the value returned is unspecified.  </p>\n<p>No exceptions are ever thrown when using this field. See <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I4\" data-linktype=\"relative-path\">Conv_Ovf_I4</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I4_Un\" data-linktype=\"relative-path\">Conv_Ovf_I4_Un</a> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.i4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_I8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_I8</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value on top of the evaluation stack to <code>int64</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_I8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6A</td>\n<td>conv.i8</td>\n<td>Convert to <code>int64</code>, pushing <code>int64</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.i8</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from a <code>float64</code> to a <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the value returned is unspecified.  </p>\n<p>No exceptions are ever thrown when using this field. See <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I8\" data-linktype=\"relative-path\">Conv_Ovf_I8</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I8_Un\" data-linktype=\"relative-path\">Conv_Ovf_I8_Un</a> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.i8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_I\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_I</div>        \r\n          </div>\r\n    \r\n            <p>Converts the signed value on top of the evaluation stack to signed <code>native int</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D4</td>\n<td>conv.ovf.i</td>\n<td>Convert to a <code>native int</code> (on the stack as <code>native int</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.i</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.i</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_I_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_I_Un</div>        \r\n          </div>\r\n    \r\n            <p>Converts the unsigned value on top of the evaluation stack to signed <code>native int</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8A</td>\n<td>conv.ovf.i.un</td>\n<td>Converts an unsigned value to a <code>native int</code> (on the stack as <code>native int</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.i.un</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.i.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_I1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_I1</div>        \r\n          </div>\r\n    \r\n            <p>Converts the signed value on top of the evaluation stack to signed <code>int8</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B3</td>\n<td>conv.ovf.i1</td>\n<td>Convert to an <code>int8</code> (on the stack as <code>int32</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.i1</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.i1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_I1_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_I1_Un</div>        \r\n          </div>\r\n    \r\n            <p>Converts the unsigned value on top of the evaluation stack to signed <code>int8</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>82</td>\n<td>conv.ovf.i1.un</td>\n<td>Converts an unsigned value to an <code>int8</code> (on the stack as <code>int32</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.i1.un</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.i1.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_I2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_I2</div>        \r\n          </div>\r\n    \r\n            <p>Converts the signed value on top of the evaluation stack to signed <code>int16</code> and extending it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B5</td>\n<td>conv.ovf.i2</td>\n<td>Convert to an <code>int16</code> (on the stack as <code>int32</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.i2</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.i2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_I2_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_I2_Un</div>        \r\n          </div>\r\n    \r\n            <p>Converts the unsigned value on top of the evaluation stack to signed <code>int16</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>83</td>\n<td>conv.ovf.i2.un</td>\n<td>Converts an unsigned value to an <code>int16</code> (on the stack as <code>int32</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.i2.un</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.i2.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_I4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_I4</div>        \r\n          </div>\r\n    \r\n            <p>Converts the signed value on top of the evaluation stack to signed <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B7</td>\n<td>conv.ovf.i4</td>\n<td>Convert to an <code>int32</code> (on the stack as <code>int32</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.i4</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.i4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_I4_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_I4_Un</div>        \r\n          </div>\r\n    \r\n            <p>Converts the unsigned value on top of the evaluation stack to signed <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>84</td>\n<td>conv.ovf.i4.un</td>\n<td>Converts an unsigned value to an <code>int32</code> (on the stack as <code>int32</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.i4.un</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.i4.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_I8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_I8</div>        \r\n          </div>\r\n    \r\n            <p>Converts the signed value on top of the evaluation stack to signed <code>int64</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B9</td>\n<td>conv.ovf.i8</td>\n<td>Convert to an <code>int64</code> (on the stack as <code>int64</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.i8</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.i8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_I8_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_I8_Un</div>        \r\n          </div>\r\n    \r\n            <p>Converts the unsigned value on top of the evaluation stack to signed <code>int64</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>85</td>\n<td>conv.ovf.i8.un</td>\n<td>Converts an unsigned value to an <code>int64</code> (on the stack as <code>int64</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.i8.un</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.i8.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_U\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_U</div>        \r\n          </div>\r\n    \r\n            <p>Converts the signed value on top of the evaluation stack to <code>unsigned native int</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D5</td>\n<td>conv.ovf.u</td>\n<td>Convert to an <code>unsigned native int</code> (on the stack as <code>native int</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.u</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.u</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_U_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_U_Un</div>        \r\n          </div>\r\n    \r\n            <p>Converts the unsigned value on top of the evaluation stack to <code>unsigned native int</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8B</td>\n<td>conv.ovf.u.un</td>\n<td>Converts un unsigned value to an <code>unsigned native int</code> (on the stack as <code>native int</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.u.un</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.uvf.u.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_U1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_U1</div>        \r\n          </div>\r\n    \r\n            <p>Converts the signed value on top of the evaluation stack to <code>unsigned int8</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B4</td>\n<td>conv.ovf.u1</td>\n<td>Convert to an <code>unsigned int8</code> (on the stack as <code>int32</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.u1</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.u1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_U1_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_U1_Un</div>        \r\n          </div>\r\n    \r\n            <p>Converts the unsigned value on top of the evaluation stack to <code>unsigned int8</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>86</td>\n<td>conv.ovf.u1.un</td>\n<td>Converts an unsigned value to an <code>unsigned int8</code> (on the stack as <code>int32</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.u1.un</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.u1.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_U2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_U2</div>        \r\n          </div>\r\n    \r\n            <p>Converts the signed value on top of the evaluation stack to <code>unsigned int16</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B6</td>\n<td>conv.ovf.u2</td>\n<td>Convert to an <code>unsigned int16</code> (on the stack as <code>int32</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.u2</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.u2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_U2_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_U2_Un</div>        \r\n          </div>\r\n    \r\n            <p>Converts the unsigned value on top of the evaluation stack to <code>unsigned int16</code> and extends it to <code>int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>87</td>\n<td>conv.ovf.u2.un</td>\n<td>Converts an unsigned value to an <code>unsigned int16</code> (on the stack as <code>int32</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.u2.un</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.u2.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_U4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_U4</div>        \r\n          </div>\r\n    \r\n            <p>Converts the signed value on top of the evaluation stack to <code>unsigned int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B8</td>\n<td>conv.ovf.u4</td>\n<td>Convert to an <code>unsigned int32</code> (on the stack as <code>int32</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.u4</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code>are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.u4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_U4_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_U4_Un</div>        \r\n          </div>\r\n    \r\n            <p>Converts the unsigned value on top of the evaluation stack to <code>unsigned int32</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>88</td>\n<td>conv.ovf.u4.un</td>\n<td>Converts an unsigned value to an <code>unsigned int32</code> (on the stack as <code>int32</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.u4.un</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.u4.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_U8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_U8</div>        \r\n          </div>\r\n    \r\n            <p>Converts the signed value on top of the evaluation stack to <code>unsigned int64</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BA</td>\n<td>conv.ovf.u8</td>\n<td>Convert to an <code>unsigned int64</code> (on the stack as <code>int64</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.u8</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.u8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_Ovf_U8_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_Ovf_U8_Un</div>        \r\n          </div>\r\n    \r\n            <p>Converts the unsigned value on top of the evaluation stack to <code>unsigned int64</code>, throwing <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> on overflow.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>89</td>\n<td>conv.ovf.u8.un</td>\n<td>Converts an unsigned value to an <code>unsigned int64</code> (on the stack as <code>int64</code>) and throw an exception on overflow.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted. If overflow occurs, an exception is thrown.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.ovf.u8.un</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack. If the value is too large or too small to be represented by the target type, an exception is thrown.  </p>\n<p>Conversions from floating-point numbers to integer values truncate the number toward zero. Note that integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.ovf.i</code> or <code>conv.ovf.u</code> are used, in which case the result is also <code>native int</code>).  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.ovf.u8.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_R_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_R_Un</div>        \r\n          </div>\r\n    \r\n            <p>Converts the unsigned integer value on top of the evaluation stack to <code>float32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_R_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>76</td>\n<td>conv.r.un</td>\n<td>Convert unsigned integer to floating-point, pushing <code>F</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.r.un</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from a <code>float64</code> to a <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the <code>result</code> returned is unspecified. The <code>conv.r.un</code> operation takes an integer off the stack, interprets it as unsigned, and replaces it with a floating-point number to represent the integer: either a <code>float32</code>, if this is wide enough to represent the integer without loss of precision, or else a <code>float64</code>.  </p>\n<p>No exceptions are ever thrown when using this field.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.r.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_R4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_R4</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value on top of the evaluation stack to <code>float32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_R4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6B</td>\n<td>conv.r4</td>\n<td>Convert to <code>float32</code>, pushing <code>F</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.r4</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from an <code>float64</code> to an <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the value returned is unspecified.  </p>\n<p>No exceptions are ever thrown when using this field.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.r4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_R8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_R8</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value on top of the evaluation stack to <code>float64</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_R8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6C</td>\n<td>conv.r8</td>\n<td>Convert to <code>float64</code>, pushing <code>F</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.r8</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from an <code>float64</code> to an <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the value returned is unspecified.  </p>\n<p>No exceptions are ever thrown when using this field.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.r8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_U\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_U</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value on top of the evaluation stack to <code>unsigned native int</code>, and extends it to <code>native int</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_U;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E0</td>\n<td>conv.u</td>\n<td>Convert to <code>unsigned native int</code>, pushing <code>native int</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.u</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from an <code>float64</code> to an <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the value returned is unspecified.  </p>\n<p>No exceptions are ever thrown when using this field. See <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I\" data-linktype=\"relative-path\">Conv_Ovf_I</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I_Un\" data-linktype=\"relative-path\">Conv_Ovf_I_Un</a> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.u</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_U1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_U1</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value on top of the evaluation stack to <code>unsigned int8</code>, and extends it to <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_U1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D2</td>\n<td>conv.u1</td>\n<td>Convert to <code>int8</code>, pushing <code>int32</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.u1</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from an <code>float64</code> to an <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the value returned is unspecified.  </p>\n<p>No exceptions are ever thrown when using this field. See <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I1\" data-linktype=\"relative-path\">Conv_Ovf_I1</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I1_Un\" data-linktype=\"relative-path\">Conv_Ovf_I1_Un</a> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.u1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_U2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_U2</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value on top of the evaluation stack to <code>unsigned int16</code>, and extends it to <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_U2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D1</td>\n<td>conv.u2</td>\n<td>Convert to <code>int16</code>, pushing <code>int32</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.u2</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from an <code>float64</code> to an <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the value returned is unspecified.  </p>\n<p>No exceptions are ever thrown when using this field. See <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I2\" data-linktype=\"relative-path\">Conv_Ovf_I2</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I2_Un\" data-linktype=\"relative-path\">Conv_Ovf_I2_Un</a> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.u2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_U4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_U4</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value on top of the evaluation stack to <code>unsigned int32</code>, and extends it to <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_U4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6D</td>\n<td>conv.u4</td>\n<td>Convert to <code>unsigned int32</code>, pushing <code>int32</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.u4</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from an <code>float64</code> to an <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the value returned is unspecified.  </p>\n<p>No exceptions are ever thrown when using this field. See <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I4\" data-linktype=\"relative-path\">Conv_Ovf_I4</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I4_Un\" data-linktype=\"relative-path\">Conv_Ovf_I4_Un</a> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.u4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Conv_U8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Conv_U8</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value on top of the evaluation stack to <code>unsigned int64</code>, and extends it to <code>int64</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Conv_U8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6E</td>\n<td>conv.u8</td>\n<td>Convert to <code>int64</code>, pushing <code>int64</code> on stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and the conversion operation is attempted.  </p>\n</li>\n<li><p>If the conversion is successful, the resulting value is pushed onto the stack.  </p>\n<p>The <code>conv.u8</code> opcode converts the <code>value</code> on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack. Integer values of less than 4 bytes are extended to <code>int32</code> when they are loaded onto the evaluation stack (unless <code>conv.i</code> or <code>conv.u</code> is used, in which case the result is also <code>native int</code>). Floating-point values are converted to the <code>F</code> type.  </p>\n<p>Conversion from floating-point numbers to integer values truncates the number toward zero. When converting from an <code>float64</code> to an <code>float32</code>, precision can be lost. If <code>value</code> is too large to fit in a <code>float32 (F)</code>, positive infinity (if <code>value</code> is positive) or negative infinity (if <code>value</code> is negative) is returned. If overflow occurs converting one integer type to another, the high order bits are truncated. If the result is smaller than an <code>int32</code>, the value is sign-extended to fill the slot.  </p>\n<p>If overflow occurs converting a floating-point type to an integer the value returned is unspecified.  </p>\n<p>No exceptions are ever thrown when using this field. See <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I8\" data-linktype=\"relative-path\">Conv_Ovf_I8</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_Ovf_I8_Un\" data-linktype=\"relative-path\">Conv_Ovf_I8_Un</a> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>conv.u8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Cpblk\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cpblk</div>        \r\n          </div>\r\n    \r\n            <p>Copies a specified number bytes from a source address to a destination address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Cpblk;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 17</td>\n<td>cpblk</td>\n<td>Copy data from one memory block to another.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The destination address is pushed onto the stack.  </p>\n</li>\n<li><p>The source address is pushed onto the stack.  </p>\n</li>\n<li><p>The number of bytes to copy is pushed onto the stack.  </p>\n</li>\n<li><p>The number of bytes, the source address, and the destination address are popped from the stack; the specified number of bytes are copied from the source address to the destination address.  </p>\n<p>The <code>cpblk</code> instruction copies a number (type <code>unsigned int32</code>) of bytes from a source address (of type <code>*</code>, <code>native int</code>, or <code>&amp;</code>) to a destination address (of type <code>*</code>, <code>native int</code>, or <code>&amp;</code>). The behavior of <code>cpblk</code> is unspecified if the source and destination areas overlap.  </p>\n<p><code>cpblk</code> assumes that both the source and destination addressed are aligned to the natural size of the machine. The <code>cpblk</code> instruction can be immediately preceded by the <code>unaligned.&lt;prefix&gt;</code> instruction to indicate that either the source or the destination is unaligned.  </p>\n<p>The operation of the <code>cpblk</code> instruction can be altered by an immediately preceding <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a>prefix instruction.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> may be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>cpblk</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Cpobj\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cpobj</div>        \r\n          </div>\r\n    \r\n            <p>Copies the value type located at the address of an object (type <code>&amp;</code>, <code>*</code> or <code>native int</code>) to the address of the destination object (type <code>&amp;</code>, <code>*</code> or <code>native int</code>).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Cpobj;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>70 &lt; <code>T</code> &gt;</td>\n<td>cpobj <code>classTok</code></td>\n<td>Copies a value type from a source object to a destination object.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The destination object reference is pushed onto the stack.  </p>\n</li>\n<li><p>The source object reference is pushed onto the stack.  </p>\n</li>\n<li><p>The two object references are popped from the stack; the value type at the address of the source object is copied to the address of the destination object.  </p>\n<p>The behavior of <code>cpobj</code> is unspecified if the source and destination object references are not pointers to instances of the class represented by the class token <code>classTok</code> (a <code>typeref</code> or <code>typedef</code>), or if <code>classTok</code> does not represent a value type.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> may be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>cpobj</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Div\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Div</div>        \r\n          </div>\r\n    \r\n            <p>Divides two values and pushes the result as a floating-point (type <code>F</code>) or quotient (type <code>int32</code>) onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Div;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5B</td>\n<td>div</td>\n<td>Divides two values to return a quotient or floating-point result.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>value1</code> is divided by <code>value2</code>.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p><code>result</code> = <code>value1</code> div value2 satisfies the following conditions:  </p>\n<p>&#124; <code>result</code> &#124; = &#124; <code>value1</code> &#124; / &#124; <code>value2</code> &#124;, and:  </p>\n<p>sign(<code>result</code>) = +, if sign(<code>value1</code>) = sign(<code>value2</code>), or -, if sign(<code>value1</code>) ~= sign(<code>value2</code>)  </p>\n<p>The <code>div</code> instruction computes the result and pushes it on the stack.  </p>\n<p>Integer division truncates towards zero.  </p>\n<p>Division of a finite number by zero produces the correctly signed infinite value.  </p>\n<p>Dividing zero by zero or infinity by infinity produces the NaN (Not-A-Number) value. Any number divided by infinity will produce a zero value.  </p>\n<p>Integral operations throw <a class=\"xref\" href=\"system.arithmeticexception\" data-linktype=\"relative-path\">ArithmeticException</a> if the result cannot be represented in the result type. This can happen if <code>value1</code> is the maximum negative value, and <code>value2</code> is -1.  </p>\n<p>Integral operations throw <a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a> if <code>value2</code> is zero.  </p>\n<p>Note that on Intel-based platforms an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown when computing (minint div -1). Floating-point operations never throw an exception (they produce NaNs or infinities instead).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>div</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Div_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Div_Un</div>        \r\n          </div>\r\n    \r\n            <p>Divides two unsigned integer values and pushes the result (<code>int32</code>) onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Div_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5C</td>\n<td>div.un</td>\n<td>Divides two values, unsigned, returning a quotient.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>value1</code> is divided by <code>value2</code>.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>The <code>div.un</code> instruction computes <code>value1</code> divided by <code>value2</code>, both taken as unsigned integers, and pushes the <code>result</code> on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>div.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Dup\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dup</div>        \r\n          </div>\r\n    \r\n            <p>Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Dup;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>25</td>\n<td>dup</td>\n<td>Duplicates the value on the top of the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped off of the stack for duplication.  </p>\n</li>\n<li><p><code>value</code> is pushed back onto the stack.  </p>\n</li>\n<li><p>A duplicate value is pushed onto the stack.  </p>\n<p>The <code>dup</code> instruction duplicates the top element of the stack, and leaves two identical values atop it.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>dup</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Endfilter\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Endfilter</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control from the <code>filter</code> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Endfilter;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 11</td>\n<td>endfilter</td>\n<td>End filter clause of SEH exception handling.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack; <code>endfilter</code> is executed and control is transferred to the exception handler.  </p>\n<p><code>Value</code> (which must be of type <code>int32</code> and is one of a specific set of values) is returned from the filter clause. It should be one of:  </p>\n</li>\n</ol>\n<ul>\n<li><p><code>exception_continue_search</code> (<code>value</code> = 0) to continue searching for an exception handler  </p>\n</li>\n<li><p><code>exception_execute_handler</code> (<code>value</code> = 1) to start the second phase of exception handling where finally blocks are run until the handler associated with this filter clause is located. Upon discovery, the handler is executed.  </p>\n<p>Other integer values will produce unspecified results.  </p>\n<p>The entry point of a filter, as shown in the method&#39;s exception table, must be the first instruction in the filter&#39;s code block. The <code>endfilter</code> instruction must be the last instruction in the filter&#39;s code block (hence there can only be one <code>endfilter</code> for any single filter block). After executing the <code>endfilter</code> instruction, control logically flows back to the CLI exception handling mechanism.  </p>\n<p>Control cannot be transferred into a filter block except through the exception mechanism. Control cannot be transferred out of a filter block except through the use of a <code>throw</code> instruction or by executing the final <code>endfilter</code> instruction. You cannot embed a <code>try</code> block within a <code>filter</code> block. If an exception is thrown inside the <code>filter</code> block, it is intercepted and a value of 0 (<code>exception_continue_search</code>) is returned.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>endfilter</code> opcode:  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Endfinally\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Endfinally</div>        \r\n          </div>\r\n    \r\n            <p>Transfers control from the <code>fault</code> or <code>finally</code> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Endfinally;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DC</td>\n<td>endfinally<br><br> endfault</td>\n<td>Ends the <code>finally</code> or <code>fault</code> clause of an exception block.</td>\n</tr>\n</tbody>\n</table>\n<p> There are no stack transition behaviors for this instruction.  </p>\n<p> <code>Endfinally</code> and <code>endfault</code> signal the end of the <code>finally</code> or <code>fault</code> clause so that stack unwinding can continue until the exception handler is invoked. The <code>endfinally</code> or <code>endfault</code> instruction transfers control back to the CLI exception mechanism. The mechanism then searches for the next <code>finally</code> clause in the chain if the protected block was exited with a leave instruction. If the protected block was exited with an exception, the CLI will search for the next <code>finally</code> or <code>fault</code>, or enter the exception handler chosen during the first pass of exception handling.  </p>\n<p> An <code>endfinally</code> instruction might only appear lexically within a <code>finally</code> block. Unlike the <code>endfilter</code> instruction, there is no requirement that the block end with an <code>endfinally</code> instruction, and there can be as many <code>endfinally</code> instructions within the block as required. These same restrictions apply to the <code>endfault</code> instruction and the <code>fault</code> block.  </p>\n<p> Control cannot be transferred into a <code>finally</code> (or <code>fault</code>) block except through the exception mechanism. Control cannot be transferred out of a <code>finally</code> (or <code>fault</code>) block except through the use of a <code>throw</code> instruction or executing the <code>endfinally</code> (or <code>endfault</code>) instruction. In particular, you cannot &quot;fall out&quot; of a <code>finally</code> (or <code>fault</code>) block or to execute a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ret\" data-linktype=\"relative-path\">Ret</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Leave\" data-linktype=\"relative-path\">Leave</a> instruction within a <code>finally</code> (or <code>fault</code>) block.  </p>\n<p> Note that the <code>endfault</code> and <code>endfinally</code> instructions are aliases - they correspond to the same opcode.  </p>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>endfinally</code> (<code>endfault</code>) opcode, as well as the <code>ILGenerator</code> method <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_EndExceptionBlock_\" data-linktype=\"relative-path\">EndExceptionBlock</a>.  </p>\n<ul>\n<li><p>ILGenerator.Emit(OpCode)  </p>\n</li>\n<li><p>ILGenerator.EndExceptionBlock()</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Initblk\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Initblk</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a specified block of memory at a specific address to a given size and initial value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Initblk;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 18</td>\n<td>initblk</td>\n<td>Set each location in a block of memory to a given value.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A starting address is pushed onto the stack.  </p>\n</li>\n<li><p>An initialization value is pushed onto the stack.  </p>\n</li>\n<li><p>The number of bytes to initialize is pushed onto the stack.  </p>\n</li>\n<li><p>The number of bytes, the initialization value, and the starting address are popped from the stack, and the initialization is performed as per their values.  </p>\n<p>The <code>initblk</code> instruction sets the number (<code>unsigned int32</code>) of bytes starting at the specified address (of type <code>native int</code>, <code>&amp;</code>, or <code>*</code>) to the initialization value (of type <code>unsigned int8</code>). <code>initblk</code> assumes that the starting address is aligned to the natural size of the machine.  </p>\n<p>The operation of the <code>initblk</code> instructions can be altered by an immediately preceding <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> may be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>initblk</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Initobj\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Initobj</div>        \r\n          </div>\r\n    \r\n            <p>Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Initobj;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 15 &lt; <code>T</code> &gt;</td>\n<td><code>initobj</code> <code>typeTok</code></td>\n<td>Initializes a value type.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The address of the value type to initialize is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack; the value type at the specified address is initialized as type <code>typeTok</code>.  </p>\n<p>The <code>initobj</code> instruction initializes each field of the value type specified by the pushed address (of type <code>native int</code>, <code>&amp;</code>, or <code>*</code>) to a null reference or a 0 of the appropriate primitive type. After this method is called, the instance is ready for a constructor method to be called. If <code>typeTok</code> is a reference type, this instruction has the same effect as <code>ldnull</code> followed by <code>stind.ref</code>.  </p>\n<p>Unlike <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Newobj\" data-linktype=\"relative-path\">Newobj</a>, <code>initobj</code> does not call the constructor method. <code>Initobj</code> is intended for initializing value types, while <code>newobj</code> is used to allocate and initialize objects.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>initobj</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Isinst\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Isinst</div>        \r\n          </div>\r\n    \r\n            <p>Tests whether an object reference (type <code>O</code>) is an instance of a particular class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Isinst;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>75 &lt; <code>T</code> &gt;</td>\n<td>isinst <code>class</code></td>\n<td>Tests if an object reference is an instance of <code>class</code>, returning either a null reference or an instance of that class or interface.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference is pushed onto the stack.  </p>\n</li>\n<li><p>The object reference is popped from the stack and tested to see if it is an instance of the class passed in <code>class</code>.  </p>\n</li>\n<li><p>The result (either an object reference or a null reference) is pushed onto the stack.  </p>\n<p><code>Class</code> is a metadata token indicating the desired class. If the class of the object on the top of the stack implements <code>class</code> (if <code>class</code> is an interface) or is a derived class of <code>class</code> (if <code>class</code> is a regular class) then it is cast to type <code>class</code> and the result is pushed on the stack, exactly as though <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Castclass\" data-linktype=\"relative-path\">Castclass</a> had been called. Otherwise, a null reference is pushed on the stack. If the object reference itself is a null reference, then <code>isinst</code> likewise returns a null reference.  </p>\n<p><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown if class cannot be found. This is typically detected when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>isinst</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Jmp\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Jmp</div>        \r\n          </div>\r\n    \r\n            <p>Exits current method and jumps to specified method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Jmp;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>27 &lt; <code>T</code> &gt;</td>\n<td>jmp <code>method</code></td>\n<td>Exit current method and jump to specified method.</td>\n</tr>\n</tbody>\n</table>\n<p> There are no stack transition behaviors for this instruction.  </p>\n<p> The <code>jmp</code> (jump) instruction transfers control to the method specified by <code>method</code>, which is a metadata token for a method reference. The current arguments are transferred to the destination method.  </p>\n<p> The evaluation stack must be empty when this instruction is executed. The calling convention, number and type of arguments at the destination address must match that of the current method.  </p>\n<p> The <code>jmp</code> instruction cannot be used to transferred control out of a <code>try</code>, <code>filter</code>, <code>catch</code>, or <code>finally</code> block.  </p>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>jmp</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode, MethodInfo)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldarg\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldarg</div>        \r\n          </div>\r\n    \r\n            <p>Loads an argument (referenced by a specified index value) onto the stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldarg;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 09 &lt; <code>unsigned int16</code> &gt;</td>\n<td>ldarg <code>index</code></td>\n<td>Load argument at <code>index</code> onto stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The argument value at <code>index</code> is pushed onto the stack.  </p>\n<p>The <code>ldarg</code> instruction pushes the argument indexed at <code>index</code>, where arguments are indexed from 0 onwards, onto the evaluation stack. The <code>ldarg</code> instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument. The type of the argument value is the same as the type of the argument, as specified by the current method&#39;s signature.  </p>\n<p>For procedures that take a variable-length argument list, the <code>ldarg</code> instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Arglist\" data-linktype=\"relative-path\">Arglist</a> instruction for more details).  </p>\n<p>Arguments that hold an integer value smaller than 4 bytes long are expanded to type <code>int32</code> when they are loaded onto the stack. Floating-point values are expanded to their native size (type <code>F</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldarg</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, short)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldarg_0\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldarg_0</div>        \r\n          </div>\r\n    \r\n            <p>Loads the argument at index 0 onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldarg_0;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>02</td>\n<td>ldarg.0</td>\n<td>Load argument 0 onto stack</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The argument value at index 0 is pushed onto the stack.  </p>\n<p>The <code>ldarg.0</code> instruction is an efficient encoding for loading the argument value at index 0.  </p>\n<p>The <code>ldarg.0</code> instruction pushes the argument indexed at 0 onto the evaluation stack. The <code>ldarg.0</code> instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument. The type of the argument value is the same as the type of the argument, as specified by the current method&#39;s signature.  </p>\n<p>Arguments that hold an integer value smaller than 4 bytes long are expanded to type <code>int32</code> when they are loaded onto the stack. Floating-point values are expanded to their native size (type <code>F</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldarg.0</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldarg_1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldarg_1</div>        \r\n          </div>\r\n    \r\n            <p>Loads the argument at index 1 onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldarg_1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>03</td>\n<td>ldarg.1</td>\n<td>Load argument 1 onto stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The argument value at index 1 is pushed onto the stack.  </p>\n<p>The <code>ldarg.1</code> instruction is an efficient encoding for loading the argument value at index 1.  </p>\n<p>The <code>ldarg.1</code> instruction pushes the argument indexed at 1 onto the evaluation stack. The <code>ldarg.1</code> instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument. The type of the argument value is the same as the type of the argument, as specified by the current method&#39;s signature.  </p>\n<p>Arguments that hold an integer value smaller than 4 bytes long are expanded to type <code>int32</code> when they are loaded onto the stack. Floating-point values are expanded to their native size (type <code>F</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldarg.1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldarg_2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldarg_2</div>        \r\n          </div>\r\n    \r\n            <p>Loads the argument at index 2 onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldarg_2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>04</td>\n<td>ldarg.2</td>\n<td>Load argument 2 onto stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The argument value at index 2 is pushed onto the stack.  </p>\n<p>The <code>ldarg.2</code> instruction is an efficient encoding for loading the argument value at index 2.  </p>\n<p>The <code>ldarg.2</code> instruction pushes the argument indexed at 2 onto the evaluation stack. The <code>ldarg.2</code> instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument. The type of the argument value is the same as the type of the argument, as specified by the current method&#39;s signature.  </p>\n<p>Arguments that hold an integer value smaller than 4 bytes long are expanded to type <code>int32</code> when they are loaded onto the stack. Floating-point values are expanded to their native size (type <code>F</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldarg.2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldarg_3\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldarg_3</div>        \r\n          </div>\r\n    \r\n            <p>Loads the argument at index 3 onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldarg_3;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>05</td>\n<td>ldarg.3</td>\n<td>Load argument 3 onto stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The argument value at index 3 is pushed onto the stack.  </p>\n<p>The <code>ldarg.3</code> instruction is an efficient encoding for loading the argument value at index 3.  </p>\n<p>The <code>ldarg.3</code> instruction pushes the argument indexed at 3 onto the evaluation stack. The <code>ldarg.3</code> instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument. The type of the argument value is the same as the type of the argument, as specified by the current method&#39;s signature.  </p>\n<p>Arguments that hold an integer value smaller than 4 bytes long are expanded to type <code>int32</code> when they are loaded onto the stack. Floating-point values are expanded to their native size (type <code>F</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldarg.3</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldarg_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldarg_S</div>        \r\n          </div>\r\n    \r\n            <p>Loads the argument (referenced by a specified short form index) onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldarg_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0E &lt; <code>unsigned int8</code> &gt;</td>\n<td>ldarg.s <code>index</code></td>\n<td>Load argument at <code>index</code> onto stack, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The argument value at <code>index</code> is pushed onto the stack.  </p>\n<p>The <code>ldarg.s</code> instruction is an efficient encoding for loading arguments indexed from 4 through 255.  </p>\n<p>The <code>ldarg.s</code> instruction pushes the argument indexed at <code>index</code>, where arguments are indexed from 0 onwards, onto the evaluation stack. The <code>ldarg.s</code> instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument. The type of the argument value is the same as the type of the argument, as specified by the current method&#39;s signature.  </p>\n<p>For procedures that take a variable-length argument list, the <code>ldarg.s</code> instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Arglist\" data-linktype=\"relative-path\">Arglist</a> instruction for more details).  </p>\n<p>Arguments that hold an integer value smaller than 4 bytes long are expanded to type <code>int32</code> when they are loaded onto the stack. Floating-point values are expanded to their native size (type <code>F</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldarg.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, byte)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldarga\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldarga</div>        \r\n          </div>\r\n    \r\n            <p>Load an argument address onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldarga;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 0A &lt; <code>unsigned int16</code> &gt;</td>\n<td>ldarga <code>index</code></td>\n<td>Fetch the address of argument indexed by <code>index</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The address <code>addr</code> of the argument indexed by <code>index</code> is pushed onto the stack.  </p>\n<p>The <code>ldarga</code> instruction fetches the address (of type <code>*</code>) of the argument indexed by <code>index</code>, where arguments are indexed from 0 onwards. The address <code>addr</code> is always aligned to a natural boundary on the target machine.  </p>\n<p>For procedures that take a variable-length argument list, the <code>ldarga</code> instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.  </p>\n<p><code>ldarga</code> is used for by-ref parameter passing. For other cases, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarg\" data-linktype=\"relative-path\">Ldarg</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Starg\" data-linktype=\"relative-path\">Starg</a> should be used.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldarga</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, short)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldarga_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldarga_S</div>        \r\n          </div>\r\n    \r\n            <p>Load an argument address, in short form, onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldarga_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0F &lt; <code>unsigned int8</code> &gt;</td>\n<td>ldarga.s <code>index</code></td>\n<td>Fetch the address of argument indexed by <code>index</code>, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The address <code>addr</code> of the argument indexed by <code>index</code> is pushed onto the stack.  </p>\n<p><code>ldarga.s</code> (the short form of <code>ldarga</code>) should be used for argument numbers 0 through 255, and is a more efficient encoding.  </p>\n<p>The <code>ldarga.s</code> instruction fetches the address (of type<code>*</code>) of the argument indexed by <code>index</code>, where arguments are indexed from 0 onwards. The address <code>addr</code> is always aligned to a natural boundary on the target machine.  </p>\n<p>For procedures that take a variable-length argument list, the <code>ldarga.s</code> instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.  </p>\n<p><code>ldarga.s</code> is used for by-ref parameter passing. For other cases, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarg_S\" data-linktype=\"relative-path\">Ldarg_S</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Starg_S\" data-linktype=\"relative-path\">Starg_S</a> should be used.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldarga.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, byte)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I4</div>        \r\n          </div>\r\n    \r\n            <p>Pushes a supplied value of type <code>int32</code> onto the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>20 &lt; <code>int32</code> &gt;</td>\n<td>ldc.i4 <code>num</code></td>\n<td>Pushes the value <code>num</code> onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value <code>num</code> is pushed onto the stack.  </p>\n<p>Note that there are special short (and hence more efficient) encodings for the integers -128 through 127, and especially short encodings for -1 through 8. All short encodings push 4 byte integers on the stack. Longer encodings are used for 8 byte integers and 4 and 8 byte floating-point numbers, as well as 4-byte values that do not fit in the short forms. There are three ways to push an 8 byte integer constant onto the stack  </p>\n<ol>\n<li><p>Use the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldc_I8\" data-linktype=\"relative-path\">Ldc_I8</a> instruction for constants that must be expressed in more than 32 bits.  </p>\n</li>\n<li><p>Use the Ldc_I4 instruction followed by a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_I8\" data-linktype=\"relative-path\">Conv_I8</a> for constants that require 9 to 32 bits.  </p>\n</li>\n<li><p>Use a short form instruction followed by a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Conv_I8\" data-linktype=\"relative-path\">Conv_I8</a> for constants that can be expressed in 8 or fewer bits.  </p>\n</li>\n</ol>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, int)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I4_0\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I4_0</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the integer value of 0 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>16</td>\n<td>ldc.i4.0</td>\n<td>Pushes 0 onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value 0 is pushed onto the stack.  </p>\n<p>This is a special short encoding for the push of the integer value 0. All special short encodings push 4 byte integers on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i4.0</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I4_1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I4_1</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the integer value of 1 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>17</td>\n<td>ldc.i4.1</td>\n<td>Pushes 1 onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value 1 is pushed onto the stack.  </p>\n<p>This is a special short encoding for the push of the integer value 0. All special short encodings push 4 byte integers on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i4.1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I4_2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I4_2</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the integer value of 2 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>18</td>\n<td>ldc.i4.2</td>\n<td>Pushes 2 onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value 2 is pushed onto the stack.  </p>\n<p>This is a special short encoding for the push of the integer value 0. All special short encodings push 4 byte integers on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i4.2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I4_3\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I4_3</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the integer value of 3 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>19</td>\n<td>ldc.i4.3</td>\n<td>Pushes 3 onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value 3 is pushed onto the stack.  </p>\n<p>This is a special short encoding for the push of the integer value 0. All special short encodings push 4 byte integers on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i4.3</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I4_4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I4_4</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the integer value of 4 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1A</td>\n<td>ldc.i4.4</td>\n<td>Pushes 4 onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value 4 is pushed onto the stack.  </p>\n<p>This is a special short encoding for the push of the integer value 0. All special short encodings push 4 byte integers on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i4.4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I4_5\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I4_5</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the integer value of 5 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1B</td>\n<td>ldc.i4.5</td>\n<td>Pushes 5 onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value 5 is pushed onto the stack.  </p>\n<p>This is a special short encoding for the push of the integer value 0. All special short encodings push 4 byte integers on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i4.5</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I4_6\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I4_6</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the integer value of 6 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1C</td>\n<td>ldc.i4.6</td>\n<td>Pushes 6 onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value 6 is pushed onto the stack.  </p>\n<p>This is a special short encoding for the push of the integer value 0. All special short encodings push 4 byte integers on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i4.6</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I4_7\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I4_7</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the integer value of 7 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1D</td>\n<td>ldc.i4.7</td>\n<td>Pushes 7 onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value 7 is pushed onto the stack.  </p>\n<p>This is a special short encoding for the push of the integer value 0. All special short encodings push 4 byte integers on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i4.7</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I4_8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I4_8</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the integer value of 8 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1E</td>\n<td>ldc.i4.8</td>\n<td>Pushes 8 onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value 8 is pushed onto the stack.  </p>\n<p>This is a special short encoding for the push of the integer value 0. All special short encodings push 4 byte integers on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i4.8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I4_M1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I4_M1</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the integer value of -1 onto the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>15</td>\n<td>ldc.i4.m1</td>\n<td>Pushes -1 onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value -1 is pushed onto the stack.  </p>\n<p>This is a special short encoding for the push of the integer value 0. All special short encodings push 4 byte integers on the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i4.m1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I4_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I4_S</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the supplied <code>int8</code> value onto the evaluation stack as an <code>int32</code>, short form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1F &lt; <code>int8</code> &gt;</td>\n<td>ldc.i4.s <code>num</code></td>\n<td>Pushes <code>num</code> onto the stack as <code>int32</code>, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value <code>num</code> is pushed onto the stack.  </p>\n<p><code>ldc.i4.s</code> is a more efficient encoding for pushing the integers from -128 to 127 onto the evaluation stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i4.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, byte)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_I8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_I8</div>        \r\n          </div>\r\n    \r\n            <p>Pushes a supplied value of type <code>int64</code> onto the evaluation stack as an <code>int64</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_I8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>21 &lt; <code>int64</code> &gt;</td>\n<td>ldc.i8 <code>num</code></td>\n<td>Pushes <code>num</code> onto the stack as <code>int64</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value <code>num</code> is pushed onto the stack.  </p>\n<p>This encoding pushes an <code>int64</code> value onto the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.i8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, long)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_R4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_R4</div>        \r\n          </div>\r\n    \r\n            <p>Pushes a supplied value of type <code>float32</code> onto the evaluation stack as type <code>F</code> (float).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_R4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>22 &lt; <code>float32</code> &gt;</td>\n<td>ldc.r4 <code>num</code></td>\n<td>Pushes <code>num</code> onto the stack as <code>F</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value <code>num</code> is pushed onto the stack.  </p>\n<p>This encoding pushes a <code>float32</code> value onto the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.r4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, single)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldc_R8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldc_R8</div>        \r\n          </div>\r\n    \r\n            <p>Pushes a supplied value of type <code>float64</code> onto the evaluation stack as type <code>F</code> (float).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldc_R8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>23 &lt; <code>float64</code> &gt;</td>\n<td>ldc.r8 <code>num</code></td>\n<td>Pushes <code>num</code> onto the stack as <code>F</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value <code>num</code> is pushed onto the stack.  </p>\n<p>This encoding pushes a <code>float64</code> value onto the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldc.r8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, double)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelem\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelem</div>        \r\n          </div>\r\n    \r\n            <p>Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelem;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A3 &lt; <code>T</code> &gt;</td>\n<td>ldelem <code>typeTok</code></td>\n<td>Loads the element at <code>index</code> onto the top of the stack as type <code>typeTok</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the value stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The value is pushed onto the stack.  </p>\n<p>The <code>ldelem</code> instruction loads the value of the element with index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects, and hence represented by a value of type <code>O</code>.  </p>\n<p>The type of the return value is specified by the token <code>typeTok</code> in the instruction.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the upper bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelem</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelem_I\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelem_I</div>        \r\n          </div>\r\n    \r\n            <p>Loads the element with type <code>native int</code> at a specified array index onto the top of the evaluation stack as a <code>native int</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelem_I;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>97</td>\n<td>ldelem.i</td>\n<td>Loads the element with type <code>native int</code> at <code>index</code> onto the top of the stack as a <code>native int</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the value stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The value is pushed onto the stack.  </p>\n<p>The <code>ldelem.i</code> instruction loads the value of the element with index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects and hence represented by a value of type <code>O</code>.  </p>\n<p>The return value for <code>ldelem.i</code> is <code>native int</code>.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelem.i</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelem_I1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelem_I1</div>        \r\n          </div>\r\n    \r\n            <p>Loads the element with type <code>int8</code> at a specified array index onto the top of the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelem_I1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>90</td>\n<td>ldelem.i1</td>\n<td>Loads the element with type <code>int8</code> at <code>index</code> onto the top of the stack as an <code>int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the value stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The value is pushed onto the stack.  </p>\n<p>The <code>ldelem.i1</code> instruction loads the value of the element with index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects and hence represented by a value of type <code>O</code>.  </p>\n<p>The return value for <code>ldelem.i1</code> is <code>int8</code>.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelem.i1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelem_I2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelem_I2</div>        \r\n          </div>\r\n    \r\n            <p>Loads the element with type <code>int16</code> at a specified array index onto the top of the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelem_I2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>92</td>\n<td>ldelem.i2</td>\n<td>Loads the element with type <code>int16</code> at <code>index</code> onto the top of the stack as an <code>int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the value stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The value is pushed onto the stack.  </p>\n<p>The <code>ldelem.i2</code> instruction loads the value of the element with index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects and hence represented by a value of type <code>O</code>.  </p>\n<p>The return value for <code>ldelem.i2</code> is <code>int16</code>.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelem.i2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelem_I4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelem_I4</div>        \r\n          </div>\r\n    \r\n            <p>Loads the element with type <code>int32</code> at a specified array index onto the top of the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelem_I4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>94</td>\n<td>ldelem.i4</td>\n<td>Loads the element with type <code>int32</code> at <code>index</code> onto the top of the stack as an <code>int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the value stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The value is pushed onto the stack.  </p>\n<p>The <code>ldelem.i4</code> instruction loads the value of the element with index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects and hence represented by a value of type <code>O</code>.  </p>\n<p>The return value for <code>ldelem.i4</code> is <code>int32</code>.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelem.i4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelem_I8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelem_I8</div>        \r\n          </div>\r\n    \r\n            <p>Loads the element with type <code>int64</code> at a specified array index onto the top of the evaluation stack as an <code>int64</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelem_I8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>96</td>\n<td>ldelem.i8</td>\n<td>Loads the element with type <code>int64</code> at <code>index</code> onto the top of the stack as an <code>int64</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the value stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The value is pushed onto the stack.  </p>\n<p>The <code>ldelem.i8</code> instruction loads the value of the element with index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects and hence represented by a value of type <code>O</code>.  </p>\n<p>The return value for <code>ldelem.i8</code> is <code>int64</code>.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelem.i8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelem_R4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelem_R4</div>        \r\n          </div>\r\n    \r\n            <p>Loads the element with type <code>float32</code> at a specified array index onto the top of the evaluation stack as type <code>F</code> (float).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelem_R4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>98</td>\n<td>ldelem.r4</td>\n<td>Loads the element with type <code>float32</code> at <code>index</code> onto the top of the stack as a type <code>F</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the value stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The value is pushed onto the stack.  </p>\n<p>The <code>ldelem.r4</code> instruction loads the value of the element with index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects and hence represented by a value of type <code>O</code>.  </p>\n<p>The return value for <code>ldelem.r4</code> is <code>float32</code>.  </p>\n<p>Floating-point values are converted to type <code>F</code> when loaded onto the evaluation stack.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelem.r4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelem_R8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelem_R8</div>        \r\n          </div>\r\n    \r\n            <p>Loads the element with type <code>float64</code> at a specified array index onto the top of the evaluation stack as type <code>F</code> (float).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelem_R8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>99</td>\n<td>ldelem.r8</td>\n<td>Loads the element with type <code>float64</code> at <code>index</code> onto the top of the stack as type <code>F</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the value stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The value is pushed onto the stack.  </p>\n<p>The <code>ldelem.r8</code> instruction loads the value of the element with index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects and hence represented by a value of type <code>O</code>.  </p>\n<p>The return value for <code>ldelem.r8</code> is <code>float64</code>.  </p>\n<p>Floating-point values are converted to type <code>F</code> when loaded onto the evaluation stack.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelem.r8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelem_Ref\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelem_Ref</div>        \r\n          </div>\r\n    \r\n            <p>Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <code>O</code> (object reference).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9A</td>\n<td>ldelem.ref</td>\n<td>Loads the element with an object reference at <code>index</code> onto the top of the stack as type <code>O</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the value stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The value is pushed onto the stack.  </p>\n<p>The <code>ldelem.ref</code> instruction loads the value of the element with index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects and hence represented by a value of type <code>O</code>.  </p>\n<p>The return value for <code>ldelem.ref</code> is type <code>O</code> (object reference).  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelem.ref</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelem_U1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelem_U1</div>        \r\n          </div>\r\n    \r\n            <p>Loads the element with type <code>unsigned int8</code> at a specified array index onto the top of the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelem_U1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>91</td>\n<td>ldelem.u1</td>\n<td>Loads the element with type <code>unsigned int8</code> at <code>index</code> onto the top of the stack as an <code>int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the value stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The value is pushed onto the stack.  </p>\n<p>The <code>ldelem.u1</code> instruction loads the value of the element with index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects and hence represented by a value of type <code>O</code>.  </p>\n<p>The return value for <code>ldelem.u1</code> is <code>int8</code>.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelem.u1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelem_U2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelem_U2</div>        \r\n          </div>\r\n    \r\n            <p>Loads the element with type <code>unsigned int16</code> at a specified array index onto the top of the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelem_U2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>93</td>\n<td>ldelem.u2</td>\n<td>Loads the element with type <code>unsigned int16</code> at index onto the top of the stack as an <code>int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the value stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The value is pushed onto the stack.  </p>\n<p>The <code>ldelem.u2</code> instruction loads the value of the element with index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects and hence represented by a value of type <code>O</code>.  </p>\n<p>The return value for <code>ldelem.u2</code> is <code>int16</code>.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelem.u2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelem_U4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelem_U4</div>        \r\n          </div>\r\n    \r\n            <p>Loads the element with type <code>unsigned int32</code> at a specified array index onto the top of the evaluation stack as an <code>int32</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelem_U4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>95</td>\n<td>ldelem.u4</td>\n<td>Loads the element with type <code>unsigned int32</code> at index onto the top of the stack as an <code>int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the value stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The value is pushed onto the stack.  </p>\n<p>The <code>ldelem.u4</code> instruction loads the value of the element with index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects and hence represented by a value of type <code>O</code>.  </p>\n<p>The return value for <code>ldelem.u4</code> is <code>int32</code>.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if array does not hold elements of the required type.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelem.u4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldelema\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldelema</div>        \r\n          </div>\r\n    \r\n            <p>Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <code>&amp;</code> (managed pointer).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldelema;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8F &lt; <code>T</code> &gt;</td>\n<td>ldelema <code>class</code></td>\n<td>Loads the address of the array element at <code>index</code> onto the top of the evaluation stack as type <code>&amp;</code> (managed pointer).</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>An index value <code>index</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>index</code> and <code>array</code> are popped from the stack; the address stored at position <code>index</code> in <code>array</code> is looked up.  </p>\n</li>\n<li><p>The address is pushed onto the stack.  </p>\n<p>The <code>ldelema</code> is used to retrieve the address of an object at a particular index in an array of objects (of type <code>class</code>). The <code>ldelema</code> instruction loads the address of the value at index <code>index</code> (type <code>native int</code>) in the zero-based one-dimensional array <code>array</code> and places it on the top of the stack. Arrays are objects and hence represented by a value of type <code>O</code>. The value must be of type <code>class</code> passed with the instruction.  </p>\n<p>The return value for <code>ldelema</code> is a managed pointer (type <code>&amp;</code>).  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldelema</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldfld\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldfld</div>        \r\n          </div>\r\n    \r\n            <p>Finds the value of a field in the object whose reference is currently on the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldfld;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7B &lt; <code>T</code> &gt;</td>\n<td>ldfld <code>field</code></td>\n<td>Pushes the value of a field in a specified object onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference (or pointer) is pushed onto the stack.  </p>\n</li>\n<li><p>The object reference (or pointer) is popped from the stack; the value of the specified field in the object is found.  </p>\n</li>\n<li><p>The value stored in the field is pushed onto the stack.  </p>\n<p>The <code>ldfld</code> instruction pushes the value of a field located in an object onto the stack. The object must be on the stack as an object reference (type <code>O</code>), a managed pointer (type <code>&amp;</code>), an unmanaged pointer (type <code>native int</code>), a transient pointer (type <code>*</code>), or an instance of a value type. The use of an unmanaged pointer is not permitted in verifiable code. The object&#39;s field is specified by a metadata token that must refer to a field member. The return type is the same as the one associated with the field. The field may be either an instance field (in which case the object must not be a null reference) or a static field.  </p>\n<p>The <code>ldfld</code> instruction can be preceded by either or both of the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> prefixes.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if the object is null and the field is not static.  </p>\n<p><a class=\"xref\" href=\"system.missingfieldexception\" data-linktype=\"relative-path\">MissingFieldException</a> is thrown if the specified field is not found in the metadata. This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldfld</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, FieldInfo)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldflda\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldflda</div>        \r\n          </div>\r\n    \r\n            <p>Finds the address of a field in the object whose reference is currently on the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldflda;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7C &lt; <code>T</code> &gt;</td>\n<td>ldflda <code>field</code></td>\n<td>Pushes the address of <code>field</code> in a specified object onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference (or pointer) is pushed onto the stack.  </p>\n</li>\n<li><p>The object reference (or pointer) is popped from the stack; the address of the specified field in the object is found.  </p>\n</li>\n<li><p>The address of the specified field is pushed onto the stack.  </p>\n<p>The <code>ldflda</code> instruction pushes the address of a field located in an object onto the stack. The object must be on the stack as an object reference (type <code>O</code>), a managed pointer (type <code>&amp;</code>), an unmanaged pointer (type <code>native int</code>), a transient pointer (type <code>*</code>), or an instance of a value type. The use of an unmanaged pointer is not permitted in verifiable code. The object&#39;s field is specified by a metadata token that must refer to a field member.  </p>\n<p>The value returned by <code>ldflda</code> is a managed pointer (type <code>&amp;</code>) unless the object is pushed onto the stack as an unmanaged pointer, in which case the return address is also an unmanaged pointer (type <code>native int</code>).  </p>\n<p>The <code>ldflda</code> instruction can be preceded by either or both of the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> prefixes.  </p>\n<p><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> is thrown if the object is not within the application domain from which it is being accessed. The address of a field that is not inside the accessing application domain cannot be loaded.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if the object is null and the field is not static.  </p>\n<p><a class=\"xref\" href=\"system.missingfieldexception\" data-linktype=\"relative-path\">MissingFieldException</a> is thrown if the specified field is not found in the metadata. This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldflda</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, FieldInfo)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldftn\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldftn</div>        \r\n          </div>\r\n    \r\n            <p>Pushes an unmanaged pointer (type <code>native int</code>) to the native code implementing a specific method onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldftn;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 06 &lt; <code>T</code> &gt;</td>\n<td>ldftn <code>method</code></td>\n<td>Pushes a pointer to a method referenced by <code>method</code> on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The unmanaged pointer to a specific method is pushed onto the stack.  </p>\n<p>The specific method (<code>method</code>) can be called using the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Calli\" data-linktype=\"relative-path\">Calli</a> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).  </p>\n<p>The value returned points to native code using the CLR calling convention. This method pointer should not be passed to unmanaged native code as a callback routine.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldftn</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, MethodInfo)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldind_I\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldind_I</div>        \r\n          </div>\r\n    \r\n            <p>Loads a value of type <code>native int</code> as a <code>native int</code> onto the evaluation stack indirectly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldind_I;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4D</td>\n<td>ldind.i</td>\n<td>Loads the <code>native int</code> value at address <code>addr</code> onto the stack as a <code>native int</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack; the value located at the address is fetched.  </p>\n</li>\n<li><p>The fetched value is pushed onto the stack.  </p>\n<p>The <code>ldind.i</code> instruction indirectly loads a <code>native int</code> value from the specified address (of type <code>native int</code>, <code>&amp;</code>, or *) onto the stack as a <code>native int</code>.  </p>\n<p>All of the <code>ldind</code> instructions are shortcuts for a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldobj\" data-linktype=\"relative-path\">Ldobj</a> instruction that specifies the corresponding built-in value class.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack. Floating-point values are converted to <code>F</code> type when loaded onto the evaluation stack.  </p>\n<p>Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the <code>ldind</code> instructions are used in a manner consistent with the type of the pointer.  </p>\n<p>The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can occur (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction for preventative measures). The results of all MSIL instructions that return addresses (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloca\" data-linktype=\"relative-path\">Ldloca</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarga\" data-linktype=\"relative-path\">Ldarga</a>) are safely aligned. For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU. Code that depends on byte ordering might not run on all platforms.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldind.i</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldind_I1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldind_I1</div>        \r\n          </div>\r\n    \r\n            <p>Loads a value of type <code>int8</code> as an <code>int32</code> onto the evaluation stack indirectly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldind_I1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>46</td>\n<td>ldind.i1</td>\n<td>Loads the <code>int8</code> value at address <code>addr</code> onto the stack as an <code>int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack; the value located at the address is fetched.  </p>\n</li>\n<li><p>The fetched value is pushed onto the stack..  </p>\n<p>The <code>ldind.i1</code> instruction indirectly loads an <code>int8</code> value from the specified address (of type <code>native int</code>, <code>&amp;</code>, or *) onto the stack as an <code>int32</code>.  </p>\n<p>All of the <code>ldind</code> instructions are shortcuts for a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldobj\" data-linktype=\"relative-path\">Ldobj</a> instruction that specifies the corresponding built-in value class.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack. Floating-point values are converted to <code>F</code> type when loaded onto the evaluation stack.  </p>\n<p>Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the <code>ldind</code> instructions are used in a manner consistent with the type of the pointer.  </p>\n<p>The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can occur (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction for preventative measures). The results of all MSIL instructions that return addresses (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloca\" data-linktype=\"relative-path\">Ldloca</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarga\" data-linktype=\"relative-path\">Ldarga</a>) are safely aligned. For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU. Code that depends on byte ordering might not run on all platforms.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldind.i1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldind_I2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldind_I2</div>        \r\n          </div>\r\n    \r\n            <p>Loads a value of type <code>int16</code> as an <code>int32</code> onto the evaluation stack indirectly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldind_I2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>48</td>\n<td>ldind.i2</td>\n<td>Loads the <code>int16</code> value at address <code>addr</code> onto the stack as an <code>int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack; the value located at the address is fetched.  </p>\n</li>\n<li><p>The fetched value is pushed onto the stack.  </p>\n<p>The <code>ldind.i2</code> instruction indirectly loads an <code>int16</code> value from the specified address (of type <code>native int</code>, <code>&amp;</code>, or *) onto the stack as an <code>int32</code>.  </p>\n<p>All of the <code>ldind</code> instructions are shortcuts for a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldobj\" data-linktype=\"relative-path\">Ldobj</a> instruction that specifies the corresponding built-in value class.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack. Floating-point values are converted to <code>F</code> type when loaded onto the evaluation stack.  </p>\n<p>Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the <code>ldind</code> instructions are used in a manner consistent with the type of the pointer.  </p>\n<p>The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can occur (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction for preventative measures). The results of all MSIL instructions that return addresses (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloca\" data-linktype=\"relative-path\">Ldloca</a>and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarga\" data-linktype=\"relative-path\">Ldarga</a>) are safely aligned. For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU. Code that depends on byte ordering might not run on all platforms.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldind.i2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldind_I4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldind_I4</div>        \r\n          </div>\r\n    \r\n            <p>Loads a value of type <code>int32</code> as an <code>int32</code> onto the evaluation stack indirectly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldind_I4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4A</td>\n<td>ldind.i4</td>\n<td>Loads the <code>int32</code> value at address <code>addr</code> onto the stack as an <code>int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack; the value located at the address is fetched.  </p>\n</li>\n<li><p>The fetched value is pushed onto the stack.  </p>\n<p>The <code>ldind.i4</code> instruction indirectly loads an <code>int32</code> value from the specified address (of type <code>native int</code>, <code>&amp;</code>, or *) onto the stack as an <code>int32</code>.  </p>\n<p>All of the <code>ldind</code> instructions are shortcuts for a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldobj\" data-linktype=\"relative-path\">Ldobj</a> instruction that specifies the corresponding built-in value class.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack. Floating-point values are converted to <code>F</code> type when loaded onto the evaluation stack.  </p>\n<p>Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the <code>ldind</code> instructions are used in a manner consistent with the type of the pointer.  </p>\n<p>The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can occur (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction for preventative measures). The results of all MSIL instructions that return addresses (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloca\" data-linktype=\"relative-path\">Ldloca</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarga\" data-linktype=\"relative-path\">Ldarga</a>) are safely aligned. For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU. Code that depends on byte ordering might not run on all platforms.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldind.i4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldind_I8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldind_I8</div>        \r\n          </div>\r\n    \r\n            <p>Loads a value of type <code>int64</code> as an <code>int64</code> onto the evaluation stack indirectly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldind_I8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4C</td>\n<td>ldind.i8</td>\n<td>Loads the <code>int64</code> value at address <code>addr</code> onto the stack as an <code>int64</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack; the value located at the address is fetched.  </p>\n</li>\n<li><p>The fetched value is pushed onto the stack.  </p>\n<p>The <code>ldind.i8</code> instruction indirectly loads an <code>int64</code> value from the specified address (of type <code>native int</code>, <code>&amp;</code>, or *) onto the stack as an <code>int64</code>.  </p>\n<p>All of the <code>ldind</code> instructions are shortcuts for a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldobj\" data-linktype=\"relative-path\">Ldobj</a> instruction that specifies the corresponding built-in value class.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack. Floating-point values are converted to <code>F</code> type when loaded onto the evaluation stack.  </p>\n<p>Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the <code>ldind</code> instructions are used in a manner consistent with the type of the pointer.  </p>\n<p>The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can occur (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction for preventative measures). The results of all MSIL instructions that return addresses (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloca\" data-linktype=\"relative-path\">Ldloca</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarga\" data-linktype=\"relative-path\">Ldarga</a>) are safely aligned. For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU. Code that depends on byte ordering might not run on all platforms.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldind.i8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldind_R4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldind_R4</div>        \r\n          </div>\r\n    \r\n            <p>Loads a value of type <code>float32</code> as a type <code>F</code> (float) onto the evaluation stack indirectly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldind_R4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4E</td>\n<td>ldind.r4</td>\n<td>Loads the <code>float32</code> value at address <code>addr</code> onto the stack as a type <code>F</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack; the value located at the address is fetched.  </p>\n</li>\n<li><p>The fetched value is pushed onto the stack.  </p>\n<p>The <code>ldind.r4</code> instruction indirectly loads a <code>float32</code> value from the specified address (of type <code>native int</code>, <code>&amp;</code>, or *) onto the stack as a type <code>F</code>.  </p>\n<p>All of the <code>ldind</code> instructions are shortcuts for a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldobj\" data-linktype=\"relative-path\">Ldobj</a> instruction that specifies the corresponding built-in value class.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack. Floating-point values are converted to <code>F</code> type when loaded onto the evaluation stack.  </p>\n<p>Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the <code>ldind</code> instructions are used in a manner consistent with the type of the pointer.  </p>\n<p>The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can occur (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction for preventative measures). The results of all MSIL instructions that return addresses (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloca\" data-linktype=\"relative-path\">Ldloca</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarga\" data-linktype=\"relative-path\">Ldarga</a>) are safely aligned. For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU. Code that depends on byte ordering might not run on all platforms.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldind.r4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldind_R8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldind_R8</div>        \r\n          </div>\r\n    \r\n            <p>Loads a value of type <code>float64</code> as a type <code>F</code> (float) onto the evaluation stack indirectly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldind_R8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4F</td>\n<td>ldind.r8</td>\n<td>Loads the <code>float64</code> value at address <code>addr</code> onto the stack as a type <code>F</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack; the value located at the address is fetched.  </p>\n</li>\n<li><p>The fetched value is pushed onto the stack.  </p>\n<p>The <code>ldind.r8</code> instruction indirectly loads a <code>float64</code> value from the specified address (of type <code>native int</code>, <code>&amp;</code>, or *) onto the stack as a <code>float64</code>.  </p>\n<p>All of the <code>ldind</code> instructions are shortcuts for a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldobj\" data-linktype=\"relative-path\">Ldobj</a> instruction that specifies the corresponding built-in value class.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack. Floating-point values are converted to <code>F</code> type when loaded onto the evaluation stack.  </p>\n<p>Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the <code>ldind</code> instructions are used in a manner consistent with the type of the pointer.  </p>\n<p>The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can occur (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction for preventative measures). The results of all MSIL instructions that return addresses (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloca\" data-linktype=\"relative-path\">Ldloca</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarga\" data-linktype=\"relative-path\">Ldarga</a>) are safely aligned. For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU. Code that depends on byte ordering might not run on all platforms.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldind.r8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldind_Ref\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldind_Ref</div>        \r\n          </div>\r\n    \r\n            <p>Loads an object reference as a type <code>O</code> (object reference) onto the evaluation stack indirectly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldind_Ref;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>50</td>\n<td>ldind.ref</td>\n<td>Loads the object reference at address <code>addr</code> onto the stack as a type <code>O</code></td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack; the object reference located at the address is fetched.  </p>\n</li>\n<li><p>The fetched reference is pushed onto the stack.  </p>\n<p>The <code>ldind.ref</code> instruction indirectly loads the object reference the specified address (of type <code>native int</code>, <code>&amp;</code>, or *) onto the stack as type <code>O</code>.  </p>\n<p>All of the <code>ldind</code> instructions are shortcuts for a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldobj\" data-linktype=\"relative-path\">Ldobj</a> instruction that specifies the corresponding built-in value class.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack. Floating-point values are converted to <code>F</code> type when loaded onto the evaluation stack.  </p>\n<p>Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the <code>ldind</code> instructions are used in a manner consistent with the type of the pointer.  </p>\n<p>The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can occur (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction for preventative measures). The results of all MSIL instructions that return addresses (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloca\" data-linktype=\"relative-path\">Ldloca</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarga\" data-linktype=\"relative-path\">Ldarga</a>) are safely aligned. For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU. Code that depends on byte ordering might not run on all platforms.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldind.ref</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldind_U1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldind_U1</div>        \r\n          </div>\r\n    \r\n            <p>Loads a value of type <code>unsigned int8</code> as an <code>int32</code> onto the evaluation stack indirectly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldind_U1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>47</td>\n<td>ldind.u1</td>\n<td>Loads the <code>unsigned int8</code> value at address <code>addr</code> onto the stack as an <code>int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack; the value located at the address is fetched.  </p>\n</li>\n<li><p>The fetched value is pushed onto the stack.  </p>\n<p>The <code>ldind.u1</code> instruction indirectly loads an <code>unsigned int8</code> value from the specified address (of type<code>native int</code>, <code>&amp;</code>, or *) onto the stack as an <code>int32</code>.  </p>\n<p>All of the <code>ldind</code> instructions are shortcuts for a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldobj\" data-linktype=\"relative-path\">Ldobj</a> instruction that specifies the corresponding built-in value class.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack. Floating-point values are converted to <code>F</code> type when loaded onto the evaluation stack.  </p>\n<p>Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the <code>ldind</code> instructions are used in a manner consistent with the type of the pointer.  </p>\n<p>The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can occur (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction for preventative measures). The results of all MSIL instructions that return addresses (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloca\" data-linktype=\"relative-path\">Ldloca</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarga\" data-linktype=\"relative-path\">Ldarga</a>) are safely aligned. For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU. Code that depends on byte ordering might not run on all platforms.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldind.u1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldind_U2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldind_U2</div>        \r\n          </div>\r\n    \r\n            <p>Loads a value of type <code>unsigned int16</code> as an <code>int32</code> onto the evaluation stack indirectly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldind_U2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>49</td>\n<td>ldind.u2</td>\n<td>Loads the <code>unsigned int16</code> value at address <code>addr</code> onto the stack as an <code>int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack; the value located at the address is fetched.  </p>\n</li>\n<li><p>The fetched value is pushed onto the stack.  </p>\n<p>The <code>ldind.u2</code> instruction indirectly loads an <code>unsigned int16</code> value from the specified address (of type <code>native int</code>, <code>&amp;</code>, or *) onto the stack as an <code>int32</code>.  </p>\n<p>All of the <code>ldind</code> instructions are shortcuts for a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldobj\" data-linktype=\"relative-path\">Ldobj</a> instruction that specifies the corresponding built-in value class.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack. Floating-point values are converted to <code>F</code> type when loaded onto the evaluation stack.  </p>\n<p>Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the <code>ldind</code> instructions are used in a manner consistent with the type of the pointer.  </p>\n<p>The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can occur (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction for preventative measures). The results of all MSIL instructions that return addresses (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloca\" data-linktype=\"relative-path\">Ldloca</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarga\" data-linktype=\"relative-path\">Ldarga</a>) are safely aligned. For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU. Code that depends on byte ordering might not run on all platforms.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldind.u2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldind_U4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldind_U4</div>        \r\n          </div>\r\n    \r\n            <p>Loads a value of type <code>unsigned int32</code> as an <code>int32</code> onto the evaluation stack indirectly.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldind_U4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4B</td>\n<td>ldind.u4</td>\n<td>Loads the <code>unsigned int32</code> value at address <code>addr</code> onto the stack as an <code>int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack; the value located at the address is fetched.  </p>\n</li>\n<li><p>The fetched value is pushed onto the stack.  </p>\n<p>The <code>ldind.u4</code> instruction indirectly loads an <code>unsigned int32</code> value from the specified address (of type <code>native int</code>, <code>&amp;</code>, or *) onto the stack as an <code>int32</code>.  </p>\n<p>All of the <code>ldind</code> instructions are shortcuts for a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldobj\" data-linktype=\"relative-path\">Ldobj</a> instruction that specifies the corresponding built-in value class.  </p>\n<p>Note that integer values of less than 4 bytes are extended to <code>int32</code> (not <code>native int</code>) when they are loaded onto the evaluation stack. Floating-point values are converted to <code>F</code> type when loaded onto the evaluation stack.  </p>\n<p>Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the <code>ldind</code> instructions are used in a manner consistent with the type of the pointer.  </p>\n<p>The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can occur (see the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction for preventative measures). The results of all MSIL instructions that return addresses (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloca\" data-linktype=\"relative-path\">Ldloca</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldarga\" data-linktype=\"relative-path\">Ldarga</a>) are safely aligned. For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU. Code that depends on byte ordering might not run on all platforms.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> can be thrown if an invalid address is detected.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldind.u4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldlen\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldlen</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldlen;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8E</td>\n<td>ldlen</td>\n<td>Pushes the length (of type <code>natural unsigned int</code>) of an array on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference to an array is pushed onto the stack.  </p>\n</li>\n<li><p>The array reference is popped from the stack and the length is computed.  </p>\n</li>\n<li><p>The length is pushed onto the stack.  </p>\n<p>Arrays are objects and hence represented by a value of type <code>O</code>. The length is returned as a <code>natural unsigned int</code>.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if the array reference is a null reference.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldlen</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldloc\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldloc</div>        \r\n          </div>\r\n    \r\n            <p>Loads the local variable at a specific index onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldloc;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 0C &lt; <code>unsigned int16</code> &gt;</td>\n<td>ldloc <code>index</code></td>\n<td>Loads the local variable at index <code>index</code> onto stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The local variable value at the specified index is pushed onto the stack.  </p>\n<p>The <code>ldloc</code> instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards. Local variables are initialized to 0 before entering the method only if the initialize flag on the method is true. There are 65,535 (2^16-1) local variables possible (0-65,534). Index 65,535 is not valid since likely implementations will use a 2-byte integer to track both a local&#39;s index, along with the total number of locals for a given method. If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.  </p>\n<p>The <code>ldloc.0</code>, <code>ldloc.1</code>, <code>ldloc.2</code>, and <code>ldloc.3</code> instructions provide an efficient encoding for accessing the first four local variables.  </p>\n<p>The type of the value is the same as the type of the local variable, which is specified in the method header. See Partition I. Local variables that are smaller than 4 bytes long are expanded to type <code>int32</code> when they are loaded onto the stack. Floating-point values are expanded to their native size (type <code>F</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overloads can use the <code>ldloc</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li><p>ILGenerator.Emit(OpCode, LocalBuilder)  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode, short)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldloc_0\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldloc_0</div>        \r\n          </div>\r\n    \r\n            <p>Loads the local variable at index 0 onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldloc_0;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>06</td>\n<td>ldloc.0</td>\n<td>Loads the local variable at index 0 onto the evaluation stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The local variable value at the index 0 is pushed onto the stack.  </p>\n<p><code>ldloc.0</code> is an especially efficient encoding for <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloc\" data-linktype=\"relative-path\">Ldloc</a>, allowing access to the local variable at index 0.  </p>\n<p>The type of the value is the same as the type of the local variable, which is specified in the method header. Local variables that are smaller than 4 bytes long are expanded to type <code>int32</code> when they are loaded onto the stack. Floating-point values are expanded to their native size (type <code>F</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldloc.0</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldloc_1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldloc_1</div>        \r\n          </div>\r\n    \r\n            <p>Loads the local variable at index 1 onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldloc_1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>07</td>\n<td>ldloc.1</td>\n<td>Loads the local variable at index 1 onto the evaluation stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The local variable value at the index 1 is pushed onto the stack.  </p>\n<p><code>ldloc.1</code> is an especially efficient encoding for <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloc\" data-linktype=\"relative-path\">Ldloc</a>, allowing access to the local variable at index 1.  </p>\n<p>The type of the value is the same as the type of the local variable, which is specified in the method header. Local variables that are smaller than 4 bytes long are expanded to type <code>int32</code> when they are loaded onto the stack. Floating-point values are expanded to their native size (type <code>F</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldloc.1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldloc_2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldloc_2</div>        \r\n          </div>\r\n    \r\n            <p>Loads the local variable at index 2 onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldloc_2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>08</td>\n<td>ldloc.2</td>\n<td>Loads the local variable at index 2 onto the evaluation stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The local variable value at the index 2 is pushed onto the stack.  </p>\n<p><code>ldloc.2</code> is an especially efficient encoding for <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloc\" data-linktype=\"relative-path\">Ldloc</a>, allowing access to the local variable at index 2.  </p>\n<p>The type of the value is the same as the type of the local variable, which is specified in the method header. Local variables that are smaller than 4 bytes long are expanded to type <code>int32</code> when they are loaded onto the stack. Floating-point values are expanded to their native size (type <code>F</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldloc.2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldloc_3\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldloc_3</div>        \r\n          </div>\r\n    \r\n            <p>Loads the local variable at index 3 onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldloc_3;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>09</td>\n<td>ldloc.3</td>\n<td>Loads the local variable at index 3 onto the evaluation stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The local variable value at the index 3 is pushed onto the stack.  </p>\n<p><code>ldloc.3</code> is an especially efficient encoding for <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloc\" data-linktype=\"relative-path\">Ldloc</a>, allowing access to the local variable at index 3.  </p>\n<p>The type of the value is the same as the type of the local variable, which is specified in the method header. Local variables that are smaller than 4 bytes long are expanded to type <code>int32</code> when they are loaded onto the stack. Floating-point values are expanded to their native size (type <code>F</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldloc.3</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldloc_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldloc_S</div>        \r\n          </div>\r\n    \r\n            <p>Loads the local variable at a specific index onto the evaluation stack, short form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldloc_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>11 &lt; <code>unsigned int8</code> &gt;</td>\n<td>ldloc.s <code>index</code></td>\n<td>Loads the local variable at index <code>index</code> onto stack, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The local variable value at the specified index is pushed onto the stack.  </p>\n<p>The <code>ldloc.s</code> instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards. Local variables are initialized to 0 before entering the method if the initialize flag on the method is true. There are 256 (2^8) local variables possible (0-255) in the short form, which is a more efficient encoding than <code>ldloc</code>.  </p>\n<p>The type of the value is the same as the type of the local variable, which is specified in the method header. See Partition I. Local variables that are smaller than 4 bytes long are expanded to type <code>int32</code> when they are loaded onto the stack. Floating-point values are expanded to their native size (type <code>F</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overloads can use the <code>ldloc.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li><p>ILGenerator.Emit(OpCode, LocalBuilder)  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode, byte)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldloca\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldloca</div>        \r\n          </div>\r\n    \r\n            <p>Loads the address of the local variable at a specific index onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldloca;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE OD &lt; <code>unsigned int16</code> &gt;</td>\n<td>ldloca <code>index</code></td>\n<td>Loads the address of the local variable at <code>index</code> onto the evaluation stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The address stored in the local variable at the specified index is pushed onto the stack.  </p>\n<p>The <code>ldloca</code> instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards. The value pushed on the stack is already aligned correctly for use with instructions like <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldind_I\" data-linktype=\"relative-path\">Ldind_I</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Stind_I\" data-linktype=\"relative-path\">Stind_I</a>. The result is a transient pointer (type <code>*</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldloca</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, short)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldloca_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldloca_S</div>        \r\n          </div>\r\n    \r\n            <p>Loads the address of the local variable at a specific index onto the evaluation stack, short form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldloca_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12 &lt; <code>unsigned int8</code> &gt;</td>\n<td>ldloca.s <code>index</code></td>\n<td>Loads the address of the local variable at <code>index</code> onto the evaluation stack, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The address stored in the local variable at the specified index is pushed onto the stack.  </p>\n<p>The <code>ldloca.s</code> instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards. The value pushed on the stack is already aligned correctly for use with instructions like <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldind_I\" data-linktype=\"relative-path\">Ldind_I</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Stind_I\" data-linktype=\"relative-path\">Stind_I</a>. The result is a transient pointer (type <code>*</code>).  </p>\n<p>The <code>ldloca.s</code> instruction provides an efficient encoding for use with the local variables 0 through 255.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldloca.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, byte)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldnull\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldnull</div>        \r\n          </div>\r\n    \r\n            <p>Pushes a null reference (type <code>O</code>) onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldnull;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>14</td>\n<td>ldnull</td>\n<td>push a null reference onto the stack</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A null object reference is pushed onto the stack.  </p>\n<p><code>ldnull</code> pushes a null reference (type <code>O</code>) on the stack. This is used to initialize locations before they are populated with data, or when they become deprecated.  </p>\n<p><code>ldnull</code> provides a null reference that is size-independent.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldnull</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldobj\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldobj</div>        \r\n          </div>\r\n    \r\n            <p>Copies the value type object pointed to by an address to the top of the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldobj;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>71 &lt; <code>T</code> &gt;</td>\n<td>ldobj <code>class</code></td>\n<td>Copy instance of value type <code>class</code> to the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The address of a value type object is pushed onto the stack.  </p>\n</li>\n<li><p>The address is popped from the stack and the instance at that particular address is looked up.  </p>\n</li>\n<li><p>The value of the object stored at that address is pushed onto the stack.  </p>\n<p>The <code>ldobj</code> instruction is used to pass a value type as a parameter.  </p>\n<p>The <code>ldobj</code> instruction copies the value pointed to by <code>addrOfValObj</code> (of type <code>&amp;</code>, <code>*</code>, or <code>native int</code>) to the top of the stack. The number of bytes copied depends on the size of the class (as specified by the <code>class</code> parameter). The <code>class</code> parameter is a metadata token representing the value type.  </p>\n<p>The operation of the <code>ldobj</code> instruction can be altered by an immediately preceding <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction.  </p>\n<p><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown if class cannot be found. This is typically detected when the Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldobj</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldsfld\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldsfld</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the value of a static field onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldsfld;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7E &lt; <code>T</code> &gt;</td>\n<td>ldsfld <code>field</code></td>\n<td>Push the value of <code>field</code> on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value of the specific field is pushed onto the stack.  </p>\n<p>The <code>ldsfld</code> instruction pushes the value of a static (shared among all instances of a class) field on the stack. The return type is that associated with the passed metadata token <code>field</code>.  </p>\n<p>The <code>ldsfld</code> instruction can have a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> prefix.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldsfld</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, FieldInfo)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldsflda\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldsflda</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the address of a static field onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldsflda;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7F &lt; <code>T</code> &gt;</td>\n<td>ldsflda <code>field</code></td>\n<td>Push the address of <code>field</code> on the stack</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The address of a specific field is pushed onto the stack.  </p>\n<p>The <code>ldsflda</code> instruction pushes the address of a static (shared among all instances of a class) field on the stack. The address may be represented as a transient pointer (type <code>*</code>) if the metadata token <code>field</code> refers to a type whose memory is managed. Otherwise, it corresponds to an unmanaged pointer (type <code>native int</code>). Note that <code>field</code> may be a static global with an assigned relative virtual address (the offset of the field from the base address at which its containing PE file is loaded into memory) where the memory is unmanaged.  </p>\n<p>The <code>ldsflda</code> instruction can have a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> prefix.  </p>\n<p><a class=\"xref\" href=\"system.missingfieldexception\" data-linktype=\"relative-path\">MissingFieldException</a> is thrown if field is not found in the metadata. This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at runtime.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldsflda</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, FieldInfo)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldstr\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldstr</div>        \r\n          </div>\r\n    \r\n            <p>Pushes a new object reference to a string literal stored in the metadata.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldstr;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>72 &lt; <code>T</code> &gt;</td>\n<td>ldstr <code>mdToken</code></td>\n<td>Pushes a string object for the metadata string token <code>mdToken</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference to a string is pushed onto the stack.  </p>\n<p>The <code>ldstr</code> instruction pushes an object reference (type <code>O</code>) to a new string object representing the specific string literal stored in the metadata. The <code>ldstr</code> instruction allocates the requisite amount of memory and performs any format conversion required to convert the string literal from the form used in the file to the string format required at runtime.  </p>\n<p>The Common Language Infrastructure (CLI) guarantees that the result of two <code>ldstr</code> instructions referring to two metadata tokens that have the same sequence of characters return precisely the same string object (a process known as &quot;string interning&quot;).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldstr</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, string)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldtoken\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldtoken</div>        \r\n          </div>\r\n    \r\n            <p>Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldtoken;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D0 &lt; <code>T</code> &gt;</td>\n<td>ldtoken <code>token</code></td>\n<td>Converts a metadata token to its runtime representation.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The passed token is converted to a <code>RuntimeHandle</code> and pushed onto the stack.  </p>\n<p>The <code>ldtoken</code> instruction pushes a <code>RuntimeHandle</code> for the specified metadata token. A <code>RuntimeHandle</code> can be a <code>fieldref/fielddef</code>, a <code>methodref/methoddef</code>, or a <code>typeref/typedef</code>.  </p>\n<p>The value pushed on the stack can be used in calls to <code>Reflection</code> methods in the system class library.  </p>\n<p>For information on runtime handles, see the following classes: <a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a>, <a class=\"xref\" href=\"system.runtimetypehandle\" data-linktype=\"relative-path\">RuntimeTypeHandle</a>, and <a class=\"xref\" href=\"system.runtimemethodhandle\" data-linktype=\"relative-path\">RuntimeMethodHandle</a>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overloads can use the <code>ldtoken</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li><p>ILGenerator.Emit(OpCode, MethodInfo)  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode, FieldInfo)  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode, Type)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ldvirtftn\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ldvirtftn</div>        \r\n          </div>\r\n    \r\n            <p>Pushes an unmanaged pointer (type <code>native int</code>) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ldvirtftn;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 07 &lt; <code>T</code> &gt;</td>\n<td>ldvirtftn <code>method</code></td>\n<td>Pushes the pointer to an object&#39;s virtual method <code>method</code> on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference is pushed onto the stack.  </p>\n</li>\n<li><p>The object reference is popped from the stack and the address of the entry point to the method (as specified by the metadata token <code>method</code>) is looked up.  </p>\n</li>\n<li><p>The pointer to <code>method</code> is pushed onto the stack.  </p>\n<p>The resulting unmanaged pointer pushed onto the stack by the <code>ldvirtftn</code> instruction can be called using the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Calli\" data-linktype=\"relative-path\">Calli</a> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).  </p>\n<p>The unmanaged pointer points to native code using the CLR calling convention. This method pointer should not be passed to unmanaged native code as a callback routine.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ldvirtftn</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, MethodInfo)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Leave\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Leave</div>        \r\n          </div>\r\n    \r\n            <p>Exits a protected region of code, unconditionally transferring control to a specific target instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Leave;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DD &lt; <code>int32</code> &gt;</td>\n<td>leave <code>target</code></td>\n<td>Exits a protected region of code.</td>\n</tr>\n</tbody>\n</table>\n<p> There is no stack transition behavior specified for this instruction.  </p>\n<p> The <code>leave</code> instruction unconditionally transfers control to the specific target instruction, represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p> The <code>leave</code> instruction is similar to the <code>br</code> instruction, but it can be used to exit a <code>try</code>, <code>filter</code>, or <code>catch</code> block whereas the ordinary branch instructions can only be used in such a block to transfer control within it. The <code>leave</code> instruction empties the evaluation stack and ensures that the appropriate surrounding <code>finally</code> blocks are executed.  </p>\n<p> You cannot use a <code>leave</code> instruction to exit a <code>finally</code> block. To ease code generation for exception handlers it is valid from within a catch block to use a <code>leave</code> instruction to transfer control to any instruction within the associated <code>try</code> block.  </p>\n<p> If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.  </p>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overloads can use the <code>leave</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Leave_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Leave_S</div>        \r\n          </div>\r\n    \r\n            <p>Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Leave_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DE &lt; <code>int8</code> &gt;</td>\n<td>leave.s <code>target</code></td>\n<td>Exit a protected region of code, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> There is no stack transition behavior specified for this instruction.  </p>\n<p> The <code>leave.s</code> instruction unconditionally transfers control to the passed target instruction, represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.  </p>\n<p> The <code>leave.s</code> instruction is similar to the <code>br</code> instruction, but it can be used to exit a <code>try</code>, <code>filter</code>, or <code>catch</code> block whereas the ordinary branch instructions can only be used in such a block to transfer control within it. The <code>leave.s</code> instruction empties the evaluation stack and ensures that the appropriate surrounding <code>finally</code> blocks are executed.  </p>\n<p> You cannot use a <code>leave.s</code> instruction to exit a <code>finally</code> block. To ease code generation for exception handlers it is valid from within a catch block to use a <code>leave.s</code> instruction to transfer control to any instruction within the associated <code>try</code> block.  </p>\n<p> If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.  </p>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>leave.s</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Localloc\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Localloc</div>        \r\n          </div>\r\n    \r\n            <p>Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <code>*</code>) of the first allocated byte onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Localloc;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 0F</td>\n<td>localloc</td>\n<td>Allocate space from the local heap.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The number of bytes to be allocated is pushed onto the stack.  </p>\n</li>\n<li><p>The number of bytes is popped from the stack; an amount of memory corresponding to the size is allocated from the local heap.  </p>\n</li>\n<li><p>A pointer to the first byte of the allocated memory is pushed onto the stack.  </p>\n<p>The <code>localloc</code> instruction allocates <code>size</code> (type <code>natural unsigned int</code>) bytes from the local dynamic memory pool and returns the address (a transient pointer, type <code>*</code>) of the first allocated byte. The block of memory returned is initialized to 0 only if the initialize flag on the method is <code>true</code>. When the current method executes a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ret\" data-linktype=\"relative-path\">Ret</a>, the local memory pool is made available for reuse.  </p>\n<p>The resulting address is aligned so that any primitive data type can be stored there using the <code>stind</code> instructions (such as <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Stind_I4\" data-linktype=\"relative-path\">Stind_I4</a>) and loaded using the <code>ldind</code> instructions (such as <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldind_I4\" data-linktype=\"relative-path\">Ldind_I4</a>).  </p>\n<p>The <code>localloc</code> instruction cannot occur within a <code>filter</code>, <code>catch</code>, <code>finally</code>, or <code>fault</code> block.  </p>\n<p><a class=\"xref\" href=\"system.stackoverflowexception\" data-linktype=\"relative-path\">StackOverflowException</a> is thrown if there is insufficient memory to service the request.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>localloc</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Mkrefany\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Mkrefany</div>        \r\n          </div>\r\n    \r\n            <p>Pushes a typed reference to an instance of a specific type onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Mkrefany;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C6 &lt; <code>T</code> &gt;</td>\n<td>mkrefany <code>class</code></td>\n<td>Pushes a typed reference of type <code>class</code> onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A pointer to piece of data is pushed onto the stack.  </p>\n</li>\n<li><p>The pointer is popped and converted to a typed reference of type <code>class</code>.  </p>\n</li>\n<li><p>The typed reference is pushed onto the stack.  </p>\n<p>The <code>mkrefany</code> instruction supports the passing of dynamically typed references. The pointer must be of type <code>&amp;</code>, <code>*</code>, or <code>native int</code>, and hold the valid address of a piece of data. <code>Class</code> is the class token describing the type of the data referenced by the pointer. <code>Mkrefany</code> pushes a typed reference on the stack, providing an opaque descriptor of the pointer and the type <code>class</code>.  </p>\n<p>The only valid operation permitted upon a typed reference is to pass it to a method that requires a typed reference as a parameter. The callee can then use the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Refanytype\" data-linktype=\"relative-path\">Refanytype</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Refanyval\" data-linktype=\"relative-path\">Refanyval</a> instructions to retrieve the type (class) and the address respectively.  </p>\n<p><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown if <code>class</code> cannot be found. This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>mkrefany</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Mul\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Mul</div>        \r\n          </div>\r\n    \r\n            <p>Multiplies two values and pushes the result on the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Mul;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5A</td>\n<td>mul</td>\n<td>Multiplies two values on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>value1</code> is multiplied by <code>value2</code>.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>The <code>mul</code> instruction multiplies <code>value1</code> by <code>value2</code> and pushes the result on the stack. Integer operations silently truncate the upper bits on overflow.  </p>\n<p>See <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Mul_Ovf\" data-linktype=\"relative-path\">Mul_Ovf</a> for an integer-specific multiply operation with overflow handling.  </p>\n<p>For floating-point types, 0 * infinity = NaN.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>mul</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Mul_Ovf\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Mul_Ovf</div>        \r\n          </div>\r\n    \r\n            <p>Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Mul_Ovf;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D8</td>\n<td>mul.ovf</td>\n<td>Multiplies two integer values on the stack with an overflow check.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>value1</code> is multiplied by <code>value2</code>, with an overflow check.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>The <code>mul.ovf</code> instruction multiplies integer <code>value1</code> by integer <code>value2</code> and pushes the result on the stack. An exception is thrown if the result will not fit in the result type.  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>mul.ovf</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Mul_Ovf_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Mul_Ovf_Un</div>        \r\n          </div>\r\n    \r\n            <p>Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D9</td>\n<td>mul.ovf.un</td>\n<td>Multiplies two unsigned values on the stack with an overflow check.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>value1</code> is multiplied by <code>value2</code>, with an overflow check.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>The <code>mul.ovf.un</code> instruction multiplies unsigned integer <code>value1</code> by unsigned integer <code>value2</code> and pushes the result on the stack. An exception is thrown if the result will not fit in the result type.  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>mul.ovf.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Neg\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Neg</div>        \r\n          </div>\r\n    \r\n            <p>Negates a value and pushes the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Neg;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>65</td>\n<td>neg</td>\n<td>Negates the value currently on top of the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>A value is popped from the stack and negated.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>The <code>neg</code> instruction negates value and pushes the result on top of the stack. The return type is the same as the operand type.  </p>\n<p>Negation of integral values is standard two&#39;s complement negation. In particular, negating the most negative number (which does not have a positive counterpart) yields the most negative number. To detect this overflow use the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Sub_Ovf\" data-linktype=\"relative-path\">Sub_Ovf</a> instruction instead (that is, subtract from 0).  </p>\n<p>Negating a floating-point number cannot overflow, and negating NaN returns NaN.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>neg</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Newarr\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Newarr</div>        \r\n          </div>\r\n    \r\n            <p>Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Newarr;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>8D &lt; <code>T</code> &gt;</td>\n<td>newarr <code>etype</code></td>\n<td>Creates a new array with elements of type <code>etype</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The number of elements in the array is pushed onto the stack.  </p>\n</li>\n<li><p>The number of elements is popped from the stack and the array is created.  </p>\n</li>\n<li><p>An object reference to the new array is pushed onto the stack.  </p>\n<p>The <code>newarr</code> instruction pushes an object reference (type <code>O</code>) to a new zero-based, one-dimensional array whose elements are of type <code>etype</code> (a metadata token describing the type). The number of elements in the new array should be specified as a <code>native int</code>. Valid array indexes range from zero to the maximum number of elements minus one.  </p>\n<p>The elements of an array can be any type, including value types.  </p>\n<p>Zero-based, one-dimensional arrays of numbers are created using a metadata token referencing the appropriate value type (<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, and so on). Elements of the array are initialized to 0 of the appropriate type.  </p>\n<p>Nonzero-based one-dimensional arrays and multidimensional arrays are created using <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Newobj\" data-linktype=\"relative-path\">Newobj</a> rather than <code>newarr</code>. More commonly, they are created using the methods of the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> class in the .NET Framework.  </p>\n<p><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> is thrown if there is insufficient memory to satisfy the request.  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if <code>numElems</code> is less than 0.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>newarr</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Newobj\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Newobj</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new object or a new instance of a value type, pushing an object reference (type <code>O</code>) onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Newobj;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>73 &lt; <code>T</code> &gt;</td>\n<td>newobj <code>ctor</code></td>\n<td>Allocates an uninitialized object or value type and calls the constructor method <code>ctor</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>Arguments <code>arg1</code> through <code>argn</code> are pushed on the stack in sequence.  </p>\n</li>\n<li><p>Arguments <code>argn</code> through <code>arg1</code> are popped from the stack and passed to <code>ctor</code> for object creation.  </p>\n</li>\n<li><p>A reference to the new object is pushed onto the stack.  </p>\n<p>The <code>newobj</code> instruction creates a new object or a new instance of a value type. <code>Ctor</code> is a metadata token (a <code>methodref</code> or <code>methoddef</code> that must be marked as a constructor) that indicates the name, class and signature of the constructor to call.  </p>\n<p>The <code>newobj</code> instruction allocates a new instance of the class associated with <code>ctor</code> and initializes all the fields in the new instance to 0 (of the proper type) or null references as appropriate. It then calls the constructor <code>ctor</code> with the given arguments along with the newly created instance. After the constructor has been called, the now initialized object reference (type <code>O</code>) is pushed on the stack.  </p>\n<p>From the constructor&#39;s point of view, the uninitialized object is argument 0 and the other arguments passed to newobj follow in order.  </p>\n<p>All zero-based, one-dimensional arrays are created using <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Newarr\" data-linktype=\"relative-path\">Newarr</a>, not <code>newobj</code>. On the other hand, all other arrays (more than one dimension, or one-dimensional but not zero-based) are created using <code>newobj</code>.  </p>\n<p>Value types are not usually created using <code>newobj</code>. They are usually allocated either as arguments or local variables, using <code>newarr</code> (for zero-based, one-dimensional arrays), or as fields of objects. Once allocated, they are initialized using <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Initobj\" data-linktype=\"relative-path\">Initobj</a>. However, the <code>newobj</code> instruction can be used to create a new instance of a value type on the stack, that can then be passed as an argument, stored in a local, and so on.  </p>\n<p><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a> is thrown if there is insufficient memory to satisfy the request.  </p>\n<p><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a> is thrown if a constructor method <code>ctor</code> with the indicated name, class and signature could not be found. This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>newobj</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, ConstructorInfo)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Nop\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Nop</div>        \r\n          </div>\r\n    \r\n            <p>Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Nop;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>00</td>\n<td>nop</td>\n<td>Performs an operation without behavior.</td>\n</tr>\n</tbody>\n</table>\n<p> There is no stack transitional behavior defined for this instruction.  </p>\n<p> The <code>nop</code> operation does nothing. It is intended to fill in space if opcodes are patched.  </p>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>nop</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Not\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Not</div>        \r\n          </div>\r\n    \r\n            <p>Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Not;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>66</td>\n<td>not</td>\n<td>Computes the bitwise complement of a value.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value</code> is popped from the stack and its bitwise complement computed.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>The <code>not</code> instruction computes the bitwise complement of an integer value and pushes the result onto the stack. The return type is the same as the operand type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>not</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Or\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Or</div>        \r\n          </div>\r\n    \r\n            <p>Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Or;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>60</td>\n<td>or</td>\n<td>Computes the bitwise OR of two integer values, returns an integer.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack and their bitwise OR computed.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>The <code>or</code> instruction computes the bitwise OR of two values atop the stack, pushing the result onto the stack.  </p>\n<p><code>Or</code> is an integer-specific operation.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>or</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Pop\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pop</div>        \r\n          </div>\r\n    \r\n            <p>Removes the value currently on top of the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Pop;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>26</td>\n<td>pop</td>\n<td>Pops the top value from the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The top value is popped from the stack.  </p>\n<p>The <code>pop</code> instruction removes the top element from the stack.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>pop</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Prefix1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix1</div>        \r\n          </div>\r\n    \r\n            <p>This is a reserved instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Prefix1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Prefix2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix2</div>        \r\n          </div>\r\n    \r\n            <p>This is a reserved instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Prefix2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Prefix3\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix3</div>        \r\n          </div>\r\n    \r\n            <p>This is a reserved instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Prefix3;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Prefix4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix4</div>        \r\n          </div>\r\n    \r\n            <p>This is a reserved instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Prefix4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Prefix5\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix5</div>        \r\n          </div>\r\n    \r\n            <p>This is a reserved instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Prefix5;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Prefix6\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix6</div>        \r\n          </div>\r\n    \r\n            <p>This is a reserved instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Prefix6;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Prefix7\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefix7</div>        \r\n          </div>\r\n    \r\n            <p>This is a reserved instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Prefix7;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Prefixref\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Prefixref</div>        \r\n          </div>\r\n    \r\n            <p>This is a reserved instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Prefixref;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Readonly\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Readonly</div>        \r\n          </div>\r\n    \r\n            <p>Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Readonly;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 1E</td>\n<td>readonly.</td>\n<td>Specify that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer with restricted mutability.</td>\n</tr>\n</tbody>\n</table>\n<p> This prefix can only appear immediately preceding the <code>ldelema</code> instruction and calls to the special <code>Address</code> method on arrays. Its effect on the subsequent operation is twofold:  </p>\n<ol>\n<li><p>At run time, no type check operation is performed. Note that there is normally an implicit type check for the <code>ldelema</code> and <code>stelem</code> instructions when used on reference type arrays. There is never a run-time type check for value classes, so <code>readonly</code> is a no-op in that case.  </p>\n</li>\n<li><p>The verifier treats the result of the address-of operation as a managed pointer with restricted mutability.  </p>\n<p>The pointer is said to have restricted mutability because the defining type controls whether the value can be mutated. For value classes that expose no public fields or methods that update the value in place, the pointer is read-only (hence the name of the prefix). In particular, the classes representing primitive types (for example, System.Int32) do not expose mutators and thus are read-only.  </p>\n<p>A managed pointer restricted in this fashion can be used only in the following ways:  </p>\n</li>\n</ol>\n<ul>\n<li><p>As the <code>object</code> parameter for the <code>ldfld</code>, <code>ldflda</code>, <code>stfld</code>, <code>call</code>, or<code>constrained callvirt</code> instructions.  </p>\n</li>\n<li><p>As the <code>pointer</code> parameter to the <code>ldobj</code> instruction or to one of the <code>ldind</code> instructions.  </p>\n</li>\n<li><p>As the <code>source</code> parameter to the <code>cpobj</code> instruction.  </p>\n<p>All other operations disallowed, including the <code>stobj</code>, <code>initobj</code>, or <code>mkrefany</code> operations, or any of the <code>stind</code> instructions.  </p>\n<p>The purpose of the <code>readonly</code> prefix is to avoid a type check when fetching an element from an array in generic code. For example, the expression <code>arr[i].m()</code>, where the element type of the array <code>arr</code> is a generic type that has been constrained to have an interface with method <code>m</code>, might compile to the following MSIL.  </p>\n</li>\n</ul>\n<pre><code>ldloc arr  \nldloc i  \nreadonly.  \nldelema !0    // Loads the pointer to the object.  \n…             // Load the arguments to the call.  \nconstrained. !0  \ncallvirt m  \n</code></pre><p> Without the <code>readonly</code> prefix, the <code>ldelema</code> instruction would perform a type check in the case where !0 was a reference type. Not only is this type check inefficient, but it is semantically incorrect. The type check for <code>ldelema</code> is an exact match, which is too strong. If the array held subclasses of type !0, the code above would fail the type check.  </p>\n<p> The address of the array element is fetched, instead of the element itself, in order to have a handle for <code>arr[i]</code> that works for both value types and reference types, and thus can be passed to the <code>constrained callvirt</code> instruction.  </p>\n<p> In general it would be unsafe to skip the run-time check if the array held elements of a reference type. To be safe, it is necessary to ensure that no modifications to the array are made through this pointer. The verifier rules ensure this. The restricted managed pointer can be passed as the object of instance method calls, so it is not strictly speaking read-only for value types, but there is no type safety problem for value types.  </p>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>readonly</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Refanytype\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Refanytype</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type token embedded in a typed reference.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Refanytype;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 1D</td>\n<td>refanytype</td>\n<td>Pushes the type token stored in a typed reference.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value type reference is pushed onto the stack.  </p>\n</li>\n<li><p>The typed reference is popped from the stack and its corresponding type token retrieved.  </p>\n</li>\n<li><p>The type token is pushed onto the stack.  </p>\n<p>A typed reference contains a type token and an address to an object instance.  </p>\n<p>The <code>refanytype</code> instruction retrieves the type token embedded in the typed reference. See the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Mkrefany\" data-linktype=\"relative-path\">Mkrefany</a> instruction for information on creating typed references.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>refanytype</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Refanyval\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Refanyval</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the address (type <code>&amp;</code>) embedded in a typed reference.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Refanyval;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C2 &lt; <code>T</code> &gt;</td>\n<td>refanyval <code>type</code></td>\n<td>Pushes the address stored in a typed reference.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value type reference is pushed onto the stack.  </p>\n</li>\n<li><p>The typed reference is popped from the stack and the corresponding address retrieved.  </p>\n</li>\n<li><p>The address is pushed onto the stack.  </p>\n<p>A typed reference contains a type token and an address to an object instance.  </p>\n<p>The <code>refanyval</code> instruction retrieves the address embedded in the a typed reference. The type embedded in the typed reference supplied on the stack must match the type specified by <code>type</code> (a metadata token, either a <code>typedef</code> or a <code>typeref</code>). See the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Mkrefany\" data-linktype=\"relative-path\">Mkrefany</a> instruction for related content.  </p>\n<p><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown if <code>type</code> is not identical to the type stored in the type reference (in this case, <code>type</code> is the class supplied to the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Mkrefany\" data-linktype=\"relative-path\">Mkrefany</a> instruction that constructed said typed reference).  </p>\n<p><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown if <code>type</code> cannot be found.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>refanyval</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Rem\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rem</div>        \r\n          </div>\r\n    \r\n            <p>Divides two values and pushes the remainder onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Rem;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5D</td>\n<td>rem</td>\n<td>Pushes the remainder of dividing <code>value1</code> by <code>value2</code> onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> ReplaceThisText  </p>\n</div>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A <code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack and the remainder of <code>value1</code> <code>div</code> <code>value2</code> computed.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p><code>result</code> = <code>value1</code> <code>rem</code> <code>value2</code> satisfies the following conditions:  </p>\n<p><code>result</code> = <code>value1</code> - <code>value2</code> <code>×</code> (<code>value1</code> <code>div</code> <code>value2</code>), and:  </p>\n<p>0 = &#124; <code>result</code> &#124; &lt; &#124; <code>value2</code> &#124;, sign(<code>result</code>) = sign(<code>value1</code>), where <code>div</code> is the division instruction that truncates towards zero.  </p>\n<p>If <code>value2</code> is zero or <code>value1</code> is infinity the result is NaN. If <code>value2</code> is infinity, the result is <code>value1</code> (negated for <code>-infinity</code>).  </p>\n<p>Integral operations throw <a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a> if <code>value2</code> is zero.  </p>\n<p>Note that on the Intel-based platforms an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown when computing (minint <code>rem</code> -1).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>rem</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Rem_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rem_Un</div>        \r\n          </div>\r\n    \r\n            <p>Divides two unsigned values and pushes the remainder onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Rem_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5E</td>\n<td>rem.un</td>\n<td>Pushes the remainder of dividing unsigned <code>value1</code> by unsigned <code>value2</code> onto the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack and the remainder of <code>value1</code> <code>div</code> <code>value2</code> computed.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p><code>result</code> = <code>value1</code> <code>rem.un</code> <code>value2</code> satisfies the following conditions:  </p>\n<p><code>result</code> = <code>value1</code> - <code>value2</code> x(<code>value1</code> <code>div.un</code> <code>value2</code>), and:  </p>\n<p>0 = <code>result</code> &lt; <code>value2</code>, where <code>div.un</code> is the unsigned division instruction.  </p>\n<p>The <code>rem.un</code> instruction computes <code>result</code> and pushes it on the stack. <code>Rem.un</code> treats its arguments as unsigned integers, while <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Rem\" data-linktype=\"relative-path\">Rem</a> treats them as signed integers.  </p>\n<p><code>Rem.un</code> is unspecified for floating-point numbers.  </p>\n<p>Integral operations throw <a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a> if <code>value2</code> is zero.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>rem.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Ret\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ret</div>        \r\n          </div>\r\n    \r\n            <p>Returns from the current method, pushing a return value (if present) from the callee&#39;s evaluation stack onto the caller&#39;s evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Ret;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2A</td>\n<td>ret</td>\n<td>Returns from method, possibly returning a value.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The return value is popped from the callee evaluation stack.  </p>\n</li>\n<li><p>The return value obtained in step 1 is pushed onto the caller evaluation stack.  </p>\n<p>If the return value is not present on the callee evaluation stack, no value is returned (no stack transition behaviors for either the callee or caller method).  </p>\n<p>The type of the return value, if any, of the current method determines the type of value to be fetched from the top of the stack and copied onto the stack of the method that called the current method. The evaluation stack for the current method must be empty except for the value to be returned.  </p>\n<p>The <code>ret</code> instruction cannot be used to transfer control out of a<code>try</code>, <code>filter</code>, <code>catch</code>, or <code>finally</code> block. From within a <code>try</code> or <code>catch</code>, use the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Leave\" data-linktype=\"relative-path\">Leave</a> instruction with a destination of a <code>ret</code> instruction that is outside all enclosing exception blocks. Because the <code>filter</code> and <code>finally</code> blocks are logically part of exception handling and not the method in which their code is embedded, correctly generated Microsoft Intermediate Language (MSIL) instructions do not perform a method return from within a <code>filter</code> or <code>finally</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>ret</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Rethrow\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rethrow</div>        \r\n          </div>\r\n    \r\n            <p>Rethrows the current exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Rethrow;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 1A</td>\n<td>rethrow</td>\n<td>Rethrows the current exception</td>\n</tr>\n</tbody>\n</table>\n<p> No stack transition behavior is defined for this instruction.  </p>\n<p> The <code>rethrow</code> instruction is only permitted within the body of a <code>catch</code> handler. It throws the same exception that was caught by this handler.  </p>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>rethrow</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Shl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Shl</div>        \r\n          </div>\r\n    \r\n            <p>Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Shl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>62</td>\n<td>shl</td>\n<td>Shifts an integer to the left (shifting in zeros).</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The amount of bits to be shifted is pushed onto the stack.  </p>\n</li>\n<li><p>The number of bits to be shifted and the value are popped from the stack; the value is shifted left by the specified number of bits.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>The <code>shl</code> instruction shifts the value (type <code>int32</code>, <code>int64</code> or <code>native int</code>) left by the specified number of bits. The number of bits is a value of type <code>int32</code> or <code>native int</code>. The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.  </p>\n<p><code>Shl</code> inserts a zero bit in the lowest position on each shift.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>shl</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Shr\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Shr</div>        \r\n          </div>\r\n    \r\n            <p>Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Shr;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>63</td>\n<td>shr</td>\n<td>Shifts an integer to the right (shifting in sign).</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The amount of bits to be shifted is pushed onto the stack.  </p>\n</li>\n<li><p>The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>The <code>shr.un</code> instruction shifts the value (type <code>int32</code>, <code>int64</code> or <code>native int</code>) right by the specified number of bits. The number of bits is a value of type <code>int32</code> or <code>native int</code>. The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.  </p>\n<p><code>Shr</code> replicates the high order bit on each shift, preserving the sign of the original value in the <code>result</code>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>shr</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Shr_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Shr_Un</div>        \r\n          </div>\r\n    \r\n            <p>Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Shr_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>64</td>\n<td>shr.un</td>\n<td>Shifts an integer to the right (shifting in zeroes).</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The amount of bits to be shifted is pushed onto the stack.  </p>\n</li>\n<li><p>The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>The <code>shr.un</code> instruction shifts the value (type <code>int32</code>, <code>int64</code> or <code>native int</code>) right by the specified number of bits. The number of bits is a value of type <code>int32</code>, <code>int64</code> or <code>native int</code>. The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.  </p>\n<p><code>Shr.un</code> inserts a zero bit in the highest position on each shift.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>shr.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Sizeof\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sizeof</div>        \r\n          </div>\r\n    \r\n            <p>Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Sizeof;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 1C &lt; <code>T</code> &gt;</td>\n<td>sizeof <code>valType</code></td>\n<td>Push the size, in bytes, of a value type as an <code>unsigned int32</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The size (in bytes) of the supplied value type (<code>valType</code>) is pushed onto the stack.  </p>\n<p><code>valType</code> must be a metadata token (a <code>typeref</code> or <code>typedef</code>) that specifies a value type, reference type, or generic type parameter.  </p>\n<p>For a reference type, the size returned is the size of a reference value of the corresponding type (4 bytes on 32-bit systems), not the size of the data stored in objects referred to by the reference value. A generic type parameter can be used only in the body of the type or method that defines it. When that type or method is instantiated, the generic type parameter is replaced by a value type or reference type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>sizeof</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Starg\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Starg</div>        \r\n          </div>\r\n    \r\n            <p>Stores the value on top of the evaluation stack in the argument slot at a specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Starg;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 0B &lt; <code>unsigned int16</code> &gt;</td>\n<td>starg <code>num</code></td>\n<td>Pops the top value from the stack and stores it in argument slot <code>num</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value currently on top of the stack is popped and placed in argument slot <code>num</code>.  </p>\n<p>The <code>starg</code> instruction pops a value from the stack and places it in argument slot <code>num</code>. The type of the value must match the type of the argument, as specified in the current method&#39;s signature.  </p>\n<p>For procedures that take a variable argument list, the <code>starg</code> instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.  </p>\n<p>Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument. Floating-point values are rounded from their native size (type <code>F</code>) to the size associated with the argument.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>starg</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, short)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Starg_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Starg_S</div>        \r\n          </div>\r\n    \r\n            <p>Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Starg_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10 &lt; <code>unsigned int8</code> &gt;</td>\n<td>starg.s <code>num</code></td>\n<td>Pops the top value from the stack and stores it in argument slot <code>num</code>, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>The value currently on top of the stack is popped and placed in argument slot <code>num</code>.  </p>\n<p>The <code>starg.s</code> instruction pops a value from the stack and places it in argument slot <code>num</code>. The type of the value must match the type of the argument, as specified in the current method&#39;s signature.  </p>\n<p>The <code>starg.s</code> instruction provides an efficient encoding for use with the first 256 arguments.  </p>\n<p>For procedures that take a variable argument list, the <code>starg.s</code> instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.  </p>\n<p>Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument. Floating-point values are rounded from their native size (type <code>F</code>) to the size associated with the argument.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a>method overload can use the <code>starg.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, byte)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stelem\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stelem</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stelem;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A4 &lt; <code>T</code> &gt;</td>\n<td>stelem <code>typeTok</code></td>\n<td>Replaces the array element at the supplied index with a value of type <code>typeTok</code> on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference to an array, <code>array</code>, is pushed onto the stack.  </p>\n</li>\n<li><p>An index value, <code>index</code>, to an element in <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>A value of the type specified in the instruction is pushed onto the stack.  </p>\n</li>\n<li><p>The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.  </p>\n<p>The <code>stelem</code> instruction replaces the value of the element at the supplied zero-based index in the one-dimensional array <code>array</code> with the value. The value has the type specified by the token <code>typeTok</code> in the instruction.  </p>\n<p>Arrays are objects, and hence represented by a value of type <code>O</code>. The index is type <code>native int</code>.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stelem</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stelem_I\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stelem_I</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the array element at a given index with the <code>native int</code> value on the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stelem_I;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9B</td>\n<td>stelem.i</td>\n<td>Replaces an array element at the supplied index with the <code>native int</code> value on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference to an array, <code>array</code>, is pushed onto the stack.  </p>\n</li>\n<li><p>A valid index to an element in <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.  </p>\n<p>The <code>stelem.i</code> instruction replaces the value of the element <code>index</code> in the one-dimensional array <code>array</code> with the <code>native int</code> value pushed onto the stack.  </p>\n<p>Arrays are objects and hence represented by a value of type <code>O</code>. The index is type <code>native int</code>.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stelem.i</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stelem_I1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stelem_I1</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the array element at a given index with the <code>int8</code> value on the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stelem_I1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9C</td>\n<td>stelem.i1</td>\n<td>Replaces an array element at the supplied index with the <code>int8</code> value on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference to an array, <code>array</code>, is pushed onto the stack.  </p>\n</li>\n<li><p>A valid index to an element in <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.  </p>\n<p>The <code>stelem.i1</code> instruction replaces the value of the element <code>index</code> in the one-dimensional array <code>array</code> with the <code>int8</code> value pushed onto the stack.  </p>\n<p>Arrays are objects and hence represented by a value of type <code>O</code>. The index is type <code>native int</code>.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stelem.i1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stelem_I2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stelem_I2</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the array element at a given index with the <code>int16</code> value on the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stelem_I2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9D</td>\n<td>stelem.i2</td>\n<td>Replaces an array element at the supplied index with the <code>int16</code> value on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference to an array, <code>array</code>, is pushed onto the stack.  </p>\n</li>\n<li><p>A valid index to an element in <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.  </p>\n<p>The <code>stelem.i2</code> instruction replaces the value of the element <code>index</code> in the one-dimensional array <code>array</code> with the <code>int16</code> value pushed onto the stack.  </p>\n<p>Arrays are objects and hence represented by a value of type <code>O</code>. The index is type <code>native int</code>.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stelem.i2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stelem_I4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stelem_I4</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the array element at a given index with the <code>int32</code> value on the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stelem_I4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9E</td>\n<td>stelem.i4</td>\n<td>Replaces an array element at the supplied index with the <code>int32</code> value on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference to an array, <code>array</code>, is pushed onto the stack.  </p>\n</li>\n<li><p>A valid index to an element in <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.  </p>\n<p>The <code>stelem.i4</code> instruction replaces the value of the element <code>index</code> in the one-dimensional array <code>array</code> with the <code>int32</code> value pushed onto the stack.  </p>\n<p>Arrays are objects and hence represented by a value of type <code>O</code>. The index is type <code>native int</code>.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stelem.i4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stelem_I8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stelem_I8</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the array element at a given index with the <code>int64</code> value on the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stelem_I8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>9F</td>\n<td>stelem.i8</td>\n<td>Replaces an array element at the supplied index with the <code>int64</code> value on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference to an array, <code>array</code>, is pushed onto the stack.  </p>\n</li>\n<li><p>A valid index to an element in <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.  </p>\n<p>The <code>stelem.i8</code> instruction replaces the value of the element <code>index</code> in the one-dimensional array <code>array</code> with the <code>int64</code> value pushed onto the stack.  </p>\n<p>Arrays are objects and hence represented by a value of type <code>O</code>. The index is type <code>native int</code>.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stelem.i8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stelem_R4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stelem_R4</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the array element at a given index with the <code>float32</code> value on the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stelem_R4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A0</td>\n<td>stelem.r4</td>\n<td>Replaces an array element at the supplied index with the <code>float32</code> value on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference to an array, <code>array</code>, is pushed onto the stack.  </p>\n</li>\n<li><p>A valid index to an element in <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.  </p>\n<p>The <code>stelem.r4</code> instruction replaces the value of the element <code>index</code> in the one-dimensional array <code>array</code> with the <code>float32</code> value pushed onto the stack.  </p>\n<p>Arrays are objects and hence represented by a value of type <code>O</code>. The index is type <code>native int</code>.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stelem.r4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stelem_R8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stelem_R8</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the array element at a given index with the <code>float64</code> value on the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stelem_R8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A1</td>\n<td>stelem.r8</td>\n<td>Replaces an array element at the supplied index with the <code>float64</code> value on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference to an array, <code>array</code>, is pushed onto the stack.  </p>\n</li>\n<li><p>A valid index to an element in <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.  </p>\n<p>The <code>stelem.r8</code> instruction replaces the value of the element <code>index</code> in the one-dimensional array <code>array</code> with the <code>float64</code> value pushed onto the stack.  </p>\n<p>Arrays are objects and hence represented by a value of type <code>O</code>. The index is type <code>native int</code>.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stelem.r8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stelem_Ref\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stelem_Ref</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the array element at a given index with the object ref value (type <code>O</code>) on the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stelem_Ref;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A2</td>\n<td>stelem.ref</td>\n<td>Replaces an array element at the supplied index with the <code>ref</code> value (type <code>O</code>) on the stack.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference to an array, <code>array</code>, is pushed onto the stack.  </p>\n</li>\n<li><p>A valid index to an element in <code>array</code> is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.  </p>\n<p>The <code>stelem.ref</code> instruction replaces the value of the element at the supplied index in the one-dimensional array <code>array</code> with the <code>ref</code> (type <code>O</code>) value pushed onto the stack.  </p>\n<p>Arrays are objects and hence represented by a value of type <code>O</code>. The index is type <code>native int</code>.  </p>\n<p>Note that <code>stelem.ref</code> implicitly casts the supplied value to the element type of <code>array</code> before assigning the value to the array element. This cast can fail, even for verified code. Thus the <code>stelem.ref</code> instruction can throw <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>. For one-dimensional arrays that aren&#39;t zero-based and for multidimensional arrays, the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> class provides a <a class=\"xref\" href=\"system.array#System_Array_SetValue_\" data-linktype=\"relative-path\">SetValue</a> method.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>array</code> is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> is thrown if <code>index</code> is negative, or larger than the bound of <code>array</code>.  </p>\n<p><a class=\"xref\" href=\"system.arraytypemismatchexception\" data-linktype=\"relative-path\">ArrayTypeMismatchException</a> is thrown if <code>array</code> does not hold elements of the required type.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stelem.ref</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stfld\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stfld</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the value stored in the field of an object reference or pointer with a new value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stfld;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7D &lt; <code>T</code> &gt;</td>\n<td>stfld <code>field</code></td>\n<td>Replaces the value of <code>field</code> of the object with a new value.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference or pointer is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value and the object reference/pointer are popped from the stack; the value of <code>field</code> in the object is replaced with the supplied value.  </p>\n<p>The <code>stfld</code> instruction replaces the value of a field of an object (type <code>O</code>) or via a pointer (type <code>native int</code>, <code>&amp;</code>, or <code>*</code>) with a given value. <code>Field</code> is a metadata token that refers to a field member reference. The <code>stfld</code> instruction can have a prefix of either or both of <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a>.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if the object reference or pointer is a null reference and the field isn&#39;t static.  </p>\n<p><a class=\"xref\" href=\"system.missingfieldexception\" data-linktype=\"relative-path\">MissingFieldException</a> is thrown if <code>field</code> is not found in the metadata. This is typically checked when the Microsoft Intermediate Language (MSIL) instruction is converted to native code, not at runtime.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stfld</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, FieldInfo)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stind_I\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stind_I</div>        \r\n          </div>\r\n    \r\n            <p>Stores a value of type <code>native int</code> at a supplied address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stind_I;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DF</td>\n<td>stind.i</td>\n<td>Stores a <code>native int</code> value at a given address.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value and the address are popped from the stack; the value is stored at the address.  </p>\n<p>The <code>stind.i</code> instruction stores a <code>native int</code> value at the supplied address (type <code>native int</code>, <code>*</code>, or <code>&amp;</code>).  </p>\n<p>Type safe operation requires that the <code>stind.i</code> instruction be used in a manner consistent with the type of the pointer. The operation of the <code>stind.i</code> instruction can be altered by an immediately preceding <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>addr</code> is not naturally aligned for the argument type implied by the instruction suffix.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stind.i</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stind_I1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stind_I1</div>        \r\n          </div>\r\n    \r\n            <p>Stores a value of type <code>int8</code> at a supplied address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stind_I1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>52</td>\n<td>stind.i1</td>\n<td>Stores an <code>int8</code> value at a given address.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value and the address are popped from the stack; the value is stored at the address.  </p>\n<p>The <code>stind.i1</code> instruction stores an <code>int8</code> value at the supplied address (type <code>native int</code>, <code>*</code>, or <code>&amp;</code>).  </p>\n<p>Type safe operation requires that the <code>stind.i1</code> instruction be used in a manner consistent with the type of the pointer. The operation of the <code>stind.i1</code> instruction can be altered by an immediately preceding <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>addr</code> is not naturally aligned for the argument type implied by the instruction suffix.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stind.i1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stind_I2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stind_I2</div>        \r\n          </div>\r\n    \r\n            <p>Stores a value of type <code>int16</code> at a supplied address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stind_I2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>53</td>\n<td>stind.i2</td>\n<td>Stores an <code>int16</code> value at a given address.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value and the address are popped from the stack; the value is stored at the address.  </p>\n<p>The <code>stind.i2</code> instruction stores an <code>int16</code> value at the supplied address (type <code>native int</code>, <code>*</code>, or <code>&amp;</code>).  </p>\n<p>Type safe operation requires that the <code>stind.2i</code> instruction be used in a manner consistent with the type of the pointer. The operation of the <code>stind.i2</code> instruction can be altered by an immediately preceding <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a>prefix instruction.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>addr</code> is not naturally aligned for the argument type implied by the instruction suffix.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stind.i2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stind_I4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stind_I4</div>        \r\n          </div>\r\n    \r\n            <p>Stores a value of type <code>int32</code> at a supplied address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stind_I4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>54</td>\n<td>stind.i4</td>\n<td>Stores an <code>int32</code> value at a given address.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value and the address are popped from the stack; the value is stored at the address.  </p>\n<p>The <code>stind.i4</code> instruction stores an <code>int32</code> value at the supplied address (type <code>native int</code>, <code>*</code>, or <code>&amp;</code>).  </p>\n<p>Type safe operation requires that the <code>stind.i4</code> instruction be used in a manner consistent with the type of the pointer. The operation of the <code>stind.i4</code> instruction can be altered by an immediately preceding <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>addr</code> is not naturally aligned for the argument type implied by the instruction suffix.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stind.i4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stind_I8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stind_I8</div>        \r\n          </div>\r\n    \r\n            <p>Stores a value of type <code>int64</code> at a supplied address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stind_I8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>55</td>\n<td>stind.i8</td>\n<td>Stores an <code>int64</code> value at a given address.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value and the address are popped from the stack; the value is stored at the address.  </p>\n<p>The <code>stind.i8</code> instruction stores an <code>int64</code> value at the supplied address (type <code>native int</code>, <code>*</code>, or <code>&amp;</code>).  </p>\n<p>Type safe operation requires that the <code>stind.i8</code> instruction be used in a manner consistent with the type of the pointer. The operation of the <code>stind.i</code> instruction can be altered by an immediately preceding <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>addr</code> is not naturally aligned for the argument type implied by the instruction suffix.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stind.i8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stind_R4\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stind_R4</div>        \r\n          </div>\r\n    \r\n            <p>Stores a value of type <code>float32</code> at a supplied address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stind_R4;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>56</td>\n<td>stind.r4</td>\n<td>Stores a <code>float32</code> value at a given address.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value and the address are popped from the stack; the value is stored at the address.  </p>\n<p>The <code>stind.r4</code> instruction stores a <code>float32</code> value at the supplied address (type <code>native int</code>, <code>*</code>, or <code>&amp;</code>).  </p>\n<p>Type safe operation requires that the <code>stind.r4</code> instruction be used in a manner consistent with the type of the pointer. The operation of the <code>stind.r4</code> instruction can be altered by an immediately preceding <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>addr</code> is not naturally aligned for the argument type implied by the instruction suffix.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stind.r4</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stind_R8\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stind_R8</div>        \r\n          </div>\r\n    \r\n            <p>Stores a value of type <code>float64</code> at a supplied address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stind_R8;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>57</td>\n<td>stind.r8</td>\n<td>Stores a <code>float64</code> value at a given address.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value and the address are popped from the stack; the value is stored at the address.  </p>\n<p>The <code>stind.r8</code> instruction stores a <code>float64</code> value at the supplied address (type <code>native int</code>, <code>*</code>, or <code>&amp;</code>).  </p>\n<p>Type safe operation requires that the <code>stind.r8</code> instruction be used in a manner consistent with the type of the pointer. The operation of the <code>stind.r8</code> instruction can be altered by an immediately preceding <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>addr</code> is not naturally aligned for the argument type implied by the instruction suffix.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stind.r8</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stind_Ref\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stind_Ref</div>        \r\n          </div>\r\n    \r\n            <p>Stores a object reference value at a supplied address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stind_Ref;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>51</td>\n<td>stind.ref</td>\n<td>Stores an object reference (type <code>O</code>) value at a given address.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value and the address are popped from the stack; the value is stored at the address.  </p>\n<p>The <code>stind.ref</code> instruction stores an object reference value at the supplied address (type <code>native int</code>, <code>*</code>, or <code>&amp;</code>).  </p>\n<p>Type safe operation requires that the <code>stind.ref</code> instruction be used in a manner consistent with the type of the pointer. The operation of the <code>stind.ref</code> instruction can be altered by an immediately preceding <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>addr</code> is not naturally aligned for the argument type implied by the instruction suffix.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stind.ref</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stloc\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stloc</div>        \r\n          </div>\r\n    \r\n            <p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stloc;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 0E &lt; <code>unsigned int16</code> &gt;</td>\n<td>stloc <code>index</code></td>\n<td>Pops a value from the stack and stores it in local variable <code>index</code>.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value is popped off of the stack and placed in local variable <code>index</code>.  </p>\n<p>The <code>stloc</code> instruction pops the top value off the evaluation stack and moves it into local variable number <code>index</code>, where local variables are numbered 0 onwards. The type of the value must match the type of the local variable as specified in the current method&#39;s local signature.  </p>\n<p>Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable. Floating-point values are rounded from their native size (type <code>F</code>) to the size associated with the argument.  </p>\n<p>Correct Microsoft Intermediate Language (MSIL) instructions require that <code>index</code> be a valid local index. For the <code>stloc</code> instruction, <code>index</code> must lie in the range 0 to 65534 inclusive (specifically, 65535 is not valid). The reason for excluding 65535 is pragmatic: likely implementations will use a 2-byte integer to track both a local&#39;s index, as well as the total number of locals for a given method. If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overloads can use the <code>stloc</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li><p>ILGenerator.Emit(OpCode, LocalBuilder)  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode, short)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stloc_0\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stloc_0</div>        \r\n          </div>\r\n    \r\n            <p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stloc_0;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0A</td>\n<td>stloc.0</td>\n<td>Pops a value from the stack into local variable 0.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value is popped off of the stack and placed in the local variable indexed by 0.  </p>\n<p>The <code>stloc.0</code> instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 0. The type of the value must match the type of the local variable as specified in the current method&#39;s local signature.  </p>\n<p><code>stloc.0</code> is an especially efficient encoding for storing values in local variable 0.  </p>\n<p>Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable. Floating-point values are rounded from their native size (type <code>F</code>) to the size associated with the argument.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stloc.0</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stloc_1\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stloc_1</div>        \r\n          </div>\r\n    \r\n            <p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stloc_1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0B</td>\n<td>stloc.1</td>\n<td>Pops a value from the stack into local variable 1.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value is popped off of the stack and placed in the local variable indexed by 1.  </p>\n<p>The <code>stloc.1</code> instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 1. The type of the value must match the type of the local variable as specified in the current method&#39;s local signature.  </p>\n<p><code>stloc.1</code> is an especially efficient encoding for storing values in local variable 1.  </p>\n<p>Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable. Floating-point values are rounded from their native size (type <code>F</code>) to the size associated with the argument.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stloc.1</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stloc_2\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stloc_2</div>        \r\n          </div>\r\n    \r\n            <p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stloc_2;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0C</td>\n<td>stloc.2</td>\n<td>Pops a value from the stack into local variable 2</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value is popped off of the stack and placed in the local variable indexed by 2.  </p>\n<p>The <code>stloc.2</code> instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 2. The type of the value must match the type of the local variable as specified in the current method&#39;s local signature.  </p>\n<p><code>stloc.2</code> is an especially efficient encoding for storing values in local variable 2.  </p>\n<p>Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable. Floating-point values are rounded from their native size (type <code>F</code>) to the size associated with the argument.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stloc.2</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stloc_3\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stloc_3</div>        \r\n          </div>\r\n    \r\n            <p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stloc_3;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0D</td>\n<td>stloc.3</td>\n<td>Pops a value from the stack into local variable 3</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value is popped off of the stack and placed in the local variable indexed by 3.  </p>\n<p>The <code>stloc.3</code> instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 3. The type of the value must match the type of the local variable as specified in the current method&#39;s local signature.  </p>\n<p><code>stloc.3</code> is an especially efficient encoding for storing values in local variable 3.  </p>\n<p>Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable. Floating-point values are rounded from their native size (type <code>F</code>) to the size associated with the argument.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stloc.3</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stloc_S\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stloc_S</div>        \r\n          </div>\r\n    \r\n            <p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <code>index</code> (short form).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stloc_S;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>13 &lt; <code>unsigned int8</code> &gt;</td>\n<td>stloc.s <code>index</code></td>\n<td>Pops a value from the stack and stores it in local variable <code>index</code>, short form.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value is popped off of the stack and placed in local variable <code>index</code>.  </p>\n<p>The <code>stloc.s</code> instruction pops the top value off the evaluation stack and moves it into local variable number <code>index</code>, where local variables are numbered 0 onwards. The type of the value must match the type of the local variable as specified in the current method&#39;s local signature.  </p>\n<p>The <code>stloc.s</code> instruction provides an efficient encoding for local variables 0 through 255.  </p>\n<p>Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable. Floating-point values are rounded from their native size (type <code>F</code>) to the size associated with the argument.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overloads can use the <code>stloc.s</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li><p>ILGenerator.Emit(OpCode, LocalBuilder)  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode, byte)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stobj\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stobj</div>        \r\n          </div>\r\n    \r\n            <p>Copies a value of a specified type from the evaluation stack into a supplied memory address.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stobj;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>81 &lt; <code>T</code> &gt;</td>\n<td>stobj <code>class</code></td>\n<td>Stores a value of type <code>class</code> from the stack into memory.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n</li>\n<li><p>A value type object of type <code>class</code> is pushed onto the stack.  </p>\n</li>\n<li><p>The object and the address are popped from the stack; the value type object is stored at the address.  </p>\n<p>The <code>stobj</code> instruction copies the value type object into the address specified by the address (a pointer of type <code>native int</code>, <code>*</code>, or <code>&amp;</code>). The number of bytes copied depends on the size of the class represented by <code>class</code>, a metadata token representing a value type.  </p>\n<p>The operation of the <code>stobj</code> instruction can be altered by an immediately preceding <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> prefix instruction.  </p>\n<p><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown if class cannot be found. This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stobj</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Stsfld\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stsfld</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the value of a static field with a value from the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Stsfld;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>80 &lt; <code>T</code> &gt;</td>\n<td>stsfld <code>field</code></td>\n<td>Replaces the value in <code>field</code> with a supplied value.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>A value is popped from the stack and stored in <code>field</code>.  </p>\n<p>The <code>stsfld</code> instruction replaces the value of a static field with a value from the stack. <code>field</code> is a metadata token that must refer to a static field member.  </p>\n<p>The <code>stsfld</code> instruction may be prefixed by <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a>.  </p>\n<p><a class=\"xref\" href=\"system.missingfieldexception\" data-linktype=\"relative-path\">MissingFieldException</a> is thrown if field is not found in the metadata. This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>stsfld</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, FieldInfo)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Sub\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sub</div>        \r\n          </div>\r\n    \r\n            <p>Subtracts one value from another and pushes the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Sub;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>59</td>\n<td>sub</td>\n<td>Subtracts one value from another, returning a new numeric value.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>value2</code> is subtracted from <code>value1</code>.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p>Overflow is not detected for integer operations (for proper overflow handling, see <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Sub_Ovf\" data-linktype=\"relative-path\">Sub_Ovf</a>).  </p>\n<p>Integer subtraction wraps, rather than saturates. For example: assuming 8-bit integers, where <code>value1</code> is set to 0 and <code>value2</code> is set to 1, the &quot;wrapped&quot; result will be 255.  </p>\n<p>Floating-point overflow returns <code>+inf</code> (<code>PositiveInfinity</code>) or <code>-inf</code> (<code>NegativeInfinity</code>).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>sub</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Sub_Ovf\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sub_Ovf</div>        \r\n          </div>\r\n    \r\n            <p>Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Sub_Ovf;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DA</td>\n<td>sub.ovf</td>\n<td>Subtracts one integer value from another with an overflow check.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>value2</code> is subtracted from <code>value1</code> with a check for overflow.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>This operation is performed on signed integers; for floating-point values, use <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Sub\" data-linktype=\"relative-path\">Sub</a>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>sub.ovf</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Sub_Ovf_Un\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Sub_Ovf_Un</div>        \r\n          </div>\r\n    \r\n            <p>Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DB</td>\n<td>sub.ovf.un</td>\n<td>Subtracts one unsigned integer value from another with an overflow check.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack; <code>value2</code> is subtracted from <code>value1</code> with a check for overflow.  </p>\n</li>\n<li><p>The result is pushed onto the stack.  </p>\n<p><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown if the result can not be represented in the result type.  </p>\n<p>This operation is performed on signed integers; for floating-point values, use <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Sub\" data-linktype=\"relative-path\">Sub</a>.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>sub.ovf.un</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Switch\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Switch</div>        \r\n          </div>\r\n    \r\n            <p>Implements a jump table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Switch;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>45 &lt; <code>unsigned int32</code> &gt; &lt; <code>int32</code> &gt;... &lt; <code>int32</code> &gt;</td>\n<td>switch (<code>N</code>, <code>t1</code>, <code>t2</code>... <code>tN</code>)</td>\n<td>Jumps to one of <code>N</code> values.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>A value is pushed onto the stack.  </p>\n</li>\n<li><p>The value is popped off the stack and execution is transferred to the instruction at the offset indexed by the value, where the value is less than <code>N</code>.  </p>\n<p>The <code>switch</code> instruction implements a jump table. The format of the instruction is an <code>unsigned int32</code> representing the number of targets <code>N</code>, followed by <code>N</code> int32 values specifying jump targets. These targets are represented as offsets (positive or negative) from the beginning of the instruction following this <code>switch</code> instruction.  </p>\n<p>The <code>switch</code> instruction pops a value off the stack and compares it, as an unsigned integer, to <code>N</code>. If value is less than <code>N</code>, execution is transferred to the target indexed by value, where targets are numbered from 0 (for example, a value of 0 takes the first target, a value of 1 takes the second target, and so on). If the value is greater than or equal to <code>N</code>, execution continues at the next instruction (fall through).  </p>\n<p>If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.  </p>\n<p>Control transfers into and out of <code>try</code>, <code>catch</code>, <code>filter</code>, and <code>finally</code> blocks cannot be performed by this instruction. (Such transfers are severely restricted and must use the leave instruction instead).  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>switch</code> opcode. The <code>Label[]</code> argument is an array of Labels representing 32-bit offsets.  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Label[])</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of the <code>Switch</code> opcode to generate a jump table using an array of <a class=\"xref\" href=\"system.reflection.emit.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.ILGenerator.Emit Example 2#1\">\nusing System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass DynamicJumpTableDemo\n\n{\n\n   public static Type BuildMyType()\n   {\n\tAppDomain myDomain = Thread.GetDomain();\n\tAssemblyName myAsmName = new AssemblyName();\n\tmyAsmName.Name = &quot;MyDynamicAssembly&quot;;\n\n\tAssemblyBuilder myAsmBuilder = myDomain.DefineDynamicAssembly(\n\t\t\t\t\t\tmyAsmName,\n\t\t\t\t\t\tAssemblyBuilderAccess.Run);\n\tModuleBuilder myModBuilder = myAsmBuilder.DefineDynamicModule(\n\t\t\t\t\t\t&quot;MyJumpTableDemo&quot;);\n\n\tTypeBuilder myTypeBuilder = myModBuilder.DefineType(&quot;JumpTableDemo&quot;,\n\t\t\t\t\t\t\tTypeAttributes.Public);\n\tMethodBuilder myMthdBuilder = myTypeBuilder.DefineMethod(&quot;SwitchMe&quot;, \n\t\t\t\t             MethodAttributes.Public |\n\t\t\t\t             MethodAttributes.Static,\n                                             typeof(string), \n                                             new Type[] {typeof(int)});\n\n\tILGenerator myIL = myMthdBuilder.GetILGenerator();\n\n\tLabel defaultCase = myIL.DefineLabel();\t\n\tLabel endOfMethod = myIL.DefineLabel();\t\n\n\t// We are initializing our jump table. Note that the labels\n\t// will be placed later using the MarkLabel method. \n\n\tLabel[] jumpTable = new Label[] { myIL.DefineLabel(),\n\t\t\t\t\t  myIL.DefineLabel(),\n\t\t\t\t\t  myIL.DefineLabel(),\n\t\t\t\t\t  myIL.DefineLabel(),\n\t\t\t\t\t  myIL.DefineLabel() };\n\n\t// arg0, the number we passed, is pushed onto the stack.\n\t// In this case, due to the design of the code sample,\n\t// the value pushed onto the stack happens to match the\n\t// index of the label (in IL terms, the index of the offset\n\t// in the jump table). If this is not the case, such as\n\t// when switching based on non-integer values, rules for the correspondence\n\t// between the possible case values and each index of the offsets\n\t// must be established outside of the ILGenerator.Emit calls,\n\t// much as a compiler would.\n\n\tmyIL.Emit(OpCodes.Ldarg_0);\n\tmyIL.Emit(OpCodes.Switch, jumpTable);\n\t\n\t// Branch on default case\n\tmyIL.Emit(OpCodes.Br_S, defaultCase);\n\n\t// Case arg0 = 0\n\tmyIL.MarkLabel(jumpTable[0]); \n\tmyIL.Emit(OpCodes.Ldstr, &quot;are no bananas&quot;);\n\tmyIL.Emit(OpCodes.Br_S, endOfMethod);\n\n\t// Case arg0 = 1\n\tmyIL.MarkLabel(jumpTable[1]); \n\tmyIL.Emit(OpCodes.Ldstr, &quot;is one banana&quot;);\n\tmyIL.Emit(OpCodes.Br_S, endOfMethod);\n\n\t// Case arg0 = 2\n\tmyIL.MarkLabel(jumpTable[2]); \n\tmyIL.Emit(OpCodes.Ldstr, &quot;are two bananas&quot;);\n\tmyIL.Emit(OpCodes.Br_S, endOfMethod);\n\n\t// Case arg0 = 3\n\tmyIL.MarkLabel(jumpTable[3]); \n\tmyIL.Emit(OpCodes.Ldstr, &quot;are three bananas&quot;);\n\tmyIL.Emit(OpCodes.Br_S, endOfMethod);\n\n\t// Case arg0 = 4\n\tmyIL.MarkLabel(jumpTable[4]); \n\tmyIL.Emit(OpCodes.Ldstr, &quot;are four bananas&quot;);\n\tmyIL.Emit(OpCodes.Br_S, endOfMethod);\n\n\t// Default case\n\tmyIL.MarkLabel(defaultCase);\n\tmyIL.Emit(OpCodes.Ldstr, &quot;are many bananas&quot;);\n\n\tmyIL.MarkLabel(endOfMethod);\n\tmyIL.Emit(OpCodes.Ret);\n\t\n\treturn myTypeBuilder.CreateType();\n\n   }\n\n   public static void Main()\n   {\n\tType myType = BuildMyType();\n\t\n\tConsole.Write(&quot;Enter an integer between 0 and 5: &quot;);\n\tint theValue = Convert.ToInt32(Console.ReadLine());\n\n\tConsole.WriteLine(&quot;---&quot;);\n\tObject myInstance = Activator.CreateInstance(myType, new object[0]);\t\n\tConsole.WriteLine(&quot;Yes, there {0} today!&quot;, myType.InvokeMember(&quot;SwitchMe&quot;,\n\t\t\t  \t\t           BindingFlags.InvokeMethod,\n\t\t\t  \t\t           null,\n\t\t\t  \t\t           myInstance,\n\t\t\t  \t\t           new object[] {theValue}));  \n\t\t\t  \n   }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.ILGenerator.Emit Example 2#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nType^ BuildMyType()\n{\n   AppDomain^ myDomain = Thread::GetDomain();\n   AssemblyName^ myAsmName = gcnew AssemblyName;\n   myAsmName-&gt;Name = &quot;MyDynamicAssembly&quot;;\n   AssemblyBuilder^ myAsmBuilder = myDomain-&gt;DefineDynamicAssembly( myAsmName, AssemblyBuilderAccess::Run );\n   ModuleBuilder^ myModBuilder = myAsmBuilder-&gt;DefineDynamicModule( &quot;MyJumpTableDemo&quot; );\n   TypeBuilder^ myTypeBuilder = myModBuilder-&gt;DefineType( &quot;JumpTableDemo&quot;, TypeAttributes::Public );\n   array&lt;Type^&gt;^temp0 = {int::typeid};\n   MethodBuilder^ myMthdBuilder = myTypeBuilder-&gt;DefineMethod( &quot;SwitchMe&quot;, static_cast&lt;MethodAttributes&gt;(MethodAttributes::Public | MethodAttributes::Static), String::typeid, temp0 );\n   ILGenerator^ myIL = myMthdBuilder-&gt;GetILGenerator();\n   Label defaultCase = myIL-&gt;DefineLabel();\n   Label endOfMethod = myIL-&gt;DefineLabel();\n   \n   // We are initializing our jump table. Note that the labels\n   // will be placed later using the MarkLabel method.\n   array&lt;Label&gt;^jumpTable = gcnew array&lt;Label&gt;(5);\n   jumpTable[ 0 ] = myIL-&gt;DefineLabel();\n   jumpTable[ 1 ] = myIL-&gt;DefineLabel();\n   jumpTable[ 2 ] = myIL-&gt;DefineLabel();\n   jumpTable[ 3 ] = myIL-&gt;DefineLabel();\n   jumpTable[ 4 ] = myIL-&gt;DefineLabel();\n   \n   // arg0, the number we passed, is pushed onto the stack.\n   // In this case, due to the design of the code sample,\n   // the value pushed onto the stack happens to match the\n   // index of the label (in IL terms, the index of the offset\n   // in the jump table). If this is not the case, such as\n   // when switching based on non-integer values, rules for the correspondence\n   // between the possible case values and each index of the offsets\n   // must be established outside of the ILGenerator::Emit calls,\n   // much as a compiler would.\n   myIL-&gt;Emit( OpCodes::Ldarg_0 );\n   myIL-&gt;Emit( OpCodes::Switch, jumpTable );\n   \n   // Branch on default case\n   myIL-&gt;Emit( OpCodes::Br_S, defaultCase );\n   \n   // Case arg0 = 0\n   myIL-&gt;MarkLabel( jumpTable[ 0 ] );\n   myIL-&gt;Emit( OpCodes::Ldstr, &quot;are no bananas&quot; );\n   myIL-&gt;Emit( OpCodes::Br_S, endOfMethod );\n   \n   // Case arg0 = 1\n   myIL-&gt;MarkLabel( jumpTable[ 1 ] );\n   myIL-&gt;Emit( OpCodes::Ldstr, &quot;is one banana&quot; );\n   myIL-&gt;Emit( OpCodes::Br_S, endOfMethod );\n   \n   // Case arg0 = 2\n   myIL-&gt;MarkLabel( jumpTable[ 2 ] );\n   myIL-&gt;Emit( OpCodes::Ldstr, &quot;are two bananas&quot; );\n   myIL-&gt;Emit( OpCodes::Br_S, endOfMethod );\n   \n   // Case arg0 = 3\n   myIL-&gt;MarkLabel( jumpTable[ 3 ] );\n   myIL-&gt;Emit( OpCodes::Ldstr, &quot;are three bananas&quot; );\n   myIL-&gt;Emit( OpCodes::Br_S, endOfMethod );\n   \n   // Case arg0 = 4\n   myIL-&gt;MarkLabel( jumpTable[ 4 ] );\n   myIL-&gt;Emit( OpCodes::Ldstr, &quot;are four bananas&quot; );\n   myIL-&gt;Emit( OpCodes::Br_S, endOfMethod );\n   \n   // Default case\n   myIL-&gt;MarkLabel( defaultCase );\n   myIL-&gt;Emit( OpCodes::Ldstr, &quot;are many bananas&quot; );\n   myIL-&gt;MarkLabel( endOfMethod );\n   myIL-&gt;Emit( OpCodes::Ret );\n   return myTypeBuilder-&gt;CreateType();\n}\n\nint main()\n{\n   Type^ myType = BuildMyType();\n   Console::Write( &quot;Enter an integer between 0 and 5: &quot; );\n   int theValue = Convert::ToInt32( Console::ReadLine() );\n   Console::WriteLine( &quot;---&quot; );\n   Object^ myInstance = Activator::CreateInstance( myType, gcnew array&lt;Object^&gt;(0) );\n   array&lt;Object^&gt;^temp1 = {theValue};\n   Console::WriteLine( &quot;Yes, there {0} today!&quot;, myType-&gt;InvokeMember( &quot;SwitchMe&quot;, BindingFlags::InvokeMethod, nullptr, myInstance, temp1 ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.ILGenerator.Emit Example 2#1\">\nImports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\n _\n\nClass DynamicJumpTableDemo\n   \n   Public Shared Function BuildMyType() As Type\n\n      Dim myDomain As AppDomain = Thread.GetDomain()\n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = &quot;MyDynamicAssembly&quot;\n      \n      Dim myAsmBuilder As AssemblyBuilder = myDomain.DefineDynamicAssembly(myAsmName, _\n\t\t\t\t\t\t\tAssemblyBuilderAccess.Run)\n      Dim myModBuilder As ModuleBuilder = myAsmBuilder.DefineDynamicModule(&quot;MyJumpTableDemo&quot;)\n      \n      Dim myTypeBuilder As TypeBuilder = myModBuilder.DefineType(&quot;JumpTableDemo&quot;, _\n\t\t\t\t\t\t\t\t TypeAttributes.Public)\n      Dim myMthdBuilder As MethodBuilder = myTypeBuilder.DefineMethod(&quot;SwitchMe&quot;, _\n\t\t\t\t\t\tMethodAttributes.Public Or MethodAttributes.Static, _\n\t\t\t\t\t\tGetType(String), New Type() {GetType(Integer)})\n      \n      Dim myIL As ILGenerator = myMthdBuilder.GetILGenerator()\n      \n      Dim defaultCase As Label = myIL.DefineLabel()\n      Dim endOfMethod As Label = myIL.DefineLabel()\n      \n      &#39; We are initializing our jump table. Note that the labels\n      &#39; will be placed later using the MarkLabel method. \n\n      Dim jumpTable() As Label = {myIL.DefineLabel(), _\n\t\t\t\t  myIL.DefineLabel(), _\n\t\t\t\t  myIL.DefineLabel(), _\n\t\t\t\t  myIL.DefineLabel(), _\n\t\t\t\t  myIL.DefineLabel()}\n      \n      &#39; arg0, the number we passed, is pushed onto the stack.\n      &#39; In this case, due to the design of the code sample,\n      &#39; the value pushed onto the stack happens to match the\n      &#39; index of the label (in IL terms, the index of the offset\n      &#39; in the jump table). If this is not the case, such as\n      &#39; when switching based on non-integer values, rules for the correspondence\n      &#39; between the possible case values and each index of the offsets\n      &#39; must be established outside of the ILGenerator.Emit calls,\n      &#39; much as a compiler would.\n\n      myIL.Emit(OpCodes.Ldarg_0)\n      myIL.Emit(OpCodes.Switch, jumpTable)\n      \n      &#39; Branch on default case\n      myIL.Emit(OpCodes.Br_S, defaultCase)\n      \n      &#39; Case arg0 = 0\n      myIL.MarkLabel(jumpTable(0))\n      myIL.Emit(OpCodes.Ldstr, &quot;are no bananas&quot;)\n      myIL.Emit(OpCodes.Br_S, endOfMethod)\n      \n      &#39; Case arg0 = 1\n      myIL.MarkLabel(jumpTable(1))\n      myIL.Emit(OpCodes.Ldstr, &quot;is one banana&quot;)\n      myIL.Emit(OpCodes.Br_S, endOfMethod)\n      \n      &#39; Case arg0 = 2\n      myIL.MarkLabel(jumpTable(2))\n      myIL.Emit(OpCodes.Ldstr, &quot;are two bananas&quot;)\n      myIL.Emit(OpCodes.Br_S, endOfMethod)\n      \n      &#39; Case arg0 = 3\n      myIL.MarkLabel(jumpTable(3))\n      myIL.Emit(OpCodes.Ldstr, &quot;are three bananas&quot;)\n      myIL.Emit(OpCodes.Br_S, endOfMethod)\n      \n      &#39; Case arg0 = 4\n      myIL.MarkLabel(jumpTable(4))\n      myIL.Emit(OpCodes.Ldstr, &quot;are four bananas&quot;)\n      myIL.Emit(OpCodes.Br_S, endOfMethod)\n      \n      &#39; Default case\n      myIL.MarkLabel(defaultCase)\n      myIL.Emit(OpCodes.Ldstr, &quot;are many bananas&quot;)\n      \n      myIL.MarkLabel(endOfMethod)\n      myIL.Emit(OpCodes.Ret)\n      \n      Return myTypeBuilder.CreateType()\n\n   End Function &#39;BuildMyType\n    \n   \n   Public Shared Sub Main()\n\n      Dim myType As Type = BuildMyType()\n      \n      Console.Write(&quot;Enter an integer between 0 and 5: &quot;)\n      Dim theValue As Integer = Convert.ToInt32(Console.ReadLine())\n      \n      Console.WriteLine(&quot;---&quot;)\n      Dim myInstance As [Object] = Activator.CreateInstance(myType, New Object() {})\n      Console.WriteLine(&quot;Yes, there {0} today!&quot;, myType.InvokeMember(&quot;SwitchMe&quot;, _\n\t\t\t\t\t\t BindingFlags.InvokeMethod, Nothing, _\n\t\t\t\t\t         myInstance, New Object() {theValue}))\n\n   End Sub &#39;Main\n\nEnd Class &#39;DynamicJumpTableDemo\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Tailcall\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Tailcall</div>        \r\n          </div>\r\n    \r\n            <p>Performs a postfixed method call instruction such that the current method&#39;s stack frame is removed before the actual call instruction is executed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Tailcall;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 14</td>\n<td>tail.</td>\n<td>Subsequent call terminates current methods</td>\n</tr>\n</tbody>\n</table>\n<p> There is no stack transition behavior defined for this instruction.  </p>\n<p> The <code>tail</code> prefix instruction must immediately precede a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Call\" data-linktype=\"relative-path\">Call</a>, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Calli\" data-linktype=\"relative-path\">Calli</a>, or <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Callvirt\" data-linktype=\"relative-path\">Callvirt</a> instruction. It indicates that the current method&#39;s stack frame should be removed before the call instruction is executed. It also implies that the value returned from the following call is also the value returned by the current method, and the call can therefore be converted into a cross-method jump.  </p>\n<p> The stack must be empty except for the arguments being transferred by the following call. The instruction following the call instruction must be a ret. Thus the only valid code sequence is <code>tail. call</code> (or <code>calli</code> or <code>callvirt</code>). Correct Microsoft Intermediate Language (MSIL) instructions must not branch to the <code>call</code> instruction, but they may branch to the subsequent <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ret\" data-linktype=\"relative-path\">Ret</a>.  </p>\n<p> The current frame cannot be discarded when control is transferred from untrusted code to trusted code, since this would jeopardize code identity security. The .NET Framework security checks can therefore cause the <code>tail</code> to be ignored, leaving a standard <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Call\" data-linktype=\"relative-path\">Call</a> instruction. Similarly, in order to allow the exit of a synchronized region to occur after the call returns, the <code>tail</code> prefix is ignored when used to exit a method that is marked synchronized.  </p>\n<p> The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>tail</code> opcode:  </p>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Throw\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Throw</div>        \r\n          </div>\r\n    \r\n            <p>Throws the exception object currently on the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Throw;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7A</td>\n<td>throw</td>\n<td>Throws an exception.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference (to an exception) is pushed onto the stack.  </p>\n</li>\n<li><p>The object reference is popped from the stack and the exception thrown.  </p>\n<p>The <code>throw</code> instruction throws the exception object (type <code>O</code>) currently on the stack.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if the object reference is a null reference.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>throw</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Unaligned\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unaligned</div>        \r\n          </div>\r\n    \r\n            <p>Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <code>ldind</code>, <code>stind</code>, <code>ldfld</code>, <code>stfld</code>, <code>ldobj</code>, <code>stobj</code>, <code>initblk</code>, or <code>cpblk</code> instruction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Unaligned;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 12 &lt; <code>unsigned int8</code> &gt;</td>\n<td>unaligned. <code>alignment</code></td>\n<td>Indicates that the subsequent pointer instruction may be unaligned.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n<p><code>Unaligned</code> specifies that the address (an unmanaged pointer, <code>native int</code>) on the stack might not be aligned to the natural size of the immediately following <code>ldind</code>, <code>stind</code>, <code>ldfld</code>, <code>stfld</code>, <code>ldobj</code>, <code>stobj</code>, <code>initblk</code>, or <code>cpblk</code> instruction. That is, for a <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldind_I4\" data-linktype=\"relative-path\">Ldind_I4</a> instruction the alignment of the address may not be to a 4-byte boundary. For <code>initblk</code> and <code>cpblk</code> the default alignment is architecture dependent (4-byte on 32-bit CPUs, 8-byte on 64-bit CPUs). Code generators that do not restrict their output to a 32-bit word size must use <code>unaligned</code> if the alignment is not known at compile time to be 8-byte.  </p>\n<p>The value of alignment must be 1, 2, or 4 and means that the generated code should assume that the address is byte, double-byte, or quad-byte aligned, respectively. Note that transient pointers (type <code>*</code>) are always aligned.  </p>\n<p>While the alignment for a <code>cpblk</code> instruction would logically require two numbers (one for the source and one for the destination), there is no noticeable impact on performance if only the lower number is specified.  </p>\n<p>The <code>unaligned</code> and <code>volatile</code> prefixes can be combined in either order. They must immediately precede a <code>ldind</code>, <code>stind</code>, <code>ldfld</code>, <code>stfld</code>, <code>ldobj</code>, <code>stobj</code>, <code>initblk</code>, or <code>cpblk</code>instruction. Only the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Volatile\" data-linktype=\"relative-path\">Volatile</a> prefix is allowed for the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldsfld\" data-linktype=\"relative-path\">Ldsfld</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Stsfld\" data-linktype=\"relative-path\">Stsfld</a> instructions.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overloads can use the <code>unaligned</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li><p>ILGenerator.Emit(OpCode, Label)  </p>\n</li>\n<li><p>ILGenerator.Emit(Opcode, Byte)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Unbox\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unbox</div>        \r\n          </div>\r\n    \r\n            <p>Converts the boxed representation of a value type to its unboxed form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Unbox;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>79 &lt; <code>T</code> &gt;</td>\n<td>unbox <code>valType</code></td>\n<td>Extracts the value type data from <code>obj</code>, its boxed representation.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference is pushed onto the stack.  </p>\n</li>\n<li><p>The object reference is popped from the stack and unboxed to a value type pointer.  </p>\n</li>\n<li><p>The value type pointer is pushed onto the stack.  </p>\n<p>A value type has two separate representations within the Common Language Infrastructure (CLI):  </p>\n</li>\n</ol>\n<ul>\n<li><p>A &#39;raw&#39; form used when a value type is embedded within another object.  </p>\n</li>\n<li><p>A &#39;boxed&#39; form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.  </p>\n<p>The <code>unbox</code> instruction converts the object reference (type <code>O</code>), the boxed representation of a value type, to a value type pointer (a managed pointer, type <code>&amp;</code>), its unboxed form. The supplied value type (<code>valType</code>) is a metadata token indicating the type of value type contained within the boxed object.  </p>\n<p>Unlike <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Box\" data-linktype=\"relative-path\">Box</a>, which is required to make a copy of a value type for use in the object, <code>unbox</code> is not required to copy the value type from the object. Typically it simply computes the address of the value type that is already present inside of the boxed object.  </p>\n<p><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown if the object is not boxed as <code>valType</code>.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if the object reference is a null reference.  </p>\n<p><a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown if the value type <code>valType</code> cannot be found. This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>unbox</code> opcode:  </p>\n</li>\n<li><p>ILGenerator.Emit(OpCode, Type)</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Unbox_Any\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unbox_Any</div>        \r\n          </div>\r\n    \r\n            <p>Converts the boxed representation of a type specified in the instruction to its unboxed form.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Unbox_Any;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A5 &lt; <code>T</code> &gt;</td>\n<td>unbox.any <code>typeTok</code></td>\n<td>Extract the data from <code>obj</code>, its boxed representation.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An object reference <code>obj</code> is pushed onto the stack.  </p>\n</li>\n<li><p>The object reference is popped from the stack and unboxed to the type specified in the instruction.  </p>\n</li>\n<li><p>The resulting object reference or value type is pushed onto the stack.  </p>\n<p>When applied to the boxed form of a value type, the <code>unbox.any</code> instruction extracts the value contained within <code>obj</code> (of type <code>O</code>), and is therefore equivalent to <code>unbox</code> followed by <code>ldobj</code>.  </p>\n<p>When applied to a reference type, the <code>unbox.any</code> instruction has the same effect as <code>castclass</code> <code>typeTok</code>.  </p>\n<p>If the operand <code>typeTok</code> is a generic type parameter, then the runtime behavior is determined by the type that is specified for that generic type parameter.  </p>\n<p><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown if <code>obj</code> is not a boxed type.  </p>\n<p><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> is thrown if <code>obj</code> is a null reference.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>unbox.any</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode, Type)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Volatile\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Volatile</div>        \r\n          </div>\r\n    \r\n            <p>Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Volatile;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FE 13</td>\n<td>volatile.</td>\n<td>Indicates that the subsequent pointer reference is volatile.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p>An address is pushed onto the stack.  </p>\n<p><code>volatile</code>. specifies that the address is a volatile address (that is, it can be referenced externally to the current thread of execution) and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed. Marking an access as <code>volatile</code> affects only that single access; other accesses to the same location must be marked separately. Access to volatile locations need not be performed atomically.  </p>\n<p>The <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Unaligned\" data-linktype=\"relative-path\">Unaligned</a> and <code>volatile</code> prefixes can be combined in either order. They must immediately precede a <code>ldind</code>, <code>stind</code>, <code>ldfld</code>, <code>stfld</code>, <code>ldobj</code>, <code>stobj</code>, <code>initblk</code>, or <code>cpblk</code> instruction. Only the <code>volatile</code> prefix is allowed for the <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldsfld\" data-linktype=\"relative-path\">Ldsfld</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Stsfld\" data-linktype=\"relative-path\">Stsfld</a> instructions.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>volatile</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_Xor\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Xor</div>        \r\n          </div>\r\n    \r\n            <p>Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Reflection.Emit.OpCode Xor;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table lists the instruction&#39;s hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:  </p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Assembly Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>61</td>\n<td>xor</td>\n<td>Computes the bitwise XOR of two integer values and returns an integer.</td>\n</tr>\n</tbody>\n</table>\n<p> The stack transitional behavior, in sequential order, is:  </p>\n<ol>\n<li><p><code>value1</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> is pushed onto the stack.  </p>\n</li>\n<li><p><code>value2</code> and <code>value1</code> are popped from the stack and their bitwise XOR computed.  </p>\n</li>\n<li><p>The bitwise XOR of <code>value2</code> and <code>value1</code> is pushed onto the stack.  </p>\n<p>The <code>xor</code> instruction computes the bitwise XOR of the top two values on the stack and leaves the result on the stack.  </p>\n<p><code>Xor</code> is an integer-specific operation.  </p>\n<p>The following <a class=\"xref\" href=\"system.reflection.emit.ilgenerator#System_Reflection_Emit_ILGenerator_Emit_\" data-linktype=\"relative-path\">Emit</a> method overload can use the <code>xor</code> opcode:  </p>\n</li>\n</ol>\n<ul>\n<li>ILGenerator.Emit(OpCode)</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_OpCodes_TakesSingleByteArgument_System_Reflection_Emit_OpCode_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_OpCodes_TakesSingleByteArgument_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TakesSingleByteArgument(OpCode)</div>        \r\n          </div>\r\n    \r\n            <p>Returns true or false if the supplied opcode takes a single byte argument.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inst</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.opcode\" data-linktype=\"relative-path\">OpCode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of an Opcode object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>True</code> or <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to find which MSIL opcodes are &quot;short form&quot;, for use in optimized code.  </p>\n<p> <code>TakesSingleByteArgument</code> returns <code>true</code> if the <a class=\"xref\" href=\"system.reflection.emit.opcode\" data-linktype=\"relative-path\">OpCode</a> instance takes a single byte argument in the following cases:  </p>\n<ul>\n<li><p>The opcode performs a branch instruction to a byte-sized address (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Br_S\" data-linktype=\"relative-path\">Br_S</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Bgt_S\" data-linktype=\"relative-path\">Bgt_S</a>).  </p>\n</li>\n<li><p>The opcode pushes a byte value onto the stack (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldc_I4_S\" data-linktype=\"relative-path\">Ldc_I4_S</a>).  </p>\n</li>\n<li><p>The opcode references a variable or argument via the byte-sized &quot;short form&quot; (for example, <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Ldloc_S\" data-linktype=\"relative-path\">Ldloc_S</a> and <a class=\"xref\" href=\"system.reflection.emit.opcodes#System_Reflection_Emit_OpCodes_Stloc_S\" data-linktype=\"relative-path\">Stloc_S</a>).  </p>\n<p>Otherwise, it returns <code>false</code>.  </p>\n<p>The example below demonstrates the use of <code>TakesSingleByteArgument</code> by reflecting on to the <code>OpCodes</code> class and testing to see whether each <code>OpCode</code> field takes a single-byte argument.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1\">\npublic static void Main()\n{\n   // We need a blank OpCode object for reference when calling FieldInfo.GetValue().\n\n   OpCode blankOpCode = new OpCode(); \n\n   Type myOpCodesType = Type.GetType(&quot;System.Reflection.Emit.OpCodes&quot;);\n   FieldInfo[] listOfOpCodes = myOpCodesType.GetFields();\n\n   Console.WriteLine(&quot;Which OpCodes take single-byte arguments?&quot;);\n   Console.WriteLine(&quot;-----------------------------------------&quot;);\n\n   // Now, let&#39;s reflect on each FieldInfo and create an instance of the OpCode it represents.\n\n   foreach (FieldInfo opCodeFI in listOfOpCodes)\n   {\n\tobject theOpCode = opCodeFI.GetValue(blankOpCode);\n\t\n\tConsole.WriteLine(&quot;{0}: {1}&quot;, opCodeFI.Name, \n\t\t\t  OpCodes.TakesSingleByteArgument((OpCode)theOpCode).ToString());\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1\">\n   Public Shared Sub Main()\n\n      &#39; We need a blank OpCode object for reference when calling FieldInfo.GetValue().\n\n      Dim blankOpCode As New OpCode()\n      \n      Dim myOpCodesType As Type = Type.GetType(&quot;System.Reflection.Emit.OpCodes&quot;)\n      Dim listOfOpCodes As FieldInfo() = myOpCodesType.GetFields()\n      \n      Console.WriteLine(&quot;Which OpCodes take single-byte arguments?&quot;)\n      Console.WriteLine(&quot;-----------------------------------------&quot;)\n      \n      &#39; Now, let&#39;s reflect on each FieldInfo and create an instance of the OpCode it represents.\n      Dim opCodeFI As FieldInfo\n      For Each opCodeFI In  listOfOpCodes\n         Dim theOpCode As Object = opCodeFI.GetValue(blankOpCode)\n         \n         Console.WriteLine(&quot;{0}: {1}&quot;, opCodeFI.Name, _\n\t\t\t   OpCodes.TakesSingleByteArgument(CType(theOpCode, OpCode)).ToString())\n      Next opCodeFI\n\n   End Sub &#39;Main\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1\">int main()\n{\n   \n   // We need a blank OpCode Object for reference when calling FieldInfo::GetValue().\n   OpCode blankOpCode;\n   Type^ myOpCodesType = Type::GetType( &quot;System.Reflection.Emit.OpCodes&quot; );\n   array&lt;FieldInfo^&gt;^listOfOpCodes = myOpCodesType-&gt;GetFields();\n   Console::WriteLine( &quot;Which OpCodes take single-Byte arguments?&quot; );\n   Console::WriteLine( &quot;-----------------------------------------&quot; );\n   \n   // Now, let&#39;s reflect on each FieldInfo and create an instance of the OpCode it represents.\n   System::Collections::IEnumerator^ myEnum = listOfOpCodes-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      FieldInfo^ opCodeFI = safe_cast&lt;FieldInfo^&gt;(myEnum-&gt;Current);\n      Object^ theOpCode = opCodeFI-&gt;GetValue( blankOpCode );\n      Console::WriteLine( &quot; {0}: {1}&quot;, opCodeFI-&gt;Name, OpCodes::TakesSingleByteArgument(  *dynamic_cast&lt;OpCode^&gt;(theOpCode) ) );\n   }\n}\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.OpCodes.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.OpCodes.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Add\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Add_Ovf\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Add_Ovf_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.And\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Arglist\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Beq\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Beq_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Bge\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Bge_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Bge_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Bge_Un_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Bgt\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Bgt_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Bgt_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Bgt_Un_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ble\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ble_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ble_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ble_Un_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Blt\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Blt_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Blt_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Blt_Un_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Bne_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Bne_Un_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Box\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Br\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Br_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Break\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Brfalse\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Brfalse_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Brtrue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Brtrue_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Call\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Calli\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Callvirt\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Castclass\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ceq\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Cgt\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Cgt_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ckfinite\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Clt\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Clt_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Constrained\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_I\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_I1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_I2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_I4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_I8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_I\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_I1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_I2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_I4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_I8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_U\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_U1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_U2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_U4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_U8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_R_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_R4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_R8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_U\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_U1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_U2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_U4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Conv_U8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Cpblk\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Cpobj\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Div\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Div_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Dup\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Endfilter\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Endfinally\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Initblk\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Initobj\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Isinst\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Jmp\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldarg\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldarg_0\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldarg_1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldarg_2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldarg_3\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldarg_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldarga\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldarga_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I4_0\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I4_1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I4_2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I4_3\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I4_4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I4_5\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I4_6\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I4_7\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I4_8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I4_M1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I4_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_I8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_R4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldc_R8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelem\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelem_I\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelem_I1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelem_I2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelem_I4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelem_I8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelem_R4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelem_R8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelem_Ref\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelem_U1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelem_U2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelem_U4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldelema\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldfld\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldflda\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldftn\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldind_I\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldind_I1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldind_I2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldind_I4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldind_I8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldind_R4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldind_R8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldind_Ref\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldind_U1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldind_U2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldind_U4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldlen\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldloc\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldloc_0\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldloc_1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldloc_2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldloc_3\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldloc_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldloca\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldloca_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldnull\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldobj\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldsfld\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldsflda\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldstr\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldtoken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ldvirtftn\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Leave\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Leave_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Localloc\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Mkrefany\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Mul\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Mul_Ovf\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Mul_Ovf_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Neg\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Newarr\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Newobj\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Nop\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Not\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Or\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Pop\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Prefix1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Prefix2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Prefix3\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Prefix4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Prefix5\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Prefix6\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Prefix7\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Prefixref\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Readonly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Refanytype\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Refanyval\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Rem\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Rem_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Ret\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Rethrow\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Shl\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Shr\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Shr_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Sizeof\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Starg\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Starg_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stelem\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stelem_I\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stelem_I1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stelem_I2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stelem_I4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stelem_I8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stelem_R4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stelem_R8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stelem_Ref\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stfld\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stind_I\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stind_I1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stind_I2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stind_I4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stind_I8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stind_R4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stind_R8\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stind_Ref\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stloc\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stloc_0\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stloc_1\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stloc_2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stloc_3\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stloc_S\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stobj\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Stsfld\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Sub\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Sub_Ovf\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Sub_Ovf_Un\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Switch\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Tailcall\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.TakesSingleByteArgument\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Throw\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Unaligned\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Unbox\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Unbox_Any\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Volatile\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.OpCodes.Xor\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d7e0dc78-19b3-229a-8a71-880082b85a48\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the  class members (such as ).\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection.Emit/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Emit.OpCodes\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.OpCodes.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.OpCodes.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Emit.OpCodes","System.Reflection.Emit.OpCodes.Add","System.Reflection.Emit.OpCodes.Add_Ovf","System.Reflection.Emit.OpCodes.Add_Ovf_Un","System.Reflection.Emit.OpCodes.And","System.Reflection.Emit.OpCodes.Arglist","System.Reflection.Emit.OpCodes.Beq","System.Reflection.Emit.OpCodes.Beq_S","System.Reflection.Emit.OpCodes.Bge","System.Reflection.Emit.OpCodes.Bge_S","System.Reflection.Emit.OpCodes.Bge_Un","System.Reflection.Emit.OpCodes.Bge_Un_S","System.Reflection.Emit.OpCodes.Bgt","System.Reflection.Emit.OpCodes.Bgt_S","System.Reflection.Emit.OpCodes.Bgt_Un","System.Reflection.Emit.OpCodes.Bgt_Un_S","System.Reflection.Emit.OpCodes.Ble","System.Reflection.Emit.OpCodes.Ble_S","System.Reflection.Emit.OpCodes.Ble_Un","System.Reflection.Emit.OpCodes.Ble_Un_S","System.Reflection.Emit.OpCodes.Blt","System.Reflection.Emit.OpCodes.Blt_S","System.Reflection.Emit.OpCodes.Blt_Un","System.Reflection.Emit.OpCodes.Blt_Un_S","System.Reflection.Emit.OpCodes.Bne_Un","System.Reflection.Emit.OpCodes.Bne_Un_S","System.Reflection.Emit.OpCodes.Box","System.Reflection.Emit.OpCodes.Br","System.Reflection.Emit.OpCodes.Br_S","System.Reflection.Emit.OpCodes.Break","System.Reflection.Emit.OpCodes.Brfalse","System.Reflection.Emit.OpCodes.Brfalse_S","System.Reflection.Emit.OpCodes.Brtrue","System.Reflection.Emit.OpCodes.Brtrue_S","System.Reflection.Emit.OpCodes.Call","System.Reflection.Emit.OpCodes.Calli","System.Reflection.Emit.OpCodes.Callvirt","System.Reflection.Emit.OpCodes.Castclass","System.Reflection.Emit.OpCodes.Ceq","System.Reflection.Emit.OpCodes.Cgt","System.Reflection.Emit.OpCodes.Cgt_Un","System.Reflection.Emit.OpCodes.Ckfinite","System.Reflection.Emit.OpCodes.Clt","System.Reflection.Emit.OpCodes.Clt_Un","System.Reflection.Emit.OpCodes.Constrained","System.Reflection.Emit.OpCodes.Conv_I","System.Reflection.Emit.OpCodes.Conv_I1","System.Reflection.Emit.OpCodes.Conv_I2","System.Reflection.Emit.OpCodes.Conv_I4","System.Reflection.Emit.OpCodes.Conv_I8","System.Reflection.Emit.OpCodes.Conv_Ovf_I","System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_I1","System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_I2","System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_I4","System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_I8","System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_U","System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_U1","System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_U2","System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_U4","System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_U8","System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un","System.Reflection.Emit.OpCodes.Conv_R_Un","System.Reflection.Emit.OpCodes.Conv_R4","System.Reflection.Emit.OpCodes.Conv_R8","System.Reflection.Emit.OpCodes.Conv_U","System.Reflection.Emit.OpCodes.Conv_U1","System.Reflection.Emit.OpCodes.Conv_U2","System.Reflection.Emit.OpCodes.Conv_U4","System.Reflection.Emit.OpCodes.Conv_U8","System.Reflection.Emit.OpCodes.Cpblk","System.Reflection.Emit.OpCodes.Cpobj","System.Reflection.Emit.OpCodes.Div","System.Reflection.Emit.OpCodes.Div_Un","System.Reflection.Emit.OpCodes.Dup","System.Reflection.Emit.OpCodes.Endfilter","System.Reflection.Emit.OpCodes.Endfinally","System.Reflection.Emit.OpCodes.Initblk","System.Reflection.Emit.OpCodes.Initobj","System.Reflection.Emit.OpCodes.Isinst","System.Reflection.Emit.OpCodes.Jmp","System.Reflection.Emit.OpCodes.Ldarg","System.Reflection.Emit.OpCodes.Ldarg_0","System.Reflection.Emit.OpCodes.Ldarg_1","System.Reflection.Emit.OpCodes.Ldarg_2","System.Reflection.Emit.OpCodes.Ldarg_3","System.Reflection.Emit.OpCodes.Ldarg_S","System.Reflection.Emit.OpCodes.Ldarga","System.Reflection.Emit.OpCodes.Ldarga_S","System.Reflection.Emit.OpCodes.Ldc_I4","System.Reflection.Emit.OpCodes.Ldc_I4_0","System.Reflection.Emit.OpCodes.Ldc_I4_1","System.Reflection.Emit.OpCodes.Ldc_I4_2","System.Reflection.Emit.OpCodes.Ldc_I4_3","System.Reflection.Emit.OpCodes.Ldc_I4_4","System.Reflection.Emit.OpCodes.Ldc_I4_5","System.Reflection.Emit.OpCodes.Ldc_I4_6","System.Reflection.Emit.OpCodes.Ldc_I4_7","System.Reflection.Emit.OpCodes.Ldc_I4_8","System.Reflection.Emit.OpCodes.Ldc_I4_M1","System.Reflection.Emit.OpCodes.Ldc_I4_S","System.Reflection.Emit.OpCodes.Ldc_I8","System.Reflection.Emit.OpCodes.Ldc_R4","System.Reflection.Emit.OpCodes.Ldc_R8","System.Reflection.Emit.OpCodes.Ldelem","System.Reflection.Emit.OpCodes.Ldelem_I","System.Reflection.Emit.OpCodes.Ldelem_I1","System.Reflection.Emit.OpCodes.Ldelem_I2","System.Reflection.Emit.OpCodes.Ldelem_I4","System.Reflection.Emit.OpCodes.Ldelem_I8","System.Reflection.Emit.OpCodes.Ldelem_R4","System.Reflection.Emit.OpCodes.Ldelem_R8","System.Reflection.Emit.OpCodes.Ldelem_Ref","System.Reflection.Emit.OpCodes.Ldelem_U1","System.Reflection.Emit.OpCodes.Ldelem_U2","System.Reflection.Emit.OpCodes.Ldelem_U4","System.Reflection.Emit.OpCodes.Ldelema","System.Reflection.Emit.OpCodes.Ldfld","System.Reflection.Emit.OpCodes.Ldflda","System.Reflection.Emit.OpCodes.Ldftn","System.Reflection.Emit.OpCodes.Ldind_I","System.Reflection.Emit.OpCodes.Ldind_I1","System.Reflection.Emit.OpCodes.Ldind_I2","System.Reflection.Emit.OpCodes.Ldind_I4","System.Reflection.Emit.OpCodes.Ldind_I8","System.Reflection.Emit.OpCodes.Ldind_R4","System.Reflection.Emit.OpCodes.Ldind_R8","System.Reflection.Emit.OpCodes.Ldind_Ref","System.Reflection.Emit.OpCodes.Ldind_U1","System.Reflection.Emit.OpCodes.Ldind_U2","System.Reflection.Emit.OpCodes.Ldind_U4","System.Reflection.Emit.OpCodes.Ldlen","System.Reflection.Emit.OpCodes.Ldloc","System.Reflection.Emit.OpCodes.Ldloc_0","System.Reflection.Emit.OpCodes.Ldloc_1","System.Reflection.Emit.OpCodes.Ldloc_2","System.Reflection.Emit.OpCodes.Ldloc_3","System.Reflection.Emit.OpCodes.Ldloc_S","System.Reflection.Emit.OpCodes.Ldloca","System.Reflection.Emit.OpCodes.Ldloca_S","System.Reflection.Emit.OpCodes.Ldnull","System.Reflection.Emit.OpCodes.Ldobj","System.Reflection.Emit.OpCodes.Ldsfld","System.Reflection.Emit.OpCodes.Ldsflda","System.Reflection.Emit.OpCodes.Ldstr","System.Reflection.Emit.OpCodes.Ldtoken","System.Reflection.Emit.OpCodes.Ldvirtftn","System.Reflection.Emit.OpCodes.Leave","System.Reflection.Emit.OpCodes.Leave_S","System.Reflection.Emit.OpCodes.Localloc","System.Reflection.Emit.OpCodes.Mkrefany","System.Reflection.Emit.OpCodes.Mul","System.Reflection.Emit.OpCodes.Mul_Ovf","System.Reflection.Emit.OpCodes.Mul_Ovf_Un","System.Reflection.Emit.OpCodes.Neg","System.Reflection.Emit.OpCodes.Newarr","System.Reflection.Emit.OpCodes.Newobj","System.Reflection.Emit.OpCodes.Nop","System.Reflection.Emit.OpCodes.Not","System.Reflection.Emit.OpCodes.Or","System.Reflection.Emit.OpCodes.Pop","System.Reflection.Emit.OpCodes.Prefix1","System.Reflection.Emit.OpCodes.Prefix2","System.Reflection.Emit.OpCodes.Prefix3","System.Reflection.Emit.OpCodes.Prefix4","System.Reflection.Emit.OpCodes.Prefix5","System.Reflection.Emit.OpCodes.Prefix6","System.Reflection.Emit.OpCodes.Prefix7","System.Reflection.Emit.OpCodes.Prefixref","System.Reflection.Emit.OpCodes.Readonly","System.Reflection.Emit.OpCodes.Refanytype","System.Reflection.Emit.OpCodes.Refanyval","System.Reflection.Emit.OpCodes.Rem","System.Reflection.Emit.OpCodes.Rem_Un","System.Reflection.Emit.OpCodes.Ret","System.Reflection.Emit.OpCodes.Rethrow","System.Reflection.Emit.OpCodes.Shl","System.Reflection.Emit.OpCodes.Shr","System.Reflection.Emit.OpCodes.Shr_Un","System.Reflection.Emit.OpCodes.Sizeof","System.Reflection.Emit.OpCodes.Starg","System.Reflection.Emit.OpCodes.Starg_S","System.Reflection.Emit.OpCodes.Stelem","System.Reflection.Emit.OpCodes.Stelem_I","System.Reflection.Emit.OpCodes.Stelem_I1","System.Reflection.Emit.OpCodes.Stelem_I2","System.Reflection.Emit.OpCodes.Stelem_I4","System.Reflection.Emit.OpCodes.Stelem_I8","System.Reflection.Emit.OpCodes.Stelem_R4","System.Reflection.Emit.OpCodes.Stelem_R8","System.Reflection.Emit.OpCodes.Stelem_Ref","System.Reflection.Emit.OpCodes.Stfld","System.Reflection.Emit.OpCodes.Stind_I","System.Reflection.Emit.OpCodes.Stind_I1","System.Reflection.Emit.OpCodes.Stind_I2","System.Reflection.Emit.OpCodes.Stind_I4","System.Reflection.Emit.OpCodes.Stind_I8","System.Reflection.Emit.OpCodes.Stind_R4","System.Reflection.Emit.OpCodes.Stind_R8","System.Reflection.Emit.OpCodes.Stind_Ref","System.Reflection.Emit.OpCodes.Stloc","System.Reflection.Emit.OpCodes.Stloc_0","System.Reflection.Emit.OpCodes.Stloc_1","System.Reflection.Emit.OpCodes.Stloc_2","System.Reflection.Emit.OpCodes.Stloc_3","System.Reflection.Emit.OpCodes.Stloc_S","System.Reflection.Emit.OpCodes.Stobj","System.Reflection.Emit.OpCodes.Stsfld","System.Reflection.Emit.OpCodes.Sub","System.Reflection.Emit.OpCodes.Sub_Ovf","System.Reflection.Emit.OpCodes.Sub_Ovf_Un","System.Reflection.Emit.OpCodes.Switch","System.Reflection.Emit.OpCodes.Tailcall","System.Reflection.Emit.OpCodes.TakesSingleByteArgument","System.Reflection.Emit.OpCodes.Throw","System.Reflection.Emit.OpCodes.Unaligned","System.Reflection.Emit.OpCodes.Unbox","System.Reflection.Emit.OpCodes.Unbox_Any","System.Reflection.Emit.OpCodes.Volatile","System.Reflection.Emit.OpCodes.Xor"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Emit.OpCodes","System::Reflection::Emit::OpCodes","System.Reflection.Emit.OpCodes.Add","System::Reflection::Emit::OpCodes::Add","System.Reflection.Emit.OpCodes.Add_Ovf","System::Reflection::Emit::OpCodes::Add_Ovf","System.Reflection.Emit.OpCodes.Add_Ovf_Un","System::Reflection::Emit::OpCodes::Add_Ovf_Un","System.Reflection.Emit.OpCodes.And","System::Reflection::Emit::OpCodes::And","System.Reflection.Emit.OpCodes.Arglist","System::Reflection::Emit::OpCodes::Arglist","System.Reflection.Emit.OpCodes.Beq","System::Reflection::Emit::OpCodes::Beq","System.Reflection.Emit.OpCodes.Beq_S","System::Reflection::Emit::OpCodes::Beq_S","System.Reflection.Emit.OpCodes.Bge","System::Reflection::Emit::OpCodes::Bge","System.Reflection.Emit.OpCodes.Bge_S","System::Reflection::Emit::OpCodes::Bge_S","System.Reflection.Emit.OpCodes.Bge_Un","System::Reflection::Emit::OpCodes::Bge_Un","System.Reflection.Emit.OpCodes.Bge_Un_S","System::Reflection::Emit::OpCodes::Bge_Un_S","System.Reflection.Emit.OpCodes.Bgt","System::Reflection::Emit::OpCodes::Bgt","System.Reflection.Emit.OpCodes.Bgt_S","System::Reflection::Emit::OpCodes::Bgt_S","System.Reflection.Emit.OpCodes.Bgt_Un","System::Reflection::Emit::OpCodes::Bgt_Un","System.Reflection.Emit.OpCodes.Bgt_Un_S","System::Reflection::Emit::OpCodes::Bgt_Un_S","System.Reflection.Emit.OpCodes.Ble","System::Reflection::Emit::OpCodes::Ble","System.Reflection.Emit.OpCodes.Ble_S","System::Reflection::Emit::OpCodes::Ble_S","System.Reflection.Emit.OpCodes.Ble_Un","System::Reflection::Emit::OpCodes::Ble_Un","System.Reflection.Emit.OpCodes.Ble_Un_S","System::Reflection::Emit::OpCodes::Ble_Un_S","System.Reflection.Emit.OpCodes.Blt","System::Reflection::Emit::OpCodes::Blt","System.Reflection.Emit.OpCodes.Blt_S","System::Reflection::Emit::OpCodes::Blt_S","System.Reflection.Emit.OpCodes.Blt_Un","System::Reflection::Emit::OpCodes::Blt_Un","System.Reflection.Emit.OpCodes.Blt_Un_S","System::Reflection::Emit::OpCodes::Blt_Un_S","System.Reflection.Emit.OpCodes.Bne_Un","System::Reflection::Emit::OpCodes::Bne_Un","System.Reflection.Emit.OpCodes.Bne_Un_S","System::Reflection::Emit::OpCodes::Bne_Un_S","System.Reflection.Emit.OpCodes.Box","System::Reflection::Emit::OpCodes::Box","System.Reflection.Emit.OpCodes.Br","System::Reflection::Emit::OpCodes::Br","System.Reflection.Emit.OpCodes.Br_S","System::Reflection::Emit::OpCodes::Br_S","System.Reflection.Emit.OpCodes.Break","System::Reflection::Emit::OpCodes::Break","System.Reflection.Emit.OpCodes.Brfalse","System::Reflection::Emit::OpCodes::Brfalse","System.Reflection.Emit.OpCodes.Brfalse_S","System::Reflection::Emit::OpCodes::Brfalse_S","System.Reflection.Emit.OpCodes.Brtrue","System::Reflection::Emit::OpCodes::Brtrue","System.Reflection.Emit.OpCodes.Brtrue_S","System::Reflection::Emit::OpCodes::Brtrue_S","System.Reflection.Emit.OpCodes.Call","System::Reflection::Emit::OpCodes::Call","System.Reflection.Emit.OpCodes.Calli","System::Reflection::Emit::OpCodes::Calli","System.Reflection.Emit.OpCodes.Callvirt","System::Reflection::Emit::OpCodes::Callvirt","System.Reflection.Emit.OpCodes.Castclass","System::Reflection::Emit::OpCodes::Castclass","System.Reflection.Emit.OpCodes.Ceq","System::Reflection::Emit::OpCodes::Ceq","System.Reflection.Emit.OpCodes.Cgt","System::Reflection::Emit::OpCodes::Cgt","System.Reflection.Emit.OpCodes.Cgt_Un","System::Reflection::Emit::OpCodes::Cgt_Un","System.Reflection.Emit.OpCodes.Ckfinite","System::Reflection::Emit::OpCodes::Ckfinite","System.Reflection.Emit.OpCodes.Clt","System::Reflection::Emit::OpCodes::Clt","System.Reflection.Emit.OpCodes.Clt_Un","System::Reflection::Emit::OpCodes::Clt_Un","System.Reflection.Emit.OpCodes.Constrained","System::Reflection::Emit::OpCodes::Constrained","System.Reflection.Emit.OpCodes.Conv_I","System::Reflection::Emit::OpCodes::Conv_I","System.Reflection.Emit.OpCodes.Conv_I1","System::Reflection::Emit::OpCodes::Conv_I1","System.Reflection.Emit.OpCodes.Conv_I2","System::Reflection::Emit::OpCodes::Conv_I2","System.Reflection.Emit.OpCodes.Conv_I4","System::Reflection::Emit::OpCodes::Conv_I4","System.Reflection.Emit.OpCodes.Conv_I8","System::Reflection::Emit::OpCodes::Conv_I8","System.Reflection.Emit.OpCodes.Conv_Ovf_I","System::Reflection::Emit::OpCodes::Conv_Ovf_I","System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un","System::Reflection::Emit::OpCodes::Conv_Ovf_I_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_I1","System::Reflection::Emit::OpCodes::Conv_Ovf_I1","System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un","System::Reflection::Emit::OpCodes::Conv_Ovf_I1_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_I2","System::Reflection::Emit::OpCodes::Conv_Ovf_I2","System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un","System::Reflection::Emit::OpCodes::Conv_Ovf_I2_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_I4","System::Reflection::Emit::OpCodes::Conv_Ovf_I4","System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un","System::Reflection::Emit::OpCodes::Conv_Ovf_I4_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_I8","System::Reflection::Emit::OpCodes::Conv_Ovf_I8","System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un","System::Reflection::Emit::OpCodes::Conv_Ovf_I8_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_U","System::Reflection::Emit::OpCodes::Conv_Ovf_U","System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un","System::Reflection::Emit::OpCodes::Conv_Ovf_U_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_U1","System::Reflection::Emit::OpCodes::Conv_Ovf_U1","System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un","System::Reflection::Emit::OpCodes::Conv_Ovf_U1_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_U2","System::Reflection::Emit::OpCodes::Conv_Ovf_U2","System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un","System::Reflection::Emit::OpCodes::Conv_Ovf_U2_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_U4","System::Reflection::Emit::OpCodes::Conv_Ovf_U4","System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un","System::Reflection::Emit::OpCodes::Conv_Ovf_U4_Un","System.Reflection.Emit.OpCodes.Conv_Ovf_U8","System::Reflection::Emit::OpCodes::Conv_Ovf_U8","System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un","System::Reflection::Emit::OpCodes::Conv_Ovf_U8_Un","System.Reflection.Emit.OpCodes.Conv_R_Un","System::Reflection::Emit::OpCodes::Conv_R_Un","System.Reflection.Emit.OpCodes.Conv_R4","System::Reflection::Emit::OpCodes::Conv_R4","System.Reflection.Emit.OpCodes.Conv_R8","System::Reflection::Emit::OpCodes::Conv_R8","System.Reflection.Emit.OpCodes.Conv_U","System::Reflection::Emit::OpCodes::Conv_U","System.Reflection.Emit.OpCodes.Conv_U1","System::Reflection::Emit::OpCodes::Conv_U1","System.Reflection.Emit.OpCodes.Conv_U2","System::Reflection::Emit::OpCodes::Conv_U2","System.Reflection.Emit.OpCodes.Conv_U4","System::Reflection::Emit::OpCodes::Conv_U4","System.Reflection.Emit.OpCodes.Conv_U8","System::Reflection::Emit::OpCodes::Conv_U8","System.Reflection.Emit.OpCodes.Cpblk","System::Reflection::Emit::OpCodes::Cpblk","System.Reflection.Emit.OpCodes.Cpobj","System::Reflection::Emit::OpCodes::Cpobj","System.Reflection.Emit.OpCodes.Div","System::Reflection::Emit::OpCodes::Div","System.Reflection.Emit.OpCodes.Div_Un","System::Reflection::Emit::OpCodes::Div_Un","System.Reflection.Emit.OpCodes.Dup","System::Reflection::Emit::OpCodes::Dup","System.Reflection.Emit.OpCodes.Endfilter","System::Reflection::Emit::OpCodes::Endfilter","System.Reflection.Emit.OpCodes.Endfinally","System::Reflection::Emit::OpCodes::Endfinally","System.Reflection.Emit.OpCodes.Initblk","System::Reflection::Emit::OpCodes::Initblk","System.Reflection.Emit.OpCodes.Initobj","System::Reflection::Emit::OpCodes::Initobj","System.Reflection.Emit.OpCodes.Isinst","System::Reflection::Emit::OpCodes::Isinst","System.Reflection.Emit.OpCodes.Jmp","System::Reflection::Emit::OpCodes::Jmp","System.Reflection.Emit.OpCodes.Ldarg","System::Reflection::Emit::OpCodes::Ldarg","System.Reflection.Emit.OpCodes.Ldarg_0","System::Reflection::Emit::OpCodes::Ldarg_0","System.Reflection.Emit.OpCodes.Ldarg_1","System::Reflection::Emit::OpCodes::Ldarg_1","System.Reflection.Emit.OpCodes.Ldarg_2","System::Reflection::Emit::OpCodes::Ldarg_2","System.Reflection.Emit.OpCodes.Ldarg_3","System::Reflection::Emit::OpCodes::Ldarg_3","System.Reflection.Emit.OpCodes.Ldarg_S","System::Reflection::Emit::OpCodes::Ldarg_S","System.Reflection.Emit.OpCodes.Ldarga","System::Reflection::Emit::OpCodes::Ldarga","System.Reflection.Emit.OpCodes.Ldarga_S","System::Reflection::Emit::OpCodes::Ldarga_S","System.Reflection.Emit.OpCodes.Ldc_I4","System::Reflection::Emit::OpCodes::Ldc_I4","System.Reflection.Emit.OpCodes.Ldc_I4_0","System::Reflection::Emit::OpCodes::Ldc_I4_0","System.Reflection.Emit.OpCodes.Ldc_I4_1","System::Reflection::Emit::OpCodes::Ldc_I4_1","System.Reflection.Emit.OpCodes.Ldc_I4_2","System::Reflection::Emit::OpCodes::Ldc_I4_2","System.Reflection.Emit.OpCodes.Ldc_I4_3","System::Reflection::Emit::OpCodes::Ldc_I4_3","System.Reflection.Emit.OpCodes.Ldc_I4_4","System::Reflection::Emit::OpCodes::Ldc_I4_4","System.Reflection.Emit.OpCodes.Ldc_I4_5","System::Reflection::Emit::OpCodes::Ldc_I4_5","System.Reflection.Emit.OpCodes.Ldc_I4_6","System::Reflection::Emit::OpCodes::Ldc_I4_6","System.Reflection.Emit.OpCodes.Ldc_I4_7","System::Reflection::Emit::OpCodes::Ldc_I4_7","System.Reflection.Emit.OpCodes.Ldc_I4_8","System::Reflection::Emit::OpCodes::Ldc_I4_8","System.Reflection.Emit.OpCodes.Ldc_I4_M1","System::Reflection::Emit::OpCodes::Ldc_I4_M1","System.Reflection.Emit.OpCodes.Ldc_I4_S","System::Reflection::Emit::OpCodes::Ldc_I4_S","System.Reflection.Emit.OpCodes.Ldc_I8","System::Reflection::Emit::OpCodes::Ldc_I8","System.Reflection.Emit.OpCodes.Ldc_R4","System::Reflection::Emit::OpCodes::Ldc_R4","System.Reflection.Emit.OpCodes.Ldc_R8","System::Reflection::Emit::OpCodes::Ldc_R8","System.Reflection.Emit.OpCodes.Ldelem","System::Reflection::Emit::OpCodes::Ldelem","System.Reflection.Emit.OpCodes.Ldelem_I","System::Reflection::Emit::OpCodes::Ldelem_I","System.Reflection.Emit.OpCodes.Ldelem_I1","System::Reflection::Emit::OpCodes::Ldelem_I1","System.Reflection.Emit.OpCodes.Ldelem_I2","System::Reflection::Emit::OpCodes::Ldelem_I2","System.Reflection.Emit.OpCodes.Ldelem_I4","System::Reflection::Emit::OpCodes::Ldelem_I4","System.Reflection.Emit.OpCodes.Ldelem_I8","System::Reflection::Emit::OpCodes::Ldelem_I8","System.Reflection.Emit.OpCodes.Ldelem_R4","System::Reflection::Emit::OpCodes::Ldelem_R4","System.Reflection.Emit.OpCodes.Ldelem_R8","System::Reflection::Emit::OpCodes::Ldelem_R8","System.Reflection.Emit.OpCodes.Ldelem_Ref","System::Reflection::Emit::OpCodes::Ldelem_Ref","System.Reflection.Emit.OpCodes.Ldelem_U1","System::Reflection::Emit::OpCodes::Ldelem_U1","System.Reflection.Emit.OpCodes.Ldelem_U2","System::Reflection::Emit::OpCodes::Ldelem_U2","System.Reflection.Emit.OpCodes.Ldelem_U4","System::Reflection::Emit::OpCodes::Ldelem_U4","System.Reflection.Emit.OpCodes.Ldelema","System::Reflection::Emit::OpCodes::Ldelema","System.Reflection.Emit.OpCodes.Ldfld","System::Reflection::Emit::OpCodes::Ldfld","System.Reflection.Emit.OpCodes.Ldflda","System::Reflection::Emit::OpCodes::Ldflda","System.Reflection.Emit.OpCodes.Ldftn","System::Reflection::Emit::OpCodes::Ldftn","System.Reflection.Emit.OpCodes.Ldind_I","System::Reflection::Emit::OpCodes::Ldind_I","System.Reflection.Emit.OpCodes.Ldind_I1","System::Reflection::Emit::OpCodes::Ldind_I1","System.Reflection.Emit.OpCodes.Ldind_I2","System::Reflection::Emit::OpCodes::Ldind_I2","System.Reflection.Emit.OpCodes.Ldind_I4","System::Reflection::Emit::OpCodes::Ldind_I4","System.Reflection.Emit.OpCodes.Ldind_I8","System::Reflection::Emit::OpCodes::Ldind_I8","System.Reflection.Emit.OpCodes.Ldind_R4","System::Reflection::Emit::OpCodes::Ldind_R4","System.Reflection.Emit.OpCodes.Ldind_R8","System::Reflection::Emit::OpCodes::Ldind_R8","System.Reflection.Emit.OpCodes.Ldind_Ref","System::Reflection::Emit::OpCodes::Ldind_Ref","System.Reflection.Emit.OpCodes.Ldind_U1","System::Reflection::Emit::OpCodes::Ldind_U1","System.Reflection.Emit.OpCodes.Ldind_U2","System::Reflection::Emit::OpCodes::Ldind_U2","System.Reflection.Emit.OpCodes.Ldind_U4","System::Reflection::Emit::OpCodes::Ldind_U4","System.Reflection.Emit.OpCodes.Ldlen","System::Reflection::Emit::OpCodes::Ldlen","System.Reflection.Emit.OpCodes.Ldloc","System::Reflection::Emit::OpCodes::Ldloc","System.Reflection.Emit.OpCodes.Ldloc_0","System::Reflection::Emit::OpCodes::Ldloc_0","System.Reflection.Emit.OpCodes.Ldloc_1","System::Reflection::Emit::OpCodes::Ldloc_1","System.Reflection.Emit.OpCodes.Ldloc_2","System::Reflection::Emit::OpCodes::Ldloc_2","System.Reflection.Emit.OpCodes.Ldloc_3","System::Reflection::Emit::OpCodes::Ldloc_3","System.Reflection.Emit.OpCodes.Ldloc_S","System::Reflection::Emit::OpCodes::Ldloc_S","System.Reflection.Emit.OpCodes.Ldloca","System::Reflection::Emit::OpCodes::Ldloca","System.Reflection.Emit.OpCodes.Ldloca_S","System::Reflection::Emit::OpCodes::Ldloca_S","System.Reflection.Emit.OpCodes.Ldnull","System::Reflection::Emit::OpCodes::Ldnull","System.Reflection.Emit.OpCodes.Ldobj","System::Reflection::Emit::OpCodes::Ldobj","System.Reflection.Emit.OpCodes.Ldsfld","System::Reflection::Emit::OpCodes::Ldsfld","System.Reflection.Emit.OpCodes.Ldsflda","System::Reflection::Emit::OpCodes::Ldsflda","System.Reflection.Emit.OpCodes.Ldstr","System::Reflection::Emit::OpCodes::Ldstr","System.Reflection.Emit.OpCodes.Ldtoken","System::Reflection::Emit::OpCodes::Ldtoken","System.Reflection.Emit.OpCodes.Ldvirtftn","System::Reflection::Emit::OpCodes::Ldvirtftn","System.Reflection.Emit.OpCodes.Leave","System::Reflection::Emit::OpCodes::Leave","System.Reflection.Emit.OpCodes.Leave_S","System::Reflection::Emit::OpCodes::Leave_S","System.Reflection.Emit.OpCodes.Localloc","System::Reflection::Emit::OpCodes::Localloc","System.Reflection.Emit.OpCodes.Mkrefany","System::Reflection::Emit::OpCodes::Mkrefany","System.Reflection.Emit.OpCodes.Mul","System::Reflection::Emit::OpCodes::Mul","System.Reflection.Emit.OpCodes.Mul_Ovf","System::Reflection::Emit::OpCodes::Mul_Ovf","System.Reflection.Emit.OpCodes.Mul_Ovf_Un","System::Reflection::Emit::OpCodes::Mul_Ovf_Un","System.Reflection.Emit.OpCodes.Neg","System::Reflection::Emit::OpCodes::Neg","System.Reflection.Emit.OpCodes.Newarr","System::Reflection::Emit::OpCodes::Newarr","System.Reflection.Emit.OpCodes.Newobj","System::Reflection::Emit::OpCodes::Newobj","System.Reflection.Emit.OpCodes.Nop","System::Reflection::Emit::OpCodes::Nop","System.Reflection.Emit.OpCodes.Not","System::Reflection::Emit::OpCodes::Not","System.Reflection.Emit.OpCodes.Or","System::Reflection::Emit::OpCodes::Or","System.Reflection.Emit.OpCodes.Pop","System::Reflection::Emit::OpCodes::Pop","System.Reflection.Emit.OpCodes.Prefix1","System::Reflection::Emit::OpCodes::Prefix1","System.Reflection.Emit.OpCodes.Prefix2","System::Reflection::Emit::OpCodes::Prefix2","System.Reflection.Emit.OpCodes.Prefix3","System::Reflection::Emit::OpCodes::Prefix3","System.Reflection.Emit.OpCodes.Prefix4","System::Reflection::Emit::OpCodes::Prefix4","System.Reflection.Emit.OpCodes.Prefix5","System::Reflection::Emit::OpCodes::Prefix5","System.Reflection.Emit.OpCodes.Prefix6","System::Reflection::Emit::OpCodes::Prefix6","System.Reflection.Emit.OpCodes.Prefix7","System::Reflection::Emit::OpCodes::Prefix7","System.Reflection.Emit.OpCodes.Prefixref","System::Reflection::Emit::OpCodes::Prefixref","System.Reflection.Emit.OpCodes.Readonly","System::Reflection::Emit::OpCodes::Readonly","System.Reflection.Emit.OpCodes.Refanytype","System::Reflection::Emit::OpCodes::Refanytype","System.Reflection.Emit.OpCodes.Refanyval","System::Reflection::Emit::OpCodes::Refanyval","System.Reflection.Emit.OpCodes.Rem","System::Reflection::Emit::OpCodes::Rem","System.Reflection.Emit.OpCodes.Rem_Un","System::Reflection::Emit::OpCodes::Rem_Un","System.Reflection.Emit.OpCodes.Ret","System::Reflection::Emit::OpCodes::Ret","System.Reflection.Emit.OpCodes.Rethrow","System::Reflection::Emit::OpCodes::Rethrow","System.Reflection.Emit.OpCodes.Shl","System::Reflection::Emit::OpCodes::Shl","System.Reflection.Emit.OpCodes.Shr","System::Reflection::Emit::OpCodes::Shr","System.Reflection.Emit.OpCodes.Shr_Un","System::Reflection::Emit::OpCodes::Shr_Un","System.Reflection.Emit.OpCodes.Sizeof","System::Reflection::Emit::OpCodes::Sizeof","System.Reflection.Emit.OpCodes.Starg","System::Reflection::Emit::OpCodes::Starg","System.Reflection.Emit.OpCodes.Starg_S","System::Reflection::Emit::OpCodes::Starg_S","System.Reflection.Emit.OpCodes.Stelem","System::Reflection::Emit::OpCodes::Stelem","System.Reflection.Emit.OpCodes.Stelem_I","System::Reflection::Emit::OpCodes::Stelem_I","System.Reflection.Emit.OpCodes.Stelem_I1","System::Reflection::Emit::OpCodes::Stelem_I1","System.Reflection.Emit.OpCodes.Stelem_I2","System::Reflection::Emit::OpCodes::Stelem_I2","System.Reflection.Emit.OpCodes.Stelem_I4","System::Reflection::Emit::OpCodes::Stelem_I4","System.Reflection.Emit.OpCodes.Stelem_I8","System::Reflection::Emit::OpCodes::Stelem_I8","System.Reflection.Emit.OpCodes.Stelem_R4","System::Reflection::Emit::OpCodes::Stelem_R4","System.Reflection.Emit.OpCodes.Stelem_R8","System::Reflection::Emit::OpCodes::Stelem_R8","System.Reflection.Emit.OpCodes.Stelem_Ref","System::Reflection::Emit::OpCodes::Stelem_Ref","System.Reflection.Emit.OpCodes.Stfld","System::Reflection::Emit::OpCodes::Stfld","System.Reflection.Emit.OpCodes.Stind_I","System::Reflection::Emit::OpCodes::Stind_I","System.Reflection.Emit.OpCodes.Stind_I1","System::Reflection::Emit::OpCodes::Stind_I1","System.Reflection.Emit.OpCodes.Stind_I2","System::Reflection::Emit::OpCodes::Stind_I2","System.Reflection.Emit.OpCodes.Stind_I4","System::Reflection::Emit::OpCodes::Stind_I4","System.Reflection.Emit.OpCodes.Stind_I8","System::Reflection::Emit::OpCodes::Stind_I8","System.Reflection.Emit.OpCodes.Stind_R4","System::Reflection::Emit::OpCodes::Stind_R4","System.Reflection.Emit.OpCodes.Stind_R8","System::Reflection::Emit::OpCodes::Stind_R8","System.Reflection.Emit.OpCodes.Stind_Ref","System::Reflection::Emit::OpCodes::Stind_Ref","System.Reflection.Emit.OpCodes.Stloc","System::Reflection::Emit::OpCodes::Stloc","System.Reflection.Emit.OpCodes.Stloc_0","System::Reflection::Emit::OpCodes::Stloc_0","System.Reflection.Emit.OpCodes.Stloc_1","System::Reflection::Emit::OpCodes::Stloc_1","System.Reflection.Emit.OpCodes.Stloc_2","System::Reflection::Emit::OpCodes::Stloc_2","System.Reflection.Emit.OpCodes.Stloc_3","System::Reflection::Emit::OpCodes::Stloc_3","System.Reflection.Emit.OpCodes.Stloc_S","System::Reflection::Emit::OpCodes::Stloc_S","System.Reflection.Emit.OpCodes.Stobj","System::Reflection::Emit::OpCodes::Stobj","System.Reflection.Emit.OpCodes.Stsfld","System::Reflection::Emit::OpCodes::Stsfld","System.Reflection.Emit.OpCodes.Sub","System::Reflection::Emit::OpCodes::Sub","System.Reflection.Emit.OpCodes.Sub_Ovf","System::Reflection::Emit::OpCodes::Sub_Ovf","System.Reflection.Emit.OpCodes.Sub_Ovf_Un","System::Reflection::Emit::OpCodes::Sub_Ovf_Un","System.Reflection.Emit.OpCodes.Switch","System::Reflection::Emit::OpCodes::Switch","System.Reflection.Emit.OpCodes.Tailcall","System::Reflection::Emit::OpCodes::Tailcall","System.Reflection.Emit.OpCodes.TakesSingleByteArgument","System::Reflection::Emit::OpCodes::TakesSingleByteArgument","System.Reflection.Emit.OpCodes.Throw","System::Reflection::Emit::OpCodes::Throw","System.Reflection.Emit.OpCodes.Unaligned","System::Reflection::Emit::OpCodes::Unaligned","System.Reflection.Emit.OpCodes.Unbox","System::Reflection::Emit::OpCodes::Unbox","System.Reflection.Emit.OpCodes.Unbox_Any","System::Reflection::Emit::OpCodes::Unbox_Any","System.Reflection.Emit.OpCodes.Volatile","System::Reflection::Emit::OpCodes::Volatile","System.Reflection.Emit.OpCodes.Xor","System::Reflection::Emit::OpCodes::Xor"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d7e0dc78-19b3-229a-8a71-880082b85a48","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection.Emit/OpCodes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"OpCodes class | Microsoft Docs","_op_ogTitle":"OpCodes class","description":"Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the  class members (such as ).\n","toc_asset_id":"_splitted/System.Reflection.Emit/toc.json","toc_rel":"_splitted/System.Reflection.Emit/toc.json","source_url":"","ms.assetid":"System.Reflection.Emit.OpCodes","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.opcodes","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.opcodes","fileRelativePath":"System.Reflection.Emit.OpCodes.html"},"themesRelativePathToOutputRoot":"_themes/"}