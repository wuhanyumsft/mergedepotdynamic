{"content":"    \r\n    <h1 id=\"System_Security_CodeAccessPermission\">\r\n      <span class=\"lang-csharp\">CodeAccessPermission</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines the underlying structure of all code access permissions.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CodeAccessPermission</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Code access permissions use a stack walk to ensure that all callers of the code have been granted a permission. If a permission object is <code>null</code>, it is handled the same as a permission object with the state <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">System.Security.Permissions.PermissionState</a>.  </p>\n<p> The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.  </p>\n<p> Inheritors of the CodeAccessPermission class must be granted full trust to function correctly as permissions extending the security infrastructure. To determine that the inheritors are fully trusted, CodeAccessPermission issues an <a class=\"xref\" href=\"system.security.permissions.securityaction\" data-linktype=\"relative-path\">SecurityAction</a> for <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> = <code>true</code> and <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a> = <code>true</code>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission__ctor\" data-linktype=\"self-bookmark\">CodeAccessPermission()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_Assert\" data-linktype=\"self-bookmark\">Assert()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource. Using Assert can create security issues.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_Copy\" data-linktype=\"self-bookmark\">Copy()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When implemented by a derived class, creates and returns an identical copy of the current permission object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_Demand\" data-linktype=\"self-bookmark\">Demand()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Forces a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_Deny\" data-linktype=\"self-bookmark\">Deny()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> object is equal to the current <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_FromXml_System_Security_SecurityElement_\" data-linktype=\"self-bookmark\">FromXml(SecurityElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a hash code for the <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> object that is suitable for use in hashing algorithms and data structures such as a hash table.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_Intersect_System_Security_IPermission_\" data-linktype=\"self-bookmark\">Intersect(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_IsSubsetOf_System_Security_IPermission_\" data-linktype=\"self-bookmark\">IsSubsetOf(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_PermitOnly\" data-linktype=\"self-bookmark\">PermitOnly()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_RevertAll\" data-linktype=\"self-bookmark\">RevertAll()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes all previous overrides for the current frame to be removed and no longer in effect.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_RevertAssert\" data-linktype=\"self-bookmark\">RevertAssert()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes any previous <span class=\"xref\">stem.Security.CodeAccessPermission.Assert*</span> for the current frame to be removed and no longer in effect.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_RevertDeny\" data-linktype=\"self-bookmark\">RevertDeny()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes any previous <span class=\"xref\">stem.Security.CodeAccessPermission.Deny*</span> for the current frame to be removed and no longer in effect.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_RevertPermitOnly\" data-linktype=\"self-bookmark\">RevertPermitOnly()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes any previous <span class=\"xref\">stem.Security.CodeAccessPermission.PermitOnly*</span> for the current frame to be removed and no longer in effect.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates and returns a string representation of the current permission object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_ToXml\" data-linktype=\"self-bookmark\">ToXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, creates an XML encoding of the security object and its current state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_CodeAccessPermission_Union_System_Security_IPermission_\" data-linktype=\"self-bookmark\">Union(IPermission)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission__ctor\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CodeAccessPermission()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected CodeAccessPermission ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is called to initialize state in the type whenever an instance of the derived class is created. Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_Assert\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_Assert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assert()</div>        \r\n          </div>\r\n    \r\n            <p>Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource. Using Assert can create security issues.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Assert ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The calling code does not have <a class=\"xref\" href=\"system.security.permissions.securitypermissionflag\" data-linktype=\"relative-path\">SecurityPermissionFlag</a>.  </p>\n<p> -or-  </p>\n<p> There is already an active Assert for the current frame.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. Calling Assert prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method. Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission. An assertion is effective only if the code that calls Assert passes the security check for the permission that it is asserting.  </p>\n<p> The call to Assert is effective until the calling code returns to its caller. Only one Assert can be active on a frame. An attempt to call Assert when an active Assert exists on the frame results in a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a>. Call <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertAssert_\" data-linktype=\"relative-path\">RevertAssert</a> or <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertAll_\" data-linktype=\"relative-path\">RevertAll</a> to remove an active Assert.  </p>\n<p> Assert is ignored for a permission not granted because a demand for that permission will not succeed. However, if code lower on the call stack calls <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Demand_\" data-linktype=\"relative-path\">Demand</a> for that permission, a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown when the stack walk reaches the code that tried to call Assert. This happens because the code that called Assert has not been granted the permission, even though it tried to Assert it.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because calling Assert removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately. Therefore, it should be used with great caution.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_Copy\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_Copy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Copy()</div>        \r\n          </div>\r\n    \r\n            <p>When implemented by a derived class, creates and returns an identical copy of the current permission object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Security.IPermission Copy ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A copy of the current permission object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A copy of a permission object represents the same access to resources as the original permission object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows an override of the Copy method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Permissions.NameIdPermission#2\">        public override IPermission Copy()\n        {\n            string name = m_Name;\n            return new  NameIdPermission( name );\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Permissions.NameIdPermission#2\">public:\n   virtual IPermission^ Copy() override\n   {\n      String^ name = m_Name;\n      return gcnew NameIdPermission( name );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Permissions.NameIdPermission#2\">        Public Overrides Function Copy() As IPermission\n            Dim name As String\n            name = m_name\n            Return New NameIdPermission(name)\n        End Function &#39;Copy\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_Demand\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_Demand_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Demand()</div>        \r\n          </div>\r\n    \r\n            <p>Forces a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Demand ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>A caller higher in the call stack does not have the permission specified by the current instance.  </p>\n<p> -or-  </p>\n<p> A caller higher in the call stack has called <span class=\"xref\">stem.Security.CodeAccessPermission.Deny*</span> on the current permission object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is typically used by secure libraries to ensure that callers have permission to access a resource. For example, a file class in a secure class library calls Demand for the necessary <a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> before performing a file operation requested by the caller.  </p>\n<p> The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. Demand succeeds only if no <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is raised.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_Deny\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_Deny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Deny()</div>        \r\n          </div>\r\n    \r\n            <p>Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Deny ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>There is already an active Deny for the current frame.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> The Deny method should be used only to protect resources from accidental access by fully trusted code. It should not be used to protect resources from intentional misuse by untrusted code. For example, if method <code>A</code> issues a Deny for a permission and then calls method <code>B</code>, method <code>B</code> can overtly override the Deny by issuing an <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Assert_\" data-linktype=\"relative-path\">Assert</a>. The called method is always higher in the stack. Therefore, if method <code>B</code> tries to access a protected resource, the security system begins checking for permissions with it because method <code>B</code> is the immediate caller, and then walks down the stack to confirm that there is no Deny or <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_PermitOnly_\" data-linktype=\"relative-path\">PermitOnly</a> lower in the stack. Method <code>B</code>, which is trying to access the resource, can stop the stack walk immediately by using the <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Assert_\" data-linktype=\"relative-path\">Assert</a> method. In that case, the Deny placed on the stack by method <code>A</code> (the calling method) is never discovered.  </p>\n</div>\n<p> This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.  </p>\n<p> Deny can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls Deny from being used to access the resource protected by the denied permission. If a method calls Deny on a permission, and if a <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Demand_\" data-linktype=\"relative-path\">Demand</a> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the Deny.  </p>\n<p> The call to Deny is effective until the calling code returns to its caller. Only one Deny can be active on a frame. An attempt to call Deny when an active Deny exists on the frame results in a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a>. Call <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertDeny_\" data-linktype=\"relative-path\">RevertDeny</a> or <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertAll_\" data-linktype=\"relative-path\">RevertAll</a> to remove an active Deny. Deny is ignored for a permission not granted because a demand for that permission will not succeed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> object is equal to the current <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> object to compare with the current <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> object is equal to the current <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information, see <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_FromXml_System_Security_SecurityElement_\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_FromXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromXml(SecurityElement)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void FromXml (System.Security.SecurityElement elem);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>elem</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML encoding to use to reconstruct the security object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>elem</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>elem</code> parameter does not contain the XML encoding for an instance of the same type as the current instance.  </p>\n<p> -or-  </p>\n<p> The version number of the <code>elem</code> parameter is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Custom code that extends security objects needs to implement the <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_ToXml_\" data-linktype=\"relative-path\">ToXml</a> and FromXml methods to make the objects security-encodable.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows an override of the FromXml method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Permissions.NameIdPermission#10\">       public override void FromXml(SecurityElement e)\n        {\n            // The following code for unrestricted permission is only included as an example for\n            // permissions that allow the unrestricted state. It is of no value for this permission.\n            String elUnrestricted = e.Attribute(&quot;Unrestricted&quot;);\n            if (null != elUnrestricted)\n            {\n                m_Unrestricted = bool.Parse(elUnrestricted);\n                return;\n            }\n\n            String elName = e.Attribute( &quot;Name&quot; );\n            m_Name = elName == null ? null : elName;\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Permissions.NameIdPermission#10\">public:\n   virtual void FromXml( SecurityElement^ e ) override\n   {\n      // The following code for unrestricted permission is only included as an example for\n      // permissions that allow the unrestricted state. It is of no value for this permission.\n      String^ elUnrestricted = e-&gt;Attribute(&quot;Unrestricted&quot;);\n      if ( nullptr != elUnrestricted )\n      {\n         m_Unrestricted = Boolean::Parse( elUnrestricted );\n         return;\n      }\n\n      String^ elName = e-&gt;Attribute(&quot;Name&quot;);\n      m_Name = elName == nullptr ? nullptr : elName;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Permissions.NameIdPermission#10\">        Public Overrides Sub FromXml(ByVal e As SecurityElement)\n            &#39; The following code for unrestricted permission is only included as an example for\n            &#39; permissions that allow the unrestricted state. It is of no value for this permission.\n            Dim elUnrestricted As String = e.Attribute(&quot;Unrestricted&quot;)\n            If Nothing &lt;&gt; elUnrestricted Then\n                m_Unrestricted = Boolean.Parse(elUnrestricted)\n                Return\n            End If\n\n            Dim elName As String = e.Attribute(&quot;Name&quot;)\n            m_name = IIf(elName Is Nothing, Nothing, elName)\n        End Sub &#39;FromXml\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_GetHashCode\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a hash code for the <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> object that is suitable for use in hashing algorithms and data structures such as a hash table.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A hash code for the current <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> objects.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_Intersect_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_Intersect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intersect(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Security.IPermission Intersect (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A permission to intersect with the current permission. It must be of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A new permission that represents the intersection of the current permission and the specified permission. This new permission is <code>null</code> if the intersection is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is not <code>null</code> and is not an instance of the same class as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows an override of the Intersect method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Permissions.NameIdPermission#5\">        public override IPermission Intersect(IPermission target)\n        {\n            Console.WriteLine (&quot;************* Entering Intersect *********************&quot;);\n            if (target == null)\n            {\n                return null;\n            }\n#if(debug)\n            Console.WriteLine (&quot;This is = &quot; + (( NameIdPermission)this).Name);\n            Console.WriteLine (&quot;Target is &quot; + (( NameIdPermission)target).m_Name);\n#endif\n            if (!VerifyType(target))\n            {\n                throw new ArgumentException (String.Format (&quot;Argument is wrong type.&quot;, this.GetType ().FullName));\n            }\n\n             NameIdPermission operand = ( NameIdPermission)target;\n\n            if (operand.IsSubsetOf (this)) return operand.Copy ();\n            else if (this.IsSubsetOf (operand)) return this.Copy ();\n            else\n                return null;\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Permissions.NameIdPermission#5\">public:\n   virtual IPermission^ Intersect( IPermission^ target ) override\n   {\n      Console::WriteLine( &quot;************* Entering Intersect *********************&quot; );\n      if ( target == nullptr )\n      {\n         return nullptr;\n      }\n\n#if ( debug ) \n      Console::WriteLine( &quot;This is = {0}&quot;, ((NameIdPermission)this).Name );\n      Console::WriteLine( &quot;Target is {0}&quot;, ((NameIdPermission)target).m_Name );\n#endif \n\n      if (  !VerifyType( target ) )\n      {\n         throw gcnew ArgumentException( String::Format( &quot;Argument is wrong type.&quot;, this-&gt;GetType()-&gt;FullName ) );\n      }\n\n      NameIdPermission^ operand = dynamic_cast&lt;NameIdPermission^&gt;(target);\n\n      if ( operand-&gt;IsSubsetOf( this ) )\n      {\n         return operand-&gt;Copy();\n      }\n      else if ( this-&gt;IsSubsetOf( operand ) )\n      {\n         return this-&gt;Copy();\n      }\n      else\n      {\n         return nullptr;\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Permissions.NameIdPermission#5\">        Public Overrides Function Intersect(ByVal target As IPermission) As IPermission\n            Console.WriteLine(&quot;************* Entering Intersect *********************&quot;)\n            If target Is Nothing Then\n                Return Nothing\n            End If\n#If (Debug) Then\n\n            Console.WriteLine((&quot;This is = &quot; + CType(Me, NameIdPermission).Name))\n            Console.WriteLine((&quot;Target is &quot; + CType(target, NameIdPermission).m_name))\n#End If\n            If Not VerifyType(target) Then\n                Throw New ArgumentException(String.Format(&quot;Argument is wrong type.&quot;, Me.GetType().FullName))\n            End If\n\n            Dim operand As NameIdPermission = CType(target, NameIdPermission)\n\n            If operand.IsSubsetOf(Me) Then\n                Return operand.Copy()\n            ElseIf Me.IsSubsetOf(operand) Then\n                Return Me.Copy()\n            Else\n                Return Nothing\n            End If\n        End Function &#39;Intersect\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_IsSubsetOf_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_IsSubsetOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSubsetOf(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool IsSubsetOf (System.Security.IPermission target);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the current permission is a subset of the specified permission; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>target</code> parameter is not <code>null</code> and is not of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\. If this method returns <code>true</code>, the current permission represents no more access to the protected resource than does the specified permission.  </p>\n<p> The following statements are required to be <code>true</code> for all overrides of the IsSubsetOf method. <em>X</em>, <em>Y</em>, and <em>Z</em> represent custom code access permission objects that are not null references, <em>U</em> represents an unrestricted code access permission, and <em>N</em> represents an empty permission with a <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a> of <a class=\"xref\" href=\"system.security.permissions.permissionstate\" data-linktype=\"relative-path\">PermissionState</a>.  </p>\n<ul>\n<li><p><em>X</em>.IsSubsetOf(<em>X</em>) returns <code>true</code>.  </p>\n</li>\n<li><p><em>X</em>.IsSubsetOf(<em>Y</em>) returns the same value as <em>Y</em>.IsSubsetOf(<em>X</em>) if and only if <em>X</em> and <em>Y</em> represent the same set of permissions.  </p>\n</li>\n<li><p>If <em>X</em>.IsSubsetOf(<em>Y</em>) and <em>Y</em>.IsSubsetOf(<em>Z</em>) both return <code>true</code>, <em>X</em>.IsSubsetOf(<em>Z</em>) returns <code>true</code>.  </p>\n</li>\n<li><p><em>X</em>.IsSubsetOf(<em>U</em>) returns <code>true</code>.  </p>\n</li>\n<li><p><em>X</em>.IsSubsetOf(<em>N</em>) returns <code>false</code>.  </p>\n</li>\n<li><p><em>N</em>.IsSubsetOf(<em>X</em>) returns <code>true</code>.  </p>\n<p>If <em>X</em> and <em>Y</em> represent custom code access permission objects that are null references, <em>X</em>.IsSubsetOf(<em>Y</em>) returns <code>true</code>. If <em>Z</em> is also null, the compound set operation <em>X</em>.Union(<em>Y</em>).IsSubsetOf(<em>Z</em>) also returns <code>true</code> because the union of two null permissions is a null permission.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows an override of the IsSubsetOf method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Permissions.NameIdPermission#4\">        public override bool IsSubsetOf(IPermission target)\n        {\n#if(debug)\n            Console.WriteLine (&quot;************* Entering IsSubsetOf *********************&quot;);\n#endif\n            if (target == null)\n            {\n                Console.WriteLine (&quot;IsSubsetOf: target == null&quot;);\n                return false;\n            }\n#if(debug)\n\n            Console.WriteLine (&quot;This is = &quot; + (( NameIdPermission)this).Name);\n            Console.WriteLine (&quot;Target is &quot; + (( NameIdPermission)target).m_Name);\n#endif\n            try\n            {\n                 NameIdPermission operand = ( NameIdPermission)target;\n\n                // The following check for unrestricted permission is only included as an example for\n                // permissions that allow the unrestricted state. It is of no value for this permission.\n                if (true == operand.m_Unrestricted)\n                {\n                    return true;\n                }\n                else if (true == this.m_Unrestricted)\n                {\n                    return false;\n                }\n\n                if (this.m_Name != null)\n                {\n                    if (operand.m_Name == null) return false;\n\n                    if (this.m_Name == &quot;&quot;) return true;\n                }\n\n                if (this.m_Name.Equals (operand.m_Name)) return true;\n                else\n                {\n                    // Check for wild card character &#39;*&#39;.\n                    int i = operand.m_Name.LastIndexOf (&quot;*&quot;);\n\n                    if (i &gt; 0)\n                    {\n                        string prefix = operand.m_Name.Substring (0, i);\n\n                        if (this.m_Name.StartsWith (prefix))\n                        {\n                            return true;\n                        }\n                    }\n                }\n\n                return false;\n            }\n            catch (InvalidCastException)\n            {\n                throw new ArgumentException (String.Format (&quot;Argument_WrongType&quot;, this.GetType ().FullName));\n            }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Permissions.NameIdPermission#4\">public:\n   virtual bool IsSubsetOf( IPermission^ target ) override\n   {\n#if ( debug ) \n      Console::WriteLine( &quot;************* Entering IsSubsetOf *********************&quot; );\n#endif\n\n      if ( target == nullptr )\n      {\n         Console::WriteLine( &quot;IsSubsetOf: target == null&quot; );\n         return false;\n      }\n\n#if ( debug ) \n      Console::WriteLine( &quot;This is = {0}&quot;, ((NameIdPermission)this).Name );\n      Console::WriteLine( &quot;Target is {0}&quot;, ((NameIdPermission)target).m_Name );\n#endif\n\n      try\n      {\n         NameIdPermission^ operand = dynamic_cast&lt;NameIdPermission^&gt;(target);\n         \n         // The following check for unrestricted permission is only included as an example for\n         // permissions that allow the unrestricted state. It is of no value for this permission.\n         if ( true == operand-&gt;m_Unrestricted )\n         {\n            return true;\n         }\n         else if ( true == this-&gt;m_Unrestricted )\n         {\n            return false;\n         }\n\n         if ( this-&gt;m_Name != nullptr )\n         {\n            if ( operand-&gt;m_Name == nullptr )\n            {\n               return false;\n            }\n            if ( this-&gt;m_Name-&gt;Equals( &quot;&quot; ) )\n            {\n               return true;\n            }\n         }\n\n         if ( this-&gt;m_Name-&gt;Equals( operand-&gt;m_Name ) )\n         {\n            return true;\n         }\n         else\n         {\n            // Check for wild card character &#39;*&#39;.\n            int i = operand-&gt;m_Name-&gt;LastIndexOf( &quot;*&quot; );\n\n            if ( i &gt; 0 )\n            {\n               String^ prefix = operand-&gt;m_Name-&gt;Substring( 0, i );\n               if ( this-&gt;m_Name-&gt;StartsWith( prefix ) )\n               {\n                  return true;\n               }\n            }\n         }\n         return false;\n      }\n      catch ( InvalidCastException^ ) \n      {\n         throw gcnew ArgumentException( String::Format( &quot;Argument_WrongType&quot;, this-&gt;GetType()-&gt;FullName ) );\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Permissions.NameIdPermission#4\">        Public Overrides Function IsSubsetOf(ByVal target As IPermission) As Boolean\n\n#If (Debug) Then\n\n            Console.WriteLine(&quot;************* Entering IsSubsetOf *********************&quot;)\n#End If\n            If target Is Nothing Then\n                Console.WriteLine(&quot;IsSubsetOf: target == null&quot;)\n                Return False\n            End If\n#If (Debug) Then\n            Console.WriteLine((&quot;This is = &quot; + CType(Me, NameIdPermission).Name))\n            Console.WriteLine((&quot;Target is &quot; + CType(target, NameIdPermission).m_name))\n#End If\n            Try\n                Dim operand As NameIdPermission = CType(target, NameIdPermission)\n\n                &#39; The following check for unrestricted permission is only included as an example for\n                &#39; permissions that allow the unrestricted state. It is of no value for this permission.\n                If True = operand.m_Unrestricted Then\n                    Return True\n                ElseIf True = Me.m_Unrestricted Then\n                    Return False\n                End If\n\n                If Not (Me.m_name Is Nothing) Then\n                    If operand.m_name Is Nothing Then\n                        Return False\n                    End If\n                    If Me.m_name = &quot;&quot; Then\n                        Return True\n                    End If\n                End If\n                If Me.m_name.Equals(operand.m_name) Then\n                    Return True\n                Else\n                    &#39; Check for wild card character &#39;*&#39;.\n                    Dim i As Integer = operand.m_name.LastIndexOf(&quot;*&quot;)\n\n                    If i &gt; 0 Then\n                        Dim prefix As String = operand.m_name.Substring(0, i)\n\n                        If Me.m_name.StartsWith(prefix) Then\n                            Return True\n                        End If\n                    End If\n                End If\n\n                Return False\n            Catch\n                Throw New ArgumentException(String.Format(&quot;Argument_WrongType&quot;, Me.GetType().FullName))\n            End Try\n        End Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_PermitOnly\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_PermitOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PermitOnly()</div>        \r\n          </div>\r\n    \r\n            <p>Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void PermitOnly ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>There is already an active PermitOnly for the current frame.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> The PermitOnly method should be used only to protect resources from accidental access by fully trusted code. It should not be used to protect resources from intentional misuse by untrusted code. For example, if method <code>A</code> issues a PermitOnly for a permission and then calls method <code>B</code>, method <code>B</code> can overtly override the PermitOnly by issuing an <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Assert_\" data-linktype=\"relative-path\">Assert</a>. The called method is always higher in the stack. Therefore, if method <code>B</code> tries to access a protected resource, the security system begins checking for permissions with it because method <code>B</code> is the immediate caller, and then walks down the stack to confirm that there is no <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Deny_\" data-linktype=\"relative-path\">Deny</a> or PermitOnly lower in the stack. Method <code>B</code>, which is trying to access the resource, can stop the stack walk immediately by using the <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Assert_\" data-linktype=\"relative-path\">Assert</a> method. In that case, the PermitOnly placed on the stack by method <code>A</code> (the calling method) is never discovered.  </p>\n</div>\n<p> PermitOnly is similar to <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Deny_\" data-linktype=\"relative-path\">Deny</a>, in that both cause stack walks to fail when they would otherwise succeed. The difference is that <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Deny_\" data-linktype=\"relative-path\">Deny</a> specifies permissions that will cause the stack walk to fail, but PermitOnly specifies the only permissions that do not cause the stack walk to fail.  </p>\n<p> Call this method to ensure that your code can be used to access only the specified resources. The call to PermitOnly is effective until the calling code returns to its caller. Only one PermitOnly can be active on a frame. An attempt to call PermitOnly when an active PermitOnly exists on the frame results in a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a>. Call <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertPermitOnly_\" data-linktype=\"relative-path\">RevertPermitOnly</a> or <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_RevertAll_\" data-linktype=\"relative-path\">RevertAll</a> to remove an active PermitOnly.  </p>\n<p> PermitOnly is ignored for a permission not granted because a demand for that permission will not succeed. However, if code lower on the call stack later calls <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Demand_\" data-linktype=\"relative-path\">Demand</a> for that permission, a <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown when the stack walk reaches the code that tried to call PermitOnly. This is because the code that called PermitOnly has not been granted the permission, even though it called PermitOnly for that permission. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_RevertAll\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_RevertAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RevertAll()</div>        \r\n          </div>\r\n    \r\n            <p>Causes all previous overrides for the current frame to be removed and no longer in effect.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void RevertAll ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no previous <span class=\"xref\">stem.Security.CodeAccessPermission.Assert*</span>, <span class=\"xref\">stem.Security.CodeAccessPermission.Deny*</span>, or <span class=\"xref\">stem.Security.CodeAccessPermission.PermitOnly*</span> for the current frame.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there are no overrides (<a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Assert_\" data-linktype=\"relative-path\">Assert</a>, <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Deny_\" data-linktype=\"relative-path\">Deny</a>, or <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_PermitOnly_\" data-linktype=\"relative-path\">PermitOnly</a>) for the current frame, an <a class=\"xref\" href=\"system.executionengineexception\" data-linktype=\"relative-path\">ExecutionEngineException</a> is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_RevertAssert\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_RevertAssert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RevertAssert()</div>        \r\n          </div>\r\n    \r\n            <p>Causes any previous <span class=\"xref\">stem.Security.CodeAccessPermission.Assert*</span> for the current frame to be removed and no longer in effect.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void RevertAssert ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no previous <span class=\"xref\">stem.Security.CodeAccessPermission.Assert*</span> for the current frame.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there is no <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Assert_\" data-linktype=\"relative-path\">Assert</a> for the current frame, an <a class=\"xref\" href=\"system.executionengineexception\" data-linktype=\"relative-path\">ExecutionEngineException</a> is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_RevertDeny\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_RevertDeny_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RevertDeny()</div>        \r\n          </div>\r\n    \r\n            <p>Causes any previous <span class=\"xref\">stem.Security.CodeAccessPermission.Deny*</span> for the current frame to be removed and no longer in effect.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void RevertDeny ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no previous <span class=\"xref\">stem.Security.CodeAccessPermission.Deny*</span> for the current frame.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there is no <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_Deny_\" data-linktype=\"relative-path\">Deny</a> for the current frame, an <a class=\"xref\" href=\"system.executionengineexception\" data-linktype=\"relative-path\">ExecutionEngineException</a> is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_RevertPermitOnly\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_RevertPermitOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RevertPermitOnly()</div>        \r\n          </div>\r\n    \r\n            <p>Causes any previous <span class=\"xref\">stem.Security.CodeAccessPermission.PermitOnly*</span> for the current frame to be removed and no longer in effect.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void RevertPermitOnly ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no previous <span class=\"xref\">stem.Security.CodeAccessPermission.PermitOnly*</span> for the current frame.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If there is no <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_PermitOnly_\" data-linktype=\"relative-path\">PermitOnly</a> for the current frame, an <a class=\"xref\" href=\"system.executionengineexception\" data-linktype=\"relative-path\">ExecutionEngineException</a> is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_ToString\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Creates and returns a string representation of the current permission object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representation of the current permission object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is useful in debugging when you need to display the permission as a string.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_ToXml\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_ToXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToXml()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, creates an XML encoding of the security object and its current state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Security.SecurityElement ToXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></div>\r\n                  </div>\r\n                  <p>An XML encoding of the security object, including any state information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Custom code that extends security objects needs to implement the ToXml and <a class=\"xref\" href=\"system.security.codeaccesspermission#System_Security_CodeAccessPermission_FromXml_\" data-linktype=\"relative-path\">FromXml</a> methods to make the objects security-encodable.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows an override of the ToXml method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Permissions.NameIdPermission#11\">        public override SecurityElement ToXml()\n        {\n            // Use the SecurityElement class to encode the permission to XML.\n            SecurityElement esd = new SecurityElement(&quot;IPermission&quot;);\n            String name = typeof( NameIdPermission).AssemblyQualifiedName;\n            esd.AddAttribute(&quot;class&quot;, name);\n            esd.AddAttribute(&quot;version&quot;, &quot;1.0&quot;);\n\n            // The following code for unrestricted permission is only included as an example for\n            // permissions that allow the unrestricted state. It is of no value for this permission.\n            if (m_Unrestricted)\n            {\n                esd.AddAttribute(&quot;Unrestricted&quot;, true.ToString());\n            }\n            if (m_Name != null) esd.AddAttribute( &quot;Name&quot;, m_Name );\n            return esd;\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Permissions.NameIdPermission#11\">public:\n   virtual SecurityElement^ ToXml() override\n   {\n      // Use the SecurityElement class to encode the permission to XML.\n      SecurityElement^ esd = gcnew SecurityElement( &quot;IPermission&quot; );\n      String^ name = NameIdPermission::typeid-&gt;AssemblyQualifiedName;\n      esd-&gt;AddAttribute( &quot;class&quot;, name );\n      esd-&gt;AddAttribute( &quot;version&quot;, &quot;1.0&quot; );\n      \n      // The following code for unrestricted permission is only included as an example for\n      // permissions that allow the unrestricted state. It is of no value for this permission.\n      if ( m_Unrestricted )\n      {\n         esd-&gt;AddAttribute( &quot;Unrestricted&quot;, true.ToString() );\n      }\n\n      if ( m_Name != nullptr )\n      {\n         esd-&gt;AddAttribute( &quot;Name&quot;, m_Name );\n      }\n\n      return esd;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Permissions.NameIdPermission#11\">        Public Overrides Function ToXml() As SecurityElement\n            &#39; Use the SecurityElement class to encode the permission to XML.\n            Dim esd As New SecurityElement(&quot;IPermission&quot;)\n\n            Dim name As String = GetType(NameIdPermission).AssemblyQualifiedName\n            esd.AddAttribute(&quot;class&quot;, name)\n            esd.AddAttribute(&quot;version&quot;, &quot;1.0&quot;)\n\n            &#39; The following code for unrestricted permission is only included as an example for\n            &#39; permissions that allow the unrestricted state. It is of no value for this permission.\n            If m_Unrestricted Then\n                esd.AddAttribute(&quot;Unrestricted&quot;, True.ToString())\n            End If\n            If Not (m_Name Is Nothing) Then\n                esd.AddAttribute(&quot;Name&quot;, m_Name)\n            End If\n            Return esd\n        End Function &#39;ToXml\n    End Class &#39; NameIdPermission \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_CodeAccessPermission_Union_System_Security_IPermission_\">\r\n    \r\n            <a id=\"System_Security_CodeAccessPermission_Union_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union(IPermission)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.IPermission Union (System.Security.IPermission other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A permission to combine with the current permission. It must be of the same type as the current permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></div>\r\n                  </div>\r\n                  <p>A new permission that represents the union of the current permission and the specified permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>other</code> parameter is not <code>null</code>. This method is only supported at this level when passed <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows an override of the Union method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.codeaccesspermission\" data-linktype=\"relative-path\">CodeAccessPermission</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Permissions.NameIdPermission#12\">        public override IPermission Union(IPermission target)\n        {\n#if(debug)\n            Console.WriteLine (&quot;************* Entering Union *********************&quot;);\n#endif\n            if (target == null)\n            {\n                return this;\n            }\n#if(debug)\n            Console.WriteLine (&quot;This is = &quot; + (( NameIdPermission)this).Name);\n            Console.WriteLine (&quot;Target is &quot; + (( NameIdPermission)target).m_Name);\n#endif\n            if (!VerifyType(target))\n            {\n                throw new ArgumentException (String.Format (&quot;Argument_WrongType&quot;, this.GetType ().FullName));\n            }\n\n             NameIdPermission operand = ( NameIdPermission)target;\n\n            if (operand.IsSubsetOf (this)) return this.Copy ();\n            else if (this.IsSubsetOf (operand)) return operand.Copy ();\n            else\n                return null;\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Permissions.NameIdPermission#12\">public:\n   virtual IPermission^ Union( IPermission^ target ) override\n   {\n#if ( debug ) \n      Console::WriteLine( &quot;************* Entering Union *********************&quot; );\n#endif \n\n      if ( target == nullptr )\n      {\n         return this;\n      }\n\n#if ( debug ) \n      Console::WriteLine( &quot;This is = {0}&quot;, ((NameIdPermission)this).Name );\n      Console::WriteLine( &quot;Target is {0}&quot;, ((NameIdPermission)target).m_Name );\n#endif \n\n      if (  !VerifyType( target ) )\n      {\n         throw gcnew ArgumentException( String::Format( &quot;Argument_WrongType&quot;, this-&gt;GetType()-&gt;FullName ) );\n      }\n\n      NameIdPermission^ operand = dynamic_cast&lt;NameIdPermission^&gt;(target);\n\n      if ( operand-&gt;IsSubsetOf( this ) )\n      {\n         return this-&gt;Copy();\n      }\n      else if ( this-&gt;IsSubsetOf( operand ) )\n      {\n         return operand-&gt;Copy();\n      }\n      else\n      {\n         return nullptr;\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Permissions.NameIdPermission#12\">        Public Overrides Function Union(ByVal target As IPermission) As IPermission\n#If (Debug) Then\n\n            Console.WriteLine(&quot;************* Entering Union *********************&quot;)\n#End If\n            If target Is Nothing Then\n                Return Me\n            End If\n#If (Debug) Then\n            Console.WriteLine((&quot;This is = &quot; + CType(Me, NameIdPermission).Name))\n            Console.WriteLine((&quot;Target is &quot; + CType(target, NameIdPermission).m_name))\n#End If\n            If Not VerifyType(target) Then\n                Throw New ArgumentException(String.Format(&quot;Argument_WrongType&quot;, Me.GetType().FullName))\n            End If\n\n            Dim operand As NameIdPermission = CType(target, NameIdPermission)\n\n            If operand.IsSubsetOf(Me) Then\n                Return Me.Copy()\n            ElseIf Me.IsSubsetOf(operand) Then\n                Return operand.Copy()\n            Else\n                Return Nothing\n            End If\n        End Function &#39;Union\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.CodeAccessPermission.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.CodeAccessPermission.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.Assert\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.Copy\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.Demand\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.Deny\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.Equals\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.FromXml\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.Intersect\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.IsSubsetOf\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.PermitOnly\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.RevertAll\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.RevertAssert\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.RevertDeny\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.RevertPermitOnly\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.ToString\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.ToXml\">\r\n<meta name=\"APIName\" content=\"System.Security.CodeAccessPermission.Union\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"166a01ab-8619-f62e-3f65-50ddd2282d0a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the underlying structure of all code access permissions.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.CodeAccessPermission\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.CodeAccessPermission.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.CodeAccessPermission.yml","open_to_public_contributors":true,"api_name":["System.Security.CodeAccessPermission","System.Security.CodeAccessPermission..ctor","System.Security.CodeAccessPermission.Assert","System.Security.CodeAccessPermission.Copy","System.Security.CodeAccessPermission.Demand","System.Security.CodeAccessPermission.Deny","System.Security.CodeAccessPermission.Equals","System.Security.CodeAccessPermission.FromXml","System.Security.CodeAccessPermission.GetHashCode","System.Security.CodeAccessPermission.Intersect","System.Security.CodeAccessPermission.IsSubsetOf","System.Security.CodeAccessPermission.PermitOnly","System.Security.CodeAccessPermission.RevertAll","System.Security.CodeAccessPermission.RevertAssert","System.Security.CodeAccessPermission.RevertDeny","System.Security.CodeAccessPermission.RevertPermitOnly","System.Security.CodeAccessPermission.ToString","System.Security.CodeAccessPermission.ToXml","System.Security.CodeAccessPermission.Union"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.CodeAccessPermission","System::Security::CodeAccessPermission","System.Security.CodeAccessPermission.#ctor","System::Security::CodeAccessPermission::#ctor","System.Security.CodeAccessPermission.Assert","System::Security::CodeAccessPermission::Assert","System.Security.CodeAccessPermission.Copy","System::Security::CodeAccessPermission::Copy","System.Security.CodeAccessPermission.Demand","System::Security::CodeAccessPermission::Demand","System.Security.CodeAccessPermission.Deny","System::Security::CodeAccessPermission::Deny","System.Security.CodeAccessPermission.Equals","System::Security::CodeAccessPermission::Equals","System.Security.CodeAccessPermission.FromXml","System::Security::CodeAccessPermission::FromXml","System.Security.CodeAccessPermission.GetHashCode","System::Security::CodeAccessPermission::GetHashCode","System.Security.CodeAccessPermission.Intersect","System::Security::CodeAccessPermission::Intersect","System.Security.CodeAccessPermission.IsSubsetOf","System::Security::CodeAccessPermission::IsSubsetOf","System.Security.CodeAccessPermission.PermitOnly","System::Security::CodeAccessPermission::PermitOnly","System.Security.CodeAccessPermission.RevertAll","System::Security::CodeAccessPermission::RevertAll","System.Security.CodeAccessPermission.RevertAssert","System::Security::CodeAccessPermission::RevertAssert","System.Security.CodeAccessPermission.RevertDeny","System::Security::CodeAccessPermission::RevertDeny","System.Security.CodeAccessPermission.RevertPermitOnly","System::Security::CodeAccessPermission::RevertPermitOnly","System.Security.CodeAccessPermission.ToString","System::Security::CodeAccessPermission::ToString","System.Security.CodeAccessPermission.ToXml","System::Security::CodeAccessPermission::ToXml","System.Security.CodeAccessPermission.Union","System::Security::CodeAccessPermission::Union"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"166a01ab-8619-f62e-3f65-50ddd2282d0a","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security/CodeAccessPermission.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CodeAccessPermission class | Microsoft Docs","_op_ogTitle":"CodeAccessPermission class","description":"Defines the underlying structure of all code access permissions.\n","toc_asset_id":"_splitted/System.Security/toc.json","toc_rel":"_splitted/System.Security/toc.json","source_url":"","ms.assetid":"System.Security.CodeAccessPermission","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.codeaccesspermission","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.codeaccesspermission","fileRelativePath":"System.Security.CodeAccessPermission.html"},"themesRelativePathToOutputRoot":"_themes/"}