{"content":"    \r\n    <h1 id=\"System_Drawing_Drawing2D_GraphicsPathIterator\">\r\n      <span class=\"lang-csharp\">GraphicsPathIterator</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides the ability to iterate through subpaths in a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> and test the types of shapes contained in each subpath. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">System.MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">GraphicsPathIterator</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator__ctor_System_Drawing_Drawing2D_GraphicsPath_\" data-linktype=\"self-bookmark\">GraphicsPathIterator(GraphicsPath)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> class with the specified <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of points in the path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_SubpathCount\" data-linktype=\"self-bookmark\">SubpathCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of subpaths in the path.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_CopyData_System_Drawing_PointF____System_Byte____System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">CopyData(PointF[],Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the <span class=\"xref\">stem.Drawing.Drawing2D.GraphicsPath.PathPoints*</span> property and <span class=\"xref\">stem.Drawing.Drawing2D.GraphicsPath.PathTypes*</span> property arrays of the associated <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> into the two specified arrays.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by this <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_Enumerate_System_Drawing_PointF____System_Byte____\" data-linktype=\"self-bookmark\">Enumerate(PointF[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the <span class=\"xref\">stem.Drawing.Drawing2D.GraphicsPath.PathPoints*</span> property and <span class=\"xref\">stem.Drawing.Drawing2D.GraphicsPath.PathTypes*</span> property arrays of the associated <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> into the two specified arrays.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_Finalize\" data-linktype=\"self-bookmark\">Finalize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_HasCurve\" data-linktype=\"self-bookmark\">HasCurve()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the path associated with this <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> contains a curve.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_NextMarker_System_Drawing_Drawing2D_GraphicsPath_\" data-linktype=\"self-bookmark\">NextMarker(GraphicsPath)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> object has a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object associated with it. The NextMarker method increments the associated <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> to the next marker in its path and copies all the points contained between the current marker and the next marker (or end of path) to a second <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object passed in to the parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_NextMarker_System_Int32__System_Int32__\" data-linktype=\"self-bookmark\">NextMarker(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Increments the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> to the next marker in the path and returns the start and stop indexes by way of the [out] parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_NextPathType_System_Byte__System_Int32__System_Int32__\" data-linktype=\"self-bookmark\">NextPathType(Byte,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the starting index and the ending index of the next group of data points that all have the same type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_NextSubpath_System_Drawing_Drawing2D_GraphicsPath_System_Boolean__\" data-linktype=\"self-bookmark\">NextSubpath(GraphicsPath,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the next figure (subpath) from the associated path of this <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_NextSubpath_System_Int32__System_Int32__System_Boolean__\" data-linktype=\"self-bookmark\">NextSubpath(Int32,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> to the next subpath in the path. The start index and end index of the next subpath are contained in the [out] parameters.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Drawing_Drawing2D_GraphicsPathIterator_Rewind\" data-linktype=\"self-bookmark\">Rewind()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Rewinds this <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> to the beginning of its associated path.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator__ctor_System_Drawing_Drawing2D_GraphicsPath_\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GraphicsPathIterator(GraphicsPath)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> class with the specified <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object for which this helper class is to be initialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_Count\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of points in the path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of points in the path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_SubpathCount\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_SubpathCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SubpathCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of subpaths in the path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int SubpathCount { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of subpaths in the path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_CopyData_System_Drawing_PointF____System_Byte____System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_CopyData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyData(PointF[],Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the <span class=\"xref\">stem.Drawing.Drawing2D.GraphicsPath.PathPoints*</span> property and <span class=\"xref\">stem.Drawing.Drawing2D.GraphicsPath.PathTypes*</span> property arrays of the associated <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> into the two specified arrays.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>points</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.pointf\" data-linktype=\"relative-path\">PointF</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Upon return, contains an array of <a class=\"xref\" href=\"system.drawing.pointf\" data-linktype=\"relative-path\">PointF</a> structures that represents the points in the path.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Upon return, contains an array of bytes that represents the types of points in the path.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies the starting index of the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>endIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies the ending index of the arrays.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of points copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <code>startIndex</code> and <code>endIndex</code> parameters to copy a specified range of the path data.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, an <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_OnPaint_\" data-linktype=\"relative-path\">OnPaint</a> event object. The code performs the following actions:  </p>\n<ul>\n<li><p>Creates a graphics path.  </p>\n</li>\n<li><p>Populates it with several primitives and some markers.  </p>\n</li>\n<li><p>Lists the path data on the left side of the screen.  </p>\n</li>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> and rewinds it.  </p>\n</li>\n<li><p>Increments the path data index to the second marker.  </p>\n</li>\n<li><p>Calls the CopyData method to copy the path data contained between the start and end indexes to the points and types arrays.  </p>\n</li>\n<li><p>Lists this copied data on the right side of the screen.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1\">    Public Sub CopyDataExample(ByVal e As PaintEventArgs)\n\n        &#39; Create a graphics path.\n        Dim myPath As New GraphicsPath\n\n        &#39; Set up a points array.\n        Dim myPoints As Point() = {New Point(20, 20), _\n        New Point(120, 120), New Point(20, 120), New Point(20, 20)}\n\n        &#39; Create a rectangle.\n        Dim myRect As New Rectangle(120, 120, 100, 100)\n\n        &#39; Add the points, rectangle, and an ellipse to the path.\n        myPath.AddLines(myPoints)\n        myPath.SetMarkers()\n        myPath.AddRectangle(myRect)\n        myPath.SetMarkers()\n        myPath.AddEllipse(220, 220, 100, 100)\n\n        &#39; Get the total number of points for the path, and arrays of the\n        &#39; points and types.\n        Dim myPathPointCount As Integer = myPath.PointCount\n        Dim myPathPoints As PointF() = myPath.PathPoints\n        Dim myPathTypes As Byte() = myPath.PathTypes\n\n        &#39; Set up variables for listing the array of points on the left side\n        &#39; of the screen.\n        Dim i As Integer\n        Dim j As Single = 20\n        Dim myFont As New Font(&quot;Arial&quot;, 8)\n        Dim myBrush As New SolidBrush(Color.Black)\n\n        &#39; List the set of points and types and types to the left side of\n        &#39; the screen.\n        For i = 0 To myPathPointCount - 1\n            e.Graphics.DrawString(myPathPoints(i).X.ToString() + &quot;, &quot; + _\n            myPathPoints(i).Y.ToString() + &quot;, &quot; + _\n            myPathTypes(i).ToString(), myFont, myBrush, 20, j)\n            j += 20\n        Next i\n\n        &#39; Create a GraphicsPathIterator for myPath and rewind it.\n        Dim myPathIterator As New GraphicsPathIterator(myPath)\n        myPathIterator.Rewind()\n\n        &#39; Set up the arrays to receive the copied data.\n        Dim points(myPathIterator.Count) As PointF\n        Dim types(myPathIterator.Count) As Byte\n        Dim myStartIndex As Integer\n        Dim myEndIndex As Integer\n\n        &#39; Increment the starting index to the second marker in the path.\n        myPathIterator.NextMarker(myStartIndex, myEndIndex)\n        myPathIterator.NextMarker(myStartIndex, myEndIndex)\n\n        &#39; Copy all the points and types from the starting index to the\n        &#39; ending index to the  points array and the types array\n        &#39; respectively.\n        Dim numPointsCopied As Integer = myPathIterator.CopyData(points, _\n        types, myStartIndex, myEndIndex)\n\n        &#39; List the copied points to the right side of the screen.\n        j = 20\n        Dim copiedStartIndex As Integer = 0\n        For i = 0 To numPointsCopied - 1\n            copiedStartIndex = myStartIndex + i\n            e.Graphics.DrawString(&quot;Point: &quot; + _\n            copiedStartIndex.ToString() + &quot;, Value: &quot; + _\n            points(i).ToString() + &quot;, Type: &quot; + types(i).ToString(), _\n            myFont, myBrush, 200, j)\n            j += 20\n        Next i\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1\">public:\n   void CopyDataExample( PaintEventArgs^ e )\n   {\n      // Create a graphics path.\n      GraphicsPath^ myPath = gcnew GraphicsPath;\n\n      // Set up a points array.\n      array&lt;Point&gt;^ myPoints = {Point(20,20),Point(120,120),Point(20,120),Point(20,20)};\n\n      // Create a rectangle.\n      Rectangle myRect = Rectangle(120,120,100,100);\n\n      // Add the points, rectangle, and an ellipse to the path.\n      myPath-&gt;AddLines( myPoints );\n      myPath-&gt;SetMarkers();\n      myPath-&gt;AddRectangle( myRect );\n      myPath-&gt;SetMarkers();\n      myPath-&gt;AddEllipse( 220, 220, 100, 100 );\n\n      // Get the total number of points for the path, and arrays of\n      // the  points and types.\n      int myPathPointCount = myPath-&gt;PointCount;\n      array&lt;PointF&gt;^myPathPoints = myPath-&gt;PathPoints;\n      array&lt;Byte&gt;^myPathTypes = myPath-&gt;PathTypes;\n\n      // Set up variables for listing the array of points on the left\n      // side of the screen.\n      int i;\n      float j = 20;\n      System::Drawing::Font^ myFont = gcnew System::Drawing::Font( &quot;Arial&quot;,8 );\n      SolidBrush^ myBrush = gcnew SolidBrush( Color::Black );\n\n      // List the set of points and types and types to the left side\n      // of the screen.\n      for ( i = 0; i &lt; myPathPointCount; i++ )\n      {\n         e-&gt;Graphics-&gt;DrawString( myPathPoints[ i ].X + &quot;, &quot; + myPathPoints[ i ].Y + &quot;, &quot; + myPathTypes[ i ], myFont, myBrush, 20, j );\n         j += 20;\n      }\n\n      // Create a GraphicsPathIterator for myPath and rewind it.\n      GraphicsPathIterator^ myPathIterator = gcnew GraphicsPathIterator( myPath );\n      myPathIterator-&gt;Rewind();\n\n      // Set up the arrays to receive the copied data.\n      array&lt;PointF&gt;^points = gcnew array&lt;PointF&gt;(myPathIterator-&gt;Count);\n      array&lt;Byte&gt;^types = gcnew array&lt;Byte&gt;(myPathIterator-&gt;Count);\n      int myStartIndex;\n      int myEndIndex;\n      \n      // Increment the starting index to the second marker in the\n      // path.\n      myPathIterator-&gt;NextMarker( myStartIndex, myEndIndex );\n      myPathIterator-&gt;NextMarker( myStartIndex, myEndIndex );\n      \n      // Copy all the points and types from the starting index to the\n      // ending index to the points array and the types array\n      // respectively.\n      int numPointsCopied = myPathIterator-&gt;CopyData( points, types, myStartIndex, myEndIndex );\n      \n      // List the copied points to the right side of the screen.\n      j = 20;\n      int copiedStartIndex = 0;\n      for ( i = 0; i &lt; numPointsCopied; i++ )\n      {\n         copiedStartIndex = myStartIndex + i;\n         e-&gt;Graphics-&gt;DrawString( String::Format( &quot;Point: {0}, Value: {1}, Type: {2}&quot;, copiedStartIndex, points[ i ], types[ i ] ), myFont, myBrush, 200, j );\n         j += 20;\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1\">        public void CopyDataExample(PaintEventArgs e)\n        {\n                     \n            // Create a graphics path.\n            GraphicsPath myPath = new GraphicsPath();\n                     \n            // Set up a points array.\n            Point[] myPoints =\n                     {\n                         new Point(20, 20),\n                         new Point(120, 120),\n                         new Point(20, 120),\n                         new Point(20, 20)\n                     };\n                     \n            // Create a rectangle.\n            Rectangle myRect = new Rectangle(120, 120, 100, 100);\n                     \n            // Add the points, rectangle, and an ellipse to the path.\n            myPath.AddLines(myPoints);\n            myPath.SetMarkers();\n            myPath.AddRectangle(myRect);\n            myPath.SetMarkers();\n            myPath.AddEllipse(220, 220, 100, 100);\n                     \n            // Get the total number of points for the path, and arrays of\n            // the  points and types.\n            int myPathPointCount = myPath.PointCount;\n            PointF[] myPathPoints = myPath.PathPoints;\n            byte[] myPathTypes = myPath.PathTypes;\n                     \n            // Set up variables for listing the array of points on the left\n            // side of the screen.\n            int i;\n            float j = 20;\n            Font myFont = new Font(&quot;Arial&quot;, 8);\n            SolidBrush myBrush = new SolidBrush(Color.Black);\n                     \n            // List the set of points and types and types to the left side\n            // of the screen.\n            for(i=0; i&lt;myPathPointCount; i++)\n            {\n                e.Graphics.DrawString(myPathPoints[i].X.ToString()+\n                    &quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +\n                    myPathTypes[i].ToString(),\n                    myFont,\n                    myBrush,\n                    20,\n                    j);\n                j+=20;\n            }\n                     \n            // Create a GraphicsPathIterator for myPath and rewind it.\n            GraphicsPathIterator myPathIterator =\n                new GraphicsPathIterator(myPath);\n            myPathIterator.Rewind();\n                     \n            // Set up the arrays to receive the copied data.\n            PointF[] points = new PointF[myPathIterator.Count];\n            byte[] types = new byte[myPathIterator.Count];\n            int myStartIndex;\n            int myEndIndex;\n                     \n            // Increment the starting index to the second marker in the\n            // path.\n            myPathIterator.NextMarker(out myStartIndex, out myEndIndex);\n            myPathIterator.NextMarker(out myStartIndex, out myEndIndex);\n                     \n            // Copy all the points and types from the starting index to the\n            // ending index to the points array and the types array\n            // respectively.\n            int numPointsCopied = myPathIterator.CopyData(\n                ref points,\n                ref types,\n                myStartIndex,\n                myEndIndex);\n                     \n            // List the copied points to the right side of the screen.\n            j = 20;\n            int copiedStartIndex = 0;\n            for(i=0; i&lt;numPointsCopied; i++)\n            {\n                copiedStartIndex = myStartIndex + i;\n                e.Graphics.DrawString(\n                    &quot;Point: &quot; + copiedStartIndex.ToString() +\n                    &quot;, Value: &quot; + points[i].ToString() +\n                    &quot;, Type: &quot; + types[i].ToString(),\n                    myFont,\n                    myBrush,\n                    200,\n                    j);\n                j+=20;\n            }\n        }\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_Dispose\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by this <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling <code>Dispose</code> allows the resources used by this <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> object to be reallocated for other purposes.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_Enumerate_System_Drawing_PointF____System_Byte____\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_Enumerate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Enumerate(PointF[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Copies the <span class=\"xref\">stem.Drawing.Drawing2D.GraphicsPath.PathPoints*</span> property and <span class=\"xref\">stem.Drawing.Drawing2D.GraphicsPath.PathTypes*</span> property arrays of the associated <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> into the two specified arrays.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>points</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.pointf\" data-linktype=\"relative-path\">PointF</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Upon return, contains an array of <a class=\"xref\" href=\"system.drawing.pointf\" data-linktype=\"relative-path\">PointF</a> structures that represents the points in the path.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>types</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Upon return, contains an array of bytes that represents the types of points in the path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of points copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, an <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_OnPaint_\" data-linktype=\"relative-path\">OnPaint</a> event object. The code performs the following actions:  </p>\n<ul>\n<li><p>Creates a graphics path.  </p>\n</li>\n<li><p>Populates it with several primitives and some markers.  </p>\n</li>\n<li><p>Lists the path data on the left side of the screen.  </p>\n</li>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> and rewinds it.  </p>\n</li>\n<li><p>Increments the path data index to the second marker.  </p>\n</li>\n<li><p>Calls the Enumerate method to copy the path data to the <code>points</code> and <code>types</code> arrays.  </p>\n</li>\n<li><p>Lists this copied data on the right side of the screen.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2\">    Public Sub EnumerateExample(ByVal e As PaintEventArgs)\n        Dim myPath As New GraphicsPath\n        Dim myPoints As Point() = {New Point(20, 20), _\n            New Point(120, 120), New Point(20, 120), New Point(20, 20)}\n        Dim myRect As New Rectangle(120, 120, 100, 100)\n        myPath.AddLines(myPoints)\n        myPath.AddRectangle(myRect)\n        myPath.AddEllipse(220, 220, 100, 100)\n\n        &#39; Get the total number of points for the path, and arrays of the\n        &#39; points and types.\n        Dim myPathPointCount As Integer = myPath.PointCount\n        Dim myPathPoints As PointF() = myPath.PathPoints\n        Dim myPathTypes As Byte() = myPath.PathTypes\n\n        &#39; Set up variables for listing the array of points on the left side\n        &#39; of the screen.\n        Dim i As Integer\n        Dim j As Single = 20\n        Dim myFont As New Font(&quot;Arial&quot;, 8)\n        Dim myBrush As New SolidBrush(Color.Black)\n\n        &#39; List the set of points and types and types to the left side of\n        &#39; the screen.\n        e.Graphics.DrawString(&quot;Original Data&quot;, myFont, myBrush, 20, j)\n        j += 20\n        For i = 0 To myPathPointCount - 1\n            e.Graphics.DrawString(myPathPoints(i).X.ToString() &amp; &quot;, &quot; &amp; _\n            myPathPoints(i).Y.ToString() &amp; &quot;, &quot; &amp; _\n            myPathTypes(i).ToString(), myFont, myBrush, 20, j)\n            j += 20\n        Next i\n\n        &#39; Create a GraphicsPathIterator for myPath.\n        Dim myPathIterator As New GraphicsPathIterator(myPath)\n        myPathIterator.Rewind()\n        Dim points(myPathIterator.Count) As PointF\n        Dim types(myPathIterator.Count) As Byte\n        Dim numPoints As Integer = myPathIterator.Enumerate(points, types)\n\n        &#39; Draw the set of copied points and types to the screen.\n        j = 20\n        e.Graphics.DrawString(&quot;Copied Data&quot;, myFont, myBrush, 200, j)\n        j += 20\n        For i = 0 To points.Length - 1\n            e.Graphics.DrawString(&quot;Point: &quot; &amp; i &amp; &quot;, &quot; &amp; &quot;Value: &quot; &amp; _\n                points(i).ToString() &amp; &quot;, &quot; &amp; &quot;Type: &quot; &amp; _\n                types(i).ToString(), myFont, myBrush, 200, j)\n            j += 20\n        Next i\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2\">public:\n   void EnumerateExample( PaintEventArgs^ e )\n   {\n      GraphicsPath^ myPath = gcnew GraphicsPath;\n      array&lt;Point&gt;^ myPoints = {Point(20,20),Point(120,120),Point(20,120),Point(20,20)};\n      Rectangle myRect = Rectangle(120,120,100,100);\n      myPath-&gt;AddLines( myPoints );\n      myPath-&gt;AddRectangle( myRect );\n      myPath-&gt;AddEllipse( 220, 220, 100, 100 );\n\n      // Get the total number of points for the path, and arrays of\n      // the  points and types.\n      int myPathPointCount = myPath-&gt;PointCount;\n      array&lt;PointF&gt;^myPathPoints = myPath-&gt;PathPoints;\n      array&lt;Byte&gt;^myPathTypes = myPath-&gt;PathTypes;\n\n      // Set up variables for listing the array of points on the left\n      // side of the screen.\n      int i;\n      float j = 20;\n      System::Drawing::Font^ myFont = gcnew System::Drawing::Font( &quot;Arial&quot;,8 );\n      SolidBrush^ myBrush = gcnew SolidBrush( Color::Black );\n\n      // List the set of points and types and types to the left side\n      // of the screen.\n      e-&gt;Graphics-&gt;DrawString( &quot;Original Data&quot;, myFont, myBrush, 20, j );\n      j += 20;\n      for ( i = 0; i &lt; myPathPointCount; i++ )\n      {\n         e-&gt;Graphics-&gt;DrawString( myPathPoints[ i ].X + &quot;, &quot; + myPathPoints[ i ].Y + &quot;, &quot; + myPathTypes[ i ], myFont, myBrush, 20, j );\n         j += 20;\n      }\n\n      // Create a GraphicsPathIterator for myPath.\n      GraphicsPathIterator^ myPathIterator = gcnew GraphicsPathIterator( myPath );\n      myPathIterator-&gt;Rewind();\n      array&lt;PointF&gt;^points = gcnew array&lt;PointF&gt;(myPathIterator-&gt;Count);\n      array&lt;Byte&gt;^types = gcnew array&lt;Byte&gt;(myPathIterator-&gt;Count);\n\n      // int numPoints = myPathIterator-&gt;Enumerate(&amp;points, &amp;types);\n      // Draw the set of copied points and types to the screen.\n      j = 20;\n      e-&gt;Graphics-&gt;DrawString( &quot;Copied Data&quot;, myFont, myBrush, 200, j );\n      j += 20;\n      for ( i = 0; i &lt; points-&gt;Length; i++ )\n      {\n         e-&gt;Graphics-&gt;DrawString( String::Format( &quot;Point: {0}, Value: {1}, Type: {2}&quot;, i, points[ i ], types[ i ] ), myFont, myBrush, 200, j );\n         j += 20;\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2\">        public void EnumerateExample(PaintEventArgs e)\n        {\n            GraphicsPath myPath = new GraphicsPath();\n            Point[] myPoints =\n                     {\n                         new Point(20, 20),\n                         new Point(120, 120),\n                         new Point(20, 120),\n                         new Point(20, 20)\n                     };\n            Rectangle myRect = new Rectangle(120, 120, 100, 100);\n            myPath.AddLines(myPoints);\n            myPath.AddRectangle(myRect);\n            myPath.AddEllipse(220, 220, 100, 100);\n                     \n            // Get the total number of points for the path, and arrays of\n            // the  points and types.\n            int myPathPointCount = myPath.PointCount;\n            PointF[] myPathPoints = myPath.PathPoints;\n            byte[] myPathTypes = myPath.PathTypes;\n                     \n            // Set up variables for listing the array of points on the left\n            // side of the screen.\n            int i;\n            float j = 20;\n            Font myFont = new Font(&quot;Arial&quot;, 8);\n            SolidBrush myBrush = new SolidBrush(Color.Black);\n                     \n            // List the set of points and types and types to the left side\n            // of the screen.\n            e.Graphics.DrawString(&quot;Original Data&quot;,\n                myFont,\n                myBrush,\n                20,\n                j);\n            j += 20;\n            for(i=0; i&lt;myPathPointCount; i++)\n            {\n                e.Graphics.DrawString(myPathPoints[i].X.ToString()+\n                    &quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +\n                    myPathTypes[i].ToString(),\n                    myFont,\n                    myBrush,\n                    20,\n                    j);\n                j+=20;\n            }\n                     \n            // Create a GraphicsPathIterator for myPath.\n            GraphicsPathIterator myPathIterator =\n                new GraphicsPathIterator(myPath);\n            myPathIterator.Rewind();\n            PointF[] points = new PointF[myPathIterator.Count];\n            byte[] types = new byte[myPathIterator.Count];\n            int numPoints = myPathIterator.Enumerate(ref points, ref types);\n                     \n            // Draw the set of copied points and types to the screen.\n            j = 20;\n            e.Graphics.DrawString(&quot;Copied Data&quot;,\n                myFont,\n                myBrush,\n                200,\n                j);\n            j += 20;\n            for(i=0; i&lt;points.Length; i++)\n            {\n                e.Graphics.DrawString(&quot;Point: &quot; + i +\n                    &quot;, &quot; + &quot;Value: &quot; + points[i].ToString() + &quot;, &quot; +\n                    &quot;Type: &quot; + types[i].ToString(),\n                    myFont,\n                    myBrush,\n                    200,\n                    j);\n                j+=20;\n            }\n        }\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_Finalize\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_Finalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Finalize()</div>        \r\n          </div>\r\n    \r\n            <p>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">~GraphicsPathIterator ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_HasCurve\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_HasCurve_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasCurve()</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the path associated with this <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> contains a curve.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasCurve ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This method returns <code>true</code> if the current subpath contains a curve; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All curves in a path are stored as sequences of Bézier splines. For example, when you add an ellipse to a path, you specify the upper-left corner, the width, and the height of the ellipse&#39;s bounding rectangle. Those numbers (upper-left corner, width, and height) are not stored in the path; instead; the ellipse is converted to a sequence of four Bézier splines. The path stores the endpoints and control points of those Bézier splines.  </p>\n<p> A path stores an array of data points, each of which belongs to a line or a Bézier spline. If some of the points in the array belong to Bézier splines, then HasCurve returns <code>true</code>. If all points in the array belong to lines, then HasCurve returns <code>false</code>.  </p>\n<p> Certain methods flatten a path, which means that all the curves in the path are converted to sequences of lines. After a path has been flattened, HasCurve will always return <code>false</code>. Calling the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath#System_Drawing_Drawing2D_GraphicsPath_Flatten_\" data-linktype=\"relative-path\">Flatten</a>, <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath#System_Drawing_Drawing2D_GraphicsPath_Widen_\" data-linktype=\"relative-path\">Widen</a>, or <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath#System_Drawing_Drawing2D_GraphicsPath_Warp_\" data-linktype=\"relative-path\">Warp</a> method of the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> class will flatten a path.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, an <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_OnPaint_\" data-linktype=\"relative-path\">OnPaint</a> event object. The code performs the following actions:  </p>\n<ul>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object, <code>myPath</code>.  </p>\n</li>\n<li><p>Adds three lines, a rectangle, and an ellipse.  </p>\n</li>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> object for <code>myPath</code>.  </p>\n</li>\n<li><p>Tests to see if the current path <code>myPath</code> contains a curve.  </p>\n</li>\n<li><p>Shows the result of the test in a message box.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3\">    Public Sub HasCurveExample(ByVal e As PaintEventArgs)\n        Dim myPath As New GraphicsPath\n        Dim myPoints As Point() = {New Point(20, 20), _\n            New Point(120, 120), New Point(20, 120), New Point(20, 20)}\n        Dim myRect As New Rectangle(120, 120, 100, 100)\n        myPath.AddLines(myPoints)\n        myPath.AddRectangle(myRect)\n        myPath.AddEllipse(220, 220, 100, 100)\n\n        &#39; Create a GraphicsPathIterator for myPath.\n        Dim myPathIterator As New GraphicsPathIterator(myPath)\n        Dim myHasCurve As Boolean = myPathIterator.HasCurve()\n        MessageBox.Show(myHasCurve.ToString())\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3\">private:\n   void HasCurveExample( PaintEventArgs^ /*e*/ )\n   {\n      // Create a path and add three lines,\n      // a rectangle and an ellipse.\n      GraphicsPath^ myPath = gcnew GraphicsPath;\n      array&lt;Point&gt;^ myPoints = {Point(20,20),Point(120,120),Point(20,120),Point(20,20)};\n      Rectangle myRect = Rectangle(120,120,100,100);\n      myPath-&gt;AddLines( myPoints );\n      myPath-&gt;AddRectangle( myRect );\n      myPath-&gt;AddEllipse( 220, 220, 100, 100 );\n\n      // Create a GraphicsPathIterator for myPath.\n      GraphicsPathIterator^ myPathIterator = gcnew GraphicsPathIterator( myPath );\n\n      // Test for a curve.\n      bool myHasCurve = myPathIterator-&gt;HasCurve();\n\n      // Show the test result.\n      MessageBox::Show( myHasCurve.ToString() );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3\">        private void HasCurveExample(PaintEventArgs e)\n        {\n                     \n            // Create a path and add three lines,\n            // a rectangle and an ellipse.\n            GraphicsPath myPath = new GraphicsPath();\n            \n            Point[] myPoints = {new Point(20, 20), new Point(120, 120), \n                new Point(20, 120),new Point(20, 20) }; \n\n            Rectangle myRect = new Rectangle(120, 120, 100, 100);\n            myPath.AddLines(myPoints);\n            myPath.AddRectangle(myRect);\n            myPath.AddEllipse(220, 220, 100, 100);\n                     \n            // Create a GraphicsPathIterator for myPath.\n            GraphicsPathIterator myPathIterator = new\n                GraphicsPathIterator(myPath);\n                     \n            // Test for a curve.\n            bool myHasCurve = myPathIterator.HasCurve();\n                     \n            // Show the test result.\n            MessageBox.Show(myHasCurve.ToString());\n        }\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_NextMarker_System_Drawing_Drawing2D_GraphicsPath_\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_NextMarker_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextMarker(GraphicsPath)</div>        \r\n          </div>\r\n    \r\n            <p>This <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> object has a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object associated with it. The NextMarker method increments the associated <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> to the next marker in its path and copies all the points contained between the current marker and the next marker (or end of path) to a second <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object passed in to the parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object to which the points will be copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of points between this marker and the next.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath#System_Drawing_Drawing2D_GraphicsPath_SetMarkers_\" data-linktype=\"relative-path\">SetMarkers</a> method to set markers in a path. Markers are used to create groups of subpaths. One or more subpaths can be between two markers.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, an <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_OnPaint_\" data-linktype=\"relative-path\">OnPaint</a> event object. The code performs the following actions:  </p>\n<ul>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object.  </p>\n</li>\n<li><p>Adds three lines, a rectangle, an ellipse, and two markers.  </p>\n</li>\n<li><p>Lists the values of all the path&#39;s points to the left side of the screen.  </p>\n</li>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> object.  </p>\n</li>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object, <code>myPathSection</code>, to receive copied points.  </p>\n</li>\n<li><p>Calls the NextMarker method, which iterates to the first marker and copies all the points contained between that marker and the next to <code>myPathSection</code>.  </p>\n</li>\n<li><p>Returns the number of points copied to <code>markerPoints</code>.  </p>\n</li>\n<li><p>Lists the marker number (the first marker) and number of points it contains to the right side of the screen.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4\">    Public Sub NextMarkerExample2(ByVal e As PaintEventArgs)\n\n        &#39; Create a graphics path.\n        Dim myPath As New GraphicsPath\n\n        &#39; Set up primitives to add to myPath.\n        Dim myPoints As Point() = {New Point(20, 20), _\n            New Point(120, 120), New Point(20, 120), New Point(20, 20)}\n        Dim myRect As New Rectangle(120, 120, 100, 100)\n\n        &#39; Add 3 lines, a rectangle, an ellipse, and 2 markers.\n        myPath.AddLines(myPoints)\n        myPath.SetMarkers()\n        myPath.AddRectangle(myRect)\n        myPath.SetMarkers()\n        myPath.AddEllipse(220, 220, 100, 100)\n\n        &#39; Get the total number of points for the path,\n        &#39; and the arrays of the points and types.\n        Dim myPathPointCount As Integer = myPath.PointCount\n        Dim myPathPoints As PointF() = myPath.PathPoints\n        Dim myPathTypes As Byte() = myPath.PathTypes\n\n        &#39; Set up variables for drawing the array\n        &#39; of points to the screen.\n        Dim i As Integer\n        Dim j As Single = 20\n        Dim myFont As New Font(&quot;Arial&quot;, 8)\n        Dim myBrush As New SolidBrush(Color.Black)\n\n        &#39; Draw the set of path points and types to the screen.\n        For i = 0 To myPathPointCount - 1\n            e.Graphics.DrawString(myPathPoints(i).X.ToString() + _\n                &quot;, &quot; + myPathPoints(i).Y.ToString() + &quot;, &quot; + _\n                myPathTypes(i).ToString(), myFont, myBrush, 20, j)\n            j += 20\n        Next i\n\n        &#39; Create a GraphicsPathIterator.\n        Dim myPathIterator As New GraphicsPathIterator(myPath)\n\n        &#39; Rewind the iterator.\n        myPathIterator.Rewind()\n\n        &#39; Create a GraphicsPath section.\n        Dim myPathSection As New GraphicsPath\n\n        &#39; List the points contained in the first marker\n        &#39; to the screen.\n        Dim markerPoints As Integer\n        markerPoints = myPathIterator.NextMarker(myPathSection)\n        e.Graphics.DrawString(&quot;Marker: 1&quot; + &quot;  Num Points: &quot; + _\n            markerPoints.ToString(), myFont, myBrush, 200, 20)\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4\">public:\n   void NextMarkerExample2( PaintEventArgs^ e )\n   {\n      // Create a graphics path.\n      GraphicsPath^ myPath = gcnew GraphicsPath;\n\n      // Set up primitives to add to myPath.\n      array&lt;Point&gt;^ myPoints = {Point(20,20),Point(120,120),Point(20,120),Point(20,20)};\n      Rectangle myRect = Rectangle(120,120,100,100);\n\n      // Add 3 lines, a rectangle, an ellipse, and 2 markers.\n      myPath-&gt;AddLines( myPoints );\n      myPath-&gt;SetMarkers();\n      myPath-&gt;AddRectangle( myRect );\n      myPath-&gt;SetMarkers();\n      myPath-&gt;AddEllipse( 220, 220, 100, 100 );\n\n      // Get the total number of points for the path,\n      // and the arrays of the points and types.\n      int myPathPointCount = myPath-&gt;PointCount;\n      array&lt;PointF&gt;^myPathPoints = myPath-&gt;PathPoints;\n      array&lt;Byte&gt;^myPathTypes = myPath-&gt;PathTypes;\n\n      // Set up variables for listing all the values of the path&#39;s\n      // points to the screen.\n      int i;\n      float j = 20;\n      System::Drawing::Font^ myFont = gcnew System::Drawing::Font( &quot;Arial&quot;,8 );\n      SolidBrush^ myBrush = gcnew SolidBrush( Color::Black );\n\n      // List the values for all of path points and types to\n      // the left side of the screen.\n      for ( i = 0; i &lt; myPathPointCount; i++ )\n      {\n         e-&gt;Graphics-&gt;DrawString( myPathPoints[ i ].X + &quot;, &quot; + myPathPoints[ i ].Y + &quot;, &quot; + myPathTypes[ i ], myFont, myBrush, 20, j );\n         j += 20;\n      }\n\n      // Create a GraphicsPathIterator.\n      GraphicsPathIterator^ myPathIterator = gcnew GraphicsPathIterator( myPath );\n\n      // Rewind the iterator.\n      myPathIterator-&gt;Rewind();\n\n      // Create a GraphicsPath to receive a section of myPath.\n      GraphicsPath^ myPathSection = gcnew GraphicsPath;\n\n      // Retrieve and list the number of points contained in\n      // the first marker to the right side of the screen.\n      int markerPoints;\n      markerPoints = myPathIterator-&gt;NextMarker( myPathSection );\n      e-&gt;Graphics-&gt;DrawString( String::Format( &quot;Marker: 1  Num Points: {0}&quot;, markerPoints ), myFont, myBrush, 200, 20 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4\">        public void NextMarkerExample2(PaintEventArgs e)\n        {\n                     \n            // Create a graphics path.\n            GraphicsPath myPath = new GraphicsPath();\n                     \n            // Set up primitives to add to myPath.\n            Point[] myPoints = {new Point(20, 20), new Point(120, 120), \n                new Point(20, 120),new Point(20, 20) };        \n         \n            Rectangle myRect = new Rectangle(120, 120, 100, 100);\n                     \n            // Add 3 lines, a rectangle, an ellipse, and 2 markers.\n            myPath.AddLines(myPoints);\n            myPath.SetMarkers();\n            myPath.AddRectangle(myRect);\n            myPath.SetMarkers();\n            myPath.AddEllipse(220, 220, 100, 100);\n                     \n            // Get the total number of points for the path,\n            // and the arrays of the points and types.\n            int myPathPointCount = myPath.PointCount;\n            PointF[] myPathPoints = myPath.PathPoints;\n            byte[] myPathTypes = myPath.PathTypes;\n                     \n            // Set up variables for listing all the values of the path&#39;s\n            // points to the screen.\n            int i;\n            float j = 20;\n            Font myFont = new Font(&quot;Arial&quot;, 8);\n            SolidBrush myBrush = new SolidBrush(Color.Black);\n                     \n            // List the values for all of path points and types to\n            // the left side of the screen.\n            for(i=0; i &lt; myPathPointCount; i++)\n            {\n                e.Graphics.DrawString(myPathPoints[i].X.ToString()+\n                    &quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +\n                    myPathTypes[i].ToString(),  myFont, myBrush,\n                    20, j);\n                    \n                j+=20; \n               \n            }\n                     \n            // Create a GraphicsPathIterator.\n            GraphicsPathIterator myPathIterator = new\n                GraphicsPathIterator(myPath);\n                     \n            // Rewind the iterator.\n            myPathIterator.Rewind();\n                     \n            // Create a GraphicsPath to receive a section of myPath.\n            GraphicsPath myPathSection = new GraphicsPath();\n                     \n            // Retrieve and list the number of points contained in\n                     \n            // the first marker to the right side of the screen.\n            int markerPoints;\n            markerPoints = myPathIterator.NextMarker(myPathSection);\n            e.Graphics.DrawString(&quot;Marker: 1&quot; + &quot;  Num Points: &quot; +\n                markerPoints.ToString(),  myFont, myBrush, 200, 20);\n                \n        }\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_NextMarker_System_Int32__System_Int32__\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_NextMarker_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextMarker(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Increments the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> to the next marker in the path and returns the start and stop indexes by way of the [out] parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int NextMarker (out int startIndex, out int endIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>[out] The integer reference supplied to this parameter receives the index of the point that starts a subpath.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>endIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>[out] The integer reference supplied to this parameter receives the index of the point that ends the subpath to which <code>startIndex</code> points.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of points between this marker and the next.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath#System_Drawing_Drawing2D_GraphicsPath_SetMarkers_\" data-linktype=\"relative-path\">SetMarkers</a> method to set markers in a path. Markers are used to create groups of subpaths. One or more subpaths can be between two markers.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, an <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_OnPaint_\" data-linktype=\"relative-path\">OnPaint</a> event object. The code performs the following actions:  </p>\n<ul>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object.  </p>\n</li>\n<li><p>Adds three lines, a rectangle, and an ellipse ¾ with markers between each.  </p>\n</li>\n<li><p>Draws the values for the array of points to the screen.  </p>\n</li>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> object.  </p>\n</li>\n<li><p>Calls the NextMarker method.  </p>\n</li>\n<li><p>Uses the values returned from the iterative calls to NextMarker to draw the start and stop points for each marker to the screen.  </p>\n</li>\n<li><p>Draws the value for the total number of points to the screen.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5\">    Public Sub NextMarkerExample(ByVal e As PaintEventArgs)\n\n        &#39; Create the GraphicsPath.\n        Dim myPath As New GraphicsPath\n        Dim myPoints As Point() = {New Point(20, 20), _\n        New Point(120, 120), New Point(20, 120), New Point(20, 20)}\n        Dim myRect As New Rectangle(120, 120, 100, 100)\n\n        &#39; Add 3 lines, a rectangle, an ellipse, and 2 markers.\n        myPath.AddLines(myPoints)\n        myPath.SetMarkers()\n        myPath.AddRectangle(myRect)\n        myPath.SetMarkers()\n        myPath.AddEllipse(220, 220, 100, 100)\n\n        &#39; Get the total number of points for the path,\n        &#39; and the arrays of the points and types.\n        Dim myPathPointCount As Integer = myPath.PointCount\n        Dim myPathPoints As PointF() = myPath.PathPoints\n        Dim myPathTypes As Byte() = myPath.PathTypes\n\n        &#39; Set up variables for drawing the array of points to the screen.\n        Dim i As Integer\n        Dim j As Single = 20\n        Dim myFont As New Font(&quot;Arial&quot;, 8)\n        Dim myBrush As New SolidBrush(Color.Black)\n\n        &#39; Draw the set of path points and types to the screen.\n        For i = 0 To myPathPointCount - 1\n            e.Graphics.DrawString(myPathPoints(i).X.ToString() + &quot;, &quot; + _\n                myPathPoints(i).Y.ToString() + &quot;, &quot; + _\n                myPathTypes(i).ToString(), myFont, myBrush, 20, j)\n            j += 20\n        Next i\n\n        &#39; Create a GraphicsPathIterator.\n        Dim myPathIterator As New GraphicsPathIterator(myPath)\n        Dim myStartIndex As Integer\n        Dim myEndIndex As Integer\n\n        &#39; Rewind the Iterator.\n        myPathIterator.Rewind()\n\n        &#39; Draw the Markers and their start and end points to the screen.\n        j = 20\n        For i = 0 To 2\n            myPathIterator.NextMarker(myStartIndex, myEndIndex)\n            e.Graphics.DrawString(&quot;Marker &quot; + i.ToString() + _\n                &quot;:  Start: &quot; + myStartIndex.ToString() + &quot;  End: &quot; + _\n                myEndIndex.ToString(), myFont, myBrush, 200, j)\n            j += 20\n        Next i\n\n        &#39; Draw the total number of points to the screen.\n        j += 20\n        Dim myPathTotalPoints As Integer = myPathIterator.Count\n        e.Graphics.DrawString(&quot;Total Points = &quot; + _\n            myPathTotalPoints.ToString(), myFont, myBrush, 200, j)\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5\">private:\n   void NextMarkerExample( PaintEventArgs^ e )\n   {\n      // Create the GraphicsPath.\n      GraphicsPath^ myPath = gcnew GraphicsPath;\n      array&lt;Point&gt;^ myPoints = {Point(20,20),Point(120,120),Point(20,120),Point(20,20)};\n      Rectangle myRect = Rectangle(120,120,100,100);\n\n      // Add 3 lines, a rectangle, an ellipse, and 2 markers.\n      myPath-&gt;AddLines( myPoints );\n      myPath-&gt;SetMarkers();\n      myPath-&gt;AddRectangle( myRect );\n      myPath-&gt;SetMarkers();\n      myPath-&gt;AddEllipse( 220, 220, 100, 100 );\n\n      // Get the total number of points for the path,\n      // and the arrays of the points and types.\n      int myPathPointCount = myPath-&gt;PointCount;\n      array&lt;PointF&gt;^myPathPoints = myPath-&gt;PathPoints;\n      array&lt;Byte&gt;^myPathTypes = myPath-&gt;PathTypes;\n\n      // Set up variables for drawing the array\n      // of points to the screen.\n      int i;\n      float j = 20;\n      System::Drawing::Font^ myFont = gcnew System::Drawing::Font( &quot;Arial&quot;,8 );\n      SolidBrush^ myBrush = gcnew SolidBrush( Color::Black );\n\n      // Draw the set of path points and types to the screen.\n      for ( i = 0; i &lt; myPathPointCount; i++ )\n      {\n         e-&gt;Graphics-&gt;DrawString( myPathPoints[ i ].X + &quot;, &quot; + myPathPoints[ i ].Y + &quot;, &quot; + myPathTypes[ i ], myFont, myBrush, 20, j );\n         j += 20;\n      }\n\n      // Create a GraphicsPathIterator.\n      GraphicsPathIterator^ myPathIterator = gcnew GraphicsPathIterator( myPath );\n      int myStartIndex;\n      int myEndIndex;\n\n      // Rewind the Iterator.\n      myPathIterator-&gt;Rewind();\n\n      // Draw the Markers and their start and end points\n      // to the screen.\n      j = 20;\n      for ( i = 0; i &lt; 3; i++ )\n      {\n         myPathIterator-&gt;NextMarker( myStartIndex, myEndIndex );\n         e-&gt;Graphics-&gt;DrawString( String::Format( &quot;Marker {0}:  Start: {1}  End: {2}&quot;, i, myStartIndex, myEndIndex ),\n               myFont, myBrush, 200, j );\n         j += 20;\n      }\n\n      // Draw the total number of points to the screen.\n      j += 20;\n      int myPathTotalPoints = myPathIterator-&gt;Count;\n      e-&gt;Graphics-&gt;DrawString( String::Format( &quot;Total Points = {0}&quot;, myPathTotalPoints ), myFont, myBrush, 200, j );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5\">        private void NextMarkerExample(PaintEventArgs e)\n        {\n                     \n            // Create the GraphicsPath.\n            GraphicsPath myPath = new GraphicsPath();\n            Point[] myPoints = {new Point(20, 20), new Point(120, 120), \n                new Point(20, 120),new Point(20, 20) }; \n\n            Rectangle myRect = new Rectangle(120, 120, 100, 100);\n                     \n            // Add 3 lines, a rectangle, an ellipse, and 2 markers.\n            myPath.AddLines(myPoints);\n            myPath.SetMarkers();\n            myPath.AddRectangle(myRect);\n            myPath.SetMarkers();\n            myPath.AddEllipse(220, 220, 100, 100);\n                     \n            // Get the total number of points for the path,\n                     \n            // and the arrays of the points and types.\n            int myPathPointCount = myPath.PointCount;\n            PointF[] myPathPoints = myPath.PathPoints;\n            byte[] myPathTypes = myPath.PathTypes;\n                     \n            // Set up variables for drawing the array\n                     \n            // of points to the screen.\n            int i;\n            float j = 20;\n            Font myFont = new Font(&quot;Arial&quot;, 8);\n            SolidBrush myBrush = new SolidBrush(Color.Black);\n                     \n            // Draw the set of path points and types to the screen.\n            for(i=0; i&lt;myPathPointCount; i++)\n            {\n                e.Graphics.DrawString(myPathPoints[i].X.ToString()+\n                    &quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +\n                    myPathTypes[i].ToString(),\n                    myFont,\n                    myBrush,\n                    20,\n                    j);\n                j+=20;\n            }\n                     \n            // Create a GraphicsPathIterator.\n            GraphicsPathIterator myPathIterator = new\n                GraphicsPathIterator(myPath);\n            int myStartIndex;\n            int myEndIndex;\n                     \n            // Rewind the Iterator.\n            myPathIterator.Rewind();\n                     \n            // Draw the Markers and their start and end points\n                     \n            // to the screen.\n            j=20;\n            for(i=0;i&lt;3;i++)\n            {\n                myPathIterator.NextMarker(out myStartIndex, out myEndIndex);\n                e.Graphics.DrawString(&quot;Marker &quot; + i.ToString() +\n                    &quot;:  Start: &quot; + myStartIndex.ToString()+\n                    &quot;  End: &quot; + myEndIndex.ToString(),\n                    myFont,\n                    myBrush,\n                    200,\n                    j);\n                j += 20;\n            }\n                     \n            // Draw the total number of points to the screen.\n            j += 20;\n            int myPathTotalPoints = myPathIterator.Count;\n            e.Graphics.DrawString(&quot;Total Points = &quot; +\n                myPathTotalPoints.ToString(),\n                myFont,\n                myBrush,\n                200,\n                j);\n        }\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_NextPathType_System_Byte__System_Int32__System_Int32__\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_NextPathType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextPathType(Byte,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the starting index and the ending index of the next group of data points that all have the same type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int NextPathType (out byte pathType, out int startIndex, out int endIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pathType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>[out] Receives the point type shared by all points in the group. Possible types can be retrieved from the <a class=\"xref\" href=\"system.drawing.drawing2d.pathpointtype\" data-linktype=\"relative-path\">PathPointType</a> enumeration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>[out] Receives the starting index of the group of points.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>endIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>[out] Receives the ending index of the group of points.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>This method returns the number of data points in the group. If there are no more groups in the path, this method returns 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, an <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_OnPaint_\" data-linktype=\"relative-path\">OnPaint</a> event object. The code performs the following actions:  </p>\n<ul>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object.  </p>\n</li>\n<li><p>Adds three lines, a rectangle, and an ellipse.  </p>\n</li>\n<li><p>Lists the values of all the points to the left side of the screen.  </p>\n</li>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> and rewinds it.  </p>\n</li>\n<li><p>In a <code>for</code> loop, iterates through the points using the NextPathType and NextPathType methods.  </p>\n</li>\n<li><p>Uses the values returned from the iterative calls to list the subpath number, the number of points in it, and the type of the path points to the right side of the screen.  </p>\n</li>\n<li><p>Displays the value for the total number of points to the screen.  </p>\n<p>Note that <code>ListPathPoints</code> is a helper function that separates most (not all) of the display code from the graphics path code.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6\">    Public Sub NextPathTypeExample(ByVal e As PaintEventArgs)\n\n        &#39; Create the GraphicsPath.\n        Dim myPath As New GraphicsPath\n        Dim myPoints As Point() = {New Point(20, 20), _\n        New Point(120, 120), New Point(20, 120), New Point(20, 20)}\n        Dim myRect As New Rectangle(120, 120, 100, 100)\n\n        &#39; Add 3 lines, a rectangle, and an ellipse.\n        myPath.AddLines(myPoints)\n        myPath.AddRectangle(myRect)\n        myPath.AddEllipse(220, 220, 100, 100)\n\n        &#39; List all of the path points to the screen.\n        ListPathPointsHelper(e, myPath, Nothing, 20, 1)\n\n        &#39; Create a GraphicsPathIterator.\n        Dim myPathIterator As New GraphicsPathIterator(myPath)\n\n        &#39; Rewind the Iterator.\n        myPathIterator.Rewind()\n\n        &#39; Iterate the subpaths and types, and list the results\n        &#39; to the screen.\n        Dim j As Integer = 20\n        Dim i As Integer\n        Dim mySubPaths, subPathStartIndex, subPathEndIndex As Integer\n        Dim IsClosed As [Boolean]\n        Dim subPathPointType As Byte\n        Dim pointTypeStartIndex, pointTypeEndIndex, _\n        numPointsFound As Integer\n        Dim myFont As New Font(&quot;Arial&quot;, 8)\n        Dim myBrush As New SolidBrush(Color.Black)\n        j = 20\n        For i = 0 To 2\n            mySubPaths = myPathIterator.NextSubpath(subPathStartIndex, _\n                subPathEndIndex, IsClosed)\n            numPointsFound = myPathIterator.NextPathType(subPathPointType, _\n                pointTypeStartIndex, pointTypeEndIndex)\n            e.Graphics.DrawString(&quot;SubPath: &quot; &amp; i &amp; &quot;  Points Found: &quot; &amp; _\n                numPointsFound.ToString() &amp; &quot;  Type of Points: &quot; &amp; _\n            subPathPointType.ToString(), myFont, myBrush, 200, j)\n            j += 20\n        Next i\n\n        &#39; List the total number of path points to the screen.\n        ListPathPointsHelper(e, myPath, myPathIterator, 200, 2)\n    End Sub\n\n    &#39; This is a helper function used by NextPathTypeExample.\n    Public Sub ListPathPointsHelper(ByVal e As PaintEventArgs, _\n    ByVal myPath As GraphicsPath, ByVal myPathIterator As GraphicsPathIterator, _\n    ByVal xOffset As Integer, ByVal listType As Integer)\n\n        &#39; Get the total number of points for the path,\n        &#39; and the arrays of the points and types.\n        Dim myPathPointCount As Integer = myPath.PointCount\n        Dim myPathPoints As PointF() = myPath.PathPoints\n        Dim myPathTypes As Byte() = myPath.PathTypes\n\n        &#39; Set up variables for drawing the points to the screen.\n        Dim i As Integer\n        Dim j As Single = 20\n        Dim myFont As New Font(&quot;Arial&quot;, 8)\n        Dim myBrush As New SolidBrush(Color.Black)\n        If listType = 1 Then\n            &#39; List all the path points to the screen.\n\n            &#39; Draw the set of path points and types to the screen.\n            For i = 0 To myPathPointCount - 1\n                e.Graphics.DrawString(myPathPoints(i).X.ToString() + &quot;, &quot; + _\n                    myPathPoints(i).Y.ToString() + &quot;, &quot; + _\n                myPathTypes(i).ToString(), myFont, myBrush, xOffset, j)\n                j += 20\n            Next i\n        Else\n            If listType = 2 Then\n                &#39; Display the total number of path points.\n\n                &#39; Draw the total number of points to the screen.\n                Dim myPathTotalPoints As Integer = myPathIterator.Count\n                e.Graphics.DrawString(&quot;Total Points = &quot; + _\n                    myPathTotalPoints.ToString(), myFont, myBrush, xOffset, _\n                    100)\n            Else\n                e.Graphics.DrawString(&quot;Wrong or no list type argument.&quot;, _\n                    myFont, myBrush, xOffset, 200)\n            End If\n        End If\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6\">public:\n   void NextPathTypeExample( PaintEventArgs^ e )\n   {\n      // Create the GraphicsPath.\n      GraphicsPath^ myPath = gcnew GraphicsPath;\n      array&lt;Point&gt;^ myPoints = {Point(20,20),Point(120,120),Point(20,120),Point(20,20)};\n      Rectangle myRect = Rectangle(120,120,100,100);\n\n      // Add 3 lines, a rectangle, and an ellipse.\n      myPath-&gt;AddLines( myPoints );\n      myPath-&gt;AddRectangle( myRect );\n      myPath-&gt;AddEllipse( 220, 220, 100, 100 );\n\n      // List all of the path points to the screen.\n      ListPathPoints( e, myPath, nullptr, 20, 1 );\n\n      // Create a GraphicsPathIterator.\n      GraphicsPathIterator^ myPathIterator = gcnew GraphicsPathIterator( myPath );\n\n      // Rewind the Iterator.\n      myPathIterator-&gt;Rewind();\n\n      // Iterate the subpaths and types, and list the results to\n      // the screen.\n            int i;\n      int j = 20;\n      int mySubPaths;\n      int subPathStartIndex;\n      int subPathEndIndex;\n      Boolean IsClosed;\n      Byte subPathPointType;\n      int pointTypeStartIndex;\n      int pointTypeEndIndex;\n      int numPointsFound;\n      System::Drawing::Font^ myFont = gcnew System::Drawing::Font( &quot;Arial&quot;,8 );\n      SolidBrush^ myBrush = gcnew SolidBrush( Color::Black );\n      j = 20;\n      for ( i = 0; i &lt; 3; i++ )\n      {\n         mySubPaths = myPathIterator-&gt;NextSubpath( subPathStartIndex, subPathEndIndex, IsClosed );\n         numPointsFound = myPathIterator-&gt;NextPathType( subPathPointType, pointTypeStartIndex, pointTypeEndIndex );\n         e-&gt;Graphics-&gt;DrawString( String::Format( &quot;SubPath: {0}  Points Found: {1}  Type of Points: {2}&quot;, i,\n               numPointsFound, subPathPointType ), myFont, myBrush, 200.0f, (float)j );\n         j += 20;\n      }\n\n      // List the total number of path points to the screen.\n      ListPathPoints( e, myPath, myPathIterator, 200, 2 );\n   }\n\n   //-------------------------------------------------------\n   //This function is a helper function used by\n   // NextPathTypeExample.\n   //-------------------------------------------------------\n   void ListPathPoints( PaintEventArgs^ e, GraphicsPath^ myPath, GraphicsPathIterator^ myPathIterator, int xOffset, int listType )\n   {\n      // Get the total number of points for the path,\n      // and the arrays of the points and types.\n      int myPathPointCount = myPath-&gt;PointCount;\n      array&lt;PointF&gt;^myPathPoints = myPath-&gt;PathPoints;\n      array&lt;Byte&gt;^myPathTypes = myPath-&gt;PathTypes;\n\n      // Set up variables for drawing the points to the screen.\n      int i;\n      float j = 20;\n      System::Drawing::Font^ myFont = gcnew System::Drawing::Font( &quot;Arial&quot;,8 );\n      SolidBrush^ myBrush = gcnew SolidBrush( Color::Black );\n      if ( listType == 1 )\n      {\n         // Draw the set of path points and types to the screen.\n         for ( i = 0; i &lt; myPathPointCount; i++ )\n         {\n            e-&gt;Graphics-&gt;DrawString( myPathPoints[ i ].X + &quot;, &quot; + myPathPoints[ i ].Y + &quot;, &quot; + myPathTypes[ i ],\n                  myFont, myBrush, (float)xOffset, (float)j );\n            j += 20;\n         }\n      }\n      else\n      if ( listType == 2 )\n      {\n         // Draw the total number of points to the screen.\n         int myPathTotalPoints = myPathIterator-&gt;Count;\n         e-&gt;Graphics-&gt;DrawString( String::Format( &quot;Total Points = {0}&quot;, myPathTotalPoints ), myFont, myBrush, (float)xOffset, 100.0f );\n      }\n      else\n      {\n         e-&gt;Graphics-&gt;DrawString( &quot;Wrong or no list type argument.&quot;, myFont, myBrush, (float)xOffset, 200.0f );\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6\">        public void NextPathTypeExample(PaintEventArgs e)\n        {\n                     \n            // Create the GraphicsPath.\n            GraphicsPath myPath = new GraphicsPath();\n\n            Point[] myPoints = {new Point(20, 20), new Point(120, 120), \n                 new Point(20, 120),new Point(20, 20) }; \n            Rectangle myRect = new Rectangle(120, 120, 100, 100);\n                     \n            // Add 3 lines, a rectangle, and an ellipse.\n            myPath.AddLines(myPoints);\n            myPath.AddRectangle(myRect);\n            myPath.AddEllipse(220, 220, 100, 100);\n                     \n            // List all of the path points to the screen.\n            ListPathPoints(e, myPath, null, 20, 1);\n                     \n            // Create a GraphicsPathIterator.\n            GraphicsPathIterator myPathIterator = new\n                GraphicsPathIterator(myPath);\n                     \n            // Rewind the Iterator.\n            myPathIterator.Rewind();\n                     \n            // Iterate the subpaths and types, and list the results to\n                     \n            // the screen.\n            int i, j = 20;\n            int mySubPaths, subPathStartIndex, subPathEndIndex;\n            Boolean IsClosed;\n            byte subPathPointType;\n            int pointTypeStartIndex,  pointTypeEndIndex, numPointsFound;\n            Font myFont = new Font(&quot;Arial&quot;, 8);\n            SolidBrush myBrush = new SolidBrush(Color.Black);\n            j = 20;\n            for(i = 0;i &lt; 3; i++)\n            {\n                mySubPaths = myPathIterator.NextSubpath(\n                    out subPathStartIndex,\n                    out subPathEndIndex,\n                    out IsClosed);\n                numPointsFound = myPathIterator.NextPathType(\n                    out subPathPointType,\n                    out pointTypeStartIndex,\n                    out pointTypeEndIndex);\n                e.Graphics.DrawString(\n                    &quot;SubPath: &quot; + i +\n                    &quot;  Points Found: &quot; + numPointsFound.ToString() +\n                    &quot;  Type of Points: &quot; + subPathPointType.ToString(),\n                    myFont,\n                    myBrush,\n                    200,\n                    j);\n                j+=20;\n            }\n                     \n            // List the total number of path points to the screen.\n            ListPathPoints(e, myPath, myPathIterator, 200, 2);\n        }\n                     \n        //-------------------------------------------------------\n        //This function is a helper function used by\n        // NextPathTypeExample.\n        //-------------------------------------------------------\n        public void ListPathPoints(\n            PaintEventArgs e,\n            GraphicsPath myPath,\n            GraphicsPathIterator myPathIterator,\n            int xOffset,\n            int listType)\n        {\n                     \n            // Get the total number of points for the path,\n            // and the arrays of the points and types.\n            int myPathPointCount = myPath.PointCount;\n            PointF[] myPathPoints = myPath.PathPoints;\n            byte[] myPathTypes = myPath.PathTypes;\n                     \n            // Set up variables for drawing the points to the screen.\n            int i;\n            float j = 20;\n            Font myFont = new Font(&quot;Arial&quot;, 8);\n            SolidBrush myBrush = new SolidBrush(Color.Black);\n            if (listType == 1) \n                // List all the path points to the screen.\n            {\n                     \n                // Draw the set of path points and types to the screen.\n                for(i=0; i&lt;myPathPointCount; i++)\n                {\n                    e.Graphics.DrawString(myPathPoints[i].X.ToString()+\n                        &quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +\n                        myPathTypes[i].ToString(),\n                        myFont,\n                        myBrush,\n                        xOffset,\n                        j);\n                    j+=20;\n                }\n            }\n            else if (listType == 2) \n                // Display the total number of path points.\n            {\n                     \n                // Draw the total number of points to the screen.\n                int myPathTotalPoints = myPathIterator.Count;\n                e.Graphics.DrawString(&quot;Total Points = &quot; +\n                    myPathTotalPoints.ToString(),\n                    myFont,\n                    myBrush,\n                    xOffset,\n                    100);\n            }\n            else\n            {\n                e.Graphics.DrawString(&quot;Wrong or no list type argument.&quot;,\n                    myFont, myBrush, xOffset, 200);\n            }\n        }\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_NextSubpath_System_Drawing_Drawing2D_GraphicsPath_System_Boolean__\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_NextSubpath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextSubpath(GraphicsPath,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the next figure (subpath) from the associated path of this <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> that is to have its data points set to match the data points of the retrieved figure (subpath) for this iterator.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isClosed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>[out] Indicates whether the current subpath is closed. It is <code>true</code> if the if the figure is closed, otherwise it is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of data points in the retrieved figure (subpath). If there are no more figures to retrieve, zero is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, an <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_OnPaint_\" data-linktype=\"relative-path\">OnPaint</a> event object. The code performs the following actions:  </p>\n<ul>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object.  </p>\n</li>\n<li><p>Adds three lines, a rectangle, an ellipse, and two markers.  </p>\n</li>\n<li><p>Lists the values of all the path&#39;s points to the left side of the screen.  </p>\n</li>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> object.  </p>\n</li>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object, <code>myPathSection</code>, to receive copied points.  </p>\n</li>\n<li><p>Calls the NextSubpath method, which iterates to the third subpath (figure) and copies all the points contained in that subpath to the <code>myPathSection</code> path, and also returns the number of points copied to <code>subpathPoints</code>.  </p>\n</li>\n<li><p>Lists the subpath number and number of points it contains to the right side of the screen.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7\">    Public Sub NextSubpathExample2(ByVal e As PaintEventArgs)\n\n        &#39; Create a graphics path.\n        Dim myPath As New GraphicsPath\n\n        &#39; Set up primitives to add to myPath.\n        Dim myPoints As Point() = {New Point(20, 20), _\n            New Point(120, 120), New Point(20, 120), New Point(20, 20)}\n        Dim myRect As New Rectangle(120, 120, 100, 100)\n\n        &#39; Add 3 lines, a rectangle, an ellipse, and 2 markers.\n        myPath.AddLines(myPoints)\n        myPath.SetMarkers()\n        myPath.AddRectangle(myRect)\n        myPath.SetMarkers()\n        myPath.AddEllipse(220, 220, 100, 100)\n\n        &#39; Get the total number of points for the path,\n\n        &#39; and the arrays of the points and types.\n        Dim myPathPointCount As Integer = myPath.PointCount\n        Dim myPathPoints As PointF() = myPath.PathPoints\n        Dim myPathTypes As Byte() = myPath.PathTypes\n\n        &#39; Set up variables for drawing the array\n        &#39; of points to the screen.\n        Dim i As Integer\n        Dim j As Single = 20\n        Dim myFont As New Font(&quot;Arial&quot;, 8)\n        Dim myBrush As New SolidBrush(Color.Black)\n\n        &#39; Draw the set of path points and types to the screen.\n        For i = 0 To myPathPointCount - 1\n            e.Graphics.DrawString(myPathPoints(i).X.ToString() + _\n                &quot;, &quot; + myPathPoints(i).Y.ToString() + &quot;, &quot; + _\n                myPathTypes(i).ToString(), myFont, myBrush, 20, j)\n            j += 20\n        Next i\n\n        &#39; Create a GraphicsPathIterator for myPath.\n        Dim myPathIterator As New GraphicsPathIterator(myPath)\n\n        &#39; Rewind the iterator.\n        myPathIterator.Rewind()\n\n        &#39; Create the GraphicsPath section.\n        Dim myPathSection As New GraphicsPath\n\n        &#39; Draw the 3rd subpath and the number of points therein\n        &#39; to the screen.\n        Dim subpathPoints As Integer\n        Dim IsClosed2 As Boolean\n\n        &#39; Iterate to the third subpath.\n        subpathPoints = myPathIterator.NextSubpath(myPathSection, _\n            IsClosed2)\n        subpathPoints = myPathIterator.NextSubpath(myPathSection, _\n            IsClosed2)\n        subpathPoints = myPathIterator.NextSubpath(myPathSection, _\n            IsClosed2)\n\n        &#39; Write the number of subpath points to the screen.\n        e.Graphics.DrawString(&quot;Subpath: 3&quot; + &quot;   Num Points: &quot; + _\n        subpathPoints.ToString(), myFont, myBrush, 200, 20)\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7\">   void NextSubpathExample2( PaintEventArgs^ e )\n   {\n      // Create a graphics path.\n      GraphicsPath^ myPath = gcnew GraphicsPath;\n\n      // Set up primitives to add to myPath.\n      array&lt;Point&gt;^ myPoints = {Point(20,20),Point(120,120),Point(20,120),Point(20,20)};\n      Rectangle myRect = Rectangle(120,120,100,100);\n\n      // Add 3 lines, a rectangle, an ellipse, and 2 markers.\n      myPath-&gt;AddLines( myPoints );\n      myPath-&gt;SetMarkers();\n      myPath-&gt;AddRectangle( myRect );\n      myPath-&gt;SetMarkers();\n      myPath-&gt;AddEllipse( 220, 220, 100, 100 );\n\n      // Get the total number of points for the path,\n      // and the arrays of the points and types.\n      int myPathPointCount = myPath-&gt;PointCount;\n      array&lt;PointF&gt;^myPathPoints = myPath-&gt;PathPoints;\n      array&lt;Byte&gt;^myPathTypes = myPath-&gt;PathTypes;\n\n      // Set up variables for listing all of the path&#39;s\n      // points to the screen.\n      int i;\n      float j = 20;\n      System::Drawing::Font^ myFont = gcnew System::Drawing::Font( &quot;Arial&quot;,8 );\n      SolidBrush^ myBrush = gcnew SolidBrush( Color::Black );\n\n      // List the values of all the path points and types to the screen.\n      for ( i = 0; i &lt; myPathPointCount; i++ )\n      {\n         e-&gt;Graphics-&gt;DrawString( myPathPoints[ i ].X + &quot;, &quot; + myPathPoints[ i ].Y + &quot;, &quot; + myPathTypes[ i ], myFont, myBrush, 20, j );\n         j += 20;\n      }\n\n      // Create a GraphicsPathIterator for myPath.\n      GraphicsPathIterator^ myPathIterator = gcnew GraphicsPathIterator( myPath );\n\n      // Rewind the iterator.\n      myPathIterator-&gt;Rewind();\n\n      // Create the GraphicsPath section.\n      GraphicsPath^ myPathSection = gcnew GraphicsPath;\n\n      // Iterate to the 3rd subpath and list the number of points therein\n      // to the screen.\n      int subpathPoints;\n      bool IsClosed2;\n\n      // Iterate to the third subpath.\n      subpathPoints = myPathIterator-&gt;NextSubpath( myPathSection, IsClosed2 );\n      subpathPoints = myPathIterator-&gt;NextSubpath( myPathSection, IsClosed2 );\n      subpathPoints = myPathIterator-&gt;NextSubpath( myPathSection, IsClosed2 );\n\n      // Write the number of subpath points to the screen.\n      e-&gt;Graphics-&gt;DrawString( String::Format( &quot;Subpath: 3   Num Points: {0}&quot;, subpathPoints ), myFont, myBrush, 200, 20 );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7\">            public void NextSubpathExample2(PaintEventArgs e)\n            {\n                     \n                // Create a graphics path.\n                GraphicsPath myPath = new GraphicsPath();\n                     \n                // Set up primitives to add to myPath.\n                Point[] myPoints = {new Point(20, 20), new Point(120, 120), \n                    new Point(20, 120),new Point(20, 20) }; \n                Rectangle myRect = new Rectangle(120, 120, 100, 100);\n                     \n                // Add 3 lines, a rectangle, an ellipse, and 2 markers.\n                myPath.AddLines(myPoints);\n                myPath.SetMarkers();\n                myPath.AddRectangle(myRect);\n                myPath.SetMarkers();\n                myPath.AddEllipse(220, 220, 100, 100);\n                     \n                // Get the total number of points for the path,\n                     \n                // and the arrays of the points and types.\n                int myPathPointCount = myPath.PointCount;\n                PointF[] myPathPoints = myPath.PathPoints;\n                byte[] myPathTypes = myPath.PathTypes;\n                     \n                // Set up variables for listing all of the path&#39;s\n                     \n                // points to the screen.\n                int i;\n                float j = 20;\n                Font myFont = new Font(&quot;Arial&quot;, 8);\n                SolidBrush myBrush = new SolidBrush(Color.Black);\n                     \n                // List the values of all the path points and types to the screen.\n                for(i=0; i&lt;myPathPointCount; i++)\n                {\n                    e.Graphics.DrawString(myPathPoints[i].X.ToString()+\n                        &quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +\n                        myPathTypes[i].ToString(),\n                        myFont,\n                        myBrush,\n                        20,\n                        j);\n                    j+=20;\n                }\n                     \n                // Create a GraphicsPathIterator for myPath.\n                GraphicsPathIterator myPathIterator = new\n                    GraphicsPathIterator(myPath);\n                     \n                // Rewind the iterator.\n                myPathIterator.Rewind();\n                     \n                // Create the GraphicsPath section.\n                GraphicsPath myPathSection = new GraphicsPath();\n                     \n                // Iterate to the 3rd subpath and list the number of points therein\n                     \n                // to the screen.\n                int subpathPoints;\n                bool IsClosed2;\n                     \n                // Iterate to the third subpath.\n                subpathPoints = myPathIterator.NextSubpath(\n                    myPathSection, out IsClosed2);\n                subpathPoints = myPathIterator.NextSubpath(\n                    myPathSection, out IsClosed2);\n                subpathPoints = myPathIterator.NextSubpath(\n                    myPathSection, out IsClosed2);\n                     \n                // Write the number of subpath points to the screen.\n                e.Graphics.DrawString(&quot;Subpath: 3&quot;  +\n                    &quot;   Num Points: &quot; +\n                    subpathPoints.ToString(),\n                    myFont,\n                    myBrush,\n                    200,\n                    20);\n            }\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_NextSubpath_System_Int32__System_Int32__System_Boolean__\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_NextSubpath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NextSubpath(Int32,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Moves the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> to the next subpath in the path. The start index and end index of the next subpath are contained in the [out] parameters.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>startIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>[out] Receives the starting index of the next subpath.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>endIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>[out] Receives the ending index of the next subpath.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isClosed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>[out] Indicates whether the subpath is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of subpaths in the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is designed for use with Windows Forms, and it requires <a class=\"xref\" href=\"system.windows.forms.painteventargs\" data-linktype=\"relative-path\">PaintEventArgs</a><code>e</code>, an <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_OnPaint_\" data-linktype=\"relative-path\">OnPaint</a> event object. The code performs the following actions:  </p>\n<ul>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspath\" data-linktype=\"relative-path\">GraphicsPath</a> object.  </p>\n</li>\n<li><p>Adds three lines, a rectangle, and an ellipse.  </p>\n</li>\n<li><p>Draws the values for the array of points to the screen.  </p>\n</li>\n<li><p>Creates a <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> object.  </p>\n</li>\n<li><p>Calls the NextSubpath method.  </p>\n</li>\n<li><p>Uses the values returned from the iterative calls to NextSubpath to draw the start and stop values for each subpath to the screen.  </p>\n</li>\n<li><p>Draws the value for the total number of subpaths to the screen.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8\">    Public Sub NextSubpathExample(ByVal e As PaintEventArgs)\n\n        &#39; Create the GraphicsPath.\n        Dim myPath As New GraphicsPath\n        Dim myPoints As Point() = {New Point(20, 20), _\n        New Point(120, 120), New Point(20, 120), New Point(20, 20)}\n        Dim myRect As New Rectangle(120, 120, 100, 100)\n\n        &#39; Add 3 lines, a rectangle, an ellipse, and 2 markers.\n        myPath.AddLines(myPoints)\n        myPath.AddRectangle(myRect)\n        myPath.AddEllipse(220, 220, 100, 100)\n\n        &#39; Get the total number of points for the path,\n        &#39; and the arrays of the points and types.\n        Dim myPathPointCount As Integer = myPath.PointCount\n        Dim myPathPoints As PointF() = myPath.PathPoints\n        Dim myPathTypes As Byte() = myPath.PathTypes\n\n        &#39; Set up variables for drawing the array of points to the screen.\n        Dim i As Integer\n        Dim j As Single = 20\n        Dim myFont As New Font(&quot;Arial&quot;, 8)\n        Dim myBrush As New SolidBrush(Color.Black)\n\n        &#39; Draw the set of path points and types to the screen.\n        For i = 0 To myPathPointCount - 1\n            e.Graphics.DrawString(myPathPoints(i).X.ToString() + &quot;, &quot; + _\n            myPathPoints(i).Y.ToString() + &quot;, &quot; + _\n            myPathTypes(i).ToString(), myFont, myBrush, 20, j)\n            j += 20\n        Next i\n\n        &#39; Create a GraphicsPathIterator.\n        Dim myPathIterator As New GraphicsPathIterator(myPath)\n        Dim myStartIndex As Integer\n        Dim myEndIndex As Integer\n        Dim myIsClosed As Boolean\n\n        &#39; get the number of Subpaths.\n        Dim numSubpaths As Integer = myPathIterator.NextSubpath(myPath, _\n            myIsClosed)\n        numSubpaths -= 1\n\n        &#39; Rewind the Iterator.\n        myPathIterator.Rewind()\n\n        &#39; List the Subpaths to the screen.\n        j = 20\n        For i = 0 To numSubpaths - 1\n            myPathIterator.NextSubpath(myStartIndex, myEndIndex, _\n            myIsClosed)\n            e.Graphics.DrawString(&quot;Subpath &quot; + i.ToString() + _\n                &quot;:  Start: &quot; + myStartIndex.ToString() + &quot;  End: &quot; + _\n                myEndIndex.ToString() + &quot;  IsClosed: &quot; + _\n                myIsClosed.ToString(), myFont, myBrush, 200, j)\n            j += 20\n        Next i\n\n        &#39; Draw the total number of Subpaths to the screen.\n        j += 20\n        e.Graphics.DrawString(&quot;Number Subpaths = &quot; + _\n            numSubpaths.ToString(), myFont, myBrush, 200, j)\n    End Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8\">private:\n   void NextSubpathExample( PaintEventArgs^ e )\n   {\n      // Create the GraphicsPath.\n      GraphicsPath^ myPath = gcnew GraphicsPath;\n      array&lt;Point&gt;^ myPoints = {Point(20,20),Point(120,120),Point(20,120),Point(20,20)};\n      Rectangle myRect = Rectangle(120,120,100,100);\n\n      // Add 3 lines, a rectangle, an ellipse, and 2 markers.\n      myPath-&gt;AddLines( myPoints );\n      myPath-&gt;AddRectangle( myRect );\n      myPath-&gt;AddEllipse( 220, 220, 100, 100 );\n\n      // Get the total number of points for the path,\n      // and the arrays of the points and types.\n      int myPathPointCount = myPath-&gt;PointCount;\n      array&lt;PointF&gt;^myPathPoints = myPath-&gt;PathPoints;\n      array&lt;Byte&gt;^myPathTypes = myPath-&gt;PathTypes;\n\n      // Set up variables for drawing the array of\n      // points to the screen.\n      int i;\n      float j = 20;\n      System::Drawing::Font^ myFont = gcnew System::Drawing::Font( &quot;Arial&quot;,8 );\n      SolidBrush^ myBrush = gcnew SolidBrush( Color::Black );\n\n      // Draw the set of path points and types to the screen.\n      for ( i = 0; i &lt; myPathPointCount; i++ )\n      {\n         e-&gt;Graphics-&gt;DrawString( myPathPoints[ i ].X + &quot;, &quot; + myPathPoints[ i ].Y + &quot;, &quot; + myPathTypes[ i ], myFont, myBrush, 20, j );\n         j += 20;\n      }\n\n      // Create a GraphicsPathIterator.\n      GraphicsPathIterator^ myPathIterator = gcnew GraphicsPathIterator( myPath );\n      int myStartIndex;\n      int myEndIndex;\n      bool myIsClosed;\n\n      // get the number of Subpaths.\n      int numSubpaths = myPathIterator-&gt;NextSubpath( myPath, myIsClosed );\n      numSubpaths -= 1;\n\n      // Rewind the Iterator.\n      myPathIterator-&gt;Rewind();\n\n      // List the Subpaths to the screen.\n      j = 20;\n      for ( i = 0; i &lt; numSubpaths; i++ )\n      {\n         myPathIterator-&gt;NextSubpath( myStartIndex, myEndIndex, myIsClosed );\n         String^ s = String::Format( &quot;Subpath {0}:  Start: {1}&quot;, i, myStartIndex );\n         s = s + String::Format( &quot;  End: {0}  IsClosed: {1}&quot;, myEndIndex, myIsClosed );\n         e-&gt;Graphics-&gt;DrawString( s, myFont, myBrush, 200, j );\n         j += 20;\n      }\n\n      // Draw the total number of Subpaths to the screen.\n      j += 20;\n      e-&gt;Graphics-&gt;DrawString( String::Format( &quot;Number Subpaths = {0}&quot;, numSubpaths ), myFont, myBrush, 200, j );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8\">        private void NextSubpathExample(PaintEventArgs e)\n        {\n                     \n            // Create the GraphicsPath.\n            GraphicsPath myPath = new GraphicsPath();\n            Point[] myPoints = {new Point(20, 20), new Point(120, 120), \n                new Point(20, 120),new Point(20, 20) }; \n            Rectangle myRect = new Rectangle(120, 120, 100, 100);\n                     \n            // Add 3 lines, a rectangle, an ellipse, and 2 markers.\n            myPath.AddLines(myPoints);\n            myPath.AddRectangle(myRect);\n            myPath.AddEllipse(220, 220, 100, 100);\n                     \n            // Get the total number of points for the path,\n                     \n            // and the arrays of the points and types.\n            int myPathPointCount = myPath.PointCount;\n            PointF[] myPathPoints = myPath.PathPoints;\n            byte[] myPathTypes = myPath.PathTypes;\n                     \n            // Set up variables for drawing the array of\n                     \n            // points to the screen.\n            int i;\n            float j = 20;\n            Font myFont = new Font(&quot;Arial&quot;, 8);\n            SolidBrush myBrush = new SolidBrush(Color.Black);\n                     \n            // Draw the set of path points and types to the screen.\n            for(i=0; i &lt; myPathPointCount; i++)\n            {\n                e.Graphics.DrawString(myPathPoints[i].X.ToString()+\n                    &quot;, &quot; + myPathPoints[i].Y.ToString() + &quot;, &quot; +\n                    myPathTypes[i].ToString(),\n                    myFont,\n                    myBrush,\n                    20,\n                    j);\n                j+=20;\n            }\n                     \n            // Create a GraphicsPathIterator.\n            GraphicsPathIterator myPathIterator = new\n                GraphicsPathIterator(myPath);\n            int myStartIndex;\n            int myEndIndex;\n            bool myIsClosed;\n                     \n            // get the number of Subpaths.\n            int numSubpaths = myPathIterator.NextSubpath(myPath,\n                out myIsClosed);\n            numSubpaths -= 1;\n                     \n            // Rewind the Iterator.\n            myPathIterator.Rewind();\n                     \n            // List the Subpaths to the screen.\n            j=20;\n            for(i=0;i&lt;numSubpaths;i++)\n            {\n                myPathIterator.NextSubpath(out myStartIndex,\n                    out myEndIndex,\n                    out myIsClosed);\n                e.Graphics.DrawString(&quot;Subpath &quot; + i.ToString() +\n                    &quot;:  Start: &quot; + myStartIndex.ToString()+\n                    &quot;  End: &quot; + myEndIndex.ToString() +\n                    &quot;  IsClosed: &quot; + myIsClosed.ToString(),\n                    myFont,\n                    myBrush,\n                    200,\n                    j);\n                j += 20;\n            }\n                     \n            // Draw the total number of Subpaths to the screen.\n            j += 20;\n            e.Graphics.DrawString(&quot;Number Subpaths = &quot; +\n                numSubpaths.ToString(),\n                myFont,\n                myBrush,\n                200,\n                j);\n        }\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Drawing_Drawing2D_GraphicsPathIterator_Rewind\">\r\n    \r\n            <a id=\"System_Drawing_Drawing2D_GraphicsPathIterator_Rewind_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rewind()</div>        \r\n          </div>\r\n    \r\n            <p>Rewinds this <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator\" data-linktype=\"relative-path\">GraphicsPathIterator</a> to the beginning of its associated path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Rewind ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The first time you call the <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator#System_Drawing_Drawing2D_GraphicsPathIterator_NextSubpath_\" data-linktype=\"relative-path\">NextSubpath</a> method of an iterator, it gets the first figure (subpath) of that iterator&#39;s associated path. The second time, it gets the second figure, and so on. When you call the Rewind method, the sequence starts over; that is, after you call Rewind, the next call to <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator#System_Drawing_Drawing2D_GraphicsPathIterator_NextSubpath_\" data-linktype=\"relative-path\">NextSubpath</a> gets the first figure in the path. The <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator#System_Drawing_Drawing2D_GraphicsPathIterator_NextMarker_\" data-linktype=\"relative-path\">NextMarker</a> and <a class=\"xref\" href=\"system.drawing.drawing2d.graphicspathiterator#System_Drawing_Drawing2D_GraphicsPathIterator_NextPathType_\" data-linktype=\"relative-path\">NextPathType</a> methods behave similarly.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Drawing.Drawing2D.GraphicsPathIterator.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Drawing.Drawing2D.GraphicsPathIterator.yml\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator..ctor\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator.CopyData\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator.Count\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator.Finalize\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator.Rewind\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount\">\r\n<meta name=\"APILocation\" content=\"System.Drawing.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3349e64e-4d9b-bed8-1b13-8942cc5566b1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the ability to iterate through subpaths in a  and test the types of shapes contained in each subpath. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Drawing.Drawing2D/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Drawing.Drawing2D.GraphicsPathIterator\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Drawing.Drawing2D.GraphicsPathIterator.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Drawing.Drawing2D.GraphicsPathIterator.yml","open_to_public_contributors":true,"api_name":["System.Drawing.Drawing2D.GraphicsPathIterator","System.Drawing.Drawing2D.GraphicsPathIterator..ctor","System.Drawing.Drawing2D.GraphicsPathIterator.CopyData","System.Drawing.Drawing2D.GraphicsPathIterator.Count","System.Drawing.Drawing2D.GraphicsPathIterator.Dispose","System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate","System.Drawing.Drawing2D.GraphicsPathIterator.Finalize","System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve","System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker","System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType","System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath","System.Drawing.Drawing2D.GraphicsPathIterator.Rewind","System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount"],"api_location":["System.Drawing.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Drawing.Drawing2D.GraphicsPathIterator","System::Drawing::Drawing2D::GraphicsPathIterator","System.Drawing.Drawing2D.GraphicsPathIterator.#ctor","System::Drawing::Drawing2D::GraphicsPathIterator::#ctor","System.Drawing.Drawing2D.GraphicsPathIterator.CopyData","System::Drawing::Drawing2D::GraphicsPathIterator::CopyData","System.Drawing.Drawing2D.GraphicsPathIterator.Count","System::Drawing::Drawing2D::GraphicsPathIterator::Count","System.Drawing.Drawing2D.GraphicsPathIterator.Dispose","System::Drawing::Drawing2D::GraphicsPathIterator::Dispose","System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate","System::Drawing::Drawing2D::GraphicsPathIterator::Enumerate","System.Drawing.Drawing2D.GraphicsPathIterator.Finalize","System::Drawing::Drawing2D::GraphicsPathIterator::Finalize","System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve","System::Drawing::Drawing2D::GraphicsPathIterator::HasCurve","System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker","System::Drawing::Drawing2D::GraphicsPathIterator::NextMarker","System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType","System::Drawing::Drawing2D::GraphicsPathIterator::NextPathType","System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath","System::Drawing::Drawing2D::GraphicsPathIterator::NextSubpath","System.Drawing.Drawing2D.GraphicsPathIterator.Rewind","System::Drawing::Drawing2D::GraphicsPathIterator::Rewind","System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount","System::Drawing::Drawing2D::GraphicsPathIterator::SubpathCount"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3349e64e-4d9b-bed8-1b13-8942cc5566b1","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Drawing.Drawing2D/GraphicsPathIterator.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"GraphicsPathIterator class | Microsoft Docs","_op_ogTitle":"GraphicsPathIterator class","description":"Provides the ability to iterate through subpaths in a  and test the types of shapes contained in each subpath. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Drawing.Drawing2D/toc.json","toc_rel":"_splitted/System.Drawing.Drawing2D/toc.json","source_url":"","ms.assetid":"System.Drawing.Drawing2D.GraphicsPathIterator","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.drawing.drawing2d.graphicspathiterator","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.drawing.drawing2d.graphicspathiterator","fileRelativePath":"System.Drawing.Drawing2D.GraphicsPathIterator.html"},"themesRelativePathToOutputRoot":"_themes/"}