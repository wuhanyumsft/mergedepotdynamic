{"content":"    \r\n    <h1 id=\"System_Net_HttpListenerResponse\">\r\n      <span class=\"lang-csharp\">HttpListenerResponse</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a response to a request being handled by an <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class HttpListenerResponse : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">HttpListenerResponse</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>When a client makes a request for a resource handled by an <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> object, the request and response are made available to your application in an <a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a> object. The request is represented by an <a class=\"xref\" href=\"system.net.httplistenerrequest\" data-linktype=\"relative-path\">HttpListenerRequest</a> object and is available in the <a class=\"xref\" href=\"system.net.httplistenercontext#System_Net_HttpListenerContext_Request_\" data-linktype=\"relative-path\">Request</a> property. The response is represented by an HttpListenerResponse object and is available in the <a class=\"xref\" href=\"system.net.httplistenercontext#System_Net_HttpListenerContext_Response_\" data-linktype=\"relative-path\">Response</a> property.  </p>\n<p> You can customize the response by setting various properties, such as <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_StatusCode_\" data-linktype=\"relative-path\">StatusCode</a>, <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_StatusDescription_\" data-linktype=\"relative-path\">StatusDescription</a>, and <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_Cookies_\" data-linktype=\"relative-path\">Cookies</a>. Use the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_OutputStream_\" data-linktype=\"relative-path\">OutputStream</a> property to obtain a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> instance to which response data can be written. Finally, send the response data to the client by calling the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_Close_\" data-linktype=\"relative-path\">Close</a> method.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_ContentEncoding\" data-linktype=\"self-bookmark\">ContentEncoding</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> for this response&#39;s <span class=\"xref\">stem.Net.HttpListenerResponse.OutputStream*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_ContentLength64\" data-linktype=\"self-bookmark\">ContentLength64</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the number of bytes in the body data included in the response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_ContentType\" data-linktype=\"self-bookmark\">ContentType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the MIME type of the content returned.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_Cookies\" data-linktype=\"self-bookmark\">Cookies</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the collection of cookies returned with the response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_Headers\" data-linktype=\"self-bookmark\">Headers</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the collection of header name/value pairs returned by the server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_KeepAlive\" data-linktype=\"self-bookmark\">KeepAlive</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether the server requests a persistent connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_OutputStream\" data-linktype=\"self-bookmark\">OutputStream</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to which a response can be written.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_ProtocolVersion\" data-linktype=\"self-bookmark\">ProtocolVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the HTTP version used for the response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_RedirectLocation\" data-linktype=\"self-bookmark\">RedirectLocation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the value of the HTTP <code>Location</code> header in this response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_SendChunked\" data-linktype=\"self-bookmark\">SendChunked</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets whether the response uses chunked transfer encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_StatusCode\" data-linktype=\"self-bookmark\">StatusCode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the HTTP status code to be returned to the client.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_StatusDescription\" data-linktype=\"self-bookmark\">StatusDescription</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a text description of the HTTP status code returned to the client.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_Abort\" data-linktype=\"self-bookmark\">Abort()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the connection to the client without sending a response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_AddHeader_System_String_System_String_\" data-linktype=\"self-bookmark\">AddHeader(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified header and value to the HTTP headers for this response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_AppendCookie_System_Net_Cookie_\" data-linktype=\"self-bookmark\">AppendCookie(Cookie)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified <a class=\"xref\" href=\"system.net.cookie\" data-linktype=\"relative-path\">Cookie</a> to the collection of cookies for this response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_AppendHeader_System_String_System_String_\" data-linktype=\"self-bookmark\">AppendHeader(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Appends a value to the specified HTTP header to be sent with this response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends the response to the client and releases the resources held by this <a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_Close_System_Byte___System_Boolean_\" data-linktype=\"self-bookmark\">Close(Byte[],Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the specified byte array to the client and releases the resources held by this <a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_CopyFrom_System_Net_HttpListenerResponse_\" data-linktype=\"self-bookmark\">CopyFrom(HttpListenerResponse)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies properties from the specified <a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a> to this response.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_Redirect_System_String_\" data-linktype=\"self-bookmark\">Redirect(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Configures the response to redirect the client to the specified URL.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_SetCookie_System_Net_Cookie_\" data-linktype=\"self-bookmark\">SetCookie(Cookie)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds or updates a <a class=\"xref\" href=\"system.net.cookie\" data-linktype=\"relative-path\">Cookie</a> in the collection of cookies sent with this response.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_HttpListenerResponse_System_IDisposable_Dispose\" data-linktype=\"self-bookmark\">IDisposable.Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_ContentEncoding\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_ContentEncoding_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentEncoding</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> for this response&#39;s <span class=\"xref\">stem.Net.HttpListenerResponse.OutputStream*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.Encoding ContentEncoding { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object suitable for use with the data in the <span class=\"xref\">stem.Net.HttpListenerResponse.OutputStream*</span> property, or <code>null</code> if no encoding is specified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> object can be used to convert byte sequences into character sets (code pages) and characters into byte sequences.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using this property.  </p>\n<pre><code class=\"lang-vb\" name=\"NclListener#5\">    Private Shared message403 As String\n    Private Shared preMade403Response As HttpListenerResponse\n    Private Shared Sub SendBadCertificateResponse(ByVal response As HttpListenerResponse)\n        \n        If preMade403Response Is Nothing Then\n            &#39; Set up an authentication error response template.\n            response.StatusCode = Cint(HttpStatusCode.Forbidden)\n            response.StatusDescription = &quot;403 Forbidden&quot;\n            response.ProtocolVersion = New Version(&quot;1.1&quot;)\n            response.SendChunked = False\n        Else\n            response.CopyFrom(preMade403Response) \n        End If\n        \n        &#39; The response body cannot be saved in the template.\n        Dim message As New StringBuilder()\n        message.Append(&quot;&lt;HTML&gt;&lt;BODY&gt;&quot;)\n        message.Append(&quot;&lt;p&gt; Error message 403: Access is denied due to a missing or invalid client certificate.&lt;/p&gt;&quot;)\n        message.Append(&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;)\n        message403 = message.ToString()\n\n        &#39; Turn the error message into a byte array using the \n        &#39; encoding from the response when present.\n        Dim encoding As System.Text.Encoding = response.ContentEncoding\n        If encoding Is Nothing Then\n            encoding = System.Text.Encoding.UTF8\n            response.ContentEncoding = encoding\n        End If\n\n        Dim buffer() As Byte = encoding.GetBytes(message403)\n        response.ContentLength64 = buffer.Length\n        &#39; Write the error message.\n        Dim stream As System.IO.Stream = response.OutputStream\n        stream.Write(buffer, 0, buffer.Length)\n        &#39; Send the response.\n        response.Close()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"NclListener#5\">        static string message403;\n        static HttpListenerResponse preMade403Response;\n        static void SendBadCertificateResponse(HttpListenerResponse response)\n        {\n            if (preMade403Response == null)\n            {\n                // Set up an authentication error response template.\n                response.StatusCode = (int)HttpStatusCode.Forbidden;\n                response.StatusDescription = &quot;403 Forbidden&quot;;\n                response.ProtocolVersion = new Version(&quot;1.1&quot;);\n                response.SendChunked = false;\n\n                preMade403Response = response;\n            }\n            else\n            {\n                response.CopyFrom(preMade403Response);\n            }\n\n            // The response body cannot be saved in the template.\n\n            StringBuilder message = new StringBuilder();\n            message.Append(&quot;&lt;HTML&gt;&lt;BODY&gt;&quot;);\n            message.Append(&quot;&lt;p&gt; Error message 403: Access is denied due to a missing or invalid client certificate.&lt;/p&gt;&quot;);\n            message.Append(&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;);\n            message403 = message.ToString();\n\n            // Turn the error message into a byte array using the \n            // encoding from the response when present.\n            System.Text.Encoding encoding = response.ContentEncoding;\n            if (encoding == null)\n            {\n                encoding = System.Text.Encoding.UTF8;\n                response.ContentEncoding = encoding;\n            }\n\n            byte[] buffer = encoding.GetBytes(message403);\n            response.ContentLength64 = buffer.Length;\n            // Write the error message.\n            System.IO.Stream stream = response.OutputStream;\n            stream.Write(buffer, 0, buffer.Length);\n            // Send the response.\n            response.Close();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_ContentLength64\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_ContentLength64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentLength64</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the number of bytes in the body data included in the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long ContentLength64 { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The value of the response&#39;s <code>Content-Length</code> header.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The response is already being sent.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Content-Length</code> header expresses the length, in bytes, of the response&#39;s body data. When using a format that is not send the data chunked or raw, you must set the ContentLength64 property. If you do not, the <a class=\"xref\" href=\"system.net.httplistener\" data-linktype=\"relative-path\">HttpListener</a> does not send the response data.  </p>\n<p> For a complete list of response headers, see the <a class=\"xref\" href=\"system.net.httpresponseheader\" data-linktype=\"relative-path\">HttpResponseHeader</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates setting the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#2\">    // This example requires the System and System.Net namespaces.\n    public static void SimpleListenerExample(string[] prefixes)\n    {\n        if (!HttpListener.IsSupported)\n        {\n            Console.WriteLine (&quot;Windows XP SP2 or Server 2003 is required to use the HttpListener class.&quot;);\n            return;\n        }\n        // URI prefixes are required,\n        // for example &quot;http://contoso.com:8080/index/&quot;.\n        if (prefixes == null || prefixes.Length == 0)\n          throw new ArgumentException(&quot;prefixes&quot;);\n        \n        // Create a listener.\n        HttpListener listener = new HttpListener();\n        // Add the prefixes.\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        Console.WriteLine(&quot;Listening...&quot;);\n        // Note: The GetContext method blocks while waiting for a request. \n        HttpListenerContext context = listener.GetContext();\n        HttpListenerRequest request = context.Request;\n        // Obtain a response object.\n        HttpListenerResponse response = context.Response;\n        // Construct a response.\n        string responseString = &quot;&lt;HTML&gt;&lt;BODY&gt; Hello world!&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(responseString);\n        // Get a response stream and write the response to it.\n        response.ContentLength64 = buffer.Length;\n        System.IO.Stream output = response.OutputStream;\n        output.Write(buffer,0,buffer.Length);\n        // You must close the output stream.\n        output.Close();\n        listener.Stop();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_ContentType\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_ContentType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContentType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the MIME type of the content returned.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ContentType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instance that contains the text of the response&#39;s <code>Content-Type</code> header.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When communicating with a Web browser, you should explicitly set this property when returning any content type other than <code>text/html</code>.  </p>\n<p> For a complete list of response headers, see the <a class=\"xref\" href=\"system.net.httpresponseheader\" data-linktype=\"relative-path\">HttpResponseHeader</a> enumeration.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_Cookies\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_Cookies_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Cookies</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the collection of cookies returned with the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.CookieCollection Cookies { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.cookiecollection\" data-linktype=\"relative-path\">CookieCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.cookiecollection\" data-linktype=\"relative-path\">CookieCollection</a> that contains cookies to accompany the response. The collection is empty if no cookies have been added to the response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A cookie is name/value text data from a Web server that is stored on the local (client) computer. The following cookie formats are supported: Netscape, RFC 2109, and RFC 2965. The Netscape cookie specification is available at <a href=\"http://wp.netscape.com/newsref/std/cookie_spec.html\" data-linktype=\"external\">http://wp.netscape.com/newsref/std/cookie_spec.html</a>; the RFC documents are available at <a href=\"http://www.rfc-editor.org\" data-linktype=\"external\">http://www.rfc-editor.org</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example checks a request for a cookie, and returns a new cookie with the response if the request did not have one.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#20\">        // This example requires the System and System.Net namespaces.\n\n        public static string NextCustomerID()\n        {\n            // A real-world application would do something more robust\n            // to ensure uniqueness.\n            return DateTime.Now.ToString();\n        }\n        public static void SimpleListenerCookieExample(string[] prefixes)\n        {\n            // Create a listener.\n            HttpListener listener = new HttpListener();\n            // Add the prefixes.\n            foreach (string s in prefixes)\n            {\n                listener.Prefixes.Add(s);\n            }\n            listener.IgnoreWriteExceptions = true;\n            listener.Start();\n            Console.WriteLine(&quot;Listening...&quot;);\n            // Note: The GetContext method blocks while waiting for a request. \n            HttpListenerContext context = listener.GetContext();\n            HttpListenerRequest request = context.Request;\n            string customerID = null;\n\n            // Did the request come with a cookie?\n            Cookie cookie = request.Cookies[&quot;ID&quot;];\n            if (cookie != null)\n            {\n                 customerID=cookie.Value;\n            }\n            if (customerID !=null)\n            {\n                  Console.WriteLine(&quot;Found the cookie!&quot;);\n            }\n            // Get the response object.\n            HttpListenerResponse response = context.Response;\n            // If they didn&#39;t provide a cookie containing their ID, give them one.\n            if (customerID == null)\n            {\n                customerID = NextCustomerID();\n                Cookie cook = new Cookie(&quot;ID&quot;, customerID );\n                response.AppendCookie (cook);\n            }\n            // Construct a response.\n            string responseString = &quot;&lt;HTML&gt;&lt;BODY&gt; Hello &quot; + customerID + &quot;!&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n            byte[] buffer = System.Text.Encoding.UTF8.GetBytes(responseString);\n            // Get the response stream and write the response to it.\n            response.ContentLength64 = buffer.Length;\n            System.IO.Stream output = response.OutputStream;\n            output.Write(buffer,0,buffer.Length);\n            // You must close the output stream.\n            output.Close();\n            // Closing the response sends the response to the client.\n            response.Close();\n            listener.Stop();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_Headers\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_Headers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Headers</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the collection of header name/value pairs returned by the server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Net.WebHeaderCollection Headers { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a> instance that contains all the explicitly set HTTP headers to be included in the response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a> instance specified for a set operation is not valid for a response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Response headers contain metadata information such as the date and time of the response, the identity of the responding server, and the MIME type of the data contained in the response body.  </p>\n<p> For a complete list of response headers, see the <a class=\"xref\" href=\"system.net.httpresponseheader\" data-linktype=\"relative-path\">HttpResponseHeader</a> enumeration.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If you attempt to set a Content-Length, Keep-Alive, Transfer-Encoding, or WWW-Authenticate header using the Headers property, an exception will be thrown. Use the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a> or <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_ContentLength64_\" data-linktype=\"relative-path\">ContentLength64</a> properties to set these headers. You cannot set the Transfer-Encoding or WWW-Authenticate headers manually.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the headers in a <a class=\"xref\" href=\"system.net.webheadercollection\" data-linktype=\"relative-path\">WebHeaderCollection</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#23\">        // Displays the header information that accompanied a request.\n    public static void DisplayWebHeaderCollection(HttpListenerResponse response)\n    {\n        WebHeaderCollection headers = response.Headers;\n        // Get each header and display each value.\n        foreach (string key in headers.AllKeys)\n        {\n            string[] values = headers.GetValues(key);\n            if(values.Length &gt; 0) \n            {\n                Console.WriteLine(&quot;The values of the {0} header are: &quot;, key);\n                foreach (string value in values) \n                {\n                    Console.WriteLine(&quot;   {0}&quot;, value);\n                }\n            }\n            else\n                Console.WriteLine(&quot;There is no value associated with the header.&quot;);\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_KeepAlive\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_KeepAlive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeepAlive</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether the server requests a persistent connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool KeepAlive { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the server requests a persistent connection; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If an HTTP client and server expect to exchange data multiple times in a short period, a persistent connection speeds up their communications by allowing them to avoid the overhead required to open and close a TCP connection for each message. Persistent connections are in widespread use in communications between modern Web browsers and Web servers.  </p>\n<p> Persistent connections are described in detail in the HTTP/1.1 protocol specification (RFC 2616) available at the RTF Editor Web site (<a href=\"http://www.rfc-editor.org\" data-linktype=\"external\">http://www.rfc-editor.org</a>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates setting the value of this property.  </p>\n<pre><code class=\"lang-vb\" name=\"NclListener#7\">\n            &#39; When the client is not authenticated, there is no Identity.\n            If context.User Is Nothing Then\n                message.Append(&quot;&lt;HTML&gt;&lt;BODY&gt;&lt;p&gt; Hello local user! &lt;/p&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot;)\n            Else\n                &#39; Get the requester&#39;s identity.\n                Dim identity As System.Security.Principal.WindowsIdentity = WindowsIdentity.GetCurrent()\n                &#39; Construct the response body.\n                message.AppendFormat(&quot;&lt;HTML&gt;&lt;BODY&gt;&lt;p&gt; Hello {0}!&lt;br/&gt;&quot;, identity.Name)\n                message.AppendFormat(&quot;You were authenticated using {0}.&lt;/p&gt;&quot;, identity.AuthenticationType)\n                message.Append(&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;)\n            End If\n\n            &#39; Configure the response.\n            Dim response As HttpListenerResponse = context.Response\n\n            &#39; Use the encoding from the response if one has been set.\n            &#39; Otherwise, use UTF8.\n            Dim encoding As System.Text.Encoding = response.ContentEncoding\n            If encoding Is Nothing Then\n                encoding = System.Text.Encoding.UTF8\n                response.ContentEncoding = encoding\n            End If\n            Dim buffer() As Byte = encoding.GetBytes(message.ToString())\n            response.ContentLength64 = buffer.Length\n            response.StatusCode = CInt(HttpStatusCode.OK)\n            response.StatusDescription = &quot;OK&quot;\n            response.ProtocolVersion = New Version(&quot;1.1&quot;)\n            &#39; Don&#39;t keep the TCP connection alive\n            &#39; We don&#39;t expect multiple requests from the same client.\n            response.KeepAlive = False\n            &#39; Write the response body.\n            Dim stream As System.IO.Stream = response.OutputStream\n            stream.Write(buffer, 0, buffer.Length)\n</code></pre><pre><code class=\"lang-cs\" name=\"NclListener#7\">\n            // When the client is not authenticated, there is no Identity.\n            if (context.User == null)\n            {\n                message.Append (&quot;&lt;HTML&gt;&lt;BODY&gt;&lt;p&gt; Hello local user! &lt;/p&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot;);\n            }\n            else\n            {\n                // Get the requester&#39;s identity.\n                System.Security.Principal.WindowsIdentity identity = WindowsIdentity.GetCurrent();\n                // Construct the response body.\n                message.AppendFormat (&quot;&lt;HTML&gt;&lt;BODY&gt;&lt;p&gt; Hello {0}!&lt;br/&gt;&quot;, \n                    identity.Name);\n                message.AppendFormat (&quot;You were authenticated using {0}.&lt;/p&gt;&quot;, \n                    identity.AuthenticationType);\n                message.Append (&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;);\n            }\n\n            // Configure the response.\n            HttpListenerResponse response = context.Response;\n\n            // Use the encoding from the response if one has been set.\n            // Otherwise, use UTF8.\n            System.Text.Encoding encoding = response.ContentEncoding;\n            if (encoding == null)\n            {\n                encoding = System.Text.Encoding.UTF8;\n                response.ContentEncoding = encoding;\n            }\n            byte[] buffer = encoding.GetBytes (message.ToString ());\n            response.ContentLength64 = buffer.Length;\n            response.StatusCode = (int) HttpStatusCode.OK;\n            response.StatusDescription = &quot;OK&quot;;\n            response.ProtocolVersion = new Version (&quot;1.1&quot;);\n            // Don&#39;t keep the TCP connection alive; \n            // We don&#39;t expect multiple requests from the same client.\n            response.KeepAlive = false;\n            // Write the response body.\n            System.IO.Stream stream = response.OutputStream;\n            stream.Write(buffer, 0, buffer.Length);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_OutputStream\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_OutputStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OutputStream</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to which a response can be written.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.IO.Stream OutputStream { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object to which a response can be written.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_ContentLength64_\" data-linktype=\"relative-path\">ContentLength64</a> property must be set explicitly before writing to the returned <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Closing the request does not close the stream returned by this property. When you no longer need the stream, you should close it by calling the Close method.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this method.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#3\">    // This example requires the System and System.Net namespaces.\n    public static string ClientInformation(HttpListenerContext context)\n    {\n        System.Security.Principal.IPrincipal user = context.User;\n        System.Security.Principal.IIdentity id = user.Identity;\n        if (id == null)\n        {\n            return &quot;Client authentication is not enabled for this Web server.&quot;;\n        }\n        \n        string display;\n        if (id.IsAuthenticated)\n        {\n            display = String.Format(&quot;{0} was authenticated using {1}&quot;, id.Name, \n                id.AuthenticationType);\n        }\n        else\n        {\n           display = String.Format(&quot;{0} was not authenticated&quot;, id.Name);\n        }\n        return display;\n    }\n\n    public static void SimpleListenerWithAuthentication(string[] prefixes)\n    {\n        if (!HttpListener.IsSupported)\n        {\n            Console.WriteLine (&quot;Windows XP SP2 or Server 2003 is required to use the HttpListener class.&quot;);\n            return;\n        }\n\n        // URI prefixes are required,\n        // for example &quot;http://contoso.com:8080/index/&quot;.\n        if (prefixes == null || prefixes.Length == 0)\n          throw new ArgumentException(&quot;prefixes&quot;);\n\n        // Set up a listener.\n        HttpListener listener = new HttpListener();\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        // Specify Negotiate as the authentication scheme.\n        listener.AuthenticationSchemes = AuthenticationSchemes.Negotiate;\n        Console.WriteLine(&quot;Listening...&quot;);\n        // GetContext blocks while waiting for a request. \n        HttpListenerContext context = listener.GetContext();\n        HttpListenerRequest request = context.Request;\n        // Obtain a response object.\n        HttpListenerResponse response = context.Response;\n        // Construct a response.\n        string clientInformation = ClientInformation(context);\n        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(&quot;&lt;HTML&gt;&lt;BODY&gt; &quot; + clientInformation + &quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;);\n        // Get a response stream and write the response to it.\n        response.ContentLength64 = buffer.Length;\n        System.IO.Stream output = response.OutputStream;\n        output.Write(buffer,0,buffer.Length);\n        output.Close();\n        listener.Stop();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_ProtocolVersion\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_ProtocolVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProtocolVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the HTTP version used for the response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version ProtocolVersion { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object indicating the version of HTTP used when responding to the client. Note that this property is now obsolete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation does not have its <span class=\"xref\">stem.Version.Major*</span> property set to 1 or does not have its <span class=\"xref\">stem.Version.Minor*</span> property set to either 0 or 1.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capabilities of different HTTP versions are specified in the documents available at <a href=\"http://www.ietf.org\" data-linktype=\"external\">http://www.ietf.org</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates setting the value of this property.  </p>\n<pre><code class=\"lang-vb\" name=\"NclListener#5\">    Private Shared message403 As String\n    Private Shared preMade403Response As HttpListenerResponse\n    Private Shared Sub SendBadCertificateResponse(ByVal response As HttpListenerResponse)\n        \n        If preMade403Response Is Nothing Then\n            &#39; Set up an authentication error response template.\n            response.StatusCode = Cint(HttpStatusCode.Forbidden)\n            response.StatusDescription = &quot;403 Forbidden&quot;\n            response.ProtocolVersion = New Version(&quot;1.1&quot;)\n            response.SendChunked = False\n        Else\n            response.CopyFrom(preMade403Response) \n        End If\n        \n        &#39; The response body cannot be saved in the template.\n        Dim message As New StringBuilder()\n        message.Append(&quot;&lt;HTML&gt;&lt;BODY&gt;&quot;)\n        message.Append(&quot;&lt;p&gt; Error message 403: Access is denied due to a missing or invalid client certificate.&lt;/p&gt;&quot;)\n        message.Append(&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;)\n        message403 = message.ToString()\n\n        &#39; Turn the error message into a byte array using the \n        &#39; encoding from the response when present.\n        Dim encoding As System.Text.Encoding = response.ContentEncoding\n        If encoding Is Nothing Then\n            encoding = System.Text.Encoding.UTF8\n            response.ContentEncoding = encoding\n        End If\n\n        Dim buffer() As Byte = encoding.GetBytes(message403)\n        response.ContentLength64 = buffer.Length\n        &#39; Write the error message.\n        Dim stream As System.IO.Stream = response.OutputStream\n        stream.Write(buffer, 0, buffer.Length)\n        &#39; Send the response.\n        response.Close()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"NclListener#5\">        static string message403;\n        static HttpListenerResponse preMade403Response;\n        static void SendBadCertificateResponse(HttpListenerResponse response)\n        {\n            if (preMade403Response == null)\n            {\n                // Set up an authentication error response template.\n                response.StatusCode = (int)HttpStatusCode.Forbidden;\n                response.StatusDescription = &quot;403 Forbidden&quot;;\n                response.ProtocolVersion = new Version(&quot;1.1&quot;);\n                response.SendChunked = false;\n\n                preMade403Response = response;\n            }\n            else\n            {\n                response.CopyFrom(preMade403Response);\n            }\n\n            // The response body cannot be saved in the template.\n\n            StringBuilder message = new StringBuilder();\n            message.Append(&quot;&lt;HTML&gt;&lt;BODY&gt;&quot;);\n            message.Append(&quot;&lt;p&gt; Error message 403: Access is denied due to a missing or invalid client certificate.&lt;/p&gt;&quot;);\n            message.Append(&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;);\n            message403 = message.ToString();\n\n            // Turn the error message into a byte array using the \n            // encoding from the response when present.\n            System.Text.Encoding encoding = response.ContentEncoding;\n            if (encoding == null)\n            {\n                encoding = System.Text.Encoding.UTF8;\n                response.ContentEncoding = encoding;\n            }\n\n            byte[] buffer = encoding.GetBytes(message403);\n            response.ContentLength64 = buffer.Length;\n            // Write the error message.\n            System.IO.Stream stream = response.OutputStream;\n            stream.Write(buffer, 0, buffer.Length);\n            // Send the response.\n            response.Close();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_RedirectLocation\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_RedirectLocation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RedirectLocation</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the value of the HTTP <code>Location</code> header in this response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string RedirectLocation { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the absolute URL to be sent to the client in the <code>Location</code> header.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>Location</code> header specifies the URL to which the client is directed to locate a requested resource.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Setting this property does not automatically set the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_StatusCode_\" data-linktype=\"relative-path\">StatusCode</a> property.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates setting this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#25\">    public static void TemporaryRedirect(HttpListenerRequest request, HttpListenerResponse response)\n    {\n        if (request.Url.OriginalString == @&quot;http://www.contoso.com/index.html&quot;)\n        {\n            response.RedirectLocation = @&quot;http://www.contoso.com/indexServer/index.html&quot;;\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_SendChunked\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_SendChunked_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SendChunked</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets whether the response uses chunked transfer encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SendChunked { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the response is set to use chunked transfer encoding; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The body of a chunked message is made up of a series of chunks. Each chunk comprises of two partsâ€”the size of the chunk data and the actual data. When set to true the response is sent using chunked transfer encoding.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_StatusCode\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_StatusCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StatusCode</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the HTTP status code to be returned to the client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int StatusCode { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value that specifies the HTTP status code for the requested resource. The default is <a class=\"xref\" href=\"system.net.httpstatuscode\" data-linktype=\"relative-path\">HttpStatusCode</a>, indicating that the server successfully processed the client&#39;s request and included the requested resource in the response body.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.protocolviolationexception\" data-linktype=\"relative-path\">ProtocolViolationException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is not valid. Valid values are between 100 and 999 inclusive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Clients use the status code returned by the server to decide how to proceed. A value of <a class=\"xref\" href=\"system.net.httpstatuscode\" data-linktype=\"relative-path\">HttpStatusCode</a> indicates that the server successfully processed the client&#39;s request and included the requested resource in the response body. Other common status codes include <a class=\"xref\" href=\"system.net.httpstatuscode\" data-linktype=\"relative-path\">HttpStatusCode</a>, indicating that the requested resource was not found on the server, and <a class=\"xref\" href=\"system.net.httpstatuscode\" data-linktype=\"relative-path\">HttpStatusCode</a>, indicating that it was unnecessary to return the requested resource in the response body because the client&#39;s cached copy of the resource is up-to-date.  </p>\n<p> For a complete list of possible status codes, see the <a class=\"xref\" href=\"system.net.httpstatuscode\" data-linktype=\"relative-path\">HttpStatusCode</a> enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates setting the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#7\">    public static string[] CopyPrefixes (HttpListener listener)\n    {\n         HttpListenerPrefixCollection prefixes = listener.Prefixes;\n         string[] prefixArray = new string[prefixes.Count];\n         prefixes.CopyTo(prefixArray, 0);\n         return prefixArray;\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_StatusDescription\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_StatusDescription_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StatusDescription</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a text description of the HTTP status code returned to the client.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string StatusDescription { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The text description of the HTTP status code returned to the client. The default is the RFC 2616 description for the <span class=\"xref\">stem.Net.HttpListenerResponse.StatusCode*</span> property value, or an empty string (&quot;&quot;) if an RFC 2616 description does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for a set operation contains non-printable characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The status description typically provides details that explain the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_StatusCode_\" data-linktype=\"relative-path\">StatusCode</a> value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates setting the value of this property.  </p>\n<pre><code class=\"lang-vb\" name=\"NclListener#7\">\n            &#39; When the client is not authenticated, there is no Identity.\n            If context.User Is Nothing Then\n                message.Append(&quot;&lt;HTML&gt;&lt;BODY&gt;&lt;p&gt; Hello local user! &lt;/p&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot;)\n            Else\n                &#39; Get the requester&#39;s identity.\n                Dim identity As System.Security.Principal.WindowsIdentity = WindowsIdentity.GetCurrent()\n                &#39; Construct the response body.\n                message.AppendFormat(&quot;&lt;HTML&gt;&lt;BODY&gt;&lt;p&gt; Hello {0}!&lt;br/&gt;&quot;, identity.Name)\n                message.AppendFormat(&quot;You were authenticated using {0}.&lt;/p&gt;&quot;, identity.AuthenticationType)\n                message.Append(&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;)\n            End If\n\n            &#39; Configure the response.\n            Dim response As HttpListenerResponse = context.Response\n\n            &#39; Use the encoding from the response if one has been set.\n            &#39; Otherwise, use UTF8.\n            Dim encoding As System.Text.Encoding = response.ContentEncoding\n            If encoding Is Nothing Then\n                encoding = System.Text.Encoding.UTF8\n                response.ContentEncoding = encoding\n            End If\n            Dim buffer() As Byte = encoding.GetBytes(message.ToString())\n            response.ContentLength64 = buffer.Length\n            response.StatusCode = CInt(HttpStatusCode.OK)\n            response.StatusDescription = &quot;OK&quot;\n            response.ProtocolVersion = New Version(&quot;1.1&quot;)\n            &#39; Don&#39;t keep the TCP connection alive\n            &#39; We don&#39;t expect multiple requests from the same client.\n            response.KeepAlive = False\n            &#39; Write the response body.\n            Dim stream As System.IO.Stream = response.OutputStream\n            stream.Write(buffer, 0, buffer.Length)\n</code></pre><pre><code class=\"lang-cs\" name=\"NclListener#7\">\n            // When the client is not authenticated, there is no Identity.\n            if (context.User == null)\n            {\n                message.Append (&quot;&lt;HTML&gt;&lt;BODY&gt;&lt;p&gt; Hello local user! &lt;/p&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot;);\n            }\n            else\n            {\n                // Get the requester&#39;s identity.\n                System.Security.Principal.WindowsIdentity identity = WindowsIdentity.GetCurrent();\n                // Construct the response body.\n                message.AppendFormat (&quot;&lt;HTML&gt;&lt;BODY&gt;&lt;p&gt; Hello {0}!&lt;br/&gt;&quot;, \n                    identity.Name);\n                message.AppendFormat (&quot;You were authenticated using {0}.&lt;/p&gt;&quot;, \n                    identity.AuthenticationType);\n                message.Append (&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;);\n            }\n\n            // Configure the response.\n            HttpListenerResponse response = context.Response;\n\n            // Use the encoding from the response if one has been set.\n            // Otherwise, use UTF8.\n            System.Text.Encoding encoding = response.ContentEncoding;\n            if (encoding == null)\n            {\n                encoding = System.Text.Encoding.UTF8;\n                response.ContentEncoding = encoding;\n            }\n            byte[] buffer = encoding.GetBytes (message.ToString ());\n            response.ContentLength64 = buffer.Length;\n            response.StatusCode = (int) HttpStatusCode.OK;\n            response.StatusDescription = &quot;OK&quot;;\n            response.ProtocolVersion = new Version (&quot;1.1&quot;);\n            // Don&#39;t keep the TCP connection alive; \n            // We don&#39;t expect multiple requests from the same client.\n            response.KeepAlive = false;\n            // Write the response body.\n            System.IO.Stream stream = response.OutputStream;\n            stream.Write(buffer, 0, buffer.Length);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_Abort\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_Abort_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Abort()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the connection to the client without sending a response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Abort ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method on an object that has already been closed has no effect. If the response has not already been closed, this method closes it and the associated <a class=\"xref\" href=\"system.net.httplistenerrequest\" data-linktype=\"relative-path\">HttpListenerRequest</a> and <a class=\"xref\" href=\"system.net.httplistenercontext\" data-linktype=\"relative-path\">HttpListenerContext</a> objects. The connection to the client is also closed, regardless of the <a class=\"xref\" href=\"system.net.httplistenerrequest#System_Net_HttpListenerRequest_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a> property value of the client request.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_AddHeader_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_AddHeader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddHeader(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified header and value to the HTTP headers for this response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddHeader (string name, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the HTTP header to set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value for the <code>name</code> header.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code> or an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>You are not allowed to specify a value for the specified header.  </p>\n<p> -or-  </p>\n<p> <code>name</code> or <code>value</code> contains invalid characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>value</code> is greater than 65,535 characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method is equivalent to calling the <a class=\"xref\" href=\"system.net.webheadercollection#System_Net_WebHeaderCollection_Set_\" data-linktype=\"relative-path\">Set</a> method on the collection returned by the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_Headers_\" data-linktype=\"relative-path\">Headers</a> property.  </p>\n<p> If the header specified in <code>name</code> does not exist, this method inserts a new header into the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_Headers_\" data-linktype=\"relative-path\">Headers</a> property&#39;s collection. If <code>name</code> is present in the collection, this method replaces the existing value with <code>value</code>. To add a value to an existing header without replacing the existing value, use the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_AppendHeader_\" data-linktype=\"relative-path\">AppendHeader</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates adding a header using this property.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#26\">    public static void SetExpirationDate(long seconds, HttpListenerResponse response)\n    {\n        response.AddHeader(&quot;Expires&quot;, seconds.ToString());\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_AppendCookie_System_Net_Cookie_\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_AppendCookie_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendCookie(Cookie)</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified <a class=\"xref\" href=\"system.net.cookie\" data-linktype=\"relative-path\">Cookie</a> to the collection of cookies for this response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendCookie (System.Net.Cookie cookie);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cookie</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.cookie\" data-linktype=\"relative-path\">Cookie</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.cookie\" data-linktype=\"relative-path\">Cookie</a> to add to the collection to be sent with this response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>cookie</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method is equivalent to calling the <a class=\"xref\" href=\"system.net.cookiecollection#System_Net_CookieCollection_Add_\" data-linktype=\"relative-path\">Add</a> method on the collection returned by the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_Cookies_\" data-linktype=\"relative-path\">Cookies</a> property.  </p>\n<p> If the specified cookie does not exist in the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_Cookies_\" data-linktype=\"relative-path\">Cookies</a> property&#39;s collection, <code>cookie</code> is added. If the cookie exists in the collection, <code>cookie</code> replaces it.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates adding a cookie to a response  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#20\">        // This example requires the System and System.Net namespaces.\n\n        public static string NextCustomerID()\n        {\n            // A real-world application would do something more robust\n            // to ensure uniqueness.\n            return DateTime.Now.ToString();\n        }\n        public static void SimpleListenerCookieExample(string[] prefixes)\n        {\n            // Create a listener.\n            HttpListener listener = new HttpListener();\n            // Add the prefixes.\n            foreach (string s in prefixes)\n            {\n                listener.Prefixes.Add(s);\n            }\n            listener.IgnoreWriteExceptions = true;\n            listener.Start();\n            Console.WriteLine(&quot;Listening...&quot;);\n            // Note: The GetContext method blocks while waiting for a request. \n            HttpListenerContext context = listener.GetContext();\n            HttpListenerRequest request = context.Request;\n            string customerID = null;\n\n            // Did the request come with a cookie?\n            Cookie cookie = request.Cookies[&quot;ID&quot;];\n            if (cookie != null)\n            {\n                 customerID=cookie.Value;\n            }\n            if (customerID !=null)\n            {\n                  Console.WriteLine(&quot;Found the cookie!&quot;);\n            }\n            // Get the response object.\n            HttpListenerResponse response = context.Response;\n            // If they didn&#39;t provide a cookie containing their ID, give them one.\n            if (customerID == null)\n            {\n                customerID = NextCustomerID();\n                Cookie cook = new Cookie(&quot;ID&quot;, customerID );\n                response.AppendCookie (cook);\n            }\n            // Construct a response.\n            string responseString = &quot;&lt;HTML&gt;&lt;BODY&gt; Hello &quot; + customerID + &quot;!&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n            byte[] buffer = System.Text.Encoding.UTF8.GetBytes(responseString);\n            // Get the response stream and write the response to it.\n            response.ContentLength64 = buffer.Length;\n            System.IO.Stream output = response.OutputStream;\n            output.Write(buffer,0,buffer.Length);\n            // You must close the output stream.\n            output.Close();\n            // Closing the response sends the response to the client.\n            response.Close();\n            listener.Stop();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_AppendHeader_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_AppendHeader_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppendHeader(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Appends a value to the specified HTTP header to be sent with this response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AppendHeader (string name, string value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the HTTP header to append <code>value</code> to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to append to the <code>name</code> header.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>name</code> is <code>null</code> or an empty string (&quot;&quot;).  </p>\n<p> -or-  </p>\n<p> You are not allowed to specify a value for the specified header.  </p>\n<p> -or-  </p>\n<p> <code>name</code> or <code>value</code> contains invalid characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>value</code> is greater than 65,535 characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method is equivalent to calling the <a class=\"xref\" href=\"system.net.webheadercollection#System_Net_WebHeaderCollection_Add_\" data-linktype=\"relative-path\">Add</a> method on the collection returned by the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_Headers_\" data-linktype=\"relative-path\">Headers</a> property.  </p>\n<p> If the header specified in <code>header</code> does not exist, this method inserts a new header into the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_Headers_\" data-linktype=\"relative-path\">Headers</a> property&#39;s collection. If <code>header</code> is present in the collection, this method adds <code>value</code> to the existing values. To replace the value of an existing header, use the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_AddHeader_\" data-linktype=\"relative-path\">AddHeader</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_Close\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Sends the response to the client and releases the resources held by this <a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method closes the response stream and the <a class=\"xref\" href=\"system.net.httplistenerrequest\" data-linktype=\"relative-path\">HttpListenerRequest</a> associated with the response.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this method to send a <a class=\"xref\" href=\"system.net.httpstatuscode\" data-linktype=\"relative-path\">HttpStatusCode</a> (403) response to the client.  </p>\n<pre><code class=\"lang-vb\" name=\"NclListener#5\">    Private Shared message403 As String\n    Private Shared preMade403Response As HttpListenerResponse\n    Private Shared Sub SendBadCertificateResponse(ByVal response As HttpListenerResponse)\n        \n        If preMade403Response Is Nothing Then\n            &#39; Set up an authentication error response template.\n            response.StatusCode = Cint(HttpStatusCode.Forbidden)\n            response.StatusDescription = &quot;403 Forbidden&quot;\n            response.ProtocolVersion = New Version(&quot;1.1&quot;)\n            response.SendChunked = False\n        Else\n            response.CopyFrom(preMade403Response) \n        End If\n        \n        &#39; The response body cannot be saved in the template.\n        Dim message As New StringBuilder()\n        message.Append(&quot;&lt;HTML&gt;&lt;BODY&gt;&quot;)\n        message.Append(&quot;&lt;p&gt; Error message 403: Access is denied due to a missing or invalid client certificate.&lt;/p&gt;&quot;)\n        message.Append(&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;)\n        message403 = message.ToString()\n\n        &#39; Turn the error message into a byte array using the \n        &#39; encoding from the response when present.\n        Dim encoding As System.Text.Encoding = response.ContentEncoding\n        If encoding Is Nothing Then\n            encoding = System.Text.Encoding.UTF8\n            response.ContentEncoding = encoding\n        End If\n\n        Dim buffer() As Byte = encoding.GetBytes(message403)\n        response.ContentLength64 = buffer.Length\n        &#39; Write the error message.\n        Dim stream As System.IO.Stream = response.OutputStream\n        stream.Write(buffer, 0, buffer.Length)\n        &#39; Send the response.\n        response.Close()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"NclListener#5\">        static string message403;\n        static HttpListenerResponse preMade403Response;\n        static void SendBadCertificateResponse(HttpListenerResponse response)\n        {\n            if (preMade403Response == null)\n            {\n                // Set up an authentication error response template.\n                response.StatusCode = (int)HttpStatusCode.Forbidden;\n                response.StatusDescription = &quot;403 Forbidden&quot;;\n                response.ProtocolVersion = new Version(&quot;1.1&quot;);\n                response.SendChunked = false;\n\n                preMade403Response = response;\n            }\n            else\n            {\n                response.CopyFrom(preMade403Response);\n            }\n\n            // The response body cannot be saved in the template.\n\n            StringBuilder message = new StringBuilder();\n            message.Append(&quot;&lt;HTML&gt;&lt;BODY&gt;&quot;);\n            message.Append(&quot;&lt;p&gt; Error message 403: Access is denied due to a missing or invalid client certificate.&lt;/p&gt;&quot;);\n            message.Append(&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;);\n            message403 = message.ToString();\n\n            // Turn the error message into a byte array using the \n            // encoding from the response when present.\n            System.Text.Encoding encoding = response.ContentEncoding;\n            if (encoding == null)\n            {\n                encoding = System.Text.Encoding.UTF8;\n                response.ContentEncoding = encoding;\n            }\n\n            byte[] buffer = encoding.GetBytes(message403);\n            response.ContentLength64 = buffer.Length;\n            // Write the error message.\n            System.IO.Stream stream = response.OutputStream;\n            stream.Write(buffer, 0, buffer.Length);\n            // Send the response.\n            response.Close();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_Close_System_Byte___System_Boolean_\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close(Byte[],Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the specified byte array to the client and releases the resources held by this <a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close (byte[] responseEntity, bool willBlock);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>responseEntity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array that contains the response to send to the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>willBlock</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to block execution while flushing the stream to the client; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>responseEntity</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you are sending body data with the response, you can use this method to send it as a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array instead of writing the body data to the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_OutputStream_\" data-linktype=\"relative-path\">OutputStream</a> property and calling the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_Close_\" data-linktype=\"relative-path\">Close</a> method.  </p>\n<p> This method closes the response stream and the <a class=\"xref\" href=\"system.net.httplistenerrequest\" data-linktype=\"relative-path\">HttpListenerRequest</a> associated with the response.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this method.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#24\">    // This example requires the System and System.Net namespaces.\n    public static void SimpleListenerExample2(string[] prefixes)\n    {\n        // URI prefixes are required,\n        // for example &quot;http://contoso.com:8080/index/&quot;.\n        if (prefixes == null || prefixes.Length == 0)\n          throw new ArgumentException(&quot;prefixes&quot;);\n        \n        // Create a listener.\n        HttpListener listener = new HttpListener();\n        // Add the prefixes.\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        Console.WriteLine(&quot;Listening...&quot;);\n        // Note: The GetContext method blocks while waiting for a request. \n        HttpListenerContext context = listener.GetContext();\n        HttpListenerRequest request = context.Request;\n        // Obtain a response object.\n        HttpListenerResponse response = context.Response;\n        // Construct a response.\n        string responseString = &quot;&lt;HTML&gt;&lt;BODY&gt; Hello world!&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(responseString);\n        // Get a response stream and write the response to it.\n        response.ContentLength64 = buffer.Length;\n        // Demonstrate using the close overload that takes an \n        // entity body.\n        // Specify true to block while data is transmitted.\n        response.Close(buffer, true);\n        listener.Stop();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_CopyFrom_System_Net_HttpListenerResponse_\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_CopyFrom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyFrom(HttpListenerResponse)</div>        \r\n          </div>\r\n    \r\n            <p>Copies properties from the specified <a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a> to this response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyFrom (System.Net.HttpListenerResponse templateResponse);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>templateResponse</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a> instance to copy.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you regularly change many properties from their default values to a fixed set of new values, it is convenient to use an <a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a> instance as a template. Customize the template response once and, instead of configuring each response separately, call the CopyFrom method to configure a new response based on property values in the template response.  </p>\n<p> The following properties are copied from <code>templateResponse</code> to the current instance.  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_Headers_\" data-linktype=\"relative-path\">Headers</a>  \n</li>\n<li><a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_ContentLength64_\" data-linktype=\"relative-path\">ContentLength64</a>  \n</li>\n<li><a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_StatusCode_\" data-linktype=\"relative-path\">StatusCode</a>  \n</li>\n<li><a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_StatusDescription_\" data-linktype=\"relative-path\">StatusDescription</a>  \n</li>\n<li><a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a>  \n</li>\n<li><a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_ProtocolVersion_\" data-linktype=\"relative-path\">ProtocolVersion</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates creating a response by copying a template response.  </p>\n<pre><code class=\"lang-vb\" name=\"NCLListener#5\">    Private Shared message403 As String\n    Private Shared preMade403Response As HttpListenerResponse\n    Private Shared Sub SendBadCertificateResponse(ByVal response As HttpListenerResponse)\n        \n        If preMade403Response Is Nothing Then\n            &#39; Set up an authentication error response template.\n            response.StatusCode = Cint(HttpStatusCode.Forbidden)\n            response.StatusDescription = &quot;403 Forbidden&quot;\n            response.ProtocolVersion = New Version(&quot;1.1&quot;)\n            response.SendChunked = False\n        Else\n            response.CopyFrom(preMade403Response) \n        End If\n        \n        &#39; The response body cannot be saved in the template.\n        Dim message As New StringBuilder()\n        message.Append(&quot;&lt;HTML&gt;&lt;BODY&gt;&quot;)\n        message.Append(&quot;&lt;p&gt; Error message 403: Access is denied due to a missing or invalid client certificate.&lt;/p&gt;&quot;)\n        message.Append(&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;)\n        message403 = message.ToString()\n\n        &#39; Turn the error message into a byte array using the \n        &#39; encoding from the response when present.\n        Dim encoding As System.Text.Encoding = response.ContentEncoding\n        If encoding Is Nothing Then\n            encoding = System.Text.Encoding.UTF8\n            response.ContentEncoding = encoding\n        End If\n\n        Dim buffer() As Byte = encoding.GetBytes(message403)\n        response.ContentLength64 = buffer.Length\n        &#39; Write the error message.\n        Dim stream As System.IO.Stream = response.OutputStream\n        stream.Write(buffer, 0, buffer.Length)\n        &#39; Send the response.\n        response.Close()\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLListener#5\">        static string message403;\n        static HttpListenerResponse preMade403Response;\n        static void SendBadCertificateResponse(HttpListenerResponse response)\n        {\n            if (preMade403Response == null)\n            {\n                // Set up an authentication error response template.\n                response.StatusCode = (int)HttpStatusCode.Forbidden;\n                response.StatusDescription = &quot;403 Forbidden&quot;;\n                response.ProtocolVersion = new Version(&quot;1.1&quot;);\n                response.SendChunked = false;\n\n                preMade403Response = response;\n            }\n            else\n            {\n                response.CopyFrom(preMade403Response);\n            }\n\n            // The response body cannot be saved in the template.\n\n            StringBuilder message = new StringBuilder();\n            message.Append(&quot;&lt;HTML&gt;&lt;BODY&gt;&quot;);\n            message.Append(&quot;&lt;p&gt; Error message 403: Access is denied due to a missing or invalid client certificate.&lt;/p&gt;&quot;);\n            message.Append(&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;);\n            message403 = message.ToString();\n\n            // Turn the error message into a byte array using the \n            // encoding from the response when present.\n            System.Text.Encoding encoding = response.ContentEncoding;\n            if (encoding == null)\n            {\n                encoding = System.Text.Encoding.UTF8;\n                response.ContentEncoding = encoding;\n            }\n\n            byte[] buffer = encoding.GetBytes(message403);\n            response.ContentLength64 = buffer.Length;\n            // Write the error message.\n            System.IO.Stream stream = response.OutputStream;\n            stream.Write(buffer, 0, buffer.Length);\n            // Send the response.\n            response.Close();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_Redirect_System_String_\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_Redirect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Redirect(String)</div>        \r\n          </div>\r\n    \r\n            <p>Configures the response to redirect the client to the specified URL.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Redirect (string url);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>url</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The URL that the client should use to locate the requested resource.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Redirect method is used to redirect a client to the new location for a resource. This method sets the response&#39;s <code>Location</code> header to <code>url</code>, the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_StatusCode_\" data-linktype=\"relative-path\">StatusCode</a> property to <a class=\"xref\" href=\"system.net.httpstatuscode\" data-linktype=\"relative-path\">HttpStatusCode</a>, and the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_StatusDescription_\" data-linktype=\"relative-path\">StatusDescription</a> property to &quot;Found&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this method.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#27\">    public static void PermanentRedirect(HttpListenerRequest request, HttpListenerResponse response)\n    {\n        if (request.Url.OriginalString == @&quot;http://www.contoso.com/index.html&quot;)\n        {\n            // Sets the location header, status code and status description.\n            response.Redirect(@&quot;http://www.contoso.com/indexServer/index.html&quot;);\n        }\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_SetCookie_System_Net_Cookie_\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_SetCookie_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCookie(Cookie)</div>        \r\n          </div>\r\n    \r\n            <p>Adds or updates a <a class=\"xref\" href=\"system.net.cookie\" data-linktype=\"relative-path\">Cookie</a> in the collection of cookies sent with this response.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCookie (System.Net.Cookie cookie);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cookie</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.cookie\" data-linktype=\"relative-path\">Cookie</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.net.cookie\" data-linktype=\"relative-path\">Cookie</a> for this response.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>cookie</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The cookie already exists in the collection and could not be replaced.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Two cookies are considered the same if the values of their <a class=\"xref\" href=\"system.net.cookie#System_Net_Cookie_Name_\" data-linktype=\"relative-path\">Name</a>, <a class=\"xref\" href=\"system.net.cookie#System_Net_Cookie_Domain_\" data-linktype=\"relative-path\">Domain</a>, and <a class=\"xref\" href=\"system.net.cookie#System_Net_Cookie_Path_\" data-linktype=\"relative-path\">Path</a> properties are the same. If these three pieces of information are the same, the method attempts to update the cookie. The name and domain comparisons are not case sensitive, but the path comparison is case sensitive.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this method.  </p>\n<pre><code class=\"lang-cs\" name=\"Net_Listener_Basic#28\">    // This example requires the System and System.Net namespaces.\n    public static void SimpleCookieExample(string[] prefixes)\n    {\n        // Create a listener.\n        HttpListener listener = new HttpListener();\n        // Add the prefixes.\n        foreach (string s in prefixes)\n        {\n            listener.Prefixes.Add(s);\n        }\n        listener.Start();\n        Console.WriteLine(&quot;Listening...&quot;);\n        // Note: The GetContext method blocks while waiting for a request. \n        HttpListenerContext context = listener.GetContext();\n        HttpListenerRequest request = context.Request;\n        \n        // This application sends a cookie to the client marking the time \n        // they visited. \n        Cookie timeStampCookie = new Cookie(&quot;VisitDate&quot;, DateTime.Now.ToString());\n        // Obtain a response object.\n        HttpListenerResponse response = context.Response;\n        // Add the cookie to the response.\n        response.SetCookie(timeStampCookie);\n        // Construct a response.\n        string responseString = &quot;&lt;HTML&gt;&lt;BODY&gt; Hello world!&lt;/BODY&gt;&lt;/HTML&gt;&quot;;\n        response.ContentEncoding = System.Text.Encoding.UTF8;\n        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(responseString);\n        // Send the response.\n        response.Close(buffer, true);\n        listener.Stop();\n    }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_HttpListenerResponse_System_IDisposable_Dispose\">\r\n    \r\n            <a id=\"System_Net_HttpListenerResponse_System_IDisposable_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDisposable.Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the <a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDisposable.Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_Close_\" data-linktype=\"relative-path\">Close</a> method to send the response and release resources held by an <a class=\"xref\" href=\"system.net.httplistenerresponse\" data-linktype=\"relative-path\">HttpListenerResponse</a>. To discard the response and release the resources held by this instance, use the <a class=\"xref\" href=\"system.net.httplistenerresponse#System_Net_HttpListenerResponse_Abort_\" data-linktype=\"relative-path\">Abort</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.HttpListenerResponse.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.HttpListenerResponse.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.Abort\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.AddHeader\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.AppendCookie\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.AppendHeader\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.Close\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.ContentEncoding\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.ContentLength64\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.ContentType\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.Cookies\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.CopyFrom\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.Headers\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.KeepAlive\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.OutputStream\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.ProtocolVersion\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.Redirect\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.RedirectLocation\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.SendChunked\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.SetCookie\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.StatusCode\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.StatusDescription\">\r\n<meta name=\"APIName\" content=\"System.Net.HttpListenerResponse.IDisposable.Dispose\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a28be4e0-4fff-fcd9-2baa-235f3f55cf00\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\HttpListenerResponse.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a response to a request being handled by an  object.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.HttpListenerResponse\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.HttpListenerResponse.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.HttpListenerResponse.yml","open_to_public_contributors":true,"api_name":["System.Net.HttpListenerResponse","System.Net.HttpListenerResponse.Abort","System.Net.HttpListenerResponse.AddHeader","System.Net.HttpListenerResponse.AppendCookie","System.Net.HttpListenerResponse.AppendHeader","System.Net.HttpListenerResponse.Close","System.Net.HttpListenerResponse.ContentEncoding","System.Net.HttpListenerResponse.ContentLength64","System.Net.HttpListenerResponse.ContentType","System.Net.HttpListenerResponse.Cookies","System.Net.HttpListenerResponse.CopyFrom","System.Net.HttpListenerResponse.Headers","System.Net.HttpListenerResponse.KeepAlive","System.Net.HttpListenerResponse.OutputStream","System.Net.HttpListenerResponse.ProtocolVersion","System.Net.HttpListenerResponse.Redirect","System.Net.HttpListenerResponse.RedirectLocation","System.Net.HttpListenerResponse.SendChunked","System.Net.HttpListenerResponse.SetCookie","System.Net.HttpListenerResponse.StatusCode","System.Net.HttpListenerResponse.StatusDescription","System.Net.HttpListenerResponse.IDisposable.Dispose"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.HttpListenerResponse","System::Net::HttpListenerResponse","System.Net.HttpListenerResponse.Abort","System::Net::HttpListenerResponse::Abort","System.Net.HttpListenerResponse.AddHeader","System::Net::HttpListenerResponse::AddHeader","System.Net.HttpListenerResponse.AppendCookie","System::Net::HttpListenerResponse::AppendCookie","System.Net.HttpListenerResponse.AppendHeader","System::Net::HttpListenerResponse::AppendHeader","System.Net.HttpListenerResponse.Close","System::Net::HttpListenerResponse::Close","System.Net.HttpListenerResponse.ContentEncoding","System::Net::HttpListenerResponse::ContentEncoding","System.Net.HttpListenerResponse.ContentLength64","System::Net::HttpListenerResponse::ContentLength64","System.Net.HttpListenerResponse.ContentType","System::Net::HttpListenerResponse::ContentType","System.Net.HttpListenerResponse.Cookies","System::Net::HttpListenerResponse::Cookies","System.Net.HttpListenerResponse.CopyFrom","System::Net::HttpListenerResponse::CopyFrom","System.Net.HttpListenerResponse.Headers","System::Net::HttpListenerResponse::Headers","System.Net.HttpListenerResponse.KeepAlive","System::Net::HttpListenerResponse::KeepAlive","System.Net.HttpListenerResponse.OutputStream","System::Net::HttpListenerResponse::OutputStream","System.Net.HttpListenerResponse.ProtocolVersion","System::Net::HttpListenerResponse::ProtocolVersion","System.Net.HttpListenerResponse.Redirect","System::Net::HttpListenerResponse::Redirect","System.Net.HttpListenerResponse.RedirectLocation","System::Net::HttpListenerResponse::RedirectLocation","System.Net.HttpListenerResponse.SendChunked","System::Net::HttpListenerResponse::SendChunked","System.Net.HttpListenerResponse.SetCookie","System::Net::HttpListenerResponse::SetCookie","System.Net.HttpListenerResponse.StatusCode","System::Net::HttpListenerResponse::StatusCode","System.Net.HttpListenerResponse.StatusDescription","System::Net::HttpListenerResponse::StatusDescription","System.Net.HttpListenerResponse.System#IDisposable#Dispose","System::Net::HttpListenerResponse::System#IDisposable#Dispose"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a28be4e0-4fff-fcd9-2baa-235f3f55cf00","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net\\HttpListenerResponse.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/HttpListenerResponse.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"HttpListenerResponse class | Microsoft Docs","_op_ogTitle":"HttpListenerResponse class","description":"Represents a response to a request being handled by an  object.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.HttpListenerResponse","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.httplistenerresponse","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.httplistenerresponse","fileRelativePath":"System.Net.HttpListenerResponse.html"},"themesRelativePathToOutputRoot":"_themes/"}