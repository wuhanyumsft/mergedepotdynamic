{"content":"    \r\n    <h1 id=\"System_Diagnostics_StackFrame\">\r\n      <span class=\"lang-csharp\">StackFrame</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides information about a StackFrame, which represents a function call on the call stack for the current thread.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class StackFrame</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">StackFrame</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A StackFrame is created and pushed on the call stack for every function call made during the execution of a thread. The stack frame always includes <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> information, and optionally includes file name, line number, and column number information.  </p>\n<p> StackFrame information will be most informative with Debug build configurations. By default, Debug builds include debug symbols, while Release builds do not. The debug symbols contain most of the file, method name, line number, and column information used in constructing StackFrame objects.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame__ctor\" data-linktype=\"self-bookmark\">StackFrame()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame__ctor_System_Boolean_\" data-linktype=\"self-bookmark\">StackFrame(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class, optionally capturing source information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame__ctor_System_Int32_\" data-linktype=\"self-bookmark\">StackFrame(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class that corresponds to a frame above the current stack frame.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame__ctor_System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">StackFrame(Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class that corresponds to a frame above the current stack frame, optionally capturing source information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame__ctor_System_String_System_Int32_\" data-linktype=\"self-bookmark\">StackFrame(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class that contains only the given file name and line number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame__ctor_System_String_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">StackFrame(String,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class that contains only the given file name, line number, and column number.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame_OFFSET_UNKNOWN\" data-linktype=\"self-bookmark\">OFFSET_UNKNOWN</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines the value that is returned from the <span class=\"xref\">stem.Diagnostics.StackFrame.GetNativeOffset*</span> or <span class=\"xref\">stem.Diagnostics.StackFrame.GetILOffset*</span> method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame_GetFileColumnNumber\" data-linktype=\"self-bookmark\">GetFileColumnNumber()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame_GetFileLineNumber\" data-linktype=\"self-bookmark\">GetFileLineNumber()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame_GetFileName\" data-linktype=\"self-bookmark\">GetFileName()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame_GetILOffset\" data-linktype=\"self-bookmark\">GetILOffset()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame_GetMethod\" data-linktype=\"self-bookmark\">GetMethod()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the method in which the frame is executing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame_GetNativeOffset\" data-linktype=\"self-bookmark\">GetNativeOffset()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the offset from the start of the native just-in-time (JIT)-compiled code for the method that is being executed. The generation of this debugging information is controlled by the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_StackFrame_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Builds a readable representation of the stack trace.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame__ctor\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackFrame()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackFrame ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame__ctor_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackFrame(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class, optionally capturing source information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackFrame (bool fNeedFileInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fNeedFileInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to capture the file name, line number, and column number of the stack frame; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the StackFrame constructor. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#2\">\n      [STAThread]\n      static void Main()\n      {\n         ClassLevel1 ^ mainClass = gcnew ClassLevel1;\n         try\n         {\n            mainClass-&gt;InternalMethod();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Main method exception handler&quot; );\n            \n            // Display file and line information, if available.\n            StackTrace^ st = gcnew StackTrace( gcnew StackFrame( true ) );\n            Console::WriteLine( &quot; Stack trace for current level: {0}&quot;, st-&gt;ToString() );\n            Console::WriteLine( &quot; File: {0}&quot;, st-&gt;GetFrame( 0 )-&gt;GetFileName() );\n            Console::WriteLine( &quot; Line Number: {0}&quot;, st-&gt;GetFrame( 0 )-&gt;GetFileLineNumber().ToString() );\n            Console::WriteLine();\n            Console::WriteLine( &quot;-------------------------------------------------<br>&quot; );\n         }\n\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#2\">      &lt;STAThread()&gt;  _\n      Shared Sub Main()\n         Dim mainClass As New ClassLevel1\n         \n         Try\n            mainClass.InternalMethod()\n         Catch\n            Console.WriteLine(&quot; Main method exception handler&quot;)\n            \n            &#39; Display file and line information, if available.\n            Dim st As New StackTrace(New StackFrame(True))\n            Console.WriteLine(&quot; Stack trace for current level: {0}&quot;, _\n               st.ToString())\n            Console.WriteLine(&quot; File: {0}&quot;, _\n               st.GetFrame(0).GetFileName())\n            Console.WriteLine(&quot; Line Number: {0}&quot;, _\n               st.GetFrame(0).GetFileLineNumber().ToString())\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n         End Try\n      End Sub &#39;Main\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#2\">       [STAThread]\n       static void Main()\n        {\n            ClassLevel1 mainClass = new ClassLevel1();\n\n            try {\n                mainClass.InternalMethod();\n            }\n            catch (Exception) {\n               Console.WriteLine(&quot; Main method exception handler&quot;);\n\n               // Display file and line information, if available.\n               StackTrace st = new StackTrace(new StackFrame(true));\n               Console.WriteLine(&quot; Stack trace for current level: {0}&quot;,\n                   st.ToString());\n               Console.WriteLine(&quot; File: {0}&quot;, \n                  st.GetFrame(0).GetFileName());\n               Console.WriteLine(&quot; Line Number: {0}&quot;,\n                   st.GetFrame(0).GetFileLineNumber().ToString());\n\n               Console.WriteLine();\n               Console.WriteLine(&quot;-------------------------------------------------<br>&quot;);\n            }\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackFrame(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class that corresponds to a frame above the current stack frame.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackFrame (int skipFrames);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>skipFrames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of frames up the stack to skip.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the StackFrame constructor. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#3\">      void InternalMethod()\n      {\n         try\n         {\n            ClassLevel2^ nestedClass = gcnew ClassLevel2;\n            nestedClass-&gt;Level2Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; InternalMethod exception handler&quot; );\n            \n            // Build a stack trace from one frame, skipping the\n            // current frame and using the next frame.  By\n            // default, file and line information are not displayed.\n            StackTrace^ st = gcnew StackTrace( gcnew StackFrame( 1 ) );\n            Console::WriteLine( &quot; Stack trace for next level frame: {0}&quot;, st-&gt;ToString() );\n            Console::WriteLine( &quot; Stack frame for next level: &quot; );\n            Console::WriteLine( &quot;   {0}&quot;, st-&gt;GetFrame( 0 )-&gt;ToString() );\n            Console::WriteLine( &quot; Line Number: {0}&quot;, st-&gt;GetFrame( 0 )-&gt;GetFileLineNumber().ToString() );\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------<br>&quot; );\n            throw e;\n         }\n\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#3\">      Public Sub InternalMethod()\n         Try\n            Dim nestedClass As New ClassLevel2\n            nestedClass.Level2Method()\n         Catch e As Exception\n            Console.WriteLine(&quot; InternalMethod exception handler&quot;)\n            \n            &#39; Build a stack trace from one frame, skipping the \n            &#39; current frame and using the next frame.  By default,\n            &#39; file and line information are not displayed.\n            Dim st As New StackTrace(New StackFrame(1))\n            Console.WriteLine(&quot; Stack trace for next level frame: {0}&quot;, _\n               st.ToString())\n            Console.WriteLine(&quot; Stack frame for next level: &quot;)\n            Console.WriteLine(&quot;   {0}&quot;, st.GetFrame(0).ToString())\n            \n            Console.WriteLine(&quot; Line Number: {0}&quot;, _\n               st.GetFrame(0).GetFileLineNumber().ToString())\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;InternalMethod\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#3\">      public void InternalMethod()\n      {\n         try\n         {\n            ClassLevel2 nestedClass = new ClassLevel2();\n            nestedClass.Level2Method();\n         }\n         catch (Exception e)\n         {\n            Console.WriteLine(&quot; InternalMethod exception handler&quot;);\n\n            // Build a stack trace from one frame, skipping the\n            // current frame and using the next frame.  By\n            // default, file and line information are not displayed.\n            StackTrace st = new StackTrace(new StackFrame(1));\n            Console.WriteLine(&quot; Stack trace for next level frame: {0}&quot;,\n               st.ToString());\n            Console.WriteLine(&quot; Stack frame for next level: &quot;);\n            Console.WriteLine(&quot;   {0}&quot;, st.GetFrame(0).ToString());\n\n            Console.WriteLine(&quot; Line Number: {0}&quot;,\n               st.GetFrame(0).GetFileLineNumber().ToString());\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------<br>&quot;);\n            throw e;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame__ctor_System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackFrame(Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class that corresponds to a frame above the current stack frame, optionally capturing source information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackFrame (int skipFrames, bool fNeedFileInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>skipFrames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of frames up the stack to skip.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fNeedFileInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to capture the file name, line number, and column number of the stack frame; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the StackFrame constructor. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#4\">      void Level2Method()\n      {\n         try\n         {\n            ClassLevel3^ nestedClass = gcnew ClassLevel3;\n            nestedClass-&gt;Level3Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Level2Method exception handler&quot; );\n            \n            // Display the full call stack at this level.\n            StackTrace^ st1 = gcnew StackTrace( true );\n            Console::WriteLine( &quot; Stack trace for this level: {0}&quot;, st1-&gt;ToString() );\n            \n            // Build a stack trace from one frame, skipping the\n            // current frame and using the next frame.\n            StackTrace^ st2 = gcnew StackTrace( gcnew StackFrame( 1,true ) );\n            Console::WriteLine( &quot; Stack trace built with next level frame: {0}&quot;, st2-&gt;ToString() );\n            \n            // Build a stack trace skipping the current frame, and\n            // including all the other frames.\n            StackTrace^ st3 = gcnew StackTrace( 1,true );\n            Console::WriteLine( &quot; Stack trace built from the next level up: {0}&quot;, st3-&gt;ToString() );\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------<br>&quot; );\n            throw e;\n         }\n\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#4\">      Public Sub Level2Method()\n         Try\n            Dim nestedClass As New ClassLevel3\n            nestedClass.Level3Method()\n         \n         Catch e As Exception\n            Console.WriteLine(&quot; Level2Method exception handler&quot;)\n            \n            &#39; Display the full call stack at this level.\n            Dim st1 As New StackTrace(True)\n            Console.WriteLine(&quot; Stack trace for this level: {0}&quot;, _\n               st1.ToString())\n            \n            &#39; Build a stack trace from one frame, skipping the current\n            &#39; frame and using the next frame.\n            Dim st2 As New StackTrace(New StackFrame(1, True))\n            Console.WriteLine(&quot; Stack trace built with next level frame: {0}&quot;, _\n                st2.ToString())\n            \n            &#39; Build a stack trace skipping the current frame, and\n            &#39; including all the other frames.\n            Dim st3 As New StackTrace(1, True)\n            Console.WriteLine(&quot; Stack trace built from the next level up: {0}&quot;, _\n                st3.ToString())\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;Level2Method\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#4\">      public void Level2Method()\n      {\n         try \n         {\n            ClassLevel3 nestedClass = new ClassLevel3();\n            nestedClass.Level3Method();\n\n         }\n         catch (Exception e) \n         {\n            Console.WriteLine(&quot; Level2Method exception handler&quot;);\n\n            // Display the full call stack at this level.\n            StackTrace st1 = new StackTrace(true);\n            Console.WriteLine(&quot; Stack trace for this level: {0}&quot;,\n               st1.ToString());\n\n            // Build a stack trace from one frame, skipping the current\n            // frame and using the next frame.\n            StackTrace st2 = new StackTrace(new StackFrame(1, true));\n            Console.WriteLine(&quot; Stack trace built with next level frame: {0}&quot;,\n               st2.ToString());\n\n            // Build a stack trace skipping the current frame, and\n            // including all the other frames.\n            StackTrace st3 = new StackTrace(1, true);\n            Console.WriteLine(&quot; Stack trace built from the next level up: {0}&quot;,\n               st3.ToString());\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------<br>&quot;);\n            throw e;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame__ctor_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackFrame(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class that contains only the given file name and line number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackFrame (string fileName, int lineNumber);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lineNumber</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The line number in the specified file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this constructor when you do not want to use the debugger&#39;s line mapping logic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the StackFrame constructor. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#5\">      void Level3Method()\n      {\n         try\n         {\n            ClassLevel4^ nestedClass = gcnew ClassLevel4;\n            nestedClass-&gt;Level4Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Level3Method exception handler&quot; );\n            \n            // Build a stack trace from a dummy stack frame.\n            // Explicitly specify the source file name and line number.\n            StackTrace^ st = gcnew StackTrace( gcnew StackFrame( &quot;source.cs&quot;,60 ) );\n            Console::WriteLine( &quot; Stack trace with dummy stack frame: {0}&quot;, st-&gt;ToString() );\n            for ( int i = 0; i &lt; st-&gt;FrameCount; i++ )\n            {\n               \n               // Display the stack frame properties.\n               StackFrame^ sf = st-&gt;GetFrame( i );\n               Console::WriteLine( &quot; File: {0}&quot;, sf-&gt;GetFileName() );\n               Console::WriteLine( &quot; Line Number: {0}&quot;, sf-&gt;GetFileLineNumber().ToString() );\n               \n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console::WriteLine( &quot; Column Number: {0}&quot;, sf-&gt;GetFileColumnNumber().ToString() );\n               Console::WriteLine( &quot; Intermediate Language Offset: {0}&quot;, sf-&gt;GetILOffset().ToString() );\n               Console::WriteLine( &quot; Native Offset: {0}&quot;, sf-&gt;GetNativeOffset().ToString() );\n               \n\n            }\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------<br>&quot; );\n            throw e;\n         }\n\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#5\">      Public Sub Level3Method()\n         Try\n            Dim nestedClass As New ClassLevel4()\n            nestedClass.Level4Method()\n         Catch e As Exception\n            Console.WriteLine(&quot; Level3Method exception handler&quot;)\n            \n            &#39; Build a stack trace from a dummy stack frame.\n            &#39; Explicitly specify the source file name and line number.\n            Dim st As New StackTrace(New StackFrame(&quot;source.cs&quot;, 60))\n            Console.WriteLine(&quot; Stack trace with dummy stack frame: {0}&quot;, _\n               st.ToString())\n            Dim i As Integer\n            For i = 0 To st.FrameCount - 1\n               &#39; Display the stack frame properties.\n               Dim sf As StackFrame = st.GetFrame(i)\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName())\n               Console.WriteLine(&quot; Line Number: {0}&quot;, _\n                  sf.GetFileLineNumber())\n               &#39; The column number defaults to zero when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, _\n                  sf.GetFileColumnNumber())\n               If sf.GetILOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, _\n                      sf.GetILOffset())\n               End If\n               If sf.GetNativeOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                 Console.WriteLine(&quot; Native Offset: {0}&quot;, _\n                     sf.GetNativeOffset())\n               End If\n            Next i \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;Level3Method\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#5\">      public void Level3Method()\n      {\n         try \n         {\n            ClassLevel4 nestedClass = new ClassLevel4();\n            nestedClass.Level4Method();\n         }\n         catch (Exception e) \n         {\n            Console.WriteLine(&quot; Level3Method exception handler&quot;);\n\n            // Build a stack trace from a dummy stack frame.\n            // Explicitly specify the source file name and \n            // line number.\n            StackTrace st = new StackTrace(new StackFrame(&quot;source.cs&quot;, 60));\n            Console.WriteLine(&quot; Stack trace with dummy stack frame: {0}&quot;, \n                        st.ToString());\n            for(int i =0; i&lt; st.FrameCount; i++ )\n            {\n               // Display the stack frame properties.\n               StackFrame sf = st.GetFrame(i);\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName());\n               Console.WriteLine(&quot; Line Number: {0}&quot;, \n                  sf.GetFileLineNumber());\n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, \n                  sf.GetFileColumnNumber());\n               if (sf.GetILOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, \n                     sf.GetILOffset());\n               }\n               if (sf.GetNativeOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Native Offset: {0}&quot;, \n                     sf.GetNativeOffset());\n               }\n            }\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------<br>&quot;);\n            throw e;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame__ctor_System_String_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">StackFrame(String,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class that contains only the given file name, line number, and column number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public StackFrame (string fileName, int lineNumber, int colNumber);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lineNumber</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The line number in the specified file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>colNumber</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The column number in the specified file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this constructor when you do not want to use the debugger&#39;s line mapping logic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the StackFrame constructor. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#6\">         try\n         {\n            ClassLevel5^ nestedClass = gcnew ClassLevel5;\n            nestedClass-&gt;Level5Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Level4Method exception handler&quot; );\n            \n            // Build a stack trace from a dummy stack frame.\n            // Explicitly specify the source file name, line number\n            // and column number.\n            StackTrace^ st = gcnew StackTrace( gcnew StackFrame( &quot;source.cs&quot;,79,24 ) );\n            Console::WriteLine( &quot; Stack trace with dummy stack frame: {0}&quot;, st-&gt;ToString() );\n            \n            // Access the StackFrames explicitly to display the file\n            // name, line number and column number properties.\n            // StackTrace.ToString only includes the method name. \n            for ( int i = 0; i &lt; st-&gt;FrameCount; i++ )\n            {\n               StackFrame^ sf = st-&gt;GetFrame( i );\n               Console::WriteLine( &quot; File: {0}&quot;, sf-&gt;GetFileName() );\n               Console::WriteLine( &quot; Line Number: {0}&quot;, sf-&gt;GetFileLineNumber().ToString() );\n               Console::WriteLine( &quot; Column Number: {0}&quot;, sf-&gt;GetFileColumnNumber().ToString() );\n\n            }\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------<br>&quot; );\n            throw e;\n         }\n\n         \n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#6\">         Try\n            Dim [nestedClass] As New ClassLevel5()\n            [nestedClass].Level5Method()\n         Catch e As Exception\n            Console.WriteLine(&quot; Level4Method exception handler&quot;)\n            \n            &#39; Build a stack trace from a dummy stack frame.\n            &#39; Explicitly specify the source file name, line number\n            &#39; and column number.\n            Dim st As New StackTrace(New StackFrame(&quot;source.cs&quot;, 79, 24))\n            Console.WriteLine(&quot; Stack trace with dummy stack frame: {0}&quot;, _\n               st.ToString())\n            \n            &#39; Access the StackFrames explicitly to display the file\n            &#39; name, line number and column number properties.\n            &#39; StackTrace.ToString only includes the method name. \n            Dim i As Integer\n            For i = 0 To st.FrameCount - 1\n               Dim sf As StackFrame = st.GetFrame(i)\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName())\n               Console.WriteLine(&quot; Line Number: {0}&quot;, _\n                  sf.GetFileLineNumber())\n               Console.WriteLine(&quot; Column Number: {0}&quot;, _\n                  sf.GetFileColumnNumber())\n            Next i\n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;Level4Method \n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#6\">         try \n         {\n            ClassLevel5 nestedClass = new ClassLevel5();\n            nestedClass.Level5Method();\n         }\n         catch (Exception e) \n         {\n            Console.WriteLine(&quot; Level4Method exception handler&quot;);\n\n            // Build a stack trace from a dummy stack frame.\n            // Explicitly specify the source file name, line number\n            // and column number.\n            StackTrace st = new StackTrace(new StackFrame(&quot;source.cs&quot;, 79, 24));\n            Console.WriteLine(&quot; Stack trace with dummy stack frame: {0}&quot;, \n                           st.ToString());\n\n            // Access the StackFrames explicitly to display the file\n            // name, line number and column number properties.\n            // StackTrace.ToString only includes the method name. \n            for(int i =0; i&lt; st.FrameCount; i++ )\n            {\n               StackFrame sf = st.GetFrame(i);\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName());\n               Console.WriteLine(&quot; Line Number: {0}&quot;, \n                  sf.GetFileLineNumber());\n               Console.WriteLine(&quot; Column Number: {0}&quot;, \n                  sf.GetFileColumnNumber());\n            }\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------<br>&quot;);\n            throw e;\n         }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame_OFFSET_UNKNOWN\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OFFSET_UNKNOWN</div>        \r\n          </div>\r\n    \r\n            <p>Defines the value that is returned from the <span class=\"xref\">stem.Diagnostics.StackFrame.GetNativeOffset*</span> or <span class=\"xref\">stem.Diagnostics.StackFrame.GetILOffset*</span> method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const int OFFSET_UNKNOWN = -1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is -1.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame_GetFileColumnNumber\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame_GetFileColumnNumber_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFileColumnNumber()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetFileColumnNumber ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The file column number, or 0 (zero) if the file column number cannot be determined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the GetFileColumnNumber method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#7\">               // Display the stack frame properties.\n               StackFrame^ sf = st-&gt;GetFrame( i );\n               Console::WriteLine( &quot; File: {0}&quot;, sf-&gt;GetFileName() );\n               Console::WriteLine( &quot; Line Number: {0}&quot;, sf-&gt;GetFileLineNumber().ToString() );\n               \n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console::WriteLine( &quot; Column Number: {0}&quot;, sf-&gt;GetFileColumnNumber().ToString() );\n               Console::WriteLine( &quot; Intermediate Language Offset: {0}&quot;, sf-&gt;GetILOffset().ToString() );\n               Console::WriteLine( &quot; Native Offset: {0}&quot;, sf-&gt;GetNativeOffset().ToString() );\n               \n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#7\">               &#39; Display the stack frame properties.\n               Dim sf As StackFrame = st.GetFrame(i)\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName())\n               Console.WriteLine(&quot; Line Number: {0}&quot;, _\n                  sf.GetFileLineNumber())\n               &#39; The column number defaults to zero when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, _\n                  sf.GetFileColumnNumber())\n               If sf.GetILOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, _\n                      sf.GetILOffset())\n               End If\n               If sf.GetNativeOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                 Console.WriteLine(&quot; Native Offset: {0}&quot;, _\n                     sf.GetNativeOffset())\n               End If\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#7\">               // Display the stack frame properties.\n               StackFrame sf = st.GetFrame(i);\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName());\n               Console.WriteLine(&quot; Line Number: {0}&quot;, \n                  sf.GetFileLineNumber());\n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, \n                  sf.GetFileColumnNumber());\n               if (sf.GetILOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, \n                     sf.GetILOffset());\n               }\n               if (sf.GetNativeOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Native Offset: {0}&quot;, \n                     sf.GetNativeOffset());\n               }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame_GetFileLineNumber\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame_GetFileLineNumber_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFileLineNumber()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetFileLineNumber ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The file line number, or 0 (zero) if the file line number cannot be determined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the GetFileLineNumber method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#7\">               // Display the stack frame properties.\n               StackFrame^ sf = st-&gt;GetFrame( i );\n               Console::WriteLine( &quot; File: {0}&quot;, sf-&gt;GetFileName() );\n               Console::WriteLine( &quot; Line Number: {0}&quot;, sf-&gt;GetFileLineNumber().ToString() );\n               \n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console::WriteLine( &quot; Column Number: {0}&quot;, sf-&gt;GetFileColumnNumber().ToString() );\n               Console::WriteLine( &quot; Intermediate Language Offset: {0}&quot;, sf-&gt;GetILOffset().ToString() );\n               Console::WriteLine( &quot; Native Offset: {0}&quot;, sf-&gt;GetNativeOffset().ToString() );\n               \n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#7\">               &#39; Display the stack frame properties.\n               Dim sf As StackFrame = st.GetFrame(i)\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName())\n               Console.WriteLine(&quot; Line Number: {0}&quot;, _\n                  sf.GetFileLineNumber())\n               &#39; The column number defaults to zero when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, _\n                  sf.GetFileColumnNumber())\n               If sf.GetILOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, _\n                      sf.GetILOffset())\n               End If\n               If sf.GetNativeOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                 Console.WriteLine(&quot; Native Offset: {0}&quot;, _\n                     sf.GetNativeOffset())\n               End If\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#7\">               // Display the stack frame properties.\n               StackFrame sf = st.GetFrame(i);\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName());\n               Console.WriteLine(&quot; Line Number: {0}&quot;, \n                  sf.GetFileLineNumber());\n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, \n                  sf.GetFileColumnNumber());\n               if (sf.GetILOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, \n                     sf.GetILOffset());\n               }\n               if (sf.GetNativeOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Native Offset: {0}&quot;, \n                     sf.GetNativeOffset());\n               }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame_GetFileName\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame_GetFileName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFileName()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string GetFileName ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The file name, or <code>null</code> if the file name cannot be determined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the GetFileName method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#7\">               // Display the stack frame properties.\n               StackFrame^ sf = st-&gt;GetFrame( i );\n               Console::WriteLine( &quot; File: {0}&quot;, sf-&gt;GetFileName() );\n               Console::WriteLine( &quot; Line Number: {0}&quot;, sf-&gt;GetFileLineNumber().ToString() );\n               \n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console::WriteLine( &quot; Column Number: {0}&quot;, sf-&gt;GetFileColumnNumber().ToString() );\n               Console::WriteLine( &quot; Intermediate Language Offset: {0}&quot;, sf-&gt;GetILOffset().ToString() );\n               Console::WriteLine( &quot; Native Offset: {0}&quot;, sf-&gt;GetNativeOffset().ToString() );\n               \n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#7\">               &#39; Display the stack frame properties.\n               Dim sf As StackFrame = st.GetFrame(i)\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName())\n               Console.WriteLine(&quot; Line Number: {0}&quot;, _\n                  sf.GetFileLineNumber())\n               &#39; The column number defaults to zero when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, _\n                  sf.GetFileColumnNumber())\n               If sf.GetILOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, _\n                      sf.GetILOffset())\n               End If\n               If sf.GetNativeOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                 Console.WriteLine(&quot; Native Offset: {0}&quot;, _\n                     sf.GetNativeOffset())\n               End If\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#7\">               // Display the stack frame properties.\n               StackFrame sf = st.GetFrame(i);\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName());\n               Console.WriteLine(&quot; Line Number: {0}&quot;, \n                  sf.GetFileLineNumber());\n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, \n                  sf.GetFileColumnNumber());\n               if (sf.GetILOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, \n                     sf.GetILOffset());\n               }\n               if (sf.GetNativeOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Native Offset: {0}&quot;, \n                     sf.GetNativeOffset());\n               }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame_GetILOffset\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame_GetILOffset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetILOffset()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetILOffset ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The offset from the start of the MSIL code for the method that is executing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the GetILOffset method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#7\">               // Display the stack frame properties.\n               StackFrame^ sf = st-&gt;GetFrame( i );\n               Console::WriteLine( &quot; File: {0}&quot;, sf-&gt;GetFileName() );\n               Console::WriteLine( &quot; Line Number: {0}&quot;, sf-&gt;GetFileLineNumber().ToString() );\n               \n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console::WriteLine( &quot; Column Number: {0}&quot;, sf-&gt;GetFileColumnNumber().ToString() );\n               Console::WriteLine( &quot; Intermediate Language Offset: {0}&quot;, sf-&gt;GetILOffset().ToString() );\n               Console::WriteLine( &quot; Native Offset: {0}&quot;, sf-&gt;GetNativeOffset().ToString() );\n               \n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#7\">               &#39; Display the stack frame properties.\n               Dim sf As StackFrame = st.GetFrame(i)\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName())\n               Console.WriteLine(&quot; Line Number: {0}&quot;, _\n                  sf.GetFileLineNumber())\n               &#39; The column number defaults to zero when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, _\n                  sf.GetFileColumnNumber())\n               If sf.GetILOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, _\n                      sf.GetILOffset())\n               End If\n               If sf.GetNativeOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                 Console.WriteLine(&quot; Native Offset: {0}&quot;, _\n                     sf.GetNativeOffset())\n               End If\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#7\">               // Display the stack frame properties.\n               StackFrame sf = st.GetFrame(i);\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName());\n               Console.WriteLine(&quot; Line Number: {0}&quot;, \n                  sf.GetFileLineNumber());\n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, \n                  sf.GetFileColumnNumber());\n               if (sf.GetILOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, \n                     sf.GetILOffset());\n               }\n               if (sf.GetNativeOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Native Offset: {0}&quot;, \n                     sf.GetNativeOffset());\n               }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame_GetMethod\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame_GetMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethod()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the method in which the frame is executing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MethodBase GetMethod ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a></div>\r\n                  </div>\r\n                  <p>The method in which the frame is executing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method that is currently executing may be inherited from a base class, although it is called in a derived class. In this case, the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_ReflectedType_\" data-linktype=\"relative-path\">ReflectedType</a> property of the <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> object that is returned by GetMethod identifies the base class, not the derived class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the GetMethod method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackTraceSample3#6\">            StackFrame^ fr = gcnew StackFrame( 1,true );\n            StackTrace^ st = gcnew StackTrace( fr );\n            EventLog::WriteEntry( fr-&gt;GetMethod()-&gt;Name, st-&gt;ToString(), EventLogEntryType::Warning );\n</code></pre><pre><code class=\"lang-cs\" name=\"StackTraceSample3#6\">                StackFrame fr = new StackFrame(1,true);\n                StackTrace st = new StackTrace(fr);\n                EventLog.WriteEntry(fr.GetMethod().Name,\n                                    st.ToString(),\n                                    EventLogEntryType.Warning);\n</code></pre><pre><code class=\"lang-vb\" name=\"StackTraceSample3#6\">            Dim frame As New StackFrame(1, True)\n            Dim strace As New StackTrace(frame)            \n\n            EventLog.WriteEntry(frame.GetMethod().Name, _\n                                strace.ToString(), _\n                                EventLogEntryType.Warning)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame_GetNativeOffset\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame_GetNativeOffset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNativeOffset()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the offset from the start of the native just-in-time (JIT)-compiled code for the method that is being executed. The generation of this debugging information is controlled by the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetNativeOffset ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The offset from the start of the JIT-compiled code for the method that is being executed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the GetNativeOffset method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#7\">               // Display the stack frame properties.\n               StackFrame^ sf = st-&gt;GetFrame( i );\n               Console::WriteLine( &quot; File: {0}&quot;, sf-&gt;GetFileName() );\n               Console::WriteLine( &quot; Line Number: {0}&quot;, sf-&gt;GetFileLineNumber().ToString() );\n               \n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console::WriteLine( &quot; Column Number: {0}&quot;, sf-&gt;GetFileColumnNumber().ToString() );\n               Console::WriteLine( &quot; Intermediate Language Offset: {0}&quot;, sf-&gt;GetILOffset().ToString() );\n               Console::WriteLine( &quot; Native Offset: {0}&quot;, sf-&gt;GetNativeOffset().ToString() );\n               \n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#7\">               &#39; Display the stack frame properties.\n               Dim sf As StackFrame = st.GetFrame(i)\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName())\n               Console.WriteLine(&quot; Line Number: {0}&quot;, _\n                  sf.GetFileLineNumber())\n               &#39; The column number defaults to zero when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, _\n                  sf.GetFileColumnNumber())\n               If sf.GetILOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, _\n                      sf.GetILOffset())\n               End If\n               If sf.GetNativeOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                 Console.WriteLine(&quot; Native Offset: {0}&quot;, _\n                     sf.GetNativeOffset())\n               End If\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#7\">               // Display the stack frame properties.\n               StackFrame sf = st.GetFrame(i);\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName());\n               Console.WriteLine(&quot; Line Number: {0}&quot;, \n                  sf.GetFileLineNumber());\n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, \n                  sf.GetFileColumnNumber());\n               if (sf.GetILOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, \n                     sf.GetILOffset());\n               }\n               if (sf.GetNativeOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Native Offset: {0}&quot;, \n                     sf.GetNativeOffset());\n               }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_StackFrame_ToString\">\r\n    \r\n            <a id=\"System_Diagnostics_StackFrame_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Builds a readable representation of the stack trace.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A readable representation of the stack trace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the ToString method. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#3\">      void InternalMethod()\n      {\n         try\n         {\n            ClassLevel2^ nestedClass = gcnew ClassLevel2;\n            nestedClass-&gt;Level2Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; InternalMethod exception handler&quot; );\n            \n            // Build a stack trace from one frame, skipping the\n            // current frame and using the next frame.  By\n            // default, file and line information are not displayed.\n            StackTrace^ st = gcnew StackTrace( gcnew StackFrame( 1 ) );\n            Console::WriteLine( &quot; Stack trace for next level frame: {0}&quot;, st-&gt;ToString() );\n            Console::WriteLine( &quot; Stack frame for next level: &quot; );\n            Console::WriteLine( &quot;   {0}&quot;, st-&gt;GetFrame( 0 )-&gt;ToString() );\n            Console::WriteLine( &quot; Line Number: {0}&quot;, st-&gt;GetFrame( 0 )-&gt;GetFileLineNumber().ToString() );\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------<br>&quot; );\n            throw e;\n         }\n\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#3\">      Public Sub InternalMethod()\n         Try\n            Dim nestedClass As New ClassLevel2\n            nestedClass.Level2Method()\n         Catch e As Exception\n            Console.WriteLine(&quot; InternalMethod exception handler&quot;)\n            \n            &#39; Build a stack trace from one frame, skipping the \n            &#39; current frame and using the next frame.  By default,\n            &#39; file and line information are not displayed.\n            Dim st As New StackTrace(New StackFrame(1))\n            Console.WriteLine(&quot; Stack trace for next level frame: {0}&quot;, _\n               st.ToString())\n            Console.WriteLine(&quot; Stack frame for next level: &quot;)\n            Console.WriteLine(&quot;   {0}&quot;, st.GetFrame(0).ToString())\n            \n            Console.WriteLine(&quot; Line Number: {0}&quot;, _\n               st.GetFrame(0).GetFileLineNumber().ToString())\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;InternalMethod\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#3\">      public void InternalMethod()\n      {\n         try\n         {\n            ClassLevel2 nestedClass = new ClassLevel2();\n            nestedClass.Level2Method();\n         }\n         catch (Exception e)\n         {\n            Console.WriteLine(&quot; InternalMethod exception handler&quot;);\n\n            // Build a stack trace from one frame, skipping the\n            // current frame and using the next frame.  By\n            // default, file and line information are not displayed.\n            StackTrace st = new StackTrace(new StackFrame(1));\n            Console.WriteLine(&quot; Stack trace for next level frame: {0}&quot;,\n               st.ToString());\n            Console.WriteLine(&quot; Stack frame for next level: &quot;);\n            Console.WriteLine(&quot;   {0}&quot;, st.GetFrame(0).ToString());\n\n            Console.WriteLine(&quot; Line Number: {0}&quot;,\n               st.GetFrame(0).GetFileLineNumber().ToString());\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------<br>&quot;);\n            throw e;\n         }\n      }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.StackFrame.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.StackFrame.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame..ctor\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.GetFileColumnNumber\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.GetFileLineNumber\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.GetFileName\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.GetILOffset\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.GetMethod\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.GetNativeOffset\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.OFFSET_UNKNOWN\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7a399240-35a1-3215-9dcd-ef4c1f4dfee4\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about a StackFrame, which represents a function call on the call stack for the current thread.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.StackFrame\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.StackFrame.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.StackFrame.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.StackFrame","System.Diagnostics.StackFrame..ctor","System.Diagnostics.StackFrame.GetFileColumnNumber","System.Diagnostics.StackFrame.GetFileLineNumber","System.Diagnostics.StackFrame.GetFileName","System.Diagnostics.StackFrame.GetILOffset","System.Diagnostics.StackFrame.GetMethod","System.Diagnostics.StackFrame.GetNativeOffset","System.Diagnostics.StackFrame.OFFSET_UNKNOWN","System.Diagnostics.StackFrame.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.StackFrame","System::Diagnostics::StackFrame","System.Diagnostics.StackFrame.#ctor","System::Diagnostics::StackFrame::#ctor","System.Diagnostics.StackFrame.GetFileColumnNumber","System::Diagnostics::StackFrame::GetFileColumnNumber","System.Diagnostics.StackFrame.GetFileLineNumber","System::Diagnostics::StackFrame::GetFileLineNumber","System.Diagnostics.StackFrame.GetFileName","System::Diagnostics::StackFrame::GetFileName","System.Diagnostics.StackFrame.GetILOffset","System::Diagnostics::StackFrame::GetILOffset","System.Diagnostics.StackFrame.GetMethod","System::Diagnostics::StackFrame::GetMethod","System.Diagnostics.StackFrame.GetNativeOffset","System::Diagnostics::StackFrame::GetNativeOffset","System.Diagnostics.StackFrame.OFFSET_UNKNOWN","System::Diagnostics::StackFrame::OFFSET_UNKNOWN","System.Diagnostics.StackFrame.ToString","System::Diagnostics::StackFrame::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7a399240-35a1-3215-9dcd-ef4c1f4dfee4","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics/StackFrame.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StackFrame class | Microsoft Docs","_op_ogTitle":"StackFrame class","description":"Provides information about a StackFrame, which represents a function call on the call stack for the current thread.\n","toc_asset_id":"_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.StackFrame","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.stackframe","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.stackframe","fileRelativePath":"System.Diagnostics.StackFrame.html"},"themesRelativePathToOutputRoot":"_themes/"}