{"content":"    \r\n    <h1 id=\"System_Messaging_MessageQueue\">\r\n      <span class=\"lang-csharp\">MessageQueue</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides access to a queue on a Message Queuing server.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultEvent(&quot;ReceiveCompleted&quot;)]\n[System.ComponentModel.Editor(&quot;System.Messaging.Design.QueuePathEditor&quot;, &quot;System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;)]\n[System.ComponentModel.InstallerType(typeof(System.Messaging.MessageQueueInstaller))]\n[System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageQueueConverter))]\n[System.Messaging.MessagingDescription(&quot;MessageQueueDesc&quot;)]\npublic class MessageQueue : System.ComponentModel.Component, System.Collections.IEnumerable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">System.ComponentModel.Component</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">MessageQueue</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Message Queuing technology allows applications running at different times to communicate across heterogeneous networks and systems that might be temporarily offline. Applications send, receive, or peek (read without removing) messages from queues. Message Queuing is an optional component of <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win2kfamily-md.md&quot; -->Windows 2000<!--END INCLUDE --> and Windows NT, and must be installed separately.  </p>\n<p> The MessageQueue class is a wrapper around Message Queuing. There are multiple versions of Message Queuing, and using the MessageQueue class can result in slightly different behavior, depending on the operating system you are using. For information about specific features of each version of Message Queuing, see the topic &quot;What&#39;s New in Message Queuing&quot; in the Platform SDK in MSDN.  </p>\n<p> The MessageQueue class provides a reference to a Message Queuing queue. You can specify a path in the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue__ctor_\" data-linktype=\"relative-path\">MessageQueue</a> constructor to connect to an existing resource, or you can create a new queue on the server. Before you can call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Send_System_Object_\" data-linktype=\"relative-path\">Send(Object)</a>, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a>, or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a>, you must associate the new instance of the MessageQueue class with an existing queue. At that point, you can manipulate the queue properties such as <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Category_\" data-linktype=\"relative-path\">Category</a> and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> MessageQueue supports two types of message retrieval: synchronous and asynchronous. The synchronous methods, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a>, cause the process thread to wait a specified time interval for a new message to arrive in the queue. The asynchronous methods, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>, allow the main application tasks to continue in a separate thread until a message arrives in the queue. These methods work by using callback objects and state objects to communicate information between threads.  </p>\n<p> When you create a new instance of the MessageQueue class, you are not creating a new Message Queuing queue. Instead, you can use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Delete_System_String_\" data-linktype=\"relative-path\">Delete(String)</a>, and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Purge_\" data-linktype=\"relative-path\">Purge</a> methods to manage queues on the server.  </p>\n<p> Unlike <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Purge_\" data-linktype=\"relative-path\">Purge</a>, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a> and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Delete_System_String_\" data-linktype=\"relative-path\">Delete(String)</a> are <code>static</code> members, so you can call them without creating a new instance of the MessageQueue class.  </p>\n<p> You can set the MessageQueue object&#39;s <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property with one of three names: the friendly name, the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_FormatName_\" data-linktype=\"relative-path\">FormatName</a>, or the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a>. The friendly name, which is defined by the queue&#39;s <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a> and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_QueueName_\" data-linktype=\"relative-path\">QueueName</a> properties, is <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a>\\<a href=\"assetId:///P:System.Messaging.MessageQueue.QueueName?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">QueueName</a> for a public queue, and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a>\\<code>Private$</code>\\<a href=\"assetId:///P:System.Messaging.MessageQueue.QueueName?qualifyHint=False&amp;autoUpgrade=True\" data-linktype=\"external\">QueueName</a> for a private queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_FormatName_\" data-linktype=\"relative-path\">FormatName</a> property allows offline access to message queues. Lastly, you can use the queue&#39;s <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a> property to set the queue&#39;s <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a>.  </p>\n<p> For a list of initial property values for an instance of MessageQueue, see the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue__ctor_\" data-linktype=\"relative-path\">MessageQueue</a> constructor.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue__ctor\" data-linktype=\"self-bookmark\">MessageQueue()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class. After the default constructor initializes the new instance, you must set the instance&#39;s <span class=\"xref\">stem.Messaging.MessageQueue.Path*</span> property before you can use the instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue__ctor_System_String_\" data-linktype=\"self-bookmark\">MessageQueue(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class that references the Message Queuing queue at the specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue__ctor_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">MessageQueue(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class that references the Message Queuing queue at the specified path and with the specified read-access restriction.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue__ctor_System_String_System_Messaging_QueueAccessMode_\" data-linktype=\"self-bookmark\">MessageQueue(String,QueueAccessMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue__ctor_System_String_System_Boolean_System_Boolean_\" data-linktype=\"self-bookmark\">MessageQueue(String,Boolean,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue__ctor_System_String_System_Boolean_System_Boolean_System_Messaging_QueueAccessMode_\" data-linktype=\"self-bookmark\">MessageQueue(String,Boolean,Boolean,QueueAccessMode)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_InfiniteQueueSize\" data-linktype=\"self-bookmark\">InfiniteQueueSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies that no size restriction exists for a queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"self-bookmark\">InfiniteTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies that no time-out exists for methods that peek or receive messages.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_AccessMode\" data-linktype=\"self-bookmark\">AccessMode</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates the access mode for the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Authenticate\" data-linktype=\"self-bookmark\">Authenticate</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the queue accepts only authenticated messages.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_BasePriority\" data-linktype=\"self-bookmark\">BasePriority</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the base priority Message Queuing uses to route a public queue&#39;s messages over the network.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_CanRead\" data-linktype=\"self-bookmark\">CanRead</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can be read.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_CanWrite\" data-linktype=\"self-bookmark\">CanWrite</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can be written to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Category\" data-linktype=\"self-bookmark\">Category</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the queue category.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_CreateTime\" data-linktype=\"self-bookmark\">CreateTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the time and date that the queue was created in Message Queuing.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_DefaultPropertiesToSend\" data-linktype=\"self-bookmark\">DefaultPropertiesToSend</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the message property values to be used by default when the application sends messages to the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_DenySharedReceive\" data-linktype=\"self-bookmark\">DenySharedReceive</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> has exclusive access to receive messages from the Message Queuing queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_EnableConnectionCache\" data-linktype=\"self-bookmark\">EnableConnectionCache</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether a cache of connections will be maintained by the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_EncryptionRequired\" data-linktype=\"self-bookmark\">EncryptionRequired</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the queue accepts only non-private (non-encrypted) messages.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_FormatName\" data-linktype=\"self-bookmark\">FormatName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the unique queue name that Message Queuing generated at the time of the queue&#39;s creation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Formatter\" data-linktype=\"self-bookmark\">Formatter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the formatter used to serialize an object into or deserialize an object from the body of a message read from or written to the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Id\" data-linktype=\"self-bookmark\">Id</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the unique Message Queuing identifier of the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Label\" data-linktype=\"self-bookmark\">Label</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the queue description.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_LastModifyTime\" data-linktype=\"self-bookmark\">LastModifyTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the last time the properties of a queue were modified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_MachineName\" data-linktype=\"self-bookmark\">MachineName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the computer where the Message Queuing queue is located.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_MaximumJournalSize\" data-linktype=\"self-bookmark\">MaximumJournalSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the maximum size of the journal queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_MaximumQueueSize\" data-linktype=\"self-bookmark\">MaximumQueueSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the maximum size of the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_MessageReadPropertyFilter\" data-linktype=\"self-bookmark\">MessageReadPropertyFilter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the property filter for receiving or peeking messages.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_MulticastAddress\" data-linktype=\"self-bookmark\">MulticastAddress</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Introduced in MSMQ 3.0. Gets or sets the multicast address associated with the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Path\" data-linktype=\"self-bookmark\">Path</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the queue&#39;s path. Setting the Path causes the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> to point to a new queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_QueueName\" data-linktype=\"self-bookmark\">QueueName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the friendly name that identifies the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReadHandle\" data-linktype=\"self-bookmark\">ReadHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the native handle used to read messages from the message queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_SynchronizingObject\" data-linktype=\"self-bookmark\">SynchronizingObject</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the object that marshals the event-handler call resulting from a <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Transactional\" data-linktype=\"self-bookmark\">Transactional</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the queue accepts only transactions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_UseJournalQueue\" data-linktype=\"self-bookmark\">UseJournalQueue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether received messages are copied to the journal queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_WriteHandle\" data-linktype=\"self-bookmark\">WriteHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the native handle used to send messages to the message queue.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_BeginPeek\" data-linktype=\"self-bookmark\">BeginPeek()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates an asynchronous peek operation that has no time-out. The operation is not complete until a message becomes available in the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_BeginPeek_System_TimeSpan_\" data-linktype=\"self-bookmark\">BeginPeek(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates an asynchronous peek operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_BeginPeek_System_TimeSpan_System_Object_\" data-linktype=\"self-bookmark\">BeginPeek(TimeSpan,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation&#39;s lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_BeginPeek_System_TimeSpan_System_Object_System_AsyncCallback_\" data-linktype=\"self-bookmark\">BeginPeek(TimeSpan,Object,AsyncCallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation&#39;s lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_BeginPeek_System_TimeSpan_System_Messaging_Cursor_System_Messaging_PeekAction_System_Object_System_AsyncCallback_\" data-linktype=\"self-bookmark\">BeginPeek(TimeSpan,Cursor,PeekAction,Object,AsyncCallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates an asynchronous peek operation that has a specified time-out and that uses a specified cursor, a specified peek action, and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_BeginReceive\" data-linktype=\"self-bookmark\">BeginReceive()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates an asynchronous receive operation that has no time-out. The operation is not complete until a message becomes available in the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_BeginReceive_System_TimeSpan_\" data-linktype=\"self-bookmark\">BeginReceive(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates an asynchronous receive operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_BeginReceive_System_TimeSpan_System_Object_\" data-linktype=\"self-bookmark\">BeginReceive(TimeSpan,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation&#39;s lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_BeginReceive_System_TimeSpan_System_Object_System_AsyncCallback_\" data-linktype=\"self-bookmark\">BeginReceive(TimeSpan,Object,AsyncCallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation&#39;s lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_BeginReceive_System_TimeSpan_System_Messaging_Cursor_System_Object_System_AsyncCallback_\" data-linktype=\"self-bookmark\">BeginReceive(TimeSpan,Cursor,Object,AsyncCallback)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initiates an asynchronous receive operation that has a specified time-out and uses a specified cursor and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ClearConnectionCache\" data-linktype=\"self-bookmark\">ClearConnectionCache()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Clears the connection cache.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Frees all resources allocated by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Create_System_String_\" data-linktype=\"self-bookmark\">Create(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a non-transactional Message Queuing queue at the specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Create_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">Create(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a transactional or non-transactional Message Queuing queue at the specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_CreateCursor\" data-linktype=\"self-bookmark\">CreateCursor()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a> for the current message queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Delete_System_String_\" data-linktype=\"self-bookmark\">Delete(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes a queue on a Message Queuing server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Disposes of the resources (other than memory) used by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndPeek(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Completes the specified asynchronous peek operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndReceive(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Completes the specified asynchronous receive operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Exists_System_String_\" data-linktype=\"self-bookmark\">Exists(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a Message Queuing queue exists at the specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetAllMessages\" data-linktype=\"self-bookmark\">GetAllMessages()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the messages that are in the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enumerates the messages in a queue. GetEnumerator is deprecated. <span class=\"xref\">stem.Messaging.MessageQueue.GetMessageEnumerator2*</span> should be used instead.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetMachineId_System_String_\" data-linktype=\"self-bookmark\">GetMachineId(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the identifier of the computer on which the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> is located.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetMessageEnumerator\" data-linktype=\"self-bookmark\">GetMessageEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an enumerator object for all the messages in the queue. GetMessageEnumerator is deprecated. <span class=\"xref\">stem.Messaging.MessageQueue.GetMessageEnumerator2*</span> should be used instead.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetMessageEnumerator2\" data-linktype=\"self-bookmark\">GetMessageEnumerator2()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates an enumerator object for all the messages in the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetMessageQueueEnumerator\" data-linktype=\"self-bookmark\">GetMessageQueueEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides forward-only cursor semantics to enumerate through all public queues on the network.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetMessageQueueEnumerator_System_Messaging_MessageQueueCriteria_\" data-linktype=\"self-bookmark\">GetMessageQueueEnumerator(MessageQueueCriteria)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides forward-only cursor semantics to enumerate through all public queues on the network that meet the specified criteria.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetPrivateQueuesByMachine_System_String_\" data-linktype=\"self-bookmark\">GetPrivateQueuesByMachine(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves all the private queues on the specified computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetPublicQueues\" data-linktype=\"self-bookmark\">GetPublicQueues()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves all the public queues on the network.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetPublicQueues_System_Messaging_MessageQueueCriteria_\" data-linktype=\"self-bookmark\">GetPublicQueues(MessageQueueCriteria)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves all the public queues on the network that meet the specified criteria.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetPublicQueuesByCategory_System_Guid_\" data-linktype=\"self-bookmark\">GetPublicQueuesByCategory(Guid)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves all the public queues on the network that belong to the specified category.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetPublicQueuesByLabel_System_String_\" data-linktype=\"self-bookmark\">GetPublicQueuesByLabel(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves all the public queues on the network that carry the specified label.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetPublicQueuesByMachine_System_String_\" data-linktype=\"self-bookmark\">GetPublicQueuesByMachine(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves all the public queues that reside on the specified computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_GetSecurityContext\" data-linktype=\"self-bookmark\">GetSecurityContext()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the security context that MSMQ associates with the current user (thread identity) at the time of this call.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Peek\" data-linktype=\"self-bookmark\">Peek()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns without removing (peeks) the first message in the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. The Peek method is synchronous, so it blocks the current thread until a message becomes available.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Peek_System_TimeSpan_\" data-linktype=\"self-bookmark\">Peek(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns without removing (peeks) the first message in the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. The <span class=\"xref\">stem.Messaging.MessageQueue.Peek*</span> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Peek_System_TimeSpan_System_Messaging_Cursor_System_Messaging_PeekAction_\" data-linktype=\"self-bookmark\">Peek(TimeSpan,Cursor,PeekAction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns without removing (peeks) the current or next message in the queue, using the specified cursor. The <span class=\"xref\">stem.Messaging.MessageQueue.Peek*</span> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"self-bookmark\">PeekByCorrelationId(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Peeks the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_System_TimeSpan_\" data-linktype=\"self-bookmark\">PeekByCorrelationId(String,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Peeks the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"self-bookmark\">PeekById(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Peeks the message whose message identifier matches the <code>id</code> parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_PeekById_System_String_System_TimeSpan_\" data-linktype=\"self-bookmark\">PeekById(String,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Peeks the message whose message identifier matches the <code>id</code> parameter. Waits until the message appears in the queue or a time-out occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_PeekByLookupId_System_Int64_\" data-linktype=\"self-bookmark\">PeekByLookupId(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Introduced in MSMQ 3.0. Peeks at the message that matches the given lookup identifier from a non-transactional queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_PeekByLookupId_System_Messaging_MessageLookupAction_System_Int64_\" data-linktype=\"self-bookmark\">PeekByLookupId(MessageLookupAction,Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Introduced in MSMQ 3.0. Peeks at a specific message from the queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Purge\" data-linktype=\"self-bookmark\">Purge()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes all the messages contained in the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Receive\" data-linktype=\"self-bookmark\">Receive()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the first message available in the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. This call is synchronous, and blocks the current thread of execution until a message is available.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Receive_System_Messaging_MessageQueueTransaction_\" data-linktype=\"self-bookmark\">Receive(MessageQueueTransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the first message available in the transactional queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. This call is synchronous, and blocks the current thread of execution until a message is available.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Receive_System_Messaging_MessageQueueTransactionType_\" data-linktype=\"self-bookmark\">Receive(MessageQueueTransactionType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the first message available in the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. This call is synchronous, and blocks the current thread of execution until a message is available.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Receive_System_TimeSpan_\" data-linktype=\"self-bookmark\">Receive(TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the first message available in the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> and waits until either a message is available in the queue, or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Receive_System_TimeSpan_System_Messaging_Cursor_\" data-linktype=\"self-bookmark\">Receive(TimeSpan,Cursor)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Receive_System_TimeSpan_System_Messaging_MessageQueueTransaction_\" data-linktype=\"self-bookmark\">Receive(TimeSpan,MessageQueueTransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the first message available in the transactional queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> and waits until either a message is available in the queue, or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Receive_System_TimeSpan_System_Messaging_MessageQueueTransactionType_\" data-linktype=\"self-bookmark\">Receive(TimeSpan,MessageQueueTransactionType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the first message available in the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. This call is synchronous, and waits until either a message is available in the queue, or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Receive_System_TimeSpan_System_Messaging_Cursor_System_Messaging_MessageQueueTransaction_\" data-linktype=\"self-bookmark\">Receive(TimeSpan,Cursor,MessageQueueTransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Receive_System_TimeSpan_System_Messaging_Cursor_System_Messaging_MessageQueueTransactionType_\" data-linktype=\"self-bookmark\">Receive(TimeSpan,Cursor,MessageQueueTransactionType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_\" data-linktype=\"self-bookmark\">ReceiveByCorrelationId(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the message that matches the given correlation identifier (from a non-transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_System_Messaging_MessageQueueTransaction_\" data-linktype=\"self-bookmark\">ReceiveByCorrelationId(String,MessageQueueTransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the message that matches the given correlation identifier (from a transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_System_Messaging_MessageQueueTransactionType_\" data-linktype=\"self-bookmark\">ReceiveByCorrelationId(String,MessageQueueTransactionType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_System_TimeSpan_\" data-linktype=\"self-bookmark\">ReceiveByCorrelationId(String,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the message that matches the given correlation identifier (from a non-transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_System_TimeSpan_System_Messaging_MessageQueueTransaction_\" data-linktype=\"self-bookmark\">ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the message that matches the given correlation identifier (from a transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_System_TimeSpan_System_Messaging_MessageQueueTransactionType_\" data-linktype=\"self-bookmark\">ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransactionType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveById_System_String_\" data-linktype=\"self-bookmark\">ReceiveById(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the message that matches the given identifier from a non-transactional queue and immediately raises an exception if no message with the specified identifier currently exists in the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveById_System_String_System_Messaging_MessageQueueTransaction_\" data-linktype=\"self-bookmark\">ReceiveById(String,MessageQueueTransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the message that matches the given identifier (from a transactional queue) and immediately raises an exception if no message with the specified identifier currently exists in the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveById_System_String_System_Messaging_MessageQueueTransactionType_\" data-linktype=\"self-bookmark\">ReceiveById(String,MessageQueueTransactionType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the message that matches the given identifier and immediately raises an exception if no message with the specified identifier currently exists in the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveById_System_String_System_TimeSpan_\" data-linktype=\"self-bookmark\">ReceiveById(String,TimeSpan)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the message that matches the given identifier (from a non-transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveById_System_String_System_TimeSpan_System_Messaging_MessageQueueTransaction_\" data-linktype=\"self-bookmark\">ReceiveById(String,TimeSpan,MessageQueueTransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the message that matches the given identifier (from a transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveById_System_String_System_TimeSpan_System_Messaging_MessageQueueTransactionType_\" data-linktype=\"self-bookmark\">ReceiveById(String,TimeSpan,MessageQueueTransactionType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Receives the message that matches the given identifier and waits until either a message with the specified identifier is available in the queue or the time-out expires.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveByLookupId_System_Int64_\" data-linktype=\"self-bookmark\">ReceiveByLookupId(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Introduced in MSMQ 3.0. Receives the message that matches the given lookup identifier from a non-transactional queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveByLookupId_System_Messaging_MessageLookupAction_System_Int64_System_Messaging_MessageQueueTransaction_\" data-linktype=\"self-bookmark\">ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Introduced in MSMQ 3.0. Receives a specific message from a transactional queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveByLookupId_System_Messaging_MessageLookupAction_System_Int64_System_Messaging_MessageQueueTransactionType_\" data-linktype=\"self-bookmark\">ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransactionType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Introduced in MSMQ 3.0. Receives a specific message from the queue, using the specified transaction context. The message can be specified by a lookup identifier or by its position at the front or end of the queue.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Refresh\" data-linktype=\"self-bookmark\">Refresh()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Refreshes the properties presented by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> to reflect the current state of the resource.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ResetPermissions\" data-linktype=\"self-bookmark\">ResetPermissions()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the permission list to the operating system&#39;s default values. Removes any queue permissions you have appended to the default list.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Send_System_Object_\" data-linktype=\"self-bookmark\">Send(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends an object to non-transactional queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Send_System_Object_System_Messaging_MessageQueueTransaction_\" data-linktype=\"self-bookmark\">Send(Object,MessageQueueTransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends an object to the transactional queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Send_System_Object_System_Messaging_MessageQueueTransactionType_\" data-linktype=\"self-bookmark\">Send(Object,MessageQueueTransactionType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends an object to the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Send_System_Object_System_String_\" data-linktype=\"self-bookmark\">Send(Object,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends an object to the non-transactional queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> and specifies a label for the message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Send_System_Object_System_String_System_Messaging_MessageQueueTransaction_\" data-linktype=\"self-bookmark\">Send(Object,String,MessageQueueTransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends an object to the transactional queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> and specifies a label for the message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_Send_System_Object_System_String_System_Messaging_MessageQueueTransactionType_\" data-linktype=\"self-bookmark\">Send(Object,String,MessageQueueTransactionType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends an object to the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> and specifies a label for the message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_SetPermissions_System_Messaging_AccessControlList_\" data-linktype=\"self-bookmark\">SetPermissions(AccessControlList)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Assigns access rights to the queue based on the contents of an access control list.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_SetPermissions_System_Messaging_MessageQueueAccessControlEntry_\" data-linktype=\"self-bookmark\">SetPermissions(MessageQueueAccessControlEntry)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Assigns access rights to the queue based on the contents of an access control entry.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_SetPermissions_System_String_System_Messaging_MessageQueueAccessRights_\" data-linktype=\"self-bookmark\">SetPermissions(String,MessageQueueAccessRights)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gives a computer, group, or user the specified access rights.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_SetPermissions_System_String_System_Messaging_MessageQueueAccessRights_System_Messaging_AccessControlEntryType_\" data-linktype=\"self-bookmark\">SetPermissions(String,MessageQueueAccessRights,AccessControlEntryType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gives a computer, group, or user the specified access rights, with the specified access control type (allow, deny, revoke, or set).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"self-bookmark\">PeekCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a message is read without being removed from the queue. This is a result of the asynchronous operation, <span class=\"xref\">stem.Messaging.MessageQueue.BeginPeek*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"self-bookmark\">ReceiveCompleted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a message has been removed from the queue. This event is raised by the asynchronous operation, <span class=\"xref\">stem.Messaging.MessageQueue.BeginReceive*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue__ctor\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MessageQueue()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class. After the default constructor initializes the new instance, you must set the instance&#39;s <span class=\"xref\">stem.Messaging.MessageQueue.Path*</span> property before you can use the instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public MessageQueue ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to create a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class that is not immediately tied to a queue on the Message Queuing server. Before using this instance, you must connect it to an existing Message Queuing queue by setting the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property. Alternatively, you can set the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> reference to the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a> method&#39;s return value, thereby creating a new Message Queuing queue.  </p>\n<p> The MessageQueue constructor instantiates a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class; it does not create a new Message Queuing queue.  </p>\n<p> The following table shows initial property values for an instance of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Initial value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a></td>\n<td>The values set by the default constructor of the <a class=\"xref\" href=\"system.messaging.defaultpropertiestosend\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> class.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a></td>\n<td><a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MessageReadPropertyFilter_\" data-linktype=\"relative-path\">MessageReadPropertyFilter</a></td>\n<td>The values set by the default constructor of the <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a> class. All the filter values are set to <code>true</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DenySharedReceive_\" data-linktype=\"relative-path\">DenySharedReceive</a></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#1\">        // Connect to a queue on the local computer. You must set the queue&#39;s\n        // Path property before you can use the queue.\n        MessageQueue queue = new MessageQueue();\n        queue.Path = &quot;.\\\\exampleQueue&quot;;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MessageQueue(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class that references the Message Queuing queue at the specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public MessageQueue (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The location of the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Messaging.MessageQueue.Path*</span> property is not valid, possibly because it has not been set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload when you want to tie the new <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instance to a particular Message Queuing queue, for which you know the path, format name, or label. If you want to grant exclusive access to the first application that references the queue, you must set the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DenySharedReceive_\" data-linktype=\"relative-path\">DenySharedReceive</a> property to <code>true</code> or use the constructor that passes a read-access restriction parameter.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue__ctor_\" data-linktype=\"relative-path\">MessageQueue</a> constructor instantiates a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class; it does not create a new Message Queuing queue. To create a new queue in Message Queuing, use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>.  </p>\n<p> The syntax of the <code>path</code> parameter depends on the type of queue it references, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Queue type</th>\n<th>Syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Public queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Private queue</td>\n<td><code>MachineName</code>\\<code>Private$</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Journal queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code>\\<code>Journal$</code></td>\n</tr>\n<tr>\n<td>Machine journal queue</td>\n<td><code>MachineName</code>\\<code>Journal$</code></td>\n</tr>\n<tr>\n<td>Machine dead-letter queue</td>\n<td><code>MachineName</code>\\<code>Deadletter$</code></td>\n</tr>\n<tr>\n<td>Machine transactional dead-letter queue</td>\n<td><code>MachineName</code>\\<code>XactDeadletter$</code></td>\n</tr>\n</tbody>\n</table>\n<p> Alternatively, you can use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_FormatName_\" data-linktype=\"relative-path\">FormatName</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a> to describe the queue path, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Syntax</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Format name</td>\n<td><code>FormatName:</code> [ <em>format name</em> ]</td>\n<td><code>FormatName:Public=</code> 5A5F7535-AE9A-41d4-935C-845C2AFF7112<br><br> <code>FormatName:DIRECT=SPX:</code> <code>NetworkNumber</code>; <code>HostNumber</code>\\<code>QueueName</code><br><br> <code>FormatName:DIRECT=TCP:</code> <code>IPAddress</code>\\<code>QueueName</code><br><br> <code>FormatName:DIRECT=OS:</code> <code>MachineName</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Label</td>\n<td><code>Label:</code> [ <em>label</em> ]</td>\n<td><code>Label:</code> TheLabel</td>\n</tr>\n</tbody>\n</table>\n<p> To work offline, you must use the format name syntax, not the path name syntax for the constructor. Otherwise, an exception is thrown because the primary domain controller is not available to resolve the path to the format name.  </p>\n<p> The following table shows initial property values for an instance of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. These values are based on the properties of the Message Queuing queue with the path specified by the <code>path</code> parameter.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Initial value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BasePriority_\" data-linktype=\"relative-path\">BasePriority</a></td>\n<td>0</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Category_\" data-linktype=\"relative-path\">Category</a></td>\n<td><a class=\"xref\" href=\"system.guid#System_Guid_Empty\" data-linktype=\"relative-path\">Empty</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a></td>\n<td>The values set by the default constructor of the <a class=\"xref\" href=\"system.messaging.defaultpropertiestosend\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> class.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EncryptionRequired_\" data-linktype=\"relative-path\">EncryptionRequired</a></td>\n<td><code>true</code>, if the Message Queuing queue&#39;s privacy level setting is &quot;Body&quot;; otherwise, <code>false</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a></td>\n<td><a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a></td>\n<td><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a></td>\n<td>The value of the Message Queuing queue&#39;s computer name property.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MaximumJournalSize_\" data-linktype=\"relative-path\">MaximumJournalSize</a></td>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteQueueSize\" data-linktype=\"relative-path\">InfiniteQueueSize</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MaximumQueueSize_\" data-linktype=\"relative-path\">MaximumQueueSize</a></td>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteQueueSize\" data-linktype=\"relative-path\">InfiniteQueueSize</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MessageReadPropertyFilter_\" data-linktype=\"relative-path\">MessageReadPropertyFilter</a></td>\n<td>The values set by the default constructor of the <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a> class.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a></td>\n<td><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, if not set by the constructor.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_QueueName_\" data-linktype=\"relative-path\">QueueName</a></td>\n<td><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, if not set by the constructor.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DenySharedReceive_\" data-linktype=\"relative-path\">DenySharedReceive</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_UseJournalQueue_\" data-linktype=\"relative-path\">UseJournalQueue</a></td>\n<td><code>true</code>, if the Message Queuing object&#39;s journal setting is enabled; otherwise, <code>false</code>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates new <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> objects using various path name syntax types. In each case, it sends a message to the queue whose path is defined in the constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.Path#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example demonstrates several ways to set\n\t\t// a queue&#39;s path.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\tmyNewQueue.SendPublic();\n\t\t\tmyNewQueue.SendPrivate();\n\t\t\tmyNewQueue.SendByLabel();\n\t\t\tmyNewQueue.SendByFormatName();\n\t\t\tmyNewQueue.MonitorComputerJournal();\n\t\t\tmyNewQueue.MonitorQueueJournal();\n\t\t\tmyNewQueue.MonitorDeadLetter();\n\t\t\tmyNewQueue.MonitorTransactionalDeadLetter();\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// References public queues.\n\t\tpublic void SendPublic()\n\t\t{\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Send(&quot;Public queue by path name.&quot;);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// References private queues.\n\t\tpublic void SendPrivate()\n\t\t{\n\t\t\tMessageQueue myQueue = new \n\t\t\t\tMessageQueue(&quot;.\\\\Private$\\\\myQueue&quot;);\n\t\t\tmyQueue.Send(&quot;Private queue by path name.&quot;);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// References queues by label.\n\t\tpublic void SendByLabel()\n\t\t{\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;Label:TheLabel&quot;);\n\t\t\tmyQueue.Send(&quot;Queue by label.&quot;);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// References queues by format name.\n\t\tpublic void SendByFormatName()\n\t\t{\n\t\t\tMessageQueue myQueue = new \n\t\t\t\tMessageQueue(&quot;FormatName:Public=5A5F7535-AE9A-41d4&quot; + \n\t\t\t\t&quot;-935C-845C2AFF7112&quot;);\n\t\t\tmyQueue.Send(&quot;Queue by format name.&quot;);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// References computer journal queues.\n\t\tpublic void MonitorComputerJournal()\n\t\t{\n\t\t\tMessageQueue computerJournal = new \n\t\t\t\tMessageQueue(&quot;.\\\\Journal$&quot;);\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tMessage journalMessage = computerJournal.Receive();\n\t\t\t\t// Process the journal message.\n\t\t\t}\n\t\t}\n\n\t\t// References queue journal queues.\n\t\tpublic void MonitorQueueJournal()\n\t\t{\n\t\t\tMessageQueue queueJournal = new \n\t\t\t\tMessageQueue(&quot;.\\\\myQueue\\\\Journal$&quot;);\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tMessage journalMessage = queueJournal.Receive();\n\t\t\t\t// Process the journal message.\n\t\t\t}\n\t\t}\n\t\t\n\t\t// References dead-letter queues.\n\t\tpublic void MonitorDeadLetter()\n\t\t{\n\t\t\tMessageQueue deadLetter = new \n\t\t\t\tMessageQueue(&quot;.\\\\DeadLetter$&quot;);\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tMessage deadMessage = deadLetter.Receive();\n\t\t\t\t// Process the dead-letter message.\n\t\t\t}\n\t\t}\n\n\t\t// References transactional dead-letter queues.\n\t\tpublic void MonitorTransactionalDeadLetter()\n\t\t{\n\t\t\tMessageQueue TxDeadLetter = new \n\t\t\t\tMessageQueue(&quot;.\\\\XactDeadLetter$&quot;);\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tMessage txDeadLetter = TxDeadLetter.Receive();\n\t\t\t\t// Process the transactional dead-letter message.\n\t\t\t}\n\t\t}\n\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.Path#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example demonstrates several ways to set\n        &#39; a queue&#39;s path.\n        \n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            myNewQueue.SendPublic()\n            myNewQueue.SendPrivate()\n            myNewQueue.SendByLabel()\n            myNewQueue.SendByFormatName()\n            myNewQueue.MonitorComputerJournal()\n            myNewQueue.MonitorQueueJournal()\n            myNewQueue.MonitorDeadLetter()\n            myNewQueue.MonitorTransactionalDeadLetter()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        &#39; References public queues.\n        Public Sub SendPublic()\n\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Send(&quot;Public queue by path name.&quot;)\n\n            Return\n\n        End Sub &#39;SendPublic\n\n\n        &#39; References private queues.\n        Public Sub SendPrivate()\n\n            Dim myQueue As New MessageQueue(&quot;.\\Private$\\myQueue&quot;)\n            myQueue.Send(&quot;Private queue by path name.&quot;)\n\n            Return\n\n        End Sub &#39;SendPrivate\n\n\n        &#39; References queues by label.\n        Public Sub SendByLabel()\n\n            Dim myQueue As New MessageQueue(&quot;Label:TheLabel&quot;)\n            myQueue.Send(&quot;Queue by label.&quot;)\n\n            Return\n\n        End Sub &#39;SendByLabel\n\n\n        &#39; References queues by format name.\n        Public Sub SendByFormatName()\n\n            Dim myQueue As New _\n                MessageQueue(&quot;FormatName:Public=&quot; + _\n                    &quot;5A5F7535-AE9A-41d4-935C-845C2AFF7112&quot;)\n            myQueue.Send(&quot;Queue by format name.&quot;)\n\n            Return\n\n        End Sub &#39;SendByFormatName\n\n\n        &#39; References computer journal queues.\n        Public Sub MonitorComputerJournal()\n\n            Dim computerJournal As New MessageQueue(&quot;.\\Journal$&quot;)\n\n            While True\n\n                Dim journalMessage As Message = _\n                    computerJournal.Receive()\n\n                &#39; Process the journal message.\n\n            End While\n\n            Return\n        End Sub &#39;MonitorComputerJournal\n\n\n        &#39; References queue journal queues.\n        Public Sub MonitorQueueJournal()\n\n            Dim queueJournal As New _\n                            MessageQueue(&quot;.\\myQueue\\Journal$&quot;)\n\n            While True\n\n                Dim journalMessage As Message = _\n                    queueJournal.Receive()\n\n                &#39; Process the journal message.\n\n            End While\n\n            Return\n        End Sub &#39;MonitorQueueJournal\n\n\n        &#39; References dead-letter queues.\n        Public Sub MonitorDeadLetter()\n            Dim deadLetter As New MessageQueue(&quot;.\\DeadLetter$&quot;)\n\n            While True\n\n                Dim deadMessage As Message = deadLetter.Receive()\n\n                &#39; Process the dead-letter message.\n\n            End While\n\n            Return\n\n        End Sub &#39;MonitorDeadLetter\n\n\n        &#39; References transactional dead-letter queues.\n        Public Sub MonitorTransactionalDeadLetter()\n\n            Dim TxDeadLetter As New MessageQueue(&quot;.\\XactDeadLetter$&quot;)\n\n            While True\n\n                Dim txDeadLetterMessage As Message = _\n                    TxDeadLetter.Receive()\n\n                &#39; Process the transactional dead-letter message.\n\n            End While\n\n            Return\n\n        End Sub &#39;MonitorTransactionalDeadLetter\n\nEnd Class &#39;MyNewQueue \n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.Path#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n\n   // References public queues.\n   void SendPublic()\n   {\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n      myQueue-&gt;Send( &quot;Public queue by path name.&quot; );\n      return;\n   }\n\n\n   // References private queues.\n   void SendPrivate()\n   {\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\Private$\\\\myQueue&quot; );\n      myQueue-&gt;Send( &quot;Private queue by path name.&quot; );\n      return;\n   }\n\n\n   // References queues by label.\n   void SendByLabel()\n   {\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;Label:TheLabel&quot; );\n      myQueue-&gt;Send( &quot;Queue by label.&quot; );\n      return;\n   }\n\n\n   // References queues by format name.\n   void SendByFormatName()\n   {\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;FormatName:Public=5A5F7535-AE9A-41d4 -935C-845C2AFF7112&quot; );\n      myQueue-&gt;Send( &quot;Queue by format name.&quot; );\n      return;\n   }\n\n\n   // References computer journal queues.\n   void MonitorComputerJournal()\n   {\n      MessageQueue^ computerJournal = gcnew MessageQueue( &quot;.\\\\Journal$&quot; );\n      while ( true )\n      {\n         Message^ journalMessage = computerJournal-&gt;Receive();\n         \n         // Process the journal message.\n      }\n   }\n\n\n   // References queue journal queues.\n   void MonitorQueueJournal()\n   {\n      MessageQueue^ queueJournal = gcnew MessageQueue( &quot;.\\\\myQueue\\\\Journal$&quot; );\n      while ( true )\n      {\n         Message^ journalMessage = queueJournal-&gt;Receive();\n         \n         // Process the journal message.\n      }\n   }\n\n\n   // References dead-letter queues.\n   void MonitorDeadLetter()\n   {\n      MessageQueue^ deadLetter = gcnew MessageQueue( &quot;.\\\\DeadLetter$&quot; );\n      while ( true )\n      {\n         Message^ deadMessage = deadLetter-&gt;Receive();\n         \n         // Process the dead-letter message.\n      }\n   }\n\n\n   // References transactional dead-letter queues.\n   void MonitorTransactionalDeadLetter()\n   {\n      MessageQueue^ TxDeadLetter = gcnew MessageQueue( &quot;.\\\\XactDeadLetter$&quot; );\n      while ( true )\n      {\n         Message^ txDeadLetter = TxDeadLetter-&gt;Receive();\n         \n         // Process the transactional dead-letter message.\n      }\n   }\n\n};\n\n\n//*************************************************\n// Provides an entry point into the application.\n//         \n// This example demonstrates several ways to set\n// a queue&#39;s path.\n//*************************************************\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   myNewQueue-&gt;SendPublic();\n   myNewQueue-&gt;SendPrivate();\n   myNewQueue-&gt;SendByLabel();\n   myNewQueue-&gt;SendByFormatName();\n   myNewQueue-&gt;MonitorComputerJournal();\n   myNewQueue-&gt;MonitorQueueJournal();\n   myNewQueue-&gt;MonitorDeadLetter();\n   myNewQueue-&gt;MonitorTransactionalDeadLetter();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue__ctor_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MessageQueue(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class that references the Message Queuing queue at the specified path and with the specified read-access restriction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public MessageQueue (string path, bool sharedModeDenyReceive);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The location of the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>, which can be &quot;.&quot; for the local computer. For information about the proper syntax for this parameter, see the Remarks section.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sharedModeDenyReceive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to grant exclusive read access to the first application that accesses the queue; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Messaging.MessageQueue.Path*</span> property is not valid, possibly because it has not been set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload when you want to tie the new <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> to a particular Message Queuing queue, for which you know the path, format name, or label. If you want to grant exclusive access to the first application that references the queue, set the <code>sharedModeDenyReceive</code> parameter to <code>true</code>. Otherwise, set <code>sharedModeDenyReceive</code> to <code>false</code> or use the constructor that has only a <code>path</code> parameter.  </p>\n<p> Setting <code>sharedModeDenyReceive</code> to <code>true</code> affects all objects that access the Message Queuing queue, including other applications. The effects of the parameter are not restricted to this application.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue__ctor_\" data-linktype=\"relative-path\">MessageQueue</a> constructor creates a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class; it does not create a new Message Queuing queue. To create a new queue in Message Queuing, use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>.  </p>\n<p> The syntax of the <code>path</code> parameter depends on the type of queue.  </p>\n<table>\n<thead>\n<tr>\n<th>Queue type</th>\n<th>Syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Public queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Private queue</td>\n<td><code>MachineName</code>\\<code>Private$</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Journal queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code>\\<code>Journal$</code></td>\n</tr>\n<tr>\n<td>Machine journal queue</td>\n<td><code>MachineName</code>\\<code>Journal$</code></td>\n</tr>\n<tr>\n<td>Machine dead-letter queue</td>\n<td><code>MachineName</code>\\<code>Deadletter$</code></td>\n</tr>\n<tr>\n<td>Machine transactional dead-letter queue</td>\n<td><code>MachineName</code>\\<code>XactDeadletter$</code></td>\n</tr>\n</tbody>\n</table>\n<p> Alternatively, you can use the format name or label of a Message Queuing queue to describe the queue path.  </p>\n<table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Syntax</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Format name</td>\n<td><code>FormatName:</code> [ <em>format name</em> ]</td>\n<td><code>FormatName:Public=</code> 5A5F7535-AE9A-41d4-935C-845C2AFF7112<br><br> <code>FormatName:DIRECT=SPX:</code> <code>NetworkNumber</code>; <code>HostNumber</code>\\<code>QueueName</code><br><br> <code>FormatName:DIRECT=TCP:</code> <code>IPAddress</code>\\<code>QueueName</code><br><br> <code>FormatName:DIRECT=OS:</code> <code>MachineName</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Label</td>\n<td><code>Label:</code> [ <em>label</em> ]</td>\n<td><code>Label:</code> TheLabel</td>\n</tr>\n</tbody>\n</table>\n<p> To work offline, you must use the format name syntax, rather than the friendly name syntax. Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.  </p>\n<p> If a <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> opens a queue with the <code>sharedModeDenyReceive</code> parameter set to <code>true</code>, any <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> that subsequently tries to read from the queue generates a <a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a> because of a sharing violation. A <a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a> is also thrown if a <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> tries to access the queue in exclusive mode while another <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> already has non-exclusive access to the queue.  </p>\n<p> The following table shows initial property values for an instance of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. These values are based on the properties of the Message Queuing queue, with the path specified by the <code>path</code> parameter.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Initial value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Authenticate_\" data-linktype=\"relative-path\">Authenticate</a></td>\n<td><code>false</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BasePriority_\" data-linktype=\"relative-path\">BasePriority</a></td>\n<td>0.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Category_\" data-linktype=\"relative-path\">Category</a></td>\n<td><a class=\"xref\" href=\"system.guid#System_Guid_Empty\" data-linktype=\"relative-path\">Empty</a>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a></td>\n<td>The values set by the default constructor of the <a class=\"xref\" href=\"system.messaging.defaultpropertiestosend\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> class.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EncryptionRequired_\" data-linktype=\"relative-path\">EncryptionRequired</a></td>\n<td><code>true</code>, if the Message Queuing queue&#39;s privacy level setting is &quot;Body&quot;; otherwise, <code>false</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a></td>\n<td><a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a></td>\n<td><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a></td>\n<td>The value of the Message Queuing queue&#39;s computer name property.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MaximumJournalSize_\" data-linktype=\"relative-path\">MaximumJournalSize</a></td>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteQueueSize\" data-linktype=\"relative-path\">InfiniteQueueSize</a>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MaximumQueueSize_\" data-linktype=\"relative-path\">MaximumQueueSize</a></td>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteQueueSize\" data-linktype=\"relative-path\">InfiniteQueueSize</a>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MessageReadPropertyFilter_\" data-linktype=\"relative-path\">MessageReadPropertyFilter</a></td>\n<td>The values set by the default constructor of the <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a> class.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a></td>\n<td><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, if not set by the constructor.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_QueueName_\" data-linktype=\"relative-path\">QueueName</a></td>\n<td><a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>, if not set by the constructor.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DenySharedReceive_\" data-linktype=\"relative-path\">DenySharedReceive</a></td>\n<td>The value of the <code>sharedModeDenyReceive</code> parameter.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_UseJournalQueue_\" data-linktype=\"relative-path\">UseJournalQueue</a></td>\n<td><code>true</code>, if the Message Queuing object&#39;s journal setting is enabled; otherwise, <code>false</code>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> with exclusive access, sets its path, and sends a message to the queue.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue.ctor_PathSharedModeDenyReceive#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n\n   // Requests exlusive read access to the queue. If\n   // access is granted, receives a message from the \n   // queue.\n   void GetExclusiveAccess()\n   {\n      try\n      {\n         \n         // Request exclusive read access to the queue.\n         MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot;,true );\n         \n         // Receive a message. This is where SharingViolation \n         // exceptions would be thrown.\n         Message^ myMessage = myQueue-&gt;Receive();\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         \n         // Handle request for denial of exclusive read access.\n         if ( e-&gt;MessageQueueErrorCode == MessageQueueErrorCode::SharingViolation )\n         {\n            Console::WriteLine( &quot;Denied exclusive read access&quot; );\n         }\n\n         \n         // Handle other sources of a MessageQueueException.\n      }\n\n      \n      // Handle other exceptions as necessary.\n      return;\n   }\n\n};\n\n\n// Provides an entry point into the application.\n// This example connects to a message queue, and\n// requests exclusive read access to the queue.\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Output the count of Lowest priority messages.\n   myNewQueue-&gt;GetExclusiveAccess();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.ctor_PathSharedModeDenyReceive#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example connects to a message queue, and\n        &#39; requests exclusive read access to the queue.\n \n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Output the count of Lowest priority messages.\n            myNewQueue.GetExclusiveAccess()\n\n            Return\n\n        End Sub &#39;Main\n\n\n  \n        &#39; Requests exlusive read access to the queue. If\n        &#39; access is granted, receives a message from the \n        &#39; queue.\n  \n\n        Public Sub GetExclusiveAccess()\n\n            Try\n\n                &#39; Request exclusive read access to the queue.\n                Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;, True)\n\n                &#39; Receive a message. This is where a SharingViolation \n                &#39; exception would be thrown.\n                Dim myMessage As Message = myQueue.Receive()\n\n            Catch e As MessageQueueException\n\n                &#39; Handle request for denial of exclusive read access.\n                If e.MessageQueueErrorCode = _\n                    MessageQueueErrorCode.SharingViolation Then\n\n                    Console.WriteLine(&quot;Denied exclusive read access.&quot;)\n\n                End If\n\n                &#39; Handle other sources of a MessageQueueException.\n\n                &#39; Handle other exceptions as necessary.\n\n            End Try\n\n            Return\n\n        End Sub &#39;GetExclusiveAccess\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.ctor_PathSharedModeDenyReceive#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example connects to a message queue, and\n\t\t// requests exclusive read access to the queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Output the count of Lowest priority messages.\n\t\t\tmyNewQueue.GetExclusiveAccess();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Requests exlusive read access to the queue. If\n\t\t// access is granted, receives a message from the \n\t\t// queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetExclusiveAccess()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Request exclusive read access to the queue.\n\t\t\t\tMessageQueue myQueue = new \n\t\t\t\t\tMessageQueue(&quot;.\\\\myQueue&quot;, true);\n\n\t\t\t\t// Receive a message. This is where SharingViolation \n\t\t\t\t// exceptions would be thrown.\n\t\t\t\tMessage myMessage = myQueue.Receive();\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException e)\n\t\t\t{\n\t\t\t\t// Handle request for denial of exclusive read access.\n\t\t\t\tif (e.MessageQueueErrorCode == \n\t\t\t\t\tMessageQueueErrorCode.SharingViolation)\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(&quot;Denied exclusive read access&quot;);\n\t\t\t\t}\n\n\t\t\t\t// Handle other sources of a MessageQueueException.\n\t\t\t}\n\n\t\t\t// Handle other exceptions as necessary.\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue__ctor_System_String_System_Messaging_QueueAccessMode_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MessageQueue(String,QueueAccessMode)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public MessageQueue (string path, System.Messaging.QueueAccessMode accessMode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The location of the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>, which can be &quot;.&quot; for the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>accessMode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.queueaccessmode\" data-linktype=\"relative-path\">QueueAccessMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.queueaccessmode\" data-linktype=\"relative-path\">QueueAccessMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue__ctor_System_String_System_Boolean_System_Boolean_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MessageQueue(String,Boolean,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public MessageQueue (string path, bool sharedModeDenyReceive, bool enableCache);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The location of the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>, which can be &quot;.&quot; for the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sharedModeDenyReceive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to grant exclusive read access to the first application that accesses the queue; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>enableCache</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to create and use a connection cache; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> with exclusive read access and with connection caching enabled.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue4#1\">    // Connect to a queue on the local computer, grant exclusive read\n    // access to the first application that accesses the queue, and\n    // enable connection caching.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;, true, true);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue4#1\">        // Connect to a queue on the local computer, grant exclusive read\n        // access to the first application that accesses the queue, and\n        // enable connection caching.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;, true, true);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue__ctor_System_String_System_Boolean_System_Boolean_System_Messaging_QueueAccessMode_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MessageQueue(String,Boolean,Boolean,QueueAccessMode)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public MessageQueue (string path, bool sharedModeDenyReceive, bool enableCache, System.Messaging.QueueAccessMode accessMode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The location of the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>, which can be &quot;.&quot; for the local computer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>sharedModeDenyReceive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to grant exclusive read access to the first application that accesses the queue; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>enableCache</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to create and use a connection cache; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>accessMode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.queueaccessmode\" data-linktype=\"relative-path\">QueueAccessMode</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.queueaccessmode\" data-linktype=\"relative-path\">QueueAccessMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_InfiniteQueueSize\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InfiniteQueueSize</div>        \r\n          </div>\r\n    \r\n            <p>Specifies that no size restriction exists for a queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly long InfiniteQueueSize;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is frequently used when setting <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MaximumJournalSize_\" data-linktype=\"relative-path\">MaximumJournalSize</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MaximumQueueSize_\" data-linktype=\"relative-path\">MaximumQueueSize</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the InfiniteQueueSize member.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#16\">        // Set the queue&#39;s MaximumQueueSize property to\n        // MessageQueue.InfiniteQueueSize.\n        queue.MaximumQueueSize = MessageQueue.InfiniteQueueSize;\n\n        // Display the new value of the queue&#39;s MaximumQueueSize property.\n        Console.WriteLine(&quot;MessageQueue.MaximumQueueSize: {0}&quot;,\n            queue.MaximumQueueSize.ToString());\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_InfiniteTimeout\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InfiniteTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Specifies that no time-out exists for methods that peek or receive messages.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly TimeSpan InfiniteTimeout;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> supports two types of message retrieval: synchronous and asynchronous. The synchronous methods, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a>, cause the process thread to wait a specified time interval for a new message to arrive in the queue. If the specified time interval is InfiniteTimeout, the process thread remains blocked until a new message is available. On the other hand, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> (the asynchronous methods), allow the main application tasks to continue in a separate thread until a message arrives in the queue.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the InfiniteTimeout member.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#17\">        // Create a new message.\n        Message msg = new Message();\n\n        // Set the message&#39;s TimeToReachQueue property to\n        // MessageQueue.InfiniteTimeout.\n        msg.TimeToReachQueue = MessageQueue.InfiniteTimeout;\n\n        // Display the new value of the message&#39;s TimeToReachQueue property.\n        Console.WriteLine(&quot;Message.TimeToReachQueue: {0}&quot;,\n            msg.TimeToReachQueue.ToString());\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_AccessMode\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_AccessMode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AccessMode</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates the access mode for the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.QueueAccessMode AccessMode { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.queueaccessmode\" data-linktype=\"relative-path\">QueueAccessMode</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.queueaccessmode\" data-linktype=\"relative-path\">QueueAccessMode</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default access mode for a queue is <code>QueueAccessMode.SendAndReceive</code>, unless you specify otherwise when calling the constructor.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Authenticate\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Authenticate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Authenticate</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the queue accepts only authenticated messages.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Authenticate { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the queue accepts only authenticated messages; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Message authentication provides a way to ensure message integrity and to verify who sent the message. To request authentication, the sending application sets the message&#39;s authentication level.  </p>\n<p> When you set Authenticate to <code>true</code>, you are restricting access to the queue on the server, not only to this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instance. All clients working against the same Message Queuing queue will be affected.  </p>\n<p> A queue that accepts only authenticated messages will reject a non-authenticated message. To request notification of message rejection, a sending application can set the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_AcknowledgeType_\" data-linktype=\"relative-path\">AcknowledgeType</a> property of the message. Because no other indication of message rejection exists, the sending application can lose the message unless you request that it be sent to the dead-letter queue.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the value of a message queue&#39;s Authenticate property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#3\">        // Set the queue&#39;s Authenticate property value.\n        queue.Authenticate = true;\n\n        // Display the new value of the queue&#39;s Authenticate property.\n        Console.WriteLine(&quot;MessageQueue.Authenticate: {0}&quot;, queue.Authenticate);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_BasePriority\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_BasePriority_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BasePriority</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the base priority Message Queuing uses to route a public queue&#39;s messages over the network.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public short BasePriority { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The single base priority for all messages sent to the (public) queue. The default is zero (0).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The base priority was set to an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A message queue&#39;s base priority specifies how a message en route to that queue is treated as it travels through the network. You can set the BasePriority property to confer a higher or lower priority to all messages sent to the specified queue than those sent to other queues. Setting this property modifies the Message Queuing queue. Therefore, any other <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instances are affected by the change.  </p>\n<p> A message queue&#39;s BasePriority is not related to the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Priority_\" data-linktype=\"relative-path\">Priority</a> property of a message, which specifies the order in which an incoming message is placed in the queue.  </p>\n<p> BasePriority applies only to public queues whose paths are specified using the format name. The base priority of a private queue is always zero (0).  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the value of a message queue&#39;s BasePriority property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#4\">        // Set the queue&#39;s BasePriority property value.\n        queue.BasePriority = 10;\n\n        // Display the new value of the queue&#39;s BasePriority property.\n        Console.WriteLine(&quot;MessageQueue.BasePriority: {0}&quot;, queue.BasePriority);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_CanRead\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_CanRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanRead</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can be read.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CanRead { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> exists and the application can read from it; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CanRead indicates whether the application is able to peek or receive messages from the queue. If CanRead is <code>true</code>, the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can receive or peek messages from the queue. Otherwise, it cannot.  </p>\n<p> CanRead is <code>false</code> if a queue is already open with exclusive read access (or if it&#39;s open with non-exclusive access and this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> requests exclusive access), or if the application does not have sufficient rights to access it. If your application tries to read from a queue when CanRead is <code>false</code>, access is denied.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of a message queue&#39;s CanRead property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#5\">        // Display the value of the queue&#39;s CanRead property.\n        Console.WriteLine(&quot;MessageQueue.CanRead: {0}&quot;, queue.CanRead);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_CanWrite\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_CanWrite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanWrite</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can be written to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CanWrite { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> exists and the application can write to it; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CanWrite indicates whether the application is able to send messages to the queue. If CanWrite is <code>true</code>, the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can send messages to the queue. Otherwise, it cannot.  </p>\n<p> CanWrite is <code>false</code> if a queue is already open with exclusive write access (or if it&#39;s open with non-exclusive access and this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> requests exclusive access), or if the application does not have sufficient rights to access it. If your application tries to write to a queue when CanWrite is <code>false</code>, access is denied.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of a message queue&#39;s CanWrite property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#6\">        // Display the value of the queue&#39;s CanWrite property.\n        Console.WriteLine(&quot;MessageQueue.CanWrite: {0}&quot;, queue.CanWrite);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Category\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Category_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Category</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the queue category.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Guid Category { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> that represents the queue category (Message Queuing type identifier), which allows an application to categorize its queues. The default is <code>Guid.empty</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The queue category was set to an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The queue category allows an application to categorize its queues. For example, you can place all Billing queues in one category and all Order queues in another.  </p>\n<p> The Category property provides access to the Message Queuing Type ID property (which is read/write), accessible through the <strong>Queue Properties</strong> dialog box in the Computer Management Console. You can define a new category. Although you can use <a class=\"xref\" href=\"system.guid#System_Guid_NewGuid_\" data-linktype=\"relative-path\">NewGuid</a> to create a category value that is unique across all <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> values, such an action is unnecessary. The category value needs to be distinct only from other categories, not from all other <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> values. For example, you can assign {00000000-0000-0000-0000-000000000001} as the Category for one set of queues and {00000000-0000-0000-0000-000000000002} as the Category for another set.  </p>\n<p> It is not necessary to set the Category. The value can be <code>null</code>.  </p>\n<p> Setting this property modifies the Message Queuing queue. Therefore, any other <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instances are affected by the change.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the value of a message queue&#39;s Category property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#7\">        // Set the queue&#39;s Category property value.\n        queue.Category =\n            new System.Guid(&quot;00000000-0000-0000-0000-000000000001&quot;);\n\n        // Display the new value of the queue&#39;s Category property.\n        Console.WriteLine(&quot;MessageQueue.Category: {0}&quot;, queue.Category);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_CreateTime\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_CreateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the time and date that the queue was created in Message Queuing.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime CreateTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that represents the date and time at which the queue was created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CreateTime refers to the queue on the Message Queuing server, not the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instance.  </p>\n<p> If the queue exists, this property represents the time the queue was created, adjusted to the local time of the server on which the queue exists.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of a message queue&#39;s CreateTime property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#9\">        // Display the value of the queue&#39;s CreateTime property.\n        Console.WriteLine(&quot;MessageQueue.CreateTime: {0}&quot;, queue.CreateTime);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_DefaultPropertiesToSend\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_DefaultPropertiesToSend_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DefaultPropertiesToSend</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the message property values to be used by default when the application sends messages to the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.DefaultPropertiesToSend DefaultPropertiesToSend { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.defaultpropertiestosend\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> that contains the default Message Queuing message property values used when the application sends objects other than <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> instances to the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The default properties could not be set for the queue, possibly because one of the properties is not valid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you send any object that is not of type <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> to the queue, the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> inserts the object into a Message Queuing message. At that time, the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> applies to the message the property values you specify in the DefaultPropertiesToSend property. Conversely, if you send a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> to the queue, these properties are already specified for the instance itself, so DefaultPropertiesToSend is ignored for the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>.  </p>\n<p> Although you set the properties through the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> object, the DefaultPropertiesToSend refers to the properties of the messages that are sent to the queue, not the queue itself.  </p>\n<p> The default values for the properties are shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_AcknowledgeType_\" data-linktype=\"relative-path\">AcknowledgeType</a></td>\n<td><code>AcknowledgeType.None</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_AdministrationQueue_\" data-linktype=\"relative-path\">AdministrationQueue</a></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_AppSpecific_\" data-linktype=\"relative-path\">AppSpecific</a></td>\n<td>Zero (0)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_AttachSenderId_\" data-linktype=\"relative-path\">AttachSenderId</a></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_EncryptionAlgorithm_\" data-linktype=\"relative-path\">EncryptionAlgorithm</a></td>\n<td><code>EncryptionAlgorithm.RC2</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_Extension_\" data-linktype=\"relative-path\">Extension</a></td>\n<td>A zero-length array of bytes</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_HashAlgorithm_\" data-linktype=\"relative-path\">HashAlgorithm</a></td>\n<td><code>HashAlgorithm.MD5</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_Label_\" data-linktype=\"relative-path\">Label</a></td>\n<td>Empty string (&quot;&quot;)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_Priority_\" data-linktype=\"relative-path\">Priority</a></td>\n<td><code>MessagePriority.Normal</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_Recoverable_\" data-linktype=\"relative-path\">Recoverable</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_ResponseQueue_\" data-linktype=\"relative-path\">ResponseQueue</a></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_TimeToBeReceived_\" data-linktype=\"relative-path\">TimeToBeReceived</a></td>\n<td><code>Message.InfiniteTimeout</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_TimeToReachQueue_\" data-linktype=\"relative-path\">TimeToReachQueue</a></td>\n<td><code>Message.InfiniteTimeout</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_TransactionStatusQueue_\" data-linktype=\"relative-path\">TransactionStatusQueue</a></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_UseAuthentication_\" data-linktype=\"relative-path\">UseAuthentication</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_UseDeadLetterQueue_\" data-linktype=\"relative-path\">UseDeadLetterQueue</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_UseEncryption_\" data-linktype=\"relative-path\">UseEncryption</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_UseJournalQueue_\" data-linktype=\"relative-path\">UseJournalQueue</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.defaultpropertiestosend#System_Messaging_DefaultPropertiesToSend_UseTracing_\" data-linktype=\"relative-path\">UseTracing</a></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the priority of a message to determine default properties to send for the message.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue.DefaultPropertiesToSend#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n\n   // Associates selected message property values\n   // with high priority messages.\n   void SendHighPriorityMessages()\n   {\n      \n      // Connect to a message queue.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n      \n      // Associate selected default property values with high\n      // priority messages.\n      myQueue-&gt;DefaultPropertiesToSend-&gt;Priority = MessagePriority::High;\n      myQueue-&gt;DefaultPropertiesToSend-&gt;Label = &quot;High Priority Message&quot;;\n      myQueue-&gt;DefaultPropertiesToSend-&gt;Recoverable = true;\n      myQueue-&gt;DefaultPropertiesToSend-&gt;TimeToReachQueue = TimeSpan(0,0,30);\n      \n      // Send messages using these defaults.\n      myQueue-&gt;Send( &quot;High priority message data 1.&quot; );\n      myQueue-&gt;Send( &quot;High priority message data 2.&quot; );\n      myQueue-&gt;Send( &quot;High priority message data 3.&quot; );\n      return;\n   }\n\n\n   // Associates selected message property values\n   // with normal priority messages.\n   void SendNormalPriorityMessages()\n   {\n      \n      // Connect to a message queue.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n      \n      // Associate selected default property values with normal\n      // priority messages.\n      myQueue-&gt;DefaultPropertiesToSend-&gt;Priority = MessagePriority::Normal;\n      myQueue-&gt;DefaultPropertiesToSend-&gt;Label = &quot;Normal Priority Message&quot;;\n      myQueue-&gt;DefaultPropertiesToSend-&gt;Recoverable = false;\n      myQueue-&gt;DefaultPropertiesToSend-&gt;TimeToReachQueue = TimeSpan(0,2,0);\n      \n      // Send messages using these defaults.\n      myQueue-&gt;Send( &quot;Normal priority message data 1.&quot; );\n      myQueue-&gt;Send( &quot;Normal priority message data 2.&quot; );\n      myQueue-&gt;Send( &quot;Normal priority message data 3.&quot; );\n      return;\n   }\n\n};\n\n\n// Provides an entry point into the application.\n// This example specifies different types of default\n// properties for messages.\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Send normal and high priority messages.\n   myNewQueue-&gt;SendNormalPriorityMessages();\n   myNewQueue-&gt;SendHighPriorityMessages();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.DefaultPropertiesToSend#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example specifies different types of default\n\t\t// properties for messages.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Send normal and high priority messages.\n\t\t\tmyNewQueue.SendNormalPriorityMessages();\n\t\t\tmyNewQueue.SendHighPriorityMessages();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Associates selected message property values\n\t\t// with high priority messages.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendHighPriorityMessages()\n\t\t{\n\n\t\t\t// Connect to a message queue.\n\t\t\tMessageQueue myQueue = new \n\t\t\t\tMessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Associate selected default property values with high\n\t\t\t// priority messages.\n\t\t\tmyQueue.DefaultPropertiesToSend.Priority = \n\t\t\t\tMessagePriority.High;\n\t\t\tmyQueue.DefaultPropertiesToSend.Label = \n\t\t\t\t&quot;High Priority Message&quot;;\n\t\t\tmyQueue.DefaultPropertiesToSend.Recoverable = true;\n\t\t\tmyQueue.DefaultPropertiesToSend.TimeToReachQueue =\n\t\t\t\tnew TimeSpan(0,0,30);\n\t\t\t\n\t\t\t// Send messages using these defaults.\n\t\t\tmyQueue.Send(&quot;High priority message data 1.&quot;);\n\t\t\tmyQueue.Send(&quot;High priority message data 2.&quot;);\n\t\t\tmyQueue.Send(&quot;High priority message data 3.&quot;);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Associates selected message property values\n\t\t// with normal priority messages.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendNormalPriorityMessages()\n\t\t{\n\n\t\t\t// Connect to a message queue.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Associate selected default property values with normal\n\t\t\t// priority messages.\n\t\t\tmyQueue.DefaultPropertiesToSend.Priority = \n\t\t\t\tMessagePriority.Normal;\n\t\t\tmyQueue.DefaultPropertiesToSend.Label = \n\t\t\t\t&quot;Normal Priority Message&quot;;\n\t\t\tmyQueue.DefaultPropertiesToSend.Recoverable = false;\n\t\t\tmyQueue.DefaultPropertiesToSend.TimeToReachQueue =\n\t\t\t\tnew TimeSpan(0,2,0);\n\t\t\t\n\t\t\t// Send messages using these defaults.\n\t\t\tmyQueue.Send(&quot;Normal priority message data 1.&quot;);\n\t\t\tmyQueue.Send(&quot;Normal priority message data 2.&quot;);\n\t\t\tmyQueue.Send(&quot;Normal priority message data 3.&quot;);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.DefaultPropertiesToSend#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example specifies different types of default\n        &#39; properties for messages.\n\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Send normal and high priority messages.\n            myNewQueue.SendNormalPriorityMessages()\n            myNewQueue.SendHighPriorityMessages()\n\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Associates selected message property values\n        &#39; with high priority messages.\n \n\n        Public Sub SendHighPriorityMessages()\n\n            &#39; Connect to a message queue.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Associate selected default property values with high\n            &#39; priority messages.\n            myQueue.DefaultPropertiesToSend.Priority = _\n                MessagePriority.High\n            myQueue.DefaultPropertiesToSend.Label = _\n                &quot;High Priority Message&quot;\n            myQueue.DefaultPropertiesToSend.Recoverable = True\n            myQueue.DefaultPropertiesToSend.TimeToReachQueue = _\n                New TimeSpan(0, 0, 30)\n\n            &#39; Send messages using these defaults.\n            myQueue.Send(&quot;High priority message data 1.&quot;)\n            myQueue.Send(&quot;High priority message data 2.&quot;)\n            myQueue.Send(&quot;High priority message data 3.&quot;)\n\n            Return\n\n        End Sub &#39;SendHighPriorityMessages\n\n\n\n        &#39; Associates selected message property values\n        &#39; with normal priority messages.\n\n        Public Sub SendNormalPriorityMessages()\n\n            &#39; Connect to a message queue.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Associate selected default property values with normal\n            &#39; priority messages.\n            myQueue.DefaultPropertiesToSend.Priority = _\n                MessagePriority.Normal\n            myQueue.DefaultPropertiesToSend.Label = _\n                &quot;Normal Priority Message&quot;\n            myQueue.DefaultPropertiesToSend.Recoverable = False\n            myQueue.DefaultPropertiesToSend.TimeToReachQueue = _\n                New TimeSpan(0, 2, 0)\n\n            &#39; Send messages using these defaults.\n            myQueue.Send(&quot;Normal priority message data 1.&quot;)\n            myQueue.Send(&quot;Normal priority message data 2.&quot;)\n            myQueue.Send(&quot;Normal priority message data 3.&quot;)\n\n            Return\n\n        End Sub &#39;SendNormalPriorityMessages\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_DenySharedReceive\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_DenySharedReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DenySharedReceive</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> has exclusive access to receive messages from the Message Queuing queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool DenySharedReceive { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> has exclusive rights to receive messages from the queue; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>DenySharedReceive specifies the shared mode of the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. Set DenySharedReceive to <code>true</code> to indicate that only this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> should have access to peek or receive messages from the queue with the specified <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a>. If another <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> or another application is associated with the same queue resource, that instance or application will not be able to peek or receive messages, but it can still send them.  </p>\n<p> If DenySharedReceive is <code>false</code>, the queue is available to multiple applications for sending, peeking, or receiving messages.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the value of a message queue&#39;s DenySharedReceive property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#10\">        // Set the queue&#39;s DenySharedReceive property value.\n        queue.DenySharedReceive = false;\n\n        // Display the new value of the queue&#39;s DenySharedReceive property.\n        Console.WriteLine(&quot;MessageQueue.DenySharedReceive: {0}&quot;,\n            queue.DenySharedReceive);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_EnableConnectionCache\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_EnableConnectionCache_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnableConnectionCache</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether a cache of connections will be maintained by the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool EnableConnectionCache { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> to create and use a connection cache; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A connection cache is a list of references to structures that contain read or write handles to queues. When EnableConnectionCache is <code>true</code>, the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> borrows handles from the cache each time you call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Send_System_Object_\" data-linktype=\"relative-path\">Send(Object)</a>, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a>, or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a>, rather than open new handles. This can improve performance. Using a connection cache also insulates the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> from changes in the network topology.  </p>\n<p> If you create a new connection to a queue when the connection cache is full, the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> overwrites the least recently accessed structure with the new connection. You can clear the cache entirely by calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ClearConnectionCache_\" data-linktype=\"relative-path\">ClearConnectionCache</a>, for example, if the format names of the queues you are working with have changed so that the previous read and write handles are no longer valid.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the value of a message queue&#39;s EnableConnectionCache property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#11\">        // Set the MessageQueue.EnableConnectionCache property value.\n        MessageQueue.EnableConnectionCache = false;\n\n        // Display the new value of the MessageQueue.EnableConnectionCache\n        // property.\n        Console.WriteLine(&quot;MessageQueue.EnableConnectionCache: {0}&quot;,\n            MessageQueue.EnableConnectionCache);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_EncryptionRequired\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_EncryptionRequired_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EncryptionRequired</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the queue accepts only non-private (non-encrypted) messages.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.EncryptionRequired EncryptionRequired { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.encryptionrequired\" data-linktype=\"relative-path\">EncryptionRequired</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.encryptionrequired\" data-linktype=\"relative-path\">EncryptionRequired</a> values. The default is <code>None</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you specify that encryption is required for the messages sent to a queue, only the message bodies are encrypted. The other members (for example, the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Label_\" data-linktype=\"relative-path\">Label</a> and <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_SenderId_\" data-linktype=\"relative-path\">SenderId</a> properties) cannot be encrypted.  </p>\n<p> Setting this property modifies the Message Queuing queue. Therefore, any other <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instances are affected by the change.  </p>\n<p> Encrypting a message makes the message private. You can specify the queue&#39;s encryption requirement to be <code>None</code>, <code>Body</code>, or <code>Optional</code> by setting the EncryptionRequired property appropriately. The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_UseEncryption_\" data-linktype=\"relative-path\">UseEncryption</a> setting of the message must correspond to the encryption requirement of the queue. If the message is not encrypted but the queue specifies <code>Body</code>, or if the message is encrypted but the queue specifies <code>None</code>, the message is rejected by the queue. If the sending application requests a negative acknowledgment message in this event, Message Queuing indicates the message&#39;s rejection to the sending application. If the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_UseDeadLetterQueue_\" data-linktype=\"relative-path\">UseDeadLetterQueue</a> property is <code>true</code>, a message that fails encryption is sent to the dead-letter queue. Otherwise, the message is lost.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the value of a message queue&#39;s EncryptionRequired property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#12\">        // Set the queue&#39;s EncryptionRequired property value.\n        queue.EncryptionRequired = System.Messaging.EncryptionRequired.Optional;\n\n        // Display the new value of the queue&#39;s EncryptionRequired property.\n        Console.WriteLine(&quot;MessageQueue.EncryptionRequired: {0}&quot;,\n            queue.EncryptionRequired);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_FormatName\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_FormatName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FormatName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the unique queue name that Message Queuing generated at the time of the queue&#39;s creation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string FormatName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name for the queue, which is unique on the network.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Messaging.MessageQueue.Path*</span> is not set.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The FormatName property contains the format name of the queue. Message Queuing uses the format name to identify which queue to open and how to access it. Unlike most of a queue&#39;s characteristics, the format name is not a Message Queuing application queue property, so you cannot access it through the Message Queuing management tool. The format name is simply a unique name for the queue, which Message Queuing generates when it creates the queue or which the application generates later.  </p>\n<p> If you specify a path using the path name syntax (such as <code>myComputer\\myQueue</code>) rather than using the format name syntax when you read or write to the queue, the primary domain controller (which uses Active Directory) translates the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> into the associated FormatName before accessing the queue. If your application is working offline, you must use the format name syntax; otherwise, the primary domain controller will not be available to perform the path translation.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of a message queue&#39;s FormatName property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#13\">        // Display the value of the queue&#39;s FormatName property.\n        Console.WriteLine(&quot;MessageQueue.FormatName: {0}&quot;, queue.FormatName);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Formatter\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Formatter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Formatter</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the formatter used to serialize an object into or deserialize an object from the body of a message read from or written to the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.IMessageFormatter Formatter { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.imessageformatter\" data-linktype=\"relative-path\">IMessageFormatter</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.imessageformatter\" data-linktype=\"relative-path\">IMessageFormatter</a> that produces a stream to be written to or read from the message body. The default is <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Formatter property contains an instance of a formatter object, which transforms messages when your application reads or writes to the queue.  </p>\n<p> When the application sends message to the queue, the formatter serializes the object into a stream and inserts it into the message body. When reading from a queue, the formatter deserializes the message data into the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Body_\" data-linktype=\"relative-path\">Body</a> property of a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <a class=\"xref\" href=\"system.messaging.activexmessageformatter\" data-linktype=\"relative-path\">ActiveXMessageFormatter</a> and <a class=\"xref\" href=\"system.messaging.binarymessageformatter\" data-linktype=\"relative-path\">BinaryMessageFormatter</a> serialize the data into binary representation. The <a class=\"xref\" href=\"system.messaging.activexmessageformatter\" data-linktype=\"relative-path\">ActiveXMessageFormatter</a> is used when sending or receiving COM components.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.binarymessageformatter\" data-linktype=\"relative-path\">BinaryMessageFormatter</a> and <a class=\"xref\" href=\"system.messaging.activexmessageformatter\" data-linktype=\"relative-path\">ActiveXMessageFormatter</a> provide faster throughput than the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a>. The <a class=\"xref\" href=\"system.messaging.activexmessageformatter\" data-linktype=\"relative-path\">ActiveXMessageFormatter</a> allows interoperability with Visual Basic 6.0 Message Queuing applications.  </p>\n<p> When your application sends messages to the queue, the Formatter applies only to those messages that use the default message properties, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a>. If you send a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> to the queue, Message Queuing uses the formatter defined in the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property to serialize the body instead.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class will always use a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> to receive or peek a message from the queue. The message is deserialized using the Formatter property.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates formatting a message body using <a class=\"xref\" href=\"system.messaging.binarymessageformatter\" data-linktype=\"relative-path\">BinaryMessageFormatter</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessagingBinaryFormatter#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n#using &lt;system.drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Drawing;\nusing namespace System::IO;\n\n/// &lt;summary&gt;\n/// Provides a container class for the example.\n/// &lt;/summary&gt;\nref class MyNewQueue\n{\npublic:\n\n   //*************************************************\n   // Creates a new queue.\n   //*************************************************\n   static void CreateQueue( String^ queuePath )\n   {\n      try\n      {\n         if (  !MessageQueue::Exists( queuePath ) )\n         {\n            MessageQueue::Create( queuePath );\n         }\n         else\n         {\n            Console::WriteLine(  &quot;{0} already exists.&quot;, queuePath );\n         }\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n\n   //*************************************************\n   // Sends an image to a queue, using the BinaryMessageFormatter.\n   //*************************************************\n   void SendMessage()\n   {\n      try\n      {\n         \n         // Create a new bitmap.\n         // The file must be in the \\bin\\debug or \\bin\\retail folder, or\n         // you must give a full path to its location.\n         Image^ myImage = Bitmap::FromFile( &quot;SentImage::bmp&quot; );\n         \n         // Connect to a queue on the local computer.\n         MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n         Message^ myMessage = gcnew Message( myImage,gcnew BinaryMessageFormatter );\n         \n         // Send the image to the queue.\n         myQueue-&gt;Send( myMessage );\n      }\n      catch ( ArgumentException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      return;\n   }\n\n\n   //*************************************************\n   // Receives a message containing an image.\n   //*************************************************\n   void ReceiveMessage()\n   {\n      try\n      {\n         \n         // Connect to the a queue on the local computer.\n         MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n         \n         // Set the formatter to indicate body contains an Order.\n         myQueue-&gt;Formatter = gcnew BinaryMessageFormatter;\n         \n         // Receive and format the message. \n         Message^ myMessage = myQueue-&gt;Receive();\n         Bitmap^ myImage = static_cast&lt;Bitmap^&gt;(myMessage-&gt;Body);\n         \n         // This will be saved in the \\bin\\debug or \\bin\\retail folder.\n         myImage-&gt;Save( &quot;ReceivedImage::bmp&quot;, System::Drawing::Imaging::ImageFormat::Bmp );\n      }\n      catch ( MessageQueueException^ ) \n      {\n         \n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n      catch ( IOException^ e ) \n      {\n         \n         // Handle file access exceptions.\n      }\n\n      \n      // Catch other exceptions as necessary.\n      return;\n   }\n\n};\n\n\n//*************************************************\n// Provides an entry point into the application.\n//         \n// This example sends and receives a message from\n// a queue.\n//*************************************************\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Create a queue on the local computer.\n   MyNewQueue::CreateQueue( &quot;.\\\\myQueue&quot; );\n   \n   // Send a message to a queue.\n   myNewQueue-&gt;SendMessage();\n   \n   // Receive a message from a queue.\n   myNewQueue-&gt;ReceiveMessage();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MessagingBinaryFormatter#1\">using System;\nusing System.Messaging;\nusing System.Drawing;\nusing System.IO;\n\nnamespace MyProject\n{\n\t\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example sends and receives a message from\n\t\t// a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Create a queue on the local computer.\n\t\t\tCreateQueue(&quot;.\\\\myQueue&quot;);\n\t\t\t\n\t\t\t// Send a message to a queue.\n\t\t\tmyNewQueue.SendMessage();\n\n\t\t\t// Receive a message from a queue.\n\t\t\tmyNewQueue.ReceiveMessage();\n\n\t\t\treturn;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Creates a new queue.\n\t\t//**************************************************\n\n\t\tpublic static void CreateQueue(string queuePath)\n\t\t{\n\t\t\ttry\t\n\t\t\t\t{\n\t\t\t\tif(!MessageQueue.Exists(queuePath))\n\t\t\t\t{\n\t\t\t\t\tMessageQueue.Create(queuePath);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(queuePath + &quot; already exists.&quot;);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (MessageQueueException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\t//**************************************************\n\t\t// Sends an image to a queue, using the BinaryMessageFormatter.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\t\t\ttry{\n\n\t\t\t\t// Create a new bitmap.\n\t\t\t\t// The file must be in the \\bin\\debug or \\bin\\retail folder, or\n\t\t\t\t// you must give a full path to its location.\n\t\t\t\tImage myImage = Bitmap.FromFile(&quot;SentImage.bmp&quot;);\n\n\t\t\t\t// Connect to a queue on the local computer.\n\t\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\t\t\n\t\t\t\tMessage myMessage = new Message(myImage, new BinaryMessageFormatter());\n\n\t\t\t\t// Send the image to the queue.\n\t\t\t\tmyQueue.Send(myMessage);\n\t\t\t}\n\t\t\tcatch(ArgumentException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message containing an image.\n\t\t//**************************************************\n\t\t\n\t\tpublic  void ReceiveMessage()\n\t\t{\n\t\t\t\t\t\t\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\t// Connect to the a queue on the local computer.\n\t\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\t\tmyQueue.Formatter = new BinaryMessageFormatter();\n\n\t\t\t\t// Receive and format the message. \n\t\t\t\tSystem.Messaging.Message myMessage = myQueue.Receive(); \n\t\t\t\tBitmap myImage = (Bitmap)myMessage.Body;\n\t\t\t\t\n\t\t\t\t// This will be saved in the \\bin\\debug or \\bin\\retail folder.\n\t\t\t\tmyImage.Save(&quot;ReceivedImage.bmp&quot;,System.Drawing.Imaging.ImageFormat.Bmp);\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\n\t\t\tcatch (IOException e)\n\t\t\t{\n\t\t\t\t// Handle file access exceptions.\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessagingBinaryFormatter#1\">Imports System\nImports System.Messaging\nImports System.Drawing\nImports System.IO\n\n\nNamespace MyProj\n    _\n   \n   \n   Public Class MyNewQueue\n      \n      \n      &#39;**************************************************\n      &#39; Provides an entry point into the application.\n      &#39;\t\t \n      &#39; This example sends and receives a message from\n      &#39; a queue.\n      &#39;**************************************************\n      Public Shared Sub Main()\n         &#39; Create a new instance of the class.\n         Dim myNewQueue As New MyNewQueue()\n         \n         &#39; Create a queue on the local computer.\n         CreateQueue(&quot;.\\myQueue&quot;)\n         \n         &#39; Send a message to a queue.\n         myNewQueue.SendMessage()\n         \n         &#39; Receive a message from a queue.\n         myNewQueue.ReceiveMessage()\n         \n         Return\n      End Sub &#39;Main\n      \n      \n      &#39;**************************************************\n      &#39; Creates a new queue.\n      &#39;**************************************************\n      Public Shared Sub CreateQueue(queuePath As String)\n         Try\n            If Not MessageQueue.Exists(queuePath) Then\n               MessageQueue.Create(queuePath)\n            Else\n               Console.WriteLine((queuePath + &quot; already exists.&quot;))\n            End If\n         Catch e As MessageQueueException\n            Console.WriteLine(e.Message)\n         End Try\n      End Sub &#39;CreateQueue\n       \n      \n      &#39;**************************************************\n      &#39; Sends an image to a queue, using the BinaryMessageFormatter.\n      &#39;**************************************************\n      Public Sub SendMessage()\n         Try\n            \n            &#39; Create a new bitmap.\n            &#39; The file must be in the \\bin\\debug or \\bin\\retail folder, or\n            &#39; you must give a full path to its location.\n            Dim myImage As Image = Bitmap.FromFile(&quot;SentImage.bmp&quot;)\n            \n            &#39; Connect to a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            \n            Dim myMessage As New Message(myImage, New BinaryMessageFormatter())\n            \n            &#39; Send the image to the queue.\n            myQueue.Send(myMessage)\n         Catch e As ArgumentException\n            Console.WriteLine(e.Message)\n         End Try \n         \n         Return\n      End Sub &#39;SendMessage\n      \n      \n      \n      &#39;**************************************************\n      &#39; Receives a message containing an image.\n      &#39;**************************************************\n      Public Sub ReceiveMessage()\n         \n         Try\n            \n            &#39; Connect to the a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            \n            &#39; Set the formatter to indicate body contains an Order.\n            myQueue.Formatter = New BinaryMessageFormatter()\n            \n            &#39; Receive and format the message. \n            Dim myMessage As System.Messaging.Message = myQueue.Receive()\n            Dim myImage As Bitmap = CType(myMessage.Body, Bitmap)\n            \n            &#39; This will be saved in the \\bin\\debug or \\bin\\retail folder.\n            myImage.Save(&quot;ReceivedImage.bmp&quot;, System.Drawing.Imaging.ImageFormat.Bmp)\n         \n         \n         \n         &#39;Catch\n         &#39; Handle Message Queuing exceptions.\n         \n         &#39; Handle invalid serialization format.\n         Catch e As InvalidOperationException\n            Console.WriteLine(e.Message)\n         \n         Catch e As IOException\n         End Try\n         &#39; Handle file access exceptions.\n         \n         &#39; Catch other exceptions as necessary.\n         Return\n      End Sub &#39;ReceiveMessage\n   End Class &#39;MyNewQueue\nEnd Namespace &#39;MyProj\n</code></pre><p> The following code example demonstrates formatting a message body using <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Message.Body#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n#using &lt;system.drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Drawing;\nusing namespace System::IO;\nref class Order\n{\npublic:\n   int orderId;\n   DateTime orderTime;\n};\n\nref class MyNewQueue\n{\npublic:\n   static void CreateQueue( String^ queuePath )\n   {\n      try\n      {\n         if (  !MessageQueue::Exists( queuePath ) )\n         {\n            MessageQueue::Create( queuePath );\n         }\n         else\n         {\n            Console::WriteLine(  &quot;{0} already exists.&quot;, queuePath );\n         }\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   void SendMessage()\n   {\n      try\n      {\n         // Create a new order and set values.\n         Order^ sentOrder = gcnew Order;\n         sentOrder-&gt;orderId = 3;\n         sentOrder-&gt;orderTime = DateTime::Now;\n\n         // Connect to a queue on the local computer.\n         MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n         // Create the new order.\n         Message^ myMessage = gcnew Message( sentOrder );\n\n         // Send the order to the queue.\n         myQueue-&gt;Send( myMessage );\n      }\n      catch ( ArgumentException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      return;\n   }\n\n   void ReceiveMessage()\n   {\n      // Connect to the a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Set the formatter to indicate body contains an Order.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = Order::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      try\n      {\n         // Receive and format the message. \n         Message^ myMessage = myQueue-&gt;Receive();\n         Order^ myOrder = dynamic_cast&lt;Order^&gt;(myMessage-&gt;Body);\n\n         // Display message information.\n         Console::WriteLine( &quot;Order ID: {0}&quot;, myOrder-&gt;orderId );\n         Console::WriteLine( &quot;Sent: {0}&quot;, myOrder-&gt;orderTime );\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      // Catch other exceptions as necessary.\n      return;\n   }\n};\n\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Create a queue on the local computer.\n   MyNewQueue::CreateQueue( &quot;.\\\\myQueue&quot; );\n\n   // Send a message to a queue.\n   myNewQueue-&gt;SendMessage();\n\n   // Receive a message from a queue.\n   myNewQueue-&gt;ReceiveMessage();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Message.Body#1\">using System;\nusing System.Messaging;\nusing System.Drawing;\nusing System.IO;\n\nnamespace MyProject\n{\n\n\t// The following example \n\t// sends to a queue and receives from a queue.\n\tpublic class Order\n\t{\n\t\tpublic int orderId;\n\t\tpublic DateTime orderTime;\n\t};\t\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example sends and receives a message from\n\t\t// a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Create a queue on the local computer.\n\t\t\tCreateQueue(&quot;.\\\\myQueue&quot;);\n\t\t\t\n\t\t\t// Send a message to a queue.\n\t\t\tmyNewQueue.SendMessage();\n\n\t\t\t// Receive a message from a queue.\n\t\t\tmyNewQueue.ReceiveMessage();\n\n\t\t\treturn;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Creates a new queue.\n\t\t//**************************************************\n\n\t\tpublic static void CreateQueue(string queuePath)\n\t\t{\n\t\t\ttry\t\n\t\t\t{\n\t\t\t\tif(!MessageQueue.Exists(queuePath))\n\t\t\t\t{\n\t\t\t\t\tMessageQueue.Create(queuePath);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(queuePath + &quot; already exists.&quot;);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (MessageQueueException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\t//**************************************************\n\t\t// Sends an Order to a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\t// Create a new order and set values.\n\t\t\t\tOrder sentOrder = new Order();\n\t\t\t\tsentOrder.orderId = 3;\n\t\t\t\tsentOrder.orderTime = DateTime.Now;\n\n\t\t\t\t// Connect to a queue on the local computer.\n\t\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\n\t\t\t\t\n\t\t\t\t// Create the new order.\n\t\t\t\tMessage myMessage = new Message(sentOrder);\n\n\t\t\t\t// Send the order to the queue.\n\t\t\t\tmyQueue.Send(myMessage);\n\t\t\t}\n\t\t\tcatch(ArgumentException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message containing an order.\n\t\t//**************************************************\n\t\t\n\t\tpublic  void ReceiveMessage()\n\t\t{\n\t\t\t// Connect to the a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(MyProject.Order)});\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Receive and format the message. \n\t\t\t\tMessage myMessage =\tmyQueue.Receive(); \n\t\t\t\tOrder myOrder = (Order)myMessage.Body;\n\n\t\t\t\t// Display message information.\n\t\t\t\tConsole.WriteLine(&quot;Order ID: &quot; + \n\t\t\t\t\tmyOrder.orderId.ToString());\n\t\t\t\tConsole.WriteLine(&quot;Sent: &quot; + \n\t\t\t\t\tmyOrder.orderTime.ToString());\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Message.Body#1\">Imports System\nImports System.Messaging\nImports System.Drawing\nImports System.IO\n\n\n\n   \n&#39; The following example \n&#39; sends to a queue and receives from a queue.\nPublic Class Order\n      Public orderId As Integer\n      Public orderTime As DateTime\nEnd Class &#39;Order\n\n   \n  \n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n      \n      \n\n   &#39; Provides an entry point into the application.\n   &#39;\t\t \n   &#39; This example sends and receives a message from\n   &#39; a queue.\n\n   Public Shared Sub Main()\n      &#39; Create a new instance of the class.\n      Dim myNewQueue As New MyNewQueue()\n        \n      &#39; Create a queue on the local computer.\n      CreateQueue(&quot;.\\myQueue&quot;)\n         \n      &#39; Send a message to a queue.\n      myNewQueue.SendMessage()\n       \n      &#39; Receive a message from a queue.\n      myNewQueue.ReceiveMessage()\n         \n      Return\n   End Sub &#39;Main\n      \n      \n\n      &#39; Creates a new queue.\n   Public Shared Sub CreateQueue(queuePath As String)\n      Try\n         If Not MessageQueue.Exists(queuePath) Then\n            MessageQueue.Create(queuePath)\n         Else\n            Console.WriteLine((queuePath + &quot; already exists.&quot;))\n         End If\n      Catch e As MessageQueueException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub &#39;CreateQueue\n       \n      \n\n      &#39; Sends an Order to a queue.\n\n   Public Sub SendMessage()\n      Try\n            \n            &#39; Create a new order and set values.\n            Dim sentOrder As New Order()\n            sentOrder.orderId = 3\n            sentOrder.orderTime = DateTime.Now\n            \n            &#39; Connect to a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            \n            \n            \n            &#39; Create the new order.\n            Dim myMessage As New Message(sentOrder)\n            \n            &#39; Send the order to the queue.\n            myQueue.Send(myMessage)\n      Catch e As ArgumentException\n            Console.WriteLine(e.Message)\n      End Try \n         \n      Return\n   End Sub &#39;SendMessage\n      \n      \n      \n \n      &#39; Receives a message containing an order.\n \n   Public Sub ReceiveMessage()\n         &#39; Connect to the a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         &#39; Set the formatter to indicate body contains an Order.\n         myQueue.Formatter = New XmlMessageFormatter(New Type() {GetType(Order)})\n         \n         Try\n            &#39; Receive and format the message. \n            Dim myMessage As Message = myQueue.Receive()\n            Dim myOrder As Order = CType(myMessage.Body, Order)\n            \n            &#39; Display message information.\n            Console.WriteLine((&quot;Order ID: &quot; + myOrder.orderId.ToString()))\n            Console.WriteLine((&quot;Sent: &quot; + myOrder.orderTime.ToString()))\n         \n  \n         &#39; Handle invalid serialization format.\n         Catch e As InvalidOperationException\n            Console.WriteLine(e.Message)\n         End Try\n         \n         &#39; Catch other exceptions as necessary.\n         Return\n   End Sub &#39;ReceiveMessage\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Id\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Id_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Id</div>        \r\n          </div>\r\n    \r\n            <p>Gets the unique Message Queuing identifier of the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Guid Id { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>A Id that represents the message identifier generated by the Message Queuing application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Message Queuing sets the Id property when it creates the queue. This property is only available for public queues.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of a message queue&#39;s Id property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#15\">        // Display the value of the queue&#39;s Id property.\n        Console.WriteLine(&quot;MessageQueue.Id: {0}&quot;, queue.Id);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Label\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Label_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Label</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the queue description.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Label { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The label for the message queue. The default is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The label was set to an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The maximum length of a message queue label is 124 characters.  </p>\n<p> The Label property does not need to be unique across all queues. However, if multiple queues share the same Label, you cannot use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Send_System_Object_\" data-linktype=\"relative-path\">Send(Object)</a> method to broadcast a message to all of them. If you use the label syntax for the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property when you send the message, an exception will be thrown if the Label is not unique.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the value of a message queue&#39;s Label property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#18\">        // Set the queue&#39;s Label property value.\n        queue.Label = &quot;Example Queue&quot;;\n\n        // Display the new value of the queue&#39;s Label property.\n        Console.WriteLine(&quot;MessageQueue.Label: {0}&quot;,\n            queue.Label);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_LastModifyTime\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_LastModifyTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastModifyTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the last time the properties of a queue were modified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public DateTime LastModifyTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that indicates when the queue properties were last modified.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The last modification time includes when the queue was created and any <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> property that modifies the Message Queuing queue, such as <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BasePriority_\" data-linktype=\"relative-path\">BasePriority</a>. The value of the LastModifyTime property represents the system time of the local computer.  </p>\n<p> You must call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Refresh_\" data-linktype=\"relative-path\">Refresh</a> before getting the LastModifyTime property; otherwise, the modification time associated with this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> might not be current.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of a message queue&#39;s LastModifyTime property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#19\">        // Display the value of the queue&#39;s LastModifyTime property.\n        Console.WriteLine(&quot;MessageQueue.LastModifyTime: {0}&quot;, queue.LastModifyTime);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_MachineName\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_MachineName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MachineName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the computer where the Message Queuing queue is located.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string MachineName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the computer where the queue is located. The Message Queuing default is &quot;.&quot;, the local computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The name of the computer is not valid, possibly because the syntax is incorrect.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MachineName is an integral component of the friendly name syntax of the queue <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a>. The following table shows the syntax you should use for a queue of a specified type when you want to identify the queue path using its friendly name.  </p>\n<table>\n<thead>\n<tr>\n<th>Queue type</th>\n<th>Syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Public queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Private queue</td>\n<td><code>MachineName</code>\\<code>Private$</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Journal queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code>\\<code>Journal$</code></td>\n</tr>\n<tr>\n<td>Machine journal queue</td>\n<td><code>MachineName</code>\\<code>Journal$</code></td>\n</tr>\n<tr>\n<td>Machine dead-letter queue</td>\n<td><code>MachineName</code>\\<code>Deadletter$</code></td>\n</tr>\n<tr>\n<td>Machine transactional dead-letter queue</td>\n<td><code>MachineName</code>\\<code>XactDeadletter$</code></td>\n</tr>\n</tbody>\n</table>\n<p> Use &quot;.&quot; for the local computer when specifying the MachineName. Only the computer name is recognized for this property, for example, <code>Server0</code>. The MachineName property does not support the IP address format.  </p>\n<p> If you define the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> in terms of the MachineName, the application throws an exception when working offline because the domain controller is required for path translation. Therefore, you must use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_FormatName_\" data-linktype=\"relative-path\">FormatName</a> for the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> syntax when working offline.  </p>\n<p> The MachineName, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a>, and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_QueueName_\" data-linktype=\"relative-path\">QueueName</a> properties are related. Changing the MachineName property causes the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property to change. It is built from the new MachineName and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_QueueName_\" data-linktype=\"relative-path\">QueueName</a>. Changing the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> (for example, to use the format name syntax) resets the MachineName and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_QueueName_\" data-linktype=\"relative-path\">QueueName</a> properties to refer to the new queue. If the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_QueueName_\" data-linktype=\"relative-path\">QueueName</a> property is empty, the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> is set to the Journal queue of the computer you specify.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the value of a message queue&#39;s MachineName property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#20\">        // Set the queue&#39;s MachineName property value to the name of the local\n        // computer.\n        queue.MachineName = &quot;.&quot;;\n\n        // Display the new value of the queue&#39;s MachineName property.\n        Console.WriteLine(&quot;MessageQueue.MachineName: {0}&quot;, queue.MachineName);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_MaximumJournalSize\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_MaximumJournalSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaximumJournalSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the maximum size of the journal queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long MaximumJournalSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The maximum size, in kilobytes, of the journal queue. The Message Queuing default specifies that no limit exists.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The maximum journal queue size was set to an invalid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>MaximumJournalSize provides access to the Message Queuing journal storage limit. It is relevant only when <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_UseJournalQueue_\" data-linktype=\"relative-path\">UseJournalQueue</a> is <code>true</code>. Setting this property modifies the Message Queuing queue. Therefore, any other <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instances are affected by the change  </p>\n<p> If you store messages in a journal or dead-letter queue, you should periodically clear the queue to remove messages that are no longer needed. Messages in such a queue count toward the message quota for the computer where the queue resides. (The administrator sets the computer quota.)  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the value of a message queue&#39;s MaximumJournalSize property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#21\">        // Set the queue&#39;s MaximumJournalSize property value.\n        queue.MaximumJournalSize = 10;\n\n        // Display the new value of the queue&#39;s MaximumJournalSize property.\n        Console.WriteLine(&quot;MessageQueue.MaximumJournalSize: {0}&quot;,\n            queue.MaximumJournalSize);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_MaximumQueueSize\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_MaximumQueueSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaximumQueueSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the maximum size of the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long MaximumQueueSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The maximum size, in kilobytes, of the queue. The Message Queuing default specifies that no limit exists.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The maximum queue size contains a negative value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MaximumQueueSize provides access to the Message Queuing message storage limit, which is separate from the computer&#39;s message quota that the administrator defines. For more information about the message quota, see <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MaximumJournalSize_\" data-linktype=\"relative-path\">MaximumJournalSize</a>.  </p>\n<p> Setting this property modifies the Message Queuing queue. Therefore, any other <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instances are affected by the change  </p>\n<p> If an attempt is made to exceed either the maximum queue size or the computer message quota, messages might be lost. When the queue quota is reached, Message Queuing notifies the administration queue of the sending application to indicate that the queue is full, by returning a negative acknowledgment message. Message Queuing continues to send negative acknowledgments until the total size of the messages in the queue drops below the limit.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the value of a message queue&#39;s MaximumQueueSize property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#22\">        // Set the queue&#39;s MaximumQueueSize property value.\n        queue.MaximumQueueSize = 10;\n\n        // Display the new value of the queue&#39;s MaximumQueueSize property.\n        Console.WriteLine(&quot;MessageQueue.MaximumQueueSize: {0}&quot;,\n            queue.MaximumQueueSize);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_MessageReadPropertyFilter\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_MessageReadPropertyFilter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MessageReadPropertyFilter</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the property filter for receiving or peeking messages.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.MessagePropertyFilter MessageReadPropertyFilter { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a> used by the queue to filter the set of properties it receives or peeks for each message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The filter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This filter is a set of Boolean values restricting the message properties that the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> receives or peeks. When the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> receives or peeks a message from the server queue, it retrieves only those properties for which the MessageReadPropertyFilter value is <code>true</code>.  </p>\n<p> The following shows initial property values for the MessageReadPropertyFilter property. These settings are identical to calling <a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_SetDefaults_\" data-linktype=\"relative-path\">SetDefaults</a> on a <a class=\"xref\" href=\"system.messaging.messagepropertyfilter\" data-linktype=\"relative-path\">MessagePropertyFilter</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_Acknowledgment_\" data-linktype=\"relative-path\">Acknowledgment</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_AcknowledgeType_\" data-linktype=\"relative-path\">AcknowledgeType</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_AdministrationQueue_\" data-linktype=\"relative-path\">AdministrationQueue</a></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_AppSpecific_\" data-linktype=\"relative-path\">AppSpecific</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_ArrivedTime_\" data-linktype=\"relative-path\">ArrivedTime</a></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_AttachSenderId_\" data-linktype=\"relative-path\">AttachSenderId</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_Authenticated_\" data-linktype=\"relative-path\">Authenticated</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_AuthenticationProviderName_\" data-linktype=\"relative-path\">AuthenticationProviderName</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_AuthenticationProviderType_\" data-linktype=\"relative-path\">AuthenticationProviderType</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_Body_\" data-linktype=\"relative-path\">Body</a></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_ConnectorType_\" data-linktype=\"relative-path\">ConnectorType</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultBodySize_\" data-linktype=\"relative-path\">DefaultBodySize</a></td>\n<td>1024 bytes</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultExtensionSize_\" data-linktype=\"relative-path\">DefaultExtensionSize</a></td>\n<td>255 bytes</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DefaultLabelSize_\" data-linktype=\"relative-path\">DefaultLabelSize</a></td>\n<td>255 bytes</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DestinationQueue_\" data-linktype=\"relative-path\">DestinationQueue</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DestinationSymmetricKey_\" data-linktype=\"relative-path\">DestinationSymmetricKey</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_DigitalSignature_\" data-linktype=\"relative-path\">DigitalSignature</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_EncryptionAlgorithm_\" data-linktype=\"relative-path\">EncryptionAlgorithm</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_Extension_\" data-linktype=\"relative-path\">Extension</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_HashAlgorithm_\" data-linktype=\"relative-path\">HashAlgorithm</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_Id_\" data-linktype=\"relative-path\">Id</a></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_IsFirstInTransaction_\" data-linktype=\"relative-path\">IsFirstInTransaction</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_IsLastInTransaction_\" data-linktype=\"relative-path\">IsLastInTransaction</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_Label_\" data-linktype=\"relative-path\">Label</a></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_MessageType_\" data-linktype=\"relative-path\">MessageType</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_Priority_\" data-linktype=\"relative-path\">Priority</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_Recoverable_\" data-linktype=\"relative-path\">Recoverable</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_ResponseQueue_\" data-linktype=\"relative-path\">ResponseQueue</a></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_SenderCertificate_\" data-linktype=\"relative-path\">SenderCertificate</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_SenderId_\" data-linktype=\"relative-path\">SenderId</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_SenderVersion_\" data-linktype=\"relative-path\">SenderVersion</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_SentTime_\" data-linktype=\"relative-path\">SentTime</a></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_SourceMachine_\" data-linktype=\"relative-path\">SourceMachine</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_TimeToBeReceived_\" data-linktype=\"relative-path\">TimeToBeReceived</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_TimeToReachQueue_\" data-linktype=\"relative-path\">TimeToReachQueue</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_TransactionId_\" data-linktype=\"relative-path\">TransactionId</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_TransactionStatusQueue_\" data-linktype=\"relative-path\">TransactionStatusQueue</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_UseAuthentication_\" data-linktype=\"relative-path\">UseAuthentication</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_UseDeadLetterQueue_\" data-linktype=\"relative-path\">UseDeadLetterQueue</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_UseEncryption_\" data-linktype=\"relative-path\">UseEncryption</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_UseJournalQueue_\" data-linktype=\"relative-path\">UseJournalQueue</a></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.messaging.messagepropertyfilter#System_Messaging_MessagePropertyFilter_UseTracing_\" data-linktype=\"relative-path\">UseTracing</a></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the MessageReadPropertyFilter to restrict the message properties received.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.MessageReadPropertyFilter#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example retrieves specific groups of Message\n\t\t// properties.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Retrieve specific sets of Message properties.\n\t\t\tmyNewQueue.RetrieveDefaultProperties();\n\t\t\tmyNewQueue.RetrieveAllProperties();\n\t\t\tmyNewQueue.RetrieveSelectedProperties();\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Retrieves the default properties for a Message.\n\t\t//**************************************************\n\t\t\n\t\tpublic void RetrieveDefaultProperties()\n\t\t{\n\n\t\t\t// Connect to a message queue.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Specify to retrieve the default properties only.\n\t\t\tmyQueue.MessageReadPropertyFilter.SetDefaults();\n\n\t\t\t// Set the formatter for the Message.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Receive the first message in the queue.\n\t\t\tMessage myMessage = myQueue.Receive();\n\n\t\t\t// Display selected properties.\n\t\t\tConsole.WriteLine(&quot;Label: &quot; + myMessage.Label);\n\t\t\tConsole.WriteLine(&quot;Body: &quot; + (String)myMessage.Body);\n\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Retrieves all properties for a Message.\n\t\t//**************************************************\n\t\t\n\t\tpublic void RetrieveAllProperties()\n\t\t{\n\n\t\t\t// Connect to a message queue.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Specify to retrieve all properties.\n\t\t\tmyQueue.MessageReadPropertyFilter.SetAll();\n\n\t\t\t// Set the formatter for the Message.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Receive the first message in the queue.\n\t\t\tMessage myMessage = myQueue.Receive();\n\n\t\t\t// Display selected properties.\n\t\t\tConsole.WriteLine(&quot;Encryption algorithm: &quot; + \n\t\t\t\tmyMessage.EncryptionAlgorithm.ToString());\n\t\t\tConsole.WriteLine(&quot;Body: &quot; + (String)myMessage.Body);\n\t\n\t\t\treturn;\n\t\t}\n\t\t\t\n\n\t\t//**************************************************\n\t\t// Retrieves application-specific properties for a\n\t\t// Message.\n\t\t//**************************************************\n\t\t\n\t\tpublic void RetrieveSelectedProperties()\n\t\t{\n\t\t\t// Connect to a message queue.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Specify to retrieve selected properties.\n\t\t\tMessagePropertyFilter myFilter = new \n\t\t\t\tMessagePropertyFilter();\n\t\t\tmyFilter.ClearAll();\n\t\t\t// The following list is a random subset of available properties.\n\t\t\tmyFilter.Body = true;\n\t\t\tmyFilter.Label = true;\n\t\t\tmyFilter.MessageType = true;\n\t\t\tmyFilter.Priority = true;\n\t\t\tmyQueue.MessageReadPropertyFilter = myFilter;\n\n\t\t\t// Set the formatter for the Message.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Receive the first message in the queue.\n\t\t\tMessage myMessage = myQueue.Receive();\n\n\t\t\t// Display selected properties.\n\t\t\tConsole.WriteLine(&quot;Message type: &quot; + \n\t\t\t\tmyMessage.MessageType.ToString());\n\t\t\tConsole.WriteLine(&quot;Priority: &quot; + \n\t\t\t\tmyMessage.Priority.ToString());\n\t\n\t\t\treturn;\n\t\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.MessageReadPropertyFilter#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example retrieves specific groups of Message\n        &#39; properties.\n        \n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Retrieve specific sets of Message properties.\n            myNewQueue.RetrieveDefaultProperties()\n            myNewQueue.RetrieveAllProperties()\n            myNewQueue.RetrieveSelectedProperties()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        \n        &#39; Retrieves the default properties for a Message.\n        \n\n        Public Sub RetrieveDefaultProperties()\n\n            &#39; Connect to a message queue.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Specify to retrieve the default properties only.\n            myQueue.MessageReadPropertyFilter.SetDefaults()\n\n            &#39; Set the formatter for the Message.\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Receive the first message in the queue.\n            Dim myMessage As Message = myQueue.Receive()\n\n            &#39; Display selected properties.\n            Console.WriteLine((&quot;Label: &quot; + myMessage.Label))\n            Console.WriteLine((&quot;Body: &quot; + CType(myMessage.Body, _\n                [String])))\n\n            Return\n\n        End Sub &#39;RetrieveDefaultProperties\n\n\n        \n        &#39; Retrieves all properties for a Message.\n        \n\n        Public Sub RetrieveAllProperties()\n\n            &#39; Connect to a message queue.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Specify to retrieve all properties.\n            myQueue.MessageReadPropertyFilter.SetAll()\n\n            &#39; Set the formatter for the Message.\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Receive the first message in the queue.\n            Dim myMessage As Message = myQueue.Receive()\n\n            &#39; Display selected properties.\n            Console.WriteLine((&quot;Encryption algorithm: &quot; + _\n                myMessage.EncryptionAlgorithm.ToString()))\n            Console.WriteLine((&quot;Body: &quot; + CType(myMessage.Body, _\n                [String])))\n\n            Return\n\n        End Sub &#39;RetrieveAllProperties\n\n\n        \n        &#39; Retrieves application-specific properties for a\n        &#39; Message.\n        \n\n        Public Sub RetrieveSelectedProperties()\n\n            &#39; Connect to a message queue.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Specify to retrieve selected properties.\n            Dim myFilter As New MessagePropertyFilter()\n            myFilter.ClearAll()\n            &#39; The following list is a random subset of properties.\n            myFilter.Body = True\n            myFilter.Label = True\n            myFilter.MessageType = True\n            myFilter.Priority = True\n            myQueue.MessageReadPropertyFilter = myFilter\n\n            &#39; Set the formatter for the Message.\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Receive the first message in the queue.\n            Dim myMessage As Message = myQueue.Receive()\n\n            &#39; Display selected properties.\n            Console.WriteLine((&quot;Message type: &quot; + _\n                myMessage.MessageType.ToString()))\n            Console.WriteLine((&quot;Priority: &quot; + _\n                myMessage.Priority.ToString()))\n\n            Return\n\n        End Sub &#39;RetrieveSelectedProperties\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.MessageReadPropertyFilter#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n\n   //*************************************************\n   // Retrieves the default properties for a Message.\n   //*************************************************\n   void RetrieveDefaultProperties()\n   {\n      // Connect to a message queue.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Specify to retrieve the default properties only.\n      myQueue-&gt;MessageReadPropertyFilter-&gt;SetDefaults();\n\n      // Set the formatter for the Message.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n      // Receive the first message in the queue.\n      Message^ myMessage = myQueue-&gt;Receive();\n\n      // Display selected properties.\n      Console::WriteLine( &quot;Label: {0}&quot;, myMessage-&gt;Label );\n      Console::WriteLine( &quot;Body: {0}&quot;, static_cast&lt;String^&gt;(myMessage-&gt;Body) );\n      return;\n   }\n\n\n   //*************************************************\n   // Retrieves all properties for a Message.\n   //*************************************************\n   void RetrieveAllProperties()\n   {\n      // Connect to a message queue.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Specify to retrieve all properties.\n      myQueue-&gt;MessageReadPropertyFilter-&gt;SetAll();\n\n      // Set the formatter for the Message.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n      // Receive the first message in the queue.\n      Message^ myMessage = myQueue-&gt;Receive();\n\n      // Display selected properties.\n      Console::WriteLine( &quot;Encryption algorithm: {0}&quot;, myMessage-&gt;EncryptionAlgorithm.ToString() );\n      Console::WriteLine( &quot;Body: {0}&quot;, myMessage-&gt;Body );\n      return;\n   }\n\n   //*************************************************\n   // Retrieves application-specific properties for a\n   // Message.\n   //*************************************************\n   void RetrieveSelectedProperties()\n   {\n      // Connect to a message queue.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Specify to retrieve selected properties.\n      MessagePropertyFilter^ myFilter = gcnew MessagePropertyFilter;\n      myFilter-&gt;ClearAll();\n\n      // The following list is a random subset of available properties.\n      myFilter-&gt;Body = true;\n      myFilter-&gt;Label = true;\n      myFilter-&gt;MessageType = true;\n      myFilter-&gt;Priority = true;\n      myQueue-&gt;MessageReadPropertyFilter = myFilter;\n\n      // Set the formatter for the Message.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n      // Receive the first message in the queue.\n      Message^ myMessage = myQueue-&gt;Receive();\n\n      // Display selected properties.\n      Console::WriteLine( &quot;Message type: {0}&quot;, myMessage-&gt;MessageType.ToString() );\n      Console::WriteLine( &quot;Priority: {0}&quot;, myMessage-&gt;Priority.ToString() );\n      return;\n   }\n};\n\n\n//*************************************************\n// Provides an entry point into the application.\n//         \n// This example retrieves specific groups of Message\n// properties.\n//*************************************************\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Retrieve specific sets of Message properties.\n   myNewQueue-&gt;RetrieveDefaultProperties();\n   myNewQueue-&gt;RetrieveAllProperties();\n   myNewQueue-&gt;RetrieveSelectedProperties();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_MulticastAddress\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_MulticastAddress_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MulticastAddress</div>        \r\n          </div>\r\n    \r\n            <p>Introduced in MSMQ 3.0. Gets or sets the multicast address associated with the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string MulticastAddress { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains a valid multicast address (in the form shown below) or <code>null</code>, which indicates that the queue is not associated with a multicast address.  </p>\n<pre><code>&lt;address&gt;:&lt;port&gt;\n</code></pre>\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>MSMQ 3.0 is not installed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The MulticastAddress property is used to associate a non-transactional queue with a multicast address that can be used when sending messages. You cannot associate a transactional queue with a multicast address. When the sending application sends messages to a multicast address, Message Queuing sends a copy of the message to every queue associated with that address.  </p>\n<p> IP multicast addresses must be in the class D range from 224.0.0.0 to 239.255.255.255, which corresponds to setting the first four high-order bits equal to 1110. However, only certain ranges of addresses in this range are unreserved and available for sending multicast messages. For the latest list of reserved multicast addresses, see the <a href=\"http://go.microsoft.com/fwlink/?linkid=3859\" data-linktype=\"external\">Internet Assigned Number Authority (IANA) Internet Multicast Addresses</a> Web page. There are no restrictions on the port number.  </p>\n<p> If several source computers are sending multicast messages and you want a specific queue to receive messages from only one source computer, each source computer must send messages to a different combination of IP address and port number.  </p>\n<p> To dissociate a queue from a multicast address, set the MulticastAddress property to a zero-length string. Do not set it to <code>null</code>, as this will result in a <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a>.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Path\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Path_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Path</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the queue&#39;s path. Setting the Path causes the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> to point to a new queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Path { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The queue that is referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. The default depends on which <span class=\"xref\">stem.Messaging.MessageQueue.#ctor*</span> constructor you use; it is either <code>null</code> or is specified by the constructor&#39;s <code>path</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The path is not valid, possibly because the syntax is not valid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The syntax for the Path property depends on the type of queue it points to, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Queue type</th>\n<th>Syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Public queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Private queue</td>\n<td><code>MachineName</code>\\<code>Private$</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Journal queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code>\\<code>Journal$</code></td>\n</tr>\n<tr>\n<td>Machine journal queue</td>\n<td><code>MachineName</code>\\<code>Journal$</code></td>\n</tr>\n<tr>\n<td>Machine dead-letter queue</td>\n<td><code>MachineName</code>\\<code>Deadletter$</code></td>\n</tr>\n<tr>\n<td>Machine transactional dead-letter queue</td>\n<td><code>MachineName</code>\\<code>XactDeadletter$</code></td>\n</tr>\n</tbody>\n</table>\n<p> Use &quot;.&quot; to represent the local computer.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a>, Path, and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_QueueName_\" data-linktype=\"relative-path\">QueueName</a> properties are related. Changing the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a> property causes the Path property to change. It is built from the new <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a> and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_QueueName_\" data-linktype=\"relative-path\">QueueName</a>. Changing the Path (for example, to use the format name syntax) resets the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a> and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_QueueName_\" data-linktype=\"relative-path\">QueueName</a> properties to refer to the new queue.  </p>\n<p> Alternatively, you can use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_FormatName_\" data-linktype=\"relative-path\">FormatName</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a> to describe the queue path, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Syntax</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Format name</td>\n<td><code>FormatName:</code> [ <em>format name</em> ]</td>\n<td><code>FormatName:Public=</code> 5A5F7535-AE9A-41d4-935C-845C2AFF7112</td>\n</tr>\n<tr>\n<td>Label</td>\n<td><code>Label:</code> [ <em>label</em> ]</td>\n<td><code>Label:</code> TheLabel</td>\n</tr>\n</tbody>\n</table>\n<p> If you use the label syntax for the Path property when you send the message, an exception will be thrown if the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a> is not unique.  </p>\n<p> To work offline, you must use the format name syntax, rather than the friendly name syntax in the first table. Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.  </p>\n<p> Setting a new path closes the message queue and releases all handles.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> In workgroup mode you can only use private queues. You specify the path using the private queue syntax <code>MachineName</code>\\<code>Private$</code>\\<code>QueueName</code>.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates new <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> objects using various path name syntax types. In each case, it sends a message to the queue whose path is defined in the constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.Path#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example demonstrates several ways to set\n\t\t// a queue&#39;s path.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\tmyNewQueue.SendPublic();\n\t\t\tmyNewQueue.SendPrivate();\n\t\t\tmyNewQueue.SendByLabel();\n\t\t\tmyNewQueue.SendByFormatName();\n\t\t\tmyNewQueue.MonitorComputerJournal();\n\t\t\tmyNewQueue.MonitorQueueJournal();\n\t\t\tmyNewQueue.MonitorDeadLetter();\n\t\t\tmyNewQueue.MonitorTransactionalDeadLetter();\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// References public queues.\n\t\tpublic void SendPublic()\n\t\t{\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Send(&quot;Public queue by path name.&quot;);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// References private queues.\n\t\tpublic void SendPrivate()\n\t\t{\n\t\t\tMessageQueue myQueue = new \n\t\t\t\tMessageQueue(&quot;.\\\\Private$\\\\myQueue&quot;);\n\t\t\tmyQueue.Send(&quot;Private queue by path name.&quot;);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// References queues by label.\n\t\tpublic void SendByLabel()\n\t\t{\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;Label:TheLabel&quot;);\n\t\t\tmyQueue.Send(&quot;Queue by label.&quot;);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// References queues by format name.\n\t\tpublic void SendByFormatName()\n\t\t{\n\t\t\tMessageQueue myQueue = new \n\t\t\t\tMessageQueue(&quot;FormatName:Public=5A5F7535-AE9A-41d4&quot; + \n\t\t\t\t&quot;-935C-845C2AFF7112&quot;);\n\t\t\tmyQueue.Send(&quot;Queue by format name.&quot;);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// References computer journal queues.\n\t\tpublic void MonitorComputerJournal()\n\t\t{\n\t\t\tMessageQueue computerJournal = new \n\t\t\t\tMessageQueue(&quot;.\\\\Journal$&quot;);\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tMessage journalMessage = computerJournal.Receive();\n\t\t\t\t// Process the journal message.\n\t\t\t}\n\t\t}\n\n\t\t// References queue journal queues.\n\t\tpublic void MonitorQueueJournal()\n\t\t{\n\t\t\tMessageQueue queueJournal = new \n\t\t\t\tMessageQueue(&quot;.\\\\myQueue\\\\Journal$&quot;);\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tMessage journalMessage = queueJournal.Receive();\n\t\t\t\t// Process the journal message.\n\t\t\t}\n\t\t}\n\t\t\n\t\t// References dead-letter queues.\n\t\tpublic void MonitorDeadLetter()\n\t\t{\n\t\t\tMessageQueue deadLetter = new \n\t\t\t\tMessageQueue(&quot;.\\\\DeadLetter$&quot;);\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tMessage deadMessage = deadLetter.Receive();\n\t\t\t\t// Process the dead-letter message.\n\t\t\t}\n\t\t}\n\n\t\t// References transactional dead-letter queues.\n\t\tpublic void MonitorTransactionalDeadLetter()\n\t\t{\n\t\t\tMessageQueue TxDeadLetter = new \n\t\t\t\tMessageQueue(&quot;.\\\\XactDeadLetter$&quot;);\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tMessage txDeadLetter = TxDeadLetter.Receive();\n\t\t\t\t// Process the transactional dead-letter message.\n\t\t\t}\n\t\t}\n\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.Path#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example demonstrates several ways to set\n        &#39; a queue&#39;s path.\n        \n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            myNewQueue.SendPublic()\n            myNewQueue.SendPrivate()\n            myNewQueue.SendByLabel()\n            myNewQueue.SendByFormatName()\n            myNewQueue.MonitorComputerJournal()\n            myNewQueue.MonitorQueueJournal()\n            myNewQueue.MonitorDeadLetter()\n            myNewQueue.MonitorTransactionalDeadLetter()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        &#39; References public queues.\n        Public Sub SendPublic()\n\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Send(&quot;Public queue by path name.&quot;)\n\n            Return\n\n        End Sub &#39;SendPublic\n\n\n        &#39; References private queues.\n        Public Sub SendPrivate()\n\n            Dim myQueue As New MessageQueue(&quot;.\\Private$\\myQueue&quot;)\n            myQueue.Send(&quot;Private queue by path name.&quot;)\n\n            Return\n\n        End Sub &#39;SendPrivate\n\n\n        &#39; References queues by label.\n        Public Sub SendByLabel()\n\n            Dim myQueue As New MessageQueue(&quot;Label:TheLabel&quot;)\n            myQueue.Send(&quot;Queue by label.&quot;)\n\n            Return\n\n        End Sub &#39;SendByLabel\n\n\n        &#39; References queues by format name.\n        Public Sub SendByFormatName()\n\n            Dim myQueue As New _\n                MessageQueue(&quot;FormatName:Public=&quot; + _\n                    &quot;5A5F7535-AE9A-41d4-935C-845C2AFF7112&quot;)\n            myQueue.Send(&quot;Queue by format name.&quot;)\n\n            Return\n\n        End Sub &#39;SendByFormatName\n\n\n        &#39; References computer journal queues.\n        Public Sub MonitorComputerJournal()\n\n            Dim computerJournal As New MessageQueue(&quot;.\\Journal$&quot;)\n\n            While True\n\n                Dim journalMessage As Message = _\n                    computerJournal.Receive()\n\n                &#39; Process the journal message.\n\n            End While\n\n            Return\n        End Sub &#39;MonitorComputerJournal\n\n\n        &#39; References queue journal queues.\n        Public Sub MonitorQueueJournal()\n\n            Dim queueJournal As New _\n                            MessageQueue(&quot;.\\myQueue\\Journal$&quot;)\n\n            While True\n\n                Dim journalMessage As Message = _\n                    queueJournal.Receive()\n\n                &#39; Process the journal message.\n\n            End While\n\n            Return\n        End Sub &#39;MonitorQueueJournal\n\n\n        &#39; References dead-letter queues.\n        Public Sub MonitorDeadLetter()\n            Dim deadLetter As New MessageQueue(&quot;.\\DeadLetter$&quot;)\n\n            While True\n\n                Dim deadMessage As Message = deadLetter.Receive()\n\n                &#39; Process the dead-letter message.\n\n            End While\n\n            Return\n\n        End Sub &#39;MonitorDeadLetter\n\n\n        &#39; References transactional dead-letter queues.\n        Public Sub MonitorTransactionalDeadLetter()\n\n            Dim TxDeadLetter As New MessageQueue(&quot;.\\XactDeadLetter$&quot;)\n\n            While True\n\n                Dim txDeadLetterMessage As Message = _\n                    TxDeadLetter.Receive()\n\n                &#39; Process the transactional dead-letter message.\n\n            End While\n\n            Return\n\n        End Sub &#39;MonitorTransactionalDeadLetter\n\nEnd Class &#39;MyNewQueue \n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.Path#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n\n   // References public queues.\n   void SendPublic()\n   {\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n      myQueue-&gt;Send( &quot;Public queue by path name.&quot; );\n      return;\n   }\n\n\n   // References private queues.\n   void SendPrivate()\n   {\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\Private$\\\\myQueue&quot; );\n      myQueue-&gt;Send( &quot;Private queue by path name.&quot; );\n      return;\n   }\n\n\n   // References queues by label.\n   void SendByLabel()\n   {\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;Label:TheLabel&quot; );\n      myQueue-&gt;Send( &quot;Queue by label.&quot; );\n      return;\n   }\n\n\n   // References queues by format name.\n   void SendByFormatName()\n   {\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;FormatName:Public=5A5F7535-AE9A-41d4 -935C-845C2AFF7112&quot; );\n      myQueue-&gt;Send( &quot;Queue by format name.&quot; );\n      return;\n   }\n\n\n   // References computer journal queues.\n   void MonitorComputerJournal()\n   {\n      MessageQueue^ computerJournal = gcnew MessageQueue( &quot;.\\\\Journal$&quot; );\n      while ( true )\n      {\n         Message^ journalMessage = computerJournal-&gt;Receive();\n         \n         // Process the journal message.\n      }\n   }\n\n\n   // References queue journal queues.\n   void MonitorQueueJournal()\n   {\n      MessageQueue^ queueJournal = gcnew MessageQueue( &quot;.\\\\myQueue\\\\Journal$&quot; );\n      while ( true )\n      {\n         Message^ journalMessage = queueJournal-&gt;Receive();\n         \n         // Process the journal message.\n      }\n   }\n\n\n   // References dead-letter queues.\n   void MonitorDeadLetter()\n   {\n      MessageQueue^ deadLetter = gcnew MessageQueue( &quot;.\\\\DeadLetter$&quot; );\n      while ( true )\n      {\n         Message^ deadMessage = deadLetter-&gt;Receive();\n         \n         // Process the dead-letter message.\n      }\n   }\n\n\n   // References transactional dead-letter queues.\n   void MonitorTransactionalDeadLetter()\n   {\n      MessageQueue^ TxDeadLetter = gcnew MessageQueue( &quot;.\\\\XactDeadLetter$&quot; );\n      while ( true )\n      {\n         Message^ txDeadLetter = TxDeadLetter-&gt;Receive();\n         \n         // Process the transactional dead-letter message.\n      }\n   }\n\n};\n\n\n//*************************************************\n// Provides an entry point into the application.\n//         \n// This example demonstrates several ways to set\n// a queue&#39;s path.\n//*************************************************\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   myNewQueue-&gt;SendPublic();\n   myNewQueue-&gt;SendPrivate();\n   myNewQueue-&gt;SendByLabel();\n   myNewQueue-&gt;SendByFormatName();\n   myNewQueue-&gt;MonitorComputerJournal();\n   myNewQueue-&gt;MonitorQueueJournal();\n   myNewQueue-&gt;MonitorDeadLetter();\n   myNewQueue-&gt;MonitorTransactionalDeadLetter();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_QueueName\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_QueueName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">QueueName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the friendly name that identifies the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string QueueName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name that identifies the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. The value cannot be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The queue name is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can combine the QueueName with the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a> to create a friendly <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> name for the queue. The syntax for the friendly name variation of the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property depends on the type of queue, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Queue type</th>\n<th>Syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Public queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Private queue</td>\n<td><code>MachineName</code>\\<code>Private$</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Journal queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code>\\<code>Journal$</code></td>\n</tr>\n</tbody>\n</table>\n<p> Use &quot;.&quot; to represent the local computer.  </p>\n<p> Changing the QueueName property affects the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property. If you set the QueueName without setting the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a> property, the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property becomes .\\<code>QueueName</code>. Otherwise, the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> becomes <code>MachineName</code>\\<code>QueueName</code>.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the value of a message queue&#39;s QueueName property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#24\">        // Set the queue&#39;s QueueName property value.\n        queue.QueueName = &quot;Example Queue&quot;;\n\n        // Display the new value of the queue&#39;s QueueName property.\n        Console.WriteLine(&quot;MessageQueue.QueueName: {0}&quot;, queue.QueueName);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReadHandle\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReadHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadHandle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the native handle used to read messages from the message queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr ReadHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A handle to the native queue object that you use for peeking and receiving messages from the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ReadHandle provides a native Windows handle to the message queue object that is used for peeking and receiving messages from the queue. If you change the path of the queue, the handle is closed and reopened with a new value.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_SynchronizingObject\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_SynchronizingObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SynchronizingObject</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the object that marshals the event-handler call resulting from a <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.isynchronizeinvoke\" data-linktype=\"relative-path\">ISynchronizeInvoke</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.componentmodel.isynchronizeinvoke\" data-linktype=\"relative-path\">ISynchronizeInvoke</a>, which represents the object that marshals the event-handler call resulting from a <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event. The default is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event results from a <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> request, respectively, to a specific thread. Typically, the SynchronizingObject is set when its related component is placed inside a control or a form, because those components are bound to a specific thread.  </p>\n<p> Typically, the synchronizing object marshals a method call into a single thread.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Transactional\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Transactional_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Transactional</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the queue accepts only transactions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Transactional { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the queue accepts only messages sent as part of a transaction; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Transactional messaging refers to the coupling of several related messages into a single transaction. Sending messages as part of a transaction ensures that the messages are delivered in order, delivered only once, and successfully retrieved from their destination queue.  </p>\n<p> If a queue is transactional, it accepts only messages that are sent as part of a transaction. However, a non-transactional message can be sent or received from a local transaction queue without explicitly using transactional <a class=\"xref\" href=\"system.messaging.messagequeuetransaction#System_Messaging_MessageQueueTransaction_Begin_\" data-linktype=\"relative-path\">Begin</a>, <a class=\"xref\" href=\"system.messaging.messagequeuetransaction#System_Messaging_MessageQueueTransaction_Commit_\" data-linktype=\"relative-path\">Commit</a>, and <a class=\"xref\" href=\"system.messaging.messagequeuetransaction#System_Messaging_MessageQueueTransaction_Abort_\" data-linktype=\"relative-path\">Abort</a> syntax. If a non-transactional message is sent to a transactional queue, this component creates a single-message transaction for it, except in the case of referencing a queue on a remote computer using a direct format name. In this situation, if you do not specify a transaction context when sending a message, one is not created for you and the message will be sent to the dead-letter queue.  </p>\n<p> If you send a non-transactional message to a transactional queue, you will not be able to roll back the message in the event of an exception.  </p>\n<p> [Visual Basic]  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> is threading apartment aware, so if your apartment state is <code>STA</code>, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to <code>STA</code>, so you must apply the <a class=\"xref\" href=\"system.mtathreadattribute\" data-linktype=\"relative-path\">MTAThreadAttribute</a> in the <code>Main</code> subroutine. Otherwise, sending a transactional message using another thread throws a <a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a> exception. You apply the <a class=\"xref\" href=\"system.mtathreadattribute\" data-linktype=\"relative-path\">MTAThreadAttribute</a> by using the following fragment.  </p>\n<pre><code>&lt;System.MTAThreadAttribute&gt;  \n public sub Main()\n</code></pre><pre><code class=\"lang-vb#\">\n\n</code></pre><p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example displays the value of a message queue&#39;s Transactional property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#27\">        // Display the value of the queue&#39;s Transactional property.\n        Console.WriteLine(&quot;MessageQueue.Transactional: {0}&quot;,\n            queue.Transactional);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_UseJournalQueue\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_UseJournalQueue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UseJournalQueue</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether received messages are copied to the journal queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UseJournalQueue { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if messages received from the queue are copied to its journal queue; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the Message Queuing application creates a new application queue, it automatically creates an associated journal queue in the same location. The journal queue is used to track the messages removed from a queue. Setting this property modifies the Message Queuing queue. Therefore, any other <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instances are affected by the change.  </p>\n<p> The journal queue does not track messages removed from the queue because their time-to-be-received timer expired, nor does it track messages purged from the queue by using a Message Queuing directory service (Information Store or Active Directory).  </p>\n<p> Applications cannot send messages to journal queues; they are limited to read-only access of these queues. Furthermore, Message Queuing never removes messages from journal queues. The application using the queue must clear these messages either by receiving them or by purging the queue.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets and sets the value of a message queue&#39;s UseJournalQueue property.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#28\">        // Set the queue&#39;s UseJournalQueue property value.\n        queue.UseJournalQueue = true;\n\n        // Display the new value of the queue&#39;s UseJournalQueue property.\n        Console.WriteLine(&quot;MessageQueue.UseJournalQueue: {0}&quot;,\n            queue.UseJournalQueue);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_WriteHandle\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_WriteHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteHandle</div>        \r\n          </div>\r\n    \r\n            <p>Gets the native handle used to send messages to the message queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IntPtr WriteHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </div>\r\n                  <p>A handle to the native queue object that you use for sending messages to the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The message queue is not available for writing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The WriteHandle provides a native Windows handle to the message queue object that is used for sending messages to the queue. If you change the path of the queue, the handle is closed and reopened with a new value.  </p>\n<p> The following table shows whether this property is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_BeginPeek\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_BeginPeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginPeek()</div>        \r\n          </div>\r\n    \r\n            <p>Initiates an asynchronous peek operation that has no time-out. The operation is not complete until a message becomes available in the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginPeek ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the posted asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In asynchronous processing, you use BeginPeek to raise the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event when a message becomes available in the queue.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> is also raised if a message already exists in the queue.  </p>\n<p> To use BeginPeek, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. BeginPeek initiates an asynchronous peek operation; the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> is notified, through the raising of the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event, when a message arrives in the queue. The <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can then access the message by calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a> or by retrieving the result using the <a class=\"xref\" href=\"system.messaging.peekcompletedeventargs\" data-linktype=\"relative-path\">PeekCompletedEventArgs</a>.  </p>\n<p> The BeginPeek method returns immediately, but the asynchronous operation is not completed until the event handler is called.  </p>\n<p> Because BeginPeek is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method.  </p>\n<p> Once an asynchronous operation completes, you can call BeginPeek or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> again in the event handler to keep receiving notifications.  </p>\n<p> The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that BeginPeek returns identifies the asynchronous operation that the method started. You can use this <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> throughout the lifetime of the operation, although you generally do not use it until <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a> is called. However, if you start several asynchronous operations, you can place their <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> to identify the completed operation.  </p>\n<p> If <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_CanRead_\" data-linktype=\"relative-path\">CanRead</a> is <code>false</code>, the completion event is raised, but an exception will be thrown when calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an event handler named <code>MyPeekCompleted</code>, attaches it to the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event handler delegate, and calls BeginPeek to initiate an asynchronous peek operation on the queue that is located at the path &quot;.\\myQueue&quot;. When a <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event is raised, the example peeks the message and writes its body to the screen. The example then calls BeginPeek again to initiate a new asynchronous peek operation.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue.BeginPeek_noparms#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// This example performs asynchronous peek operation\n// processing.\n//*************************************************\nref class MyNewQueue\n{\npublic:\n\n   // Provides an event handler for the PeekCompleted\n   // event.\n   static void MyPeekCompleted( Object^ source, PeekCompletedEventArgs^ asyncResult )\n   {\n      // Connect to the queue.\n      MessageQueue^ mq = dynamic_cast&lt;MessageQueue^&gt;(source);\n\n      // End the asynchronous peek operation.\n      Message^ m = mq-&gt;EndPeek( asyncResult-&gt;AsyncResult );\n\n      // Display message information on the screen.\n      Console::WriteLine( &quot;Message: {0}&quot;, static_cast&lt;String^&gt;(m-&gt;Body) );\n\n      // Restart the asynchronous peek operation.\n      mq-&gt;BeginPeek();\n      return;\n   }\n};\n\n// Provides an entry point into the application.\n//         \nint main()\n{\n   // Create an instance of MessageQueue. Set its formatter.\n   MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n   array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n   p[ 0 ] = String::typeid;\n   myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n   // Add an event handler for the PeekCompleted event.\n   myQueue-&gt;PeekCompleted += gcnew PeekCompletedEventHandler( MyNewQueue::MyPeekCompleted );\n\n   // Begin the asynchronous peek operation.\n   myQueue-&gt;BeginPeek();\n\n   // Do other work on the current thread.\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.BeginPeek_noparms#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example performs asynchronous peek operation\n\t\t// processing.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create an instance of MessageQueue. Set its formatter.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Add an event handler for the PeekCompleted event.\n\t\t\tmyQueue.PeekCompleted += new \n\t\t\t\tPeekCompletedEventHandler(MyPeekCompleted);\n\t\t\t\n\t\t\t// Begin the asynchronous peek operation.\n\t\t\tmyQueue.BeginPeek();\n\t\t\t\n\t\t\t// Do other work on the current thread.\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Provides an event handler for the PeekCompleted\n\t\t// event.\n\t\t//**************************************************\n\t\t\n\t\tprivate static void MyPeekCompleted(Object source, \n\t\t\tPeekCompletedEventArgs asyncResult)\n\t\t{\n\t\t\t// Connect to the queue.\n\t\t\tMessageQueue mq = (MessageQueue)source;\n\n\t\t\t// End the asynchronous peek operation.\n\t\t\tMessage m = mq.EndPeek(asyncResult.AsyncResult);\n\n\t\t\t// Display message information on the screen.\n\t\t\tConsole.WriteLine(&quot;Message: &quot; + (string)m.Body);\n\n\t\t\t// Restart the asynchronous peek operation.\n\t\t\tmq.BeginPeek();\n\t\t\t\n\t\t\treturn; \n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.BeginPeek_noparms#1\">Imports System\nImports System.Messaging\n\n\n\n\n\n&#39; Provides a container class for the example.\nPublic Class MyNewQueue\n\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example performs asynchronous peek operation\n        &#39; processing.\n\n\n        Public Shared Sub Main()\n            &#39; Create an instance of MessageQueue. Set its formatter.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Add an event handler for the PeekCompleted event.\n            AddHandler myQueue.PeekCompleted, AddressOf _\n                MyPeekCompleted\n\n            &#39; Begin the asynchronous peek operation.\n            myQueue.BeginPeek()\n\n            &#39; Do other work on the current thread.\n            Return\n        End Sub &#39;Main\n\n\n        &#39;**************************************************\n        &#39; Provides an event handler for the PeekCompleted\n        &#39; event.\n        &#39;**************************************************\n\n        Private Shared Sub MyPeekCompleted(ByVal [source] As _\n            [Object], ByVal asyncResult As PeekCompletedEventArgs)\n\n            &#39; Connect to the queue.\n            Dim mq As MessageQueue = CType([source], MessageQueue)\n\n            &#39; End the asynchronous peek operation.\n            Dim m As Message = mq.EndPeek(asyncResult.AsyncResult)\n\n            &#39; Display message information on the screen.\n            Console.WriteLine((&quot;Message: &quot; + CStr(m.Body)))\n\n            &#39; Restart the asynchronous peek operation.\n            mq.BeginPeek()\n\n            Return\n\n        End Sub &#39;MyPeekCompleted\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_BeginPeek_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_BeginPeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginPeek(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates an asynchronous peek operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginPeek (TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the interval of time to wait for a message to become available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the posted asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In asynchronous processing, you use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> to raise the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event when a message becomes available in the queue or when the specified interval of time has expired.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> is also raised if a message already exists in the queue.  </p>\n<p> To use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> initiates an asynchronous peek operation; the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> is notified, through the raising of the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event, when a message arrives in the queue. The <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can then access the message by calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a> or by retrieving the result using the <a class=\"xref\" href=\"system.messaging.peekcompletedeventargs\" data-linktype=\"relative-path\">PeekCompletedEventArgs</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  </p>\n<p> Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method.  </p>\n<p> Once an asynchronous operation completes, you can call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> again in the event handler to keep receiving notifications.  </p>\n<p> The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> returns identifies the asynchronous operation that the method started. You can use this <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> throughout the lifetime of the operation, although you generally do not use it until <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a> is called. However, if you start several asynchronous operations, you can place their <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> to identify the completed operation.  </p>\n<p> This overload specifies a time-out. If the interval specified by the <code>timeout</code> parameter expires, this component raises the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event. Because no message exists, a subsequent call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a> will throw an exception.  </p>\n<p> If <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_CanRead_\" data-linktype=\"relative-path\">CanRead</a> is <code>false</code>, the completion event is raised, but an exception will be thrown when calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an asynchronous peek operation, using the queue path &quot;.\\myQueue&quot;. It creates an event handler, <code>MyPeekCompleted</code>, and attaches it to the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event handler delegate. <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> is called with a time-out of one minute, to initiate the asynchronous peek operation. When a <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event is raised or the time-out expires, the message is retrieved if one exists, and its body is written to the screen. Then <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> is called again to initiate a new asynchronous peek operation with the same time-out.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue.BeginPeek_timeout#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n   static void MyPeekCompleted( Object^ source, PeekCompletedEventArgs^ asyncResult )\n   {      try\n      {\n         // Connect to the queue.\n         MessageQueue^ mq = dynamic_cast&lt;MessageQueue^&gt;(source);\n\n         // End the asynchronous peek operation.\n         Message^ m = mq-&gt;EndPeek( asyncResult-&gt;AsyncResult );\n\n         // Display message information on the screen.\n         Console::WriteLine( &quot;Message: {0}&quot;, static_cast&lt;String^&gt;(m-&gt;Body) );\n\n         // Restart the asynchronous peek operation, with the \n         // same time-out.\n         mq-&gt;BeginPeek( TimeSpan(0,1,0) );\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         if ( e-&gt;MessageQueueErrorCode == MessageQueueErrorCode::IOTimeout )\n         {\n            Console::WriteLine( e );\n         }\n\n         // Handle other sources of MessageQueueException.\n      }\n\n      // Handle other exceptions.\n      return;\n   }\n};\n\nint main()\n{\n   // Create an instance of MessageQueue. Set its formatter.\n   MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n   array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n   p[ 0 ] = String::typeid;\n   myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n   // Add an event handler for the PeekCompleted event.\n   myQueue-&gt;PeekCompleted += gcnew PeekCompletedEventHandler( MyNewQueue::MyPeekCompleted );\n\n   // Begin the asynchronous peek operation with a timeout \n   // of one minute.\n   myQueue-&gt;BeginPeek( TimeSpan(0,1,0) );\n\n   // Do other work on the current thread.\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.BeginPeek_timeout#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example performs asynchronous peek operation\n\t\t// processing.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create an instance of MessageQueue. Set its formatter.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Add an event handler for the PeekCompleted event.\n\t\t\tmyQueue.PeekCompleted += new \n\t\t\t\tPeekCompletedEventHandler(MyPeekCompleted);\n\t\t\t\n\t\t\t// Begin the asynchronous peek operation with a time-out \n\t\t\t// of one minute.\n\t\t\tmyQueue.BeginPeek(new TimeSpan(0,1,0));\n\t\t\t\n\t\t\t// Do other work on the current thread.\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Provides an event handler for the PeekCompleted\n\t\t// event.\n\t\t//**************************************************\n\t\t\n\t\tprivate static void MyPeekCompleted(Object source, \n\t\t\tPeekCompletedEventArgs asyncResult)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Connect to the queue.\n\t\t\t\tMessageQueue mq = (MessageQueue)source;\n\n\t\t\t\t// End the asynchronous peek operation.\n\t\t\t\tMessage m = mq.EndPeek(asyncResult.AsyncResult);\n\n\t\t\t\t// Display message information on the screen.\n\t\t\t\tConsole.WriteLine(&quot;Message: &quot; + (string)m.Body);\n\n\t\t\t\t// Restart the asynchronous peek operation, with the \n\t\t\t\t// same time-out.\n\t\t\t\tmq.BeginPeek(new TimeSpan(0,1,0));\n\n\t\t\t}\n\n\t\t\tcatch(MessageQueueException e)\n\t\t\t{\n\t\t\t\tif (e.MessageQueueErrorCode == \n\t\t\t\t\tMessageQueueErrorCode.IOTimeout)\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(e.ToString());\n\t\t\t\t}\n\n\t\t\t\t// Handle other sources of MessageQueueException.\n\t\t\t}\n\t\t\t\n\t\t\t// Handle other exceptions.\n\t\t\t\n\t\t\treturn; \n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.BeginPeek_timeout#1\">Imports System\nImports System.Messaging\n\n\n&#39; Provides a container class for the example.\nPublic Class MyNewQueue\n\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example performs asynchronous peek operation\n        &#39; processing.\n\n\n        Public Shared Sub Main()\n            &#39; Create an instance of MessageQueue. Set its formatter.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                    {GetType([String])})\n\n            &#39; Add an event handler for the PeekCompleted event.\n            AddHandler myQueue.PeekCompleted, _\n                    AddressOf MyPeekCompleted\n\n            &#39; Begin the asynchronous peek operation with a time-out \n            &#39; of one minute.\n            myQueue.BeginPeek(New TimeSpan(0, 1, 0))\n\n            &#39; Do other work on the current thread.\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Provides an event handler for the PeekCompleted\n        &#39; event.\n\n\n        Private Shared Sub MyPeekCompleted(ByVal [source] As _\n            [Object], ByVal asyncResult As _\n            PeekCompletedEventArgs)\n\n            Try\n                &#39; Connect to the queue.\n                Dim mq As MessageQueue = CType([source], _\n                    MessageQueue)\n\n                &#39; End the asynchronous peek operation.\n                Dim m As Message = _\n                    mq.EndPeek(asyncResult.AsyncResult)\n\n                &#39; Display message information on the screen.\n                Console.WriteLine((&quot;Message: &quot; + CStr(m.Body)))\n\n                &#39; Restart the asynchronous peek operation, with the \n                &#39; same time-out.\n                mq.BeginPeek(New TimeSpan(0, 1, 0))\n\n            Catch e As MessageQueueException\n\n                If e.MessageQueueErrorCode = _\n                    MessageQueueErrorCode.IOTimeout Then\n\n                    Console.WriteLine(e.ToString())\n\n                    &#39; Handle other sources of MessageQueueException.\n                End If\n\n                &#39; Handle other exceptions.\n\n            End Try\n\n            Return\n\n        End Sub &#39;MyPeekCompleted\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_BeginPeek_System_TimeSpan_System_Object_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_BeginPeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginPeek(TimeSpan,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation&#39;s lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginPeek (TimeSpan timeout, object stateObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the interval of time to wait for a message to become available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stateObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A state object, specified by the application, that contains information associated with the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the posted asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In asynchronous processing, you use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> to raise the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event when a message becomes available in the queue or when the specified interval of time has expired.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> is also raised if a message already exists in the queue.  </p>\n<p> Use this overload to associate information with the operation that will be preserved throughout the operation&#39;s lifetime. The event handler can access this information by looking at the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncState_\" data-linktype=\"relative-path\">AsyncState</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that is associated with the operation.  </p>\n<p> To use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> initiates an asynchronous peek operation; the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> is notified, through the raising of the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event, when a message arrives in the queue. The <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can then access the message by calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a> or by retrieving the result using the <a class=\"xref\" href=\"system.messaging.peekcompletedeventargs\" data-linktype=\"relative-path\">PeekCompletedEventArgs</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  </p>\n<p> Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method.  </p>\n<p> Once an asynchronous operation completes, you can call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> again in the event handler to keep receiving notifications.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> returns a <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the asynchronous operation that the method started. You can use this <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> throughout the lifetime of the operation, although you generally do not use it until <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a> is called. However, if you start several asynchronous operations, you can place their <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> to identify the completed operation.  </p>\n<p> This overload specifies a time-out and a state object. If the interval specified by the <code>timeout</code> parameter expires, this component raises the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event. Because no message exists, a subsequent call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a> will throw an exception.  </p>\n<p> The state object associates state information with the operation. For example, if you call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define. For an illustration of this scenario, see the Example section.  </p>\n<p> You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.  </p>\n<p> If <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_CanRead_\" data-linktype=\"relative-path\">CanRead</a> is <code>false</code>, the completion event is raised, but an exception will be thrown when calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an asynchronous peek operation, using the queue path &quot;.\\myQueue&quot;. It creates an event handler, <code>MyPeekCompleted</code>, and attaches it to the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event handler delegate. <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> is called, with a time-out of one minute. Each call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> has a unique associated integer that identifies that particular operation. When a <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event is raised or the time-out expired, the message, if one exists, is retrieved and its body and the operation-specific integer identifier are written to the screen. Then <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> is called again to initiate a new asynchronous peek operation with the same time-out and the associated integer of the just completed operation.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.BeginPeek_TimeSpanStateObject#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\t\t// Represents a state object associated with each message.\n\t\tstatic int messageNumber = 0;\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example performs asynchronous peek operation\n\t\t// processing.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create an instance of MessageQueue. Set its formatter.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Add an event handler for the PeekCompleted event.\n\t\t\tmyQueue.PeekCompleted += new \n\t\t\t\tPeekCompletedEventHandler(MyPeekCompleted);\n\t\t\t\n\t\t\t// Begin the asynchronous peek operation with a time-out \n\t\t\t// of one minute.\n\t\t\tmyQueue.BeginPeek(new TimeSpan(0,1,0), messageNumber++);\n\t\t\t\n\t\t\t// Do other work on the current thread.\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Provides an event handler for the PeekCompleted\n\t\t// event.\n\t\t//**************************************************\n\t\t\n\t\tprivate static void MyPeekCompleted(Object source, \n\t\t\tPeekCompletedEventArgs asyncResult)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Connect to the queue.\n\t\t\t\tMessageQueue mq = (MessageQueue)source;\n\n\t\t\t\t// End the asynchronous peek operation.\n\t\t\t\tMessage m = mq.EndPeek(asyncResult.AsyncResult);\n\n\t\t\t\t// Display message information on the screen, \n\t\t\t\t// including the message number (state object).\n\t\t\t\tConsole.WriteLine(&quot;Message: &quot; + \n\t\t\t\t\t(int)asyncResult.AsyncResult.AsyncState + &quot; &quot; \n\t\t\t\t\t+(string)m.Body);\n\n\t\t\t\t// Restart the asynchronous peek operation, with the \n\t\t\t\t// same time-out.\n\t\t\t\tmq.BeginPeek(new TimeSpan(0,1,0), messageNumber++);\n\n\t\t\t}\n\n\t\t\tcatch(MessageQueueException e)\n\t\t\t{\n\t\t\t\tif (e.MessageQueueErrorCode == \n\t\t\t\t\tMessageQueueErrorCode.IOTimeout)\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(e.ToString());\n\t\t\t\t}\n\n\t\t\t\t// Handle other sources of MessageQueueException.\n\t\t\t}\n\t\t\t\n\t\t\t// Handle other exceptions.\n\t\t\t\n\t\t\treturn; \n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.BeginPeek_TimeSpanStateObject#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n\n   // Represents a state object associated with each message.\n   static int messageNumber = 0;\n\n   // Provides an event handler for the PeekCompleted\n   // event.\n   //\n   static void MyPeekCompleted( Object^ source, PeekCompletedEventArgs^ asyncResult )\n   {\n      try\n      {\n         // Connect to the queue.\n         MessageQueue^ mq = dynamic_cast&lt;MessageQueue^&gt;(source);\n\n         // End the asynchronous peek operation.\n         Message^ m = mq-&gt;EndPeek( asyncResult-&gt;AsyncResult );\n\n         // Display message information on the screen, \n         // including the message number (state object).\n         Console::WriteLine( &quot;Message: {0} {1}&quot;, asyncResult-&gt;AsyncResult-&gt;AsyncState, static_cast&lt;String^&gt;(m-&gt;Body) );\n\n         // Restart the asynchronous peek operation, with the \n         // same time-out.\n         mq-&gt;BeginPeek( TimeSpan(0,1,0), messageNumber++ );\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         if ( e-&gt;MessageQueueErrorCode == MessageQueueErrorCode::IOTimeout )\n         {\n            Console::WriteLine( e );\n         }\n\n         // Handle other sources of MessageQueueException.\n      }\n\n      // Handle other exceptions.\n      return;\n   }\n};\n\n\n// Provides an entry point into the application.\n//         \n// This example performs asynchronous peek operation\n// processing.\nint main()\n{\n   // Create an instance of MessageQueue. Set its formatter.\n   MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n   array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n   p[ 0 ] = String::typeid;\n   myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n   // Add an event handler for the PeekCompleted event.\n   myQueue-&gt;PeekCompleted += gcnew PeekCompletedEventHandler( MyNewQueue::MyPeekCompleted );\n\n   // Begin the asynchronous peek operation with a timeout \n   // of one minute.\n   myQueue-&gt;BeginPeek( TimeSpan(0,1,0), MyNewQueue::messageNumber++ );\n\n   // Do other work on the current thread.\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.BeginPeek_TimeSpanStateObject#1\">Imports System\nImports System.Messaging\n\n\n   \n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n\n        &#39; Represents a state object associated with each message.\n        Private Shared messageNumber As Integer = 0\n\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example performs asynchronous peek operation\n        &#39; processing.\n\n\n        Public Shared Sub Main()\n            &#39; Create an instance of MessageQueue. Set its formatter.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Add an event handler for the PeekCompleted event.\n            AddHandler myQueue.PeekCompleted, AddressOf _\n                MyPeekCompleted\n\n            &#39; Begin the asynchronous peek operation with a time-out \n            &#39; of one minute.\n            myQueue.BeginPeek(New TimeSpan(0, 1, 0), messageNumber)\n            messageNumber += 1\n\n            &#39; Do other work on the current thread.\n            Return\n        End Sub &#39;Main\n\n\n\n        &#39; Provides an event handler for the PeekCompleted\n        &#39; event.\n\n\n        Private Shared Sub MyPeekCompleted(ByVal [source] As _\n            [Object], ByVal asyncResult As _\n            PeekCompletedEventArgs)\n\n            Try\n                &#39; Connect to the queue.\n                Dim mq As MessageQueue = _\n                    CType([source], MessageQueue)\n\n                &#39; End the asynchronous peek operation.\n                Dim m As Message = _\n                    mq.EndPeek(asyncResult.AsyncResult)\n\n                &#39; Display message information on the screen, \n                &#39; including(the) message number (state object).\n                Console.WriteLine((&quot;Message: &quot; + _\n                    CInt(asyncResult.AsyncResult.AsyncState) + _\n                    &quot; &quot; + CStr(m.Body)))\n\n                &#39; Restart the asynchronous peek operation, with the \n                &#39; same time-out.\n                mq.BeginPeek(New TimeSpan(0, 1, 0), messageNumber)\n                messageNumber += 1\n\n\n            Catch e As MessageQueueException\n\n                If e.MessageQueueErrorCode = _\n                    MessageQueueErrorCode.IOTimeout Then\n\n                    Console.WriteLine(e.ToString())\n\n                    &#39; Handle other sources of MessageQueueException.\n\n                End If\n\n                &#39; Handle other exceptions.\n\n            End Try\n\n            Return\n\n        End Sub &#39;MyPeekCompleted\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_BeginPeek_System_TimeSpan_System_Object_System_AsyncCallback_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_BeginPeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginPeek(TimeSpan,Object,AsyncCallback)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation&#39;s lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginPeek (TimeSpan timeout, object stateObject, AsyncCallback callback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the interval of time to wait for a message to become available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stateObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A state object, specified by the application, that contains information associated with the asynchronous operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> that will receive the notification of the asynchronous operation completion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the posted asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event is not raised. The other overloads of <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> rely on this component to raise the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> is also raised if a message already exists in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  </p>\n<p> Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method.  </p>\n<p> Once an asynchronous operation completes, you can call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> again in the event handler to keep receiving notifications.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> returns a <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the asynchronous operation that the method started. You can use this <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> throughout the lifetime of the operation, although you generally do not use it until <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a> is called. However, if you start several asynchronous operations, you can place their <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> to identify the completed operation.  </p>\n<p> The state object associates state information with the operation. For example, if you call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an asynchronous peek operation. The code example sends a message to a local message queue, then calls BeginPeek, passing in: a time-out value of ten seconds; a unique integer that identifies that particular message; and a new instance of <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> that identifies the event handler, <code>MyPeekCompleted</code>. When a <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event is raised, the event handler peeks at the message and writes the message body and the integer message identifier to the screen.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueueBeginPeek#0\">#using &lt;System.Messaging.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// Creates a new queue.\nvoid CreateQueue(String^ queuePath, bool transactional)\n{\n    if(!MessageQueue::Exists(queuePath))\n    {\n        MessageQueue^ queue = MessageQueue::Create(queuePath, transactional);\n        queue-&gt;Close();      \n    }\n    else\n    {\n        Console::WriteLine(&quot;{0} already exists.&quot;, queuePath);\n    }\n}\n\n// Provides an event handler for the PeekCompleted event.\nvoid MyPeekCompleted(IAsyncResult^ asyncResult)\n{\n    // Connect to the queue.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // End the asynchronous peek operation.\n    Message^ msg = queue-&gt;EndPeek(asyncResult);\n\n    // Display the message information on the screen.\n    Console::WriteLine(&quot;Message number: {0}&quot;, asyncResult-&gt;AsyncState);\n    Console::WriteLine(&quot;Message body: {0}&quot;, msg-&gt;Body);\n\n    // Receive the message. This will remove the message from the queue.\n    msg = queue-&gt;Receive(TimeSpan::FromSeconds(10.0));\n\n    queue-&gt;Close();\n}\n\nint main()\n{\n    // Represents a state object associated with each message.\n    int messageNumber = 0;\n\n    // Create a non-transactional queue on the local computer.\n    // Note that the queue might not be immediately accessible, and\n    // therefore this example might throw an exception of type\n    // System.Messaging.MessageQueueException when trying to send a\n    // message to the newly created queue.\n    CreateQueue(&quot;.\\\\exampleQueue&quot;, false);\n\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Send a message to the queue.\n    queue-&gt;Send(&quot;Example Message&quot;);\n\n    // Begin the asynchronous peek operation.\n    queue-&gt;BeginPeek(TimeSpan::FromSeconds(10.0), messageNumber++,\n        gcnew AsyncCallback(MyPeekCompleted));\n\n    // Simulate doing other work on the current thread.\n    System::Threading::Thread::Sleep(TimeSpan::FromSeconds(10.0));\n\n    queue-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueueBeginPeek#0\">\nusing System;\nusing System.Messaging;\n\npublic class QueueExample\n{\n    // Represents a state object associated with each message.\n    static int messageNumber = 0;\n\n    public static void Main()\n    {\n        // Create a non-transactional queue on the local computer.\n        // Note that the queue might not be immediately accessible, and\n        // therefore this example might throw an exception of type\n        // System.Messaging.MessageQueueException when trying to send a\n        // message to the newly created queue.\n        CreateQueue(&quot;.\\\\exampleQueue&quot;, false);\n\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Send a message to the queue.\n        queue.Send(&quot;Example Message&quot;);\n\n        // Begin the asynchronous peek operation.\n        queue.BeginPeek(TimeSpan.FromSeconds(10.0), messageNumber++,\n            new AsyncCallback(MyPeekCompleted));\n\n        // Simulate doing other work on the current thread.\n        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10.0));\n\n        return;\n    }\n\n    // Creates a new queue.\n    public static void CreateQueue(string queuePath, bool transactional)\n    {\n        if(!MessageQueue.Exists(queuePath))\n        {\n            MessageQueue.Create(queuePath, transactional);\n        }\n        else\n        {\n            Console.WriteLine(queuePath + &quot; already exists.&quot;);\n        }\n    }\n\n    // Provides an event handler for the PeekCompleted event.\n    private static void MyPeekCompleted(IAsyncResult asyncResult)\n    {\n        // Connect to the queue.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // End the asynchronous peek operation.\n        Message msg = queue.EndPeek(asyncResult);\n\n        // Display the message information on the screen.\n        Console.WriteLine(&quot;Message number: {0}&quot;, (int)asyncResult.AsyncState);\n        Console.WriteLine(&quot;Message body: {0}&quot;, (string)msg.Body);\n\n        // Receive the message. This will remove the message from the queue.\n        msg = queue.Receive(TimeSpan.FromSeconds(10.0));\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_BeginPeek_System_TimeSpan_System_Messaging_Cursor_System_Messaging_PeekAction_System_Object_System_AsyncCallback_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_BeginPeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginPeek(TimeSpan,Cursor,PeekAction,Object,AsyncCallback)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates an asynchronous peek operation that has a specified time-out and that uses a specified cursor, a specified peek action, and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginPeek (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.PeekAction action, object state, AsyncCallback callback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the interval of time to wait for a message to become available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cursor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a> that maintains a specific position in the message queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.peekaction\" data-linktype=\"relative-path\">PeekAction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.peekaction\" data-linktype=\"relative-path\">PeekAction</a> values. Indicates whether to peek at the current message in the queue, or the next message.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A state object, specified by the application, that contains information associated with the asynchronous operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> that receives the notification of the asynchronous operation completion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the posted asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>A value other than <code>PeekAction.Current</code> or <code>PeekAction.Next</code> was specified for the <code>action</code> parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>cursor</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event is not raised. The other overloads of <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> rely on this component to raise the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> is also raised if a message already exists in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  </p>\n<p> Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method.  </p>\n<p> Once an asynchronous operation completes, you can call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> again in the event handler to keep receiving notifications.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> returns a <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the asynchronous operation started by the method. You can use this <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> throughout the lifetime of the operation, although you generally do not use it until <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a> is called. However, if you start several asynchronous operations, you can place their <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> values in an array and specify whether to wait for all operations or any operation to complete. In this case, use the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> to identify the completed operation.  </p>\n<p> The state object associates state information with the operation. For example, if you call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_BeginReceive\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_BeginReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginReceive()</div>        \r\n          </div>\r\n    \r\n            <p>Initiates an asynchronous receive operation that has no time-out. The operation is not complete until a message becomes available in the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginReceive ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the posted asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In asynchronous processing, you use BeginReceive to raise the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event when a message has been removed from the queue.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> is also raised if a message already exists in the queue.  </p>\n<p> To use BeginReceive, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. BeginReceive initiates an asynchronous receive operation; the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> is notified, through the raising of the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event, when a message arrives in the queue. The <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can then access the message by calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a>.  </p>\n<p> The BeginReceive method returns immediately, but the asynchronous operation is not completed until the event handler is called.  </p>\n<p> Because BeginReceive is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method.  </p>\n<p> Once an asynchronous operation completes, you can call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> or BeginReceive again in the event handler to keep receiving notifications.  </p>\n<p> The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that BeginReceive returns identifies the asynchronous operation that the method started. You can use this <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> throughout the lifetime of the operation, although you generally do not use it until <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a> is called. However, if you start several asynchronous operations, you can place their <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> to identify the completed operation.  </p>\n<p> If <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_CanRead_\" data-linktype=\"relative-path\">CanRead</a> is <code>false</code>, the completion event is raised, but an exception will be thrown when calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a>.  </p>\n<p> Do not use the asynchronous call BeginReceive with transactions. If you want to perform a transactional asynchronous operation, call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a>, and put the transaction and the (synchronous) <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  </p>\n<pre><code>myMessageQueue.BeginTransaction();  \n myMessageQueue.Receive();  \n myMessageQueue.CommitTransaction();\n</code></pre><p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example chains asynchronous requests. It assumes there is a queue on the local computer called &quot;myQueue&quot;. The <code>Main</code> function begins the asynchronous operation that is handled by the <code>MyReceiveCompleted</code> routine. <code>MyReceiveCompleted</code> processes the current message and begins a new asynchronous receive operation.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.BeginReceive_noparms_combined#1\">using System;\nusing System.Messaging;\nusing System.Threading;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\t\t// Define static class members.\n\t\tstatic ManualResetEvent signal = new ManualResetEvent(false);\n\t\tstatic int count = 0;\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example performs asynchronous receive\n\t\t// operation processing.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create an instance of MessageQueue. Set its formatter.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Add an event handler for the ReceiveCompleted event.\n\t\t\tmyQueue.ReceiveCompleted += \n\t\t\t\tnew ReceiveCompletedEventHandler(MyReceiveCompleted);\n\t\t\t\n\t\t\t// Begin the asynchronous receive operation.\n\t\t\tmyQueue.BeginReceive();\n\n\t\t\tsignal.WaitOne();\n\t\t\t\n\t\t\t// Do other work on the current thread.\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//***************************************************\n\t\t// Provides an event handler for the ReceiveCompleted\n\t\t// event.\n\t\t//***************************************************\n\t\t\n\t\tprivate static void MyReceiveCompleted(Object source, \n\t\t\tReceiveCompletedEventArgs asyncResult)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Connect to the queue.\n\t\t\t\tMessageQueue mq = (MessageQueue)source;\n\n\t\t\t\t// End the asynchronous receive operation.\n\t\t\t\tMessage m = mq.EndReceive(asyncResult.AsyncResult);\n\t\t\t\t\n\t\t\t\tcount += 1;\n\t\t\t\tif (count == 10)\n\t\t\t\t{\n\t\t\t\t\tsignal.Set();\n\t\t\t\t}\n\n\t\t\t\t// Restart the asynchronous receive operation.\n\t\t\t\tmq.BeginReceive();\n\t\t\t}\n\t\t\tcatch(MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle sources of MessageQueueException.\n\t\t\t}\n\t\t\t\n\t\t\t// Handle other exceptions.\n\t\t\t\n\t\t\treturn; \n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.BeginReceive_noparms_combined#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Threading;\n\nref class MyNewQueue\n{\npublic:\n\n   // Define static class members.\n   static ManualResetEvent^ signal = gcnew ManualResetEvent( false );\n   static int count = 0;\n\n   // Provides an event handler for the ReceiveCompleted\n   // event.\n   static void MyReceiveCompleted( Object^ source, ReceiveCompletedEventArgs^ asyncResult )\n   {\n      try\n      {\n         // Connect to the queue.\n         MessageQueue^ mq = dynamic_cast&lt;MessageQueue^&gt;(source);\n\n         // End the asynchronous receive operation.\n         mq-&gt;EndReceive( asyncResult-&gt;AsyncResult );\n         count += 1;\n         if ( count == 10 )\n         {\n            signal-&gt;Set();\n         }\n\n         // Restart the asynchronous receive operation.\n         mq-&gt;BeginReceive();\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle sources of MessageQueueException.\n      }\n\n      // Handle other exceptions.\n      return;\n   }\n};\n\n// Provides an entry point into the application.\n//         \n// This example performs asynchronous receive\n// operation processing.\nint main()\n{\n   // Create an instance of MessageQueue. Set its formatter.\n   MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n   array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n   p[ 0 ] = String::typeid;\n   myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n   // Add an event handler for the ReceiveCompleted event.\n   myQueue-&gt;ReceiveCompleted += gcnew ReceiveCompletedEventHandler( MyNewQueue::MyReceiveCompleted );\n\n   // Begin the asynchronous receive operation.\n   myQueue-&gt;BeginReceive();\n   MyNewQueue::signal-&gt;WaitOne();\n\n   // Do other work on the current thread.\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.BeginReceive_noparms_combined#1\">Imports System\nImports System.Messaging\nImports System.Threading\n\n\n\n\n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n\n        &#39; Define static class members.\n        Private Shared signal As New ManualResetEvent(False)\n        Private Shared count As Integer = 0\n\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example performs asynchronous receive\n        &#39; operation processing.\n\n\n        Public Shared Sub Main()\n            &#39; Create an instance of MessageQueue. Set its formatter.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Add an event handler for the ReceiveCompleted event.\n            AddHandler myQueue.ReceiveCompleted, AddressOf _\n                MyReceiveCompleted\n\n            &#39; Begin the asynchronous receive operation.\n            myQueue.BeginReceive()\n\n            signal.WaitOne()\n\n            &#39; Do other work on the current thread.\n\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Provides an event handler for the ReceiveCompleted\n        &#39; event.\n\n\n        Private Shared Sub MyReceiveCompleted(ByVal [source] As _\n            [Object], ByVal asyncResult As ReceiveCompletedEventArgs)\n\n            Try\n                &#39; Connect to the queue.\n                Dim mq As MessageQueue = CType([source], MessageQueue)\n\n                &#39; End the asynchronous receive operation.\n                Dim m As Message = _\n                    mq.EndReceive(asyncResult.AsyncResult)\n\n                count += 1\n                If count = 10 Then\n                    signal.Set()\n                End If\n\n                &#39; Restart the asynchronous receive operation.\n                mq.BeginReceive()\n\n            Catch\n                &#39; Handle sources of MessageQueueException.\n\n                &#39; Handle other exceptions.\n\n            End Try\n\n            Return\n\n        End Sub &#39;MyReceiveCompleted\n\nEnd Class &#39;MyNewQueue\n</code></pre><p> The following code example queues asynchronous requests. The call to BeginReceive uses the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> in its return value. The <code>Main</code> routine waits for all asynchronous operations to be completed before exiting.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.BeginReceive_noparms_combined#2\">using System;\nusing System.Messaging;\nusing System.Threading;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example performs asynchronous receive\n\t\t// operation processing.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create an instance of MessageQueue. Set its formatter.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Add an event handler for the ReceiveCompleted event.\n\t\t\tmyQueue.ReceiveCompleted += \n\t\t\t\tnew ReceiveCompletedEventHandler(MyReceiveCompleted);\n\t\t\t\n\t\t\t// Define wait handles for multiple operations.\n\t\t\tWaitHandle[] waitHandleArray = new WaitHandle[10];\n\t\t\tfor(int i=0; i&lt;10; i++)\n\t\t\t{\n\t\t\t\t// Begin asynchronous operations.\n\t\t\t\twaitHandleArray[i] = \n\t\t\t\t\tmyQueue.BeginReceive().AsyncWaitHandle;\n\t\t\t}\n\n\t\t\t// Specify to wait for all operations to return.\n\t\t\tWaitHandle.WaitAll(waitHandleArray);\n         \n\t\t\treturn;\n\t\t}\n\n\n\t\t//***************************************************\n\t\t// Provides an event handler for the ReceiveCompleted\n\t\t// event.\n\t\t//***************************************************\n\t\t\n\t\tprivate static void MyReceiveCompleted(Object source, \n\t\t\tReceiveCompletedEventArgs asyncResult)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Connect to the queue.\n\t\t\t\tMessageQueue mq = (MessageQueue)source;\n                \n\t\t\t\t// End the asynchronous receive operation.\n\t\t\t\tMessage m = mq.EndReceive(asyncResult.AsyncResult);\n\t\t\n\t\t\t\t// Process the message here.\n\t\t\t\tConsole.WriteLine(&quot;Message received.&quot;);\n\n\t\t\t}\n\t\t\tcatch(MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle sources of MessageQueueException.\n\t\t\t}\n\t\t\t\n\t\t\t// Handle other exceptions.\n\t\t\t\n\t\t\treturn; \n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.BeginReceive_noparms_combined#2\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Threading;\n\nref class MyNewQueue\n{\npublic:\n\n   // Provides an event handler for the ReceiveCompleted\n   // event.\n   static void MyReceiveCompleted( Object^ source, ReceiveCompletedEventArgs^ asyncResult )\n   {\n      try\n      {\n         // Connect to the queue.\n         MessageQueue^ mq = dynamic_cast&lt;MessageQueue^&gt;(source);\n\n         // End the asynchronous receive operation.\n         mq-&gt;EndReceive( asyncResult-&gt;AsyncResult );\n\n         // Process the message here.\n         Console::WriteLine( &quot;Message received.&quot; );\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle sources of MessageQueueException.\n      }\n      // Handle other exceptions.\n      return;\n   }\n};\n\n// Provides an entry point into the application.\n//         \n// This example performs asynchronous receive\n// operation processing.\nint main()\n{\n   // Create an instance of MessageQueue. Set its formatter.\n   MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n   array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n   p[ 0 ] = String::typeid;\n   myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n   // Add an event handler for the ReceiveCompleted event.\n   myQueue-&gt;ReceiveCompleted += gcnew ReceiveCompletedEventHandler( MyNewQueue::MyReceiveCompleted );\n\n   // Define wait handles for multiple operations.\n   array&lt;WaitHandle^&gt;^waitHandleArray = gcnew array&lt;WaitHandle^&gt;(10);\n   for ( int i = 0; i &lt; 10; i++ )\n   {\n      // Begin asynchronous operations.\n      waitHandleArray[ i ] = myQueue-&gt;BeginReceive()-&gt;AsyncWaitHandle;\n   }\n\n   // Specify to wait for all operations to return.\n   WaitHandle::WaitAll( waitHandleArray );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.BeginReceive_noparms_combined#2\">Imports System\nImports System.Messaging\nImports System.Threading\n\n\n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example performs asynchronous receive\n        &#39; operation processing.\n\n\n        Public Shared Sub Main()\n\n            &#39; Create an instance of MessageQueue. Set its formatter.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Add an event handler for the ReceiveCompleted event.\n            AddHandler myQueue.ReceiveCompleted, AddressOf _\n                MyReceiveCompleted\n\n            &#39; Define wait handles for multiple operations.\n            Dim waitHandleArray(10) As WaitHandle\n\n            Dim i As Integer\n            For i = 0 To 9\n                &#39; Begin asynchronous operations.\n                waitHandleArray(i) = _\n                    myQueue.BeginReceive().AsyncWaitHandle\n            Next i\n\n            &#39; Specify to wait for all operations to return.\n            WaitHandle.WaitAll(waitHandleArray)\n\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Provides an event handler for the ReceiveCompleted\n        &#39; event.\n\n\n        Private Shared Sub MyReceiveCompleted(ByVal [source] As _\n            [Object], ByVal asyncResult As ReceiveCompletedEventArgs)\n\n            Try\n                &#39; Connect to the queue.\n                Dim mq As MessageQueue = CType([source], MessageQueue)\n\n                &#39; End the asynchronous receive operation.\n                Dim m As Message = _\n                    mq.EndReceive(asyncResult.AsyncResult)\n\n                &#39; Process the message here.\n                Console.WriteLine(&quot;Message received.&quot;)\n\n            Catch\n\n                &#39; Handle sources of MessageQueueException.\n\n                &#39; Handle other exceptions.\n\n            End Try\n\n            Return\n\n        End Sub &#39;MyReceiveCompleted\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_BeginReceive_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_BeginReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginReceive(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates an asynchronous receive operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginReceive (TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the interval of time to wait for a message to become available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the posted asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly because it represents a negative number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In asynchronous processing, you use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> to raise the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event when a message becomes available in the queue or when the specified interval of time has expired.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> is also raised if a message already exists in the queue.  </p>\n<p> To use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> initiates an asynchronous receive operation; the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> is notified, through the raising of the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event, when a message arrives in the queue. The <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can then access the message by calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a> or retrieving the result using the <a class=\"xref\" href=\"system.messaging.receivecompletedeventargs\" data-linktype=\"relative-path\">ReceiveCompletedEventArgs</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  </p>\n<p> Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method.  </p>\n<p> Once an asynchronous operation completes, you can call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> again in the event handler to keep receiving notifications.  </p>\n<p> If <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_CanRead_\" data-linktype=\"relative-path\">CanRead</a> is <code>false</code>, the completion event is raised, but an exception will be thrown when calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> returns identifies the asynchronous operation that the method started. You can use this <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> throughout the lifetime of the operation, although you generally do not use it until <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a> is called. However, if you start several asynchronous operations, you can place their <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> to identify the completed operation.  </p>\n<p> This overload specifies a time-out. If the interval specified by the <code>timeout</code> parameter expires, this component raises the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event. Because no message exists, a subsequent call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a> will throw an exception.  </p>\n<p> Do not use the asynchronous call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> with transactions. If you want to perform a transactional asynchronous operation, call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a>, and put the transaction and the (synchronous) <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  </p>\n<pre><code>myMessageQueue.BeginTransaction();  \n myMessageQueue.Receive();  \n myMessageQueue.CommitTransaction();\n</code></pre><p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an asynchronous receive operation. The code example creates an event handler, <code>MyReceiveCompleted</code>, and attaches it to the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event handler delegate. The code example sends a message to a local message queue, then calls BeginReceive, passing in a time-out value of ten seconds. When a <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event is raised, the event handler receives the message and writes the message body to the screen.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueueBeginReceive1#0\">\nusing System;\nusing System.Messaging;\n\npublic class QueueExample\n{\n    public static void Main()\n    {\n        // Create a non-transactional queue on the local computer.\n        // Note that the queue might not be immediately accessible, and\n        // therefore this example might throw an exception of type\n        // System.Messaging.MessageQueueException when trying to send a\n        // message to the newly created queue.\n        CreateQueue(&quot;.\\\\exampleQueue&quot;, false);\n\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Add an event handler for the ReceiveCompleted event.\n        queue.ReceiveCompleted += new \n                ReceiveCompletedEventHandler(MyReceiveCompleted);\n\n        // Send a message to the queue.\n        queue.Send(&quot;Example Message&quot;);\n\n        // Begin the asynchronous receive operation.\n        queue.BeginReceive(TimeSpan.FromSeconds(10.0));\n\n        // Simulate doing other work on the current thread.\n        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10.0));\n\n        return;\n    }\n\n    // Creates a new queue.\n    public static void CreateQueue(string queuePath, bool transactional)\n    {\n        if(!MessageQueue.Exists(queuePath))\n        {\n            MessageQueue.Create(queuePath, transactional);\n        }\n        else\n        {\n            Console.WriteLine(queuePath + &quot; already exists.&quot;);\n        }\n    }\n\n    // Provides an event handler for the ReceiveCompleted event.\n    private static void MyReceiveCompleted(Object source, \n        ReceiveCompletedEventArgs asyncResult)\n    {\n        // Connect to the queue.\n        MessageQueue queue = (MessageQueue)source;\n\n        // End the asynchronous receive operation.\n        Message msg = queue.EndReceive(asyncResult.AsyncResult);\n\n        // Display the message information on the screen.\n        Console.WriteLine(&quot;Message body: {0}&quot;, (string)msg.Body);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueueBeginReceive1#0\">#using &lt;System.Messaging.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// Creates a new queue.\nvoid CreateQueue(String^ queuePath, bool transactional)\n{\n    if(!MessageQueue::Exists(queuePath))\n    {\n        MessageQueue^ queue = MessageQueue::Create(queuePath, transactional);\n        queue-&gt;Close();       \n    }\n    else\n    {\n        Console::WriteLine(&quot;{0} already exists.&quot;, queuePath);\n    }\n}\n\n// Provides an event handler for the ReceiveCompleted event.\nvoid HandleReceiveCompleted(Object^ source, ReceiveCompletedEventArgs^ e)\n{\n    // Connect to the queue.\n    MessageQueue^ queue = (MessageQueue^)source;\n\n    // End the asynchronous receive operation.\n    Message^ msg = queue-&gt;EndReceive(e-&gt;AsyncResult);\n\n    // Display the message information on the screen.\n    Console::WriteLine(&quot;Message body: {0}&quot;, msg-&gt;Body);\n    \n    queue-&gt;Close();\n}\n\nint main()\n{\n    // Create a non-transactional queue on the local computer.\n    // Note that the queue might not be immediately accessible, and\n    // therefore this example might throw an exception of type\n    // System.Messaging.MessageQueueException when trying to send a\n    // message to the newly created queue.\n    MessageQueue^ queue = nullptr;\n    try\n    {\n        CreateQueue(&quot;.\\\\exampleQueue&quot;, false);\n\n        // Connect to a queue on the local computer.\n        queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Add an event handler for the ReceiveCompleted event.\n        queue-&gt;ReceiveCompleted += gcnew\n            ReceiveCompletedEventHandler(HandleReceiveCompleted);\n\n        // Send a message to the queue.\n        queue-&gt;Send(&quot;Example Message&quot;);\n\n        // Begin the asynchronous receive operation.\n        queue-&gt;BeginReceive(TimeSpan::FromSeconds(10.0));\n\n        // Simulate doing other work on the current thread.\n        System::Threading::Thread::Sleep(TimeSpan::FromSeconds(10.0));\n    }\n\n    catch (InvalidOperationException^)\n    {\n        Console::WriteLine(&quot;Please install Message Queuing.&quot;);\n    }\n\n    catch (MessageQueueException^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n    }\n\n    finally\n    {   \n        queue-&gt;Close();\n    }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_BeginReceive_System_TimeSpan_System_Object_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_BeginReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginReceive(TimeSpan,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation&#39;s lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginReceive (TimeSpan timeout, object stateObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the interval of time to wait for a message to become available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stateObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A state object, specified by the application, that contains information associated with the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the posted asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In asynchronous processing, you use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> to raise the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event when a message becomes available in the queue or when the specified interval of time has expired.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> is also raised if a message already exists in the queue.  </p>\n<p> Use this overload to associate information with the operation that will be preserved throughout the operation&#39;s lifetime. The event handler can detect this information by looking at the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncState_\" data-linktype=\"relative-path\">AsyncState</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that is associated with the operation.  </p>\n<p> To use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> initiates an asynchronous receive operation; the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> is notified, through the raising of the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event, when a message arrives in the queue. The <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can then access the message by calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a> or retrieving the result using the <a class=\"xref\" href=\"system.messaging.receivecompletedeventargs\" data-linktype=\"relative-path\">ReceiveCompletedEventArgs</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  </p>\n<p> Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method.  </p>\n<p> Once an asynchronous operation completes, you can call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> again in the event handler to keep receiving notifications.  </p>\n<p> The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> returns identifies the asynchronous operation that the method started. You can use this <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> throughout the lifetime of the operation, although you generally do not use it until <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a> is called. However, if you start several asynchronous operations, you can place their <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> to identify the completed operation.  </p>\n<p> This overload specifies a time-out and a state object. If the interval specified by the <code>timeout</code> parameter expires, this component raises the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event. Because no message exists, a subsequent call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a> will throw an exception.  </p>\n<p> The state object associates state information with the operation. For example, if you call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  </p>\n<p> You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.  </p>\n<p> Do not use the asynchronous call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> with transactions. If you want to perform a transactional asynchronous operation, call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a>, and put the transaction and the (synchronous) <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  </p>\n<pre><code>myMessageQueue.BeginTransaction();  \n myMessageQueue.Receive();  \n myMessageQueue.CommitTransaction();\n</code></pre><p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an asynchronous receive operation. The code example creates an event handler, <code>MyReceiveCompleted</code>, and attaches it to the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event handler delegate. The code example sends a message to a local message queue, then calls BeginReceive, passing in a time-out value of ten seconds and a unique integer that identifies that particular message. When a <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event is raised, the event handler receives the message and writes the message body and the integer message identifier to the screen.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueueBeginReceive2#0\">\nusing System;\nusing System.Messaging;\n\npublic class QueueExample\n{\n    // Represents a state object associated with each message.\n    static int messageNumber = 0;\n\n    public static void Main()\n    {\n        // Create a non-transactional queue on the local computer.\n        // Note that the queue might not be immediately accessible, and\n        // therefore this example might throw an exception of type\n        // System.Messaging.MessageQueueException when trying to send a\n        // message to the newly created queue.\n        CreateQueue(&quot;.\\\\exampleQueue&quot;, false);\n\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Add an event handler for the ReceiveCompleted event.\n        queue.ReceiveCompleted += new \n            ReceiveCompletedEventHandler(MyReceiveCompleted);\n\n        // Send a message to the queue.\n        queue.Send(&quot;Example Message&quot;);\n\n        // Begin the asynchronous receive operation.\n        queue.BeginReceive(TimeSpan.FromSeconds(10.0), messageNumber++);\n\n        // Simulate doing other work on the current thread.\n        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10.0));\n\n        return;\n    }\n\n    // Creates a new queue.\n    public static void CreateQueue(string queuePath, bool transactional)\n    {\n        if(!MessageQueue.Exists(queuePath))\n        {\n            MessageQueue.Create(queuePath, transactional);\n        }\n        else\n        {\n            Console.WriteLine(queuePath + &quot; already exists.&quot;);\n        }\n    }\n\n    // Provides an event handler for the ReceiveCompleted event.\n    private static void MyReceiveCompleted(Object source, \n        ReceiveCompletedEventArgs asyncResult)\n    {\n        // Connect to the queue.\n        MessageQueue queue = (MessageQueue)source;\n\n        // End the asynchronous receive operation.\n        Message msg = queue.EndReceive(asyncResult.AsyncResult);\n\n        // Display the message information on the screen.\n        Console.WriteLine(&quot;Message number: {0}&quot;,\n            (int)asyncResult.AsyncResult.AsyncState);\n        Console.WriteLine(&quot;Message body: {0}&quot;, (string)msg.Body);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueueBeginReceive2#0\">#using &lt;System.Messaging.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// Creates a new queue.\nvoid CreateQueue(String^ queuePath, bool transactional)\n{\n    if(!MessageQueue::Exists(queuePath))\n    {\n        MessageQueue^ queue = MessageQueue::Create(queuePath, transactional);\n        queue-&gt;Close();       \n    }\n    else\n    {\n        Console::WriteLine(&quot;{0} already exists.&quot;, queuePath);\n    }\n}\n\n// Provides an event handler for the ReceiveCompleted event.\nvoid HandleReceiveCompleted(Object^ source, ReceiveCompletedEventArgs^ e)\n{\n    // Connect to the queue.\n    MessageQueue^ queue = (MessageQueue^)source;\n\n    // End the asynchronous receive operation.\n    Message^ msg = queue-&gt;EndReceive(e-&gt;AsyncResult);\n\n    // Display the message information on the screen.\n    Console::WriteLine(&quot;Message number: {0}&quot;, e-&gt;AsyncResult-&gt;AsyncState);\n    Console::WriteLine(&quot;Message body: {0}&quot;, msg-&gt;Body);\n\n    queue-&gt;Close();\n}\n\nint main()\n{\n    // Create a non-transactional queue on the local computer.\n    // Note that the queue might not be immediately accessible, and\n    // therefore this example might throw an exception of type\n    // System.Messaging.MessageQueueException when trying to send a\n    // message to the newly created queue.\n    MessageQueue^ queue = nullptr;\n\n    // Represents a state object associated with each message.\n    int messageNumber = 0;\n\n    try\n    {\n        CreateQueue(&quot;.\\\\exampleQueue&quot;, false);\n\n        // Connect to a queue on the local computer.\n        queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Add an event handler for the ReceiveCompleted event.\n        queue-&gt;ReceiveCompleted += gcnew\n            ReceiveCompletedEventHandler(HandleReceiveCompleted);\n\n        // Send a message to the queue.\n        queue-&gt;Send(&quot;Example Message&quot;);\n\n        // Begin the asynchronous receive operation.\n        queue-&gt;BeginReceive(TimeSpan::FromSeconds(10.0), messageNumber++);\n\n        // Simulate doing other work on the current thread.\n        System::Threading::Thread::Sleep(TimeSpan::FromSeconds(10.0));\n    }\n    catch (InvalidOperationException^)\n    {\n        Console::WriteLine(&quot;Please install Message Queuing.&quot;);\n    }\n\n    catch (MessageQueueException^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n    }\n\n    finally\n    {   \n        queue-&gt;Close();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_BeginReceive_System_TimeSpan_System_Object_System_AsyncCallback_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_BeginReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginReceive(TimeSpan,Object,AsyncCallback)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation&#39;s lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginReceive (TimeSpan timeout, object stateObject, AsyncCallback callback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the interval of time to wait for a message to become available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>stateObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A state object, specified by the application, that contains information associated with the asynchronous operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> that will receive the notification of the asynchronous operation completion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the posted asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event is not raised. The other overloads of <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> rely on this component to raise the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> is also raised if a message already exists in the queue.  </p>\n<p> To use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> initiates an asynchronous receive operation; the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> is notified, through the raising of the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event, when a message arrives in the queue. The <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can then access the message by calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a> or retrieving the result using the <a class=\"xref\" href=\"system.messaging.receivecompletedeventargs\" data-linktype=\"relative-path\">ReceiveCompletedEventArgs</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  </p>\n<p> Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method.  </p>\n<p> Once an asynchronous operation completes, you can call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> again in the event handler to keep receiving notifications.  </p>\n<p> The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> returns identifies the asynchronous operation that the method started. You can use this <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> throughout the lifetime of the operation, although you generally do not use it until <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a> is called. However, if you start several asynchronous operations, you can place their <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> to identify the completed operation.  </p>\n<p> The state object associates state information with the operation. For example, if you call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  </p>\n<p> You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.  </p>\n<p> Do not use the asynchronous call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> with transactions. If you want to perform a transactional asynchronous operation, call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a>, and put the transaction and the (synchronous) <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  </p>\n<pre><code>myMessageQueue.BeginTransaction();  \n myMessageQueue.Receive();  \n myMessageQueue.CommitTransaction();\n</code></pre><p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an asynchronous receive operation. The code example sends a message to a local message queue, then calls BeginReceive, passing in: a time-out value of ten seconds; a unique integer that identifies that particular message; and a new instance of <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> that identifies the event handler, <code>MyReceiveCompleted</code>. When a <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event is raised, the event handler receives the message and writes the message body and the integer message identifier to the screen.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueueBeginReceive3#0\">\nusing System;\nusing System.Messaging;\n\npublic class QueueExample\n{\n    // Represents a state object associated with each message.\n    static int messageNumber = 0;\n\n    public static void Main()\n    {\n        // Create a non-transactional queue on the local computer.\n        // Note that the queue might not be immediately accessible, and\n        // therefore this example might throw an exception of type\n        // System.Messaging.MessageQueueException when trying to send a\n        // message to the newly created queue.\n        CreateQueue(&quot;.\\\\exampleQueue&quot;, false);\n\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Send a message to the queue.\n        queue.Send(&quot;Example Message&quot;);\n\n        // Begin the asynchronous receive operation.\n        queue.BeginReceive(TimeSpan.FromSeconds(10.0), messageNumber++,\n            new AsyncCallback(MyReceiveCompleted));\n\t\t\t\n        // Simulate doing other work on the current thread.\n        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10.0));\n\n        return;\n    }\n\n    // Creates a new queue.\n    public static void CreateQueue(string queuePath, bool transactional)\n    {\n        if(!MessageQueue.Exists(queuePath))\n        {\n            MessageQueue.Create(queuePath, transactional);\n        }\n        else\n        {\n            Console.WriteLine(queuePath + &quot; already exists.&quot;);\n        }\n    }\n\n    // Provides an event handler for the ReceiveCompleted event.\n    private static void MyReceiveCompleted(IAsyncResult asyncResult)\n    {\n        // Connect to the queue.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // End the asynchronous receive operation.\n        Message msg = queue.EndReceive(asyncResult);\n\n        // Display the message information on the screen.\n        Console.WriteLine(&quot;Message number: {0}&quot;, (int)asyncResult.AsyncState);\n        Console.WriteLine(&quot;Message body: {0}&quot;, (string)msg.Body);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueueBeginReceive3#0\">#using &lt;System.Messaging.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// Creates a new queue.\nvoid CreateQueue(String^ queuePath, bool transactional)\n{\n    if (!MessageQueue::Exists(queuePath))\n    {\n        MessageQueue^ queue = MessageQueue::Create(queuePath, transactional);\n        queue-&gt;Close();       \n    }\n    else\n    {\n        Console::WriteLine(&quot;{0} already exists.&quot;, queuePath);\n    }\n}\n\n// Provides an event handler for the ReceiveCompleted event.\nvoid HandleReceiveCompleted(IAsyncResult^ asyncResult)\n{\n    // Connect to the queue.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // End the asynchronous receive operation.\n    Message^ msg = queue-&gt;EndReceive(asyncResult);\n\n    // Display the message information on the screen.\n    Console::WriteLine(&quot;Message number: {0}&quot;, asyncResult-&gt;AsyncState);\n    Console::WriteLine(&quot;Message body: {0}&quot;, msg-&gt;Body);\n\n    queue-&gt;Close();\n}\n\nint main()\n{\n    // Represents a state object associated with each message.\n    int messageNumber = 0;\n\n    // Create a non-transactional queue on the local computer.\n    // Note that the queue might not be immediately accessible, and\n    // therefore this example might throw an exception of type\n    // System.Messaging.MessageQueueException when trying to send a\n    // message to the newly created queue.\n    MessageQueue^ queue = nullptr;\n    try\n    {\n        CreateQueue(&quot;.\\\\exampleQueue&quot;, false);\n\n        // Connect to a queue on the local computer.\n        queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Send a message to the queue.\n        queue-&gt;Send(&quot;Example Message&quot;);\n\n        // Begin the asynchronous receive operation.\n        queue-&gt;BeginReceive(TimeSpan::FromSeconds(10.0), messageNumber++,\n            gcnew AsyncCallback(HandleReceiveCompleted));\n\n        // Simulate doing other work on the current thread.\n        System::Threading::Thread::Sleep(TimeSpan::FromSeconds(10.0));\n    }\n    catch (InvalidOperationException^)\n    {\n        Console::WriteLine(&quot;Please install Message Queuing.&quot;);\n    }\n\n    catch (MessageQueueException^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n    }\n\n    finally\n    {   \n        queue-&gt;Close();\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_BeginReceive_System_TimeSpan_System_Messaging_Cursor_System_Object_System_AsyncCallback_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_BeginReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginReceive(TimeSpan,Cursor,Object,AsyncCallback)</div>        \r\n          </div>\r\n    \r\n            <p>Initiates an asynchronous receive operation that has a specified time-out and uses a specified cursor and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public IAsyncResult BeginReceive (TimeSpan timeout, System.Messaging.Cursor cursor, object state, AsyncCallback callback);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the interval of time to wait for a message to become available.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cursor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a> that maintains a specific position in the message queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A state object, specified by the application, that contains information associated with the asynchronous operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>callback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> that receives the notification of the asynchronous operation completion.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the posted asynchronous request.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>cursor</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event is not raised. The other overloads of <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> rely on this component to raise the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> is also raised if a message already exists in the queue.  </p>\n<p> To use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> initiates an asynchronous receive operation; the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> is notified, through the raising of the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event, when a message arrives in the queue. The <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> can then access the message by calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a> or retrieving the result using the <a class=\"xref\" href=\"system.messaging.receivecompletedeventargs\" data-linktype=\"relative-path\">ReceiveCompletedEventArgs</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  </p>\n<p> Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method.  </p>\n<p> Once an asynchronous operation completes, you can call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> again in the event handler to keep receiving notifications.  </p>\n<p> The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> returns identifies the asynchronous operation that the method started. You can use this <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> throughout the lifetime of the operation, although you generally do not use it until <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a> is called. However, if you start several asynchronous operations, you can place their <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> values in an array and specify whether to wait for all operations or any operation to complete. In this case, use the <a class=\"xref\" href=\"system.iasyncresult#System_IAsyncResult_AsyncWaitHandle_\" data-linktype=\"relative-path\">AsyncWaitHandle</a> property of the <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> to identify the completed operation.  </p>\n<p> The state object associates state information with the operation. For example, if you call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  </p>\n<p> You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.  </p>\n<p> Do not use the asynchronous call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> with transactions. If you want to perform a transactional asynchronous operation, call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a>, and put the transaction and the (synchronous) <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  </p>\n<pre><code>myMessageQueue.BeginTransaction();  \n myMessageQueue.Receive();  \n myMessageQueue.CommitTransaction();\n</code></pre><p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ClearConnectionCache\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ClearConnectionCache_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClearConnectionCache()</div>        \r\n          </div>\r\n    \r\n            <p>Clears the connection cache.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void ClearConnectionCache ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you call ClearConnectionCache, the format names stored in the cache are removed and handles opened and stored in the cache are closed.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls ClearConnectionCache.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#8\">        // Call the MessageQueue.ClearConnectionCache method.\n        MessageQueue.ClearConnectionCache();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Close\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Frees all resources allocated by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Close frees all resources associated with a <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>, including shared resources if appropriate. The system re-acquires these resources automatically if they are still available, for example when you call the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Send_System_Object_\" data-linktype=\"relative-path\">Send(Object)</a> method, as in the following C# code.  </p>\n<pre><code>myMessageQueue.Send(&quot;Text 1.&quot;);  \nmyMessageQueue.Close();  \nmyMessageQueue.Send(&quot;Text 2.&quot;); //Resources are re-acquired.\n</code></pre><p> When you call Close, all <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> properties that directly access the Message Queuing queue are cleared out. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a>, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a>, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a>, and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MessageReadPropertyFilter_\" data-linktype=\"relative-path\">MessageReadPropertyFilter</a> all remain as they were.  </p>\n<p> Close does not always free the read and write handles to a queue, because they might be shared. You can take any of the following steps to ensure that Close frees the read and write handles to a queue:  </p>\n<ul>\n<li><p>Create the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> with exclusive access. To do so, call the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue__ctor_System_String_System_Boolean_\" data-linktype=\"relative-path\">MessageQueue(String,Boolean)</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue__ctor_System_String_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">MessageQueue(String,Boolean,Boolean)</a> constructor, and set the <code>sharedModeDenyReceive</code> parameter to <code>true</code>.  </p>\n</li>\n<li><p>Create the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> with connection caching disabled. To do so, call the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue__ctor_System_String_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">MessageQueue(String,Boolean,Boolean)</a> constructor and set the <code>enableConnectionCache</code> parameter to <code>false</code>.  </p>\n</li>\n<li><p>Disable connection caching. To do so, set the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EnableConnectionCache_\" data-linktype=\"relative-path\">EnableConnectionCache</a> property to <code>false</code>.  </p>\n<p>You should call Close for a queue before you delete the queue on the Message Queuing server. Otherwise, messages sent to the queue could throw exceptions or appear in the dead-letter queue.  </p>\n<p>The following table shows whether this method is available in various Workgroup modes.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example closes a Message Queuing queue.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.Close#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example. \n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t \n\t\t// This example closes a queue and frees its \n\t\t// resources.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Send a message to a queue.\n\t\t\tmyNewQueue.SendMessage();\n\n\t\t\t// Receive a message from a queue.\n\t\t\tmyNewQueue.ReceiveMessage();\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Sends a message to a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\t\t\t// Connect to a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Send a message to the queue.\n\t\t\tmyQueue.Send(&quot;My message data1.&quot;);\n\t\t\t\n\t\t\t// Explicitly release resources.\n\t\t\tmyQueue.Close();\n\n\t\t\t// Attempt to reacquire resources.\n\t\t\tmyQueue.Send(&quot;My message data2.&quot;);\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message from a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic  void ReceiveMessage()\n\t\t{\n\t\t\t// Connect to the a on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Receive and format the message. \n\t\t\t\tMessage myMessage1 = myQueue.Receive();\n\t\t\t\tMessage myMessage2 = myQueue.Receive();\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle sources of any MessageQueueException.\n\t\t\t}\n\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\tfinally\n\t\t\t{\n\t\t\t\t// Free resources.\n\t\t\t\tmyQueue.Close();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.Close#1\">Imports System\nImports System.Messaging\n\n  \n&#39;Provides a container class for the example.\n\nPublic Class MyNewQueue\n\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t \n        &#39; This example closes a queue and frees its \n        &#39; resources.\n \n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Send a message to a queue.\n            myNewQueue.SendMessage()\n\n            &#39; Receive a message from a queue.\n            myNewQueue.ReceiveMessage()\n\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Sends a message to a queue.\n \n\n        Public Sub SendMessage()\n\n            &#39; Connect to a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Send a message to the queue.\n            myQueue.Send(&quot;My message data1.&quot;)\n\n            &#39; Explicitly release resources.\n            myQueue.Close()\n\n            &#39; Attempt to reacquire resources.\n            myQueue.Send(&quot;My message data2.&quot;)\n\n            Return\n\n        End Sub &#39;SendMessage\n\n\n\n        &#39; Receives a message from a queue.\n\n\n        Public Sub ReceiveMessage()\n\n            &#39; Connect to the a on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Set the formatter to indicate the body contains an \n            &#39; Order.\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            Try\n                &#39; Receive and format the message. \n                Dim myMessage1 As Message = myQueue.Receive()\n                Dim myMessage2 As Message = myQueue.Receive()\n\n            Catch\n                &#39; Handle sources of any MessageQueueException.\n\n                &#39; Catch other exceptions as necessary.\n\n            Finally\n\n                &#39; Free resources.\n                myQueue.Close()\n\n            End Try\n\n            Return\n\n        End Sub &#39;ReceiveMessage\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.Close#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n\n   // Sends a message to a queue.\n   void SendMessage()\n   {\n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Send a message to the queue.\n      myQueue-&gt;Send( &quot;My message data1.&quot; );\n\n      // Explicitly release resources.\n      myQueue-&gt;Close();\n\n      // Attempt to reaquire resources.\n      myQueue-&gt;Send( &quot;My message data2.&quot; );\n      return;\n   }\n\n   // Receives a message from a queue.\n   void ReceiveMessage()\n   {\n      // Connect to the a on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Set the formatter to indicate body contains an Order.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      try\n      {\n         // Receive and format the message. \n         Message^ myMessage1 = myQueue-&gt;Receive();\n         Message^ myMessage2 = myQueue-&gt;Receive();\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle sources of any MessageQueueException.\n      }\n      finally\n      {\n         // Free resources.\n         myQueue-&gt;Close();\n      }\n\n      return;\n   }\n};\n\n\n// Provides an entry point into the application.\n// This example closes a queue and frees its \n// resources.\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Send a message to a queue.\n   myNewQueue-&gt;SendMessage();\n\n   // Receive a message from a queue.\n   myNewQueue-&gt;ReceiveMessage();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Create_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a non-transactional Message Queuing queue at the specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Messaging.MessageQueue Create (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path of the queue to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> that represents the new queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is <code>null</code> or is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>A queue already exists at the specified path.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to create a non-transactional Message Queuing queue.  </p>\n<p> To create a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class in your application and bind it to an existing queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue__ctor_\" data-linktype=\"relative-path\">MessageQueue</a> constructor. To create a new queue in Message Queuing, call Create.  </p>\n<p> The syntax for the <code>path</code> parameter depends on the type of queue it references, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Queue type</th>\n<th>Syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Public queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Private queue</td>\n<td><code>MachineName</code>\\<code>Private$</code>\\<code>QueueName</code></td>\n</tr>\n</tbody>\n</table>\n<p> Use &quot;.&quot; for the local computer. For more syntax, see the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates public and private queues. It sends a message to selected queues.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue.Create_path#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// This example creates new public and private queues.\nref class MyNewQueue\n{\npublic:\n   void CreatePublicQueues()\n   {\n      \n      // Create and connect to a public Message Queuing queue.\n      if (  !MessageQueue::Exists( &quot;.\\<br>ewPublicQueue&quot; ) )\n      {\n         \n         // Create the queue if it does not exist.\n         MessageQueue^ myNewPublicQueue = MessageQueue::Create( &quot;.\\<br>ewPublicQueue&quot; );\n         \n         // Send a message to the queue.\n         myNewPublicQueue-&gt;Send( &quot;My message data.&quot; );\n      }\n\n      \n      // Create (but do not connect to) a second public queue.\n      if (  !MessageQueue::Exists( &quot;.\\<br>ewPublicResponseQueue&quot; ) )\n      {\n         MessageQueue::Create( &quot;.\\<br>ewPublicResponseQueue&quot; );\n      }\n\n      return;\n   }\n\n\n   // Creates private queues and sends a message.\n   void CreatePrivateQueues()\n   {\n      \n      // Create and connect to a private Message Queuing queue.\n      if (  !MessageQueue::Exists( &quot;.\\\\Private$\\<br>ewPrivQueue&quot; ) )\n      {\n         \n         // Create the queue if it does not exist.\n         MessageQueue^ myNewPrivateQueue = MessageQueue::Create( &quot;.\\\\Private$\\<br>ewPrivQueue&quot; );\n         \n         // Send a message to the queue.\n         myNewPrivateQueue-&gt;Send( &quot;My message data.&quot; );\n      }\n\n      \n      // Create (but do not connect to) a second private queue.\n      if (  !MessageQueue::Exists( &quot;.\\\\Private$\\<br>ewResponseQueue&quot; ) )\n      {\n         MessageQueue::Create( &quot;.\\\\Private$\\<br>ewResponseQueue&quot; );\n      }\n\n      return;\n   }\n\n};\n\n\n// Provides an entry point into the application.\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Create public and private queues.\n   myNewQueue-&gt;CreatePublicQueues();\n   myNewQueue-&gt;CreatePrivateQueues();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.Create_path#1\">Imports System\nImports System.Messaging\n\n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n\n\n  \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example creates new public and private \n        &#39; queues.\n \n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Create public and private queues.\n            myNewQueue.CreatePublicQueues()\n            myNewQueue.CreatePrivateQueues()\n\n            Return\n\n        End Sub &#39;Main\n\n\n \n        &#39; Creates public queues and sends a message.\n \n\n        Public Sub CreatePublicQueues()\n\n            &#39; Create and connect to a public Message Queuing queue.\n            If Not MessageQueue.Exists(&quot;.<br>ewPublicQueue&quot;) Then\n                &#39; Create the queue if it does not exist.\n                Dim myNewPublicQueue As MessageQueue = _\n                    MessageQueue.Create(&quot;.<br>ewPublicQueue&quot;)\n\n                &#39; Send a message to the queue.\n                myNewPublicQueue.Send(&quot;My message data.&quot;)\n            End If\n\n            &#39; Create (but do not connect to) a second public queue.\n            If Not MessageQueue.Exists(&quot;.<br>ewPublicResponseQueue&quot;) _\n                Then\n\n                MessageQueue.Create(&quot;.<br>ewPublicResponseQueue&quot;)\n            End If\n\n            Return\n\n        End Sub &#39;CreatePublicQueues\n\n\n\n        &#39; Creates private queues and sends a message.\n\n\n        Public Sub CreatePrivateQueues()\n\n            &#39; Create and connect to a private Message Queuing queue.\n            If Not MessageQueue.Exists(&quot;.\\Private$<br>ewPrivateQueue&quot;) _\n                Then\n\n                &#39; Create the queue if it does not exist.\n                Dim myNewPrivateQueue As MessageQueue = _\n                    MessageQueue.Create(&quot;.\\Private$<br>ewPrivateQueue&quot;)\n\n                &#39; Send a message to the queue.\n                myNewPrivateQueue.Send(&quot;My message data.&quot;)\n            End If\n\n            &#39; Create (but do not connect to) a second private queue.\n            If Not MessageQueue.Exists(&quot;.\\Private$<br>ewResponseQueue&quot;) _\n                Then\n\n                MessageQueue.Create(&quot;.\\Private$<br>ewResponseQueue&quot;)\n            End If\n\n            Return\n\n        End Sub &#39;CreatePrivateQueues\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.Create_path#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example creates new public and private \n\t\t// queues.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Create public and private queues.\n\t\t\tmyNewQueue.CreatePublicQueues();\n\t\t\tmyNewQueue.CreatePrivateQueues();\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Creates public queues and sends a message.\n\t\t//**************************************************\n\t\t\n\t\tpublic void CreatePublicQueues()\n\t\t{\n\n\t\t\t// Create and connect to a public Message Queuing queue.\n\t\t\tif (!MessageQueue.Exists(&quot;.\\<br>ewPublicQueue&quot;))\n\t\t\t{\n\t\t\t\t// Create the queue if it does not exist.\n\t\t\t\tMessageQueue myNewPublicQueue = \n\t\t\t\t\tMessageQueue.Create(&quot;.\\<br>ewPublicQueue&quot;);\n\n\t\t\t\t// Send a message to the queue.\n\t\t\t\tmyNewPublicQueue.Send(&quot;My message data.&quot;);\n\t\t\t}\n\n\t\t\t// Create (but do not connect to) a second public queue.\n\t\t\tif (!MessageQueue.Exists(&quot;.\\<br>ewPublicResponseQueue&quot;))\n\t\t\t{\n\t\t\t\tMessageQueue.Create(&quot;.\\<br>ewPublicResponseQueue&quot;);\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Creates private queues and sends a message.\n\t\t//**************************************************\n\t\t\n\t\tpublic void CreatePrivateQueues()\n\t\t{\n\n\t\t\t// Create and connect to a private Message Queuing queue.\n\t\t\tif (!MessageQueue.Exists(&quot;.\\\\Private$\\<br>ewPrivQueue&quot;))\n\t\t\t{\n\t\t\t\t// Create the queue if it does not exist.\n\t\t\t\tMessageQueue myNewPrivateQueue = \n\t\t\t\t\tMessageQueue.Create(&quot;.\\\\Private$\\<br>ewPrivQueue&quot;);\n\n\t\t\t\t// Send a message to the queue.\n\t\t\t\tmyNewPrivateQueue.Send(&quot;My message data.&quot;);\n\t\t\t}\n\n\t\t\t// Create (but do not connect to) a second private queue.\n\t\t\tif (!MessageQueue.Exists(&quot;.\\\\Private$\\<br>ewResponseQueue&quot;))\n\t\t\t{\n\t\t\t\tMessageQueue.Create(&quot;.\\\\Private$\\<br>ewResponseQueue&quot;);\n\t\t\t}\n\t\t\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Create_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Create_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Create(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a transactional or non-transactional Message Queuing queue at the specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Messaging.MessageQueue Create (string path, bool transactional);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path of the queue to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactional</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to create a transactional queue; <code>false</code> to create a non-transactional queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> that represents the new queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is <code>null</code> or is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>A queue already exists at the specified path.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use this overload to create a transactional queue in Message Queuing. You can create a non-transactional queue, by setting the <code>transactional</code> parameter to <code>false</code> or by calling the other overload of <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>.  </p>\n<p> To create a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class in your application and bind it to an existing queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue__ctor_\" data-linktype=\"relative-path\">MessageQueue</a>constructor. To create a new queue in Message Queuing, call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a>.  </p>\n<p> The syntax for the <code>path</code> parameter depends on the type of queue it references, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Queue type</th>\n<th>Syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Public queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Private queue</td>\n<td><code>MachineName</code>\\<code>Private$</code>\\<code>QueueName</code></td>\n</tr>\n</tbody>\n</table>\n<p> Use &quot;.&quot; for the local computer. For more syntax, see the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates public and private transactional queues. It sends a message to selected queues.  </p>\n<pre><code class=\"lang-vb\" name=\"MessageQueue.Create_PathTransactional#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example creates new transactional queues.\n\n\n        Public Shared Sub Main()\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue\n\n            &#39; Create transactional queues.\n            myNewQueue.CreatePublicTransactionalQueues()\n            myNewQueue.CreatePrivateTransactionalQueues()\n\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Creates public transactional queues and sends a \n        &#39; message.\n \n\n        Public Sub CreatePublicTransactionalQueues()\n\n            &#39; Create and connect to a public Message Queuing queue.\n            If Not MessageQueue.Exists(&quot;.<br>ewPublicTransQueue1&quot;) Then\n\n                &#39; Create the queue if it does not exist.\n                MessageQueue.Create(&quot;.<br>ewPublicTransQueue1&quot;, True)\n\n            End If\n\n            &#39; Connect to the queue.\n            Dim myNewPublicQueue As New MessageQueue(&quot;.<br>ewPublicTransQueue1&quot;)\n\n            &#39; Create a transaction.\n            Dim myTransaction As New MessageQueueTransaction\n\n            &#39; Begin the transaction.\n            myTransaction.Begin()\n\n            &#39; Send the message.\n            myNewPublicQueue.Send(&quot;My Message Data.&quot;, myTransaction)\n\n            &#39; Commit the transaction.\n            myTransaction.Commit()\n\n            If Not MessageQueue.Exists(&quot;.<br>ewPublicTransQueue2&quot;) Then\n\n                &#39; Create (but do not connect to) a second queue.\n                MessageQueue.Create(&quot;.<br>ewPublicTransQueue2&quot;, True)\n            End If\n\n            Return\n\n        End Sub &#39;CreatePublicTransactionalQueues\n\n\n\n        &#39; Creates private queues and sends a message.\n\n\n        Public Sub CreatePrivateTransactionalQueues()\n\n            &#39; Create and connect to a private Message Queuing queue.\n            If Not MessageQueue.Exists(&quot;.\\Private$<br>ewPrivTransQ1&quot;) _\n                Then\n\n                &#39; Create the queue if it does not exist.\n                MessageQueue.Create(&quot;.\\Private$<br>ewPrivTransQ1&quot;, True)\n\n            End If\n\n            &#39; Connect to the queue.\n            Dim myNewPrivateQueue As New MessageQueue(&quot;.\\Private$<br>ewPrivTransQ1&quot;)\n\n            &#39; Create a transaction.\n            Dim myTransaction As New MessageQueueTransaction\n\n            &#39; Begin the transaction.\n            myTransaction.Begin()\n\n            &#39; Send the message.\n            myNewPrivateQueue.Send(&quot;My Message Data.&quot;, myTransaction)\n\n            &#39; Commit the transaction.\n            myTransaction.Commit()\n\n            &#39; Create (but do not connect to) a second private queue.\n            If Not MessageQueue.Exists(&quot;.\\Private$<br>ewPrivTransQ2&quot;) _\n                Then\n\n                MessageQueue.Create(&quot;.\\Private$<br>ewPrivTransQ2&quot;, True)\n            End If\n\n            Return\n\n        End Sub &#39;CreatePrivateTransactionalQueues\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.Create_PathTransactional#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n\n   // Creates public transactional queues and sends a \n   // message.\n   void CreatePublicTransactionalQueues()\n   {\n      \n      // Create and connect to a public message Queuing queue.\n      if (  !MessageQueue::Exists( &quot;.\\<br>ewPublicTransQueue1&quot; ) )\n      {\n         \n         // Create the queue if it does not exist.\n         MessageQueue::Create( &quot;.\\<br>ewPublicTransQueue1&quot;, true );\n      }\n\n      \n      // Connect to the queue.\n      MessageQueue^ myNewPublicQueue = gcnew MessageQueue( &quot;.\\<br>ewPublicTransQueue1&quot; );\n      \n      // Create a transaction.\n      MessageQueueTransaction^ myTransaction = gcnew MessageQueueTransaction;\n      \n      // Begin the transaction.\n      myTransaction-&gt;Begin();\n      \n      // Send the message.\n      myNewPublicQueue-&gt;Send( &quot;My Message Data.&quot;, myTransaction );\n      \n      // Commit the transaction.\n      myTransaction-&gt;Commit();\n      if (  !MessageQueue::Exists( &quot;.\\<br>ewPublicTransQueue2&quot; ) )\n      {\n         \n         // Create (but do not connect to) second public queue\n         MessageQueue::Create( &quot;.\\<br>ewPublicTransQueue2&quot;, true );\n      }\n\n      return;\n   }\n\n\n   // Creates private queues and sends a message.\n   void CreatePrivateTransactionalQueues()\n   {\n      \n      // Create and connect to a private Message Queuing queue.\n      if (  !MessageQueue::Exists( &quot;.\\\\Private$\\<br>ewPrivTransQ1&quot; ) )\n      {\n         \n         // Create the queue if it does not exist.\n         MessageQueue^ myNewPrivateQueue = MessageQueue::Create( &quot;.\\\\Private$\\<br>ewPrivTransQ1&quot;, true );\n      }\n\n      \n      // Connect to the queue.\n      MessageQueue^ myNewPrivateQueue = gcnew MessageQueue( &quot;.\\\\Private$\\<br>ewPrivTransQ1&quot; );\n      \n      // Create a transaction.\n      MessageQueueTransaction^ myTransaction = gcnew MessageQueueTransaction;\n      \n      // Begin the transaction.\n      myTransaction-&gt;Begin();\n      \n      // Send the message.\n      myNewPrivateQueue-&gt;Send( &quot;My Message Data.&quot;, myTransaction );\n      \n      // Commit the transaction.\n      myTransaction-&gt;Commit();\n      \n      // Create (but do not connect to) a second private queue.\n      if (  !MessageQueue::Exists( &quot;.\\\\Private$\\<br>ewPrivTransQ2&quot; ) )\n      {\n         MessageQueue::Create( &quot;.\\\\Private$\\<br>ewPrivTransQ2&quot;, true );\n      }\n\n      return;\n   }\n\n};\n\n\n// Provides an entry point into the application.\n// This example creates new transactional queues.\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Create transactional queues.\n   myNewQueue-&gt;CreatePublicTransactionalQueues();\n   myNewQueue-&gt;CreatePrivateTransactionalQueues();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.Create_PathTransactional#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n    /// &lt;summary&gt;\n    /// Provides a container class for the example.\n    /// &lt;/summary&gt;\n    public class MyNewQueue\n    {\n\n        //**************************************************\n        // Provides an entry point into the application.\n        //\t\t \n        // This example creates new transactional queues.\n        //**************************************************\n\n        public static void Main()\n        {\n            // Create a new instance of the class.\n            MyNewQueue myNewQueue = new MyNewQueue();\n\n            // Create transactional queues.\n            myNewQueue.CreatePublicTransactionalQueues();\n            myNewQueue.CreatePrivateTransactionalQueues();\n\n            return;\n        }\n\n\n        //**************************************************\n        // Creates public transactional queues and sends a \n        // message.\n        //**************************************************\n\t\t\n        public void CreatePublicTransactionalQueues()\n        {\n\n            // Create and connect to a public Message Queuing queue.\n            if (!MessageQueue.Exists(&quot;.\\<br>ewPublicTransQueue1&quot;))\n            {\n                // Create the queue if it does not exist.\n                MessageQueue.Create(&quot;.\\<br>ewPublicTransQueue1&quot;, true);\n            }\n\n            // Connect to the queue.\n            MessageQueue myNewPublicQueue =\n                new MessageQueue(&quot;.\\<br>ewPublicTransQueue1&quot;);\n\n            // Send a message to the queue.\n            // Create a transaction.\n            MessageQueueTransaction myTransaction = new \n                MessageQueueTransaction();\n\n            // Begin the transaction.\n            myTransaction.Begin();\n\n            // Send the message.\n            myNewPublicQueue.Send(&quot;My Message Data.&quot;, myTransaction);\n\n            // Commit the transaction.\n            myTransaction.Commit();\n\n            if (!MessageQueue.Exists(&quot;.\\<br>ewPublicTransQueue2&quot;))\n            {\n                // Create (but do not connect to) second public queue.\n                MessageQueue.Create(&quot;.\\<br>ewPublicTransQueue2&quot;, true);\n            }\n\n            return;\n\n        }\n\n\n        //**************************************************\n        // Creates private queues and sends a message.\n        //**************************************************\n\t\t\n        public void CreatePrivateTransactionalQueues()\n        {\n\n            // Create and connect to a private Message Queuing queue.\n            if (!MessageQueue.Exists(&quot;.\\\\Private$\\<br>ewPrivTransQ1&quot;))\n            {\n                // Create the queue if it does not exist.\n                MessageQueue.Create(&quot;.\\\\Private$\\<br>ewPrivTransQ1&quot;, true);\n            }\n\n            // Connect to the queue.\n            MessageQueue myNewPrivateQueue =\n                new MessageQueue(&quot;.\\\\Private$\\<br>ewPrivTransQ1&quot;);\n\n            // Send a message to the queue.\n            // Create a transaction.\n            MessageQueueTransaction myTransaction = new \n                MessageQueueTransaction();\n\n            // Begin the transaction.\n            myTransaction.Begin();\n\n            // Send the message.\n            myNewPrivateQueue.Send(&quot;My Message Data.&quot;, myTransaction);\n\n            // Commit the transaction.\n            myTransaction.Commit();\n\n            // Create (but do not connect to) a second private queue.\n            if (!MessageQueue.Exists(&quot;.\\\\Private$\\<br>ewPrivTransQ2&quot;))\n            {\n                MessageQueue.Create(&quot;.\\\\Private$\\<br>ewPrivTransQ2&quot;, \n                    true);\n            }\n\n            return;\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_CreateCursor\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_CreateCursor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateCursor()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a> for the current message queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Cursor CreateCursor ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a></div>\r\n                  </div>\r\n                  <p>A new <a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a> for the current message queue. This cursor is used to maintain a specific location in the queue when reading the queue&#39;s messages.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Delete_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Delete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delete(String)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes a queue on a Message Queuing server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Delete (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The location of the queue to be deleted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is <code>null</code> or is an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The syntax for the <code>path</code> parameter is not valid.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The syntax for the <code>path</code> parameter depends on the type of queue.  </p>\n<table>\n<thead>\n<tr>\n<th>Queue type</th>\n<th>Syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Public queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code></td>\n</tr>\n<tr>\n<td>Private queue</td>\n<td><code>MachineName</code>\\<code>Private$</code>\\<code>QueueName</code></td>\n</tr>\n</tbody>\n</table>\n<p> For more syntax, see the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property.  </p>\n<p> Alternatively, you can use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_FormatName_\" data-linktype=\"relative-path\">FormatName</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a> to describe the queue path.  </p>\n<table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Format name</td>\n<td>FormatName:[ <em>format name</em> ]</td>\n</tr>\n<tr>\n<td>Label</td>\n<td>Label:[ <em>label</em> ]</td>\n</tr>\n</tbody>\n</table>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example deletes a Message Queuing queue, if it exists.  </p>\n<pre><code class=\"lang-vb\" name=\"MessageQueue.ExistsDelete#1\">Imports System\nImports System.Messaging\n\n\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example verifies existence and attempts to \n        &#39; delete a queue.\n        \n\n        Public Shared Sub Main()\n\n            &#39; Determine whether the queue exists.\n            If MessageQueue.Exists(&quot;.\\myQueue&quot;) Then\n\n                Try\n\n                    &#39; Delete the queue.\n                    MessageQueue.Delete(&quot;.\\myQueue&quot;)\n\n                Catch e As MessageQueueException\n\n                    If e.MessageQueueErrorCode = _\n                        MessageQueueErrorCode.AccessDenied Then\n\n                        Console.WriteLine(&quot;Access is denied. &quot; _\n                            + &quot;Queue might be a system queue.&quot;)\n                    End If\n\n                    &#39; Handle other sources of exceptions as necessary.\n\n                End Try\n\n            End If\n\n\n            Return\n\n        End Sub &#39;Main\n\nEnd Class &#39;MyNewQueue \n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.ExistsDelete#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example verifies existence and attempts to \n\t\t// delete a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\n\t\t\t// Determine whether the queue exists.\n\t\t\tif (MessageQueue.Exists(&quot;.\\\\myQueue&quot;))\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// Delete the queue.\n\t\t\t\t\tMessageQueue.Delete(&quot;.\\\\myQueue&quot;);\n\t\t\t\t}\n\t\t\t\tcatch(MessageQueueException e)\n\t\t\t\t{\n\t\t\t\t\tif(e.MessageQueueErrorCode == \n\t\t\t\t\t\tMessageQueueErrorCode.AccessDenied)\n\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(&quot;Access is denied. &quot; + \n\t\t\t\t\t\t\t&quot;Queue might be a system queue.&quot;);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Handle other sources of MessageQueueException.\n\t\t\t\t}\n\n\t\t\t}\n\t\t\n\t\t\treturn;\n\t\t}\n\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.ExistsDelete#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nint main()\n{\n   \n   // Determine whether the queue exists.\n   if ( MessageQueue::Exists( &quot;.\\\\myQueue&quot; ) )\n   {\n      try\n      {\n         \n         // Delete the queue.\n         MessageQueue::Delete( &quot;.\\\\myQueue&quot; );\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         if ( e-&gt;MessageQueueErrorCode == MessageQueueErrorCode::AccessDenied )\n         {\n            Console::WriteLine( &quot;Access is denied. Queue might be a system queue.&quot; );\n         }\n         \n         // Handle other sources of MessageQueueException.\n      }\n\n   }\n\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Disposes of the resources (other than memory) used by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call Dispose when you are finished using the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. The Dispose method leaves the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> in an unusable state. After calling Dispose, you must release all references to the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> so the memory it was occupying can be reclaimed by garbage collection.  </p>\n<p> You should call Dispose before you release your last reference to the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. Otherwise, the resources the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> is using will not be freed until garbage collection calls the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> object&#39;s destructor.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_EndPeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndPeek(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Completes the specified asynchronous peek operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message EndPeek (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the asynchronous peek operation to finish and from which to retrieve an end result.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> associated with the completed asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>asyncResult</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The syntax of the <code>asyncResult</code> parameter is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event is raised, EndPeek completes the operation that was initiated by the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> call. To do so, EndPeek peeks the message.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> can specify a time-out, which causes the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event to be raised if the time-out occurs before a message appears in the queue. When a time-out occurs without a message arriving in the queue, a subsequent call to EndPeek throws an exception.  </p>\n<p> EndPeek is used to read the message that caused the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event to be raised.  </p>\n<p> If you want to continue to asynchronously peek messages, you can again call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> after calling EndPeek.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an event handler named <code>MyPeekCompleted</code>, attaches it to the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event handler delegate, and calls <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> to initiate an asynchronous peek operation on the queue that is located at the path &quot;.\\myQueue&quot;. When a <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event is raised, the example peeks the message and writes its body to the screen. The example then calls <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> again to initiate a new asynchronous peek operation.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue.BeginPeek_noparms#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// This example performs asynchronous peek operation\n// processing.\n//*************************************************\nref class MyNewQueue\n{\npublic:\n\n   // Provides an event handler for the PeekCompleted\n   // event.\n   static void MyPeekCompleted( Object^ source, PeekCompletedEventArgs^ asyncResult )\n   {\n      // Connect to the queue.\n      MessageQueue^ mq = dynamic_cast&lt;MessageQueue^&gt;(source);\n\n      // End the asynchronous peek operation.\n      Message^ m = mq-&gt;EndPeek( asyncResult-&gt;AsyncResult );\n\n      // Display message information on the screen.\n      Console::WriteLine( &quot;Message: {0}&quot;, static_cast&lt;String^&gt;(m-&gt;Body) );\n\n      // Restart the asynchronous peek operation.\n      mq-&gt;BeginPeek();\n      return;\n   }\n};\n\n// Provides an entry point into the application.\n//         \nint main()\n{\n   // Create an instance of MessageQueue. Set its formatter.\n   MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n   array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n   p[ 0 ] = String::typeid;\n   myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n   // Add an event handler for the PeekCompleted event.\n   myQueue-&gt;PeekCompleted += gcnew PeekCompletedEventHandler( MyNewQueue::MyPeekCompleted );\n\n   // Begin the asynchronous peek operation.\n   myQueue-&gt;BeginPeek();\n\n   // Do other work on the current thread.\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.BeginPeek_noparms#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example performs asynchronous peek operation\n\t\t// processing.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create an instance of MessageQueue. Set its formatter.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Add an event handler for the PeekCompleted event.\n\t\t\tmyQueue.PeekCompleted += new \n\t\t\t\tPeekCompletedEventHandler(MyPeekCompleted);\n\t\t\t\n\t\t\t// Begin the asynchronous peek operation.\n\t\t\tmyQueue.BeginPeek();\n\t\t\t\n\t\t\t// Do other work on the current thread.\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Provides an event handler for the PeekCompleted\n\t\t// event.\n\t\t//**************************************************\n\t\t\n\t\tprivate static void MyPeekCompleted(Object source, \n\t\t\tPeekCompletedEventArgs asyncResult)\n\t\t{\n\t\t\t// Connect to the queue.\n\t\t\tMessageQueue mq = (MessageQueue)source;\n\n\t\t\t// End the asynchronous peek operation.\n\t\t\tMessage m = mq.EndPeek(asyncResult.AsyncResult);\n\n\t\t\t// Display message information on the screen.\n\t\t\tConsole.WriteLine(&quot;Message: &quot; + (string)m.Body);\n\n\t\t\t// Restart the asynchronous peek operation.\n\t\t\tmq.BeginPeek();\n\t\t\t\n\t\t\treturn; \n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.BeginPeek_noparms#1\">Imports System\nImports System.Messaging\n\n\n\n\n\n&#39; Provides a container class for the example.\nPublic Class MyNewQueue\n\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example performs asynchronous peek operation\n        &#39; processing.\n\n\n        Public Shared Sub Main()\n            &#39; Create an instance of MessageQueue. Set its formatter.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Add an event handler for the PeekCompleted event.\n            AddHandler myQueue.PeekCompleted, AddressOf _\n                MyPeekCompleted\n\n            &#39; Begin the asynchronous peek operation.\n            myQueue.BeginPeek()\n\n            &#39; Do other work on the current thread.\n            Return\n        End Sub &#39;Main\n\n\n        &#39;**************************************************\n        &#39; Provides an event handler for the PeekCompleted\n        &#39; event.\n        &#39;**************************************************\n\n        Private Shared Sub MyPeekCompleted(ByVal [source] As _\n            [Object], ByVal asyncResult As PeekCompletedEventArgs)\n\n            &#39; Connect to the queue.\n            Dim mq As MessageQueue = CType([source], MessageQueue)\n\n            &#39; End the asynchronous peek operation.\n            Dim m As Message = mq.EndPeek(asyncResult.AsyncResult)\n\n            &#39; Display message information on the screen.\n            Console.WriteLine((&quot;Message: &quot; + CStr(m.Body)))\n\n            &#39; Restart the asynchronous peek operation.\n            mq.BeginPeek()\n\n            Return\n\n        End Sub &#39;MyPeekCompleted\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_EndReceive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndReceive(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Completes the specified asynchronous receive operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message EndReceive (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that identifies the asynchronous receive operation to finish and from which to retrieve an end result.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> associated with the completed asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>asyncResult</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The syntax of the <code>asyncResult</code> parameter is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event is raised, EndReceive completes the operation that was initiated by the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> call. To do so, EndReceive receives the message.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> can specify a time-out, which causes the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event to be raised if the time-out occurs before a message appears in the queue. When a time-out occurs without a message arriving in the queue, a subsequent call to EndReceive throws an exception.  </p>\n<p> EndReceive is used to read (removing from the queue) the message that caused the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveCompleted\" data-linktype=\"relative-path\">ReceiveCompleted</a> event to be raised.  </p>\n<p> If you want to continue to asynchronously receive messages, you can again call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> after calling EndReceive.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example chains asynchronous requests. It assumes there is a queue on the local computer called &quot;myQueue&quot;. The <code>Main</code> function begins the asynchronous operation that is handled by the <code>MyReceiveCompleted</code> routine. <code>MyReceiveCompleted</code> processes the current message and begins a new asynchronous receive operation.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.BeginReceive_noparms_combined#1\">using System;\nusing System.Messaging;\nusing System.Threading;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\t\t// Define static class members.\n\t\tstatic ManualResetEvent signal = new ManualResetEvent(false);\n\t\tstatic int count = 0;\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example performs asynchronous receive\n\t\t// operation processing.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create an instance of MessageQueue. Set its formatter.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Add an event handler for the ReceiveCompleted event.\n\t\t\tmyQueue.ReceiveCompleted += \n\t\t\t\tnew ReceiveCompletedEventHandler(MyReceiveCompleted);\n\t\t\t\n\t\t\t// Begin the asynchronous receive operation.\n\t\t\tmyQueue.BeginReceive();\n\n\t\t\tsignal.WaitOne();\n\t\t\t\n\t\t\t// Do other work on the current thread.\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//***************************************************\n\t\t// Provides an event handler for the ReceiveCompleted\n\t\t// event.\n\t\t//***************************************************\n\t\t\n\t\tprivate static void MyReceiveCompleted(Object source, \n\t\t\tReceiveCompletedEventArgs asyncResult)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Connect to the queue.\n\t\t\t\tMessageQueue mq = (MessageQueue)source;\n\n\t\t\t\t// End the asynchronous receive operation.\n\t\t\t\tMessage m = mq.EndReceive(asyncResult.AsyncResult);\n\t\t\t\t\n\t\t\t\tcount += 1;\n\t\t\t\tif (count == 10)\n\t\t\t\t{\n\t\t\t\t\tsignal.Set();\n\t\t\t\t}\n\n\t\t\t\t// Restart the asynchronous receive operation.\n\t\t\t\tmq.BeginReceive();\n\t\t\t}\n\t\t\tcatch(MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle sources of MessageQueueException.\n\t\t\t}\n\t\t\t\n\t\t\t// Handle other exceptions.\n\t\t\t\n\t\t\treturn; \n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.BeginReceive_noparms_combined#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Threading;\n\nref class MyNewQueue\n{\npublic:\n\n   // Define static class members.\n   static ManualResetEvent^ signal = gcnew ManualResetEvent( false );\n   static int count = 0;\n\n   // Provides an event handler for the ReceiveCompleted\n   // event.\n   static void MyReceiveCompleted( Object^ source, ReceiveCompletedEventArgs^ asyncResult )\n   {\n      try\n      {\n         // Connect to the queue.\n         MessageQueue^ mq = dynamic_cast&lt;MessageQueue^&gt;(source);\n\n         // End the asynchronous receive operation.\n         mq-&gt;EndReceive( asyncResult-&gt;AsyncResult );\n         count += 1;\n         if ( count == 10 )\n         {\n            signal-&gt;Set();\n         }\n\n         // Restart the asynchronous receive operation.\n         mq-&gt;BeginReceive();\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle sources of MessageQueueException.\n      }\n\n      // Handle other exceptions.\n      return;\n   }\n};\n\n// Provides an entry point into the application.\n//         \n// This example performs asynchronous receive\n// operation processing.\nint main()\n{\n   // Create an instance of MessageQueue. Set its formatter.\n   MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n   array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n   p[ 0 ] = String::typeid;\n   myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n   // Add an event handler for the ReceiveCompleted event.\n   myQueue-&gt;ReceiveCompleted += gcnew ReceiveCompletedEventHandler( MyNewQueue::MyReceiveCompleted );\n\n   // Begin the asynchronous receive operation.\n   myQueue-&gt;BeginReceive();\n   MyNewQueue::signal-&gt;WaitOne();\n\n   // Do other work on the current thread.\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.BeginReceive_noparms_combined#1\">Imports System\nImports System.Messaging\nImports System.Threading\n\n\n\n\n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n\n        &#39; Define static class members.\n        Private Shared signal As New ManualResetEvent(False)\n        Private Shared count As Integer = 0\n\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example performs asynchronous receive\n        &#39; operation processing.\n\n\n        Public Shared Sub Main()\n            &#39; Create an instance of MessageQueue. Set its formatter.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Add an event handler for the ReceiveCompleted event.\n            AddHandler myQueue.ReceiveCompleted, AddressOf _\n                MyReceiveCompleted\n\n            &#39; Begin the asynchronous receive operation.\n            myQueue.BeginReceive()\n\n            signal.WaitOne()\n\n            &#39; Do other work on the current thread.\n\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Provides an event handler for the ReceiveCompleted\n        &#39; event.\n\n\n        Private Shared Sub MyReceiveCompleted(ByVal [source] As _\n            [Object], ByVal asyncResult As ReceiveCompletedEventArgs)\n\n            Try\n                &#39; Connect to the queue.\n                Dim mq As MessageQueue = CType([source], MessageQueue)\n\n                &#39; End the asynchronous receive operation.\n                Dim m As Message = _\n                    mq.EndReceive(asyncResult.AsyncResult)\n\n                count += 1\n                If count = 10 Then\n                    signal.Set()\n                End If\n\n                &#39; Restart the asynchronous receive operation.\n                mq.BeginReceive()\n\n            Catch\n                &#39; Handle sources of MessageQueueException.\n\n                &#39; Handle other exceptions.\n\n            End Try\n\n            Return\n\n        End Sub &#39;MyReceiveCompleted\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Exists_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Exists_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exists(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a Message Queuing queue exists at the specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Exists (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The location of the queue to find.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a queue with the specified path exists; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> syntax is not valid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.  </p>\n<p> -or-  </p>\n<p> The Exists method is being called on a remote private queue</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The application used format name syntax when verifying queue existence.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Exists method determines whether a Message Queuing queue exists at a specified path. No method exists to determine whether a queue with a specified format name exists. For more information about the format name syntax and other path syntax forms, see the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property.)  </p>\n<p> Exists is an expensive operation. Use it only when it is necessary within the application.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Exists method does not support the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_FormatName_\" data-linktype=\"relative-path\">FormatName</a> prefix.  </p>\n</div>\n<p> The syntax for the <code>path</code> parameter depends on the type of queue, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Queue type</th>\n<th>Syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Public queue</td>\n<td><code>MachineName</code>\\<code>QueueName</code></td>\n</tr>\n</tbody>\n</table>\n<p> Exists cannot be called to verify the existence of a remote private queue.  </p>\n<p> For more syntax, see the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property.  </p>\n<p> Alternatively, you can use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a> to describe the queue path.  </p>\n<table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Syntax</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Label</td>\n<td>Label:[ <code>label</code> ]</td>\n</tr>\n</tbody>\n</table>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example verifies whether a Message Queuing queue exists, and then deletes it.  </p>\n<pre><code class=\"lang-vb\" name=\"MessageQueue.ExistsDelete#1\">Imports System\nImports System.Messaging\n\n\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example verifies existence and attempts to \n        &#39; delete a queue.\n        \n\n        Public Shared Sub Main()\n\n            &#39; Determine whether the queue exists.\n            If MessageQueue.Exists(&quot;.\\myQueue&quot;) Then\n\n                Try\n\n                    &#39; Delete the queue.\n                    MessageQueue.Delete(&quot;.\\myQueue&quot;)\n\n                Catch e As MessageQueueException\n\n                    If e.MessageQueueErrorCode = _\n                        MessageQueueErrorCode.AccessDenied Then\n\n                        Console.WriteLine(&quot;Access is denied. &quot; _\n                            + &quot;Queue might be a system queue.&quot;)\n                    End If\n\n                    &#39; Handle other sources of exceptions as necessary.\n\n                End Try\n\n            End If\n\n\n            Return\n\n        End Sub &#39;Main\n\nEnd Class &#39;MyNewQueue \n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.ExistsDelete#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example verifies existence and attempts to \n\t\t// delete a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\n\t\t\t// Determine whether the queue exists.\n\t\t\tif (MessageQueue.Exists(&quot;.\\\\myQueue&quot;))\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// Delete the queue.\n\t\t\t\t\tMessageQueue.Delete(&quot;.\\\\myQueue&quot;);\n\t\t\t\t}\n\t\t\t\tcatch(MessageQueueException e)\n\t\t\t\t{\n\t\t\t\t\tif(e.MessageQueueErrorCode == \n\t\t\t\t\t\tMessageQueueErrorCode.AccessDenied)\n\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(&quot;Access is denied. &quot; + \n\t\t\t\t\t\t\t&quot;Queue might be a system queue.&quot;);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Handle other sources of MessageQueueException.\n\t\t\t\t}\n\n\t\t\t}\n\t\t\n\t\t\treturn;\n\t\t}\n\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.ExistsDelete#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nint main()\n{\n   \n   // Determine whether the queue exists.\n   if ( MessageQueue::Exists( &quot;.\\\\myQueue&quot; ) )\n   {\n      try\n      {\n         \n         // Delete the queue.\n         MessageQueue::Delete( &quot;.\\\\myQueue&quot; );\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         if ( e-&gt;MessageQueueErrorCode == MessageQueueErrorCode::AccessDenied )\n         {\n            Console::WriteLine( &quot;Access is denied. Queue might be a system queue.&quot; );\n         }\n         \n         // Handle other sources of MessageQueueException.\n      }\n\n   }\n\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetAllMessages\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetAllMessages_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAllMessages()</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the messages that are in the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message[] GetAllMessages ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that represents all the messages in the queue, in the same order as they appear in the Message Queuing queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetAllMessages returns a static snapshot of the messages in the queue, not dynamic links to those messages. Therefore, you cannot use the array to modify the messages in the queue. If you want real-time, dynamic interaction with the queue (such as the ability to delete messages), call the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetMessageEnumerator2_\" data-linktype=\"relative-path\">GetMessageEnumerator2</a> method, which returns a dynamic list of the messages in the queue.  </p>\n<p> Because GetAllMessages returns a copy of the messages in the queue at the time the method was called, the array does not reflect new messages that arrive in the queue or messages that are removed from the queue.  </p>\n<p> GetAllMessages retrieves only those properties not filtered out by the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MessageReadPropertyFilter_\" data-linktype=\"relative-path\">MessageReadPropertyFilter</a> property.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of GetAllMessages.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#21\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Populate an array with copies of all the messages in the queue.\n    array&lt;Message^&gt;^ msgs = queue-&gt;GetAllMessages();\n\n    // Loop through the messages.\n    for each(Message^ msg in msgs)\n    {\n        // Display the label of each message.\n        Console::WriteLine(msg-&gt;Label);\n    }\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#21\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Populate an array with copies of all the messages in the queue.\n        Message[] msgs = queue.GetAllMessages();\n\n        // Loop through the messages.\n        foreach(Message msg in msgs)\n        {\n            // Display the label of each message.\n            Console.WriteLine(msg.Label);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetEnumerator\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Enumerates the messages in a queue. GetEnumerator is deprecated. <span class=\"xref\">stem.Messaging.MessageQueue.GetMessageEnumerator2*</span> should be used instead.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that provides a dynamic connection to the messages in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of GetEnumerator.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#22\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Get an IEnumerator object.\n    System::Collections::IEnumerator^ enumerator = \n        queue-&gt;GetMessageEnumerator2();\n\n    // Use the IEnumerator object to loop through the messages.\n    while(enumerator-&gt;MoveNext())\n    {\n        // Get a message from the enumerator.\n        Message^ msg = (Message^)enumerator-&gt;Current;\n\n        // Display the label of the message.\n        Console::WriteLine(msg-&gt;Label);\n    }\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#22\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Get an IEnumerator object.\n        System.Collections.IEnumerator enumerator = queue.GetEnumerator();\n\n        // Use the IEnumerator object to loop through the messages.\n        while(enumerator.MoveNext())\n        {\n            // Get a message from the enumerator.\n            Message msg = (Message)enumerator.Current;\n\n            // Display the label of the message.\n            Console.WriteLine(msg.Label);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetMachineId_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetMachineId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMachineId(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the identifier of the computer on which the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> is located.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Guid GetMachineId (string machineName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>machineName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the computer that contains the queue, without the two preceding backslashes (\\\\).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> that represents a unique identifier for the computer on which the queue is located.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The computer identifier could not be retrieved, possibly because the directory service is not available; for example, if you are working offline.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use a computer&#39;s identifier for two purposes, among others: to read the computer journal and to set security certificates. However, you cannot call GetMachineId for a remote computer when you are working offline because the application must have access to the directory service on the domain controller.  </p>\n<p> The computer identifier (or machine identifier) is a <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> that Message Queuing creates when a computer is added to the enterprise. Message Queuing combines the computer identifier with the <code>Machine</code> and <code>Journal</code> keywords to create the machine journal&#39;s format name, which has the syntax <code>Machine=&lt;computeridentifier&gt;;Journal</code>. The machine journal, which is also known as the journal queue, is a system queue that stores copies of application-generated messages when the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_UseJournalQueue_\" data-linktype=\"relative-path\">UseJournalQueue</a> property is <code>true</code>.  </p>\n<p> This syntax for the journal is only valid when constructing the format name for the queue. The path name syntax is <code>MachineName</code>\\<code>Journal$</code>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls GetMachineId.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue#14\">        // Get the name of the computer that contains the queue.\n        string machineName = queue.MachineName;\n\n        // Display the return value of the MessageQueue.GetMachineId method.\n        Console.WriteLine(&quot;MessageQueue.GetMachineId(): {0}&quot;,\n            MessageQueue.GetMachineId(machineName));\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetMessageEnumerator\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetMessageEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMessageEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an enumerator object for all the messages in the queue. GetMessageEnumerator is deprecated. <span class=\"xref\">stem.Messaging.MessageQueue.GetMessageEnumerator2*</span> should be used instead.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.MessageEnumerator GetMessageEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messageenumerator\" data-linktype=\"relative-path\">MessageEnumerator</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messageenumerator\" data-linktype=\"relative-path\">MessageEnumerator</a> holding the messages that are contained in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetMessageEnumerator creates a dynamic list of all the messages in a queue. You can remove from the queue the message at the enumerator&#39;s current position by calling <a class=\"xref\" href=\"system.messaging.messageenumerator#System_Messaging_MessageEnumerator_RemoveCurrent_\" data-linktype=\"relative-path\">RemoveCurrent</a> for the <a class=\"xref\" href=\"system.messaging.messageenumerator\" data-linktype=\"relative-path\">MessageEnumerator</a> that GetMessageEnumerator returns.  </p>\n<p> Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position. For example, the enumerator can automatically access a lower-priority message placed beyond the cursor&#39;s current position, but not a higher-priority message inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <a class=\"xref\" href=\"system.messaging.messageenumerator#System_Messaging_MessageEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> for the <a class=\"xref\" href=\"system.messaging.messageenumerator\" data-linktype=\"relative-path\">MessageEnumerator</a>.  </p>\n<p> The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.  </p>\n<p> If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetAllMessages_\" data-linktype=\"relative-path\">GetAllMessages</a>. This method returns an array of <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> objects, which represent the messages at the time the method was called.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets a dynamic list of messages in a queue and counts all messages with the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Priority_\" data-linktype=\"relative-path\">Priority</a> property set to <a class=\"xref\" href=\"system.messaging.messagepriority\" data-linktype=\"relative-path\">System.Messaging.MessagePriority</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.GetMessageEnumerator#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example uses a cursor to step through the\n\t\t// messages in a queue and counts the number of \n\t\t// Lowest priority messages.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Output the count of Lowest priority messages.\n\t\t\tmyNewQueue.CountLowestPriority();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Iterates through messages in a queue and examines\n\t\t// their priority.\n\t\t//**************************************************\n\t\t\n\t\tpublic void CountLowestPriority()\n\t\t{\n\t\t\t// Holds the count of Lowest priority messages.\n\t\t\tuint numberItems = 0;\n\n\t\t\t// Connect to a queue.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\n\t\t\t// Get a cursor into the messages in the queue.\n\t\t\tMessageEnumerator myEnumerator = \n\t\t\t\tmyQueue.GetMessageEnumerator();\n\n\t\t\t// Specify that the messages&#39;s priority should be read.\n\t\t\tmyQueue.MessageReadPropertyFilter.Priority = true;\n\n\t\t\t// Move to the next message and examine its priority.\n\t\t\twhile(myEnumerator.MoveNext())\n\t\t\t{\n\t\t\t\t// Increase the count if priority is Lowest.\n\t\t\t\tif(myEnumerator.Current.Priority == \n\t\t\t\t\tMessagePriority.Lowest)\n\t\t\t\t\t\n\t\t\t\t\tnumberItems++;\n\t\t\t}\n\n\t\t\t// Display final count.\n\t\t\tConsole.WriteLine(&quot;Lowest priority messages: &quot; + \n\t\t\t\tnumberItems.ToString());\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.GetMessageEnumerator#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n   void CountLowestPriority()\n   {\n      \n      // Holds the count of Lowest priority messages.\n      UInt32 numberItems = 0;\n      \n      // Connect to a queue.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n      \n      // Get a cursor into the messages in the queue.\n      MessageEnumerator^ myEnumerator = myQueue-&gt;GetMessageEnumerator();\n      \n      // Specify that the messages&#39;s priority should be read.\n      myQueue-&gt;MessageReadPropertyFilter-&gt;Priority = true;\n      \n      // Move to the next message and examine its priority.\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         \n         // Increase the count if priority is Lowest.\n         if ( myEnumerator-&gt;Current-&gt;Priority == MessagePriority::Lowest )\n                  numberItems++;\n      }\n\n      \n      // Display final count.\n      Console::WriteLine( &quot;Lowest priority messages: {0}&quot;, numberItems );\n      return;\n   }\n\n};\n\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Output the count of Lowest priority messages.\n   myNewQueue-&gt;CountLowestPriority();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.GetMessageEnumerator#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example uses a cursor to step through the\n        &#39; messages in a queue and counts the number of \n        &#39; Lowest priority messages.\n        \n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Output the count of Lowest priority messages.\n            myNewQueue.CountLowestPriority()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        \n        &#39; Iterates through messages in a queue and examines\n        &#39; their priority.\n        \n\n        Public Sub CountLowestPriority()\n\n            &#39; Holds the count of Lowest priority messages.\n            Dim numberItems As Int32 = 0\n\n            &#39; Connect to a queue.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Get a cursor into the messages in the queue.\n            Dim myEnumerator As MessageEnumerator = _\n                myQueue.GetMessageEnumerator()\n\n            &#39; Specify that the messages&#39;s priority should be read.\n            myQueue.MessageReadPropertyFilter.Priority = True\n\n            &#39; Move to the next message and examine its priority.\n            While myEnumerator.MoveNext()\n\n                &#39; Increase the count if the priority is Lowest.\n                If myEnumerator.Current.Priority = _\n                    MessagePriority.Lowest Then\n                    numberItems += 1\n                End If\n\n            End While\n\n            &#39; Display final count.\n            Console.WriteLine((&quot;Lowest priority messages: &quot; + _\n                numberItems.ToString()))\n\n            Return\n\n        End Sub &#39;CountLowestPriority\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetMessageEnumerator2\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetMessageEnumerator2_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMessageEnumerator2()</div>        \r\n          </div>\r\n    \r\n            <p>Creates an enumerator object for all the messages in the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.MessageEnumerator GetMessageEnumerator2 ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messageenumerator\" data-linktype=\"relative-path\">MessageEnumerator</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messageenumerator\" data-linktype=\"relative-path\">MessageEnumerator</a> holding the messages that are contained in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetMessageEnumerator2 creates a dynamic list of all the messages in a queue. You can remove from the queue the message at the enumerator&#39;s current position by calling <a class=\"xref\" href=\"system.messaging.messageenumerator#System_Messaging_MessageEnumerator_RemoveCurrent_\" data-linktype=\"relative-path\">RemoveCurrent</a> for the <a class=\"xref\" href=\"system.messaging.messageenumerator\" data-linktype=\"relative-path\">MessageEnumerator</a> that GetMessageEnumerator2 returns.  </p>\n<p> Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position. For example, the enumerator can automatically access a lower-priority message placed beyond the cursor&#39;s current position, but not a higher-priority message inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <a class=\"xref\" href=\"system.messaging.messageenumerator#System_Messaging_MessageEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> for the <a class=\"xref\" href=\"system.messaging.messageenumerator\" data-linktype=\"relative-path\">MessageEnumerator</a>.  </p>\n<p> The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.  </p>\n<p> If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetAllMessages_\" data-linktype=\"relative-path\">GetAllMessages</a>. This method returns an array of <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> objects, which represent the messages at the time the method was called.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetMessageQueueEnumerator\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetMessageQueueEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMessageQueueEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Provides forward-only cursor semantics to enumerate through all public queues on the network.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Messaging.MessageQueueEnumerator GetMessageQueueEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueenumerator\" data-linktype=\"relative-path\">MessageQueueEnumerator</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.messagequeueenumerator\" data-linktype=\"relative-path\">MessageQueueEnumerator</a> that provides a dynamic listing of all the public message queues on the network.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload of GetMessageQueueEnumerator returns an enumeration of all the public queues that are on the network.  </p>\n<p> Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue list for queues deleted or added beyond the cursor&#39;s current position. Additions or deletion of queues located before the cursor&#39;s current position are not reflected. For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <a class=\"xref\" href=\"system.messaging.messagequeueenumerator#System_Messaging_MessageQueueEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> for the <a class=\"xref\" href=\"system.messaging.messagequeueenumerator\" data-linktype=\"relative-path\">MessageQueueEnumerator</a>.  </p>\n<p> There is no defined ordering of queues in a network. An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.  </p>\n<p> If you want a static snapshot of the queues on the network rather than a dynamic connection to them, call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueues_\" data-linktype=\"relative-path\">GetPublicQueues</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPrivateQueuesByMachine_System_String_\" data-linktype=\"relative-path\">GetPrivateQueuesByMachine(String)</a>. Each of these two methods returns an array of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> objects, which represent the queues at the time the method was called.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example iterates through all the message queues in the network, and examines the path for each queue. Finally, it displays the number of public queues on the network.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.GetMessageQueueEnumerator_noparms#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example uses a cursor to step through the\n\t\t// message queues and list the public queues on the\n\t\t// network.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Output the count of Lowest priority messages.\n\t\t\tmyNewQueue.ListPublicQueues();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Iterates through message queues and examines the\n\t\t// path for each queue. Also displays the number of\n\t\t// public queues on the network.\n\t\t//**************************************************\n\t\t\n\t\tpublic void ListPublicQueues()\n\t\t{\n\t\t\t// Holds the count of private queues.\n\t\t\tuint numberQueues = 0;\n\t\n\t\t\t// Get a cursor into the queues on the network.\n\t\t\tMessageQueueEnumerator myQueueEnumerator = \n\t\t\t\tMessageQueue.GetMessageQueueEnumerator();\n\n\t\t\t// Move to the next queue and read its path.\n\t\t\twhile(myQueueEnumerator.MoveNext())\n\t\t\t{\n\t\t\t\t// Increase the count if priority is Lowest.\n\t\t\t\tConsole.WriteLine(myQueueEnumerator.Current.Path);\n\t\t\t\tnumberQueues++;\n\t\t\t}\n\n\t\t\t// Display final count.\n\t\t\tConsole.WriteLine(&quot;Number of public queues: &quot; + \n\t\t\t\tnumberQueues.ToString());\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.GetMessageQueueEnumerator_noparms#1\">#using &lt;System.dll&gt;\n#using &lt;System.Messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n//**************************************************\n// Iterates through message queues and examines the\n// path for each queue. Also displays the number of\n// public queues on the network.\n//**************************************************\nvoid ListPublicQueues()\n{\n   \n   // Holds the count of private queues.\n   int numberQueues = 0;\n   \n   // Get a cursor into the queues on the network.\n   MessageQueueEnumerator^ myQueueEnumerator = MessageQueue::GetMessageQueueEnumerator();\n   \n   // Move to the next queue and read its path.\n   while ( myQueueEnumerator-&gt;MoveNext() )\n   {\n      \n      // Increase the count if priority is Lowest.\n      Console::WriteLine( myQueueEnumerator-&gt;Current-&gt;Path );\n      numberQueues++;\n   }\n\n   \n   // Display final count.\n   Console::WriteLine( &quot;Number of public queues: {0}&quot;, numberQueues );\n   return;\n}\n\n\n//**************************************************\n// Provides an entry point into the application.\n//   \n// This example uses a cursor to step through the\n// message queues and list the public queues on the\n// network.\n//**************************************************\nint main()\n{\n   \n   // Output the count of Lowest priority messages.\n   ListPublicQueues();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.GetMessageQueueEnumerator_noparms#1\">Imports System\nImports System.Messaging\n\n\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example uses a cursor to step through the\n        &#39; message queues and list the public queues on the\n        &#39; network.\n        \n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Output the count of Lowest priority messages.\n            myNewQueue.ListPublicQueues()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        \n        &#39; Iterates through message queues and examines the\n        &#39; path for each queue. Also displays the number of\n        &#39; public queues on the network.\n        \n\n        Public Sub ListPublicQueues()\n\n            &#39; Holds the count of private queues.\n            Dim numberQueues As Int32 = 0\n\n            &#39; Get a cursor into the queues on the network.\n            Dim myQueueEnumerator As MessageQueueEnumerator = _\n                MessageQueue.GetMessageQueueEnumerator()\n\n            &#39; Move to the next queue and read its path.\n            While myQueueEnumerator.MoveNext()\n                &#39; Increase the count if the priority is Lowest.\n                Console.WriteLine(myQueueEnumerator.Current.Path)\n                numberQueues += 1\n            End While\n\n            &#39; Display final count.\n            Console.WriteLine((&quot;Number of public queues: &quot; + _\n                numberQueues.ToString()))\n\n            Return\n\n        End Sub &#39;ListPublicQueues\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetMessageQueueEnumerator_System_Messaging_MessageQueueCriteria_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetMessageQueueEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMessageQueueEnumerator(MessageQueueCriteria)</div>        \r\n          </div>\r\n    \r\n            <p>Provides forward-only cursor semantics to enumerate through all public queues on the network that meet the specified criteria.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Messaging.MessageQueueEnumerator GetMessageQueueEnumerator (System.Messaging.MessageQueueCriteria criteria);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>criteria</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuecriteria\" data-linktype=\"relative-path\">MessageQueueCriteria</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.messagequeuecriteria\" data-linktype=\"relative-path\">MessageQueueCriteria</a> that contains the criteria used to filter the available message queues.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueenumerator\" data-linktype=\"relative-path\">MessageQueueEnumerator</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.messagequeueenumerator\" data-linktype=\"relative-path\">MessageQueueEnumerator</a> that provides a dynamic listing of the public message queues on the network that satisfy the restrictions specified by the <code>criteria</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload of <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetMessageQueueEnumerator_\" data-linktype=\"relative-path\">GetMessageQueueEnumerator</a> returns a listing of all the public queues on the network that satisfy criteria defined in the application criteria. You can specify the criteria to include, for example, queue creation or modification time, computer name, label, category, or any combination of these.  </p>\n<p> Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue that occurs beyond the cursor&#39;s current position. Changes to queues located before the cursor&#39;s current position are not reflected. For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <a class=\"xref\" href=\"system.messaging.messagequeueenumerator#System_Messaging_MessageQueueEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> for the <a class=\"xref\" href=\"system.messaging.messagequeueenumerator\" data-linktype=\"relative-path\">MessageQueueEnumerator</a>.  </p>\n<p> There is no defined ordering of queues in a network. An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.  </p>\n<p> If you want a static snapshot of the queues on the network rather than a dynamic connection to them, specify criteria for <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueues_\" data-linktype=\"relative-path\">GetPublicQueues</a> or call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPrivateQueuesByMachine_System_String_\" data-linktype=\"relative-path\">GetPrivateQueuesByMachine(String)</a>. Each of these two methods returns an array of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> objects, which represent the queues at the time the method was called. Calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueuesByCategory_System_Guid_\" data-linktype=\"relative-path\">GetPublicQueuesByCategory(Guid)</a>, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueuesByLabel_System_String_\" data-linktype=\"relative-path\">GetPublicQueuesByLabel(String)</a>, or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueuesByMachine_System_String_\" data-linktype=\"relative-path\">GetPublicQueuesByMachine(String)</a> provides the same results as calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueues_\" data-linktype=\"relative-path\">GetPublicQueues</a> with the filtering criteria of <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Category_\" data-linktype=\"relative-path\">Category</a>, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a>, and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a>, respectively.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example iterates through message queues and displays the path of each queue that was created in the last day and that exists on the computer &quot;MyComputer&quot;.  </p>\n<pre><code class=\"lang-vb\" name=\"MessageQueue.GetMessageQueueEnumerator_criteria#1\">Imports System\nImports System.Messaging\n\n \nPublic Class MyNewQueue\n\n\n        &#39;\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example uses a cursor to step through the\n        &#39; message queues and list the public queues on the\n        &#39; network that specify certain criteria.\n        \n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Output the count of Lowest priority messages.\n            myNewQueue.ListPublicQueuesByCriteria()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        \n        &#39; Iterates through message queues and displays the\n        &#39; path of each queue that was created in the last\n        &#39; day and that exists on the computer &quot;MyComputer&quot;. \n        \n\n        Public Sub ListPublicQueuesByCriteria()\n\n            Dim numberQueues As Int32 = 0\n\n            &#39; Specify the criteria to filter by.\n            Dim myCriteria As New MessageQueueCriteria()\n            myCriteria.MachineName = &quot;MyComputer&quot;\n            myCriteria.CreatedAfter = DateTime.Now.Subtract(New _\n                TimeSpan(1, 0, 0, 0))\n\n\n            &#39; Get a cursor into the queues on the network.\n            Dim myQueueEnumerator As MessageQueueEnumerator = _\n                MessageQueue.GetMessageQueueEnumerator(myCriteria)\n\n            &#39; Move to the next queue and read its path.\n            While myQueueEnumerator.MoveNext()\n                &#39; Increase the count if the priority is Lowest.\n                Console.WriteLine(myQueueEnumerator.Current.Path)\n                numberQueues += 1\n            End While\n\n            &#39; Handle no queues matching the criteria.\n            If numberQueues = 0 Then\n                Console.WriteLine(&quot;No queues match the criteria.&quot;)\n            End If\n\n            Return\n\n        End Sub &#39;ListPublicQueuesByCriteria\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.GetMessageQueueEnumerator_criteria#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n\n   // Iterates through message queues and displays the\n   // path of each queue that was created in the last\n   // day and that exists on the computer &quot;MyComputer&quot;. \n   void ListPublicQueuesByCriteria()\n   {\n      UInt32 numberQueues = 0;\n      \n      // Specify the criteria to filter by.\n      MessageQueueCriteria^ myCriteria = gcnew MessageQueueCriteria;\n      myCriteria-&gt;MachineName = &quot;MyComputer&quot;;\n      myCriteria-&gt;CreatedAfter = DateTime::Now.Subtract( TimeSpan(1,0,0,0) );\n      \n      // Get a cursor into the queues on the network.\n      MessageQueueEnumerator^ myQueueEnumerator = MessageQueue::GetMessageQueueEnumerator( myCriteria );\n      \n      // Move to the next queue and read its path.\n      while ( myQueueEnumerator-&gt;MoveNext() )\n      {\n         \n         // Increase the count if priority is Lowest.\n         Console::WriteLine( myQueueEnumerator-&gt;Current-&gt;Path );\n         numberQueues++;\n      }\n\n      \n      // Handle no queues matching the criteria.\n      if ( numberQueues == 0 )\n      {\n         Console::WriteLine( &quot;No public queues match criteria.&quot; );\n      }\n\n      return;\n   }\n\n};\n\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Output the count of Lowest priority messages.\n   myNewQueue-&gt;ListPublicQueuesByCriteria();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.GetMessageQueueEnumerator_criteria#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example uses a cursor to step through the\n\t\t// message queues and list the public queues on the\n\t\t// network that specify certain criteria.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Output the count of Lowest priority messages.\n\t\t\tmyNewQueue.ListPublicQueuesByCriteria();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Iterates through message queues and displays the\n\t\t// path of each queue that was created in the last\n\t\t// day and that exists on the computer &quot;MyComputer&quot;. \n\t\t//**************************************************\n\t\t\n\t\tpublic void ListPublicQueuesByCriteria()\n\t\t{\n\t\t\tuint numberQueues = 0;\n\t\t\t\n\t\t\t// Specify the criteria to filter by.\n\t\t\tMessageQueueCriteria myCriteria = new \n\t\t\t\tMessageQueueCriteria();\n\t\t\tmyCriteria.MachineName = &quot;MyComputer&quot;;\n\t\t\tmyCriteria.CreatedAfter = DateTime.Now.Subtract(new \n\t\t\t\tTimeSpan(1,0,0,0));\n\t\n\n\t\t\t// Get a cursor into the queues on the network.\n\t\t\tMessageQueueEnumerator myQueueEnumerator = \n\t\t\t\tMessageQueue.GetMessageQueueEnumerator(myCriteria);\n\n\t\t\t// Move to the next queue and read its path.\n\t\t\twhile(myQueueEnumerator.MoveNext())\n\t\t\t{\n\t\t\t\t// Increase the count if priority is Lowest.\n\t\t\t\tConsole.WriteLine(myQueueEnumerator.Current.Path);\n\t\t\t\tnumberQueues++;\n\t\t\t}\n\n\t\t\t// Handle no queues matching the criteria.\n\t\t\tif (numberQueues == 0)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;No public queues match criteria.&quot;);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetPrivateQueuesByMachine_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetPrivateQueuesByMachine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPrivateQueuesByMachine(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves all the private queues on the specified computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Messaging.MessageQueue[] GetPrivateQueuesByMachine (string machineName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>machineName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The computer from which to retrieve the private queues.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> objects that reference the retrieved private queues.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>machineName</code> parameter is <code>null</code> or an empty string (&quot;&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetPrivateQueuesByMachine retrieves a static snapshot of the queues on a specified computer.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves lists of queues.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.GetQueueLists#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example gets lists of queues by a variety\n\t\t// of criteria.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Send normal and high priority messages.\n\t\t\tmyNewQueue.GetQueuesByCategory();\n\t\t\tmyNewQueue.GetQueuesByLabel();\n\t\t\tmyNewQueue.GetQueuesByComputer();\n\t\t\tmyNewQueue.GetAllPublicQueues();\n\t\t\tmyNewQueue.GetPublicQueuesByCriteria();\n\t\t\tmyNewQueue.GetPrivateQueues();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues with a specified category.\n\t\t// Sends a broadcast message to all queues in that\n\t\t// category.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByCategory()\n\t\t{\n\t\t\t// Get a list of queues with the specified category.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByCategory(new \n\t\t\t\tGuid(&quot;{00000000-0000-0000-0000-000000000001}&quot;));\n\n\t\t\t// Send a broadcast message to each queue in the array.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tqueueItem.Send(&quot;Broadcast message.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues with a specified label.\n\t\t// Sends a broadcast message to all queues with that\n\t\t// label.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByLabel()\n\t\t{\n\t\t\t// Get a list of queues with the specified label.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByLabel(&quot;My Label&quot;);\n\n\t\t\t// Send a broadcast message to each queue in the array.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tqueueItem.Send(&quot;Broadcast message.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues on a specified computer. \n\t\t// Displays the list on screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByComputer()\n\t\t{\n\t\t\t// Get a list of queues on the specified computer.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByMachine(&quot;MyComputer&quot;);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of all public queues.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetAllPublicQueues()\n\t\t{\n\t\t\t// Get a list of public queues.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueues();\n\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of all public queues that match \n\t\t// specified criteria. Displays the list on \n\t\t// screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetPublicQueuesByCriteria()\n\t\t{\n\t\t\t// Define criteria to filter the queues.\n\t\t\tMessageQueueCriteria myCriteria = new \n\t\t\t\tMessageQueueCriteria();\n\t\t\tmyCriteria.CreatedAfter = DateTime.Now.Subtract(new \n\t\t\t\tTimeSpan(1,0,0,0));\n\t\t\tmyCriteria.ModifiedBefore = DateTime.Now;\n\t\t\tmyCriteria.MachineName = &quot;.&quot;;\n\t\t\tmyCriteria.Label = &quot;My Queue&quot;;\n\t\t\t\n\t\t\t// Get a list of queues with that criteria.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueues(myCriteria);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of private queues on the local \n\t\t// computer. Displays the list on screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetPrivateQueues()\n\t\t{\n\t\t\t// Get a list of queues with the specified category.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPrivateQueuesByMachine(&quot;.&quot;);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.GetQueueLists#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example gets lists of queues by a variety\n        &#39; of criteria.\n\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Send normal and high priority messages.\n            myNewQueue.GetQueuesByCategory()\n            myNewQueue.GetQueuesByLabel()\n            myNewQueue.GetQueuesByComputer()\n            myNewQueue.GetAllPublicQueues()\n            myNewQueue.GetPublicQueuesByCriteria()\n            myNewQueue.GetPrivateQueues()\n\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Gets a list of queues with a specified category.\n        &#39; Sends a broadcast message to all queues in that\n        &#39; category.\n \n        Public Sub GetQueuesByCategory()\n\n            &#39; Get a list of queues with the specified category.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByCategory(New _\n                Guid(&quot;{00000000-0000-0000-0000-000000000001}&quot;))\n\n            &#39; Send a broadcast message to each queue in the array.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                queueItem.Send(&quot;Broadcast message.&quot;)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByCategory\n\n\n\n        &#39; Gets a list of queues with a specified label.\n        &#39; Sends a broadcast message to all queues with that\n        &#39; label.\n\n\n        Public Sub GetQueuesByLabel()\n\n            &#39; Get a list of queues with the specified label.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByLabel(&quot;My Label&quot;)\n\n            &#39; Send a broadcast message to each queue in the array.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                queueItem.Send(&quot;Broadcast message.&quot;)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByLabel\n\n\n\n        &#39; Gets a list of queues on a specified computer. \n        &#39; Displays the list on screen.\n \n\n        Public Sub GetQueuesByComputer()\n\n            &#39; Get a list of queues on the specified computer.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByMachine(&quot;MyComputer&quot;)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByComputer\n\n\n\n        &#39; Gets a list of all public queues.\n       \n\n        Public Sub GetAllPublicQueues()\n\n            &#39; Get a list of public queues.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueues()\n\n            Return\n\n        End Sub &#39;GetAllPublicQueues\n\n\n \n        &#39; Gets a list of all public queues that match \n        &#39; specified criteria. Displays the list on \n        &#39; screen.\n\n\n        Public Sub GetPublicQueuesByCriteria()\n\n            &#39; Define criteria to filter the queues.\n            Dim myCriteria As New MessageQueueCriteria()\n            myCriteria.CreatedAfter = DateTime.Now.Subtract(New _\n                TimeSpan(1, 0, 0, 0))\n            myCriteria.ModifiedBefore = DateTime.Now\n            myCriteria.MachineName = &quot;.&quot;\n            myCriteria.Label = &quot;My Queue&quot;\n\n            &#39; Get a list of queues with that criteria.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueues(myCriteria)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetPublicQueuesByCriteria\n\n\n \n        &#39; Gets a list of private queues on the local \n        &#39; computer. Displays the list on screen.\n  \n\n        Public Sub GetPrivateQueues()\n\n            &#39; Get a list of queues with the specified category.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPrivateQueuesByMachine(&quot;.&quot;)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetPrivateQueues\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.GetQueueLists#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Collections;\nref class MyNewQueue\n{\npublic:\n\n   // Gets a list of queues with a specified category.\n   // Sends a broadcast message to all queues in that\n   // category.\n   void GetQueuesByCategory()\n   {\n      \n      // Get a list of queues with the specified category.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByCategory( Guid(&quot; {00000000-0000-0000-0000-000000000001}&quot;) );\n      \n      // Send a broadcast message to each queue in the array.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         queueItem-&gt;Send( &quot;Broadcast message.&quot; );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of queues with a specified label.\n   // Sends a broadcast message to all queues with that\n   // label.\n   void GetQueuesByLabel()\n   {\n      \n      // Get a list of queues with the specified label.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByLabel( &quot;My Label&quot; );\n      \n      // Send a broadcast message to each queue in the array.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         queueItem-&gt;Send( &quot;Broadcast message.&quot; );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of queues on a specified computer. \n   // Displays the list on screen.\n   void GetQueuesByComputer()\n   {\n      \n      // Get a list of queues on the specified computer.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByMachine( &quot;MyComputer&quot; );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of all public queues.\n   void GetAllPublicQueues()\n   {\n      \n      // Get a list of public queues.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueues();\n      return;\n   }\n\n\n   // Gets a list of all public queues that match \n   // specified criteria. Displays the list on \n   // screen.\n   void GetPublicQueuesByCriteria()\n   {\n      \n      // Define criteria to filter the queues.\n      MessageQueueCriteria^ myCriteria = gcnew MessageQueueCriteria;\n      myCriteria-&gt;CreatedAfter = DateTime::Now.Subtract( TimeSpan(1,0,0,0) );\n      myCriteria-&gt;ModifiedBefore = DateTime::Now;\n      myCriteria-&gt;MachineName = &quot;.&quot;;\n      myCriteria-&gt;Label = &quot;My Queue&quot;;\n      \n      // Get a list of queues with that criteria.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueues( myCriteria );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of private queues on the local \n   // computer. Displays the list on screen.\n   void GetPrivateQueues()\n   {\n      \n      // Get a list of queues with the specified category.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPrivateQueuesByMachine( &quot;.&quot; );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n};\n\n\n// Provides an entry point into the application.\n// This example gets lists of queues by a variety\n// of criteria.\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Send normal and high priority messages.\n   myNewQueue-&gt;GetQueuesByCategory();\n   myNewQueue-&gt;GetQueuesByLabel();\n   myNewQueue-&gt;GetQueuesByComputer();\n   myNewQueue-&gt;GetAllPublicQueues();\n   myNewQueue-&gt;GetPublicQueuesByCriteria();\n   myNewQueue-&gt;GetPrivateQueues();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetPublicQueues\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetPublicQueues_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPublicQueues()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves all the public queues on the network.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Messaging.MessageQueue[] GetPublicQueues ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> objects that reference the retrieved public queues.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload if you want a complete list of all the public queues on the network. If you want to restrict the list by certain criteria, such as <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a>, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Category_\" data-linktype=\"relative-path\">Category</a>, or last modified time use another overload of this method. (Alternatively, you can use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueuesByMachine_System_String_\" data-linktype=\"relative-path\">GetPublicQueuesByMachine(String)</a>, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueuesByCategory_System_Guid_\" data-linktype=\"relative-path\">GetPublicQueuesByCategory(Guid)</a>, or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueuesByLabel_System_String_\" data-linktype=\"relative-path\">GetPublicQueuesByLabel(String)</a>.)  </p>\n<p> GetPublicQueues retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetMessageQueueEnumerator_\" data-linktype=\"relative-path\">GetMessageQueueEnumerator</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves lists of queues.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.GetQueueLists#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example gets lists of queues by a variety\n\t\t// of criteria.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Send normal and high priority messages.\n\t\t\tmyNewQueue.GetQueuesByCategory();\n\t\t\tmyNewQueue.GetQueuesByLabel();\n\t\t\tmyNewQueue.GetQueuesByComputer();\n\t\t\tmyNewQueue.GetAllPublicQueues();\n\t\t\tmyNewQueue.GetPublicQueuesByCriteria();\n\t\t\tmyNewQueue.GetPrivateQueues();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues with a specified category.\n\t\t// Sends a broadcast message to all queues in that\n\t\t// category.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByCategory()\n\t\t{\n\t\t\t// Get a list of queues with the specified category.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByCategory(new \n\t\t\t\tGuid(&quot;{00000000-0000-0000-0000-000000000001}&quot;));\n\n\t\t\t// Send a broadcast message to each queue in the array.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tqueueItem.Send(&quot;Broadcast message.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues with a specified label.\n\t\t// Sends a broadcast message to all queues with that\n\t\t// label.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByLabel()\n\t\t{\n\t\t\t// Get a list of queues with the specified label.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByLabel(&quot;My Label&quot;);\n\n\t\t\t// Send a broadcast message to each queue in the array.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tqueueItem.Send(&quot;Broadcast message.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues on a specified computer. \n\t\t// Displays the list on screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByComputer()\n\t\t{\n\t\t\t// Get a list of queues on the specified computer.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByMachine(&quot;MyComputer&quot;);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of all public queues.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetAllPublicQueues()\n\t\t{\n\t\t\t// Get a list of public queues.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueues();\n\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of all public queues that match \n\t\t// specified criteria. Displays the list on \n\t\t// screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetPublicQueuesByCriteria()\n\t\t{\n\t\t\t// Define criteria to filter the queues.\n\t\t\tMessageQueueCriteria myCriteria = new \n\t\t\t\tMessageQueueCriteria();\n\t\t\tmyCriteria.CreatedAfter = DateTime.Now.Subtract(new \n\t\t\t\tTimeSpan(1,0,0,0));\n\t\t\tmyCriteria.ModifiedBefore = DateTime.Now;\n\t\t\tmyCriteria.MachineName = &quot;.&quot;;\n\t\t\tmyCriteria.Label = &quot;My Queue&quot;;\n\t\t\t\n\t\t\t// Get a list of queues with that criteria.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueues(myCriteria);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of private queues on the local \n\t\t// computer. Displays the list on screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetPrivateQueues()\n\t\t{\n\t\t\t// Get a list of queues with the specified category.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPrivateQueuesByMachine(&quot;.&quot;);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.GetQueueLists#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example gets lists of queues by a variety\n        &#39; of criteria.\n\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Send normal and high priority messages.\n            myNewQueue.GetQueuesByCategory()\n            myNewQueue.GetQueuesByLabel()\n            myNewQueue.GetQueuesByComputer()\n            myNewQueue.GetAllPublicQueues()\n            myNewQueue.GetPublicQueuesByCriteria()\n            myNewQueue.GetPrivateQueues()\n\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Gets a list of queues with a specified category.\n        &#39; Sends a broadcast message to all queues in that\n        &#39; category.\n \n        Public Sub GetQueuesByCategory()\n\n            &#39; Get a list of queues with the specified category.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByCategory(New _\n                Guid(&quot;{00000000-0000-0000-0000-000000000001}&quot;))\n\n            &#39; Send a broadcast message to each queue in the array.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                queueItem.Send(&quot;Broadcast message.&quot;)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByCategory\n\n\n\n        &#39; Gets a list of queues with a specified label.\n        &#39; Sends a broadcast message to all queues with that\n        &#39; label.\n\n\n        Public Sub GetQueuesByLabel()\n\n            &#39; Get a list of queues with the specified label.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByLabel(&quot;My Label&quot;)\n\n            &#39; Send a broadcast message to each queue in the array.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                queueItem.Send(&quot;Broadcast message.&quot;)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByLabel\n\n\n\n        &#39; Gets a list of queues on a specified computer. \n        &#39; Displays the list on screen.\n \n\n        Public Sub GetQueuesByComputer()\n\n            &#39; Get a list of queues on the specified computer.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByMachine(&quot;MyComputer&quot;)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByComputer\n\n\n\n        &#39; Gets a list of all public queues.\n       \n\n        Public Sub GetAllPublicQueues()\n\n            &#39; Get a list of public queues.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueues()\n\n            Return\n\n        End Sub &#39;GetAllPublicQueues\n\n\n \n        &#39; Gets a list of all public queues that match \n        &#39; specified criteria. Displays the list on \n        &#39; screen.\n\n\n        Public Sub GetPublicQueuesByCriteria()\n\n            &#39; Define criteria to filter the queues.\n            Dim myCriteria As New MessageQueueCriteria()\n            myCriteria.CreatedAfter = DateTime.Now.Subtract(New _\n                TimeSpan(1, 0, 0, 0))\n            myCriteria.ModifiedBefore = DateTime.Now\n            myCriteria.MachineName = &quot;.&quot;\n            myCriteria.Label = &quot;My Queue&quot;\n\n            &#39; Get a list of queues with that criteria.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueues(myCriteria)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetPublicQueuesByCriteria\n\n\n \n        &#39; Gets a list of private queues on the local \n        &#39; computer. Displays the list on screen.\n  \n\n        Public Sub GetPrivateQueues()\n\n            &#39; Get a list of queues with the specified category.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPrivateQueuesByMachine(&quot;.&quot;)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetPrivateQueues\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.GetQueueLists#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Collections;\nref class MyNewQueue\n{\npublic:\n\n   // Gets a list of queues with a specified category.\n   // Sends a broadcast message to all queues in that\n   // category.\n   void GetQueuesByCategory()\n   {\n      \n      // Get a list of queues with the specified category.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByCategory( Guid(&quot; {00000000-0000-0000-0000-000000000001}&quot;) );\n      \n      // Send a broadcast message to each queue in the array.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         queueItem-&gt;Send( &quot;Broadcast message.&quot; );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of queues with a specified label.\n   // Sends a broadcast message to all queues with that\n   // label.\n   void GetQueuesByLabel()\n   {\n      \n      // Get a list of queues with the specified label.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByLabel( &quot;My Label&quot; );\n      \n      // Send a broadcast message to each queue in the array.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         queueItem-&gt;Send( &quot;Broadcast message.&quot; );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of queues on a specified computer. \n   // Displays the list on screen.\n   void GetQueuesByComputer()\n   {\n      \n      // Get a list of queues on the specified computer.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByMachine( &quot;MyComputer&quot; );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of all public queues.\n   void GetAllPublicQueues()\n   {\n      \n      // Get a list of public queues.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueues();\n      return;\n   }\n\n\n   // Gets a list of all public queues that match \n   // specified criteria. Displays the list on \n   // screen.\n   void GetPublicQueuesByCriteria()\n   {\n      \n      // Define criteria to filter the queues.\n      MessageQueueCriteria^ myCriteria = gcnew MessageQueueCriteria;\n      myCriteria-&gt;CreatedAfter = DateTime::Now.Subtract( TimeSpan(1,0,0,0) );\n      myCriteria-&gt;ModifiedBefore = DateTime::Now;\n      myCriteria-&gt;MachineName = &quot;.&quot;;\n      myCriteria-&gt;Label = &quot;My Queue&quot;;\n      \n      // Get a list of queues with that criteria.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueues( myCriteria );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of private queues on the local \n   // computer. Displays the list on screen.\n   void GetPrivateQueues()\n   {\n      \n      // Get a list of queues with the specified category.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPrivateQueuesByMachine( &quot;.&quot; );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n};\n\n\n// Provides an entry point into the application.\n// This example gets lists of queues by a variety\n// of criteria.\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Send normal and high priority messages.\n   myNewQueue-&gt;GetQueuesByCategory();\n   myNewQueue-&gt;GetQueuesByLabel();\n   myNewQueue-&gt;GetQueuesByComputer();\n   myNewQueue-&gt;GetAllPublicQueues();\n   myNewQueue-&gt;GetPublicQueuesByCriteria();\n   myNewQueue-&gt;GetPrivateQueues();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetPublicQueues_System_Messaging_MessageQueueCriteria_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetPublicQueues_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPublicQueues(MessageQueueCriteria)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves all the public queues on the network that meet the specified criteria.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Messaging.MessageQueue[] GetPublicQueues (System.Messaging.MessageQueueCriteria criteria);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>criteria</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuecriteria\" data-linktype=\"relative-path\">MessageQueueCriteria</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.messagequeuecriteria\" data-linktype=\"relative-path\">MessageQueueCriteria</a> that contains the criteria used to filter the queues.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> objects that reference the retrieved public queues.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you want to filter all the public queues on the network by label, category, or computer name, the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> class contains specific methods that provide that functionality (<a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueuesByLabel_System_String_\" data-linktype=\"relative-path\">GetPublicQueuesByLabel(String)</a>, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueuesByCategory_System_Guid_\" data-linktype=\"relative-path\">GetPublicQueuesByCategory(Guid)</a>, and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueuesByMachine_System_String_\" data-linktype=\"relative-path\">GetPublicQueuesByMachine(String)</a>, respectively). Use this overload to get a list of all the public queues on the network that meet more than one of these criteria (for example, if you want to specify both a label and a category). You can also filter by message criteria other than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a>, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Category_\" data-linktype=\"relative-path\">Category</a>, and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_MachineName_\" data-linktype=\"relative-path\">MachineName</a>. For example, you use this overload to filter by a queue&#39;s last-modified time. Simply create a new instance of the <a class=\"xref\" href=\"system.messaging.messagequeuecriteria\" data-linktype=\"relative-path\">MessageQueueCriteria</a> class, set the appropriate properties in the instance, and pass the instance as the <code>criteria</code> parameter.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetPublicQueues_\" data-linktype=\"relative-path\">GetPublicQueues</a> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetMessageQueueEnumerator_\" data-linktype=\"relative-path\">GetMessageQueueEnumerator</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves lists of queues.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.GetQueueLists#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example gets lists of queues by a variety\n\t\t// of criteria.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Send normal and high priority messages.\n\t\t\tmyNewQueue.GetQueuesByCategory();\n\t\t\tmyNewQueue.GetQueuesByLabel();\n\t\t\tmyNewQueue.GetQueuesByComputer();\n\t\t\tmyNewQueue.GetAllPublicQueues();\n\t\t\tmyNewQueue.GetPublicQueuesByCriteria();\n\t\t\tmyNewQueue.GetPrivateQueues();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues with a specified category.\n\t\t// Sends a broadcast message to all queues in that\n\t\t// category.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByCategory()\n\t\t{\n\t\t\t// Get a list of queues with the specified category.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByCategory(new \n\t\t\t\tGuid(&quot;{00000000-0000-0000-0000-000000000001}&quot;));\n\n\t\t\t// Send a broadcast message to each queue in the array.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tqueueItem.Send(&quot;Broadcast message.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues with a specified label.\n\t\t// Sends a broadcast message to all queues with that\n\t\t// label.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByLabel()\n\t\t{\n\t\t\t// Get a list of queues with the specified label.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByLabel(&quot;My Label&quot;);\n\n\t\t\t// Send a broadcast message to each queue in the array.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tqueueItem.Send(&quot;Broadcast message.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues on a specified computer. \n\t\t// Displays the list on screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByComputer()\n\t\t{\n\t\t\t// Get a list of queues on the specified computer.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByMachine(&quot;MyComputer&quot;);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of all public queues.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetAllPublicQueues()\n\t\t{\n\t\t\t// Get a list of public queues.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueues();\n\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of all public queues that match \n\t\t// specified criteria. Displays the list on \n\t\t// screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetPublicQueuesByCriteria()\n\t\t{\n\t\t\t// Define criteria to filter the queues.\n\t\t\tMessageQueueCriteria myCriteria = new \n\t\t\t\tMessageQueueCriteria();\n\t\t\tmyCriteria.CreatedAfter = DateTime.Now.Subtract(new \n\t\t\t\tTimeSpan(1,0,0,0));\n\t\t\tmyCriteria.ModifiedBefore = DateTime.Now;\n\t\t\tmyCriteria.MachineName = &quot;.&quot;;\n\t\t\tmyCriteria.Label = &quot;My Queue&quot;;\n\t\t\t\n\t\t\t// Get a list of queues with that criteria.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueues(myCriteria);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of private queues on the local \n\t\t// computer. Displays the list on screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetPrivateQueues()\n\t\t{\n\t\t\t// Get a list of queues with the specified category.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPrivateQueuesByMachine(&quot;.&quot;);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.GetQueueLists#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example gets lists of queues by a variety\n        &#39; of criteria.\n\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Send normal and high priority messages.\n            myNewQueue.GetQueuesByCategory()\n            myNewQueue.GetQueuesByLabel()\n            myNewQueue.GetQueuesByComputer()\n            myNewQueue.GetAllPublicQueues()\n            myNewQueue.GetPublicQueuesByCriteria()\n            myNewQueue.GetPrivateQueues()\n\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Gets a list of queues with a specified category.\n        &#39; Sends a broadcast message to all queues in that\n        &#39; category.\n \n        Public Sub GetQueuesByCategory()\n\n            &#39; Get a list of queues with the specified category.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByCategory(New _\n                Guid(&quot;{00000000-0000-0000-0000-000000000001}&quot;))\n\n            &#39; Send a broadcast message to each queue in the array.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                queueItem.Send(&quot;Broadcast message.&quot;)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByCategory\n\n\n\n        &#39; Gets a list of queues with a specified label.\n        &#39; Sends a broadcast message to all queues with that\n        &#39; label.\n\n\n        Public Sub GetQueuesByLabel()\n\n            &#39; Get a list of queues with the specified label.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByLabel(&quot;My Label&quot;)\n\n            &#39; Send a broadcast message to each queue in the array.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                queueItem.Send(&quot;Broadcast message.&quot;)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByLabel\n\n\n\n        &#39; Gets a list of queues on a specified computer. \n        &#39; Displays the list on screen.\n \n\n        Public Sub GetQueuesByComputer()\n\n            &#39; Get a list of queues on the specified computer.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByMachine(&quot;MyComputer&quot;)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByComputer\n\n\n\n        &#39; Gets a list of all public queues.\n       \n\n        Public Sub GetAllPublicQueues()\n\n            &#39; Get a list of public queues.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueues()\n\n            Return\n\n        End Sub &#39;GetAllPublicQueues\n\n\n \n        &#39; Gets a list of all public queues that match \n        &#39; specified criteria. Displays the list on \n        &#39; screen.\n\n\n        Public Sub GetPublicQueuesByCriteria()\n\n            &#39; Define criteria to filter the queues.\n            Dim myCriteria As New MessageQueueCriteria()\n            myCriteria.CreatedAfter = DateTime.Now.Subtract(New _\n                TimeSpan(1, 0, 0, 0))\n            myCriteria.ModifiedBefore = DateTime.Now\n            myCriteria.MachineName = &quot;.&quot;\n            myCriteria.Label = &quot;My Queue&quot;\n\n            &#39; Get a list of queues with that criteria.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueues(myCriteria)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetPublicQueuesByCriteria\n\n\n \n        &#39; Gets a list of private queues on the local \n        &#39; computer. Displays the list on screen.\n  \n\n        Public Sub GetPrivateQueues()\n\n            &#39; Get a list of queues with the specified category.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPrivateQueuesByMachine(&quot;.&quot;)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetPrivateQueues\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.GetQueueLists#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Collections;\nref class MyNewQueue\n{\npublic:\n\n   // Gets a list of queues with a specified category.\n   // Sends a broadcast message to all queues in that\n   // category.\n   void GetQueuesByCategory()\n   {\n      \n      // Get a list of queues with the specified category.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByCategory( Guid(&quot; {00000000-0000-0000-0000-000000000001}&quot;) );\n      \n      // Send a broadcast message to each queue in the array.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         queueItem-&gt;Send( &quot;Broadcast message.&quot; );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of queues with a specified label.\n   // Sends a broadcast message to all queues with that\n   // label.\n   void GetQueuesByLabel()\n   {\n      \n      // Get a list of queues with the specified label.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByLabel( &quot;My Label&quot; );\n      \n      // Send a broadcast message to each queue in the array.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         queueItem-&gt;Send( &quot;Broadcast message.&quot; );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of queues on a specified computer. \n   // Displays the list on screen.\n   void GetQueuesByComputer()\n   {\n      \n      // Get a list of queues on the specified computer.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByMachine( &quot;MyComputer&quot; );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of all public queues.\n   void GetAllPublicQueues()\n   {\n      \n      // Get a list of public queues.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueues();\n      return;\n   }\n\n\n   // Gets a list of all public queues that match \n   // specified criteria. Displays the list on \n   // screen.\n   void GetPublicQueuesByCriteria()\n   {\n      \n      // Define criteria to filter the queues.\n      MessageQueueCriteria^ myCriteria = gcnew MessageQueueCriteria;\n      myCriteria-&gt;CreatedAfter = DateTime::Now.Subtract( TimeSpan(1,0,0,0) );\n      myCriteria-&gt;ModifiedBefore = DateTime::Now;\n      myCriteria-&gt;MachineName = &quot;.&quot;;\n      myCriteria-&gt;Label = &quot;My Queue&quot;;\n      \n      // Get a list of queues with that criteria.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueues( myCriteria );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of private queues on the local \n   // computer. Displays the list on screen.\n   void GetPrivateQueues()\n   {\n      \n      // Get a list of queues with the specified category.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPrivateQueuesByMachine( &quot;.&quot; );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n};\n\n\n// Provides an entry point into the application.\n// This example gets lists of queues by a variety\n// of criteria.\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Send normal and high priority messages.\n   myNewQueue-&gt;GetQueuesByCategory();\n   myNewQueue-&gt;GetQueuesByLabel();\n   myNewQueue-&gt;GetQueuesByComputer();\n   myNewQueue-&gt;GetAllPublicQueues();\n   myNewQueue-&gt;GetPublicQueuesByCriteria();\n   myNewQueue-&gt;GetPrivateQueues();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetPublicQueuesByCategory_System_Guid_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetPublicQueuesByCategory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPublicQueuesByCategory(Guid)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves all the public queues on the network that belong to the specified category.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Messaging.MessageQueue[] GetPublicQueuesByCategory (Guid category);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>category</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> that groups the set of queues to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> objects that reference the retrieved public queues.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to filter the public queues by category. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Category_\" data-linktype=\"relative-path\">Category</a> property provides access to the Message Queuing type ID property (which is read/write) of a particular queue. Although you can use <a class=\"xref\" href=\"system.guid#System_Guid_NewGuid_\" data-linktype=\"relative-path\">NewGuid</a> to create a category value that is unique across all <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> values, it is not necessary. The category value needs to be distinct only from other categories, not from all other <a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a> values. For example, you can assign {00000000-0000-0000-0000-000000000001} as the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Category_\" data-linktype=\"relative-path\">Category</a> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Category_\" data-linktype=\"relative-path\">Category</a> for another set.  </p>\n<p> GetPublicQueuesByCategory retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetMessageQueueEnumerator_\" data-linktype=\"relative-path\">GetMessageQueueEnumerator</a>. You can specify the category as part of the <a class=\"xref\" href=\"system.messaging.messagequeuecriteria\" data-linktype=\"relative-path\">MessageQueueCriteria</a> you pass into the method.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves lists of queues.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.GetQueueLists#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example gets lists of queues by a variety\n\t\t// of criteria.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Send normal and high priority messages.\n\t\t\tmyNewQueue.GetQueuesByCategory();\n\t\t\tmyNewQueue.GetQueuesByLabel();\n\t\t\tmyNewQueue.GetQueuesByComputer();\n\t\t\tmyNewQueue.GetAllPublicQueues();\n\t\t\tmyNewQueue.GetPublicQueuesByCriteria();\n\t\t\tmyNewQueue.GetPrivateQueues();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues with a specified category.\n\t\t// Sends a broadcast message to all queues in that\n\t\t// category.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByCategory()\n\t\t{\n\t\t\t// Get a list of queues with the specified category.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByCategory(new \n\t\t\t\tGuid(&quot;{00000000-0000-0000-0000-000000000001}&quot;));\n\n\t\t\t// Send a broadcast message to each queue in the array.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tqueueItem.Send(&quot;Broadcast message.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues with a specified label.\n\t\t// Sends a broadcast message to all queues with that\n\t\t// label.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByLabel()\n\t\t{\n\t\t\t// Get a list of queues with the specified label.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByLabel(&quot;My Label&quot;);\n\n\t\t\t// Send a broadcast message to each queue in the array.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tqueueItem.Send(&quot;Broadcast message.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues on a specified computer. \n\t\t// Displays the list on screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByComputer()\n\t\t{\n\t\t\t// Get a list of queues on the specified computer.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByMachine(&quot;MyComputer&quot;);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of all public queues.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetAllPublicQueues()\n\t\t{\n\t\t\t// Get a list of public queues.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueues();\n\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of all public queues that match \n\t\t// specified criteria. Displays the list on \n\t\t// screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetPublicQueuesByCriteria()\n\t\t{\n\t\t\t// Define criteria to filter the queues.\n\t\t\tMessageQueueCriteria myCriteria = new \n\t\t\t\tMessageQueueCriteria();\n\t\t\tmyCriteria.CreatedAfter = DateTime.Now.Subtract(new \n\t\t\t\tTimeSpan(1,0,0,0));\n\t\t\tmyCriteria.ModifiedBefore = DateTime.Now;\n\t\t\tmyCriteria.MachineName = &quot;.&quot;;\n\t\t\tmyCriteria.Label = &quot;My Queue&quot;;\n\t\t\t\n\t\t\t// Get a list of queues with that criteria.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueues(myCriteria);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of private queues on the local \n\t\t// computer. Displays the list on screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetPrivateQueues()\n\t\t{\n\t\t\t// Get a list of queues with the specified category.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPrivateQueuesByMachine(&quot;.&quot;);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.GetQueueLists#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example gets lists of queues by a variety\n        &#39; of criteria.\n\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Send normal and high priority messages.\n            myNewQueue.GetQueuesByCategory()\n            myNewQueue.GetQueuesByLabel()\n            myNewQueue.GetQueuesByComputer()\n            myNewQueue.GetAllPublicQueues()\n            myNewQueue.GetPublicQueuesByCriteria()\n            myNewQueue.GetPrivateQueues()\n\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Gets a list of queues with a specified category.\n        &#39; Sends a broadcast message to all queues in that\n        &#39; category.\n \n        Public Sub GetQueuesByCategory()\n\n            &#39; Get a list of queues with the specified category.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByCategory(New _\n                Guid(&quot;{00000000-0000-0000-0000-000000000001}&quot;))\n\n            &#39; Send a broadcast message to each queue in the array.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                queueItem.Send(&quot;Broadcast message.&quot;)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByCategory\n\n\n\n        &#39; Gets a list of queues with a specified label.\n        &#39; Sends a broadcast message to all queues with that\n        &#39; label.\n\n\n        Public Sub GetQueuesByLabel()\n\n            &#39; Get a list of queues with the specified label.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByLabel(&quot;My Label&quot;)\n\n            &#39; Send a broadcast message to each queue in the array.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                queueItem.Send(&quot;Broadcast message.&quot;)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByLabel\n\n\n\n        &#39; Gets a list of queues on a specified computer. \n        &#39; Displays the list on screen.\n \n\n        Public Sub GetQueuesByComputer()\n\n            &#39; Get a list of queues on the specified computer.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByMachine(&quot;MyComputer&quot;)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByComputer\n\n\n\n        &#39; Gets a list of all public queues.\n       \n\n        Public Sub GetAllPublicQueues()\n\n            &#39; Get a list of public queues.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueues()\n\n            Return\n\n        End Sub &#39;GetAllPublicQueues\n\n\n \n        &#39; Gets a list of all public queues that match \n        &#39; specified criteria. Displays the list on \n        &#39; screen.\n\n\n        Public Sub GetPublicQueuesByCriteria()\n\n            &#39; Define criteria to filter the queues.\n            Dim myCriteria As New MessageQueueCriteria()\n            myCriteria.CreatedAfter = DateTime.Now.Subtract(New _\n                TimeSpan(1, 0, 0, 0))\n            myCriteria.ModifiedBefore = DateTime.Now\n            myCriteria.MachineName = &quot;.&quot;\n            myCriteria.Label = &quot;My Queue&quot;\n\n            &#39; Get a list of queues with that criteria.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueues(myCriteria)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetPublicQueuesByCriteria\n\n\n \n        &#39; Gets a list of private queues on the local \n        &#39; computer. Displays the list on screen.\n  \n\n        Public Sub GetPrivateQueues()\n\n            &#39; Get a list of queues with the specified category.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPrivateQueuesByMachine(&quot;.&quot;)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetPrivateQueues\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.GetQueueLists#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Collections;\nref class MyNewQueue\n{\npublic:\n\n   // Gets a list of queues with a specified category.\n   // Sends a broadcast message to all queues in that\n   // category.\n   void GetQueuesByCategory()\n   {\n      \n      // Get a list of queues with the specified category.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByCategory( Guid(&quot; {00000000-0000-0000-0000-000000000001}&quot;) );\n      \n      // Send a broadcast message to each queue in the array.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         queueItem-&gt;Send( &quot;Broadcast message.&quot; );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of queues with a specified label.\n   // Sends a broadcast message to all queues with that\n   // label.\n   void GetQueuesByLabel()\n   {\n      \n      // Get a list of queues with the specified label.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByLabel( &quot;My Label&quot; );\n      \n      // Send a broadcast message to each queue in the array.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         queueItem-&gt;Send( &quot;Broadcast message.&quot; );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of queues on a specified computer. \n   // Displays the list on screen.\n   void GetQueuesByComputer()\n   {\n      \n      // Get a list of queues on the specified computer.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByMachine( &quot;MyComputer&quot; );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of all public queues.\n   void GetAllPublicQueues()\n   {\n      \n      // Get a list of public queues.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueues();\n      return;\n   }\n\n\n   // Gets a list of all public queues that match \n   // specified criteria. Displays the list on \n   // screen.\n   void GetPublicQueuesByCriteria()\n   {\n      \n      // Define criteria to filter the queues.\n      MessageQueueCriteria^ myCriteria = gcnew MessageQueueCriteria;\n      myCriteria-&gt;CreatedAfter = DateTime::Now.Subtract( TimeSpan(1,0,0,0) );\n      myCriteria-&gt;ModifiedBefore = DateTime::Now;\n      myCriteria-&gt;MachineName = &quot;.&quot;;\n      myCriteria-&gt;Label = &quot;My Queue&quot;;\n      \n      // Get a list of queues with that criteria.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueues( myCriteria );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of private queues on the local \n   // computer. Displays the list on screen.\n   void GetPrivateQueues()\n   {\n      \n      // Get a list of queues with the specified category.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPrivateQueuesByMachine( &quot;.&quot; );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n};\n\n\n// Provides an entry point into the application.\n// This example gets lists of queues by a variety\n// of criteria.\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Send normal and high priority messages.\n   myNewQueue-&gt;GetQueuesByCategory();\n   myNewQueue-&gt;GetQueuesByLabel();\n   myNewQueue-&gt;GetQueuesByComputer();\n   myNewQueue-&gt;GetAllPublicQueues();\n   myNewQueue-&gt;GetPublicQueuesByCriteria();\n   myNewQueue-&gt;GetPrivateQueues();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetPublicQueuesByLabel_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetPublicQueuesByLabel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPublicQueuesByLabel(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves all the public queues on the network that carry the specified label.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Messaging.MessageQueue[] GetPublicQueuesByLabel (string label);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>label</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A label that groups the set of queues to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> objects that reference the retrieved public queues.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>label</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to filter the public queues by label.  </p>\n<p> GetPublicQueuesByLabel retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetMessageQueueEnumerator_\" data-linktype=\"relative-path\">GetMessageQueueEnumerator</a>. You can specify the label as part of the <a class=\"xref\" href=\"system.messaging.messagequeuecriteria\" data-linktype=\"relative-path\">MessageQueueCriteria</a> you pass into the method.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves lists of queues.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.GetQueueLists#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example gets lists of queues by a variety\n\t\t// of criteria.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Send normal and high priority messages.\n\t\t\tmyNewQueue.GetQueuesByCategory();\n\t\t\tmyNewQueue.GetQueuesByLabel();\n\t\t\tmyNewQueue.GetQueuesByComputer();\n\t\t\tmyNewQueue.GetAllPublicQueues();\n\t\t\tmyNewQueue.GetPublicQueuesByCriteria();\n\t\t\tmyNewQueue.GetPrivateQueues();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues with a specified category.\n\t\t// Sends a broadcast message to all queues in that\n\t\t// category.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByCategory()\n\t\t{\n\t\t\t// Get a list of queues with the specified category.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByCategory(new \n\t\t\t\tGuid(&quot;{00000000-0000-0000-0000-000000000001}&quot;));\n\n\t\t\t// Send a broadcast message to each queue in the array.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tqueueItem.Send(&quot;Broadcast message.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues with a specified label.\n\t\t// Sends a broadcast message to all queues with that\n\t\t// label.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByLabel()\n\t\t{\n\t\t\t// Get a list of queues with the specified label.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByLabel(&quot;My Label&quot;);\n\n\t\t\t// Send a broadcast message to each queue in the array.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tqueueItem.Send(&quot;Broadcast message.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues on a specified computer. \n\t\t// Displays the list on screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByComputer()\n\t\t{\n\t\t\t// Get a list of queues on the specified computer.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByMachine(&quot;MyComputer&quot;);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of all public queues.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetAllPublicQueues()\n\t\t{\n\t\t\t// Get a list of public queues.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueues();\n\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of all public queues that match \n\t\t// specified criteria. Displays the list on \n\t\t// screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetPublicQueuesByCriteria()\n\t\t{\n\t\t\t// Define criteria to filter the queues.\n\t\t\tMessageQueueCriteria myCriteria = new \n\t\t\t\tMessageQueueCriteria();\n\t\t\tmyCriteria.CreatedAfter = DateTime.Now.Subtract(new \n\t\t\t\tTimeSpan(1,0,0,0));\n\t\t\tmyCriteria.ModifiedBefore = DateTime.Now;\n\t\t\tmyCriteria.MachineName = &quot;.&quot;;\n\t\t\tmyCriteria.Label = &quot;My Queue&quot;;\n\t\t\t\n\t\t\t// Get a list of queues with that criteria.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueues(myCriteria);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of private queues on the local \n\t\t// computer. Displays the list on screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetPrivateQueues()\n\t\t{\n\t\t\t// Get a list of queues with the specified category.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPrivateQueuesByMachine(&quot;.&quot;);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.GetQueueLists#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example gets lists of queues by a variety\n        &#39; of criteria.\n\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Send normal and high priority messages.\n            myNewQueue.GetQueuesByCategory()\n            myNewQueue.GetQueuesByLabel()\n            myNewQueue.GetQueuesByComputer()\n            myNewQueue.GetAllPublicQueues()\n            myNewQueue.GetPublicQueuesByCriteria()\n            myNewQueue.GetPrivateQueues()\n\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Gets a list of queues with a specified category.\n        &#39; Sends a broadcast message to all queues in that\n        &#39; category.\n \n        Public Sub GetQueuesByCategory()\n\n            &#39; Get a list of queues with the specified category.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByCategory(New _\n                Guid(&quot;{00000000-0000-0000-0000-000000000001}&quot;))\n\n            &#39; Send a broadcast message to each queue in the array.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                queueItem.Send(&quot;Broadcast message.&quot;)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByCategory\n\n\n\n        &#39; Gets a list of queues with a specified label.\n        &#39; Sends a broadcast message to all queues with that\n        &#39; label.\n\n\n        Public Sub GetQueuesByLabel()\n\n            &#39; Get a list of queues with the specified label.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByLabel(&quot;My Label&quot;)\n\n            &#39; Send a broadcast message to each queue in the array.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                queueItem.Send(&quot;Broadcast message.&quot;)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByLabel\n\n\n\n        &#39; Gets a list of queues on a specified computer. \n        &#39; Displays the list on screen.\n \n\n        Public Sub GetQueuesByComputer()\n\n            &#39; Get a list of queues on the specified computer.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByMachine(&quot;MyComputer&quot;)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByComputer\n\n\n\n        &#39; Gets a list of all public queues.\n       \n\n        Public Sub GetAllPublicQueues()\n\n            &#39; Get a list of public queues.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueues()\n\n            Return\n\n        End Sub &#39;GetAllPublicQueues\n\n\n \n        &#39; Gets a list of all public queues that match \n        &#39; specified criteria. Displays the list on \n        &#39; screen.\n\n\n        Public Sub GetPublicQueuesByCriteria()\n\n            &#39; Define criteria to filter the queues.\n            Dim myCriteria As New MessageQueueCriteria()\n            myCriteria.CreatedAfter = DateTime.Now.Subtract(New _\n                TimeSpan(1, 0, 0, 0))\n            myCriteria.ModifiedBefore = DateTime.Now\n            myCriteria.MachineName = &quot;.&quot;\n            myCriteria.Label = &quot;My Queue&quot;\n\n            &#39; Get a list of queues with that criteria.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueues(myCriteria)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetPublicQueuesByCriteria\n\n\n \n        &#39; Gets a list of private queues on the local \n        &#39; computer. Displays the list on screen.\n  \n\n        Public Sub GetPrivateQueues()\n\n            &#39; Get a list of queues with the specified category.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPrivateQueuesByMachine(&quot;.&quot;)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetPrivateQueues\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.GetQueueLists#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Collections;\nref class MyNewQueue\n{\npublic:\n\n   // Gets a list of queues with a specified category.\n   // Sends a broadcast message to all queues in that\n   // category.\n   void GetQueuesByCategory()\n   {\n      \n      // Get a list of queues with the specified category.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByCategory( Guid(&quot; {00000000-0000-0000-0000-000000000001}&quot;) );\n      \n      // Send a broadcast message to each queue in the array.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         queueItem-&gt;Send( &quot;Broadcast message.&quot; );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of queues with a specified label.\n   // Sends a broadcast message to all queues with that\n   // label.\n   void GetQueuesByLabel()\n   {\n      \n      // Get a list of queues with the specified label.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByLabel( &quot;My Label&quot; );\n      \n      // Send a broadcast message to each queue in the array.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         queueItem-&gt;Send( &quot;Broadcast message.&quot; );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of queues on a specified computer. \n   // Displays the list on screen.\n   void GetQueuesByComputer()\n   {\n      \n      // Get a list of queues on the specified computer.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByMachine( &quot;MyComputer&quot; );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of all public queues.\n   void GetAllPublicQueues()\n   {\n      \n      // Get a list of public queues.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueues();\n      return;\n   }\n\n\n   // Gets a list of all public queues that match \n   // specified criteria. Displays the list on \n   // screen.\n   void GetPublicQueuesByCriteria()\n   {\n      \n      // Define criteria to filter the queues.\n      MessageQueueCriteria^ myCriteria = gcnew MessageQueueCriteria;\n      myCriteria-&gt;CreatedAfter = DateTime::Now.Subtract( TimeSpan(1,0,0,0) );\n      myCriteria-&gt;ModifiedBefore = DateTime::Now;\n      myCriteria-&gt;MachineName = &quot;.&quot;;\n      myCriteria-&gt;Label = &quot;My Queue&quot;;\n      \n      // Get a list of queues with that criteria.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueues( myCriteria );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of private queues on the local \n   // computer. Displays the list on screen.\n   void GetPrivateQueues()\n   {\n      \n      // Get a list of queues with the specified category.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPrivateQueuesByMachine( &quot;.&quot; );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n};\n\n\n// Provides an entry point into the application.\n// This example gets lists of queues by a variety\n// of criteria.\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Send normal and high priority messages.\n   myNewQueue-&gt;GetQueuesByCategory();\n   myNewQueue-&gt;GetQueuesByLabel();\n   myNewQueue-&gt;GetQueuesByComputer();\n   myNewQueue-&gt;GetAllPublicQueues();\n   myNewQueue-&gt;GetPublicQueuesByCriteria();\n   myNewQueue-&gt;GetPrivateQueues();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetPublicQueuesByMachine_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetPublicQueuesByMachine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPublicQueuesByMachine(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves all the public queues that reside on the specified computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Messaging.MessageQueue[] GetPublicQueuesByMachine (string machineName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>machineName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the computer that contains the set of public queues to be retrieved.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> objects that reference the public queues on the computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>machineName</code> parameter has incorrect syntax.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to filter the public queues by computer.  </p>\n<p> GetPublicQueuesByMachine retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_GetMessageQueueEnumerator_\" data-linktype=\"relative-path\">GetMessageQueueEnumerator</a>. You can specify the computer name as part of the <a class=\"xref\" href=\"system.messaging.messagequeuecriteria\" data-linktype=\"relative-path\">MessageQueueCriteria</a> you pass into the method.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example retrieves lists of queues.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.GetQueueLists#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example gets lists of queues by a variety\n\t\t// of criteria.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Send normal and high priority messages.\n\t\t\tmyNewQueue.GetQueuesByCategory();\n\t\t\tmyNewQueue.GetQueuesByLabel();\n\t\t\tmyNewQueue.GetQueuesByComputer();\n\t\t\tmyNewQueue.GetAllPublicQueues();\n\t\t\tmyNewQueue.GetPublicQueuesByCriteria();\n\t\t\tmyNewQueue.GetPrivateQueues();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues with a specified category.\n\t\t// Sends a broadcast message to all queues in that\n\t\t// category.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByCategory()\n\t\t{\n\t\t\t// Get a list of queues with the specified category.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByCategory(new \n\t\t\t\tGuid(&quot;{00000000-0000-0000-0000-000000000001}&quot;));\n\n\t\t\t// Send a broadcast message to each queue in the array.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tqueueItem.Send(&quot;Broadcast message.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues with a specified label.\n\t\t// Sends a broadcast message to all queues with that\n\t\t// label.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByLabel()\n\t\t{\n\t\t\t// Get a list of queues with the specified label.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByLabel(&quot;My Label&quot;);\n\n\t\t\t// Send a broadcast message to each queue in the array.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tqueueItem.Send(&quot;Broadcast message.&quot;);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of queues on a specified computer. \n\t\t// Displays the list on screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetQueuesByComputer()\n\t\t{\n\t\t\t// Get a list of queues on the specified computer.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueuesByMachine(&quot;MyComputer&quot;);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of all public queues.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetAllPublicQueues()\n\t\t{\n\t\t\t// Get a list of public queues.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueues();\n\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of all public queues that match \n\t\t// specified criteria. Displays the list on \n\t\t// screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetPublicQueuesByCriteria()\n\t\t{\n\t\t\t// Define criteria to filter the queues.\n\t\t\tMessageQueueCriteria myCriteria = new \n\t\t\t\tMessageQueueCriteria();\n\t\t\tmyCriteria.CreatedAfter = DateTime.Now.Subtract(new \n\t\t\t\tTimeSpan(1,0,0,0));\n\t\t\tmyCriteria.ModifiedBefore = DateTime.Now;\n\t\t\tmyCriteria.MachineName = &quot;.&quot;;\n\t\t\tmyCriteria.Label = &quot;My Queue&quot;;\n\t\t\t\n\t\t\t// Get a list of queues with that criteria.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPublicQueues(myCriteria);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Gets a list of private queues on the local \n\t\t// computer. Displays the list on screen.\n\t\t//**************************************************\n\t\t\n\t\tpublic void GetPrivateQueues()\n\t\t{\n\t\t\t// Get a list of queues with the specified category.\n\t\t\tMessageQueue[] QueueList = \n\t\t\t\tMessageQueue.GetPrivateQueuesByMachine(&quot;.&quot;);\n\n\t\t\t// Display the paths of the queues in the list.\n\t\t\tforeach(MessageQueue queueItem in QueueList)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(queueItem.Path);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.GetQueueLists#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example gets lists of queues by a variety\n        &#39; of criteria.\n\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Send normal and high priority messages.\n            myNewQueue.GetQueuesByCategory()\n            myNewQueue.GetQueuesByLabel()\n            myNewQueue.GetQueuesByComputer()\n            myNewQueue.GetAllPublicQueues()\n            myNewQueue.GetPublicQueuesByCriteria()\n            myNewQueue.GetPrivateQueues()\n\n            Return\n\n        End Sub &#39;Main\n\n\n\n        &#39; Gets a list of queues with a specified category.\n        &#39; Sends a broadcast message to all queues in that\n        &#39; category.\n \n        Public Sub GetQueuesByCategory()\n\n            &#39; Get a list of queues with the specified category.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByCategory(New _\n                Guid(&quot;{00000000-0000-0000-0000-000000000001}&quot;))\n\n            &#39; Send a broadcast message to each queue in the array.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                queueItem.Send(&quot;Broadcast message.&quot;)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByCategory\n\n\n\n        &#39; Gets a list of queues with a specified label.\n        &#39; Sends a broadcast message to all queues with that\n        &#39; label.\n\n\n        Public Sub GetQueuesByLabel()\n\n            &#39; Get a list of queues with the specified label.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByLabel(&quot;My Label&quot;)\n\n            &#39; Send a broadcast message to each queue in the array.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                queueItem.Send(&quot;Broadcast message.&quot;)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByLabel\n\n\n\n        &#39; Gets a list of queues on a specified computer. \n        &#39; Displays the list on screen.\n \n\n        Public Sub GetQueuesByComputer()\n\n            &#39; Get a list of queues on the specified computer.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueuesByMachine(&quot;MyComputer&quot;)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetQueuesByComputer\n\n\n\n        &#39; Gets a list of all public queues.\n       \n\n        Public Sub GetAllPublicQueues()\n\n            &#39; Get a list of public queues.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueues()\n\n            Return\n\n        End Sub &#39;GetAllPublicQueues\n\n\n \n        &#39; Gets a list of all public queues that match \n        &#39; specified criteria. Displays the list on \n        &#39; screen.\n\n\n        Public Sub GetPublicQueuesByCriteria()\n\n            &#39; Define criteria to filter the queues.\n            Dim myCriteria As New MessageQueueCriteria()\n            myCriteria.CreatedAfter = DateTime.Now.Subtract(New _\n                TimeSpan(1, 0, 0, 0))\n            myCriteria.ModifiedBefore = DateTime.Now\n            myCriteria.MachineName = &quot;.&quot;\n            myCriteria.Label = &quot;My Queue&quot;\n\n            &#39; Get a list of queues with that criteria.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPublicQueues(myCriteria)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetPublicQueuesByCriteria\n\n\n \n        &#39; Gets a list of private queues on the local \n        &#39; computer. Displays the list on screen.\n  \n\n        Public Sub GetPrivateQueues()\n\n            &#39; Get a list of queues with the specified category.\n            Dim QueueList As MessageQueue() = _\n                MessageQueue.GetPrivateQueuesByMachine(&quot;.&quot;)\n\n            &#39; Display the paths of the queues in the list.\n            Dim queueItem As MessageQueue\n            For Each queueItem In QueueList\n                Console.WriteLine(queueItem.Path)\n            Next queueItem\n\n            Return\n\n        End Sub &#39;GetPrivateQueues\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.GetQueueLists#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nusing namespace System::Collections;\nref class MyNewQueue\n{\npublic:\n\n   // Gets a list of queues with a specified category.\n   // Sends a broadcast message to all queues in that\n   // category.\n   void GetQueuesByCategory()\n   {\n      \n      // Get a list of queues with the specified category.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByCategory( Guid(&quot; {00000000-0000-0000-0000-000000000001}&quot;) );\n      \n      // Send a broadcast message to each queue in the array.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         queueItem-&gt;Send( &quot;Broadcast message.&quot; );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of queues with a specified label.\n   // Sends a broadcast message to all queues with that\n   // label.\n   void GetQueuesByLabel()\n   {\n      \n      // Get a list of queues with the specified label.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByLabel( &quot;My Label&quot; );\n      \n      // Send a broadcast message to each queue in the array.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         queueItem-&gt;Send( &quot;Broadcast message.&quot; );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of queues on a specified computer. \n   // Displays the list on screen.\n   void GetQueuesByComputer()\n   {\n      \n      // Get a list of queues on the specified computer.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueuesByMachine( &quot;MyComputer&quot; );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of all public queues.\n   void GetAllPublicQueues()\n   {\n      \n      // Get a list of public queues.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueues();\n      return;\n   }\n\n\n   // Gets a list of all public queues that match \n   // specified criteria. Displays the list on \n   // screen.\n   void GetPublicQueuesByCriteria()\n   {\n      \n      // Define criteria to filter the queues.\n      MessageQueueCriteria^ myCriteria = gcnew MessageQueueCriteria;\n      myCriteria-&gt;CreatedAfter = DateTime::Now.Subtract( TimeSpan(1,0,0,0) );\n      myCriteria-&gt;ModifiedBefore = DateTime::Now;\n      myCriteria-&gt;MachineName = &quot;.&quot;;\n      myCriteria-&gt;Label = &quot;My Queue&quot;;\n      \n      // Get a list of queues with that criteria.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPublicQueues( myCriteria );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n\n   // Gets a list of private queues on the local \n   // computer. Displays the list on screen.\n   void GetPrivateQueues()\n   {\n      \n      // Get a list of queues with the specified category.\n      array&lt;MessageQueue^&gt;^QueueList = MessageQueue::GetPrivateQueuesByMachine( &quot;.&quot; );\n      \n      // Display the paths of the queues in the list.\n      IEnumerator^ myEnum = QueueList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         MessageQueue^ queueItem = safe_cast&lt;MessageQueue^&gt;(myEnum-&gt;Current);\n         Console::WriteLine( queueItem-&gt;Path );\n      }\n\n      return;\n   }\n\n};\n\n\n// Provides an entry point into the application.\n// This example gets lists of queues by a variety\n// of criteria.\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Send normal and high priority messages.\n   myNewQueue-&gt;GetQueuesByCategory();\n   myNewQueue-&gt;GetQueuesByLabel();\n   myNewQueue-&gt;GetQueuesByComputer();\n   myNewQueue-&gt;GetAllPublicQueues();\n   myNewQueue-&gt;GetPublicQueuesByCriteria();\n   myNewQueue-&gt;GetPrivateQueues();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_GetSecurityContext\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_GetSecurityContext_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSecurityContext()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the security context that MSMQ associates with the current user (thread identity) at the time of this call.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Messaging.SecurityContext GetSecurityContext ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.securitycontext\" data-linktype=\"relative-path\">SecurityContext</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.securitycontext\" data-linktype=\"relative-path\">SecurityContext</a> object that contains the security context.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Peek\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Peek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Peek()</div>        \r\n          </div>\r\n    \r\n            <p>Returns without removing (peeks) the first message in the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. The Peek method is synchronous, so it blocks the current thread until a message becomes available.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message Peek ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that represents the first message in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to peek a queue, or to wait until a message exists in the queue.  </p>\n<p> The Peek method reads, but does not remove, the first message from the queue. Therefore, repeated calls to Peek return the same message, unless a higher priority message arrives in the queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method, on the other hand, both reads and removes the first message from the queue. Repeated calls to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a>, therefore, return different messages.  </p>\n<p> Message Queuing orders messages in the queue according to priority and arrival time. A newer message is placed before an older one only if it is of a higher priority.  </p>\n<p> Use Peek when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload does not specify a time-out, the application might wait indefinitely. If you need the application processing to continue without waiting, use the asynchronous <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> method. Alternatively, you can specify a time-out for a message to arrive in the queue by using the overload of Peek that specifies a time-out.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following examples use the Peek method on a queue.  </p>\n<p> In the first example, the application waits until a message becomes available in the queue. Note that the first example does not access the message that arrives; it merely pauses processing until a message arrives. If a message already exists in the queue, it will return immediately.  </p>\n<p> In the second example, a message that contains an application-defined <code>Order</code> class is sent to the queue, and then peeked from the queue.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue.Peek_noparms#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// This class represents an object the following example \n// sends to a queue and receives from a queue.\nref class Order\n{\npublic:\n   int orderId;\n   DateTime orderTime;\n};\n\n\n/// &lt;summary&gt;\n/// Provides a container class for the example.\n/// &lt;/summary&gt;\nref class MyNewQueue\n{\npublic:\n\n   //*************************************************\n   // Posts a notification when a message arrives in \n   // the queue S&quot;monitoredQueue&quot;. Does not retrieve any \n   // message information when peeking the message.\n   //*************************************************\n   void NotifyArrived()\n   {\n      // Connect to a queue.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\monitoredQueue&quot; );\n\n      // Specify to retrieve no message information.\n      myQueue-&gt;MessageReadPropertyFilter-&gt;ClearAll();\n\n      // Wait for a message to arrive. \n      Message^ emptyMessage = myQueue-&gt;Peek();\n\n      // Post a notification when a message arrives.\n      Console::WriteLine( &quot;A message has arrived in the queue.&quot; );\n      return;\n   }\n\n\n   //*************************************************\n   // Sends an Order to a queue.\n   //*************************************************\n   void SendMessage()\n   {\n      // Create a new order and set values.\n      Order^ sentOrder = gcnew Order;\n      sentOrder-&gt;orderId = 3;\n      sentOrder-&gt;orderTime = DateTime::Now;\n\n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Send the Order to the queue.\n      myQueue-&gt;Send( sentOrder );\n      return;\n   }\n\n   //*************************************************\n   // Peeks a message containing an Order.\n   //*************************************************\n   void PeekFirstMessage()\n   {\n      // Connect to a queue.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Set the formatter to indicate the body contains an Order.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = Order::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      try\n      {\n         // Peek and format the message. \n         Message^ myMessage = myQueue-&gt;Peek();\n         Order^ myOrder = static_cast&lt;Order^&gt;(myMessage-&gt;Body);\n\n         // Display message information.\n         Console::WriteLine( &quot;Order ID: {0}&quot;, myOrder-&gt;orderId );\n         Console::WriteLine( &quot;Sent: {0}&quot;, myOrder-&gt;orderTime );\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      // Catch other exceptions as necessary.\n      return;\n   }\n};\n\n//*************************************************\n// Provides an entry point into the application.\n//         \n// This example posts a notification that a message\n// has arrived in a queue. It sends a message \n// containing an other to a separate queue, and then\n// peeks the first message in the queue.\n//*************************************************\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Wait for a message to arrive in the queue.\n   myNewQueue-&gt;NotifyArrived();\n\n   // Send a message to a queue.\n   myNewQueue-&gt;SendMessage();\n\n   // Peek the first message in the queue.\n   myNewQueue-&gt;PeekFirstMessage();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.Peek_noparms#1\">Imports System\nImports System.Messaging\n\n\n\n    &#39; This class represents an object the following example \n    &#39; sends to a queue and peeks from a queue.\n    Public Class Order\n        Public orderId As Integer\n        Public orderTime As DateTime\n    End Class &#39;Order\n\n\n   \n    Public Class MyNewQueue\n\n\n        \n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example posts a notification that a message\n        &#39; has arrived in a queue. It sends a message \n        &#39; containing an other to a separate queue, and then\n        &#39; peeks the first message in the queue.\n        \n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Wait for a message to arrive in the queue.\n            myNewQueue.NotifyArrived()\n\n            &#39; Send a message to a queue.\n            myNewQueue.SendMessage()\n\n            &#39; Peek the first message in the queue.\n            myNewQueue.PeekFirstMessage()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        \n        &#39; Posts a notification when a message arrives in \n        &#39; the queue &quot;monitoredQueue&quot;. Does not retrieve any \n        &#39; message information when peeking the message.\n        \n        Public Sub NotifyArrived()\n\n            &#39; Connect to a queue.\n            Dim myQueue As New MessageQueue(&quot;.\\monitoredQueue&quot;)\n\n            &#39; Specify to retrieve no message information.\n            myQueue.MessageReadPropertyFilter.ClearAll()\n\n            &#39; Wait for a message to arrive. \n            Dim emptyMessage As Message = myQueue.Peek()\n\n            &#39; Post a notification when a message arrives.\n            Console.WriteLine(&quot;A message has arrived in the queue.&quot;)\n\n            Return\n\n        End Sub &#39;NotifyArrived\n\n\n        \n        &#39; Sends an Order to a queue.\n        \n\n        Public Sub SendMessage()\n\n            &#39; Create a new order and set values.\n            Dim sentOrder As New Order()\n            sentOrder.orderId = 3\n            sentOrder.orderTime = DateTime.Now\n\n            &#39; Connect to a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Send the Order to the queue.\n            myQueue.Send(sentOrder)\n\n            Return\n\n        End Sub &#39;SendMessage\n\n\n        \n        &#39; Peeks a message containing an Order.\n        \n\n        Public Sub PeekFirstMessage()\n\n            &#39; Connect to a queue.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Set the formatter to indicate body contains an Order.\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType(Order)})\n\n            Try\n\n                &#39; Peek and format the message. \n                Dim myMessage As Message = myQueue.Peek()\n                Dim myOrder As Order = CType(myMessage.Body, Order)\n\n                &#39; Display message information.\n                Console.WriteLine((&quot;Order ID: &quot; + _\n                    myOrder.orderId.ToString()))\n                Console.WriteLine((&quot;Sent: &quot; + _\n                    myOrder.orderTime.ToString()))\n\n            Catch m as MessageQueueException\n                &#39; Handle Message Queuing exceptions.\n\n\n            Catch e As InvalidOperationException\n                &#39; Handle invalid serialization format.\n                Console.WriteLine(e.Message)\n\n                &#39; Catch other exceptions as necessary.\n\n            End Try\n\n            Return\n\n        End Sub &#39;PeekFirstMessage \n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.Peek_noparms#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n\t// This class represents an object the following example \n\t// sends to a queue and receives from a queue.\n\tpublic class Order\n\t{\n\t\tpublic int orderId;\n\t\tpublic DateTime orderTime;\n\t};\t\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example posts a notification that a message\n\t\t// has arrived in a queue. It sends a message \n\t\t// containing an other to a separate queue, and then\n\t\t// peeks the first message in the queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Wait for a message to arrive in the queue.\n\t\t\tmyNewQueue.NotifyArrived();\n\n\t\t\t// Send a message to a queue.\n\t\t\tmyNewQueue.SendMessage();\t\n\n\t\t\t// Peek the first message in the queue.\n\t\t\tmyNewQueue.PeekFirstMessage();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Posts a notification when a message arrives in \n\t\t// the queue &quot;monitoredQueue&quot;. Does not retrieve any \n\t\t// message information when peeking the message.\n\t\t//**************************************************\n\t\t\n\t\tpublic void NotifyArrived()\n\t\t{\n\n\t\t\t// Connect to a queue.\n\t\t\tMessageQueue myQueue = new \n\t\t\t\tMessageQueue(&quot;.\\\\monitoredQueue&quot;);\n\t\n\t\t\t// Specify to retrieve no message information.\n\t\t\tmyQueue.MessageReadPropertyFilter.ClearAll();\n\n\t\t\t// Wait for a message to arrive. \n\t\t\tMessage emptyMessage = myQueue.Peek();\n\n\t\t\t// Post a notification when a message arrives.\n\t\t\tConsole.WriteLine(&quot;A message has arrived in the queue.&quot;);\n\n\t\t\treturn;\n\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Sends an Order to a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\t\t\t\n\t\t\t// Create a new order and set values.\n\t\t\tOrder sentOrder = new Order();\n\t\t\tsentOrder.orderId = 3;\n\t\t\tsentOrder.orderTime = DateTime.Now;\n\n\t\t\t// Connect to a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Send the Order to the queue.\n\t\t\tmyQueue.Send(sentOrder);\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Peeks a message containing an Order.\n\t\t//**************************************************\n\t\t\n\t\tpublic void PeekFirstMessage()\n\t\t{\n\t\t\t// Connect to a queue.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\n\t\t\t// Set the formatter to indicate the body contains an Order.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(MyProject.Order)});\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Peek and format the message. \n\t\t\t\tMessage myMessage =\tmyQueue.Peek(); \n\t\t\t\tOrder myOrder = (Order)myMessage.Body;\n\n\t\t\t\t// Display message information.\n\t\t\t\tConsole.WriteLine(&quot;Order ID: &quot; + \n\t\t\t\t\tmyOrder.orderId.ToString());\n\t\t\t\tConsole.WriteLine(&quot;Sent: &quot; + \n\t\t\t\t\tmyOrder.orderTime.ToString());\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn;\n\n\t\t}\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Peek_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Peek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Peek(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Returns without removing (peeks) the first message in the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. The <span class=\"xref\">stem.Messaging.MessageQueue.Peek*</span> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message Peek (TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the maximum time to wait for the queue to contain a message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that represents the first message in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue. The method returns immediately if a message already exists in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method reads, but does not remove, the first message from the queue. Therefore, repeated calls to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> return the same message, unless a higher priority message arrives in the queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method, on the other hand, both reads and removes the first message from the queue. Repeated calls to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a>, therefore, return different messages.  </p>\n<p> Message Queuing orders messages in the queue according to priority and arrival time. A newer message is placed before an older one only if it is of a higher priority.  </p>\n<p> Use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked up to the specified period of time, or indefinitely if you indicated <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>. If you need the application processing to continue without waiting, use the asynchronous <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> method.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method with a time-out of zero to check whether the queue is empty.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.Peek_timeout#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example determines whether a queue is empty.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Determine whether a queue is empty.\n\t\t\tbool isQueueEmpty = myNewQueue.IsQueueEmpty();\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Determines whether a queue is empty. The Peek()\n\t\t// method throws an exception if there is no message\n\t\t// in the queue. This method handles that exception \n\t\t// by returning true to the calling method.\n\t\t//**************************************************\n\t\t\n\t\tpublic bool IsQueueEmpty()\n\t\t{\n\t\t\tbool isQueueEmpty = false;\n\n\t\t\t// Connect to a queue.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Set Peek to return immediately.\n\t\t\t\tmyQueue.Peek(new TimeSpan(0));\n\n\t\t\t\t// If an IOTimeout was not thrown, there is a message \n\t\t\t\t// in the queue.\n\t\t\t\tisQueueEmpty = false;\n\t\t\t}\n\n\t\t\tcatch(MessageQueueException e)\n\t\t\t{\n\t\t\t\tif (e.MessageQueueErrorCode == \n\t\t\t\t\tMessageQueueErrorCode.IOTimeout)\n\t\t\t\t{\n\t\t\t\t\t// No message was in the queue.\n\t\t\t\t\tisQueueEmpty = true;\n\t\t\t\t}\n\n\t\t\t\t// Handle other sources of MessageQueueException.\n\t\t\t}\n\n\t\t\t// Handle other exceptions as necessary.\n\n\t\t\t// Return true if there are no messages in the queue.\n\t\t\treturn isQueueEmpty;\n\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.Peek_timeout#1\">Imports System\nImports System.Messaging\n\n\n\n   \n    Public Class MyNewQueue\n\n\n        &#39;\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example determines whether a queue is empty.\n        &#39;\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Determine whether a queue is empty.\n            Dim IsQueueEmpty As Boolean = myNewQueue.IsQueueEmpty()\n\t    if IsQueueEMpty=True Then Console.WriteLine(&quot;Empty&quot;)\n            \n\n            Return\n\n        End Sub &#39;Main\n\n\n        &#39;\n        &#39; Determines whether a queue is empty. The Peek()\n        &#39; method throws an exception if there is no message\n        &#39; in the queue. This method handles that exception \n        &#39; by returning true to the calling method.\n        &#39;\n\n        Public Function IsQueueEmpty() As Boolean\n\n            &#39;Dim QueueEmpty As Boolean = False\n\n            &#39; Connect to a queue.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            Try\n\n                &#39; Set Peek to return immediately.\n                myQueue.Peek(New TimeSpan(0))\n\n                &#39; If an IOTimeout was not thrown, there is a message \n                &#39; in the queue.\n                &#39;queueEmpty = False\n\n            Catch e As MessageQueueException\n\n                If e.MessageQueueErrorCode = _\n                    MessageQueueErrorCode.IOTimeout Then\n\n                    &#39; No message was in the queue.\n                    IsQueueEmpty = True\n\n                End If\n\n                &#39; Handle other sources of MessageQueueException as necessary.\n\n                &#39; Handle other exceptions as necessary.\n\n            End Try\n\n            &#39; Return true if there are no messages in the queue.\n            &#39;Return queueEmpty\n\t    IsQueueEmpty = False\n\n        End Function &#39;IsQueueEmpty \n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.Peek_timeout#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n\n   //*************************************************\n   // Determines whether a queue is empty. The Peek()\n   // method throws an exception if there is no message\n   // in the queue. This method handles that exception \n   // by returning true to the calling method.\n   //*************************************************\n   bool IsQueueEmpty()\n   {\n      bool isQueueEmpty = false;\n      \n      // Connect to a queue.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n      try\n      {\n         \n         // Set Peek to return immediately.\n         myQueue-&gt;Peek( TimeSpan(0) );\n         \n         // If an IOTime-&gt;Item[Out] was* not thrown, there is a message \n         // in the queue.\n         isQueueEmpty = false;\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         if ( e-&gt;MessageQueueErrorCode == MessageQueueErrorCode::IOTimeout )\n         {\n            \n            // No message was in the queue.\n            isQueueEmpty = true;\n         }\n\n         \n         // Handle other sources of MessageQueueException.\n      }\n\n      \n      // Handle other exceptions as necessary.\n      // Return true if there are no messages in the queue.\n      return isQueueEmpty;\n   }\n\n};\n\n\n//*************************************************\n// Provides an entry point into the application.\n//         \n// This example determines whether a queue is empty.\n//*************************************************\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Determine whether a queue is empty.\n   bool isQueueEmpty = myNewQueue-&gt;IsQueueEmpty();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Peek_System_TimeSpan_System_Messaging_Cursor_System_Messaging_PeekAction_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Peek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Peek(TimeSpan,Cursor,PeekAction)</div>        \r\n          </div>\r\n    \r\n            <p>Returns without removing (peeks) the current or next message in the queue, using the specified cursor. The <span class=\"xref\">stem.Messaging.MessageQueue.Peek*</span> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message Peek (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.PeekAction action);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the maximum time to wait for the queue to contain a message.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cursor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a> that maintains a specific position in the message queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.peekaction\" data-linktype=\"relative-path\">PeekAction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.peekaction\" data-linktype=\"relative-path\">PeekAction</a> values. Indicates whether to peek at the current message in the queue, or the next message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that represents a message in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>A value other than <code>PeekAction.Current</code> or <code>PeekAction.Next</code> was specified for the <code>action</code> parameter.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>cursor</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid. Possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue. The method returns immediately if a message already exists in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method reads, but does not remove, a message from the queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method, on the other hand, both reads and removes a message from the queue.  </p>\n<p> Use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked up to the specified period of time, or indefinitely if you indicated <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>. If you need the application processing to continue without waiting, use the asynchronous <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> method.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_PeekByCorrelationId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeekByCorrelationId(String)</div>        \r\n          </div>\r\n    \r\n            <p>Peeks the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message PeekByCorrelationId (string correlationId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>correlationId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> of the message to peek.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> matches the <code>correlationId</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>correlationId</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>correlationId</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method looks in the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> for a message whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> matches the specified <code>correlationId</code> parameter. If no message is found that matches the <code>correlationID</code> parameter, an exception is thrown.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  </p>\n<p> Two other methods allow you to peek messages in a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method is used to retrieve a message by specifying its unique identifier.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  </p>\n<pre><code class=\"lang-cs\" name=\"Message.Acknowledgment#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example sends and receives a message from\n\t\t// a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Create new queues.\n\t\t\tCreateQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tCreateQueue(&quot;.\\\\myAdministrationQueue&quot;);\n\n\t\t\t// Send messages to a queue.\n\t\t\tmyNewQueue.SendMessage();\n\n\t\t\t// Receive messages from a queue.\n\t\t\tstring messageId = myNewQueue.ReceiveMessage(); \n\n\t\t\t// Receive acknowledgment message.\n\t\t\tif(messageId != null)\n\t\t\t{\n\t\t\t\tmyNewQueue.ReceiveAcknowledgment(messageId, &quot;.\\\\myAdministrationQueue&quot;);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Creates a new queue.\n\t\t//**************************************************\n\n\t\tpublic static void CreateQueue(string queuePath)\n\t\t{\n\t\t\ttry\t\n\t\t\t{\n\t\t\t\tif(!MessageQueue.Exists(queuePath))\n\t\t\t\t{\n\t\t\t\t\tMessageQueue.Create(queuePath);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(queuePath + &quot; already exists.&quot;);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (MessageQueueException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Sends a string message to a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\n\t\t\t// Connect to a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Create a new message.\n\t\t\tMessage myMessage = new Message(&quot;Original Message&quot;); \n\n\t\t\tmyMessage.AdministrationQueue = new MessageQueue(&quot;.\\\\myAdministrationQueue&quot;);\n\t\t\tmyMessage.AcknowledgeType = AcknowledgeTypes.PositiveReceive | AcknowledgeTypes.PositiveArrival;\n\n\t\t\t// Send the Order to the queue.\n\t\t\tmyQueue.Send(myMessage);\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message containing an Order.\n\t\t//**************************************************\n\t\t\n\t\tpublic  string ReceiveMessage()\n\t\t{\n\t\t\t// Connect to the a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\tmyQueue.MessageReadPropertyFilter.CorrelationId = true;\n\n\n\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(string)});\n\n\t\t\tstring returnString = null;\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Receive and format the message. \n\t\t\t\tMessage myMessage =\tmyQueue.Receive(); \n\n\n\t\t\t\t// Display message information.\n\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\t\t\t\tConsole.WriteLine(&quot;Original message information--&quot;);\n\t\t\t\tConsole.WriteLine(&quot;Body: &quot; +myMessage.Body.ToString());\n\t\t\t\tConsole.WriteLine(&quot;Id: &quot; + myMessage.Id.ToString());\n\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\n\t\t\t\treturnString =  myMessage.Id;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn returnString;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Receives a message containing an Order.\n\t\t//**************************************************\n\t\t\n\t\tpublic void ReceiveAcknowledgment(string messageId, string queuePath)\n\t\t{\n\t\t\tbool found = false;\n\t\t\tMessageQueue queue = new MessageQueue(queuePath);\n\t\t\tqueue.MessageReadPropertyFilter.CorrelationId = true;\n\t\t\tqueue.MessageReadPropertyFilter.Acknowledgment = true;\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\twhile(queue.PeekByCorrelationId(messageId) != null)\n\t\t\t\t{\n\t\t\t\t\tMessage myAcknowledgmentMessage = queue.ReceiveByCorrelationId(messageId);\n\t\t\t\n\t\t\t\t\t// Output acknowledgment message information. The correlation Id is identical\n\t\t\t\t\t// to the id of the original message.\n\t\t\t\t\tConsole.WriteLine(&quot;Acknowledgment Message Information--&quot;);\n\t\t\t\t\tConsole.WriteLine(&quot;Correlation Id: &quot; + myAcknowledgmentMessage.CorrelationId.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;Id: &quot; + myAcknowledgmentMessage.Id.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;Acknowledgment Type: &quot; + myAcknowledgmentMessage.Acknowledgment.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{ \n\t\t\t\t// This exception would be thrown if there is no (further) acknowledgment message\n\t\t\t\t// with the specified correlation Id. Only output a message if there are no messages;\n\t\t\t\t// not if the loop has found at least one.\n\t\t\t\tif(found == false)\n\t\t\t\t{\t\n\t\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t\t}\n\n\t\t\t\t// Handle other causes of invalid operation exception.\n\t\t\t}\n\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Message.Acknowledgment#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n   static void CreateQueue( String^ queuePath )\n   {\n      try\n      {\n         if (  !MessageQueue::Exists( queuePath ) )\n         {\n            MessageQueue::Create( queuePath );\n         }\n         else\n         {\n            Console::WriteLine(  &quot;{0} already exists.&quot;, queuePath );\n         }\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   void SendMessage()\n   {\n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Create a new message.\n      Message^ myMessage = gcnew Message( &quot;Original Message&quot; );\n      myMessage-&gt;AdministrationQueue = gcnew MessageQueue( &quot;.\\\\myAdministrationQueue&quot; );\n      myMessage-&gt;AcknowledgeType = (AcknowledgeTypes)(AcknowledgeTypes::PositiveReceive | AcknowledgeTypes::PositiveArrival);\n\n      // Send the Order to the queue.\n      myQueue-&gt;Send( myMessage );\n      return;\n   }\n\n   String^ ReceiveMessage()\n   {\n      // Connect to the a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n      myQueue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      String^ returnString = nullptr;\n      try\n      {\n         // Receive and format the message. \n         Message^ myMessage = myQueue-&gt;Receive();\n\n         // Display message information.\n         Console::WriteLine( &quot;____________________________________________&quot; );\n         Console::WriteLine( &quot;Original message information--&quot; );\n         Console::WriteLine( &quot;Body: {0}&quot;, myMessage-&gt;Body );\n         Console::WriteLine( &quot;Id: {0}&quot;, myMessage-&gt;Id );\n         Console::WriteLine( &quot;____________________________________________&quot; );\n         returnString = myMessage-&gt;Id;\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      // Catch other exceptions as necessary.\n      return returnString;\n   }\n\n   void ReceiveAcknowledgment( String^ messageId, String^ queuePath )\n   {\n      bool found = false;\n      MessageQueue^ queue = gcnew MessageQueue( queuePath );\n      queue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n      queue-&gt;MessageReadPropertyFilter-&gt;Acknowledgment = true;\n      try\n      {\n         while ( queue-&gt;PeekByCorrelationId( messageId ) != nullptr )\n         {\n            Message^ myAcknowledgmentMessage = queue-&gt;ReceiveByCorrelationId( messageId );\n\n            // Output acknowledgment message information. The correlation Id is identical\n            // to the id of the original message.\n            Console::WriteLine( &quot;Acknowledgment Message Information--&quot; );\n            Console::WriteLine( &quot;Correlation Id: {0}&quot;, myAcknowledgmentMessage-&gt;CorrelationId );\n            Console::WriteLine( &quot;Id: {0}&quot;, myAcknowledgmentMessage-&gt;Id );\n            Console::WriteLine( &quot;Acknowledgment Type: {0}&quot;, myAcknowledgmentMessage-&gt;Acknowledgment );\n            Console::WriteLine( &quot;____________________________________________&quot; );\n            found = true;\n         }\n      }\n      catch ( InvalidOperationException^ e ) \n      {\n         // This exception would be thrown if there is no (further) acknowledgment message\n         // with the specified correlation Id. Only output a message if there are no messages;\n         // not if the loop has found at least one.\n         if ( found == false )\n         {\n            Console::WriteLine( e-&gt;Message );\n         }\n\n         // Handle other causes of invalid operation exception.\n      }\n\n   }\n\n};\n\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Create new queues.\n   MyNewQueue::CreateQueue( &quot;.\\\\myQueue&quot; );\n   MyNewQueue::CreateQueue( &quot;.\\\\myAdministrationQueue&quot; );\n\n   // Send messages to a queue.\n   myNewQueue-&gt;SendMessage();\n\n   // Receive messages from a queue.\n   String^ messageId = myNewQueue-&gt;ReceiveMessage();\n\n   // Receive acknowledgment message.\n   if ( messageId != nullptr )\n   {\n      myNewQueue-&gt;ReceiveAcknowledgment( messageId, &quot;.\\\\myAdministrationQueue&quot; );\n   }\n\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Message.Acknowledgment#1\">Imports System\nImports System.Messaging\n\n\n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n   \n   \n\n   &#39; Provides an entry point into the application.       \n   &#39; This example sends and receives a message from\n   &#39; a queue.\n      \n   Public Shared Sub Main()\n         &#39; Create a new instance of the class.\n         Dim myNewQueue As New MyNewQueue()\n         \n         &#39; Create new queues.\n         CreateQueue(&quot;.\\myQueue&quot;)\n         CreateQueue(&quot;.\\myAdministrationQueue&quot;)\n         \n         &#39; Send messages to a queue.\n         myNewQueue.SendMessage()\n         \n         &#39; Receive messages from a queue.\n         Dim messageId As String = myNewQueue.ReceiveMessage()\n         \n         &#39; Receive acknowledgment message.\n         If Not (messageId Is Nothing) Then\n            myNewQueue.ReceiveAcknowledgment(messageId, &quot;.\\myAdministrationQueue&quot;)\n         End If\n         \n         Return\n   End Sub &#39;Main\n      \n      \n      &#39; Creates a new queue.\n\n   Public Shared Sub CreateQueue(queuePath As String)\n         Try\n            If Not MessageQueue.Exists(queuePath) Then\n               MessageQueue.Create(queuePath)\n            Else\n               Console.WriteLine((queuePath + &quot; already exists.&quot;))\n            End If\n         Catch e As MessageQueueException\n            Console.WriteLine(e.Message)\n         End Try\n   End Sub &#39;CreateQueue\n       \n      \n      \n \n      &#39; Sends a string message to a queue.\n \n   Public Sub SendMessage()\n         \n         &#39; Connect to a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         &#39; Create a new message.\n         Dim myMessage As New Message(&quot;Original Message&quot;)\n         \n         myMessage.AdministrationQueue = New MessageQueue(&quot;.\\myAdministrationQueue&quot;)\n         myMessage.AcknowledgeType = AcknowledgeTypes.PositiveReceive Or AcknowledgeTypes.PositiveArrival\n         \n         &#39; Send the Order to the queue.\n         myQueue.Send(myMessage)\n         \n         Return\n   End Sub &#39;SendMessage\n      \n      \n      \n \n      &#39; Receives a message containing an Order.\n \n   Public Function ReceiveMessage() As String\n         &#39; Connect to the a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         myQueue.MessageReadPropertyFilter.CorrelationId = True\n         \n         \n         &#39; Set the formatter to indicate body contains an Order.\n         myQueue.Formatter = New XmlMessageFormatter(New Type() {GetType(String)})\n         \n         Dim returnString As String = Nothing\n         \n         Try\n            &#39; Receive and format the message. \n            Dim myMessage As Message = myQueue.Receive()\n            \n            \n            &#39; Display message information.\n            Console.WriteLine(&quot;____________________________________________&quot;)\n            Console.WriteLine(&quot;Original message information--&quot;)\n            Console.WriteLine((&quot;Body: &quot; + myMessage.Body.ToString()))\n            Console.WriteLine((&quot;Id: &quot; + myMessage.Id.ToString()))\n            Console.WriteLine(&quot;____________________________________________&quot;)\n            \n            returnString = myMessage.Id\n         \n         \n                  \n         &#39; Handle invalid serialization format.\n         Catch e As InvalidOperationException\n            Console.WriteLine(e.Message)\n         End Try\n         \n         &#39; Catch other exceptions as necessary.\n         Return returnString\n   End Function &#39;ReceiveMessage\n      \n      \n \n      &#39; Receives a message containing an Order.\n \n   Public Sub ReceiveAcknowledgment(messageId As String, queuePath As String)\n         Dim found As Boolean = False\n         Dim queue As New MessageQueue(queuePath)\n         queue.MessageReadPropertyFilter.CorrelationId = True\n         queue.MessageReadPropertyFilter.Acknowledgment = True\n         \n         Try\n            While Not (queue.PeekByCorrelationId(messageId) Is Nothing)\n               Dim myAcknowledgmentMessage As Message = queue.ReceiveByCorrelationId(messageId)\n               \n               &#39; Output acknowledgment message information. The correlation Id is identical\n               &#39; to the id of the original message.\n               Console.WriteLine(&quot;Acknowledgment Message Information--&quot;)\n               Console.WriteLine((&quot;Correlation Id: &quot; + myAcknowledgmentMessage.CorrelationId.ToString()))\n               Console.WriteLine((&quot;Id: &quot; + myAcknowledgmentMessage.Id.ToString()))\n               Console.WriteLine((&quot;Acknowledgment Type: &quot; + myAcknowledgmentMessage.Acknowledgment.ToString()))\n               Console.WriteLine(&quot;____________________________________________&quot;)\n               \n               found = True\n            End While\n         Catch e As InvalidOperationException\n            &#39; This exception would be thrown if there is no (further) acknowledgment message\n            &#39; with the specified correlation Id. Only output a message if there are no messages;\n            &#39; not if the loop has found at least one.\n            If found = False Then\n               Console.WriteLine(e.Message)\n            End If\n         End Try \n   End Sub &#39;ReceiveAcknowledgment &#39; Handle other causes of invalid operation exception.\n End Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_PeekByCorrelationId_System_String_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_PeekByCorrelationId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeekByCorrelationId(String,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Peeks the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message PeekByCorrelationId (string correlationId, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>correlationId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> of the message to peek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> matches the <code>correlationId</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>correlationId</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>A message did not arrive before the time-out expired.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method looks in the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> for a message whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> matches the specified <code>correlationId</code> parameter. If no message is found that matches the <code>correlationID</code> parameter, and no new message arrives in the queue within the period specified by the <code>timeout</code> parameter, an exception is thrown.  </p>\n<p> The <code>timeout</code> parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> of the new message to see if it matches the <code>correlationId</code> parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> matches the <code>correlationId</code> parameter.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  </p>\n<p> Two other methods allow you to peek messages in a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method is used to retrieve a message by specifying its unique identifier.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of PeekByCorrelationId.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#5\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Designate a queue to receive the acknowledgement message for this\n    // message.\n    msg-&gt;AdministrationQueue = \n        gcnew MessageQueue(&quot;.\\\\exampleAdminQueue&quot;);\n\n    // Set the message to generate an acknowledgement message upon its\n    // arrival.\n    msg-&gt;AcknowledgeType = AcknowledgeTypes::PositiveArrival;\n\n    // Send the message.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Receive the message from the queue.\n    msg = queue-&gt;ReceiveById(id, TimeSpan::FromSeconds(10.0));\n\n    // Connect to the admin queue.\n    MessageQueue^ adminQueue = \n        gcnew MessageQueue(&quot;.\\\\exampleAdminQueue&quot;);\n\n    // Set the admin queue&#39;s MessageReadPropertyFilter property to ensure\n    // that the acknowledgement message includes the desired properties.\n    adminQueue-&gt;MessageReadPropertyFilter-&gt;Acknowledgment = true;\n    adminQueue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n\n    // Peek at the acknowledgement message.\n    Message^ ackMsg = adminQueue-&gt;PeekByCorrelationId(id,\n        TimeSpan::FromSeconds(10.0));\n\n    // Display the acknowledgement message&#39;s property values.\n    Console::WriteLine(&quot;Message.Label: {0}&quot;, ackMsg-&gt;Label);\n    Console::WriteLine(&quot;Message.Acknowledgment: {0}&quot;,\n        ackMsg-&gt;Acknowledgment);\n    Console::WriteLine(&quot;Message.CorrelationId: {0}&quot;, ackMsg-&gt;CorrelationId);\n\n    adminQueue-&gt;Close();\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#5\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Designate a queue to receive the acknowledgement message for this\n        // message.\n        msg.AdministrationQueue = new MessageQueue(&quot;.\\\\exampleAdminQueue&quot;);\n\n        // Set the message to generate an acknowledgement message upon its\n        // arrival.\n        msg.AcknowledgeType = AcknowledgeTypes.PositiveArrival;\n\n        // Send the message.\n        queue.Send(msg, &quot;Example Message Label&quot;);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Receive the message from the queue.\n        msg = queue.ReceiveById(id, TimeSpan.FromSeconds(10.0));\n\n        // Connect to the admin queue.\n        MessageQueue adminQueue = new MessageQueue(&quot;.\\\\exampleAdminQueue&quot;);\n\n        // Set the admin queue&#39;s MessageReadPropertyFilter property to ensure\n        // that the acknowledgement message includes the desired properties.\n        adminQueue.MessageReadPropertyFilter.Acknowledgment = true;\n        adminQueue.MessageReadPropertyFilter.CorrelationId = true;\n\n        // Peek at the acknowledgement message.\n        Message ackMsg = adminQueue.PeekByCorrelationId(id,\n            TimeSpan.FromSeconds(10.0));\n\n        // Display the acknowledgement message&#39;s property values.\n        Console.WriteLine(&quot;Message.Label: {0}&quot;, ackMsg.Label);\n        Console.WriteLine(&quot;Message.Acknowledgment: {0}&quot;, ackMsg.Acknowledgment);\n        Console.WriteLine(&quot;Message.CorrelationId: {0}&quot;, ackMsg.CorrelationId);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_PeekById_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_PeekById_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeekById(String)</div>        \r\n          </div>\r\n    \r\n            <p>Peeks the message whose message identifier matches the <code>id</code> parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message PeekById (string id);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>id</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.Id*</span> of the message to peek.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.Id*</span> property matches the <code>id</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>id</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>No message with the specified <code>id</code> exists.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use PeekById to read, without removing from the queue, a message that has a known message identifier. The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <code>id</code> parameter. This overload throws an exception if the queue does not currently contain the message.  </p>\n<p> Two additional methods allow you to peek messages in a queue: <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a>. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method returns the first message in the queue; <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of PeekById.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#6\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Simulate doing other work so the message has time to arrive.\n    System::Threading::Thread::Sleep(TimeSpan::FromSeconds(10.0));\n\n    // Peek at the message.\n    msg = queue-&gt;PeekById(id);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#6\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, &quot;Example Message Label&quot;);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Simulate doing other work so the message has time to arrive.\n        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10.0));\n\n        // Peek at the message.\n        msg = queue.PeekById(id);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_PeekById_System_String_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_PeekById_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeekById(String,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Peeks the message whose message identifier matches the <code>id</code> parameter. Waits until the message appears in the queue or a time-out occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message PeekById (string id, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>id</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.Id*</span> of the message to peek.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.Id*</span> property matches the <code>id</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>id</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>id</code> does not exist in the queue and did not arrive before the period specified by the <code>timeout</code> parameter expired.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> to read, without removing from the queue, a message that has a known message identifier. The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <code>id</code> parameter. This overload throws an exception if the queue does not currently contain the message and a new message does not arrive before the time-out occurs.  </p>\n<p> The <code>timeout</code> parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> of the new message to see if it matches the <code>id</code> parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> matches the <code>id</code> parameter.  </p>\n<p> Two additional methods allow you to peek messages in a queue: <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> and <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a>. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method returns the first message in the queue; <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of PeekById.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#7\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Peek at the message.\n    msg = queue-&gt;PeekById(id, TimeSpan::FromSeconds(10.0));\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#7\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, &quot;Example Message Label&quot;);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Peek at the message.\n        msg = queue.PeekById(id, TimeSpan.FromSeconds(10.0));\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_PeekByLookupId_System_Int64_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_PeekByLookupId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeekByLookupId(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Introduced in MSMQ 3.0. Peeks at the message that matches the given lookup identifier from a non-transactional queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message PeekByLookupId (long lookupId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>lookupId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.LookupId*</span> of the message to peek at.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.LookupId*</span> property matches the <code>lookupId</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>MSMQ 3.0 is not installed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>lookupId</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to read a message with a known lookup identifier without removing it from the queue. This method throws an exception immediately if the message is not in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_LookupId_\" data-linktype=\"relative-path\">LookupId</a> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given <code>lookupId</code> parameter.  </p>\n<p> To read a message with a specified lookup identifier and remove it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveByLookupId_\" data-linktype=\"relative-path\">ReceiveByLookupId</a> method.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_PeekByLookupId_System_Messaging_MessageLookupAction_System_Int64_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_PeekByLookupId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeekByLookupId(MessageLookupAction,Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Introduced in MSMQ 3.0. Peeks at a specific message from the queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message PeekByLookupId (System.Messaging.MessageLookupAction action, long lookupId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagelookupaction\" data-linktype=\"relative-path\">MessageLookupAction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagelookupaction\" data-linktype=\"relative-path\">MessageLookupAction</a> values, specifying how the message is read in the queue. Specify one of the following:  </p>\n<p> <code>MessageLookupAction.Current</code>: Peeks at the message specified by <code>lookupId</code>.  </p>\n<p> <code>MessageLookupAction.Next</code>: Peeks at the message following the message specified by <code>lookupId</code>.  </p>\n<p> <code>MessageLookupAction.Previous</code>: Peeks at the message preceding the message specified by <code>lookupId</code>.  </p>\n<p> <code>MessageLookupAction.First</code>: Peeks at the first message in the queue. The <code>lookupId</code> parameter must be set to 0.  </p>\n<p> <code>MessageLookupAction.Last</code>: Peeks at the last message in the queue. The <code>lookupId</code> parameter must be set to 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lookupId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.LookupId*</span> of the message to peek at, or 0. 0 is used when accessing the first or last message in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> specified by the <code>action</code> and <code>lookupId</code> parameters passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>MSMQ 3.0 is not installed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>lookupId</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagelookupaction\" data-linktype=\"relative-path\">MessageLookupAction</a> members.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to read a message with a known lookup identifier without removing it from the queue. This method throws an exception immediately if the message is not in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_LookupId_\" data-linktype=\"relative-path\">LookupId</a> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given <code>lookupId</code> parameter.  </p>\n<p> To read a message with a specified identifier and remove it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveByLookupId_\" data-linktype=\"relative-path\">ReceiveByLookupId</a> method.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Purge\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Purge_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Purge()</div>        \r\n          </div>\r\n    \r\n            <p>Deletes all the messages contained in the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Purge ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Purging the queue causes Message Queuing to set the queue modification flag, which affects the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_LastModifyTime_\" data-linktype=\"relative-path\">LastModifyTime</a> property. Messages that are purged from the queue are lost; they are not sent to the dead-letter queue or the journal queue.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of Purge.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#29\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Delete all messages from the queue.\n    queue-&gt;Purge();\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#29\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Delete all messages from the queue.\n        queue.Purge();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Receive\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Receive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Receive()</div>        \r\n          </div>\r\n    \r\n            <p>Receives the first message available in the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. This call is synchronous, and blocks the current thread of execution until a message is available.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message Receive ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that references the first message available in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to receive a message from a queue, or wait until there are messages in the queue.  </p>\n<p> The Receive method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to Receive will return the messages that follow in the queue, or new, higher priority messages.  </p>\n<p> To read the first message in a queue without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  </p>\n<p> Use a call to Receive when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the Receive method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example receives a message from a queue and outputs information about that message to the screen.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.Receive_noparms#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n\t// This class represents an object the following example \n\t// sends to a queue and receives from a queue.\n\tpublic class Order\n\t{\n\t\tpublic int orderId;\n\t\tpublic DateTime orderTime;\n\t};\t\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example sends and receives a message from\n\t\t// a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Send a message to a queue.\n\t\t\tmyNewQueue.SendMessage();\n\n\t\t\t// Receive a message from a queue.\n\t\t\tmyNewQueue.ReceiveMessage();\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Sends an Order to a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\t\t\t\n\t\t\t// Create a new order and set values.\n\t\t\tOrder sentOrder = new Order();\n\t\t\tsentOrder.orderId = 3;\n\t\t\tsentOrder.orderTime = DateTime.Now;\n\n\t\t\t// Connect to a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Send the Order to the queue.\n\t\t\tmyQueue.Send(sentOrder);\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message containing an Order.\n\t\t//**************************************************\n\t\t\n\t\tpublic  void ReceiveMessage()\n\t\t{\n\t\t\t// Connect to the a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(MyProject.Order)});\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Receive and format the message. \n\t\t\t\tMessage myMessage =\tmyQueue.Receive(); \n\t\t\t\tOrder myOrder = (Order)myMessage.Body;\n\n\t\t\t\t// Display message information.\n\t\t\t\tConsole.WriteLine(&quot;Order ID: &quot; + \n\t\t\t\t\tmyOrder.orderId.ToString());\n\t\t\t\tConsole.WriteLine(&quot;Sent: &quot; + \n\t\t\t\t\tmyOrder.orderTime.ToString());\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.Receive_noparms#1\">Imports System\nImports System.Messaging\n\n    &#39; This class represents an object the following example \n    &#39; sends to a queue and receives from a queue.\n    Public Class Order\n        Public orderId As Integer\n        Public orderTime As DateTime\n    End Class &#39;Order\n\n\n   \n    Public Class MyNewQueue\n\n\n        &#39;\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example sends and receives a message from\n        &#39; a qeue.\n        &#39;\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Send a message to a queue.\n            myNewQueue.SendMessage()\n\n            &#39; Receive a message from a queue.\n            myNewQueue.ReceiveMessage()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        &#39;\n        &#39; Sends an Order to a queue.\n        &#39;\n\n        Public Sub SendMessage()\n\n            &#39; Create a new order and set values.\n            Dim sentOrder As New Order()\n            sentOrder.orderId = 3\n            sentOrder.orderTime = DateTime.Now\n\n            &#39; Connect to a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Send the Order to the queue.\n            myQueue.Send(sentOrder)\n\n            Return\n\n        End Sub &#39;SendMessage\n\n\n        &#39;\n        &#39; Receives a message containing an Order.\n        &#39;\n\n        Public Sub ReceiveMessage()\n\n            &#39; Connect to the a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Set the formatter to indicate the body contains an Order.\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType(Order)})\n\n            Try\n\n                &#39; Receive and format the message. \n                Dim myMessage As Message = myQueue.Receive()\n                Dim myOrder As Order = CType(myMessage.Body, Order)\n\n                &#39; Display message information.\n                Console.WriteLine((&quot;Order ID: &quot; + _\n                    myOrder.orderId.ToString()))\n                Console.WriteLine((&quot;Sent: &quot; + _\n                    myOrder.orderTime.ToString()))\n\n            Catch m As MessageQueueException\n                &#39; Handle Message Queuing exceptions.\n\n            Catch e As InvalidOperationException\n                &#39; Handle invalid serialization format.\n                Console.WriteLine(e.Message)\n\n\n                &#39; Catch other exceptions as necessary.\n\n            End Try\n\n            Return\n\n        End Sub &#39;ReceiveMessage\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.Receive_noparms#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// This class represents an object the following example \n// sends to a queue and receives from a queue.\nref class Order\n{\npublic:\n   int orderId;\n   DateTime orderTime;\n};\n\n\n/// &lt;summary&gt;\n/// Provides a container class for the example.\n/// &lt;/summary&gt;\nref class MyNewQueue\n{\npublic:\n\n   //*************************************************\n   // Sends an Order to a queue.\n   //*************************************************\n   void SendMessage()\n   {\n      // Create a new order and set values.\n      Order^ sentOrder = gcnew Order;\n      sentOrder-&gt;orderId = 3;\n      sentOrder-&gt;orderTime = DateTime::Now;\n\n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Send the Order to the queue.\n      myQueue-&gt;Send( sentOrder );\n      return;\n   }\n\n   //*************************************************\n   // Receives a message containing an Order.\n   //*************************************************\n   void ReceiveMessage()\n   {\n      // Connect to the a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Set the formatter to indicate body contains an Order.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = Order::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      try\n      {\n         // Receive and format the message. \n         Message^ myMessage = myQueue-&gt;Receive();\n         Order^ myOrder = static_cast&lt;Order^&gt;(myMessage-&gt;Body);\n\n         // Display message information.\n         Console::WriteLine( &quot;Order ID: {0}&quot;, myOrder-&gt;orderId );\n         Console::WriteLine( &quot;Sent: {0}&quot;, myOrder-&gt;orderTime );\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      // Catch other exceptions as necessary.\n      return;\n   }\n};\n\n//*************************************************\n// Provides an entry point into the application.\n//         \n// This example sends and receives a message from\n// a queue.\n//*************************************************\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Send a message to a queue.\n   myNewQueue-&gt;SendMessage();\n\n   // Receive a message from a queue.\n   myNewQueue-&gt;ReceiveMessage();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Receive_System_Messaging_MessageQueueTransaction_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Receive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Receive(MessageQueueTransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the first message available in the transactional queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. This call is synchronous, and blocks the current thread of execution until a message is available.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message Receive (System.Messaging.MessageQueueTransaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that references the first message available in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.  </p>\n<p> -or-  </p>\n<p> The queue is non-transactional.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to receive a message from a transactional queue using the internal transaction context defined by the <code>transaction</code> parameter, or wait until there are messages in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> will return the messages that follow in the queue.  </p>\n<p> Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> To read the first message in a queue without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> does not remove any messages in the queue, there would be nothing to roll back by a call to <a class=\"xref\" href=\"system.messaging.messagequeuetransaction#System_Messaging_MessageQueueTransaction_Abort_\" data-linktype=\"relative-path\">Abort</a>.  </p>\n<p> Use a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example connects to a transactional queue on the local computer and sends a message to the queue. It then receives the message that contains an order. If it encounters a non-transactional queue, it will throw and exception and rollback the transaction.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.Receive_transaction#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n    /// &lt;summary&gt;\n    /// Provides a container class for the example.\n    /// &lt;/summary&gt;\n    public class MyNewQueue\n    {\n\n        //**************************************************\n        // Provides an entry point into the application.\n        // \n        // This example sends and receives a message from\n        // a transactional queue.\n        //**************************************************\n\n        public static void Main()\n        {\n            // Create a new instance of the class.\n            MyNewQueue myNewQueue = new MyNewQueue();\n\n            // Send a message to a queue.\n            myNewQueue.SendMessageTransactional();\n\n            // Receive a message from a queue.\n            myNewQueue.ReceiveMessageTransactional();\n\n            return;\n        }\n\n\n        //**************************************************\n        // Sends a message to a queue.\n        //**************************************************\n\t\t\n        public void SendMessageTransactional()\n        {\n\t\t\t\t\t\t\n            // Connect to a queue on the local computer.\n            MessageQueue myQueue = new \n                MessageQueue(&quot;.\\\\myTransactionalQueue&quot;);\n\n            // Send a message to the queue.\n            if (myQueue.Transactional == true)\n            {\n                // Create a transaction.\n                MessageQueueTransaction myTransaction = new \n                    MessageQueueTransaction();\n\n                // Begin the transaction.\n                myTransaction.Begin();\n\n                // Send the message.\n                myQueue.Send(&quot;My Message Data.&quot;, myTransaction);\n\n                // Commit the transaction.\n                myTransaction.Commit();\n            }\n\n            return;\n        }\n\n\n        //**************************************************\n        // Receives a message containing an Order.\n        //**************************************************\n\t\t\n        public  void ReceiveMessageTransactional()\n        {\n            // Connect to a transactional queue on the local computer.\n            MessageQueue myQueue = new \n                MessageQueue(&quot;.\\\\myTransactionalQueue&quot;);\n\n            // Set the formatter.\n            myQueue.Formatter = new XmlMessageFormatter(new Type[]\n                {typeof(String)});\n\t\t\t\n            // Create a transaction.\n            MessageQueueTransaction myTransaction = new \n                MessageQueueTransaction();\n\n            try\n            {\n                // Begin the transaction.\n                myTransaction.Begin();\n\t\t\t\t\n                // Receive the message. \n                Message myMessage =\tmyQueue.Receive(myTransaction); \n                String myOrder = (String)myMessage.Body;\n\n                // Display message information.\n                Console.WriteLine(myOrder);\n\n                // Commit the transaction.\n                myTransaction.Commit();\n\n            }\n\t\t\t\n            catch (MessageQueueException e)\n            {\n                // Handle nontransactional queues.\n                if (e.MessageQueueErrorCode == \n                    MessageQueueErrorCode.TransactionUsage)\n                { \n                    Console.WriteLine(&quot;Queue is not transactional.&quot;);\n                }\n\t\t\t\t\n                // Else catch other sources of a MessageQueueException.\n\n                // Roll back the transaction.\n                myTransaction.Abort();\n            }\n\n            // Catch other exceptions as necessary, such as \n            // InvalidOperationException, thrown when the formatter \n            // cannot deserialize the message.\n\n            return;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.Receive_transaction#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n/// &lt;summary&gt;\n/// Provides a container class for the example.\n/// &lt;/summary&gt;\nref class MyNewQueue\n{\npublic:\n\n   //*************************************************\n   // Sends a message to a queue.\n   //*************************************************\n   void SendMessageTransactional()\n   {\n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myTransactionalQueue&quot; );\n\n      // Send a message to the queue.\n      if ( myQueue-&gt;Transactional == true )\n      {\n         // Create a transaction.\n         MessageQueueTransaction^ myTransaction = gcnew MessageQueueTransaction;\n\n         // Begin the transaction.\n         myTransaction-&gt;Begin();\n\n         // Send the message.\n         myQueue-&gt;Send( &quot;My Message Data.&quot;, myTransaction );\n\n         // Commit the transaction.\n         myTransaction-&gt;Commit();\n      }\n\n      return;\n   }\n\n\n   //*************************************************\n   // Receives a message containing an Order.\n   //*************************************************\n   void ReceiveMessageTransactional()\n   {\n      // Connect to a transactional queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myTransactionalQueue&quot; );\n\n      // Set the formatter.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n      // Create a transaction.\n      MessageQueueTransaction^ myTransaction = gcnew MessageQueueTransaction;\n      try\n      {\n         // Begin the transaction.\n         myTransaction-&gt;Begin();\n\n         // Receive the message. \n         Message^ myMessage = myQueue-&gt;Receive( myTransaction );\n         String^ myOrder = static_cast&lt;String^&gt;(myMessage-&gt;Body);\n\n         // Display message information.\n         Console::WriteLine( myOrder );\n\n         // Commit the transaction.\n         myTransaction-&gt;Commit();\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         // Handle nontransactional queues.\n         if ( e-&gt;MessageQueueErrorCode == MessageQueueErrorCode::TransactionUsage )\n         {\n            Console::WriteLine( &quot;Queue is not transactional.&quot; );\n         }\n\n         // Else catch other sources of a MessageQueueException.\n         // Roll back the transaction.\n         myTransaction-&gt;Abort();\n      }\n\n      // Catch other exceptions as necessary, such as \n      // InvalidOperationException, thrown when the formatter \n      // cannot deserialize the message.\n      return;\n   }\n};\n\n//*************************************************\n// Provides an entry point into the application.\n// \n// This example sends and receives a message from\n// a transactional queue.\n//*************************************************\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Send a message to a queue.\n   myNewQueue-&gt;SendMessageTransactional();\n\n   // Receive a message from a queue.\n   myNewQueue-&gt;ReceiveMessageTransactional();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.Receive_transaction#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        &#39;\n        &#39; Provides an entry point into the application.\n        &#39; \n        &#39; This example sends and receives a message from\n        &#39; a transactional queue.\n        &#39;\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue\n\n            &#39; Send a message to a queue.\n            myNewQueue.SendMessageTransactional()\n\n            &#39; Receive a message from a queue.\n            myNewQueue.ReceiveMessageTransactional()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        &#39;\n        &#39; Sends a message to a queue.\n        &#39;\n\n        Public Sub SendMessageTransactional()\n\n            &#39; Connect to a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myTransactionalQueue&quot;)\n\n            &#39; Send a message to the queue.\n            If myQueue.Transactional = True Then\n\n                &#39; Create a transaction.\n                Dim myTransaction As New MessageQueueTransaction\n\n                &#39; Begin the transaction.\n                myTransaction.Begin()\n\n                &#39; Send the message.\n                myQueue.Send(&quot;My Message Data.&quot;, myTransaction)\n\n                &#39; Commit the transaction.\n                myTransaction.Commit()\n\n            End If\n\n            Return\n\n        End Sub &#39;SendMessageTransactional\n\n\n        &#39;\n        &#39; Receives a message containing an Order.\n        &#39;\n\n        Public Sub ReceiveMessageTransactional()\n\n            &#39; Connect to a transactional queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myTransactionalQueue&quot;)\n\n            &#39; Set the formatter.\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Create a transaction.\n            Dim myTransaction As New MessageQueueTransaction\n\n            Try\n\n                &#39; Begin the transaction.\n                myTransaction.Begin()\n\n                &#39; Receive the message. \n                Dim myMessage As Message = _\n                    myQueue.Receive(myTransaction)\n                Dim myOrder As [String] = CType(myMessage.Body, _\n                    [String])\n\n                &#39; Display message information.\n                Console.WriteLine(myOrder)\n\n                &#39; Commit the transaction.\n                myTransaction.Commit()\n\n\n            Catch e As MessageQueueException\n\n                &#39; Handle nontransactional queues.\n                If e.MessageQueueErrorCode = _\n                    MessageQueueErrorCode.TransactionUsage Then\n\n                    Console.WriteLine(&quot;Queue is not transactional.&quot;)\n\n                End If\n\n                &#39; Else catch other sources of a MessageQueueException.\n\n\n                &#39; Roll back the transaction.\n                myTransaction.Abort()\n\n\n                &#39; Catch other exceptions as necessary, such as \n                &#39; InvalidOperationException, thrown when the formatter\n                &#39; cannot deserialize the message.\n\n            End Try\n\n            Return\n\n        End Sub &#39;ReceiveMessageTransactional\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Receive_System_Messaging_MessageQueueTransactionType_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Receive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Receive(MessageQueueTransactionType)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the first message available in the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. This call is synchronous, and blocks the current thread of execution until a message is available.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message Receive (System.Messaging.MessageQueueTransactionType transactionType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> values, describing the type of transaction context to associate with the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that references the first message available in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>transactionType</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> members.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to receive a message from a queue using a transaction context defined by the <code>transactionType</code> parameter, or wait until there are messages in the queue.  </p>\n<p> Specify <code>Automatic</code> for the <code>transactionType</code> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify <code>Single</code> if you want to receive the message as a single internal transaction. You can specify <code>None</code> if you want to receive a message from a transactional queue outside of a transaction context.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> will return the messages that follow in the queue.  </p>\n<p> If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> To read the first message in a queue without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> does not remove any messages in the queue, there would be nothing to roll back by a call to <a class=\"xref\" href=\"system.messaging.messagequeuetransaction#System_Messaging_MessageQueueTransaction_Abort_\" data-linktype=\"relative-path\">Abort</a>.  </p>\n<p> Use a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of Receive.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#9\">\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, MessageQueueTransactionType::Single);\n\n    // Simulate doing other work so the message has time to arrive.\n    System::Threading::Thread::Sleep(TimeSpan::FromSeconds(10.0));\n\n    // Set the formatter to indicate the message body contains a String.\n    queue-&gt;Formatter = gcnew XmlMessageFormatter(\n        gcnew array&lt;Type^&gt;{String::typeid});\n\n    // Receive the message from the queue.  Because the Id of the message\n    // , it might not be the message just sent.\n    msg = queue-&gt;Receive(MessageQueueTransactionType::Single);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#9\">\n        // Connect to a transactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, MessageQueueTransactionType.Single);\n\n        // Simulate doing other work so the message has time to arrive.\n        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10.0));\n\n        // Set the formatter to indicate the message body contains a String.\n        queue.Formatter = new XmlMessageFormatter(new Type[]\n            {typeof(String)});\n\n        // Receive the message from the queue.  Because the Id of the message\n        // , it might not be the message just sent.\n        msg = queue.Receive(MessageQueueTransactionType.Single); \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Receive_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Receive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Receive(TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the first message available in the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> and waits until either a message is available in the queue, or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message Receive (TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that references the first message available in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>A message did not arrive in the queue before the time-out expired.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method allows for the synchronous reading of a message, removing it from the queue. Subsequent calls to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> will return the messages that follow in the queue, or new, higher priority messages.  </p>\n<p> To read the first message in a queue without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  </p>\n<p> Use a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a> for the <code>timeout</code> parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example receives a message from a queue and outputs information about that message to the screen. The example pauses execution for up to five seconds while waiting for a message to arrive in the queue.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.Receive_timeout#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t// This class represents an object the following example \n\t// receives from a queue.\n\n\tpublic class Order\n\t{\n\t\tpublic int orderId;\n\t\tpublic DateTime orderTime;\n\t};\t\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example receives a message from a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Receive a message from a queue.\n\t\t\tmyNewQueue.ReceiveMessage();\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message containing an Order.\n\t\t//**************************************************\n\n\t\tpublic void ReceiveMessage()\n\t\t{\n\t\t\t// Connect to the a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(MyProject.Order)});\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Receive and format the message. \n\t\t\t\t// Wait 5 seconds for a message to arrive.\n\t\t\t\tMessage myMessage =\tmyQueue.Receive(new \n\t\t\t\t\tTimeSpan(0,0,5)); \n\t\t\t\tOrder myOrder = (Order)myMessage.Body;\n\n\t\t\t\t// Display message information.\n\t\t\t\tConsole.WriteLine(&quot;Order ID: &quot; + \n\t\t\t\t\tmyOrder.orderId.ToString());\n\t\t\t\tConsole.WriteLine(&quot;Sent: &quot; + \n\t\t\t\t\tmyOrder.orderTime.ToString());\n\t\t\t}\n\n\t\t\tcatch (MessageQueueException e)\n\t\t\t{\n\t\t\t\t// Handle no message arriving in the queue.\n\t\t\t\tif (e.MessageQueueErrorCode == \n\t\t\t\t\tMessageQueueErrorCode.IOTimeout)\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(&quot;No message arrived in queue.&quot;);\n\t\t\t\t}\t\t\t\n\n\t\t\t\t// Handle other sources of a MessageQueueException.\n\t\t\t}\n\t\t\t\n\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.Receive_timeout#1\">Imports System\nImports System.Messaging\n\n&#39; This class represents an object the following example \n&#39; receives from a queue.\nPublic Class Order\n        Public orderId As Integer\n        Public orderTime As DateTime\nEnd Class &#39;Order\n\n\n   \nPublic Class MyNewQueue\n\n\n        &#39;\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example receives a message from a queue.\n        &#39;\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue()\n\n            &#39; Receive a message from a queue.\n            myNewQueue.ReceiveMessage()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        &#39;\n        &#39; Receives a message containing an Order.\n        &#39;\n\n        Public Sub ReceiveMessage()\n\n            &#39; Connect to the a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Set the formatter to indicate body contains an Order.\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType(Order)})\n\n            Try\n\n                &#39; Receive and format the message. \n                &#39; Wait 5 seconds for a message to arrive.\n                Dim myMessage As Message = myQueue.Receive(New _\n                    TimeSpan(0, 0, 5))\n                Dim myOrder As Order = CType(myMessage.Body, Order)\n\n                &#39; Display message information.\n                Console.WriteLine((&quot;Order ID: &quot; + _\n                    myOrder.orderId.ToString()))\n                Console.WriteLine((&quot;Sent: &quot; + _\n                    myOrder.orderTime.ToString()))\n\n            Catch e As MessageQueueException\n                &#39; Handle no message arriving in the queue.\n                If e.MessageQueueErrorCode = _\n                    MessageQueueErrorCode.IOTimeout Then\n\n                    Console.WriteLine(&quot;No message arrived in queue.&quot;)\n\n                End If\n\n                &#39; Handle other sources of a MessageQueueException.\n\n            Catch e As InvalidOperationException\n                &#39; Handle invalid serialization format.\n                Console.WriteLine(e.Message)\n\n                &#39; Catch other exceptions as necessary.\n\n            End Try\n\n            Return\n\n        End Sub &#39;ReceiveMessage\n\nEnd Class &#39;MyNewQueue\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.Receive_timeout#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// This class represents an object the following example \n// receives from a queue.\nref class Order\n{\npublic:\n   int orderId;\n   DateTime orderTime;\n};\n\n\n/// &lt;summary&gt;\n/// Provides a container class for the example.\n/// &lt;/summary&gt;\nref class MyNewQueue\n{\npublic:\n\n   //*************************************************\n   // Receives a message containing an Order.\n   //*************************************************\n   void ReceiveMessage()\n   {\n      // Connect to the a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Set the formatter to indicate body contains an Order.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = Order::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      try\n      {\n         // Receive and format the message. \n         // Wait 5 seconds for a message to arrive.\n         Message^ myMessage = myQueue-&gt;Receive( TimeSpan(0,0,5) );\n         Order^ myOrder = static_cast&lt;Order^&gt;(myMessage-&gt;Body);\n\n         // Display message information.\n         Console::WriteLine( &quot;Order ID: {0}&quot;, myOrder-&gt;orderId );\n         Console::WriteLine( &quot;Sent: {0}&quot;, myOrder-&gt;orderTime );\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         // Handle no message arriving in the queue.\n         if ( e-&gt;MessageQueueErrorCode == MessageQueueErrorCode::IOTimeout )\n         {\n            Console::WriteLine( &quot;No message arrived in queue.&quot; );\n         }\n\n         // Handle other sources of a MessageQueueException.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      // Catch other exceptions as necessary.\n      return;\n   }\n};\n\n//*************************************************\n// Provides an entry point into the application.\n//         \n// This example receives a message from a queue.\n//*************************************************\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Receive a message from a queue.\n   myNewQueue-&gt;ReceiveMessage();\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Receive_System_TimeSpan_System_Messaging_Cursor_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Receive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Receive(TimeSpan,Cursor)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.Cursor cursor);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cursor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a> that maintains a specific position in the message queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that references the first message available in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>A message did not arrive in the queue before the time-out expired.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method  </p>\n<p> Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Receive_System_TimeSpan_System_Messaging_MessageQueueTransaction_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Receive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Receive(TimeSpan,MessageQueueTransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the first message available in the transactional queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> and waits until either a message is available in the queue, or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that references the first message available in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>A message did not arrive in the queue before the time-out expired.  </p>\n<p> -or-  </p>\n<p> The queue is non-transactional.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to receive a message from a transactional queue using the internal transaction context defined by the <code>transaction</code> parameter, and return within a specified period of time if there are no messages in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> will return the messages that follow in the queue.  </p>\n<p> Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> To read the first message in a queue without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> does not remove any messages in the queue, there would be nothing to roll back by a call to <a class=\"xref\" href=\"system.messaging.messagequeuetransaction#System_Messaging_MessageQueueTransaction_Abort_\" data-linktype=\"relative-path\">Abort</a>.  </p>\n<p> Use a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a> for the <code>timeout</code> parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this method.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.Receive_TimeoutTransaction#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n    /// &lt;summary&gt;\n    /// Provides a container class for the example.\n    /// &lt;/summary&gt;\n    public class MyNewQueue\n    {\n\n        //**************************************************\n        // Provides an entry point into the application.\n        // \n        // This example sends and receives a message from\n        // a transactional queue.\n        //**************************************************\n\n        public static void Main()\n        {\n            // Create a new instance of the class.\n            MyNewQueue myNewQueue = new MyNewQueue();\n\n            // Send a message to a queue.\n            myNewQueue.SendMessageTransactional();\n\n            // Receive a message from a queue.\n            myNewQueue.ReceiveMessageTransactional();\n\n            return;\n        }\n\n\n        //**************************************************\n        // Sends a message to a transactional queue.\n        //**************************************************\n\t\t\n        public void SendMessageTransactional()\n        {\n\t\t\t\t\t\t\n            // Connect to a queue on the local computer.\n            MessageQueue myQueue = new \n                MessageQueue(&quot;.\\\\myTransactionalQueue&quot;);\n\n            // Send a message to the queue.\n            if (myQueue.Transactional == true)\n            {\n                // Create a transaction.\n                MessageQueueTransaction myTransaction = new \n                    MessageQueueTransaction();\n\n                // Begin the transaction.\n                myTransaction.Begin();\n\n                // Send the message.\n                myQueue.Send(&quot;My Message Data.&quot;, myTransaction);\n\n                // Commit the transaction.\n                myTransaction.Commit();\n            }\n\n            return;\n        }\n\n\n        //**************************************************\n        // Receives a message from the transactional queue.\n        //**************************************************\n\t\t\n        public  void ReceiveMessageTransactional()\n        {\n            // Connect to a transactional queue on the local computer.\n            MessageQueue myQueue = new \n                MessageQueue(&quot;.\\\\myTransactionalQueue&quot;);\n\n            // Set the formatter.\n            myQueue.Formatter = new XmlMessageFormatter(new Type[]\n                {typeof(String)});\n\t\t\t\n            // Create a transaction.\n            MessageQueueTransaction myTransaction = new \n                MessageQueueTransaction();\n\n            try\n            {\n                // Begin the transaction.\n                myTransaction.Begin();\n\t\t\t\t\n                // Receive the message. \n                // Wait five seconds for a message to arrive. \n                Message myMessage =\tmyQueue.Receive(new \n                    TimeSpan(0,0,5), myTransaction); \n\t\t\t\t\n                String myOrder = (String)myMessage.Body;\n\n                // Display message information.\n                Console.WriteLine(myOrder);\n\n                // Commit the transaction.\n                myTransaction.Commit();\n\n            }\n\t\t\t\n            catch (MessageQueueException e)\n            {\n                // Handle nontransactional queues.\n                if (e.MessageQueueErrorCode == \n                    MessageQueueErrorCode.TransactionUsage)\n                { \n                    Console.WriteLine(&quot;Queue is not transactional.&quot;);\n                }\n\n                    // Handle no message arriving in the queue.\n                else if (e.MessageQueueErrorCode == \n                    MessageQueueErrorCode.IOTimeout)\n                {\n                    Console.WriteLine(&quot;No message in queue.&quot;);\n                }\n\t\t\t\t\n                // Else catch other sources of MessageQueueException.\n\n                // Roll back the transaction.\n                myTransaction.Abort();\n            }\n\n            // Catch other exceptions as necessary, such as \n            // InvalidOperationException, thrown when the formatter \n            // cannot deserialize the message.\n\n            return;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.Receive_TimeoutTransaction#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n/// &lt;summary&gt;\n/// Provides a container class for the example.\n/// &lt;/summary&gt;\nref class MyNewQueue\n{\npublic:\n\n   //*************************************************\n   // Sends a message to a transactional queue.\n   //*************************************************\n   void SendMessageTransactional()\n   {\n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myTransactionalQueue&quot; );\n\n      // Send a message to the queue.\n      if ( myQueue-&gt;Transactional == true )\n      {\n         // Create a transaction.\n         MessageQueueTransaction^ myTransaction = gcnew MessageQueueTransaction;\n\n         // Begin the transaction.\n         myTransaction-&gt;Begin();\n\n         // Send the message.\n         myQueue-&gt;Send( &quot;My Message Data.&quot;, myTransaction );\n\n         // Commit the transaction.\n         myTransaction-&gt;Commit();\n      }\n\n      return;\n   }\n\n   //*************************************************\n   // Receives a message from the transactional queue.\n   //*************************************************\n   void ReceiveMessageTransactional()\n   {\n      // Connect to a transactional queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myTransactionalQueue&quot; );\n\n      // Set the formatter.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n      // Create a transaction.\n      MessageQueueTransaction^ myTransaction = gcnew MessageQueueTransaction;\n      try\n      {\n         // Begin the transaction.\n         myTransaction-&gt;Begin();\n\n         // Receive the message. \n         // Wait five seconds for a message to arrive. \n         Message^ myMessage = myQueue-&gt;Receive( TimeSpan(0,0,5), myTransaction );\n         String^ myOrder = static_cast&lt;String^&gt;(myMessage-&gt;Body);\n\n         // Display message information.\n         Console::WriteLine( myOrder );\n\n         // Commit the transaction.\n         myTransaction-&gt;Commit();\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         // Handle nontransactional queues.\n         if ( e-&gt;MessageQueueErrorCode == MessageQueueErrorCode::TransactionUsage )\n         {\n            Console::WriteLine( &quot;Queue is not transactional.&quot; );\n         }\n         // Handle no message arriving in the queue.\n         else\n\n         // Handle no message arriving in the queue.\n         if ( e-&gt;MessageQueueErrorCode == MessageQueueErrorCode::IOTimeout )\n         {\n            Console::WriteLine( &quot;No message in queue.&quot; );\n         }\n\n         // Else catch other sources of MessageQueueException.\n         // Roll back the transaction.\n         myTransaction-&gt;Abort();\n      }\n\n      // Catch other exceptions as necessary, such as \n      // InvalidOperationException, thrown when the formatter \n      // cannot deserialize the message.\n      return;\n   }\n};\n\n//*************************************************\n// Provides an entry point into the application.\n// \n// This example sends and receives a message from\n// a transactional queue.\n//*************************************************\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Send a message to a queue.\n   myNewQueue-&gt;SendMessageTransactional();\n\n   // Receive a message from a queue.\n   myNewQueue-&gt;ReceiveMessageTransactional();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.Receive_TimeoutTransaction#1\">Imports System\nImports System.Messaging\n\nNamespace MyProj\n\n\n   \n    Public Class MyNewQueue\n\n\n        &#39;**************************************************\n        &#39; Provides an entry point into the application.\n        &#39; \n        &#39; This example sends and receives a message from\n        &#39; a transactional queue.\n        &#39;**************************************************\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue\n\n            &#39; Send a message to a queue.\n            myNewQueue.SendMessageTransactional()\n\n            &#39; Receive a message from a queue.\n            myNewQueue.ReceiveMessageTransactional()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        &#39;**************************************************\n        &#39; Sends a message to a transactional queue.\n        &#39;**************************************************\n\n        Public Sub SendMessageTransactional()\n\n            &#39; Connect to a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myTransactionalQueue&quot;)\n\n            &#39; Send a message to the queue.\n            If myQueue.Transactional = True Then\n\n                &#39; Create a transaction.\n                Dim myTransaction As New MessageQueueTransaction\n\n                &#39; Begin the transaction.\n                myTransaction.Begin()\n\n                &#39; Send the message.\n                myQueue.Send(&quot;My Message Data.&quot;, myTransaction)\n\n                &#39; Commit the transaction.\n                myTransaction.Commit()\n\n            End If\n\n            Return\n\n        End Sub &#39;SendMessageTransactional\n\n\n        &#39;**************************************************\n        &#39; Receives a message from the transactional queue.\n        &#39;**************************************************\n\n        Public Sub ReceiveMessageTransactional()\n\n            &#39; Connect to a transactional queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myTransactionalQueue&quot;)\n\n            &#39; Set the formatter.\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Create a transaction.\n            Dim myTransaction As New MessageQueueTransaction\n\n            Try\n\n                &#39; Begin the transaction.\n                myTransaction.Begin()\n\n                &#39; Receive the message. \n                &#39; Wait five seconds for a message to arrive. \n                Dim myMessage As Message = myQueue.Receive(New _\n                    TimeSpan(0, 0, 5), myTransaction)\n                Dim myOrder As [String] = CType(myMessage.Body, _\n                    [String])\n\n                &#39; Display message information.\n                Console.WriteLine(myOrder)\n\n                &#39; Commit the transaction.\n                myTransaction.Commit()\n\n\n            Catch e As MessageQueueException\n\n                &#39; Handle nontransactional queues.\n                If e.MessageQueueErrorCode = _\n                    MessageQueueErrorCode.TransactionUsage Then\n\n                    Console.WriteLine(&quot;Queue is not transactional.&quot;)\n\n                Else\n                    &#39; Handle no message arriving in the queue.\n                    If e.MessageQueueErrorCode = _\n                        MessageQueueErrorCode.IOTimeout Then\n\n                        Console.WriteLine(&quot;No message in queue.&quot;)\n\n                    End If\n                End If\n\n                &#39; Else catch other sources of a MessageQueueException.\n\n                &#39; Roll back the transaction.\n                myTransaction.Abort()\n\n\n                &#39; Catch other exceptions as necessary, such as InvalidOperationException,\n                &#39; thrown when the formatter cannot deserialize the message.\n\n            End Try\n\n            Return\n\n        End Sub &#39;ReceiveMessageTransactional\n\n    End Class &#39;MyNewQueue\nEnd Namespace &#39;MyProj\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Receive_System_TimeSpan_System_Messaging_MessageQueueTransactionType_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Receive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Receive(TimeSpan,MessageQueueTransactionType)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the first message available in the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. This call is synchronous, and waits until either a message is available in the queue, or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> values, describing the type of transaction context to associate with the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that references the first message available in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>transactionType</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> members.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>A message did not arrive in the queue before the time-out expired.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to receive a message from a queue using a transaction context defined by the <code>transactionType</code> parameter, and return in a specified period of time if there are no messages in the queue.  </p>\n<p> Specify <code>Automatic</code> for the <code>transactionType</code> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify <code>Single</code> if you want to receive the message as a single internal transaction. You can specify <code>None</code> if you want to receive a message from a transactional queue outside of a transaction context.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> will return the messages that follow in the queue.  </p>\n<p> If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> To read the first message in a queue without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> does not remove any messages in the queue, there would be nothing to roll back by a call to <a class=\"xref\" href=\"system.messaging.messagequeuetransaction#System_Messaging_MessageQueueTransaction_Abort_\" data-linktype=\"relative-path\">Abort</a>.  </p>\n<p> Use a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a> for the <code>timeout</code> parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of this method.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#8\">\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, MessageQueueTransactionType::Single);\n\n    // Set the formatter to indicate the message body contains a String.\n    queue-&gt;Formatter = gcnew XmlMessageFormatter(\n        gcnew array&lt;Type^&gt;{String::typeid});\n\n    // Receive the message from the queue. Because the Id of the message\n    // is not specified, it might not be the message just sent.\n    msg = queue-&gt;Receive(TimeSpan::FromSeconds(10.0),\n        MessageQueueTransactionType::Single);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#8\">\n        // Connect to a transactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, MessageQueueTransactionType.Single);\n\n        // Set the formatter to indicate the message body contains a String.\n        queue.Formatter = new XmlMessageFormatter(new Type[]\n            {typeof(String)});\n\n        // Receive the message from the queue. Because the Id of the message\n        // is not specified, it might not be the message just sent.\n        msg = queue.Receive(TimeSpan.FromSeconds(10.0),\n            MessageQueueTransactionType.Single);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Receive_System_TimeSpan_System_Messaging_Cursor_System_Messaging_MessageQueueTransaction_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Receive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Receive(TimeSpan,Cursor,MessageQueueTransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.MessageQueueTransaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cursor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a> that maintains a specific position in the message queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that references a message in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>cursor</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>transaction</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid. Possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>A message did not arrive in the queue before the time-out expired.  </p>\n<p> -or-  </p>\n<p> The queue is non-transactional.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to receive a message from a transactional queue using the internal transaction context defined by the <code>transaction</code> parameter, and return within a specified period of time if there are no messages in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> return the messages that follow in the queue.  </p>\n<p> Because this method is called on a transactional queue, the message that is received is returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> To read a message in a queue without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> does not remove any messages in the queue, there is nothing to roll back by a call to <a class=\"xref\" href=\"system.messaging.messagequeuetransaction#System_Messaging_MessageQueueTransaction_Abort_\" data-linktype=\"relative-path\">Abort</a>.  </p>\n<p> Use a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked for the given period of time, or indefinitely if you specified the value <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a> for the <code>timeout</code> parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Receive_System_TimeSpan_System_Messaging_Cursor_System_Messaging_MessageQueueTransactionType_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Receive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Receive(TimeSpan,Cursor,MessageQueueTransactionType)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.MessageQueueTransactionType transactionType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cursor</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.cursor\" data-linktype=\"relative-path\">Cursor</a> that maintains a specific position in the message queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> values that describes the type of transaction context to associate with the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that references a message in the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>cursor</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid. Possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>transactionType</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> members.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>A message did not arrive in the queue before the time-out expired.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to receive a message from a queue using a transaction context defined by the <code>transactionType</code> parameter, and return in a specified period of time if there are no messages in the queue.  </p>\n<p> Specify <code>Automatic</code> for the <code>transactionType</code> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify <code>Single</code> if you want to receive the message as a single internal transaction. You can specify <code>None</code> if you want to receive a message from a transactional queue outside of a transaction context.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> return the messages that follow in the queue.  </p>\n<p> If this method is called to receive a message from a transactional queue, the message that is received is returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> To read a message in a queue without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> method. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Peek_\" data-linktype=\"relative-path\">Peek</a> does not remove any messages in the queue, there is nothing to roll back by a call to <a class=\"xref\" href=\"system.messaging.messagequeuetransaction#System_Messaging_MessageQueueTransaction_Abort_\" data-linktype=\"relative-path\">Abort</a>.  </p>\n<p> Use a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked for the given period of time, or indefinitely if you specified the value <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a> for the <code>timeout</code> parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a>.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveByCorrelationId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveByCorrelationId(String)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the message that matches the given correlation identifier (from a non-transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveByCorrelationId (string correlationId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>correlationId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> of the message to receive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> matches the <code>correlationId</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>correlationId</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>correlationId</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method looks in the non-transactional queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> for a message whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> matches the specified <code>correlationId</code> parameter. If no message is found that matches the <code>correlationID</code> parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  </p>\n<p> Two other methods allow you to receive messages from a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveById_System_String_\" data-linktype=\"relative-path\">ReceiveById(String)</a> method retrieves a message by specifying its unique identifier.  </p>\n<p> To read a message with a specified correlation identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  </p>\n<pre><code class=\"lang-cs\" name=\"Message.Acknowledgment#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example sends and receives a message from\n\t\t// a queue.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create a new instance of the class.\n\t\t\tMyNewQueue myNewQueue = new MyNewQueue();\n\n\t\t\t// Create new queues.\n\t\t\tCreateQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tCreateQueue(&quot;.\\\\myAdministrationQueue&quot;);\n\n\t\t\t// Send messages to a queue.\n\t\t\tmyNewQueue.SendMessage();\n\n\t\t\t// Receive messages from a queue.\n\t\t\tstring messageId = myNewQueue.ReceiveMessage(); \n\n\t\t\t// Receive acknowledgment message.\n\t\t\tif(messageId != null)\n\t\t\t{\n\t\t\t\tmyNewQueue.ReceiveAcknowledgment(messageId, &quot;.\\\\myAdministrationQueue&quot;);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Creates a new queue.\n\t\t//**************************************************\n\n\t\tpublic static void CreateQueue(string queuePath)\n\t\t{\n\t\t\ttry\t\n\t\t\t{\n\t\t\t\tif(!MessageQueue.Exists(queuePath))\n\t\t\t\t{\n\t\t\t\t\tMessageQueue.Create(queuePath);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(queuePath + &quot; already exists.&quot;);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (MessageQueueException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Sends a string message to a queue.\n\t\t//**************************************************\n\t\t\n\t\tpublic void SendMessage()\n\t\t{\n\n\t\t\t// Connect to a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\t// Create a new message.\n\t\t\tMessage myMessage = new Message(&quot;Original Message&quot;); \n\n\t\t\tmyMessage.AdministrationQueue = new MessageQueue(&quot;.\\\\myAdministrationQueue&quot;);\n\t\t\tmyMessage.AcknowledgeType = AcknowledgeTypes.PositiveReceive | AcknowledgeTypes.PositiveArrival;\n\n\t\t\t// Send the Order to the queue.\n\t\t\tmyQueue.Send(myMessage);\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Receives a message containing an Order.\n\t\t//**************************************************\n\t\t\n\t\tpublic  string ReceiveMessage()\n\t\t{\n\t\t\t// Connect to the a queue on the local computer.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n\t\t\tmyQueue.MessageReadPropertyFilter.CorrelationId = true;\n\n\n\t\t\t// Set the formatter to indicate body contains an Order.\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(string)});\n\n\t\t\tstring returnString = null;\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Receive and format the message. \n\t\t\t\tMessage myMessage =\tmyQueue.Receive(); \n\n\n\t\t\t\t// Display message information.\n\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\t\t\t\tConsole.WriteLine(&quot;Original message information--&quot;);\n\t\t\t\tConsole.WriteLine(&quot;Body: &quot; +myMessage.Body.ToString());\n\t\t\t\tConsole.WriteLine(&quot;Id: &quot; + myMessage.Id.ToString());\n\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\n\t\t\t\treturnString =  myMessage.Id;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tcatch (MessageQueueException)\n\t\t\t{\n\t\t\t\t// Handle Message Queuing exceptions.\n\t\t\t}\n\n\t\t\t// Handle invalid serialization format.\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\t\n\t\t\t// Catch other exceptions as necessary.\n\n\t\t\treturn returnString;\n\t\t}\n\n\t\t//**************************************************\n\t\t// Receives a message containing an Order.\n\t\t//**************************************************\n\t\t\n\t\tpublic void ReceiveAcknowledgment(string messageId, string queuePath)\n\t\t{\n\t\t\tbool found = false;\n\t\t\tMessageQueue queue = new MessageQueue(queuePath);\n\t\t\tqueue.MessageReadPropertyFilter.CorrelationId = true;\n\t\t\tqueue.MessageReadPropertyFilter.Acknowledgment = true;\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\twhile(queue.PeekByCorrelationId(messageId) != null)\n\t\t\t\t{\n\t\t\t\t\tMessage myAcknowledgmentMessage = queue.ReceiveByCorrelationId(messageId);\n\t\t\t\n\t\t\t\t\t// Output acknowledgment message information. The correlation Id is identical\n\t\t\t\t\t// to the id of the original message.\n\t\t\t\t\tConsole.WriteLine(&quot;Acknowledgment Message Information--&quot;);\n\t\t\t\t\tConsole.WriteLine(&quot;Correlation Id: &quot; + myAcknowledgmentMessage.CorrelationId.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;Id: &quot; + myAcknowledgmentMessage.Id.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;Acknowledgment Type: &quot; + myAcknowledgmentMessage.Acknowledgment.ToString());\n\t\t\t\t\tConsole.WriteLine(&quot;____________________________________________&quot;);\n\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (InvalidOperationException e)\n\t\t\t{ \n\t\t\t\t// This exception would be thrown if there is no (further) acknowledgment message\n\t\t\t\t// with the specified correlation Id. Only output a message if there are no messages;\n\t\t\t\t// not if the loop has found at least one.\n\t\t\t\tif(found == false)\n\t\t\t\t{\t\n\t\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t\t}\n\n\t\t\t\t// Handle other causes of invalid operation exception.\n\t\t\t}\n\n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Message.Acknowledgment#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n   static void CreateQueue( String^ queuePath )\n   {\n      try\n      {\n         if (  !MessageQueue::Exists( queuePath ) )\n         {\n            MessageQueue::Create( queuePath );\n         }\n         else\n         {\n            Console::WriteLine(  &quot;{0} already exists.&quot;, queuePath );\n         }\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n   void SendMessage()\n   {\n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n\n      // Create a new message.\n      Message^ myMessage = gcnew Message( &quot;Original Message&quot; );\n      myMessage-&gt;AdministrationQueue = gcnew MessageQueue( &quot;.\\\\myAdministrationQueue&quot; );\n      myMessage-&gt;AcknowledgeType = (AcknowledgeTypes)(AcknowledgeTypes::PositiveReceive | AcknowledgeTypes::PositiveArrival);\n\n      // Send the Order to the queue.\n      myQueue-&gt;Send( myMessage );\n      return;\n   }\n\n   String^ ReceiveMessage()\n   {\n      // Connect to the a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n      myQueue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n      String^ returnString = nullptr;\n      try\n      {\n         // Receive and format the message. \n         Message^ myMessage = myQueue-&gt;Receive();\n\n         // Display message information.\n         Console::WriteLine( &quot;____________________________________________&quot; );\n         Console::WriteLine( &quot;Original message information--&quot; );\n         Console::WriteLine( &quot;Body: {0}&quot;, myMessage-&gt;Body );\n         Console::WriteLine( &quot;Id: {0}&quot;, myMessage-&gt;Id );\n         Console::WriteLine( &quot;____________________________________________&quot; );\n         returnString = myMessage-&gt;Id;\n      }\n      catch ( MessageQueueException^ ) \n      {\n         // Handle Message Queuing exceptions.\n      }\n      // Handle invalid serialization format.\n      catch ( InvalidOperationException^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n      // Catch other exceptions as necessary.\n      return returnString;\n   }\n\n   void ReceiveAcknowledgment( String^ messageId, String^ queuePath )\n   {\n      bool found = false;\n      MessageQueue^ queue = gcnew MessageQueue( queuePath );\n      queue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n      queue-&gt;MessageReadPropertyFilter-&gt;Acknowledgment = true;\n      try\n      {\n         while ( queue-&gt;PeekByCorrelationId( messageId ) != nullptr )\n         {\n            Message^ myAcknowledgmentMessage = queue-&gt;ReceiveByCorrelationId( messageId );\n\n            // Output acknowledgment message information. The correlation Id is identical\n            // to the id of the original message.\n            Console::WriteLine( &quot;Acknowledgment Message Information--&quot; );\n            Console::WriteLine( &quot;Correlation Id: {0}&quot;, myAcknowledgmentMessage-&gt;CorrelationId );\n            Console::WriteLine( &quot;Id: {0}&quot;, myAcknowledgmentMessage-&gt;Id );\n            Console::WriteLine( &quot;Acknowledgment Type: {0}&quot;, myAcknowledgmentMessage-&gt;Acknowledgment );\n            Console::WriteLine( &quot;____________________________________________&quot; );\n            found = true;\n         }\n      }\n      catch ( InvalidOperationException^ e ) \n      {\n         // This exception would be thrown if there is no (further) acknowledgment message\n         // with the specified correlation Id. Only output a message if there are no messages;\n         // not if the loop has found at least one.\n         if ( found == false )\n         {\n            Console::WriteLine( e-&gt;Message );\n         }\n\n         // Handle other causes of invalid operation exception.\n      }\n\n   }\n\n};\n\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Create new queues.\n   MyNewQueue::CreateQueue( &quot;.\\\\myQueue&quot; );\n   MyNewQueue::CreateQueue( &quot;.\\\\myAdministrationQueue&quot; );\n\n   // Send messages to a queue.\n   myNewQueue-&gt;SendMessage();\n\n   // Receive messages from a queue.\n   String^ messageId = myNewQueue-&gt;ReceiveMessage();\n\n   // Receive acknowledgment message.\n   if ( messageId != nullptr )\n   {\n      myNewQueue-&gt;ReceiveAcknowledgment( messageId, &quot;.\\\\myAdministrationQueue&quot; );\n   }\n\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Message.Acknowledgment#1\">Imports System\nImports System.Messaging\n\n\n&#39; Provides a container class for the example.\n\nPublic Class MyNewQueue\n   \n   \n\n   &#39; Provides an entry point into the application.       \n   &#39; This example sends and receives a message from\n   &#39; a queue.\n      \n   Public Shared Sub Main()\n         &#39; Create a new instance of the class.\n         Dim myNewQueue As New MyNewQueue()\n         \n         &#39; Create new queues.\n         CreateQueue(&quot;.\\myQueue&quot;)\n         CreateQueue(&quot;.\\myAdministrationQueue&quot;)\n         \n         &#39; Send messages to a queue.\n         myNewQueue.SendMessage()\n         \n         &#39; Receive messages from a queue.\n         Dim messageId As String = myNewQueue.ReceiveMessage()\n         \n         &#39; Receive acknowledgment message.\n         If Not (messageId Is Nothing) Then\n            myNewQueue.ReceiveAcknowledgment(messageId, &quot;.\\myAdministrationQueue&quot;)\n         End If\n         \n         Return\n   End Sub &#39;Main\n      \n      \n      &#39; Creates a new queue.\n\n   Public Shared Sub CreateQueue(queuePath As String)\n         Try\n            If Not MessageQueue.Exists(queuePath) Then\n               MessageQueue.Create(queuePath)\n            Else\n               Console.WriteLine((queuePath + &quot; already exists.&quot;))\n            End If\n         Catch e As MessageQueueException\n            Console.WriteLine(e.Message)\n         End Try\n   End Sub &#39;CreateQueue\n       \n      \n      \n \n      &#39; Sends a string message to a queue.\n \n   Public Sub SendMessage()\n         \n         &#39; Connect to a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         &#39; Create a new message.\n         Dim myMessage As New Message(&quot;Original Message&quot;)\n         \n         myMessage.AdministrationQueue = New MessageQueue(&quot;.\\myAdministrationQueue&quot;)\n         myMessage.AcknowledgeType = AcknowledgeTypes.PositiveReceive Or AcknowledgeTypes.PositiveArrival\n         \n         &#39; Send the Order to the queue.\n         myQueue.Send(myMessage)\n         \n         Return\n   End Sub &#39;SendMessage\n      \n      \n      \n \n      &#39; Receives a message containing an Order.\n \n   Public Function ReceiveMessage() As String\n         &#39; Connect to the a queue on the local computer.\n         Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n         \n         myQueue.MessageReadPropertyFilter.CorrelationId = True\n         \n         \n         &#39; Set the formatter to indicate body contains an Order.\n         myQueue.Formatter = New XmlMessageFormatter(New Type() {GetType(String)})\n         \n         Dim returnString As String = Nothing\n         \n         Try\n            &#39; Receive and format the message. \n            Dim myMessage As Message = myQueue.Receive()\n            \n            \n            &#39; Display message information.\n            Console.WriteLine(&quot;____________________________________________&quot;)\n            Console.WriteLine(&quot;Original message information--&quot;)\n            Console.WriteLine((&quot;Body: &quot; + myMessage.Body.ToString()))\n            Console.WriteLine((&quot;Id: &quot; + myMessage.Id.ToString()))\n            Console.WriteLine(&quot;____________________________________________&quot;)\n            \n            returnString = myMessage.Id\n         \n         \n                  \n         &#39; Handle invalid serialization format.\n         Catch e As InvalidOperationException\n            Console.WriteLine(e.Message)\n         End Try\n         \n         &#39; Catch other exceptions as necessary.\n         Return returnString\n   End Function &#39;ReceiveMessage\n      \n      \n \n      &#39; Receives a message containing an Order.\n \n   Public Sub ReceiveAcknowledgment(messageId As String, queuePath As String)\n         Dim found As Boolean = False\n         Dim queue As New MessageQueue(queuePath)\n         queue.MessageReadPropertyFilter.CorrelationId = True\n         queue.MessageReadPropertyFilter.Acknowledgment = True\n         \n         Try\n            While Not (queue.PeekByCorrelationId(messageId) Is Nothing)\n               Dim myAcknowledgmentMessage As Message = queue.ReceiveByCorrelationId(messageId)\n               \n               &#39; Output acknowledgment message information. The correlation Id is identical\n               &#39; to the id of the original message.\n               Console.WriteLine(&quot;Acknowledgment Message Information--&quot;)\n               Console.WriteLine((&quot;Correlation Id: &quot; + myAcknowledgmentMessage.CorrelationId.ToString()))\n               Console.WriteLine((&quot;Id: &quot; + myAcknowledgmentMessage.Id.ToString()))\n               Console.WriteLine((&quot;Acknowledgment Type: &quot; + myAcknowledgmentMessage.Acknowledgment.ToString()))\n               Console.WriteLine(&quot;____________________________________________&quot;)\n               \n               found = True\n            End While\n         Catch e As InvalidOperationException\n            &#39; This exception would be thrown if there is no (further) acknowledgment message\n            &#39; with the specified correlation Id. Only output a message if there are no messages;\n            &#39; not if the loop has found at least one.\n            If found = False Then\n               Console.WriteLine(e.Message)\n            End If\n         End Try \n   End Sub &#39;ReceiveAcknowledgment &#39; Handle other causes of invalid operation exception.\n End Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_System_Messaging_MessageQueueTransaction_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveByCorrelationId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveByCorrelationId(String,MessageQueueTransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the message that matches the given correlation identifier (from a transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveByCorrelationId (string correlationId, System.Messaging.MessageQueueTransaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>correlationId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> of the message to receive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> matches the <code>correlationId</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>correlationId</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>transaction</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>correlationId</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The queue is non-transactional.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method looks in the transactional queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> for a message whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> matches the specified <code>correlationId</code> parameter. If no message is found that matches the <code>correlationID</code> parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application using the internal transaction context defined by the <code>transaction</code> parameter.  </p>\n<p> Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  </p>\n<p> Two other methods allow you to receive messages from a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveById_System_String_\" data-linktype=\"relative-path\">ReceiveById(String)</a> method is used to retrieve a message by specifying its unique identifier.  </p>\n<p> To read a message with a specified correlation identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of ReceiveByCorrelationId.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#14\">\n    // Connect to a nontransactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message to the nontransactional queue.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Receive the message from the nontransactional queue.\n    msg = queue-&gt;ReceiveById(id, TimeSpan::FromSeconds(10.0));\n\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ transQueue = \n        gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message in response to the original message.\n    Message^ responseMsg = gcnew Message(&quot;Example Response Message Body&quot;);\n\n    // Set the response message&#39;s CorrelationId property value to the Id\n    // property value of the original message.\n    responseMsg-&gt;CorrelationId = id;\n\n    // Send the response message to the transactional queue.\n    transQueue-&gt;Send(responseMsg, &quot;Example Response Message Label&quot;,\n        MessageQueueTransactionType::Single);\n\n    // Simulate doing other work so the message has time to arrive.\n    System::Threading::Thread::Sleep(TimeSpan::FromSeconds(10.0));\n\n    // Set the transactional queue&#39;s MessageReadPropertyFilter property to\n    // ensure that the response message includes the desired properties.\n    transQueue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n\n    // Create a message queuing transaction.\n    MessageQueueTransaction^ transaction = gcnew MessageQueueTransaction();\n\n    try\n    {\n        // Begin a transaction.\n        transaction-&gt;Begin();\n\n        // Receive the response message from the transactional queue.\n        responseMsg = transQueue-&gt;ReceiveByCorrelationId(id, transaction);\n\n        // Commit the transaction.\n        transaction-&gt;Commit();\n    }\n    catch (Exception^ ex)\n    {\n        // Cancel the transaction.\n        transaction-&gt;Abort();\n\n        // Propagate the exception.\n        throw ex;\n    }\n    finally\n    {\n        // Dispose of the transaction object.\n        delete transaction;\n        transQueue-&gt;Close();\n        queue-&gt;Close(); \n    }\n\n    // Display the response message&#39;s property values.\n    Console::WriteLine(&quot;Message.Label: {0}&quot;, responseMsg-&gt;Label);\n    Console::WriteLine(&quot;Message.CorrelationId: {0}&quot;,\n        responseMsg-&gt;CorrelationId);\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#14\">\n        // Connect to a nontransactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message to the nontransactional queue.\n        queue.Send(msg, &quot;Example Message Label&quot;);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Receive the message from the nontransactional queue.\n        msg = queue.ReceiveById(id, TimeSpan.FromSeconds(10.0));\n\n        // Connect to a transactional queue on the local computer.\n        MessageQueue transQueue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message in response to the original message.\n        Message responseMsg = new Message(&quot;Example Response Message Body&quot;);\n\n        // Set the response message&#39;s CorrelationId property value to the Id\n        // property value of the original message.\n        responseMsg.CorrelationId = id;\n\n        // Send the response message to the transactional queue.\n        transQueue.Send(responseMsg, &quot;Example Response Message Label&quot;,\n            MessageQueueTransactionType.Single);\n\n        // Simulate doing other work so the message has time to arrive.\n        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10.0));\n\n        // Set the transactional queue&#39;s MessageReadPropertyFilter property to\n        // ensure that the response message includes the desired properties.\n        transQueue.MessageReadPropertyFilter.CorrelationId = true;\n\n        // Create a message queuing transaction.\n        MessageQueueTransaction transaction = new MessageQueueTransaction();\n\n        try\n        {\n            // Begin a transaction.\n            transaction.Begin();\n\n            // Receive the response message from the transactional queue.\n            responseMsg = transQueue.ReceiveByCorrelationId(id, transaction);\n\n            // Commit the transaction.\n            transaction.Commit();\n        }\n        catch(System.Exception e)\n        {\n            // Cancel the transaction.\n            transaction.Abort();\n\n            // Propagate the exception.\n            throw e;\n        }\n        finally\n        {\n            // Dispose of the transaction object.\n            transaction.Dispose();\n        }\n\n        // Display the response message&#39;s property values.\n        Console.WriteLine(&quot;Message.Label: {0}&quot;, responseMsg.Label);\n        Console.WriteLine(&quot;Message.CorrelationId: {0}&quot;,\n            responseMsg.CorrelationId);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_System_Messaging_MessageQueueTransactionType_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveByCorrelationId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveByCorrelationId(String,MessageQueueTransactionType)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveByCorrelationId (string correlationId, System.Messaging.MessageQueueTransactionType transactionType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>correlationId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> of the message to receive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> values, describing the type of transaction context to associate with the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> matches the <code>correlationId</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>correlationId</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>correlationId</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>transactionType</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> members.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method looks in the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> for a message whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> matches the specified <code>correlationId</code> parameter. If no message is found that matches the <code>correlationID</code> parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the <code>transactionType</code> parameter.  </p>\n<p> Specify <code>Automatic</code> for the <code>transactionType</code> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify <code>Single</code> if you want to receive the message as a single internal transaction. You can specify <code>None</code> if you want to receive a message from a transactional queue outside of a transaction context.  </p>\n<p> If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  </p>\n<p> Two other methods allow you to receive messages from a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveById_System_String_\" data-linktype=\"relative-path\">ReceiveById(String)</a> method is used to retrieve a message by specifying its unique identifier.  </p>\n<p> To read a message with a specified correlation identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of ReceiveByCorrelationId.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#11\">\n    // Connect to a nontransactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message to the nontransactional queue.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Receive the message from the nontransactional queue.\n    msg = queue-&gt;ReceiveById(id, TimeSpan::FromSeconds(10.0));\n\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ transQueue = \n        gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message in response to the original message.\n    Message^ responseMsg = gcnew Message(&quot;Example Response Message Body&quot;);\n\n    // Set the response message&#39;s CorrelationId property value to the Id\n    // property value of the original message.\n    responseMsg-&gt;CorrelationId = id;\n\n    // Send the response message to the transactional queue.\n    transQueue-&gt;Send(responseMsg, &quot;Example Response Message Label&quot;,\n        MessageQueueTransactionType::Single);\n\n    // Simulate doing other work so the message has time to arrive.\n    System::Threading::Thread::Sleep(TimeSpan::FromSeconds(10.0));\n\n    // Set the transactional queue&#39;s MessageReadPropertyFilter property to\n    // ensure that the response message includes the desired properties.\n    transQueue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n\n    // Receive the response message from the transactional queue.\n    responseMsg = transQueue-&gt;ReceiveByCorrelationId(id,\n        MessageQueueTransactionType::Single);\n\n    // Display the response message&#39;s property values.\n    Console::WriteLine(&quot;Message.Label: {0}&quot;, responseMsg-&gt;Label);\n    Console::WriteLine(&quot;Message.CorrelationId: {0}&quot;,\n        responseMsg-&gt;CorrelationId);\n\n    transQueue-&gt;Close();\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#11\">\n        // Connect to a nontransactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message to the nontransactional queue.\n        queue.Send(msg, &quot;Example Message Label&quot;);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Receive the message from the nontransactional queue.\n        msg = queue.ReceiveById(id, TimeSpan.FromSeconds(10.0));\n\n        // Connect to a transactional queue on the local computer.\n        MessageQueue transQueue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message in response to the original message.\n        Message responseMsg = new Message(&quot;Example Response Message Body&quot;);\n\n        // Set the response message&#39;s CorrelationId property value to the Id\n        // property value of the original message.\n        responseMsg.CorrelationId = id;\n\n        // Send the response message to the transactional queue.\n        transQueue.Send(responseMsg, &quot;Example Response Message Label&quot;,\n            MessageQueueTransactionType.Single);\n\n        // Simulate doing other work so the message has time to arrive.\n        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10.0));\n\n        // Set the transactional queue&#39;s MessageReadPropertyFilter property to\n        // ensure that the response message includes the desired properties.\n        transQueue.MessageReadPropertyFilter.CorrelationId = true;\n\n        // Receive the response message from the transactional queue.\n        responseMsg = transQueue.ReceiveByCorrelationId(id,\n            MessageQueueTransactionType.Single);\n\n        // Display the response message&#39;s property values.\n        Console.WriteLine(&quot;Message.Label: {0}&quot;, responseMsg.Label);\n        Console.WriteLine(&quot;Message.CorrelationId: {0}&quot;,\n            responseMsg.CorrelationId);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveByCorrelationId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveByCorrelationId(String,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the message that matches the given correlation identifier (from a non-transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveByCorrelationId (string correlationId, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>correlationId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> of the message to receive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> matches the <code>correlationId</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>correlationId</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method looks in the non-transactional queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> for a message whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> matches the specified <code>correlationId</code> parameter. This method returns immediately if the message with the correlation identifier specified by the <code>correlationId</code> parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  </p>\n<p> The <code>timeout</code> parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> of the new message to see if it matches the <code>correlationId</code> parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> matches the <code>correlationId</code> parameter.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  </p>\n<p> Two other methods allow you to receive messages from a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveById_System_String_\" data-linktype=\"relative-path\">ReceiveById(String)</a> method is used to retrieve a message by specifying its unique identifier.  </p>\n<p> To read a message with a specified correlation identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of ReceiveByCorrelationId.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#10\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Designate a queue to receive the acknowledgement message for this\n    // message.\n    msg-&gt;AdministrationQueue = \n        gcnew MessageQueue(&quot;.\\\\exampleAdminQueue&quot;);\n\n    // Set the message to generate an acknowledgement message upon its\n    // arrival.\n    msg-&gt;AcknowledgeType = AcknowledgeTypes::PositiveArrival;\n\n    // Send the message.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Receive the message from the queue.\n    msg = queue-&gt;ReceiveById(id, TimeSpan::FromSeconds(10.0));\n\n    // Connect to the admin queue.\n    MessageQueue^ adminQueue = \n        gcnew MessageQueue(&quot;.\\\\exampleAdminQueue&quot;);\n\n    // Set the admin queue&#39;s MessageReadPropertyFilter property to ensure\n    // that the acknowledgement message includes the desired properties.\n    adminQueue-&gt;MessageReadPropertyFilter-&gt;Acknowledgment = true;\n    adminQueue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n\n    // Receive the acknowledgement message from the admin queue.\n    Message^ ackMsg = adminQueue-&gt;ReceiveByCorrelationId(id,\n        TimeSpan::FromSeconds(10.0));\n\n    // Display the acknowledgement message&#39;s property values.\n    Console::WriteLine(&quot;Message.Label: {0}&quot;, ackMsg-&gt;Label);\n    Console::WriteLine(&quot;Message.Acknowledgment: {0}&quot;,\n        ackMsg-&gt;Acknowledgment);\n    Console::WriteLine(&quot;Message.CorrelationId: {0}&quot;, ackMsg-&gt;CorrelationId);\n\n    adminQueue-&gt;Close();\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#10\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Designate a queue to receive the acknowledgement message for this\n        // message.\n        msg.AdministrationQueue = new MessageQueue(&quot;.\\\\exampleAdminQueue&quot;);\n\n        // Set the message to generate an acknowledgement message upon its\n        // arrival.\n        msg.AcknowledgeType = AcknowledgeTypes.PositiveArrival;\n\n        // Send the message.\n        queue.Send(msg, &quot;Example Message Label&quot;);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Receive the message from the queue.\n        msg = queue.ReceiveById(id, TimeSpan.FromSeconds(10.0));\n\n        // Connect to the admin queue.\n        MessageQueue adminQueue = new MessageQueue(&quot;.\\\\exampleAdminQueue&quot;);\n\n        // Set the admin queue&#39;s MessageReadPropertyFilter property to ensure\n        // that the acknowledgement message includes the desired properties.\n        adminQueue.MessageReadPropertyFilter.Acknowledgment = true;\n        adminQueue.MessageReadPropertyFilter.CorrelationId = true;\n\n        // Receive the acknowledgement message from the admin queue.\n        Message ackMsg = adminQueue.ReceiveByCorrelationId(id,\n            TimeSpan.FromSeconds(10.0));\n\n        // Display the acknowledgement message&#39;s property values.\n        Console.WriteLine(&quot;Message.Label: {0}&quot;, ackMsg.Label);\n        Console.WriteLine(&quot;Message.Acknowledgment: {0}&quot;, ackMsg.Acknowledgment);\n        Console.WriteLine(&quot;Message.CorrelationId: {0}&quot;, ackMsg.CorrelationId);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_System_TimeSpan_System_Messaging_MessageQueueTransaction_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveByCorrelationId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the message that matches the given correlation identifier (from a transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveByCorrelationId (string correlationId, TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>correlationId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> of the message to receive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> matches the <code>correlationId</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>correlationId</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>transaction</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired.  </p>\n<p> -or-  </p>\n<p> The queue is non-transactional.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method looks in the transactional queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> for a message whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> matches the specified <code>correlationId</code> parameter. This method returns immediately if the message with the correlation identifier specified by the <code>correlationId</code> parameter is in the queue, using the internal transaction context defined by the <code>transaction</code> parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  </p>\n<p> The <code>timeout</code> parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> of the new message to see if it matches the <code>correlationId</code> parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> matches the <code>correlationId</code> parameter.  </p>\n<p> Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  </p>\n<p> Two other methods allow you to receive messages from a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveById_System_String_\" data-linktype=\"relative-path\">ReceiveById(String)</a> method is used to retrieve a message by specifying its unique identifier.  </p>\n<p> To read a message with a specified correlation identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of ReceiveByCorrelationId.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#13\">\n    // Connect to a nontransactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message to the nontransactional queue.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Receive the message from the nontransactional queue.\n    msg = queue-&gt;ReceiveById(id, TimeSpan::FromSeconds(10.0));\n\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ transQueue = \n        gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message in response to the original message.\n    Message^ responseMsg = gcnew Message(&quot;Example Response Message Body&quot;);\n\n    // Set the response message&#39;s CorrelationId property value to the Id\n    // property value of the original message.\n    responseMsg-&gt;CorrelationId = id;\n\n    // Send the response message to the transactional queue.\n    transQueue-&gt;Send(responseMsg, &quot;Example Response Message Label&quot;,\n        MessageQueueTransactionType::Single);\n\n    // Set the transactional queue&#39;s MessageReadPropertyFilter property to\n    // ensure that the response message includes the desired properties.\n    transQueue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n\n    // Create a message queuing transaction.\n    MessageQueueTransaction^ transaction = gcnew MessageQueueTransaction();\n\n    try\n    {\n        // Begin a transaction.\n        transaction-&gt;Begin();\n\n        // Receive the response message from the transactional queue.\n        responseMsg = transQueue-&gt;ReceiveByCorrelationId(id,\n            TimeSpan::FromSeconds(10.0), transaction);\n\n        // Commit the transaction.\n        transaction-&gt;Commit();\n    }\n    catch (Exception^ ex)\n    {\n        // Cancel the transaction.\n        transaction-&gt;Abort();\n\n        // Propagate the exception.\n        throw ex;\n    }\n    finally\n    {\n        // Dispose of the transaction object.\n        delete transaction;\n        transQueue-&gt;Close();\n        queue-&gt;Close();\n    }\n\n    // Display the response message&#39;s property values.\n    Console::WriteLine(&quot;Message.Label: {0}&quot;, responseMsg-&gt;Label);\n    Console::WriteLine(&quot;Message.CorrelationId: {0}&quot;,\n        responseMsg-&gt;CorrelationId);\n                       \t\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#13\">\n        // Connect to a nontransactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message to the nontransactional queue.\n        queue.Send(msg, &quot;Example Message Label&quot;);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Receive the message from the nontransactional queue.\n        msg = queue.ReceiveById(id, TimeSpan.FromSeconds(10.0));\n\n        // Connect to a transactional queue on the local computer.\n        MessageQueue transQueue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message in response to the original message.\n        Message responseMsg = new Message(&quot;Example Response Message Body&quot;);\n\n        // Set the response message&#39;s CorrelationId property value to the Id\n        // property value of the original message.\n        responseMsg.CorrelationId = id;\n\n        // Send the response message to the transactional queue.\n        transQueue.Send(responseMsg, &quot;Example Response Message Label&quot;,\n            MessageQueueTransactionType.Single);\n\n        // Set the transactional queue&#39;s MessageReadPropertyFilter property to\n        // ensure that the response message includes the desired properties.\n        transQueue.MessageReadPropertyFilter.CorrelationId = true;\n\n        // Create a message queuing transaction.\n        MessageQueueTransaction transaction = new MessageQueueTransaction();\n\n        try\n        {\n            // Begin a transaction.\n            transaction.Begin();\n\n            // Receive the response message from the transactional queue.\n            responseMsg = transQueue.ReceiveByCorrelationId(id,\n                TimeSpan.FromSeconds(10.0), transaction);\n\n            // Commit the transaction.\n            transaction.Commit();\n        }\n        catch(System.Exception e)\n        {\n            // Cancel the transaction.\n            transaction.Abort();\n\n            // Propagate the exception.\n            throw e;\n        }\n        finally\n        {\n            // Dispose of the transaction object.\n            transaction.Dispose();\n        }\n\n        // Display the response message&#39;s property values.\n        Console.WriteLine(&quot;Message.Label: {0}&quot;, responseMsg.Label);\n        Console.WriteLine(&quot;Message.CorrelationId: {0}&quot;,\n            responseMsg.CorrelationId);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_System_TimeSpan_System_Messaging_MessageQueueTransactionType_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveByCorrelationId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransactionType)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveByCorrelationId (string correlationId, TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>correlationId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> of the message to receive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> values, describing the type of transaction context to associate with the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.CorrelationId*</span> matches the <code>correlationId</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>correlationId</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>correlationId</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>transactionType</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> members.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method looks in the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> for a message whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> matches the specified <code>correlationId</code> parameter. This method returns immediately if the message with the correlation identifier specified by the <code>correlationId</code> parameter is in the queue, using a transaction context defined by the <code>transactionType</code> parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  </p>\n<p> The <code>timeout</code> parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> of the new message to see if it matches the <code>correlationId</code> parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> matches the <code>correlationId</code> parameter. Specify <code>Automatic</code> for the <code>transactionType</code> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify <code>Single</code> if you want to receive the message as a single internal transaction. You can specify <code>None</code> if you want to receive a message from a transactional queue outside of a transaction context.  </p>\n<p> If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_CorrelationId_\" data-linktype=\"relative-path\">CorrelationId</a> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  </p>\n<p> Two other methods allow you to receive messages from a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveById_System_String_\" data-linktype=\"relative-path\">ReceiveById(String)</a> method is used to retrieve a message by specifying its unique identifier.  </p>\n<p> To read a message with a specified correlation identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByCorrelationId_System_String_\" data-linktype=\"relative-path\">PeekByCorrelationId(String)</a> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of ReceiveByCorrelationId.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#12\">\n    // Connect to a nontransactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message to the nontransactional queue.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Receive the message from the nontransactional queue.\n    msg = queue-&gt;ReceiveById(id, TimeSpan::FromSeconds(10.0));\n\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ transQueue = \n        gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message in response to the original message.\n    Message^ responseMsg = gcnew Message(&quot;Example Response Message Body&quot;);\n\n    // Set the response message&#39;s CorrelationId property value to the Id\n    // property value of the original message.\n    responseMsg-&gt;CorrelationId = id;\n\n    // Send the response message to the transactional queue.\n    transQueue-&gt;Send(responseMsg, &quot;Example Response Message Label&quot;,\n        MessageQueueTransactionType::Single);\n\n    // Set the transactional queue&#39;s MessageReadPropertyFilter property to\n    // ensure that the response message includes the desired properties.\n    transQueue-&gt;MessageReadPropertyFilter-&gt;CorrelationId = true;\n\n    // Receive the response message from the transactional queue.\n    responseMsg = transQueue-&gt;ReceiveByCorrelationId(id,\n        TimeSpan::FromSeconds(10.0), MessageQueueTransactionType::Single);\n\n    // Display the response message&#39;s property values.\n    Console::WriteLine(&quot;Message.Label: {0}&quot;, responseMsg-&gt;Label);\n    Console::WriteLine(&quot;Message.CorrelationId: {0}&quot;,\n        responseMsg-&gt;CorrelationId);\n\n    transQueue-&gt;Close();\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#12\">\n        // Connect to a nontransactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message to the nontransactional queue.\n        queue.Send(msg, &quot;Example Message Label&quot;);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Receive the message from the nontransactional queue.\n        msg = queue.ReceiveById(id, TimeSpan.FromSeconds(10.0));\n\n        // Connect to a transactional queue on the local computer.\n        MessageQueue transQueue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message in response to the original message.\n        Message responseMsg = new Message(&quot;Example Response Message Body&quot;);\n\n        // Set the response message&#39;s CorrelationId property value to the Id\n        // property value of the original message.\n        responseMsg.CorrelationId = id;\n\n        // Send the response message to the transactional queue.\n        transQueue.Send(responseMsg, &quot;Example Response Message Label&quot;,\n            MessageQueueTransactionType.Single);\n\n        // Set the transactional queue&#39;s MessageReadPropertyFilter property to\n        // ensure that the response message includes the desired properties.\n        transQueue.MessageReadPropertyFilter.CorrelationId = true;\n\n        // Receive the response message from the transactional queue.\n        responseMsg = transQueue.ReceiveByCorrelationId(id,\n            TimeSpan.FromSeconds(10.0), MessageQueueTransactionType.Single);\n\n        // Display the response message&#39;s property values.\n        Console.WriteLine(&quot;Message.Label: {0}&quot;, responseMsg.Label);\n        Console.WriteLine(&quot;Message.CorrelationId: {0}&quot;,\n            responseMsg.CorrelationId);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveById_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveById_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveById(String)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the message that matches the given identifier from a non-transactional queue and immediately raises an exception if no message with the specified identifier currently exists in the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveById (string id);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>id</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.Id*</span> of the message to receive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.Id*</span> property matches the <code>id</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>id</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>id</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to read a message with a known identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <code>id</code> parameter.  </p>\n<p> Two other methods allow you to receive messages from a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_\" data-linktype=\"relative-path\">ReceiveByCorrelationId(String)</a> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  </p>\n<p> To read a message with a specified identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of ReceiveById.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#16\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Simulate doing other work so the message has time to arrive.\n    System::Threading::Thread::Sleep(TimeSpan::FromSeconds(10.0));\n\n    // Receive the message from the queue.\n    msg = queue-&gt;ReceiveById(id);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#16\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, &quot;Example Message Label&quot;);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Simulate doing other work so the message has time to arrive.\n        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10.0));\n\n        // Receive the message from the queue.\n        msg = queue.ReceiveById(id);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveById_System_String_System_Messaging_MessageQueueTransaction_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveById_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveById(String,MessageQueueTransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the message that matches the given identifier (from a transactional queue) and immediately raises an exception if no message with the specified identifier currently exists in the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveById (string id, System.Messaging.MessageQueueTransaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>id</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.Id*</span> of the message to receive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.Id*</span> property matches the <code>id</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>id</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>transaction</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>id</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The queue is non-transactional.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the <code>transaction</code> parameter. This method throws an exception immediately if the message is not in the queue  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <code>id</code> parameter.  </p>\n<p> Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> Two other methods allow you to receive messages from a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_\" data-linktype=\"relative-path\">ReceiveByCorrelationId(String)</a> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  </p>\n<p> To read a message with a specified identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of ReceiveById.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#17\">\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;,\n        MessageQueueTransactionType::Single);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Simulate doing other work so the message has time to arrive.\n    System::Threading::Thread::Sleep(TimeSpan::FromSeconds(10.0));\n\n    // Create a message queuing transaction.\n    MessageQueueTransaction^ transaction = gcnew MessageQueueTransaction();\n\n    try\n    {\n        // Begin a transaction.\n        transaction-&gt;Begin();\n\n        // Receive the message from the queue.\n        msg = queue-&gt;ReceiveById(id, transaction);\n\n        // Commit the transaction.\n        transaction-&gt;Commit();\n    }\n    catch (Exception^ ex)\n    {\n        // Cancel the transaction.\n        transaction-&gt;Abort();\n\n        // Propagate the exception.\n        throw ex;\n    }\n    finally\n    {\n        // Dispose of the transaction object.\n        delete transaction;\n        queue-&gt;Close();\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#17\">\n        // Connect to a transactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, &quot;Example Message Label&quot;,\n            MessageQueueTransactionType.Single);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Simulate doing other work so the message has time to arrive.\n        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10.0));\n\n        // Create a message queuing transaction.\n        MessageQueueTransaction transaction = new MessageQueueTransaction();\n\n        try\n        {\n            // Begin a transaction.\n            transaction.Begin();\n\n            // Receive the message from the queue.\n            msg = queue.ReceiveById(id, transaction);\n\n            // Commit the transaction.\n            transaction.Commit();\n        }\n        catch(System.Exception e)\n        {\n            // Cancel the transaction.\n            transaction.Abort();\n\n            // Propagate the exception.\n            throw e;\n        }\n        finally\n        {\n            // Dispose of the transaction object.\n            transaction.Dispose();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveById_System_String_System_Messaging_MessageQueueTransactionType_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveById_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveById(String,MessageQueueTransactionType)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the message that matches the given identifier and immediately raises an exception if no message with the specified identifier currently exists in the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveById (string id, System.Messaging.MessageQueueTransactionType transactionType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>id</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.Id*</span> of the message to receive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> values, describing the type of transaction context to associate with the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.Id*</span> property matches the <code>id</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>id</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>id</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>transactionType</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> members.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to read a message with a known identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue. Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the <code>transactionType</code> parameter.  </p>\n<p> Specify <code>Automatic</code> for the <code>transactionType</code> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify <code>Single</code> if you want to receive the message as a single internal transaction. You can specify <code>None</code> if you want to receive a message from a transactional queue outside of a transaction context.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <code>id</code> parameter. If the message with the specified identifier is in a queue other than the one associated with this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instance, the message will not be found.  </p>\n<p> If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> Two other methods allow you to receive messages from a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_\" data-linktype=\"relative-path\">ReceiveByCorrelationId(String)</a> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  </p>\n<p> To read a message with a specified identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of ReceiveById.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#15\">\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;,\n        MessageQueueTransactionType::Single);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Simulate doing other work so the message has time to arrive.\n    System::Threading::Thread::Sleep(TimeSpan::FromSeconds(10.0));\n\n    // Receive the message from the queue.\n    msg = queue-&gt;ReceiveById(id, MessageQueueTransactionType::Single);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#15\">\n        // Connect to a transactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, &quot;Example Message Label&quot;,\n            MessageQueueTransactionType.Single);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Simulate doing other work so the message has time to arrive.\n        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10.0));\n\n        // Receive the message from the queue.\n        msg = queue.ReceiveById(id, MessageQueueTransactionType.Single);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveById_System_String_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveById_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveById(String,TimeSpan)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the message that matches the given identifier (from a non-transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveById (string id, TimeSpan timeout);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>id</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.Id*</span> of the message to receive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.Id*</span> property matches the <code>id</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>id</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>A message with the specified <code>id</code> did not arrive in the queue before the time-out expired.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to read a message with a known identifier and remove it from the queue. This method returns immediately if the message with the identifier specified by the <code>id</code> parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  </p>\n<p> The <code>timeout</code> parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> of the new message to see if it matches the <code>id</code> parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> matches the <code>id</code> parameter.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <code>id</code> parameter.  </p>\n<p> Use this overload of <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveById_System_String_\" data-linktype=\"relative-path\">ReceiveById(String)</a> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the <code>timeout</code> parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a> for the <code>timeout</code> parameter, or if new messages continue to arrive in the queue within the time-out period specified by the <code>timeout</code> parameter.  </p>\n<p> Two other methods allow you to receive messages from a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_\" data-linktype=\"relative-path\">ReceiveByCorrelationId(String)</a> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  </p>\n<p> To read a message with a specified identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of ReceiveById.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#20\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Receive the message from the queue.\n    msg = queue-&gt;ReceiveById(id, TimeSpan::FromSeconds(10.0));\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#20\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, &quot;Example Message Label&quot;);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Receive the message from the queue.\n        msg = queue.ReceiveById(id, TimeSpan.FromSeconds(10.0));\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveById_System_String_System_TimeSpan_System_Messaging_MessageQueueTransaction_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveById_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveById(String,TimeSpan,MessageQueueTransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the message that matches the given identifier (from a transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveById (string id, TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>id</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.Id*</span> of the message to receive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.Id*</span> property matches the <code>id</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>id</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>transaction</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>A message with the specified <code>id</code> did not arrive in the queue before the time-out expired.  </p>\n<p> -or-  </p>\n<p> The queue is non-transactional.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the <code>transaction</code> parameter. This method returns immediately if the message with the identifier specified by the <code>id</code> parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  </p>\n<p> The <code>timeout</code> parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> of the new message to see if it matches the <code>id</code> parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> matches the <code>id</code> parameter.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <code>id</code> parameter.  </p>\n<p> Use this overload of <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveById_System_String_\" data-linktype=\"relative-path\">ReceiveById(String)</a> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the <code>timeout</code> parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a> for the <code>timeout</code> parameter, or if new messages continue to arrive in the queue within the timeout period specified by the <code>timeout</code> parameter.  </p>\n<p> Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> Two other methods allow you to receive messages from a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_\" data-linktype=\"relative-path\">ReceiveByCorrelationId(String)</a> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  </p>\n<p> To read a message with a specified identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method always returns the first message in the queue, so subsequent calls to the method return the same message, unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of ReceiveById.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#18\">\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;,\n        MessageQueueTransactionType::Single);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Create a message queuing transaction.\n    MessageQueueTransaction^ transaction = gcnew MessageQueueTransaction();\n\n    try\n    {\n        // Begin a transaction.\n        transaction-&gt;Begin();\n\n        // Receive the message from the queue.\n        msg = queue-&gt;ReceiveById(id, TimeSpan::FromSeconds(10.0),\n            transaction);\n\n        // Commit the transaction.\n        transaction-&gt;Commit();\n    }\n    catch (Exception^ ex)\n    {\n        // Cancel the transaction.\n        transaction-&gt;Abort();\n\n        // Propagate the exception.\n        throw ex;\n    }\n    finally\n    {\n        // Dispose of the transaction object.\n        delete transaction;\n        queue-&gt;Close();\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#18\">\n        // Connect to a transactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, &quot;Example Message Label&quot;,\n            MessageQueueTransactionType.Single);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Create a message queuing transaction.\n        MessageQueueTransaction transaction = new MessageQueueTransaction();\n\n        try\n        {\n            // Begin a transaction.\n            transaction.Begin();\n\n            // Receive the message from the queue.\n            msg = queue.ReceiveById(id, TimeSpan.FromSeconds(10.0),\n                transaction);\n\n            // Commit the transaction.\n            transaction.Commit();\n        }\n        catch(System.Exception e)\n        {\n            // Cancel the transaction.\n            transaction.Abort();\n\n            // Propagate the exception.\n            throw e;\n        }\n        finally\n        {\n            // Dispose of the transaction object.\n            transaction.Dispose();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveById_System_String_System_TimeSpan_System_Messaging_MessageQueueTransactionType_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveById_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveById(String,TimeSpan,MessageQueueTransactionType)</div>        \r\n          </div>\r\n    \r\n            <p>Receives the message that matches the given identifier and waits until either a message with the specified identifier is available in the queue or the time-out expires.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveById (string id, TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>id</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.Id*</span> of the message to receive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>timeout</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> that indicates the time to wait until a new message is available for inspection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> values, describing the type of transaction context to associate with the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.Id*</span> property matches the <code>id</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>id</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <a class=\"xref\" href=\"system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">Zero</a> or greater than <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>A message with the specified <code>id</code> did not arrive in the queue before the time-out expired.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>transactionType</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> members.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to read a message with a known identifier and remove it from the queue. This method returns immediately if the message with the identifier specified by the <code>id</code> parameter is in the queue, using a transaction context defined by the <code>transactionType</code> parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  </p>\n<p> The <code>timeout</code> parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> of the new message to see if it matches the <code>id</code> parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> matches the <code>id</code> parameter.  </p>\n<p> Specify <code>Automatic</code> for the <code>transactionType</code> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify <code>Single</code> if you want to receive the message as a single internal transaction. You can specify <code>None</code> if you want to receive a message from a transactional queue outside of a transaction context.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Id_\" data-linktype=\"relative-path\">Id</a> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <code>id</code> parameter. If the message with the specified identifier is in a queue other than the one associated with this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instance, the message will not be found.  </p>\n<p> Use this overload of <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveById_System_String_\" data-linktype=\"relative-path\">ReceiveById(String)</a> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the <code>timeout</code> parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_InfiniteTimeout\" data-linktype=\"relative-path\">InfiniteTimeout</a> for the <code>timeout</code> parameter, or if new messages continue to arrive in the queue within the time-out period specified by the <code>timeout</code> parameter.  </p>\n<p> If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> Two other methods allow you to receive messages from a queue. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Receive_\" data-linktype=\"relative-path\">Receive</a> method returns the first message in the queue, and the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_ReceiveByCorrelationId_System_String_\" data-linktype=\"relative-path\">ReceiveByCorrelationId(String)</a> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  </p>\n<p> To read a message with a specified identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method. The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekById_System_String_\" data-linktype=\"relative-path\">PeekById(String)</a> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of ReceiveById.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#19\">\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;,\n        MessageQueueTransactionType::Single);\n\n    // Get the message&#39;s Id property value.\n    String^ id = msg-&gt;Id;\n\n    // Receive the message from the queue.\n    msg = queue-&gt;ReceiveById(id, TimeSpan::FromSeconds(10.0),\n        MessageQueueTransactionType::Single);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#19\">\n        // Connect to a transactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, &quot;Example Message Label&quot;,\n            MessageQueueTransactionType.Single);\n\n        // Get the message&#39;s Id property value.\n        string id = msg.Id;\n\n        // Receive the message from the queue.\n        msg = queue.ReceiveById(id, TimeSpan.FromSeconds(10.0),\n            MessageQueueTransactionType.Single);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveByLookupId_System_Int64_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveByLookupId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveByLookupId(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Introduced in MSMQ 3.0. Receives the message that matches the given lookup identifier from a non-transactional queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveByLookupId (long lookupId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>lookupId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.LookupId*</span> of the message to receive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> whose <span class=\"xref\">stem.Messaging.Message.LookupId*</span> property matches the <code>lookupId</code> parameter passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>MSMQ 3.0 is not installed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>lookupId</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to read a message with a known lookup identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_LookupId_\" data-linktype=\"relative-path\">LookupId</a> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given <code>lookupId</code> parameter.  </p>\n<p> To read a message with a specified lookup identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByLookupId_\" data-linktype=\"relative-path\">PeekByLookupId</a> method.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveByLookupId_System_Messaging_MessageLookupAction_System_Int64_System_Messaging_MessageQueueTransaction_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveByLookupId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Introduced in MSMQ 3.0. Receives a specific message from a transactional queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveByLookupId (System.Messaging.MessageLookupAction action, long lookupId, System.Messaging.MessageQueueTransaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagelookupaction\" data-linktype=\"relative-path\">MessageLookupAction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagelookupaction\" data-linktype=\"relative-path\">MessageLookupAction</a> values, specifying how the message is read in the queue. Specify one of the following:  </p>\n<p> <code>MessageLookupAction.Current</code>: Receives the message specified by <code>lookupId</code> and removes it from the queue.  </p>\n<p> <code>MessageLookupAction.Next</code>: Receives the message following the message specified by <code>lookupId</code> and removes it from the queue.  </p>\n<p> <code>MessageLookupAction.Previous</code>: Receives the message preceding the message specified by <code>lookupId</code> and removes it from the queue.  </p>\n<p> <code>MessageLookupAction.First</code>: Receives the first message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.  </p>\n<p> <code>MessageLookupAction.Last</code>: Receives the last message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lookupId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.LookupId*</span> of the message to receive, or 0. 0 is used when accessing the first or last message in the queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> specified by the <code>lookupId</code> and <code>action</code> parameters passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>MSMQ 3.0 is not installed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>lookupId</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.  </p>\n<p> -or-  </p>\n<p> The queue is non-transactional.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagelookupaction\" data-linktype=\"relative-path\">MessageLookupAction</a> members.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the <code>transaction</code> parameter. This method throws an exception immediately if the message is not in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_LookupId_\" data-linktype=\"relative-path\">LookupId</a> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given <code>lookupId</code> parameter.  </p>\n<p> Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> To read a message with a specified identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByLookupId_\" data-linktype=\"relative-path\">PeekByLookupId</a> method. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByLookupId_\" data-linktype=\"relative-path\">PeekByLookupId</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByLookupId_\" data-linktype=\"relative-path\">PeekByLookupId</a> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveByLookupId_System_Messaging_MessageLookupAction_System_Int64_System_Messaging_MessageQueueTransactionType_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ReceiveByLookupId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransactionType)</div>        \r\n          </div>\r\n    \r\n            <p>Introduced in MSMQ 3.0. Receives a specific message from the queue, using the specified transaction context. The message can be specified by a lookup identifier or by its position at the front or end of the queue.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Messaging.Message ReceiveByLookupId (System.Messaging.MessageLookupAction action, long lookupId, System.Messaging.MessageQueueTransactionType transactionType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>action</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagelookupaction\" data-linktype=\"relative-path\">MessageLookupAction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagelookupaction\" data-linktype=\"relative-path\">MessageLookupAction</a> values, specifying how the message is read in the queue. Specify one of the following:  </p>\n<p> <code>MessageLookupAction.Current</code>: Receives the message specified by <code>lookupId</code> and removes it from the queue.  </p>\n<p> <code>MessageLookupAction.Next</code>: Receives the message following the message specified by <code>lookupId</code> and removes it from the queue.  </p>\n<p> <code>MessageLookupAction.Previous</code>: Receives the message preceding the message specified by <code>lookupId</code> and removes it from the queue.  </p>\n<p> <code>MessageLookupAction.First</code>: Receives the first message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.  </p>\n<p> <code>MessageLookupAction.Last</code>: Receives the last message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lookupId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Messaging.Message.LookupId*</span> of the message to receive, or 0. 0 is used when accessing the first or last message in the queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> values, describing the type of transaction context to associate with the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> specified by the <code>action</code> and <code>lookupId</code> parameters passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>MSMQ 3.0 is not installed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The message with the specified <code>lookupId</code> could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>action</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagelookupaction\" data-linktype=\"relative-path\">MessageLookupAction</a> members.  </p>\n<p> -or-  </p>\n<p> The <code>transactionType</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> members.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the <code>transactionType</code> parameter. This method throws an exception immediately if the message is not in the queue.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_LookupId_\" data-linktype=\"relative-path\">LookupId</a> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given <code>lookupId</code> parameter.  </p>\n<p> To read a message with a specified identifier without removing it from the queue, use the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByLookupId_\" data-linktype=\"relative-path\">PeekByLookupId</a> method. There is no transaction context associated with a message returned by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByLookupId_\" data-linktype=\"relative-path\">PeekByLookupId</a>. Because <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekByLookupId_\" data-linktype=\"relative-path\">PeekByLookupId</a> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.  </p>\n<p> Specify <code>Automatic</code> for the <code>transactionType</code> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify <code>Single</code> if you want to receive the message as a single internal transaction. You can specify <code>None</code> if you want to receive a message from a transactional queue outside of a transaction context.  </p>\n<p> If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Refresh\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Refresh_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Refresh()</div>        \r\n          </div>\r\n    \r\n            <p>Refreshes the properties presented by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> to reflect the current state of the resource.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Refresh ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Refresh synchronizes the properties of a <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> with its associated Message Queuing server resource. If any property, such as <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Label_\" data-linktype=\"relative-path\">Label</a> or <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Category_\" data-linktype=\"relative-path\">Category</a>, has changed on the server since the time the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> was created, Refresh updates the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> with the new information.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of Refresh.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#28\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Refresh the queue&#39;s property values to obtain its current state.\n    queue-&gt;Refresh();\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#28\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Refresh the queue&#39;s property values to obtain its current state.\n        queue.Refresh();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ResetPermissions\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_ResetPermissions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ResetPermissions()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the permission list to the operating system&#39;s default values. Removes any queue permissions you have appended to the default list.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ResetPermissions ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you call ResetPermissions, you return the permission list to its default values. Generally, this grants the queue creator all permissions, and gives the group Everyone the following rights:  </p>\n<ul>\n<li><p>Get the properties of the queue.  </p>\n</li>\n<li><p>Get queue permissions.  </p>\n</li>\n<li><p>Write to the queue.  </p>\n<p>The following table shows whether this method is available in various Workgroup modes.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of ResetPermissions.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#27\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Reset the queue&#39;s permission list to its default values.\n    queue-&gt;ResetPermissions();\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#27\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Reset the queue&#39;s permission list to its default values.\n        queue.ResetPermissions();\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Send_System_Object_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Send_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Send(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sends an object to non-transactional queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Send (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to send to the queue.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Messaging.MessageQueue.Path*</span> property has not been set.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to send a message that contains the <code>obj</code> parameter to the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. The object you send to the queue can be a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> or any managed object. If you send any object other than a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, the object is serialized and inserted into the body of the message.  </p>\n<p> If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue. If you want the message to be part of a transaction that contains other messages, use an overload that takes a <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> or <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> as a parameter.  </p>\n<p> If you do not set the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property before calling Send, the formatter defaults to the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> property applies to any object other than a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>. If you specify, for example, a label or a priority using the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> member, these values apply to any message that contains an object that is not of type <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> when your application sends it to the queue. When sending a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, the property values set for the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> take precedence over <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> and the message&#39;s <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property takes precedence over the queue&#39;s <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example connects to a message queue and sends a message to the queue.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.Send_obj#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n    /// &lt;summary&gt;\n    /// Provides a container class for the example.\n    /// &lt;/summary&gt;\n    public class MyNewQueue\n    {\n\n        //**************************************************\n        // Provides an entry point into the application.\n        // \n        // This example sends a message to a queue.\n        //**************************************************\n\n        public static void Main()\n        {\n            // Create a new instance of the class.\n            MyNewQueue myNewQueue = new MyNewQueue();\n\n            // Send a message to a queue.\n            myNewQueue.SendMessage();\n\n            return;\n        }\n\n\n        //**************************************************\n        // Sends a message to a queue.\n        //**************************************************\n\t\t\n        public void SendMessage()\n        {\n\t\t\t\t\t\t\n            // Connect to a queue on the local computer.\n            MessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\n            // Send a message to the queue.\n            if (myQueue.Transactional == true)\n            {\n                // Create a transaction.\n                MessageQueueTransaction myTransaction = new \n                    MessageQueueTransaction();\n\n                // Begin the transaction.\n                myTransaction.Begin();\n\n                // Send the message.\n                myQueue.Send(&quot;My Message Data.&quot;, myTransaction);\n\n                // Commit the transaction.\n                myTransaction.Commit();\n            }\n            else\n            {\n                myQueue.Send(&quot;My Message Data.&quot;);\n            }\n\n            return;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.Send_obj#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll.&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n   void SendMessage()\n   {\n      \n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n      \n      // Send a message to the queue.\n      if ( myQueue-&gt;Transactional == true )\n      {\n         \n         // Create a transaction.\n         MessageQueueTransaction^ myTransaction = gcnew MessageQueueTransaction;\n         \n         // Begin the transaction.\n         myTransaction-&gt;Begin();\n         \n         // Send the message.\n         myQueue-&gt;Send( &quot;My Message Data.&quot;, myTransaction );\n         \n         // Commit the transaction.\n         myTransaction-&gt;Commit();\n      }\n      else\n      {\n         myQueue-&gt;Send( &quot;My Message Data.&quot; );\n      }\n\n      return;\n   }\n\n};\n\nint main()\n{\n   \n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n   \n   // Send a message to a queue.\n   myNewQueue-&gt;SendMessage();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.Send_obj#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        &#39;\n        &#39; Provides an entry point into the application.\n        &#39; \n        &#39; This example sends a message to a queue.\n        &#39;\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue\n\n            &#39; Send a message to a queue.\n            myNewQueue.SendMessage()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        &#39;\n        &#39; Sends a message to a queue.\n        &#39;\n\n        Public Sub SendMessage()\n\n            &#39; Connect to a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n\n            &#39; Send a message to the queue.\n            If myQueue.Transactional = True Then\n\n                &#39; Create a transaction.\n                Dim myTransaction As New MessageQueueTransaction\n\n                &#39; Begin the transaction.\n                myTransaction.Begin()\n\n                &#39; Send the message.\n                myQueue.Send(&quot;My Message Data.&quot;, myTransaction)\n\n                &#39; Commit the transaction.\n                myTransaction.Commit()\n\n            Else\n                myQueue.Send(&quot;My Message Data.&quot;)\n            End If\n\n            Return\n\n        End Sub &#39;SendMessage\n\nEnd Class &#39;MyNewQueue\n</code></pre><p> The following code example sends an application-defined <code>Order</code> class to a queue and then receives a message from that queue.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Send_System_Object_System_Messaging_MessageQueueTransaction_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Send_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Send(Object,MessageQueueTransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Sends an object to the transactional queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Send (object obj, System.Messaging.MessageQueueTransaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to send to the queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>transaction</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Messaging.MessageQueue.Path*</span> property has not been set.  </p>\n<p> -or-  </p>\n<p> The Message Queuing application indicated an incorrect transaction use.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to send a message that contains the <code>obj</code> parameter to the transactional queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>, using an internal transaction context defined by the <code>transaction</code> parameter. The object you send to the queue can be a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> or any managed object. If you send any object other than a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, the object is serialized and inserted into the body of the message.  </p>\n<p> If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.  </p>\n<p> If you do not set the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property before calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Send_System_Object_\" data-linktype=\"relative-path\">Send(Object)</a>, the formatter defaults to the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> property applies to any object other than a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>. If you specify, for example, a label or a priority using the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> member, these values apply to any message that contains an object that is not of type <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> when your application sends it to the queue. When sending a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, the property values set for the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> take precedence over <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> and the message&#39;s <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property takes precedence over the queue&#39;s <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property.  </p>\n<p> [Visual Basic]  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> is threading apartment aware, so if your apartment state is <code>STA</code>, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to <code>STA</code>, so you must apply the <a class=\"xref\" href=\"system.mtathreadattribute\" data-linktype=\"relative-path\">MTAThreadAttribute</a> in the <code>Main</code> subroutine. Otherwise, sending a transactional message using another thread throws a <a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a> exception. You apply the <a class=\"xref\" href=\"system.mtathreadattribute\" data-linktype=\"relative-path\">MTAThreadAttribute</a> by using the following fragment.  </p>\n<pre><code>&lt;System.MTAThreadAttribute&gt;  \n public sub Main()\n</code></pre><pre><code class=\"lang-vb#\">\n\n</code></pre><p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example sends a string to a transactional queue and then receives a message from that queue.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.Send_ObjectTransaction#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\n    /// &lt;summary&gt;\n    /// Provides a container class for the example.\n    /// &lt;/summary&gt;\n    public class MyNewQueue\n    {\n\n        //**************************************************\n        // Provides an entry point into the application.\n        // \n        // This example sends and receives a message from\n        // a transactional queue.\n        //**************************************************\n\n        public static void Main()\n        {\n            // Create a new instance of the class.\n            MyNewQueue myNewQueue = new MyNewQueue();\n\n            // Send a message to a queue.\n            myNewQueue.SendMessageTransactional();\n\n            // Receive a message from a queue.\n            myNewQueue.ReceiveMessageTransactional();\n\t\t\n            return;\n        }\n\n\n        //**************************************************\n        // Sends a message to a queue.\n        //**************************************************\n\t\t\n        public void SendMessageTransactional()\n        {\n\t\t\t\t\t\t\n            // Connect to a queue on the local computer.\n            MessageQueue myQueue = new \n                MessageQueue(&quot;.\\\\myTransactionalQueue&quot;);\n\n            // Send a message to the queue.\n            if (myQueue.Transactional == true)\n            {\n                // Create a transaction.\n                MessageQueueTransaction myTransaction = new \n                    MessageQueueTransaction();\n\n                // Begin the transaction.\n                myTransaction.Begin();\n\n                // Send the message.\n                myQueue.Send(&quot;My Message Data.&quot;, myTransaction);\n\n                // Commit the transaction.\n                myTransaction.Commit();\n            }\n\n            return;\n        }\n\n\n        //**************************************************\n        // Receives a message containing an Order.\n        //**************************************************\n\t\t\n        public  void ReceiveMessageTransactional()\n        {\n            // Connect to a transactional queue on the local computer.\n            MessageQueue myQueue = new \n                MessageQueue(&quot;.\\\\myTransactionalQueue&quot;);\n\n            // Set the formatter.\n            myQueue.Formatter = new XmlMessageFormatter(new Type[]\n                {typeof(String)});\n\t\t\t\n            // Create a transaction.\n            MessageQueueTransaction myTransaction = new \n                MessageQueueTransaction();\n\n            try\n            {\n                // Begin the transaction.\n                myTransaction.Begin();\n\t\t\t\t\n                // Receive the message. \n                Message myMessage =\tmyQueue.Receive(myTransaction); \n                String myOrder = (String)myMessage.Body;\n\n                // Display message information.\n                Console.WriteLine(myOrder);\n\n                // Commit the transaction.\n                myTransaction.Commit();\n\n            }\n\t\t\t\n            catch (MessageQueueException e)\n            {\n                // Handle nontransactional queues.\n                if (e.MessageQueueErrorCode == \n                    MessageQueueErrorCode.TransactionUsage)\n                { \n                    Console.WriteLine(&quot;Queue is not transactional.&quot;);\n                }\n\t\t\t\t\n                // Else catch other sources of MessageQueueException.\n\n                // Roll back the transaction.\n                myTransaction.Abort();\n            }\n\n            // Catch other exceptions as necessary, such as \n            // InvalidOperationException, thrown when the formatter \n            // cannot deserialize the message.\n\n            return;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.Send_ObjectTransaction#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n/// &lt;summary&gt;\n/// Provides a container class for the example.\n/// &lt;/summary&gt;\nref class MyNewQueue\n{\npublic:\n\n   //*************************************************\n   // Sends a message to a queue.\n   //*************************************************\n   void SendMessageTransactional()\n   {\n      // Connect to a queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myTransactionalQueue&quot; );\n\n      // Send a message to the queue.\n      if ( myQueue-&gt;Transactional == true )\n      {\n         // Create a transaction.\n         MessageQueueTransaction^ myTransaction = gcnew MessageQueueTransaction;\n\n         // Begin the transaction.\n         myTransaction-&gt;Begin();\n\n         // Send the message.\n         myQueue-&gt;Send( &quot;My Message Data.&quot;, myTransaction );\n\n         // Commit the transaction.\n         myTransaction-&gt;Commit();\n      }\n\n      return;\n   }\n\n\n   //*************************************************\n   // Receives a message containing an Order.\n   //*************************************************\n   void ReceiveMessageTransactional()\n   {\n      // Connect to a transactional queue on the local computer.\n      MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myTransactionalQueue&quot; );\n\n      // Set the formatter.\n      array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n      p[ 0 ] = String::typeid;\n      myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n      // Create a transaction.\n      MessageQueueTransaction^ myTransaction = gcnew MessageQueueTransaction;\n      try\n      {\n         // Begin the transaction.\n         myTransaction-&gt;Begin();\n\n         // Receive the message. \n         Message^ myMessage = myQueue-&gt;Receive( myTransaction );\n         String^ myOrder = static_cast&lt;String^&gt;(myMessage-&gt;Body);\n\n         // Display message information.\n         Console::WriteLine( myOrder );\n\n         // Commit the transaction.\n         myTransaction-&gt;Commit();\n      }\n      catch ( MessageQueueException^ e ) \n      {\n         // Handle nontransactional queues.\n         if ( e-&gt;MessageQueueErrorCode == MessageQueueErrorCode::TransactionUsage )\n         {\n            Console::WriteLine( &quot;Queue is not transactional.&quot; );\n         }\n\n         // Else catch other sources of MessageQueueException.\n         // Roll back the transaction.\n         myTransaction-&gt;Abort();\n      }\n\n      // Catch other exceptions as necessary, such as \n      // InvalidOperationException, thrown when the formatter \n      // cannot deserialize the message.\n      return;\n   }\n};\n\n//*************************************************\n// Provides an entry point into the application.\n// \n// This example sends and receives a message from\n// a transactional queue.\n//*************************************************\nint main()\n{\n   // Create a new instance of the class.\n   MyNewQueue^ myNewQueue = gcnew MyNewQueue;\n\n   // Send a message to a queue.\n   myNewQueue-&gt;SendMessageTransactional();\n\n   // Receive a message from a queue.\n   myNewQueue-&gt;ReceiveMessageTransactional();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.Send_ObjectTransaction#1\">Imports System\nImports System.Messaging\n   \nPublic Class MyNewQueue\n\n\n        &#39;\n        &#39; Provides an entry point into the application.\n        &#39; \n        &#39; This example sends and receives a message from\n        &#39; a transactional queue.\n        &#39;\n\n        Public Shared Sub Main()\n\n            &#39; Create a new instance of the class.\n            Dim myNewQueue As New MyNewQueue\n\n            &#39; Send a message to a queue.\n            myNewQueue.SendMessageTransactional()\n\n            &#39; Receive a message from a queue.\n            myNewQueue.ReceiveMessageTransactional()\n\n            Return\n\n        End Sub &#39;Main\n\n\n        &#39;\n        &#39; Sends a message to a queue.\n        &#39;\n\n        Public Sub SendMessageTransactional()\n\n            &#39; Connect to a queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myTransactionalQueue&quot;)\n\n            &#39; Send a message to the queue.\n            If myQueue.Transactional = True Then\n                &#39; Create a transaction.\n                Dim myTransaction As New MessageQueueTransaction\n\n                &#39; Begin the transaction.\n                myTransaction.Begin()\n\n                &#39; Send the message.\n                myQueue.Send(&quot;My Message Data.&quot;, myTransaction)\n\n                &#39; Commit the transaction.\n                myTransaction.Commit()\n            End If\n\n            Return\n\n        End Sub &#39;SendMessageTransactional\n\n\n        &#39;\n        &#39; Receives a message containing an Order.\n        &#39;\n\n        Public Sub ReceiveMessageTransactional()\n\n            &#39; Connect to a transactional queue on the local computer.\n            Dim myQueue As New MessageQueue(&quot;.\\myTransactionalQueue&quot;)\n\n            &#39; Set the formatter.\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Create a transaction.\n            Dim myTransaction As New MessageQueueTransaction\n\n            Try\n\n                &#39; Begin the transaction.\n                myTransaction.Begin()\n\n                &#39; Receive the message. \n                Dim myMessage As Message = _\n                    myQueue.Receive(myTransaction)\n                Dim myOrder As [String] = CType(myMessage.Body, _\n                    [String])\n\n                &#39; Display message information.\n                Console.WriteLine(myOrder)\n\n                &#39; Commit the transaction.\n                myTransaction.Commit()\n\n\n            Catch e As MessageQueueException\n\n                &#39; Handle nontransactional queues.\n                If e.MessageQueueErrorCode = _\n                    MessageQueueErrorCode.TransactionUsage Then\n\n                    Console.WriteLine(&quot;Queue is not transactional.&quot;)\n\n                End If\n\n                &#39; Else catch other sources of a MessageQueueException.\n\n\n                &#39; Roll back the transaction.\n                myTransaction.Abort()\n\n\n                &#39; Catch other exceptions as necessary, such as \n                &#39; InvalidOperationException, thrown when the formatter\n                &#39; cannot deserialize the message.\n\n            End Try\n\n            Return\n\n        End Sub &#39;ReceiveMessageTransactional\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Send_System_Object_System_Messaging_MessageQueueTransactionType_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Send_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Send(Object,MessageQueueTransactionType)</div>        \r\n          </div>\r\n    \r\n            <p>Sends an object to the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Send (object obj, System.Messaging.MessageQueueTransactionType transactionType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to send to the queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> values, describing the type of transaction context to associate with the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>transactionType</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> members.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Messaging.MessageQueue.Path*</span> property has not been set.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to send a message that contains the <code>obj</code> parameter to the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>, using a transaction context defined by the <code>transactionType</code> parameter. Specify <code>Automatic</code> for the <code>transactionType</code> parameter if there is already an external transaction context attached to the thread that you want to use to send the message. Specify <code>Single</code> if you want to send the message as a single internal transaction. You can specify <code>None</code> if you want to send a transactional message to a non-transactional thread.  </p>\n<p> The object you send to the queue can be a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> or any managed object. If you send any object other than a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, the object is serialized and inserted into the body of the message.  </p>\n<p> If you do not set the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property before calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Send_System_Object_\" data-linktype=\"relative-path\">Send(Object)</a>, the formatter defaults to the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> property applies to any object other than a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>. If you specify, for example, a label or a priority using the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> member, these values apply to any message that contains an object that is not of type <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> when your application sends it to the queue. When sending a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, the property values set for the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> take precedence over <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> and the message&#39;s <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property takes precedence over the queue&#39;s <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of Send.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#2\">\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, MessageQueueTransactionType::Single);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#2\">\n        // Connect to a transactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, MessageQueueTransactionType.Single);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Send_System_Object_System_String_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Send_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Send(Object,String)</div>        \r\n          </div>\r\n    \r\n            <p>Sends an object to the non-transactional queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> and specifies a label for the message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Send (object obj, string label);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to send to the queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>label</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The label of the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>label</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Messaging.MessageQueue.Path*</span> property has not been set.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to send a message that contains the <code>obj</code> parameter to the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>. With this overload, you can specify the string label that identifies the message. The object you send to the queue can be a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, a structure, a data object, or any managed object. If you send any object other than a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, the object is serialized and inserted into the body of the message.  </p>\n<p> The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.  </p>\n<p> If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue. If you want the message to be part of a transaction that contains other messages, use an overload that takes a <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> or <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> as a parameter.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Path_\" data-linktype=\"relative-path\">Path</a> property for this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> instance must be specified before you send the message. If you do not set the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property before calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Send_System_Object_\" data-linktype=\"relative-path\">Send(Object)</a>, the formatter defaults to the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> property applies to any object other than a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>. If you specify, for example, a label or a priority using the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> member, these values apply to any message that contains an object that is not of type <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> when your application sends it to the queue. When sending a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, the property values set for the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> take precedence over <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> and the message&#39;s <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property takes precedence over the queue&#39;s <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of Send.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#1\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#1\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, &quot;Example Message Label&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Send_System_Object_System_String_System_Messaging_MessageQueueTransaction_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Send_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Send(Object,String,MessageQueueTransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Sends an object to the transactional queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> and specifies a label for the message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Send (object obj, string label, System.Messaging.MessageQueueTransaction transaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to send to the queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>label</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The label of the message.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>label</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>transaction</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Messaging.MessageQueue.Path*</span> property has not been set.  </p>\n<p> -or-  </p>\n<p> The Message Queuing application indicated an incorrect transaction usage.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to send a message that contains the <code>obj</code> parameter to the transactional queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>, using an internal transaction context defined by the <code>transaction</code> parameter. With this overload, you can specify the string label that identifies the message. The object you send to the queue can be a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, a structure, a data object, or any managed object. If you send any object other than a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, the object is serialized and inserted into the body of the message.  </p>\n<p> The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.  </p>\n<p> If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.  </p>\n<p> If you do not set the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property before calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Send_System_Object_\" data-linktype=\"relative-path\">Send(Object)</a>, the formatter defaults to the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> property applies to any object other than a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>. If you specify, for example, a label or a priority using the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> member, these values apply to any message that contains an object that is not of type <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> when your application sends it to the queue. When sending a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, the property values set for the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> take precedence over <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> and the message&#39;s <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property takes precedence over the queue&#39;s <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property  </p>\n<p> [Visual Basic]  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a> is threading apartment aware, so if your apartment state is <code>STA</code>, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to <code>STA</code>, so you must apply the <a class=\"xref\" href=\"system.mtathreadattribute\" data-linktype=\"relative-path\">MTAThreadAttribute</a> in the <code>Main</code> subroutine. Otherwise, sending a transactional message using another thread throws a <a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a> exception. You apply the <a class=\"xref\" href=\"system.mtathreadattribute\" data-linktype=\"relative-path\">MTAThreadAttribute</a> by using the following fragment.  </p>\n<pre><code>&lt;System.MTAThreadAttribute&gt;  \n public sub Main()\n</code></pre><pre><code class=\"lang-vb#\">\n\n</code></pre><p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of Send.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#4\">\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Create a message queuing transaction.\n    MessageQueueTransaction^ transaction = gcnew MessageQueueTransaction();\n\n    try\n    {\n        // Begin a transaction.\n        transaction-&gt;Begin();\n\n        // Send the message to the queue.\n        queue-&gt;Send(msg, &quot;Example Message Label&quot;, transaction);\n\n        // Commit the transaction.\n        transaction-&gt;Commit();\n    }\n    catch (Exception^ ex)\n    {\n        // Cancel the transaction.\n        transaction-&gt;Abort();\n\n        // Propagate the exception.\n        throw ex;\n    }\n    finally\n    {\n        // Dispose of the transaction object.\n        delete transaction;\n        queue-&gt;Close();\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#4\">\n        // Connect to a transactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Create a message queuing transaction.\n        MessageQueueTransaction transaction = new MessageQueueTransaction();\n\n        try\n        {\n            // Begin a transaction.\n            transaction.Begin();\n\n            // Send the message to the queue.\n            queue.Send(msg, &quot;Example Message Label&quot;, transaction);\n\n            // Commit the transaction.\n            transaction.Commit();\n        }\n        catch(System.Exception e)\n        {\n            // Cancel the transaction.\n            transaction.Abort();\n\n            // Propagate the exception.\n            throw e;\n        }\n        finally\n        {\n            // Dispose of the transaction object.\n            transaction.Dispose();\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_Send_System_Object_System_String_System_Messaging_MessageQueueTransactionType_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_Send_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Send(Object,String,MessageQueueTransactionType)</div>        \r\n          </div>\r\n    \r\n            <p>Sends an object to the queue referenced by this <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a> and specifies a label for the message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Send (object obj, string label, System.Messaging.MessageQueueTransactionType transactionType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to send to the queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>label</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The label of the message.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>transactionType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> values, describing the type of transaction context to associate with the message.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>label</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeuetransaction\" data-linktype=\"relative-path\">MessageQueueTransaction</a></div>\r\n                  </div>\r\n                  <p>The Message Queuing application indicated an incorrect transaction usage.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.invalidenumargumentexception\" data-linktype=\"relative-path\">InvalidEnumArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>transactionType</code> parameter is not one of the <a class=\"xref\" href=\"system.messaging.messagequeuetransactiontype\" data-linktype=\"relative-path\">MessageQueueTransactionType</a> members.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Messaging.MessageQueue.Path*</span> property has not been set.  </p>\n<p> -or-  </p>\n<p> An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to send a message that contains the <code>obj</code> parameter to the queue referenced by the <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>, using a transaction context defined by the <code>transactionType</code> parameter. Specify <code>Automatic</code> for the <code>transactionType</code> parameter if there is already an external transaction context attached to the thread that you want to use to send the message. Specify <code>Single</code> if you want to send the message as a single internal transaction. You can specify <code>None</code> if you want to send a transactional message to a non-transactional thread.  </p>\n<p> The object you send to the queue can be a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> or any managed object. If you send any object other than a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, the object is serialized and inserted into the body of the message. With this overload, you can specify the string label that identifies the message.  </p>\n<p> The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.  </p>\n<p> If you do not set the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property before calling <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Send_System_Object_\" data-linktype=\"relative-path\">Send(Object)</a>, the formatter defaults to the <a class=\"xref\" href=\"system.messaging.xmlmessageformatter\" data-linktype=\"relative-path\">XmlMessageFormatter</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> property applies to any object other than a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>. If you specify, for example, a label or a priority using the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a> member, these values apply to any message that contains an object that is not of type <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> when your application sends it to the queue. When sending a <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a>, the property values set for the <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> take precedence over <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_DefaultPropertiesToSend_\" data-linktype=\"relative-path\">DefaultPropertiesToSend</a>, and the message&#39;s <a class=\"xref\" href=\"system.messaging.message#System_Messaging_Message_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property takes precedence over the queue&#39;s <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_Formatter_\" data-linktype=\"relative-path\">Formatter</a> property.  </p>\n<p> The following table shows whether this method is available in various Workgroup modes.  </p>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of Send.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#3\">\n    // Connect to a transactional queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n    // Create a new message.\n    Message^ msg = gcnew Message(&quot;Example Message Body&quot;);\n\n    // Send the message.\n    queue-&gt;Send(msg, &quot;Example Message Label&quot;,\n        MessageQueueTransactionType::Single);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#3\">\n        // Connect to a transactional queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleTransQueue&quot;);\n\n        // Create a new message.\n        Message msg = new Message(&quot;Example Message Body&quot;);\n\n        // Send the message.\n        queue.Send(msg, &quot;Example Message Label&quot;,\n            MessageQueueTransactionType.Single);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_SetPermissions_System_Messaging_AccessControlList_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_SetPermissions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetPermissions(AccessControlList)</div>        \r\n          </div>\r\n    \r\n            <p>Assigns access rights to the queue based on the contents of an access control list.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetPermissions (System.Messaging.AccessControlList dacl);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dacl</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.accesscontrollist\" data-linktype=\"relative-path\">AccessControlList</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.accesscontrollist\" data-linktype=\"relative-path\">AccessControlList</a> that contains one or more access control entries that specify the trustees and the permissions to grant.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to grant, deny, or revoke rights by using a collection of access control entries to specify trustee and permissions information. This is used, for example, to grant permissions to multiple users at the same time.  </p>\n<p> The trustee you specify when you construct the <code>ace</code> parameter can be an individual user, a group of users, or a computer. If the trustee is an individual, use the format <code>DOMAIN</code>\\<code>user</code>. You can specify &quot;.&quot; for the trustee to indicate the local computer.  </p>\n<p> The permissions you assign through <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_SetPermissions_\" data-linktype=\"relative-path\">SetPermissions</a> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_SetPermissions_\" data-linktype=\"relative-path\">SetPermissions</a>, the user and permissions information is appended to the bottom of the existing list.  </p>\n<p> The system examines each <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> in sequence until one of the following events occurs:  </p>\n<ul>\n<li><p>An access-denied <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> explicitly denies any of the requested access rights to one of the trustees listed in the thread&#39;s access token.  </p>\n</li>\n<li><p>One or more access-allowed <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> items for trustees listed in the thread&#39;s access token explicitly grant all the requested access rights.  </p>\n</li>\n<li><p>All <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  </p>\n<p>When you construct the <code>dacl</code> parameter, you add <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> instances to your <a class=\"xref\" href=\"system.messaging.accesscontrollist\" data-linktype=\"relative-path\">AccessControlList</a> collection. When you construct each access control entry, you can specify generic or standard access rights. The rights to a queue can be any combination of the following:  </p>\n</li>\n<li><p>Delete  </p>\n</li>\n<li><p>Read Security  </p>\n</li>\n<li><p>Write Security  </p>\n</li>\n<li><p>Synchronize  </p>\n</li>\n<li><p>Modify Owner  </p>\n</li>\n<li><p>Read  </p>\n</li>\n<li><p>Write  </p>\n</li>\n<li><p>Execute  </p>\n</li>\n<li><p>Required  </p>\n</li>\n<li><p>All  </p>\n</li>\n<li><p>None  </p>\n<p>These rights are a set of bit flags that you can combine using the OR bitwise operator.  </p>\n</li>\n<li><p>Full Control  </p>\n</li>\n<li><p>Delete Message  </p>\n</li>\n<li><p>Receive Message  </p>\n</li>\n<li><p>Peek Message  </p>\n</li>\n<li><p>Receive Journal Message  </p>\n</li>\n<li><p>Get Queue Properties  </p>\n</li>\n<li><p>Set Queue Properties  </p>\n</li>\n<li><p>Get Permissions  </p>\n</li>\n<li><p>Set Permissions  </p>\n</li>\n<li><p>Take Queue Ownership  </p>\n</li>\n<li><p>Write Message  </p>\n<p>The following table shows whether this method is available in various Workgroup modes.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <!-- Can not find reference The following code example demonstrates the use of this method. -->\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#26\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create an AccessControlList.\n    AccessControlList^ list = gcnew AccessControlList();\n\n    // Create a new trustee to represent the &quot;Everyone&quot; user group.\n    Trustee^ tr = gcnew Trustee(&quot;Everyone&quot;);\n\n    // Create an AccessControlEntry, granting the trustee read access to\n    // the queue.\n    AccessControlEntry^ entry = gcnew AccessControlEntry(\n        tr, GenericAccessRights::Read,\n        StandardAccessRights::Read,\n        AccessControlEntryType::Allow);\n\n    // Add the AccessControlEntry to the AccessControlList.\n    list-&gt;Add(entry);\n\n    // Apply the AccessControlList to the queue.\n    queue-&gt;SetPermissions(list);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#26\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create an AccessControlList.\n        AccessControlList list = new AccessControlList();\n\n        // Create a new trustee to represent the &quot;Everyone&quot; user group.\n        Trustee tr = new Trustee(&quot;Everyone&quot;);\n\n        // Create an AccessControlEntry, granting the trustee read access to\n        // the queue.\n        AccessControlEntry entry = new AccessControlEntry(\n            tr, GenericAccessRights.Read,\n StandardAccessRights.Read,\n            AccessControlEntryType.Allow);\n\n        // Add the AccessControlEntry to the AccessControlList.\n        list.Add(entry);\n\n        // Apply the AccessControlList to the queue.\n        queue.SetPermissions(list);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_SetPermissions_System_Messaging_MessageQueueAccessControlEntry_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_SetPermissions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetPermissions(MessageQueueAccessControlEntry)</div>        \r\n          </div>\r\n    \r\n            <p>Assigns access rights to the queue based on the contents of an access control entry.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetPermissions (System.Messaging.MessageQueueAccessControlEntry ace);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ace</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueaccesscontrolentry\" data-linktype=\"relative-path\">MessageQueueAccessControlEntry</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.messagequeueaccesscontrolentry\" data-linktype=\"relative-path\">MessageQueueAccessControlEntry</a> that specifies a user, an access type, and a permission type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to grant, deny, or revoke rights by using an access control entry to specify trustee and rights information.  </p>\n<p> The trustee you specify when you construct the <code>ace</code> parameter can be an individual user, a group of users, or a computer. If the trustee is an individual, use the format <code>DOMAIN</code>\\<code>user</code>. You can specify &quot;.&quot; for the trustee to indicate the local computer.  </p>\n<p> The permissions you assign through <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_SetPermissions_\" data-linktype=\"relative-path\">SetPermissions</a> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_SetPermissions_\" data-linktype=\"relative-path\">SetPermissions</a>, the user and permissions information is appended to the bottom of the existing list.  </p>\n<p> The system examines each <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> in sequence until one of the following events occurs:  </p>\n<ul>\n<li><p>An access-denied <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> explicitly denies any of the requested access rights to one of the trustees listed in the thread&#39;s access token.  </p>\n</li>\n<li><p>One or more access-allowed <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> items for trustees listed in the thread&#39;s access token explicitly grant all the requested access rights.  </p>\n</li>\n<li><p>All <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  </p>\n<p>The rights to a queue, which you specify in the <code>rights</code> parameter when you construct your <a class=\"xref\" href=\"system.messaging.messagequeueaccesscontrolentry\" data-linktype=\"relative-path\">MessageQueueAccessControlEntry</a>, can be any combination of the following:  </p>\n</li>\n<li><p>Full Control  </p>\n</li>\n<li><p>Delete Message  </p>\n</li>\n<li><p>Receive Message  </p>\n</li>\n<li><p>Peek Message  </p>\n</li>\n<li><p>Receive Journal Message  </p>\n</li>\n<li><p>Get Queue Properties  </p>\n</li>\n<li><p>Set Queue Properties  </p>\n</li>\n<li><p>Get Permissions  </p>\n</li>\n<li><p>Set Permissions  </p>\n</li>\n<li><p>Take Queue Ownership  </p>\n</li>\n<li><p>Write Message  </p>\n<p>The <code>rights</code> parameter you specify in the constructor for the <code>ace</code> parameter is a flag of the <a class=\"xref\" href=\"system.messaging.messagequeueaccessrights\" data-linktype=\"relative-path\">MessageQueueAccessRights</a> enumeration. It represents a set of bit flags that you can combine using the bitwise operator OR when you build the <code>rights</code> parameter.  </p>\n<p>The following table shows whether this method is available in various Workgroup modes.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of SetPermissions.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#24\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Create a new trustee to represent the &quot;Everyone&quot; user group.\n    Trustee^ tr = gcnew Trustee(&quot;Everyone&quot;);\n\n    // Create a MessageQueueAccessControlEntry, granting the trustee the\n    // right to receive messages from the queue.\n    MessageQueueAccessControlEntry^ entry = gcnew\n        MessageQueueAccessControlEntry(\n        tr, MessageQueueAccessRights::ReceiveMessage,\n        AccessControlEntryType::Allow);\n\n    // Apply the MessageQueueAccessControlEntry to the queue.\n    queue-&gt;SetPermissions(entry);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#24\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Create a new trustee to represent the &quot;Everyone&quot; user group.\n        Trustee tr = new Trustee(&quot;Everyone&quot;);\n\n        // Create a MessageQueueAccessControlEntry, granting the trustee the\n        // right to receive messages from the queue.\n        MessageQueueAccessControlEntry entry = new\n            MessageQueueAccessControlEntry(\n            tr, MessageQueueAccessRights.ReceiveMessage,\n            AccessControlEntryType.Allow);\n\n        // Apply the MessageQueueAccessControlEntry to the queue.\n        queue.SetPermissions(entry);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_SetPermissions_System_String_System_Messaging_MessageQueueAccessRights_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_SetPermissions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetPermissions(String,MessageQueueAccessRights)</div>        \r\n          </div>\r\n    \r\n            <p>Gives a computer, group, or user the specified access rights.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetPermissions (string user, System.Messaging.MessageQueueAccessRights rights);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>user</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The individual, group, or computer that gets additional rights to the queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rights</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueaccessrights\" data-linktype=\"relative-path\">MessageQueueAccessRights</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.messagequeueaccessrights\" data-linktype=\"relative-path\">MessageQueueAccessRights</a> that indicates the set of rights to the queue that Message Queuing assigns to the <code>user</code> passed in.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>user</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to grant specified rights to an individual user. The user can be any valid trustee, which includes individual users, groups of users, or a computer. If the user is an individual, use the format <code>DOMAIN</code>\\<code>user</code> for the <code>user</code> parameter. You can specify &quot;.&quot; for the <code>user</code> parameter to indicate the local computer.  </p>\n<p> The permissions you assign through SetPermissions add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call SetPermissions, the user and permissions information is appended to the bottom of the existing list.  </p>\n<p> The system examines each <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> in sequence until one of the following events occurs:  </p>\n<ul>\n<li><p>An access-denied <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> explicitly denies any of the requested access rights to one of the trustees listed in the thread&#39;s access token.  </p>\n</li>\n<li><p>One or more access-allowed <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> items for trustees listed in the thread&#39;s access token explicitly grant all the requested access rights.  </p>\n</li>\n<li><p>All <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  </p>\n<p>The rights to a queue, specified in the <code>rights</code> parameter, can be any combination of the following:  </p>\n</li>\n<li><p>Full Control  </p>\n</li>\n<li><p>Delete Message  </p>\n</li>\n<li><p>Receive Message  </p>\n</li>\n<li><p>Peek Message  </p>\n</li>\n<li><p>Receive Journal Message  </p>\n</li>\n<li><p>Get Queue Properties  </p>\n</li>\n<li><p>Set Queue Properties  </p>\n</li>\n<li><p>Get Permissions  </p>\n</li>\n<li><p>Set Permissions  </p>\n</li>\n<li><p>Take Queue Ownership  </p>\n</li>\n<li><p>Write Message  </p>\n<p>The <a class=\"xref\" href=\"system.messaging.messagequeueaccessrights\" data-linktype=\"relative-path\">MessageQueueAccessRights</a> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the <code>rights</code> parameter.  </p>\n<p>With this overload, you can only grant permissions; you cannot revoke or deny them. You must use a different overload to explicitly grant any <a class=\"xref\" href=\"system.messaging.accesscontrolentrytype\" data-linktype=\"relative-path\">AccessControlEntryType</a> other than <code>Allow</code>.  </p>\n<p>The following table shows whether this method is available in various Workgroup modes.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of SetPermissions.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#23\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Grant all users in the &quot;Everyone&quot; user group the right to receive\n    // messages from the queue.\n    queue-&gt;SetPermissions(&quot;Everyone&quot;,\n        MessageQueueAccessRights::ReceiveMessage);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#23\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Grant all users in the &quot;Everyone&quot; user group the right to receive\n        // messages from the queue.\n        queue.SetPermissions(&quot;Everyone&quot;, MessageQueueAccessRights.ReceiveMessage);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_SetPermissions_System_String_System_Messaging_MessageQueueAccessRights_System_Messaging_AccessControlEntryType_\">\r\n    \r\n            <a id=\"System_Messaging_MessageQueue_SetPermissions_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetPermissions(String,MessageQueueAccessRights,AccessControlEntryType)</div>        \r\n          </div>\r\n    \r\n            <p>Gives a computer, group, or user the specified access rights, with the specified access control type (allow, deny, revoke, or set).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetPermissions (string user, System.Messaging.MessageQueueAccessRights rights, System.Messaging.AccessControlEntryType entryType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>user</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The individual, group, or computer that gets additional rights to the queue.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rights</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueaccessrights\" data-linktype=\"relative-path\">MessageQueueAccessRights</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.messagequeueaccessrights\" data-linktype=\"relative-path\">MessageQueueAccessRights</a> that indicates the set of rights to the queue that Message Queuing assigns to the <code>user</code> passed in.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>entryType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.accesscontrolentrytype\" data-linktype=\"relative-path\">AccessControlEntryType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.messaging.accesscontrolentrytype\" data-linktype=\"relative-path\">AccessControlEntryType</a> that specifies whether to grant, deny, or revoke the permissions specified by the <code>rights</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></div>\r\n                  </div>\r\n                  <p>An error occurred when accessing a Message Queuing method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this overload to grant, deny, or revoke specified rights for an individual user. The user can be any valid trustee, which includes individual users, groups of users, or a computer. If the user is an individual, use the format <code>DOMAIN</code>\\<code>user</code> for the <code>user</code> parameter. You can specify &quot;.&quot; for the <code>user</code> parameter to indicate the local computer.  </p>\n<p> The permissions you assign through <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_SetPermissions_\" data-linktype=\"relative-path\">SetPermissions</a> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_SetPermissions_\" data-linktype=\"relative-path\">SetPermissions</a>, the user and permissions information is appended to the bottom of the existing list.  </p>\n<p> The system examines each <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> in sequence until one of the following events occurs:  </p>\n<ul>\n<li><p>An access-denied <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> explicitly denies any of the requested access rights to one of the trustees listed in the thread&#39;s access token.  </p>\n</li>\n<li><p>One or more access-allowed <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> items for trustees listed in the thread&#39;s access token explicitly grant all the requested access rights.  </p>\n</li>\n<li><p>All <a class=\"xref\" href=\"system.messaging.accesscontrolentry\" data-linktype=\"relative-path\">AccessControlEntry</a> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  </p>\n<p>The rights to a queue, specified in the <code>rights</code> parameter, can be any combination of the following:  </p>\n</li>\n<li><p>Full Control  </p>\n</li>\n<li><p>Delete Message  </p>\n</li>\n<li><p>Receive Message  </p>\n</li>\n<li><p>Peek Message  </p>\n</li>\n<li><p>Receive Journal Message  </p>\n</li>\n<li><p>Get Queue Properties  </p>\n</li>\n<li><p>Set Queue Properties  </p>\n</li>\n<li><p>Get Permissions  </p>\n</li>\n<li><p>Set Permissions  </p>\n</li>\n<li><p>Take Queue Ownership  </p>\n</li>\n<li><p>Write Message  </p>\n<p>The <a class=\"xref\" href=\"system.messaging.messagequeueaccessrights\" data-linktype=\"relative-path\">MessageQueueAccessRights</a> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the <code>rights</code> parameter.  </p>\n<p>The following table shows whether this method is available in various Workgroup modes.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Workgroup mode</th>\n<th>Available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local computer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Local computer and direct format name</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Remote computer</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Remote computer and direct format name</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of SetPermissions.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue2#25\">\n    // Connect to a queue on the local computer.\n    MessageQueue^ queue = gcnew MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n    // Grant all users in the &quot;Everyone&quot; user group the right to receive\n    // messages from the queue.\n    queue-&gt;SetPermissions(&quot;Everyone&quot;,\n        MessageQueueAccessRights::ReceiveMessage,\n        AccessControlEntryType::Allow);\n\n    queue-&gt;Close();\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue2#25\">\n        // Connect to a queue on the local computer.\n        MessageQueue queue = new MessageQueue(&quot;.\\\\exampleQueue&quot;);\n\n        // Grant all users in the &quot;Everyone&quot; user group the right to receive\n        // messages from the queue.\n        queue.SetPermissions(&quot;Everyone&quot;, MessageQueueAccessRights.ReceiveMessage,\n            AccessControlEntryType.Allow);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_PeekCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeekCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a message is read without being removed from the queue. This is a result of the asynchronous operation, <span class=\"xref\">stem.Messaging.MessageQueue.BeginPeek*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Messaging.PeekCompletedEventHandler PeekCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> is used in asynchronous processing to raise the PeekCompleted event when a message is available in the queue.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_System_IAsyncResult_\" data-linktype=\"relative-path\">EndPeek(IAsyncResult)</a> is used to complete the operation initiated by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> and peek the message when the PeekCompleted event is raised.  </p>\n<p> When you create a <a class=\"xref\" href=\"system.messaging.peekcompletedeventhandler\" data-linktype=\"relative-path\">PeekCompletedEventHandler</a> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an event handler named <code>MyPeekCompleted</code>, attaches it to the PeekCompleted event handler delegate, and calls <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> to initiate an asynchronous peek operation on the queue that is located at the path &quot;.\\myQueue&quot;. When a PeekCompleted event is raised, the example peeks the message and writes its body to the screen. The example then calls <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> again to initiate a new asynchronous peek operation  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue.BeginPeek_noparms#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// This example performs asynchronous peek operation\n// processing.\n//*************************************************\nref class MyNewQueue\n{\npublic:\n\n   // Provides an event handler for the PeekCompleted\n   // event.\n   static void MyPeekCompleted( Object^ source, PeekCompletedEventArgs^ asyncResult )\n   {\n      // Connect to the queue.\n      MessageQueue^ mq = dynamic_cast&lt;MessageQueue^&gt;(source);\n\n      // End the asynchronous peek operation.\n      Message^ m = mq-&gt;EndPeek( asyncResult-&gt;AsyncResult );\n\n      // Display message information on the screen.\n      Console::WriteLine( &quot;Message: {0}&quot;, static_cast&lt;String^&gt;(m-&gt;Body) );\n\n      // Restart the asynchronous peek operation.\n      mq-&gt;BeginPeek();\n      return;\n   }\n};\n\n// Provides an entry point into the application.\n//         \nint main()\n{\n   // Create an instance of MessageQueue. Set its formatter.\n   MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n   array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n   p[ 0 ] = String::typeid;\n   myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n   // Add an event handler for the PeekCompleted event.\n   myQueue-&gt;PeekCompleted += gcnew PeekCompletedEventHandler( MyNewQueue::MyPeekCompleted );\n\n   // Begin the asynchronous peek operation.\n   myQueue-&gt;BeginPeek();\n\n   // Do other work on the current thread.\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.BeginPeek_noparms#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example performs asynchronous peek operation\n\t\t// processing.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create an instance of MessageQueue. Set its formatter.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Add an event handler for the PeekCompleted event.\n\t\t\tmyQueue.PeekCompleted += new \n\t\t\t\tPeekCompletedEventHandler(MyPeekCompleted);\n\t\t\t\n\t\t\t// Begin the asynchronous peek operation.\n\t\t\tmyQueue.BeginPeek();\n\t\t\t\n\t\t\t// Do other work on the current thread.\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Provides an event handler for the PeekCompleted\n\t\t// event.\n\t\t//**************************************************\n\t\t\n\t\tprivate static void MyPeekCompleted(Object source, \n\t\t\tPeekCompletedEventArgs asyncResult)\n\t\t{\n\t\t\t// Connect to the queue.\n\t\t\tMessageQueue mq = (MessageQueue)source;\n\n\t\t\t// End the asynchronous peek operation.\n\t\t\tMessage m = mq.EndPeek(asyncResult.AsyncResult);\n\n\t\t\t// Display message information on the screen.\n\t\t\tConsole.WriteLine(&quot;Message: &quot; + (string)m.Body);\n\n\t\t\t// Restart the asynchronous peek operation.\n\t\t\tmq.BeginPeek();\n\t\t\t\n\t\t\treturn; \n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.BeginPeek_noparms#1\">Imports System\nImports System.Messaging\n\n\n\n\n\n&#39; Provides a container class for the example.\nPublic Class MyNewQueue\n\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example performs asynchronous peek operation\n        &#39; processing.\n\n\n        Public Shared Sub Main()\n            &#39; Create an instance of MessageQueue. Set its formatter.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Add an event handler for the PeekCompleted event.\n            AddHandler myQueue.PeekCompleted, AddressOf _\n                MyPeekCompleted\n\n            &#39; Begin the asynchronous peek operation.\n            myQueue.BeginPeek()\n\n            &#39; Do other work on the current thread.\n            Return\n        End Sub &#39;Main\n\n\n        &#39;**************************************************\n        &#39; Provides an event handler for the PeekCompleted\n        &#39; event.\n        &#39;**************************************************\n\n        Private Shared Sub MyPeekCompleted(ByVal [source] As _\n            [Object], ByVal asyncResult As PeekCompletedEventArgs)\n\n            &#39; Connect to the queue.\n            Dim mq As MessageQueue = CType([source], MessageQueue)\n\n            &#39; End the asynchronous peek operation.\n            Dim m As Message = mq.EndPeek(asyncResult.AsyncResult)\n\n            &#39; Display message information on the screen.\n            Console.WriteLine((&quot;Message: &quot; + CStr(m.Body)))\n\n            &#39; Restart the asynchronous peek operation.\n            mq.BeginPeek()\n\n            Return\n\n        End Sub &#39;MyPeekCompleted\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Messaging_MessageQueue_ReceiveCompleted\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReceiveCompleted</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a message has been removed from the queue. This event is raised by the asynchronous operation, <span class=\"xref\">stem.Messaging.MessageQueue.BeginReceive*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Messaging.ReceiveCompletedEventHandler ReceiveCompleted;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> is used in asynchronous processing to raise the ReceiveCompleted event when a message is available in the queue.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndReceive_System_IAsyncResult_\" data-linktype=\"relative-path\">EndReceive(IAsyncResult)</a> is used to complete the operation initiated by a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> and peek the message when the ReceiveCompleted event is raised.  </p>\n<p> When you create a <a class=\"xref\" href=\"system.messaging.receivecompletedeventhandler\" data-linktype=\"relative-path\">ReceiveCompletedEventHandler</a> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates an event handler named <code>MyReceiveCompleted</code>, attaches it to the ReceiveCompleted event handler delegate, and calls <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> to initiate an asynchronous receive operation on the queue that is located at the path &quot;.\\myQueue&quot;. When a ReceiveCompleted event is raised, the example receives the message and writes its body to the screen. The example then calls <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginReceive_\" data-linktype=\"relative-path\">BeginReceive</a> again to initiate a new asynchronous receive operation.  </p>\n<pre><code class=\"lang-cs\" name=\"MessageQueue.ReceiveCompleted#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example performs asynchronous receive operation\n\t\t// processing.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create an instance of MessageQueue. Set its formatter.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Add an event handler for the ReceiveCompleted event.\n\t\t\tmyQueue.ReceiveCompleted += new \n\t\t\t\tReceiveCompletedEventHandler(MyReceiveCompleted);\n\t\t\t\n\t\t\t// Begin the asynchronous receive operation.\n\t\t\tmyQueue.BeginReceive();\n\t\t\t\n\t\t\t// Do other work on the current thread.\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Provides an event handler for the ReceiveCompleted\n\t\t// event.\n\t\t//**************************************************\n\t\t\n\t\tprivate static void MyReceiveCompleted(Object source, \n\t\t\tReceiveCompletedEventArgs asyncResult)\n\t\t{\n\t\t\t// Connect to the queue.\n\t\t\tMessageQueue mq = (MessageQueue)source;\n\n\t\t\t// End the asynchronous Receive operation.\n\t\t\tMessage m = mq.EndReceive(asyncResult.AsyncResult);\n\n\t\t\t// Display message information on the screen.\n\t\t\tConsole.WriteLine(&quot;Message: &quot; + (string)m.Body);\n\n\t\t\t// Restart the asynchronous Receive operation.\n\t\t\tmq.BeginReceive();\n\t\t\t\n\t\t\treturn; \n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MessageQueue.ReceiveCompleted#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\nref class MyNewQueue\n{\npublic:\n\n   //*************************************************\n   // Provides an event handler for the ReceiveCompleted\n   // event.\n   //*************************************************\n   static void MyReceiveCompleted( Object^ source, ReceiveCompletedEventArgs^ asyncResult )\n   {\n      // Connect to the queue.\n      MessageQueue^ mq = dynamic_cast&lt;MessageQueue^&gt;(source);\n\n      // End the asynchronous Receive operation.\n      Message^ m = mq-&gt;EndReceive( asyncResult-&gt;AsyncResult );\n\n      // Display message information on the screen.\n      Console::WriteLine( &quot;Message: {0}&quot;, m-&gt;Body );\n\n      // Restart the asynchronous Receive operation.\n      mq-&gt;BeginReceive();\n      return;\n   }\n};\n\n\n//*************************************************\n// Provides an entry point into the application.\n//         \n// This example performs asynchronous receive operation\n// processing.\n//*************************************************\nint main()\n{\n   // Create an instance of MessageQueue. Set its formatter.\n   MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n   array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n   p[ 0 ] = String::typeid;\n   myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n   // Add an event handler for the ReceiveCompleted event.\n   myQueue-&gt;ReceiveCompleted += gcnew ReceiveCompletedEventHandler( MyNewQueue::MyReceiveCompleted );\n\n   // Begin the asynchronous receive operation.\n   myQueue-&gt;BeginReceive();\n\n   // Do other work on the current thread.\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.ReceiveCompleted#1\">Imports System\nImports System.Messaging\n\nPublic Class MyNewQueue\n\n\n        &#39;\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example performs asynchronous receive operation\n        &#39; processing.\n        &#39;\n\n        Public Shared Sub Main()\n\n            &#39; Create an instance of MessageQueue. Set its formatter.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Add an event handler for the ReceiveCompleted event.\n            AddHandler myQueue.ReceiveCompleted, AddressOf _\n                MyReceiveCompleted\n\n            &#39; Begin the asynchronous receive operation.\n            myQueue.BeginReceive()\n\n            &#39; Do other work on the current thread.\n\n            Return\n\n        End Sub &#39;Main\n\n\n        &#39;\n        &#39; Provides an event handler for the ReceiveCompleted\n        &#39; event.\n        &#39;\n\n        Private Shared Sub MyReceiveCompleted(ByVal [source] As _\n            [Object], ByVal asyncResult As ReceiveCompletedEventArgs)\n\n            &#39; Connect to the queue.\n            Dim mq As MessageQueue = CType([source], MessageQueue)\n\n            &#39; End the asynchronous Receive operation.\n            Dim m As Message = mq.EndReceive(asyncResult.AsyncResult)\n\n            &#39; Display message information on the screen.\n            Console.WriteLine((&quot;Message: &quot; + CStr(m.Body)))\n\n            &#39; Restart the asynchronous Receive operation.\n            mq.BeginReceive()\n\n            Return\n\n        End Sub &#39;MyReceiveCompleted\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Messaging.MessageQueue.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Messaging.MessageQueue.yml\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue..ctor\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.AccessMode\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Authenticate\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.BasePriority\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.BeginPeek\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.BeginReceive\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.CanRead\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.CanWrite\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Category\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.ClearConnectionCache\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Close\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Create\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.CreateCursor\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.CreateTime\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.DefaultPropertiesToSend\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Delete\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.DenySharedReceive\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.EnableConnectionCache\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.EncryptionRequired\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.EndPeek\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.EndReceive\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Exists\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.FormatName\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Formatter\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.GetAllMessages\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.GetMachineId\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.GetMessageEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.GetMessageEnumerator2\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.GetMessageQueueEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.GetPrivateQueuesByMachine\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.GetPublicQueues\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.GetPublicQueuesByCategory\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.GetPublicQueuesByLabel\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.GetPublicQueuesByMachine\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.GetSecurityContext\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Id\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.InfiniteQueueSize\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.InfiniteTimeout\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Label\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.LastModifyTime\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.MachineName\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.MaximumJournalSize\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.MaximumQueueSize\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.MessageReadPropertyFilter\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.MulticastAddress\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Path\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Peek\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.PeekByCorrelationId\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.PeekById\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.PeekByLookupId\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.PeekCompleted\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.add_PeekCompleted\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.remove_PeekCompleted\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Purge\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.QueueName\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.ReadHandle\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Receive\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.ReceiveByCorrelationId\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.ReceiveById\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.ReceiveByLookupId\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.ReceiveCompleted\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.add_ReceiveCompleted\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.remove_ReceiveCompleted\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Refresh\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.ResetPermissions\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Send\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.SetPermissions\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.SynchronizingObject\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.Transactional\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.UseJournalQueue\">\r\n<meta name=\"APIName\" content=\"System.Messaging.MessageQueue.WriteHandle\">\r\n<meta name=\"APILocation\" content=\"System.Messaging.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"3bd0a893-ce09-1db8-bb10-d7eeeb8bc26d\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Messaging\\MessageQueue.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides access to a queue on a Message Queuing server.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Messaging/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Messaging.MessageQueue\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Messaging.MessageQueue.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Messaging.MessageQueue.yml","open_to_public_contributors":true,"api_name":["System.Messaging.MessageQueue","System.Messaging.MessageQueue..ctor","System.Messaging.MessageQueue.AccessMode","System.Messaging.MessageQueue.Authenticate","System.Messaging.MessageQueue.BasePriority","System.Messaging.MessageQueue.BeginPeek","System.Messaging.MessageQueue.BeginReceive","System.Messaging.MessageQueue.CanRead","System.Messaging.MessageQueue.CanWrite","System.Messaging.MessageQueue.Category","System.Messaging.MessageQueue.ClearConnectionCache","System.Messaging.MessageQueue.Close","System.Messaging.MessageQueue.Create","System.Messaging.MessageQueue.CreateCursor","System.Messaging.MessageQueue.CreateTime","System.Messaging.MessageQueue.DefaultPropertiesToSend","System.Messaging.MessageQueue.Delete","System.Messaging.MessageQueue.DenySharedReceive","System.Messaging.MessageQueue.Dispose","System.Messaging.MessageQueue.EnableConnectionCache","System.Messaging.MessageQueue.EncryptionRequired","System.Messaging.MessageQueue.EndPeek","System.Messaging.MessageQueue.EndReceive","System.Messaging.MessageQueue.Exists","System.Messaging.MessageQueue.FormatName","System.Messaging.MessageQueue.Formatter","System.Messaging.MessageQueue.GetAllMessages","System.Messaging.MessageQueue.GetEnumerator","System.Messaging.MessageQueue.GetMachineId","System.Messaging.MessageQueue.GetMessageEnumerator","System.Messaging.MessageQueue.GetMessageEnumerator2","System.Messaging.MessageQueue.GetMessageQueueEnumerator","System.Messaging.MessageQueue.GetPrivateQueuesByMachine","System.Messaging.MessageQueue.GetPublicQueues","System.Messaging.MessageQueue.GetPublicQueuesByCategory","System.Messaging.MessageQueue.GetPublicQueuesByLabel","System.Messaging.MessageQueue.GetPublicQueuesByMachine","System.Messaging.MessageQueue.GetSecurityContext","System.Messaging.MessageQueue.Id","System.Messaging.MessageQueue.InfiniteQueueSize","System.Messaging.MessageQueue.InfiniteTimeout","System.Messaging.MessageQueue.Label","System.Messaging.MessageQueue.LastModifyTime","System.Messaging.MessageQueue.MachineName","System.Messaging.MessageQueue.MaximumJournalSize","System.Messaging.MessageQueue.MaximumQueueSize","System.Messaging.MessageQueue.MessageReadPropertyFilter","System.Messaging.MessageQueue.MulticastAddress","System.Messaging.MessageQueue.Path","System.Messaging.MessageQueue.Peek","System.Messaging.MessageQueue.PeekByCorrelationId","System.Messaging.MessageQueue.PeekById","System.Messaging.MessageQueue.PeekByLookupId","System.Messaging.MessageQueue.PeekCompleted","System.Messaging.MessageQueue.add_PeekCompleted","System.Messaging.MessageQueue.remove_PeekCompleted","System.Messaging.MessageQueue.Purge","System.Messaging.MessageQueue.QueueName","System.Messaging.MessageQueue.ReadHandle","System.Messaging.MessageQueue.Receive","System.Messaging.MessageQueue.ReceiveByCorrelationId","System.Messaging.MessageQueue.ReceiveById","System.Messaging.MessageQueue.ReceiveByLookupId","System.Messaging.MessageQueue.ReceiveCompleted","System.Messaging.MessageQueue.add_ReceiveCompleted","System.Messaging.MessageQueue.remove_ReceiveCompleted","System.Messaging.MessageQueue.Refresh","System.Messaging.MessageQueue.ResetPermissions","System.Messaging.MessageQueue.Send","System.Messaging.MessageQueue.SetPermissions","System.Messaging.MessageQueue.SynchronizingObject","System.Messaging.MessageQueue.Transactional","System.Messaging.MessageQueue.UseJournalQueue","System.Messaging.MessageQueue.WriteHandle"],"api_location":["System.Messaging.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Messaging.MessageQueue","System::Messaging::MessageQueue","System.Messaging.MessageQueue.#ctor","System::Messaging::MessageQueue::#ctor","System.Messaging.MessageQueue.AccessMode","System::Messaging::MessageQueue::AccessMode","System.Messaging.MessageQueue.Authenticate","System::Messaging::MessageQueue::Authenticate","System.Messaging.MessageQueue.BasePriority","System::Messaging::MessageQueue::BasePriority","System.Messaging.MessageQueue.BeginPeek","System::Messaging::MessageQueue::BeginPeek","System.Messaging.MessageQueue.BeginReceive","System::Messaging::MessageQueue::BeginReceive","System.Messaging.MessageQueue.CanRead","System::Messaging::MessageQueue::CanRead","System.Messaging.MessageQueue.CanWrite","System::Messaging::MessageQueue::CanWrite","System.Messaging.MessageQueue.Category","System::Messaging::MessageQueue::Category","System.Messaging.MessageQueue.ClearConnectionCache","System::Messaging::MessageQueue::ClearConnectionCache","System.Messaging.MessageQueue.Close","System::Messaging::MessageQueue::Close","System.Messaging.MessageQueue.Create","System::Messaging::MessageQueue::Create","System.Messaging.MessageQueue.CreateCursor","System::Messaging::MessageQueue::CreateCursor","System.Messaging.MessageQueue.CreateTime","System::Messaging::MessageQueue::CreateTime","System.Messaging.MessageQueue.DefaultPropertiesToSend","System::Messaging::MessageQueue::DefaultPropertiesToSend","System.Messaging.MessageQueue.Delete","System::Messaging::MessageQueue::Delete","System.Messaging.MessageQueue.DenySharedReceive","System::Messaging::MessageQueue::DenySharedReceive","System.Messaging.MessageQueue.Dispose","System::Messaging::MessageQueue::Dispose","System.Messaging.MessageQueue.EnableConnectionCache","System::Messaging::MessageQueue::EnableConnectionCache","System.Messaging.MessageQueue.EncryptionRequired","System::Messaging::MessageQueue::EncryptionRequired","System.Messaging.MessageQueue.EndPeek","System::Messaging::MessageQueue::EndPeek","System.Messaging.MessageQueue.EndReceive","System::Messaging::MessageQueue::EndReceive","System.Messaging.MessageQueue.Exists","System::Messaging::MessageQueue::Exists","System.Messaging.MessageQueue.FormatName","System::Messaging::MessageQueue::FormatName","System.Messaging.MessageQueue.Formatter","System::Messaging::MessageQueue::Formatter","System.Messaging.MessageQueue.GetAllMessages","System::Messaging::MessageQueue::GetAllMessages","System.Messaging.MessageQueue.GetEnumerator","System::Messaging::MessageQueue::GetEnumerator","System.Messaging.MessageQueue.GetMachineId","System::Messaging::MessageQueue::GetMachineId","System.Messaging.MessageQueue.GetMessageEnumerator","System::Messaging::MessageQueue::GetMessageEnumerator","System.Messaging.MessageQueue.GetMessageEnumerator2","System::Messaging::MessageQueue::GetMessageEnumerator2","System.Messaging.MessageQueue.GetMessageQueueEnumerator","System::Messaging::MessageQueue::GetMessageQueueEnumerator","System.Messaging.MessageQueue.GetPrivateQueuesByMachine","System::Messaging::MessageQueue::GetPrivateQueuesByMachine","System.Messaging.MessageQueue.GetPublicQueues","System::Messaging::MessageQueue::GetPublicQueues","System.Messaging.MessageQueue.GetPublicQueuesByCategory","System::Messaging::MessageQueue::GetPublicQueuesByCategory","System.Messaging.MessageQueue.GetPublicQueuesByLabel","System::Messaging::MessageQueue::GetPublicQueuesByLabel","System.Messaging.MessageQueue.GetPublicQueuesByMachine","System::Messaging::MessageQueue::GetPublicQueuesByMachine","System.Messaging.MessageQueue.GetSecurityContext","System::Messaging::MessageQueue::GetSecurityContext","System.Messaging.MessageQueue.Id","System::Messaging::MessageQueue::Id","System.Messaging.MessageQueue.InfiniteQueueSize","System::Messaging::MessageQueue::InfiniteQueueSize","System.Messaging.MessageQueue.InfiniteTimeout","System::Messaging::MessageQueue::InfiniteTimeout","System.Messaging.MessageQueue.Label","System::Messaging::MessageQueue::Label","System.Messaging.MessageQueue.LastModifyTime","System::Messaging::MessageQueue::LastModifyTime","System.Messaging.MessageQueue.MachineName","System::Messaging::MessageQueue::MachineName","System.Messaging.MessageQueue.MaximumJournalSize","System::Messaging::MessageQueue::MaximumJournalSize","System.Messaging.MessageQueue.MaximumQueueSize","System::Messaging::MessageQueue::MaximumQueueSize","System.Messaging.MessageQueue.MessageReadPropertyFilter","System::Messaging::MessageQueue::MessageReadPropertyFilter","System.Messaging.MessageQueue.MulticastAddress","System::Messaging::MessageQueue::MulticastAddress","System.Messaging.MessageQueue.Path","System::Messaging::MessageQueue::Path","System.Messaging.MessageQueue.Peek","System::Messaging::MessageQueue::Peek","System.Messaging.MessageQueue.PeekByCorrelationId","System::Messaging::MessageQueue::PeekByCorrelationId","System.Messaging.MessageQueue.PeekById","System::Messaging::MessageQueue::PeekById","System.Messaging.MessageQueue.PeekByLookupId","System::Messaging::MessageQueue::PeekByLookupId","System.Messaging.MessageQueue.PeekCompleted","System::Messaging::MessageQueue::PeekCompleted","System.Messaging.MessageQueue.Purge","System::Messaging::MessageQueue::Purge","System.Messaging.MessageQueue.QueueName","System::Messaging::MessageQueue::QueueName","System.Messaging.MessageQueue.ReadHandle","System::Messaging::MessageQueue::ReadHandle","System.Messaging.MessageQueue.Receive","System::Messaging::MessageQueue::Receive","System.Messaging.MessageQueue.ReceiveByCorrelationId","System::Messaging::MessageQueue::ReceiveByCorrelationId","System.Messaging.MessageQueue.ReceiveById","System::Messaging::MessageQueue::ReceiveById","System.Messaging.MessageQueue.ReceiveByLookupId","System::Messaging::MessageQueue::ReceiveByLookupId","System.Messaging.MessageQueue.ReceiveCompleted","System::Messaging::MessageQueue::ReceiveCompleted","System.Messaging.MessageQueue.Refresh","System::Messaging::MessageQueue::Refresh","System.Messaging.MessageQueue.ResetPermissions","System::Messaging::MessageQueue::ResetPermissions","System.Messaging.MessageQueue.Send","System::Messaging::MessageQueue::Send","System.Messaging.MessageQueue.SetPermissions","System::Messaging::MessageQueue::SetPermissions","System.Messaging.MessageQueue.SynchronizingObject","System::Messaging::MessageQueue::SynchronizingObject","System.Messaging.MessageQueue.Transactional","System::Messaging::MessageQueue::Transactional","System.Messaging.MessageQueue.UseJournalQueue","System::Messaging::MessageQueue::UseJournalQueue","System.Messaging.MessageQueue.WriteHandle","System::Messaging::MessageQueue::WriteHandle"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"3bd0a893-ce09-1db8-bb10-d7eeeb8bc26d","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Messaging\\MessageQueue.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Messaging/MessageQueue.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"MessageQueue class | Microsoft Docs","_op_ogTitle":"MessageQueue class","description":"Provides access to a queue on a Message Queuing server.\n","toc_asset_id":"_splitted/System.Messaging/toc.json","toc_rel":"_splitted/System.Messaging/toc.json","source_url":"","ms.assetid":"System.Messaging.MessageQueue","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.messaging.messagequeue","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.messaging.messagequeue","fileRelativePath":"System.Messaging.MessageQueue.html"},"themesRelativePathToOutputRoot":"_themes/"}