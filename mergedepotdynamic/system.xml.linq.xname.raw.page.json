{"content":"    \r\n    <h1 id=\"System_Xml_Linq_XName\">\r\n      <span class=\"lang-csharp\">XName</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a name of an XML element or attribute.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.Serialization.KnownType(typeof(System.Xml.Linq.NameSerializer))]\npublic sealed class XName : IEquatable&lt;System.Xml.Linq.XName&gt;, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XName</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>XML names include a namespace and a local name. A <em>fully qualified name</em> is the combination of the namespace and local name.  </p>\n<h2 id=\"creating-an-xname-object\">Creating an XName Object</h2>\n<p> XName does not contain any public constructors. Instead, this class provides an implicit conversion from <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that allows you to create an XName. The most common place you use this conversion is when constructing an element or attribute: The first argument to the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> constructor is an XName. By passing a string, you take advantage of the implicit conversion. The following code creates an element with a name that is in no namespace:  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;ElementName&quot;, &quot;content&quot;);  \nConsole.WriteLine(root);\n</code></pre><p> In Visual Basic, it is more appropriate to use XML literals:  </p>\n<pre><code class=\"lang-vb\">\n                Dim root As XElement = &lt;ElementName&gt;content&lt;/ElementName&gt;  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;ElementName&gt;content&lt;/ElementName&gt;\n</code></pre><p> Assigning a string to an XName uses the implicit conversion from <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> The Visual Basic example creates the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> using XML literals. Even though XML literals are used, an XName object is created for the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.  </p>\n<p> In addition, you can call the <a class=\"xref\" href=\"system.xml.linq.xname#System_Xml_Linq_XName_Get_\" data-linktype=\"relative-path\">Get</a> method for an XName object. However, the recommended way is to use the implicit conversion from string.  </p>\n<h2 id=\"creating-an-xname-in-a-namespace\">Creating an XName in a Namespace</h2>\n<p> As with XML, an XName can be in a namespace, or it can be in no namespace.  </p>\n<p> For C#, the recommended approach for creating an XName in a namespace is to declare the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object, then use the override of the addition operator.  </p>\n<p> For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;ElementName&quot;, &quot;content&quot;);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = &lt;ElementName&gt;content&lt;/ElementName&gt;  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;ElementName xmlns=&quot;http://www.adventure-works.com&quot;&gt;content&lt;/ElementName&gt;\n</code></pre><h2 id=\"creating-an-xname-in-no-namespace\">Creating an XName in no Namespace</h2>\n<p> The <a class=\"xref\" href=\"system.xml.linq.xname#System_Xml_Linq_XName_Namespace_\" data-linktype=\"relative-path\">Namespace</a> property of an XName object is guaranteed to not be null. If the XName is in no namespace, then the <a class=\"xref\" href=\"system.xml.linq.xname#System_Xml_Linq_XName_Namespace_\" data-linktype=\"relative-path\">Namespace</a> property will be set to <a class=\"xref\" href=\"system.xml.linq.xnamespace#System_Xml_Linq_XNamespace_None_\" data-linktype=\"relative-path\">None</a>. The following code demonstrates this:  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;ElementName&quot;, &quot;content&quot;);  \nif (root.Name.Namespace == XNamespace.None)  \n    Console.WriteLine(&quot;The element is in no namespace.&quot;);  \nelse  \n    Console.WriteLine(&quot;The element is in a namespace.&quot;);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = &lt;ElementName&gt;content&lt;/ElementName&gt;  \nIf (root.Name.Namespace Is XNamespace.None) Then  \n    Console.WriteLine(&quot;The element is in no namespace.&quot;)  \nElse  \n    Console.WriteLine(&quot;The element is in a namespace.&quot;)  \nEnd If\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>The element is in no namespace.\n</code></pre><h2 id=\"using-expanded-names\">Using Expanded Names</h2>\n<p> You can also create an XName from a expanded XML name in the form <code>{namespace}localname</code>:  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;{http://www.adventure-works.com}ElementName&quot;, &quot;content&quot;);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = New XElement(&quot;{http://www.adventure-works.com}ElementName&quot;, &quot;content&quot;)  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;ElementName xmlns=&quot;http://www.adventure-works.com&quot;&gt;content&lt;/ElementName&gt;\n</code></pre><p> Be aware that creating an XName through an expanded name is less efficient than creating an <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object and using the override of the addition operator. It is also less efficient than importing a global namespace and using XML literals in Visual Basic.  </p>\n<p> If you create an XName using an expanded name, LINQ to XML must find the atomized instance of a namespace. This work must be repeated for every use of an expanded name. This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.  </p>\n<h2 id=\"xname-objects-are-atomized\">XName Objects are Atomized</h2>\n<p> XName objects are guaranteed to be atomized; that is, if two XName objects have exactly the same namespace and exactly the same local name, they will share the same instance. The equality and comparison operators are also provided explicitly for this purpose.  </p>\n<p> Among other benefits, this feature allows for faster execution of queries. When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison. It is much faster to determine that two references actually refer to the same object than to compare two strings.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_LocalName\" data-linktype=\"self-bookmark\">LocalName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the local (unqualified) part of the name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_Namespace\" data-linktype=\"self-bookmark\">Namespace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the namespace part of the fully qualified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_NamespaceName\" data-linktype=\"self-bookmark\">NamespaceName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the URI of the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> for this <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> is equal to this <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_Get_System_String_\" data-linktype=\"self-bookmark\">Get(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object from an expanded name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_Get_System_String_System_String_\" data-linktype=\"self-bookmark\">Get(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object from a local name and a namespace.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a hash code for this <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the expanded XML name in the format <code>{namespace}localname</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_op_Equality_System_Xml_Linq_XName_System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">op_Equality(XName,XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether two instances of <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_op_Implicit_System_String_\" data-linktype=\"self-bookmark\">op_Implicit(String)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_op_Inequality_System_Xml_Linq_XName_System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">op_Inequality(XName,XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether two instances of <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_System_IEquatable_System_Xml_Linq_XName__Equals_System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">IEquatable&lt;XName&gt;.Equals(XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the current <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> is equal to the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XName_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with the data required to serialize the target object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_LocalName\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_LocalName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LocalName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the local (unqualified) part of the name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string LocalName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the local (unqualified) part of the name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is guaranteed to not be <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the use of this property.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace ns = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(ns + &quot;Root&quot;, &quot;content&quot;);  \nConsole.WriteLine(root.Name);  \nConsole.WriteLine(root.Name.LocalName);  \nConsole.WriteLine(root.Name.Namespace);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = &lt;Root/&gt;  \n        Console.WriteLine(root.Name)  \n        Console.WriteLine(root.Name.LocalName)  \n        Console.WriteLine(root.Name.Namespace)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>{http://www.adventure-works.com}Root  \nRoot  \nhttp://www.adventure-works.com\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_Namespace\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_Namespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Namespace</div>        \r\n          </div>\r\n    \r\n            <p>Gets the namespace part of the fully qualified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XNamespace Namespace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> that contains the namespace part of the name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Namespace property is guaranteed to not be <code>null</code>. If an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> is in no namespace, this property returns <a class=\"xref\" href=\"system.xml.linq.xnamespace#System_Xml_Linq_XNamespace_None_\" data-linktype=\"relative-path\">None</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the use of this property.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace ns = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(ns + &quot;Root&quot;, &quot;content&quot;);  \nConsole.WriteLine(root.Name);  \nConsole.WriteLine(root.Name.LocalName);  \nConsole.WriteLine(root.Name.Namespace);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = &lt;Root/&gt;  \n        Console.WriteLine(root.Name)  \n        Console.WriteLine(root.Name.LocalName)  \n        Console.WriteLine(root.Name.Namespace)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>{http://www.adventure-works.com}Root  \nRoot  \nhttp://www.adventure-works.com\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_NamespaceName\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_NamespaceName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NamespaceName</div>        \r\n          </div>\r\n    \r\n            <p>Returns the URI of the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> for this <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string NamespaceName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The URI of the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> for this <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a convenience property to get the namespace name from an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This example creates an element in a namespace, and then prints the element&#39;s namespace.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;);  \nConsole.WriteLine(root.Name.NamespaceName);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = &lt;Root/&gt;  \n        Console.WriteLine(root.Name.NamespaceName)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>http://www.adventure-works.com\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> is equal to this <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to compare to the current <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> is equal to the current <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For two <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> objects to be equal, they must have the same expanded name.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_Get_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_Get_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Get(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object from an expanded name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XName Get (string expandedName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expandedName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains an expanded XML name in the format <code>{namespace}localname</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object constructed from the expanded name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method contains overloads that allow you to create an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. You can create it from a expanded XML name in the form <code>{namespace}localname</code>, or from a namespace and a local name, specified separately.  </p>\n<p> A much more common and easier way to create an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> is to use the implicit conversion from string.  </p>\n<p> Because <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are atomized, if there is an existing <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> with exactly the same name, the assigned variable will refer to the existing <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. If there is no existing <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>, a new one will be created and initialized.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the use of this method.  </p>\n<pre><code class=\"lang-c#\">\n                XName name = XName.Get(&quot;{http://www.adventure-works.com}Root&quot;);  \nXElement el = new XElement(name, &quot;content&quot;);  \nConsole.WriteLine(el);  \n\n// This is the preferred approach for specifying the XName in the  \n// constructor of XElement.  \nXNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement el2 = new XElement(aw + &quot;Root&quot;, &quot;content&quot;);  \nConsole.WriteLine(el2);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim name As XName = XName.Get(&quot;{http://www.adventure-works.com}Root&quot;)  \n        Dim el As XElement = New XElement(name, &quot;content&quot;)  \n        Console.WriteLine(el)  \n\n        &#39; The preferred approach for specifying an XName in a namespace  \n        &#39; for Visual Basic is to import a global namespace.  \n        Dim el2 As XElement = &lt;Root&gt;content&lt;/Root&gt;  \n        Console.WriteLine(el2)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;content&lt;/Root&gt;  \n&lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;content&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_Get_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_Get_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Get(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object from a local name and a namespace.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XName Get (string localName, string namespaceName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>localName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A local (unqualified) name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>namespaceName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An XML namespace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object created from the specified local name and namespace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method contains overloads that allow you to create an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. You can create it from an expanded XML name in the form <code>{namespace}localname</code>, or from a namespace and a local name, specified separately.  </p>\n<p> A much more common and easier way to create an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> is to use the implicit conversion from string.  </p>\n<p> Because <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are atomized, if there is an existing <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> with exactly the same name, the assigned variable will refer to the existing <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. If there is no existing <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>, a new one will be created and initialized.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows the use of this method.  </p>\n<pre><code class=\"lang-c#\">\n                XName name = XName.Get(&quot;Root&quot;, &quot;http://www.adventure-works.com&quot;);  \nXElement el = new XElement(name, &quot;content&quot;);  \nConsole.WriteLine(el);  \n\n// This is the preferred form.  \nXNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement el2 = new XElement(aw + &quot;Root&quot;, &quot;content&quot;);  \nConsole.WriteLine(el2);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim name As XName = XName.Get(&quot;{http://www.adventure-works.com}Root&quot;)  \n        Dim el As XElement = New XElement(name, &quot;content&quot;)  \n        Console.WriteLine(el)  \n\n        &#39; The preferred approach for specifying an XName in a namespace  \n        &#39; for Visual Basic is to import a global namespace.  \n        Dim el2 As XElement = &lt;Root&gt;content&lt;/Root&gt;  \n        Console.WriteLine(el2)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>&lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;content&lt;/Root&gt;  \n&lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;content&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_GetHashCode\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a hash code for this <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that contains the hash code for the <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method serves as a hash function for <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. You can use GetHashCode in hashing algorithms, or in data structures such as a hash table.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_ToString\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the expanded XML name in the format <code>{namespace}localname</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the expanded XML name in the format <code>{namespace}localname</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls <a class=\"xref\" href=\"system.console#System_Console_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, passing an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. This causes the ToString method to be called.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace ns = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(ns + &quot;Root&quot;, &quot;content&quot;);  \nConsole.WriteLine(root.Name);  \nConsole.WriteLine(root.Name.LocalName);  \nConsole.WriteLine(root.Name.Namespace);\n</code></pre><pre><code class=\"lang-vb\">Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = &lt;Root&gt;content&lt;/Root&gt;  \n        Console.WriteLine(root.Name)  \n        Console.WriteLine(root.Name.LocalName)  \n        Console.WriteLine(root.Name.Namespace)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>{http://www.adventure-works.com}Root  \nRoot  \nhttp://www.adventure-works.com\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_op_Equality_System_Xml_Linq_XName_System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(XName,XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether two instances of <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Xml.Linq.XName left, System.Xml.Linq.XName right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> and <code>right</code> are equal; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The operator overloads <code>==</code> and <code>!=</code> are included to enable comparisons between <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> and a <code>string</code>, such as<code>element.Name == &quot;SomeElementName&quot;</code>. The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only. These operators do not consider the implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows some comparisons between <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> objects and strings.  </p>\n<pre><code class=\"lang-c#\">\n                XName xn;  \nxn = XName.Get(&quot;Root&quot;);  \nConsole.WriteLine(xn == &quot;Root&quot;);  \n\nxn = XName.Get(&quot;Root&quot;, &quot;http://www.adventure-works.com&quot;);  \nConsole.WriteLine(xn == &quot;{http://www.adventure-works.com}Root&quot;);  \n\nXElement root = new XElement(&quot;Root&quot;, &quot;content&quot;);  \nConsole.WriteLine(root.Name == &quot;Root&quot;);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xn As XName  \nxn = XName.Get(&quot;Root&quot;)  \nConsole.WriteLine(xn = &quot;Root&quot;)  \n\nxn = XName.Get(&quot;Root&quot;, &quot;http://www.adventure-works.com&quot;)  \nConsole.WriteLine(xn = &quot;{http://www.adventure-works.com}Root&quot;)  \n\nDim root As XElement = New XElement(&quot;Root&quot;, &quot;content&quot;)  \nConsole.WriteLine(root.Name = &quot;Root&quot;)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>True  \nTrue  \nTrue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_op_Implicit_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(String)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XName op_Implicit (string expandedName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>expandedName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_op_Inequality_System_Xml_Linq_XName_System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(XName,XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether two instances of <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Xml.Linq.XName left, System.Xml.Linq.XName right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> and <code>right</code> are not equal; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The operator overloads <code>==</code> and <code>!=</code> are included to enable comparisons between <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> and a string, such as<code>element.Name == &quot;SomeElementName&quot;</code>. The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only. These operators do not consider the implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following C# example compares an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object to a string, which invokes this operator.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;, &quot;content&quot;);  \n\nConsole.WriteLine(root.Name != &quot;{http://www.adventure-works.com}Root&quot;);  \n\n// the following is the preferred idiom  \nConsole.WriteLine(root.Name != aw + &quot;Root&quot;);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root As XElement = &lt;Root&gt;content&lt;/Root&gt;  \n        Console.WriteLine(root.Name &lt;&gt; &quot;{http://www.adventure-works.com}Root&quot;)  \n\n        &#39; the following is the preferred idiom  \n        Console.WriteLine(root.Name &lt;&gt; GetXmlNamespace() + &quot;Root&quot;)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>False  \nFalse\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_System_IEquatable_System_Xml_Linq_XName__Equals_System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_System_IEquatable_System_Xml_Linq_XName__Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEquatable&lt;XName&gt;.Equals(XName)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the current <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> is equal to the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IEquatable&lt;XName&gt;.Equals (System.Xml.Linq.XName other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to compare with this <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> is equal to the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>, otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XName_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XName_System_Runtime_Serialization_ISerializable_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with the data required to serialize the target object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> to populate with data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination (see <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a>) for this serialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is used internally to serialize object graphs that contain LINQ to XML objects.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XName.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XName.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.Equals\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.Get\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.LocalName\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.Namespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.NamespaceName\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.op_Implicit\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.op_op_Implicit\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.IEquatable&lt;XName&gt;.Equals\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.ISerializable.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XName.ToString\">\r\n<meta name=\"APILocation\" content=\"System.Xml.Linq.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"1ca2675c-72b3-9df7-7cb2-e3f1511e218a\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Xml.Linq\\XName.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a name of an XML element or attribute.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Linq/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Linq.XName\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XName.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XName.yml","open_to_public_contributors":true,"api_name":["System.Xml.Linq.XName","System.Xml.Linq.XName.Equals","System.Xml.Linq.XName.Get","System.Xml.Linq.XName.GetHashCode","System.Xml.Linq.XName.LocalName","System.Xml.Linq.XName.Namespace","System.Xml.Linq.XName.NamespaceName","System.Xml.Linq.XName.op_Equality","System.Xml.Linq.XName.op_op_Equality","System.Xml.Linq.XName.op_Implicit","System.Xml.Linq.XName.op_op_Implicit","System.Xml.Linq.XName.op_Inequality","System.Xml.Linq.XName.op_op_Inequality","System.Xml.Linq.XName.IEquatable<XName>.Equals","System.Xml.Linq.XName.ISerializable.GetObjectData","System.Xml.Linq.XName.ToString"],"api_location":["System.Xml.Linq.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Linq.XName","System::Xml::Linq::XName","System.Xml.Linq.XName.Equals","System::Xml::Linq::XName::Equals","System.Xml.Linq.XName.Get","System::Xml::Linq::XName::Get","System.Xml.Linq.XName.GetHashCode","System::Xml::Linq::XName::GetHashCode","System.Xml.Linq.XName.LocalName","System::Xml::Linq::XName::LocalName","System.Xml.Linq.XName.Namespace","System::Xml::Linq::XName::Namespace","System.Xml.Linq.XName.NamespaceName","System::Xml::Linq::XName::NamespaceName","System.Xml.Linq.XName.op_Equality","System::Xml::Linq::XName::op_Equality","System.Xml.Linq.XName.op_Implicit","System::Xml::Linq::XName::op_Implicit","System.Xml.Linq.XName.op_Inequality","System::Xml::Linq::XName::op_Inequality","System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals","System::Xml::Linq::XName::System#IEquatable{System#Xml#Linq#XName}#Equals","System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData","System::Xml::Linq::XName::System#Runtime#Serialization#ISerializable#GetObjectData","System.Xml.Linq.XName.ToString","System::Xml::Linq::XName::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"1ca2675c-72b3-9df7-7cb2-e3f1511e218a","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Xml.Linq\\XName.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Linq/XName.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XName class | Microsoft Docs","_op_ogTitle":"XName class","description":"Represents a name of an XML element or attribute.\n","toc_asset_id":"_splitted/System.Xml.Linq/toc.json","toc_rel":"_splitted/System.Xml.Linq/toc.json","source_url":"","ms.assetid":"System.Xml.Linq.XName","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xname","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xname","fileRelativePath":"System.Xml.Linq.XName.html"},"themesRelativePathToOutputRoot":"_themes/"}